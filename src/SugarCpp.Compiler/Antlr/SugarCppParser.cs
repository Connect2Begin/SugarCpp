//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-18 12:59:55

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Tuple=48;
	public const int NEWLINE=49;
	public const int NUMBER=50;
	public const int Namespace=51;
	public const int Right_Bracket=52;
	public const int Root=53;
	public const int SP=54;
	public const int STRING=55;
	public const int Stmt_Block=56;
	public const int Stmt_Defer=57;
	public const int Stmt_Finally=58;
	public const int Stmt_For=59;
	public const int Stmt_If=60;
	public const int Stmt_Loop=61;
	public const int Stmt_Return=62;
	public const int Stmt_Switch=63;
	public const int Stmt_Try=64;
	public const int Stmt_Typedef=65;
	public const int Stmt_Unless=66;
	public const int Stmt_Until=67;
	public const int Stmt_Using=68;
	public const int Stmt_While=69;
	public const int Switch_Item=70;
	public const int Type_Array=71;
	public const int Type_Ident=72;
	public const int Type_Ref=73;
	public const int Type_Star=74;
	public const int Type_Template=75;
	public const int White_Space=76;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:200:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(200, 1);
		try
		{
			// SugarCpp.g:201:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:201:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(201, 4);
			// SugarCpp.g:201:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:201:4: NEWLINE
					{
					DebugLocation(201, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root533);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(201, 13);
			PushFollow(Follow._global_block_in_root536);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(201, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root538);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 201:30: -> ^( Root global_block )
			{
				DebugLocation(201, 33);
				// SugarCpp.g:201:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(201, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(201, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:204:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(204, 1);
		try
		{
			// SugarCpp.g:205:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:205:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(205, 4);
			// SugarCpp.g:205:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==120||(LA3_0>=129 && LA3_0<=130)||LA3_0==134||LA3_0==138||LA3_0==142||LA3_0==147||LA3_0==152||LA3_0==154||LA3_0==156||LA3_0==163))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:5: node ( NEWLINE )+
					{
					DebugLocation(205, 5);
					PushFollow(Follow._node_in_global_block558);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(205, 10);
					// SugarCpp.g:205:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:205:10: NEWLINE
							{
							DebugLocation(205, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block560);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 205:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(205, 24);
				// SugarCpp.g:205:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(205, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(205, 39);
				// SugarCpp.g:205:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(205, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:208:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(208, 1);
		try
		{
			// SugarCpp.g:209:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:209:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._func_def_in_node583);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:210:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._class_def_in_node588);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:211:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(211, 4);
				PushFollow(Follow._enum_def_in_node593);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:212:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._global_alloc_in_node598);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:213:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 4);
				PushFollow(Follow._global_using_in_node603);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:214:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(214, 4);
				PushFollow(Follow._global_typedef_in_node608);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:215:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._import_def_in_node613);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:216:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._namespace_def_in_node618);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:219:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args630); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:221:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args635); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:222:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._ident_in_attribute_args640);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:225:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==130))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(226, 4);
				PushFollow(Follow._ident_in_attribute_item651);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(226, 10);
				// SugarCpp.g:226:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==84))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:226:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(226, 11);
					char_literal18=(IToken)Match(input,84,Follow._84_in_attribute_item654);  
					stream_84.Add(char_literal18);

					DebugLocation(226, 15);
					PushFollow(Follow._attribute_args_in_attribute_item656);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(226, 30);
					// SugarCpp.g:226:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==91))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:226:31: ',' attribute_args
							{
							DebugLocation(226, 31);
							char_literal20=(IToken)Match(input,91,Follow._91_in_attribute_item659);  
							stream_91.Add(char_literal20);

							DebugLocation(226, 35);
							PushFollow(Follow._attribute_args_in_attribute_item661);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(226, 52);
					char_literal22=(IToken)Match(input,85,Follow._85_in_attribute_item665);  
					stream_85.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 226:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(226, 61);
					// SugarCpp.g:226:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(226, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(226, 79);
					// SugarCpp.g:226:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(226, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:227:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(227, 4);
				string_literal23=(IToken)Match(input,130,Follow._130_in_attribute_item683);  
				stream_130.Add(string_literal23);

				DebugLocation(227, 12);
				// SugarCpp.g:227:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==84))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(227, 13);
					char_literal24=(IToken)Match(input,84,Follow._84_in_attribute_item686);  
					stream_84.Add(char_literal24);

					DebugLocation(227, 17);
					PushFollow(Follow._attribute_args_in_attribute_item688);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(227, 32);
					// SugarCpp.g:227:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==91))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:227:33: ',' attribute_args
							{
							DebugLocation(227, 33);
							char_literal26=(IToken)Match(input,91,Follow._91_in_attribute_item691);  
							stream_91.Add(char_literal26);

							DebugLocation(227, 37);
							PushFollow(Follow._attribute_args_in_attribute_item693);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(227, 54);
					char_literal28=(IToken)Match(input,85,Follow._85_in_attribute_item697);  
					stream_85.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 227:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(227, 63);
					// SugarCpp.g:227:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(227, 75);
					adaptor.AddChild(root_1, stream_130.NextNode());
					DebugLocation(227, 83);
					// SugarCpp.g:227:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(227, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:230:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(231, 4);
			// SugarCpp.g:231:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==120))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(231, 5);
					char_literal29=(IToken)Match(input,120,Follow._120_in_attribute722);  
					stream_120.Add(char_literal29);

					DebugLocation(231, 9);
					PushFollow(Follow._attribute_item_in_attribute724);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(231, 24);
					// SugarCpp.g:231:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==91))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:25: ',' attribute_item
							{
							DebugLocation(231, 25);
							char_literal31=(IToken)Match(input,91,Follow._91_in_attribute727);  
							stream_91.Add(char_literal31);

							DebugLocation(231, 29);
							PushFollow(Follow._attribute_item_in_attribute729);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(231, 46);
					char_literal33=(IToken)Match(input,121,Follow._121_in_attribute733);  
					stream_121.Add(char_literal33);

					DebugLocation(231, 50);
					// SugarCpp.g:231:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:50: NEWLINE
							{
							DebugLocation(231, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute735);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:61: -> ( attribute_item )+
			{
				DebugLocation(231, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(231, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:234:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:235:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(235, 4);
			// SugarCpp.g:235:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==120))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:4: attribute
				{
				DebugLocation(235, 4);
				PushFollow(Follow._attribute_in_global_alloc754);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(235, 15);
			PushFollow(Follow._ident_list_in_global_alloc757);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(235, 26);
			// SugarCpp.g:235:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==101))
			{
				alt19 = 1;
			}
			else if ((LA19_0==103))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(235, 28);
				char_literal37=(IToken)Match(input,101,Follow._101_in_global_alloc761);  
				stream_101.Add(char_literal37);

				DebugLocation(235, 32);
				PushFollow(Follow._type_name_in_global_alloc763);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(235, 42);
				// SugarCpp.g:235:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 103:
				case 110:
					{
					alt17 = 1;
					}
					break;
				case 84:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:44: ( '=' | ':=' ) expr
					{
					DebugLocation(235, 44);
					// SugarCpp.g:235:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==110))
					{
						alt15 = 1;
					}
					else if ((LA15_0==103))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:235:45: '='
						{
						DebugLocation(235, 45);
						char_literal39=(IToken)Match(input,110,Follow._110_in_global_alloc768);  
						stream_110.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:235:51: ':='
						{
						DebugLocation(235, 51);
						string_literal40=(IToken)Match(input,103,Follow._103_in_global_alloc772);  
						stream_103.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(235, 57);
					PushFollow(Follow._expr_in_global_alloc775);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 235:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(235, 65);
						// SugarCpp.g:235:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(235, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(235, 84);
						// SugarCpp.g:235:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(235, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(235, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(235, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(235, 116);
						// SugarCpp.g:235:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(235, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:236:43: '(' ( expr_list )? ')'
					{
					DebugLocation(236, 43);
					char_literal42=(IToken)Match(input,84,Follow._84_in_global_alloc835);  
					stream_84.Add(char_literal42);

					DebugLocation(236, 47);
					// SugarCpp.g:236:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==77||LA16_0==82||LA16_0==84||LA16_0==86||(LA16_0>=88 && LA16_0<=89)||(LA16_0>=92 && LA16_0<=93)||(LA16_0>=119 && LA16_0<=120)||(LA16_0>=143 && LA16_0<=144)||LA16_0==163))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:236:47: expr_list
						{
						DebugLocation(236, 47);
						PushFollow(Follow._expr_list_in_global_alloc837);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(236, 58);
					char_literal44=(IToken)Match(input,85,Follow._85_in_global_alloc840);  
					stream_85.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 236:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(236, 65);
						// SugarCpp.g:236:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(236, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(236, 86);
						// SugarCpp.g:236:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(236, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(236, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(236, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(236, 118);
						// SugarCpp.g:236:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(236, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:237:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 237:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(237, 20);
						// SugarCpp.g:237:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(237, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(237, 39);
						// SugarCpp.g:237:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(237, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(237, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(237, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:239:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(239, 10);
				string_literal45=(IToken)Match(input,103,Follow._103_in_global_alloc913);  
				stream_103.Add(string_literal45);

				DebugLocation(239, 15);
				// SugarCpp.g:239:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:239:16: expr ( ',' expr )*
				{
				DebugLocation(239, 16);
				PushFollow(Follow._expr_in_global_alloc916);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(239, 21);
				// SugarCpp.g:239:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==91))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:239:22: ',' expr
						{
						DebugLocation(239, 22);
						char_literal47=(IToken)Match(input,91,Follow._91_in_global_alloc919);  
						stream_91.Add(char_literal47);

						DebugLocation(239, 26);
						PushFollow(Follow._expr_in_global_alloc921);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 103, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(239, 37);
					// SugarCpp.g:239:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_103.NextNode(), root_1);

					DebugLocation(239, 44);
					// SugarCpp.g:239:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(239, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(239, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(239, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(239, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:243:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(244, 4);
			// SugarCpp.g:244:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==120))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:4: attribute
				{
				DebugLocation(244, 4);
				PushFollow(Follow._attribute_in_global_using958);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(244, 15);
			string_literal50=(IToken)Match(input,156,Follow._156_in_global_using961);  
			stream_156.Add(string_literal50);

			DebugLocation(244, 23);
			// SugarCpp.g:244:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==142))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:23: stmt_using_item
					{
					DebugLocation(244, 23);
					PushFollow(Follow._stmt_using_item_in_global_using963);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(244, 43);
				// SugarCpp.g:244:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(244, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(244, 56);
				// SugarCpp.g:244:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(244, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(244, 67);
				// SugarCpp.g:244:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(244, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:247:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(248, 4);
			// SugarCpp.g:248:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==120))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:4: attribute
				{
				DebugLocation(248, 4);
				PushFollow(Follow._attribute_in_global_typedef987);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(248, 15);
			string_literal53=(IToken)Match(input,152,Follow._152_in_global_typedef990);  
			stream_152.Add(string_literal53);

			DebugLocation(248, 25);
			PushFollow(Follow._ident_in_global_typedef992);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(248, 31);
			char_literal55=(IToken)Match(input,110,Follow._110_in_global_typedef994);  
			stream_110.Add(char_literal55);

			DebugLocation(248, 35);
			PushFollow(Follow._type_name_in_global_typedef996);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(248, 48);
				// SugarCpp.g:248:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(248, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(248, 63);
				// SugarCpp.g:248:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(248, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(248, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(248, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:251:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(252, 4);
			// SugarCpp.g:252:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==120))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:4: attribute
				{
				DebugLocation(252, 4);
				PushFollow(Follow._attribute_in_import_def1020);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(252, 15);
			string_literal58=(IToken)Match(input,138,Follow._138_in_import_def1023);  
			stream_138.Add(string_literal58);

			DebugLocation(252, 24);
			// SugarCpp.g:252:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:24: STRING
				{
				DebugLocation(252, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1025);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(252, 32);
			// SugarCpp.g:252:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(252, 33);
				// SugarCpp.g:252:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:33: NEWLINE
						{
						DebugLocation(252, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1029);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(252, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1032);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(252, 49);
				// SugarCpp.g:252:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:49: NEWLINE
						{
						DebugLocation(252, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1034);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(252, 59);
				// SugarCpp.g:252:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:60: STRING ( NEWLINE )+
						{
						DebugLocation(252, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1039);  
						stream_STRING.Add(STRING63);

						DebugLocation(252, 67);
						// SugarCpp.g:252:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:252:67: NEWLINE
								{
								DebugLocation(252, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1041);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(252, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1046);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 252:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(252, 90);
				// SugarCpp.g:252:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(252, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(252, 99);
				// SugarCpp.g:252:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(252, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(252, 110);
				// SugarCpp.g:252:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(252, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:255:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(255, 1);
		try
		{
			// SugarCpp.g:256:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:256:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(256, 4);
			// SugarCpp.g:256:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==120))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:4: attribute
				{
				DebugLocation(256, 4);
				PushFollow(Follow._attribute_in_enum_def1071);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(256, 15);
			string_literal67=(IToken)Match(input,134,Follow._134_in_enum_def1074);  
			stream_134.Add(string_literal67);

			DebugLocation(256, 22);
			PushFollow(Follow._ident_in_enum_def1076);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(256, 28);
			char_literal69=(IToken)Match(input,110,Follow._110_in_enum_def1078);  
			stream_110.Add(char_literal69);

			DebugLocation(256, 32);
			// SugarCpp.g:256:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:33: ident ( '|' ident )*
				{
				DebugLocation(256, 33);
				PushFollow(Follow._ident_in_enum_def1081);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(256, 39);
				// SugarCpp.g:256:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==160))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:40: '|' ident
						{
						DebugLocation(256, 40);
						char_literal71=(IToken)Match(input,160,Follow._160_in_enum_def1084);  
						stream_160.Add(char_literal71);

						DebugLocation(256, 44);
						PushFollow(Follow._ident_in_enum_def1086);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 256:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(256, 57);
				// SugarCpp.g:256:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(256, 64);
				// SugarCpp.g:256:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(256, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(256, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(256, 81);
				// SugarCpp.g:256:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(256, 94);
				// SugarCpp.g:256:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(256, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:259:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(259, 1);
		try
		{
			// SugarCpp.g:260:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:260:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(260, 4);
			// SugarCpp.g:260:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==120))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:4: attribute
				{
				DebugLocation(260, 4);
				PushFollow(Follow._attribute_in_namespace_def1119);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(260, 15);
			string_literal74=(IToken)Match(input,142,Follow._142_in_namespace_def1122);  
			stream_142.Add(string_literal74);

			DebugLocation(260, 27);
			PushFollow(Follow._ident_in_namespace_def1124);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(260, 33);
			// SugarCpp.g:260:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(260, 34);
				// SugarCpp.g:260:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:34: NEWLINE
						{
						DebugLocation(260, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1127);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(260, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1130);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(260, 50);
				// SugarCpp.g:260:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:50: NEWLINE
						{
						DebugLocation(260, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1132);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(260, 59);
				PushFollow(Follow._global_block_in_namespace_def1135);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(260, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1137);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 260:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(260, 84);
				// SugarCpp.g:260:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(260, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(260, 96);
				// SugarCpp.g:260:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(260, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(260, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(260, 113);
				// SugarCpp.g:260:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(260, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:263:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(263, 1);
		try
		{
			// SugarCpp.g:264:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:264:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(264, 5);
			// SugarCpp.g:264:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==120))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:5: attribute
				{
				DebugLocation(264, 5);
				PushFollow(Follow._attribute_in_class_def1165);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(264, 16);
			string_literal82=(IToken)Match(input,129,Follow._129_in_class_def1168);  
			stream_129.Add(string_literal82);

			DebugLocation(264, 24);
			PushFollow(Follow._ident_in_class_def1170);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(264, 30);
			// SugarCpp.g:264:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==105))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:31: generic_parameter
				{
				DebugLocation(264, 31);
				PushFollow(Follow._generic_parameter_in_class_def1173);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(264, 51);
			// SugarCpp.g:264:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==84))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:52: '(' func_args ')'
				{
				DebugLocation(264, 52);
				char_literal85=(IToken)Match(input,84,Follow._84_in_class_def1178);  
				stream_84.Add(char_literal85);

				DebugLocation(264, 56);
				PushFollow(Follow._func_args_in_class_def1180);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(264, 66);
				char_literal87=(IToken)Match(input,85,Follow._85_in_class_def1182);  
				stream_85.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(264, 72);
			// SugarCpp.g:264:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==101))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:73: ':' ident ( ',' ident )*
				{
				DebugLocation(264, 73);
				char_literal88=(IToken)Match(input,101,Follow._101_in_class_def1187);  
				stream_101.Add(char_literal88);

				DebugLocation(264, 77);
				PushFollow(Follow._ident_in_class_def1189);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(264, 83);
				// SugarCpp.g:264:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==91))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:84: ',' ident
						{
						DebugLocation(264, 84);
						char_literal90=(IToken)Match(input,91,Follow._91_in_class_def1192);  
						stream_91.Add(char_literal90);

						DebugLocation(264, 88);
						PushFollow(Follow._ident_in_class_def1194);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(264, 98);
			// SugarCpp.g:264:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(264, 99);
				// SugarCpp.g:264:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:99: NEWLINE
						{
						DebugLocation(264, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1201);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(264, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1204);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(264, 115);
				// SugarCpp.g:264:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:115: NEWLINE
						{
						DebugLocation(264, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1206);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(264, 124);
				PushFollow(Follow._global_block_in_class_def1209);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(264, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1211);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, attribute, func_args, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 264:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(264, 149);
				// SugarCpp.g:264:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(264, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(264, 157);
				// SugarCpp.g:264:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(264, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(264, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(264, 174);
				// SugarCpp.g:264:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(264, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(264, 193);
				// SugarCpp.g:264:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(264, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(264, 204);
				// SugarCpp.g:264:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(264, 205);
					// SugarCpp.g:264:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(264, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(264, 218);
					// SugarCpp.g:264:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(264, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(264, 228);
				// SugarCpp.g:264:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(264, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:267:1: type_name : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(267, 1);
		try
		{
			// SugarCpp.g:268:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:268:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(268, 4);
			PushFollow(Follow._type_star_in_type_name1254);
			type_star97=type_star();
			PopFollow();

			stream_type_star.Add(type_star97.Tree);
			DebugLocation(268, 14);
			// SugarCpp.g:268:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt46=3;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 82:
				{
				alt46 = 1;
				}
				break;
			case 120:
				{
				alt46 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 84:
			case 85:
			case 91:
			case 103:
			case 104:
			case 110:
			case 113:
			case 136:
			case 137:
			case 153:
			case 155:
			case 159:
			case 163:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:268:16: '&'
				{
				DebugLocation(268, 16);
				char_literal98=(IToken)Match(input,82,Follow._82_in_type_name1258);  
				stream_82.Add(char_literal98);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 268:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(268, 23);
					// SugarCpp.g:268:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(268, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(268, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:269:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(269, 7);
				char_literal99=(IToken)Match(input,120,Follow._120_in_type_name1274);  
				stream_120.Add(char_literal99);

				DebugLocation(269, 11);
				PushFollow(Follow._expr_in_type_name1276);
				expr100=expr();
				PopFollow();

				stream_expr.Add(expr100.Tree);
				DebugLocation(269, 16);
				// SugarCpp.g:269:16: ( ',' expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==91))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:17: ',' expr
						{
						DebugLocation(269, 17);
						char_literal101=(IToken)Match(input,91,Follow._91_in_type_name1279);  
						stream_91.Add(char_literal101);

						DebugLocation(269, 21);
						PushFollow(Follow._expr_in_type_name1281);
						expr102=expr();
						PopFollow();

						stream_expr.Add(expr102.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(269, 28);
				char_literal103=(IToken)Match(input,121,Follow._121_in_type_name1285);  
				stream_121.Add(char_literal103);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 269:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(269, 35);
					// SugarCpp.g:269:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(269, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(269, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(269, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(269, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:270:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:7: -> type_star
				{
					DebugLocation(270, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:274:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 15);
		TraceIn("type_star", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(274, 1);
		try
		{
			// SugarCpp.g:275:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(275, 4);
			PushFollow(Follow._type_template_type_in_type_star1323);
			type_template_type104=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type104.Tree);
			DebugLocation(275, 23);
			// SugarCpp.g:275:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==86))
			{
				alt48 = 1;
			}
			else if ((LA48_0==DEDENT||LA48_0==IDENT||LA48_0==NEWLINE||LA48_0==82||(LA48_0>=84 && LA48_0<=85)||LA48_0==91||(LA48_0>=103 && LA48_0<=104)||LA48_0==110||LA48_0==113||LA48_0==120||(LA48_0>=136 && LA48_0<=137)||LA48_0==153||LA48_0==155||LA48_0==159||LA48_0==163))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:25: ( '*' )+
				{
				DebugLocation(275, 25);
				// SugarCpp.g:275:25: ( '*' )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==86))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:275:25: '*'
						{
						DebugLocation(275, 25);
						char_literal105=(IToken)Match(input,86,Follow._86_in_type_star1327);  
						stream_86.Add(char_literal105);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: 86, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 275:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(275, 33);
					// SugarCpp.g:275:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(275, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(275, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(275, 64);
					if (!(stream_86.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_86.HasNext )
					{
						DebugLocation(275, 64);
						adaptor.AddChild(root_1, stream_86.NextNode());

					}
					stream_86.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:276:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 276:10: -> type_template_type
				{
					DebugLocation(276, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 15);
			LeaveRule("type_star", 15);
			LeaveRule_type_star();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:280:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 16);
		TraceIn("type_template_type", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(281, 4);
			PushFollow(Follow._type_ident_in_type_template_type1373);
			type_ident106=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident106.Tree);
			DebugLocation(281, 15);
			// SugarCpp.g:281:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==105))
			{
				alt51 = 1;
			}
			else if ((LA51_0==DEDENT||LA51_0==IDENT||LA51_0==NEWLINE||LA51_0==82||(LA51_0>=84 && LA51_0<=86)||LA51_0==91||(LA51_0>=103 && LA51_0<=104)||LA51_0==110||LA51_0==113||LA51_0==120||(LA51_0>=136 && LA51_0<=137)||LA51_0==153||LA51_0==155||LA51_0==159||LA51_0==163))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(281, 17);
				char_literal107=(IToken)Match(input,105,Follow._105_in_type_template_type1377);  
				stream_105.Add(char_literal107);

				DebugLocation(281, 21);
				// SugarCpp.g:281:21: ( type_name ( ',' type_name )* )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==IDENT||LA50_0==130||LA50_0==147||LA50_0==154))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:22: type_name ( ',' type_name )*
					{
					DebugLocation(281, 22);
					PushFollow(Follow._type_name_in_type_template_type1380);
					type_name108=type_name();
					PopFollow();

					stream_type_name.Add(type_name108.Tree);
					DebugLocation(281, 32);
					// SugarCpp.g:281:32: ( ',' type_name )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==91))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:281:33: ',' type_name
							{
							DebugLocation(281, 33);
							char_literal109=(IToken)Match(input,91,Follow._91_in_type_template_type1383);  
							stream_91.Add(char_literal109);

							DebugLocation(281, 37);
							PushFollow(Follow._type_name_in_type_template_type1385);
							type_name110=type_name();
							PopFollow();

							stream_type_name.Add(type_name110.Tree);

							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(281, 51);
				char_literal111=(IToken)Match(input,113,Follow._113_in_type_template_type1391);  
				stream_113.Add(char_literal111);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(281, 58);
					// SugarCpp.g:281:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(281, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(281, 85);
					// SugarCpp.g:281:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(281, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:282:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:8: -> type_ident
				{
					DebugLocation(282, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 16);
			LeaveRule("type_template_type", 16);
			LeaveRule_type_template_type();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:286:1: type_ident : ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 17);
		TraceIn("type_ident", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		IToken string_literal114 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal113_tree = default(CommonTree);
		CommonTree string_literal114_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident
			{
			DebugLocation(287, 4);
			// SugarCpp.g:287:4: ( 'const' )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==130))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:4: 'const'
				{
				DebugLocation(287, 4);
				string_literal112=(IToken)Match(input,130,Follow._130_in_type_ident1431);  
				stream_130.Add(string_literal112);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(287, 13);
			// SugarCpp.g:287:13: ( 'unsigned' )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==154))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:13: 'unsigned'
				{
				DebugLocation(287, 13);
				string_literal113=(IToken)Match(input,154,Follow._154_in_type_ident1434);  
				stream_154.Add(string_literal113);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(287, 25);
			// SugarCpp.g:287:25: ( 'struct' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==147))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:25: 'struct'
				{
				DebugLocation(287, 25);
				string_literal114=(IToken)Match(input,147,Follow._147_in_type_ident1437);  
				stream_147.Add(string_literal114);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(287, 35);
			PushFollow(Follow._ident_in_type_ident1440);
			ident115=ident();
			PopFollow();

			stream_ident.Add(ident115.Tree);


			{
			// AST REWRITE
			// elements: ident, 154, 147, 130
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:41: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
			{
				DebugLocation(287, 44);
				// SugarCpp.g:287:44: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(287, 57);
				// SugarCpp.g:287:57: ( 'const' )?
				if (stream_130.HasNext)
				{
					DebugLocation(287, 57);
					adaptor.AddChild(root_1, stream_130.NextNode());

				}
				stream_130.Reset();
				DebugLocation(287, 66);
				// SugarCpp.g:287:66: ( 'unsigned' )?
				if (stream_154.HasNext)
				{
					DebugLocation(287, 66);
					adaptor.AddChild(root_1, stream_154.NextNode());

				}
				stream_154.Reset();
				DebugLocation(287, 78);
				// SugarCpp.g:287:78: ( 'struct' )?
				if (stream_147.HasNext)
				{
					DebugLocation(287, 78);
					adaptor.AddChild(root_1, stream_147.NextNode());

				}
				stream_147.Reset();
				DebugLocation(287, 88);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 17);
			LeaveRule("type_ident", 17);
			LeaveRule_type_ident();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:290:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 18);
		TraceIn("generic_parameter_inside", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: ident ( ',' ident )*
			{
			DebugLocation(291, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1468);
			ident116=ident();
			PopFollow();

			stream_ident.Add(ident116.Tree);
			DebugLocation(291, 10);
			// SugarCpp.g:291:10: ( ',' ident )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==91))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:11: ',' ident
					{
					DebugLocation(291, 11);
					char_literal117=(IToken)Match(input,91,Follow._91_in_generic_parameter_inside1471);  
					stream_91.Add(char_literal117);

					DebugLocation(291, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1473);
					ident118=ident();
					PopFollow();

					stream_ident.Add(ident118.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(291, 26);
				// SugarCpp.g:291:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(291, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(291, 47);
				// SugarCpp.g:291:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(291, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 18);
			LeaveRule("generic_parameter_inside", 18);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:294:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 19);
		TraceIn("generic_parameter", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(294, 1);
		try
		{
			// SugarCpp.g:295:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:295:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(295, 4);
			char_literal119=(IToken)Match(input,105,Follow._105_in_generic_parameter1495);  
			stream_105.Add(char_literal119);

			DebugLocation(295, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1497);
			generic_parameter_inside120=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside120.Tree);
			DebugLocation(295, 33);
			char_literal121=(IToken)Match(input,113,Follow._113_in_generic_parameter1499);  
			stream_113.Add(char_literal121);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 295:37: -> generic_parameter_inside
			{
				DebugLocation(295, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 19);
			LeaveRule("generic_parameter", 19);
			LeaveRule_generic_parameter();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:298:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(298, 1);
		try
		{
			// SugarCpp.g:299:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:299:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(299, 4);
			PushFollow(Follow._func_args_item_in_func_args1514);
			func_args_item122=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item122.Tree);
			DebugLocation(299, 19);
			// SugarCpp.g:299:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==91))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:299:20: ',' func_args_item
					{
					DebugLocation(299, 20);
					char_literal123=(IToken)Match(input,91,Follow._91_in_func_args1517);  
					stream_91.Add(char_literal123);

					DebugLocation(299, 24);
					PushFollow(Follow._func_args_item_in_func_args1519);
					func_args_item124=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item124.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 299:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(299, 44);
				// SugarCpp.g:299:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(299, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(299, 56);
				// SugarCpp.g:299:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(299, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:302:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 21);
		TraceIn("func_args_item", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken string_literal129 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken string_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree string_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(302, 1);
		try
		{
			// SugarCpp.g:303:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt60=2;
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==IDENT))
			{
				alt60 = 1;
			}
			else if ((LA60_0==103))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:303:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(303, 4);
				PushFollow(Follow._ident_list_in_func_args_item1541);
				ident_list125=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list125.Tree);
				DebugLocation(303, 15);
				char_literal126=(IToken)Match(input,101,Follow._101_in_func_args_item1543);  
				stream_101.Add(char_literal126);

				DebugLocation(303, 19);
				PushFollow(Follow._type_name_in_func_args_item1545);
				type_name127=type_name();
				PopFollow();

				stream_type_name.Add(type_name127.Tree);
				DebugLocation(303, 29);
				// SugarCpp.g:303:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt59=3;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				switch (input.LA(1))
				{
				case 103:
				case 110:
					{
					alt59 = 1;
					}
					break;
				case 84:
					{
					alt59 = 2;
					}
					break;
				case 85:
				case 91:
					{
					alt59 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:303:31: ( '=' | ':=' ) expr
					{
					DebugLocation(303, 31);
					// SugarCpp.g:303:31: ( '=' | ':=' )
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==110))
					{
						alt57 = 1;
					}
					else if ((LA57_0==103))
					{
						alt57 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:303:32: '='
						{
						DebugLocation(303, 32);
						char_literal128=(IToken)Match(input,110,Follow._110_in_func_args_item1550);  
						stream_110.Add(char_literal128);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:303:38: ':='
						{
						DebugLocation(303, 38);
						string_literal129=(IToken)Match(input,103,Follow._103_in_func_args_item1554);  
						stream_103.Add(string_literal129);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(303, 44);
					PushFollow(Follow._expr_in_func_args_item1557);
					expr130=expr();
					PopFollow();

					stream_expr.Add(expr130.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 303:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(303, 53);
						// SugarCpp.g:303:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(303, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(303, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(303, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(303, 93);
						// SugarCpp.g:303:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(303, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:304:33: '(' ( expr_list )? ')'
					{
					DebugLocation(304, 33);
					char_literal131=(IToken)Match(input,84,Follow._84_in_func_args_item1605);  
					stream_84.Add(char_literal131);

					DebugLocation(304, 37);
					// SugarCpp.g:304:37: ( expr_list )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==IDENT||LA58_0==NUMBER||LA58_0==STRING||LA58_0==77||LA58_0==82||LA58_0==84||LA58_0==86||(LA58_0>=88 && LA58_0<=89)||(LA58_0>=92 && LA58_0<=93)||(LA58_0>=119 && LA58_0<=120)||(LA58_0>=143 && LA58_0<=144)||LA58_0==163))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:304:37: expr_list
						{
						DebugLocation(304, 37);
						PushFollow(Follow._expr_list_in_func_args_item1607);
						expr_list132=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list132.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(304, 48);
					char_literal133=(IToken)Match(input,85,Follow._85_in_func_args_item1610);  
					stream_85.Add(char_literal133);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 304:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(304, 56);
						// SugarCpp.g:304:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(304, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(304, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(304, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(304, 98);
						// SugarCpp.g:304:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(304, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:305:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 305:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(305, 18);
						// SugarCpp.g:305:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(305, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(305, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(305, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:307:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(307, 8);
				string_literal134=(IToken)Match(input,103,Follow._103_in_func_args_item1667); 
				string_literal134_tree = (CommonTree)adaptor.Create(string_literal134);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal134_tree, root_0);
				DebugLocation(307, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1671);
				modify_expr135=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr135.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 21);
			LeaveRule("func_args_item", 21);
			LeaveRule_func_args_item();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:310:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 22);
		TraceIn("func_def", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal138 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken NEWLINE144 = default(IToken);
		IToken char_literal146 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree NEWLINE144_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(310, 4);
		try
		{
			// SugarCpp.g:311:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(311, 4);
			// SugarCpp.g:311:4: ( attribute )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==120))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:4: attribute
				{
				DebugLocation(311, 4);
				PushFollow(Follow._attribute_in_func_def1682);
				attribute136=attribute();
				PopFollow();

				stream_attribute.Add(attribute136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(311, 15);
			// SugarCpp.g:311:15: ( type_name )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			try
			{
				alt62 = dfa62.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:15: type_name
				{
				DebugLocation(311, 15);
				PushFollow(Follow._type_name_in_func_def1685);
				type_name137=type_name();
				PopFollow();

				stream_type_name.Add(type_name137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(311, 26);
			// SugarCpp.g:311:26: ( '~' )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==163))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:26: '~'
				{
				DebugLocation(311, 26);
				char_literal138=(IToken)Match(input,163,Follow._163_in_func_def1688);  
				stream_163.Add(char_literal138);


				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(311, 31);
			PushFollow(Follow._ident_in_func_def1691);
			ident139=ident();
			PopFollow();

			stream_ident.Add(ident139.Tree);
			DebugLocation(311, 37);
			// SugarCpp.g:311:37: ( generic_parameter )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==105))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:37: generic_parameter
				{
				DebugLocation(311, 37);
				PushFollow(Follow._generic_parameter_in_func_def1693);
				generic_parameter140=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(311, 56);
			char_literal141=(IToken)Match(input,84,Follow._84_in_func_def1696);  
			stream_84.Add(char_literal141);

			DebugLocation(311, 60);
			// SugarCpp.g:311:60: ( func_args )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==IDENT||LA65_0==103))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:60: func_args
				{
				DebugLocation(311, 60);
				PushFollow(Follow._func_args_in_func_def1698);
				func_args142=func_args();
				PopFollow();

				stream_func_args.Add(func_args142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(311, 71);
			char_literal143=(IToken)Match(input,85,Follow._85_in_func_def1701);  
			stream_85.Add(char_literal143);

			DebugLocation(311, 75);
			// SugarCpp.g:311:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) )
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==NEWLINE))
			{
				alt67 = 1;
			}
			else if ((LA67_0==110))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(311, 76);
				// SugarCpp.g:311:76: ( NEWLINE )+
				int cnt66=0;
				try { DebugEnterSubRule(66);
				while (true)
				{
					int alt66=2;
					try { DebugEnterDecision(66, false);
					int LA66_0 = input.LA(1);

					if ((LA66_0==NEWLINE))
					{
						alt66 = 1;
					}


					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:311:76: NEWLINE
						{
						DebugLocation(311, 76);
						NEWLINE144=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1704);  
						stream_NEWLINE.Add(NEWLINE144);


						}
						break;

					default:
						if (cnt66 >= 1)
							goto loop66;

						EarlyExitException eee66 = new EarlyExitException( 66, input );
						DebugRecognitionException(eee66);
						throw eee66;
					}
					cnt66++;
				}
				loop66:
					;

				} finally { DebugExitSubRule(66); }

				DebugLocation(311, 85);
				PushFollow(Follow._stmt_block_in_func_def1707);
				stmt_block145=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block145.Tree);


				{
				// AST REWRITE
				// elements: generic_parameter, ident, func_args, stmt_block, 163, type_name, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(311, 99);
					// SugarCpp.g:311:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(311, 110);
					// SugarCpp.g:311:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(311, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(311, 121);
					// SugarCpp.g:311:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(311, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(311, 132);
					// SugarCpp.g:311:132: ( '~' )?
					if (stream_163.HasNext)
					{
						DebugLocation(311, 132);
						adaptor.AddChild(root_1, stream_163.NextNode());

					}
					stream_163.Reset();
					DebugLocation(311, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(311, 143);
					// SugarCpp.g:311:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(311, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(311, 162);
					// SugarCpp.g:311:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(311, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(311, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:23: '=' where_expr
				{
				DebugLocation(312, 23);
				char_literal146=(IToken)Match(input,110,Follow._110_in_func_def1756);  
				stream_110.Add(char_literal146);

				DebugLocation(312, 27);
				PushFollow(Follow._where_expr_in_func_def1758);
				where_expr147=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr147.Tree);


				{
				// AST REWRITE
				// elements: attribute, func_args, ident, 163, where_expr, type_name, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:39: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(312, 42);
					// SugarCpp.g:312:42: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(312, 53);
					// SugarCpp.g:312:53: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(312, 53);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(312, 64);
					// SugarCpp.g:312:64: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(312, 64);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(312, 75);
					// SugarCpp.g:312:75: ( '~' )?
					if (stream_163.HasNext)
					{
						DebugLocation(312, 75);
						adaptor.AddChild(root_1, stream_163.NextNode());

					}
					stream_163.Reset();
					DebugLocation(312, 80);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(312, 86);
					// SugarCpp.g:312:86: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(312, 86);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(312, 105);
					// SugarCpp.g:312:105: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(312, 105);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(312, 116);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 22);
			LeaveRule("func_def", 22);
			LeaveRule_func_def();
		}
		DebugLocation(313, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:315:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 23);
		TraceIn("stmt_block_item", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE149 = default(IToken);
		IToken NEWLINE151 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken NEWLINE153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE149_tree = default(CommonTree);
		CommonTree NEWLINE151_tree = default(CommonTree);
		CommonTree char_literal152_tree = default(CommonTree);
		CommonTree NEWLINE153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(315, 1);
		try
		{
			// SugarCpp.g:316:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==131||(LA72_0>=135 && LA72_0<=137)||LA72_0==141||LA72_0==148||LA72_0==151||LA72_0==153||LA72_0==155||LA72_0==159))
			{
				alt72 = 1;
			}
			else if ((LA72_0==IDENT||LA72_0==77||LA72_0==82||LA72_0==84||LA72_0==86||(LA72_0>=88 && LA72_0<=89)||(LA72_0>=92 && LA72_0<=93)||LA72_0==119||LA72_0==144||LA72_0==146||LA72_0==152||LA72_0==156||LA72_0==163))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:316:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(316, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item1799);
				stmt_complex148=stmt_complex();
				PopFollow();

				stream_stmt_complex.Add(stmt_complex148.Tree);
				DebugLocation(316, 17);
				// SugarCpp.g:316:17: ( NEWLINE )+
				int cnt68=0;
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==NEWLINE))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:316:17: NEWLINE
						{
						DebugLocation(316, 17);
						NEWLINE149=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1801);  
						stream_NEWLINE.Add(NEWLINE149);


						}
						break;

					default:
						if (cnt68 >= 1)
							goto loop68;

						EarlyExitException eee68 = new EarlyExitException( 68, input );
						DebugRecognitionException(eee68);
						throw eee68;
					}
					cnt68++;
				}
				loop68:
					;

				} finally { DebugExitSubRule(68); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:26: -> stmt_complex
				{
					DebugLocation(316, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:317:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(317, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item1811);
				stmt_simple150=stmt_simple();
				PopFollow();

				stream_stmt_simple.Add(stmt_simple150.Tree);
				DebugLocation(317, 16);
				// SugarCpp.g:317:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==NEWLINE))
				{
					alt71 = 1;
				}
				else if ((LA71_0==104))
				{
					alt71 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:317:17: ( NEWLINE )+
					{
					DebugLocation(317, 17);
					// SugarCpp.g:317:17: ( NEWLINE )+
					int cnt69=0;
					try { DebugEnterSubRule(69);
					while (true)
					{
						int alt69=2;
						try { DebugEnterDecision(69, false);
						int LA69_0 = input.LA(1);

						if ((LA69_0==NEWLINE))
						{
							alt69 = 1;
						}


						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:317:17: NEWLINE
							{
							DebugLocation(317, 17);
							NEWLINE151=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1814);  
							stream_NEWLINE.Add(NEWLINE151);


							}
							break;

						default:
							if (cnt69 >= 1)
								goto loop69;

							EarlyExitException eee69 = new EarlyExitException( 69, input );
							DebugRecognitionException(eee69);
							throw eee69;
						}
						cnt69++;
					}
					loop69:
						;

					} finally { DebugExitSubRule(69); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:317:28: ';' ( NEWLINE )*
					{
					DebugLocation(317, 28);
					char_literal152=(IToken)Match(input,104,Follow._104_in_stmt_block_item1819);  
					stream_104.Add(char_literal152);

					DebugLocation(317, 32);
					// SugarCpp.g:317:32: ( NEWLINE )*
					try { DebugEnterSubRule(70);
					while (true)
					{
						int alt70=2;
						try { DebugEnterDecision(70, false);
						int LA70_0 = input.LA(1);

						if ((LA70_0==NEWLINE))
						{
							alt70 = 1;
						}


						} finally { DebugExitDecision(70); }
						switch ( alt70 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:317:32: NEWLINE
							{
							DebugLocation(317, 32);
							NEWLINE153=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1821);  
							stream_NEWLINE.Add(NEWLINE153);


							}
							break;

						default:
							goto loop70;
						}
					}

					loop70:
						;

					} finally { DebugExitSubRule(70); }


					}
					break;

				}
				} finally { DebugExitSubRule(71); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:42: -> stmt_simple
				{
					DebugLocation(317, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 23);
			LeaveRule("stmt_block_item", 23);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:320:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 24);
		TraceIn("stmt_block", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT154 = default(IToken);
		IToken NEWLINE155 = default(IToken);
		IToken DEDENT157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT154_tree = default(CommonTree);
		CommonTree NEWLINE155_tree = default(CommonTree);
		CommonTree DEDENT157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(321, 4);
			INDENT154=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1838);  
			stream_INDENT.Add(INDENT154);

			DebugLocation(321, 11);
			// SugarCpp.g:321:11: ( NEWLINE )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==NEWLINE))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:11: NEWLINE
					{
					DebugLocation(321, 11);
					NEWLINE155=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1840);  
					stream_NEWLINE.Add(NEWLINE155);


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }

			DebugLocation(321, 20);
			// SugarCpp.g:321:20: ( stmt_block_item )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==IDENT||LA74_0==77||LA74_0==82||LA74_0==84||LA74_0==86||(LA74_0>=88 && LA74_0<=89)||(LA74_0>=92 && LA74_0<=93)||LA74_0==119||LA74_0==131||(LA74_0>=135 && LA74_0<=137)||LA74_0==141||LA74_0==144||LA74_0==146||LA74_0==148||(LA74_0>=151 && LA74_0<=153)||(LA74_0>=155 && LA74_0<=156)||LA74_0==159||LA74_0==163))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:20: stmt_block_item
					{
					DebugLocation(321, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block1843);
					stmt_block_item156=stmt_block_item();
					PopFollow();

					stream_stmt_block_item.Add(stmt_block_item156.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(321, 37);
			DEDENT157=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1846);  
			stream_DEDENT.Add(DEDENT157);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(321, 47);
				// SugarCpp.g:321:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(321, 60);
				// SugarCpp.g:321:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(321, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 24);
			LeaveRule("stmt_block", 24);
			LeaveRule_stmt_block();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:324:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 25);
		TraceIn("stmt", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(324, 1);
		try
		{
			// SugarCpp.g:325:2: ( stmt_simple | stmt_complex )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT||LA75_0==77||LA75_0==82||LA75_0==84||LA75_0==86||(LA75_0>=88 && LA75_0<=89)||(LA75_0>=92 && LA75_0<=93)||LA75_0==119||LA75_0==144||LA75_0==146||LA75_0==152||LA75_0==156||LA75_0==163))
			{
				alt75 = 1;
			}
			else if ((LA75_0==131||(LA75_0>=135 && LA75_0<=137)||LA75_0==141||LA75_0==148||LA75_0==151||LA75_0==153||LA75_0==155||LA75_0==159))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:325:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(325, 4);
				PushFollow(Follow._stmt_simple_in_stmt1866);
				stmt_simple158=stmt_simple();
				PopFollow();

				adaptor.AddChild(root_0, stmt_simple158.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:326:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(326, 4);
				PushFollow(Follow._stmt_complex_in_stmt1871);
				stmt_complex159=stmt_complex();
				PopFollow();

				adaptor.AddChild(root_0, stmt_complex159.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 25);
			LeaveRule("stmt", 25);
			LeaveRule_stmt();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:329:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 26);
		TraceIn("stmt_simple", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(329, 1);
		try
		{
			// SugarCpp.g:330:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:330:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(330, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple1882);
			stmt_expr160=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr160.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 26);
			LeaveRule("stmt_simple", 26);
			LeaveRule_stmt_simple();
		}
		DebugLocation(331, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:333:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 27);
		TraceIn("stmt_complex", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(333, 1);
		try
		{
			// SugarCpp.g:334:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt76=6;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case 137:
			case 153:
				{
				alt76 = 1;
				}
				break;
			case 136:
				{
				alt76 = 2;
				}
				break;
			case 141:
			case 155:
			case 159:
				{
				alt76 = 3;
				}
				break;
			case 151:
				{
				alt76 = 4;
				}
				break;
			case 148:
				{
				alt76 = 5;
				}
				break;
			case 131:
			case 135:
				{
				alt76 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:334:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(334, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex1893);
				stmt_if161=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if161.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:335:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(335, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex1898);
				stmt_for162=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for162.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:336:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(336, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex1903);
				stmt_while163=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while163.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:337:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex1908);
				stmt_try164=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try164.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:338:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex1913);
				stmt_switch165=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch165.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:339:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex1918);
				stmt_defer166=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer166.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 27);
			LeaveRule("stmt_complex", 27);
			LeaveRule_stmt_complex();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:342:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 28);
		TraceIn("stmt_expr", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		IToken string_literal169 = default(IToken);
		IToken string_literal171 = default(IToken);
		IToken string_literal173 = default(IToken);
		IToken string_literal175 = default(IToken);
		IToken char_literal177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree string_literal171_tree = default(CommonTree);
		CommonTree string_literal173_tree = default(CommonTree);
		CommonTree string_literal175_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(342, 1);
		try
		{
			// SugarCpp.g:343:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:343:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(343, 4);
			// SugarCpp.g:343:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:343:5: a= stmt_expr_item
			{
			DebugLocation(343, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1932);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 343:22: -> $a
			{
				DebugLocation(343, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(343, 29);
			// SugarCpp.g:343:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=6;
				try { DebugEnterDecision(78, false);
				switch (input.LA(1))
				{
				case 137:
					{
					alt78 = 1;
					}
					break;
				case 153:
					{
					alt78 = 2;
					}
					break;
				case 159:
					{
					alt78 = 3;
					}
					break;
				case 155:
					{
					alt78 = 4;
					}
					break;
				case 136:
					{
					alt78 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:343:31: 'if' expr
					{
					DebugLocation(343, 31);
					string_literal167=(IToken)Match(input,137,Follow._137_in_stmt_expr1942);  
					stream_137.Add(string_literal167);

					DebugLocation(343, 36);
					PushFollow(Follow._expr_in_stmt_expr1944);
					expr168=expr();
					PopFollow();

					stream_expr.Add(expr168.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(343, 44);
						// SugarCpp.g:343:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(343, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(343, 59);
						// SugarCpp.g:343:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(343, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:344:13: 'unless' expr
					{
					DebugLocation(344, 13);
					string_literal169=(IToken)Match(input,153,Follow._153_in_stmt_expr1973);  
					stream_153.Add(string_literal169);

					DebugLocation(344, 22);
					PushFollow(Follow._expr_in_stmt_expr1975);
					expr170=expr();
					PopFollow();

					stream_expr.Add(expr170.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(344, 30);
						// SugarCpp.g:344:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(344, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(344, 49);
						// SugarCpp.g:344:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(344, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:345:13: 'while' expr
					{
					DebugLocation(345, 13);
					string_literal171=(IToken)Match(input,159,Follow._159_in_stmt_expr2004);  
					stream_159.Add(string_literal171);

					DebugLocation(345, 21);
					PushFollow(Follow._expr_in_stmt_expr2006);
					expr172=expr();
					PopFollow();

					stream_expr.Add(expr172.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 345:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(345, 29);
						// SugarCpp.g:345:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(345, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(345, 47);
						// SugarCpp.g:345:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(345, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:346:13: 'until' expr
					{
					DebugLocation(346, 13);
					string_literal173=(IToken)Match(input,155,Follow._155_in_stmt_expr2035);  
					stream_155.Add(string_literal173);

					DebugLocation(346, 21);
					PushFollow(Follow._expr_in_stmt_expr2037);
					expr174=expr();
					PopFollow();

					stream_expr.Add(expr174.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 346:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(346, 29);
						// SugarCpp.g:346:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(346, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(346, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(346, 47);
						// SugarCpp.g:346:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(346, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(346, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:347:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(347, 13);
					string_literal175=(IToken)Match(input,136,Follow._136_in_stmt_expr2066);  
					stream_136.Add(string_literal175);

					DebugLocation(347, 19);
					PushFollow(Follow._for_item_in_stmt_expr2068);
					for_item176=for_item();
					PopFollow();

					stream_for_item.Add(for_item176.Tree);
					DebugLocation(347, 28);
					// SugarCpp.g:347:28: ( ',' for_item )*
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, false);
						int LA77_0 = input.LA(1);

						if ((LA77_0==91))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch ( alt77 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:347:29: ',' for_item
							{
							DebugLocation(347, 29);
							char_literal177=(IToken)Match(input,91,Follow._91_in_stmt_expr2071);  
							stream_91.Add(char_literal177);

							DebugLocation(347, 33);
							PushFollow(Follow._for_item_in_stmt_expr2073);
							for_item178=for_item();
							PopFollow();

							stream_for_item.Add(for_item178.Tree);

							}
							break;

						default:
							goto loop77;
						}
					}

					loop77:
						;

					} finally { DebugExitSubRule(77); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 347:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(347, 47);
						// SugarCpp.g:347:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(347, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(347, 58);
						// SugarCpp.g:347:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(347, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(347, 68);
						// SugarCpp.g:347:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(347, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(347, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 28);
			LeaveRule("stmt_expr", 28);
			LeaveRule_stmt_expr();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:351:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 29);
		TraceIn("stmt_expr_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(351, 1);
		try
		{
			// SugarCpp.g:352:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt79=5;
			try { DebugEnterDecision(79, false);
			try
			{
				alt79 = dfa79.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:352:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(352, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2115);
				stmt_alloc179=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc179.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:353:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(353, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2120);
				stmt_return180=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return180.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:354:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(354, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2125);
				stmt_using181=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using181.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:355:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2130);
				stmt_typedef182=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef182.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:356:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(356, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2135);
				stmt_modify183=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify183.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 29);
			LeaveRule("stmt_expr_item", 29);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:359:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 30);
		TraceIn("stmt_defer", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal184 = default(IToken);
		IToken string_literal186 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree string_literal186_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(359, 1);
		try
		{
			// SugarCpp.g:360:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt80=2;
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==131))
			{
				alt80 = 1;
			}
			else if ((LA80_0==135))
			{
				alt80 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:360:4: 'defer' stmt
				{
				DebugLocation(360, 4);
				string_literal184=(IToken)Match(input,131,Follow._131_in_stmt_defer2146);  
				stream_131.Add(string_literal184);

				DebugLocation(360, 12);
				PushFollow(Follow._stmt_in_stmt_defer2148);
				stmt185=stmt();
				PopFollow();

				stream_stmt.Add(stmt185.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 360:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(360, 20);
					// SugarCpp.g:360:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(360, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(360, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:361:4: 'finally' stmt
				{
				DebugLocation(361, 4);
				string_literal186=(IToken)Match(input,135,Follow._135_in_stmt_defer2161);  
				stream_135.Add(string_literal186);

				DebugLocation(361, 14);
				PushFollow(Follow._stmt_in_stmt_defer2163);
				stmt187=stmt();
				PopFollow();

				stream_stmt.Add(stmt187.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 361:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(361, 22);
					// SugarCpp.g:361:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(361, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(361, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 30);
			LeaveRule("stmt_defer", 30);
			LeaveRule_stmt_defer();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:364:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 31);
		TraceIn("stmt_typedef", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal188 = default(IToken);
		IToken char_literal190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name191 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal188_tree = default(CommonTree);
		CommonTree char_literal190_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:365:4: 'typedef' ident '=' type_name
			{
			DebugLocation(365, 4);
			string_literal188=(IToken)Match(input,152,Follow._152_in_stmt_typedef2182);  
			stream_152.Add(string_literal188);

			DebugLocation(365, 14);
			PushFollow(Follow._ident_in_stmt_typedef2184);
			ident189=ident();
			PopFollow();

			stream_ident.Add(ident189.Tree);
			DebugLocation(365, 20);
			char_literal190=(IToken)Match(input,110,Follow._110_in_stmt_typedef2186);  
			stream_110.Add(char_literal190);

			DebugLocation(365, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2188);
			type_name191=type_name();
			PopFollow();

			stream_type_name.Add(type_name191.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 365:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(365, 37);
				// SugarCpp.g:365:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(365, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(365, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(365, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 31);
			LeaveRule("stmt_typedef", 31);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:368:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 32);
		TraceIn("stmt_using_item", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal193 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal193_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(368, 36);
		try
		{
			// SugarCpp.g:368:16: ( ident | 'namespace' )
			int alt81=2;
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==IDENT))
			{
				alt81 = 1;
			}
			else if ((LA81_0==142))
			{
				alt81 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:368:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(368, 18);
				PushFollow(Follow._ident_in_stmt_using_item2207);
				ident192=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident192.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:368:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(368, 26);
				string_literal193=(IToken)Match(input,142,Follow._142_in_stmt_using_item2211); 
				string_literal193_tree = (CommonTree)adaptor.Create(string_literal193);
				adaptor.AddChild(root_0, string_literal193_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 32);
			LeaveRule("stmt_using_item", 32);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(368, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:369:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 33);
		TraceIn("stmt_using", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal194 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item195 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal194_tree = default(CommonTree);
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(369, 1);
		try
		{
			// SugarCpp.g:370:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:370:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(370, 4);
			string_literal194=(IToken)Match(input,156,Follow._156_in_stmt_using2219);  
			stream_156.Add(string_literal194);

			DebugLocation(370, 12);
			// SugarCpp.g:370:12: ( stmt_using_item )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==IDENT||LA82_0==142))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:370:12: stmt_using_item
					{
					DebugLocation(370, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2221);
					stmt_using_item195=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item195.Tree);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 370:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(370, 32);
				// SugarCpp.g:370:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(370, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(370, 45);
				// SugarCpp.g:370:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(370, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 33);
			LeaveRule("stmt_using", 33);
			LeaveRule_stmt_using();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:373:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 34);
		TraceIn("stmt_return", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal196 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(373, 1);
		try
		{
			// SugarCpp.g:374:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:374:4: 'return' ( expr )?
			{
			DebugLocation(374, 4);
			string_literal196=(IToken)Match(input,146,Follow._146_in_stmt_return2242);  
			stream_146.Add(string_literal196);

			DebugLocation(374, 13);
			// SugarCpp.g:374:13: ( expr )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==IDENT||LA83_0==NUMBER||LA83_0==STRING||LA83_0==77||LA83_0==82||LA83_0==84||LA83_0==86||(LA83_0>=88 && LA83_0<=89)||(LA83_0>=92 && LA83_0<=93)||(LA83_0>=119 && LA83_0<=120)||(LA83_0>=143 && LA83_0<=144)||LA83_0==163))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:374:13: expr
				{
				DebugLocation(374, 13);
				PushFollow(Follow._expr_in_stmt_return2244);
				expr197=expr();
				PopFollow();

				stream_expr.Add(expr197.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 374:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(374, 22);
				// SugarCpp.g:374:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(374, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(374, 36);
				// SugarCpp.g:374:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(374, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 34);
			LeaveRule("stmt_return", 34);
			LeaveRule_stmt_return();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:377:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 35);
		TraceIn("inline_stmt_block", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(377, 1);
		try
		{
			// SugarCpp.g:378:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:378:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(378, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2265);
			stmt_simple198=stmt_simple();
			PopFollow();

			stream_stmt_simple.Add(stmt_simple198.Tree);
			DebugLocation(378, 16);
			// SugarCpp.g:378:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==104))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:378:17: ';' stmt_simple
					{
					DebugLocation(378, 17);
					char_literal199=(IToken)Match(input,104,Follow._104_in_inline_stmt_block2268);  
					stream_104.Add(char_literal199);

					DebugLocation(378, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2270);
					stmt_simple200=stmt_simple();
					PopFollow();

					stream_stmt_simple.Add(stmt_simple200.Tree);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 378:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(378, 38);
				// SugarCpp.g:378:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(378, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(378, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(378, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 35);
			LeaveRule("inline_stmt_block", 35);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:381:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 36);
		TraceIn("stmt_if", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal201 = default(IToken);
		IToken NEWLINE203 = default(IToken);
		IToken NEWLINE205 = default(IToken);
		IToken string_literal206 = default(IToken);
		IToken NEWLINE207 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken NEWLINE213 = default(IToken);
		IToken NEWLINE215 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken NEWLINE217 = default(IToken);
		IToken string_literal219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal201_tree = default(CommonTree);
		CommonTree NEWLINE203_tree = default(CommonTree);
		CommonTree NEWLINE205_tree = default(CommonTree);
		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree NEWLINE207_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree NEWLINE213_tree = default(CommonTree);
		CommonTree NEWLINE215_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree NEWLINE217_tree = default(CommonTree);
		CommonTree string_literal219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(381, 1);
		try
		{
			// SugarCpp.g:382:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==137))
			{
				alt95 = 1;
			}
			else if ((LA95_0==153))
			{
				alt95 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:382:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(382, 4);
				string_literal201=(IToken)Match(input,137,Follow._137_in_stmt_if2292);  
				stream_137.Add(string_literal201);

				DebugLocation(382, 9);
				PushFollow(Follow._expr_in_stmt_if2294);
				expr202=expr();
				PopFollow();

				stream_expr.Add(expr202.Tree);
				DebugLocation(382, 14);
				// SugarCpp.g:382:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==NEWLINE))
				{
					alt89 = 1;
				}
				else if ((LA89_0==149))
				{
					alt89 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:382:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(382, 15);
					// SugarCpp.g:382:15: ( NEWLINE )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:382:15: NEWLINE
							{
							DebugLocation(382, 15);
							NEWLINE203=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2297);  
							stream_NEWLINE.Add(NEWLINE203);


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(382, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2300);
					stmt_block204=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block204.Tree);
					DebugLocation(382, 35);
					// SugarCpp.g:382:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, false);
					try
					{
						alt88 = dfa88.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:382:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(382, 36);
						// SugarCpp.g:382:36: ( NEWLINE )*
						try { DebugEnterSubRule(86);
						while (true)
						{
							int alt86=2;
							try { DebugEnterDecision(86, false);
							int LA86_0 = input.LA(1);

							if ((LA86_0==NEWLINE))
							{
								alt86 = 1;
							}


							} finally { DebugExitDecision(86); }
							switch ( alt86 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:382:36: NEWLINE
								{
								DebugLocation(382, 36);
								NEWLINE205=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2303);  
								stream_NEWLINE.Add(NEWLINE205);


								}
								break;

							default:
								goto loop86;
							}
						}

						loop86:
							;

						} finally { DebugExitSubRule(86); }

						DebugLocation(382, 45);
						string_literal206=(IToken)Match(input,133,Follow._133_in_stmt_if2306);  
						stream_133.Add(string_literal206);

						DebugLocation(382, 52);
						// SugarCpp.g:382:52: ( NEWLINE )+
						int cnt87=0;
						try { DebugEnterSubRule(87);
						while (true)
						{
							int alt87=2;
							try { DebugEnterDecision(87, false);
							int LA87_0 = input.LA(1);

							if ((LA87_0==NEWLINE))
							{
								alt87 = 1;
							}


							} finally { DebugExitDecision(87); }
							switch (alt87)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:382:52: NEWLINE
								{
								DebugLocation(382, 52);
								NEWLINE207=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2308);  
								stream_NEWLINE.Add(NEWLINE207);


								}
								break;

							default:
								if (cnt87 >= 1)
									goto loop87;

								EarlyExitException eee87 = new EarlyExitException( 87, input );
								DebugRecognitionException(eee87);
								throw eee87;
							}
							cnt87++;
						}
						loop87:
							;

						} finally { DebugExitSubRule(87); }

						DebugLocation(382, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2311);
						stmt_block208=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block208.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(88); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 382:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(382, 77);
						// SugarCpp.g:382:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(382, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(382, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(382, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(382, 103);
						// SugarCpp.g:382:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(382, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:383:16: 'then' inline_stmt_block
					{
					DebugLocation(383, 16);
					string_literal209=(IToken)Match(input,149,Follow._149_in_stmt_if2343);  
					stream_149.Add(string_literal209);

					DebugLocation(383, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2345);
					inline_stmt_block210=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block210.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 383:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(383, 44);
						// SugarCpp.g:383:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(383, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(383, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(383, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:385:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(385, 4);
				string_literal211=(IToken)Match(input,153,Follow._153_in_stmt_if2366);  
				stream_153.Add(string_literal211);

				DebugLocation(385, 13);
				PushFollow(Follow._expr_in_stmt_if2368);
				expr212=expr();
				PopFollow();

				stream_expr.Add(expr212.Tree);
				DebugLocation(385, 18);
				// SugarCpp.g:385:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==NEWLINE))
				{
					alt94 = 1;
				}
				else if ((LA94_0==149))
				{
					alt94 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:385:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(385, 19);
					// SugarCpp.g:385:19: ( NEWLINE )+
					int cnt90=0;
					try { DebugEnterSubRule(90);
					while (true)
					{
						int alt90=2;
						try { DebugEnterDecision(90, false);
						int LA90_0 = input.LA(1);

						if ((LA90_0==NEWLINE))
						{
							alt90 = 1;
						}


						} finally { DebugExitDecision(90); }
						switch (alt90)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:385:19: NEWLINE
							{
							DebugLocation(385, 19);
							NEWLINE213=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2371);  
							stream_NEWLINE.Add(NEWLINE213);


							}
							break;

						default:
							if (cnt90 >= 1)
								goto loop90;

							EarlyExitException eee90 = new EarlyExitException( 90, input );
							DebugRecognitionException(eee90);
							throw eee90;
						}
						cnt90++;
					}
					loop90:
						;

					} finally { DebugExitSubRule(90); }

					DebugLocation(385, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2374);
					stmt_block214=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block214.Tree);
					DebugLocation(385, 39);
					// SugarCpp.g:385:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					try
					{
						alt93 = dfa93.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:385:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(385, 40);
						// SugarCpp.g:385:40: ( NEWLINE )*
						try { DebugEnterSubRule(91);
						while (true)
						{
							int alt91=2;
							try { DebugEnterDecision(91, false);
							int LA91_0 = input.LA(1);

							if ((LA91_0==NEWLINE))
							{
								alt91 = 1;
							}


							} finally { DebugExitDecision(91); }
							switch ( alt91 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:385:40: NEWLINE
								{
								DebugLocation(385, 40);
								NEWLINE215=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2377);  
								stream_NEWLINE.Add(NEWLINE215);


								}
								break;

							default:
								goto loop91;
							}
						}

						loop91:
							;

						} finally { DebugExitSubRule(91); }

						DebugLocation(385, 49);
						string_literal216=(IToken)Match(input,133,Follow._133_in_stmt_if2380);  
						stream_133.Add(string_literal216);

						DebugLocation(385, 56);
						// SugarCpp.g:385:56: ( NEWLINE )+
						int cnt92=0;
						try { DebugEnterSubRule(92);
						while (true)
						{
							int alt92=2;
							try { DebugEnterDecision(92, false);
							int LA92_0 = input.LA(1);

							if ((LA92_0==NEWLINE))
							{
								alt92 = 1;
							}


							} finally { DebugExitDecision(92); }
							switch (alt92)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:385:56: NEWLINE
								{
								DebugLocation(385, 56);
								NEWLINE217=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2382);  
								stream_NEWLINE.Add(NEWLINE217);


								}
								break;

							default:
								if (cnt92 >= 1)
									goto loop92;

								EarlyExitException eee92 = new EarlyExitException( 92, input );
								DebugRecognitionException(eee92);
								throw eee92;
							}
							cnt92++;
						}
						loop92:
							;

						} finally { DebugExitSubRule(92); }

						DebugLocation(385, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2385);
						stmt_block218=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block218.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(93); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 385:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(385, 81);
						// SugarCpp.g:385:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(385, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(385, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(385, 111);
						// SugarCpp.g:385:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(385, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:386:20: 'then' inline_stmt_block
					{
					DebugLocation(386, 20);
					string_literal219=(IToken)Match(input,149,Follow._149_in_stmt_if2421);  
					stream_149.Add(string_literal219);

					DebugLocation(386, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2423);
					inline_stmt_block220=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block220.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 386:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(386, 48);
						// SugarCpp.g:386:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(386, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(386, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(386, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(94); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 36);
			LeaveRule("stmt_if", 36);
			LeaveRule_stmt_if();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:390:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 37);
		TraceIn("stmt_while", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal221 = default(IToken);
		IToken NEWLINE223 = default(IToken);
		IToken string_literal225 = default(IToken);
		IToken string_literal227 = default(IToken);
		IToken NEWLINE229 = default(IToken);
		IToken string_literal231 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken NEWLINE235 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree NEWLINE223_tree = default(CommonTree);
		CommonTree string_literal225_tree = default(CommonTree);
		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree NEWLINE229_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree NEWLINE235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(390, 1);
		try
		{
			// SugarCpp.g:391:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt102=3;
			try { DebugEnterDecision(102, false);
			switch (input.LA(1))
			{
			case 159:
				{
				alt102 = 1;
				}
				break;
			case 155:
				{
				alt102 = 2;
				}
				break;
			case 141:
				{
				alt102 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:391:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(391, 4);
				string_literal221=(IToken)Match(input,159,Follow._159_in_stmt_while2454);  
				stream_159.Add(string_literal221);

				DebugLocation(391, 12);
				PushFollow(Follow._expr_in_stmt_while2456);
				expr222=expr();
				PopFollow();

				stream_expr.Add(expr222.Tree);
				DebugLocation(391, 17);
				// SugarCpp.g:391:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==NEWLINE))
				{
					alt97 = 1;
				}
				else if ((LA97_0==149))
				{
					alt97 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:391:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(391, 19);
					// SugarCpp.g:391:19: ( NEWLINE )+
					int cnt96=0;
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, false);
						int LA96_0 = input.LA(1);

						if ((LA96_0==NEWLINE))
						{
							alt96 = 1;
						}


						} finally { DebugExitDecision(96); }
						switch (alt96)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:391:19: NEWLINE
							{
							DebugLocation(391, 19);
							NEWLINE223=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2460);  
							stream_NEWLINE.Add(NEWLINE223);


							}
							break;

						default:
							if (cnt96 >= 1)
								goto loop96;

							EarlyExitException eee96 = new EarlyExitException( 96, input );
							DebugRecognitionException(eee96);
							throw eee96;
						}
						cnt96++;
					}
					loop96:
						;

					} finally { DebugExitSubRule(96); }

					DebugLocation(391, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2463);
					stmt_block224=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block224.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(391, 42);
						// SugarCpp.g:391:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(391, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(391, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:392:13: 'then' inline_stmt_block
					{
					DebugLocation(392, 13);
					string_literal225=(IToken)Match(input,149,Follow._149_in_stmt_while2487);  
					stream_149.Add(string_literal225);

					DebugLocation(392, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2489);
					inline_stmt_block226=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block226.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(392, 41);
						// SugarCpp.g:392:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(392, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(392, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:394:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(394, 4);
				string_literal227=(IToken)Match(input,155,Follow._155_in_stmt_while2513);  
				stream_155.Add(string_literal227);

				DebugLocation(394, 12);
				PushFollow(Follow._expr_in_stmt_while2515);
				expr228=expr();
				PopFollow();

				stream_expr.Add(expr228.Tree);
				DebugLocation(394, 17);
				// SugarCpp.g:394:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==NEWLINE))
				{
					alt99 = 1;
				}
				else if ((LA99_0==149))
				{
					alt99 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:394:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(394, 19);
					// SugarCpp.g:394:19: ( NEWLINE )+
					int cnt98=0;
					try { DebugEnterSubRule(98);
					while (true)
					{
						int alt98=2;
						try { DebugEnterDecision(98, false);
						int LA98_0 = input.LA(1);

						if ((LA98_0==NEWLINE))
						{
							alt98 = 1;
						}


						} finally { DebugExitDecision(98); }
						switch (alt98)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:394:19: NEWLINE
							{
							DebugLocation(394, 19);
							NEWLINE229=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2519);  
							stream_NEWLINE.Add(NEWLINE229);


							}
							break;

						default:
							if (cnt98 >= 1)
								goto loop98;

							EarlyExitException eee98 = new EarlyExitException( 98, input );
							DebugRecognitionException(eee98);
							throw eee98;
						}
						cnt98++;
					}
					loop98:
						;

					} finally { DebugExitSubRule(98); }

					DebugLocation(394, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2522);
					stmt_block230=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block230.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(394, 42);
						// SugarCpp.g:394:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(394, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(394, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:395:13: 'then' inline_stmt_block
					{
					DebugLocation(395, 13);
					string_literal231=(IToken)Match(input,149,Follow._149_in_stmt_while2546);  
					stream_149.Add(string_literal231);

					DebugLocation(395, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2548);
					inline_stmt_block232=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block232.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(395, 41);
						// SugarCpp.g:395:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(395, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(395, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(99); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:397:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(397, 4);
				string_literal233=(IToken)Match(input,141,Follow._141_in_stmt_while2572);  
				stream_141.Add(string_literal233);

				DebugLocation(397, 11);
				// SugarCpp.g:397:11: ( expr )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==IDENT||LA100_0==NUMBER||LA100_0==STRING||LA100_0==77||LA100_0==82||LA100_0==84||LA100_0==86||(LA100_0>=88 && LA100_0<=89)||(LA100_0>=92 && LA100_0<=93)||(LA100_0>=119 && LA100_0<=120)||(LA100_0>=143 && LA100_0<=144)||LA100_0==163))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:397:11: expr
					{
					DebugLocation(397, 11);
					PushFollow(Follow._expr_in_stmt_while2574);
					expr234=expr();
					PopFollow();

					stream_expr.Add(expr234.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(397, 17);
				// SugarCpp.g:397:17: ( NEWLINE )+
				int cnt101=0;
				try { DebugEnterSubRule(101);
				while (true)
				{
					int alt101=2;
					try { DebugEnterDecision(101, false);
					int LA101_0 = input.LA(1);

					if ((LA101_0==NEWLINE))
					{
						alt101 = 1;
					}


					} finally { DebugExitDecision(101); }
					switch (alt101)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:397:17: NEWLINE
						{
						DebugLocation(397, 17);
						NEWLINE235=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2577);  
						stream_NEWLINE.Add(NEWLINE235);


						}
						break;

					default:
						if (cnt101 >= 1)
							goto loop101;

						EarlyExitException eee101 = new EarlyExitException( 101, input );
						DebugRecognitionException(eee101);
						throw eee101;
					}
					cnt101++;
				}
				loop101:
					;

				} finally { DebugExitSubRule(101); }

				DebugLocation(397, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2580);
				stmt_block236=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block236.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 397:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(397, 40);
					// SugarCpp.g:397:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(397, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(397, 52);
					// SugarCpp.g:397:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(397, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(397, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 37);
			LeaveRule("stmt_while", 37);
			LeaveRule_stmt_while();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:400:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 38);
		TraceIn("for_range", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal238 = default(IToken);
		IToken string_literal239 = default(IToken);
		IToken string_literal240 = default(IToken);
		IToken string_literal241 = default(IToken);
		IToken string_literal242 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree string_literal239_tree = default(CommonTree);
		CommonTree string_literal240_tree = default(CommonTree);
		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree string_literal242_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(400, 1);
		try
		{
			// SugarCpp.g:401:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:401:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(401, 4);
			PushFollow(Follow._ident_in_for_range2602);
			ident237=ident();
			PopFollow();

			stream_ident.Add(ident237.Tree);
			DebugLocation(401, 10);
			string_literal238=(IToken)Match(input,106,Follow._106_in_for_range2604);  
			stream_106.Add(string_literal238);

			DebugLocation(401, 16);
			PushFollow(Follow._expr_in_for_range2608);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(401, 22);
			// SugarCpp.g:401:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt105=3;
			try { DebugEnterSubRule(105);
			try { DebugEnterDecision(105, false);
			switch (input.LA(1))
			{
			case 150:
				{
				alt105 = 1;
				}
				break;
			case 132:
				{
				alt105 = 2;
				}
				break;
			case NEWLINE:
			case 91:
			case 104:
			case 136:
			case 137:
			case 153:
			case 155:
			case 159:
				{
				alt105 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:401:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(401, 23);
				string_literal239=(IToken)Match(input,150,Follow._150_in_for_range2611);  
				stream_150.Add(string_literal239);

				DebugLocation(401, 29);
				PushFollow(Follow._expr_in_for_range2615);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(401, 35);
				// SugarCpp.g:401:35: ( 'by' c= expr )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==127))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:401:36: 'by' c= expr
					{
					DebugLocation(401, 36);
					string_literal240=(IToken)Match(input,127,Follow._127_in_for_range2618);  
					stream_127.Add(string_literal240);

					DebugLocation(401, 42);
					PushFollow(Follow._expr_in_for_range2622);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(103); }



				{
				// AST REWRITE
				// elements: a, c, b, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 401:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(401, 53);
					// SugarCpp.g:401:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(401, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(401, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(401, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(401, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(401, 80);
					// SugarCpp.g:401:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(401, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:402:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(402, 8);
				string_literal241=(IToken)Match(input,132,Follow._132_in_for_range2651);  
				stream_132.Add(string_literal241);

				DebugLocation(402, 18);
				PushFollow(Follow._expr_in_for_range2655);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(402, 24);
				// SugarCpp.g:402:24: ( 'by' c= expr )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==127))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:25: 'by' c= expr
					{
					DebugLocation(402, 25);
					string_literal242=(IToken)Match(input,127,Follow._127_in_for_range2658);  
					stream_127.Add(string_literal242);

					DebugLocation(402, 31);
					PushFollow(Follow._expr_in_for_range2662);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(104); }



				{
				// AST REWRITE
				// elements: ident, a, c, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 402:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(402, 42);
					// SugarCpp.g:402:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(402, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(402, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(402, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(402, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(402, 74);
					// SugarCpp.g:402:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(402, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:403:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 403:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(403, 12);
					// SugarCpp.g:403:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(403, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(403, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(403, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 38);
			LeaveRule("for_range", 38);
			LeaveRule_for_range();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:407:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 39);
		TraceIn("for_when", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr243 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(407, 1);
		try
		{
			// SugarCpp.g:408:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:408:4: expr
			{
			DebugLocation(408, 4);
			PushFollow(Follow._expr_in_for_when2720);
			expr243=expr();
			PopFollow();

			stream_expr.Add(expr243.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 408:9: -> ^( For_Item_When expr )
			{
				DebugLocation(408, 12);
				// SugarCpp.g:408:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(408, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(408, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 39);
			LeaveRule("for_when", 39);
			LeaveRule_for_when();
		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:411:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 40);
		TraceIn("for_item", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when245 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(411, 1);
		try
		{
			// SugarCpp.g:412:2: ( for_range | for_when )
			int alt106=2;
			try { DebugEnterDecision(106, false);
			try
			{
				alt106 = dfa106.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:412:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._for_range_in_for_item2739);
				for_range244=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range244.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:413:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(413, 4);
				PushFollow(Follow._for_when_in_for_item2744);
				for_when245=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when245.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 40);
			LeaveRule("for_item", 40);
			LeaveRule_for_item();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:416:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 41);
		TraceIn("stmt_for", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal246 = default(IToken);
		IToken char_literal248 = default(IToken);
		IToken NEWLINE250 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item247 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block251 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree NEWLINE250_tree = default(CommonTree);
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(416, 1);
		try
		{
			// SugarCpp.g:417:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:417:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(417, 4);
			string_literal246=(IToken)Match(input,136,Follow._136_in_stmt_for2755);  
			stream_136.Add(string_literal246);

			DebugLocation(417, 10);
			// SugarCpp.g:417:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:417:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(417, 12);
			PushFollow(Follow._for_item_in_stmt_for2759);
			for_item247=for_item();
			PopFollow();

			stream_for_item.Add(for_item247.Tree);
			DebugLocation(417, 21);
			// SugarCpp.g:417:21: ( ',' for_item )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==91))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:417:22: ',' for_item
					{
					DebugLocation(417, 22);
					char_literal248=(IToken)Match(input,91,Follow._91_in_stmt_for2762);  
					stream_91.Add(char_literal248);

					DebugLocation(417, 26);
					PushFollow(Follow._for_item_in_stmt_for2764);
					for_item249=for_item();
					PopFollow();

					stream_for_item.Add(for_item249.Tree);

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }

			DebugLocation(417, 37);
			// SugarCpp.g:417:37: ( NEWLINE )+
			int cnt108=0;
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==NEWLINE))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:417:37: NEWLINE
					{
					DebugLocation(417, 37);
					NEWLINE250=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2768);  
					stream_NEWLINE.Add(NEWLINE250);


					}
					break;

				default:
					if (cnt108 >= 1)
						goto loop108;

					EarlyExitException eee108 = new EarlyExitException( 108, input );
					DebugRecognitionException(eee108);
					throw eee108;
				}
				cnt108++;
			}
			loop108:
				;

			} finally { DebugExitSubRule(108); }

			DebugLocation(417, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2771);
			stmt_block251=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block251.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 417:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(417, 60);
				// SugarCpp.g:417:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(417, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(417, 71);
				// SugarCpp.g:417:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(417, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(417, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 41);
			LeaveRule("stmt_for", 41);
			LeaveRule_stmt_for();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:422:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 42);
		TraceIn("stmt_try", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal252 = default(IToken);
		IToken NEWLINE253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken NEWLINE258 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block259 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal252_tree = default(CommonTree);
		CommonTree NEWLINE253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree NEWLINE258_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:423:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(423, 4);
			string_literal252=(IToken)Match(input,151,Follow._151_in_stmt_try2802);  
			stream_151.Add(string_literal252);

			DebugLocation(423, 10);
			// SugarCpp.g:423:10: ( NEWLINE )+
			int cnt109=0;
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:423:10: NEWLINE
					{
					DebugLocation(423, 10);
					NEWLINE253=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2804);  
					stream_NEWLINE.Add(NEWLINE253);


					}
					break;

				default:
					if (cnt109 >= 1)
						goto loop109;

					EarlyExitException eee109 = new EarlyExitException( 109, input );
					DebugRecognitionException(eee109);
					throw eee109;
				}
				cnt109++;
			}
			loop109:
				;

			} finally { DebugExitSubRule(109); }

			DebugLocation(423, 19);
			PushFollow(Follow._stmt_block_in_stmt_try2807);
			stmt_block254=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block254.Tree);
			DebugLocation(423, 30);
			// SugarCpp.g:423:30: ( NEWLINE )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==NEWLINE))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:423:30: NEWLINE
					{
					DebugLocation(423, 30);
					NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2809);  
					stream_NEWLINE.Add(NEWLINE255);


					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }

			DebugLocation(423, 39);
			string_literal256=(IToken)Match(input,128,Follow._128_in_stmt_try2812);  
			stream_128.Add(string_literal256);

			DebugLocation(423, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try2814);
			stmt_alloc257=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc257.Tree);
			DebugLocation(423, 58);
			// SugarCpp.g:423:58: ( NEWLINE )+
			int cnt111=0;
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==NEWLINE))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:423:58: NEWLINE
					{
					DebugLocation(423, 58);
					NEWLINE258=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2816);  
					stream_NEWLINE.Add(NEWLINE258);


					}
					break;

				default:
					if (cnt111 >= 1)
						goto loop111;

					EarlyExitException eee111 = new EarlyExitException( 111, input );
					DebugRecognitionException(eee111);
					throw eee111;
				}
				cnt111++;
			}
			loop111:
				;

			} finally { DebugExitSubRule(111); }

			DebugLocation(423, 67);
			PushFollow(Follow._stmt_block_in_stmt_try2819);
			stmt_block259=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block259.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 423:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(423, 81);
				// SugarCpp.g:423:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(423, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(423, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(423, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(423, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 42);
			LeaveRule("stmt_try", 42);
			LeaveRule_stmt_try();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:426:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 43);
		TraceIn("switch_item", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal260 = default(IToken);
		IToken char_literal262 = default(IToken);
		IToken NEWLINE264 = default(IToken);
		IToken string_literal266 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree char_literal262_tree = default(CommonTree);
		CommonTree NEWLINE264_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(426, 1);
		try
		{
			// SugarCpp.g:427:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:427:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(427, 4);
			string_literal260=(IToken)Match(input,157,Follow._157_in_switch_item2842);  
			stream_157.Add(string_literal260);

			DebugLocation(427, 11);
			PushFollow(Follow._expr_in_switch_item2844);
			expr261=expr();
			PopFollow();

			stream_expr.Add(expr261.Tree);
			DebugLocation(427, 16);
			// SugarCpp.g:427:16: ( ',' expr )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==91))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:427:17: ',' expr
					{
					DebugLocation(427, 17);
					char_literal262=(IToken)Match(input,91,Follow._91_in_switch_item2847);  
					stream_91.Add(char_literal262);

					DebugLocation(427, 21);
					PushFollow(Follow._expr_in_switch_item2849);
					expr263=expr();
					PopFollow();

					stream_expr.Add(expr263.Tree);

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }

			DebugLocation(427, 28);
			// SugarCpp.g:427:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==NEWLINE))
			{
				alt114 = 1;
			}
			else if ((LA114_0==149))
			{
				alt114 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:427:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(427, 30);
				// SugarCpp.g:427:30: ( NEWLINE )+
				int cnt113=0;
				try { DebugEnterSubRule(113);
				while (true)
				{
					int alt113=2;
					try { DebugEnterDecision(113, false);
					int LA113_0 = input.LA(1);

					if ((LA113_0==NEWLINE))
					{
						alt113 = 1;
					}


					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:427:30: NEWLINE
						{
						DebugLocation(427, 30);
						NEWLINE264=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item2855);  
						stream_NEWLINE.Add(NEWLINE264);


						}
						break;

					default:
						if (cnt113 >= 1)
							goto loop113;

						EarlyExitException eee113 = new EarlyExitException( 113, input );
						DebugRecognitionException(eee113);
						throw eee113;
					}
					cnt113++;
				}
				loop113:
					;

				} finally { DebugExitSubRule(113); }

				DebugLocation(427, 39);
				PushFollow(Follow._stmt_block_in_switch_item2858);
				stmt_block265=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block265.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 427:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(427, 53);
					// SugarCpp.g:427:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(427, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(427, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(427, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(427, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:428:30: 'then' inline_stmt_block
				{
				DebugLocation(428, 30);
				string_literal266=(IToken)Match(input,149,Follow._149_in_switch_item2900);  
				stream_149.Add(string_literal266);

				DebugLocation(428, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item2902);
				inline_stmt_block267=inline_stmt_block();
				PopFollow();

				stream_inline_stmt_block.Add(inline_stmt_block267.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 428:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(428, 58);
					// SugarCpp.g:428:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(428, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(428, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(428, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(428, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 43);
			LeaveRule("switch_item", 43);
			LeaveRule_switch_item();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:432:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 44);
		TraceIn("stmt_switch", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal268 = default(IToken);
		IToken NEWLINE270 = default(IToken);
		IToken INDENT271 = default(IToken);
		IToken NEWLINE272 = default(IToken);
		IToken NEWLINE274 = default(IToken);
		IToken string_literal275 = default(IToken);
		IToken NEWLINE276 = default(IToken);
		IToken NEWLINE278 = default(IToken);
		IToken DEDENT279 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree NEWLINE270_tree = default(CommonTree);
		CommonTree INDENT271_tree = default(CommonTree);
		CommonTree NEWLINE272_tree = default(CommonTree);
		CommonTree NEWLINE274_tree = default(CommonTree);
		CommonTree string_literal275_tree = default(CommonTree);
		CommonTree NEWLINE276_tree = default(CommonTree);
		CommonTree NEWLINE278_tree = default(CommonTree);
		CommonTree DEDENT279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(432, 1);
		try
		{
			// SugarCpp.g:433:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:433:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(433, 4);
			string_literal268=(IToken)Match(input,148,Follow._148_in_stmt_switch2935);  
			stream_148.Add(string_literal268);

			DebugLocation(433, 13);
			// SugarCpp.g:433:13: ( expr )?
			int alt115=2;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==IDENT||LA115_0==NUMBER||LA115_0==STRING||LA115_0==77||LA115_0==82||LA115_0==84||LA115_0==86||(LA115_0>=88 && LA115_0<=89)||(LA115_0>=92 && LA115_0<=93)||(LA115_0>=119 && LA115_0<=120)||(LA115_0>=143 && LA115_0<=144)||LA115_0==163))
			{
				alt115 = 1;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:433:13: expr
				{
				DebugLocation(433, 13);
				PushFollow(Follow._expr_in_stmt_switch2937);
				expr269=expr();
				PopFollow();

				stream_expr.Add(expr269.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(115); }

			DebugLocation(433, 19);
			// SugarCpp.g:433:19: ( NEWLINE )+
			int cnt116=0;
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==NEWLINE))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:19: NEWLINE
					{
					DebugLocation(433, 19);
					NEWLINE270=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2940);  
					stream_NEWLINE.Add(NEWLINE270);


					}
					break;

				default:
					if (cnt116 >= 1)
						goto loop116;

					EarlyExitException eee116 = new EarlyExitException( 116, input );
					DebugRecognitionException(eee116);
					throw eee116;
				}
				cnt116++;
			}
			loop116:
				;

			} finally { DebugExitSubRule(116); }

			DebugLocation(433, 28);
			INDENT271=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch2943);  
			stream_INDENT.Add(INDENT271);

			DebugLocation(433, 35);
			// SugarCpp.g:433:35: ( NEWLINE )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:35: NEWLINE
					{
					DebugLocation(433, 35);
					NEWLINE272=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2945);  
					stream_NEWLINE.Add(NEWLINE272);


					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }

			DebugLocation(433, 44);
			// SugarCpp.g:433:44: ( switch_item ( NEWLINE )+ )+
			int cnt119=0;
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==157))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:45: switch_item ( NEWLINE )+
					{
					DebugLocation(433, 45);
					PushFollow(Follow._switch_item_in_stmt_switch2949);
					switch_item273=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item273.Tree);
					DebugLocation(433, 57);
					// SugarCpp.g:433:57: ( NEWLINE )+
					int cnt118=0;
					try { DebugEnterSubRule(118);
					while (true)
					{
						int alt118=2;
						try { DebugEnterDecision(118, false);
						int LA118_0 = input.LA(1);

						if ((LA118_0==NEWLINE))
						{
							alt118 = 1;
						}


						} finally { DebugExitDecision(118); }
						switch (alt118)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:433:57: NEWLINE
							{
							DebugLocation(433, 57);
							NEWLINE274=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2951);  
							stream_NEWLINE.Add(NEWLINE274);


							}
							break;

						default:
							if (cnt118 >= 1)
								goto loop118;

							EarlyExitException eee118 = new EarlyExitException( 118, input );
							DebugRecognitionException(eee118);
							throw eee118;
						}
						cnt118++;
					}
					loop118:
						;

					} finally { DebugExitSubRule(118); }


					}
					break;

				default:
					if (cnt119 >= 1)
						goto loop119;

					EarlyExitException eee119 = new EarlyExitException( 119, input );
					DebugRecognitionException(eee119);
					throw eee119;
				}
				cnt119++;
			}
			loop119:
				;

			} finally { DebugExitSubRule(119); }

			DebugLocation(433, 68);
			// SugarCpp.g:433:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==133))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:433:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(433, 69);
				string_literal275=(IToken)Match(input,133,Follow._133_in_stmt_switch2957);  
				stream_133.Add(string_literal275);

				DebugLocation(433, 76);
				// SugarCpp.g:433:76: ( NEWLINE )+
				int cnt120=0;
				try { DebugEnterSubRule(120);
				while (true)
				{
					int alt120=2;
					try { DebugEnterDecision(120, false);
					int LA120_0 = input.LA(1);

					if ((LA120_0==NEWLINE))
					{
						alt120 = 1;
					}


					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:433:76: NEWLINE
						{
						DebugLocation(433, 76);
						NEWLINE276=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2959);  
						stream_NEWLINE.Add(NEWLINE276);


						}
						break;

					default:
						if (cnt120 >= 1)
							goto loop120;

						EarlyExitException eee120 = new EarlyExitException( 120, input );
						DebugRecognitionException(eee120);
						throw eee120;
					}
					cnt120++;
				}
				loop120:
					;

				} finally { DebugExitSubRule(120); }

				DebugLocation(433, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch2962);
				stmt_block277=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block277.Tree);
				DebugLocation(433, 96);
				// SugarCpp.g:433:96: ( NEWLINE )*
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==NEWLINE))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch ( alt121 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:433:96: NEWLINE
						{
						DebugLocation(433, 96);
						NEWLINE278=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2964);  
						stream_NEWLINE.Add(NEWLINE278);


						}
						break;

					default:
						goto loop121;
					}
				}

				loop121:
					;

				} finally { DebugExitSubRule(121); }


				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(433, 107);
			DEDENT279=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch2969);  
			stream_DEDENT.Add(DEDENT279);



			{
			// AST REWRITE
			// elements: switch_item, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 433:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(433, 117);
				// SugarCpp.g:433:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(433, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(433, 131);
				// SugarCpp.g:433:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(433, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(433, 137);
				// SugarCpp.g:433:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(433, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(433, 150);
				// SugarCpp.g:433:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(433, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 44);
			LeaveRule("stmt_switch", 44);
			LeaveRule_stmt_switch();
		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:436:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 45);
		TraceIn("ident_list", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal281 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident282 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal281_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(436, 1);
		try
		{
			// SugarCpp.g:437:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:437:4: ident ( ',' ident )*
			{
			DebugLocation(437, 4);
			PushFollow(Follow._ident_in_ident_list2995);
			ident280=ident();
			PopFollow();

			stream_ident.Add(ident280.Tree);
			DebugLocation(437, 10);
			// SugarCpp.g:437:10: ( ',' ident )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==91))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:437:11: ',' ident
					{
					DebugLocation(437, 11);
					char_literal281=(IToken)Match(input,91,Follow._91_in_ident_list2998);  
					stream_91.Add(char_literal281);

					DebugLocation(437, 15);
					PushFollow(Follow._ident_in_ident_list3000);
					ident282=ident();
					PopFollow();

					stream_ident.Add(ident282.Tree);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 437:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(437, 26);
				// SugarCpp.g:437:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(437, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(437, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(437, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 45);
			LeaveRule("ident_list", 45);
			LeaveRule_ident_list();
		}
		DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:440:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 46);
		TraceIn("stmt_alloc", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal284 = default(IToken);
		IToken char_literal286 = default(IToken);
		IToken string_literal287 = default(IToken);
		IToken char_literal289 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken char_literal294 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list290 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal284_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		CommonTree string_literal287_tree = default(CommonTree);
		CommonTree char_literal289_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree char_literal294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(440, 1);
		try
		{
			// SugarCpp.g:441:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:441:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			{
			DebugLocation(441, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3022);
			ident_list283=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list283.Tree);
			DebugLocation(441, 15);
			// SugarCpp.g:441:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			int alt128=2;
			try { DebugEnterSubRule(128);
			try { DebugEnterDecision(128, false);
			int LA128_0 = input.LA(1);

			if ((LA128_0==101))
			{
				alt128 = 1;
			}
			else if ((LA128_0==103))
			{
				alt128 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:441:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(441, 17);
				char_literal284=(IToken)Match(input,101,Follow._101_in_stmt_alloc3026);  
				stream_101.Add(char_literal284);

				DebugLocation(441, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3028);
				type_name285=type_name();
				PopFollow();

				stream_type_name.Add(type_name285.Tree);
				DebugLocation(441, 31);
				// SugarCpp.g:441:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt126=3;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				switch (input.LA(1))
				{
				case 103:
				case 110:
					{
					alt126 = 1;
					}
					break;
				case 84:
					{
					alt126 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 104:
				case 136:
				case 137:
				case 153:
				case 155:
				case 159:
					{
					alt126 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:441:33: ( '=' | ':=' ) expr
					{
					DebugLocation(441, 33);
					// SugarCpp.g:441:33: ( '=' | ':=' )
					int alt124=2;
					try { DebugEnterSubRule(124);
					try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0==110))
					{
						alt124 = 1;
					}
					else if ((LA124_0==103))
					{
						alt124 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:441:34: '='
						{
						DebugLocation(441, 34);
						char_literal286=(IToken)Match(input,110,Follow._110_in_stmt_alloc3033);  
						stream_110.Add(char_literal286);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:441:40: ':='
						{
						DebugLocation(441, 40);
						string_literal287=(IToken)Match(input,103,Follow._103_in_stmt_alloc3037);  
						stream_103.Add(string_literal287);


						}
						break;

					}
					} finally { DebugExitSubRule(124); }

					DebugLocation(441, 46);
					PushFollow(Follow._expr_in_stmt_alloc3040);
					expr288=expr();
					PopFollow();

					stream_expr.Add(expr288.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(441, 55);
						// SugarCpp.g:441:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(441, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(441, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(441, 95);
						// SugarCpp.g:441:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(441, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:442:33: '(' ( expr_list )? ')'
					{
					DebugLocation(442, 33);
					char_literal289=(IToken)Match(input,84,Follow._84_in_stmt_alloc3088);  
					stream_84.Add(char_literal289);

					DebugLocation(442, 37);
					// SugarCpp.g:442:37: ( expr_list )?
					int alt125=2;
					try { DebugEnterSubRule(125);
					try { DebugEnterDecision(125, false);
					int LA125_0 = input.LA(1);

					if ((LA125_0==IDENT||LA125_0==NUMBER||LA125_0==STRING||LA125_0==77||LA125_0==82||LA125_0==84||LA125_0==86||(LA125_0>=88 && LA125_0<=89)||(LA125_0>=92 && LA125_0<=93)||(LA125_0>=119 && LA125_0<=120)||(LA125_0>=143 && LA125_0<=144)||LA125_0==163))
					{
						alt125 = 1;
					}
					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:442:37: expr_list
						{
						DebugLocation(442, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3090);
						expr_list290=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list290.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(125); }

					DebugLocation(442, 48);
					char_literal291=(IToken)Match(input,85,Follow._85_in_stmt_alloc3093);  
					stream_85.Add(char_literal291);



					{
					// AST REWRITE
					// elements: expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(442, 56);
						// SugarCpp.g:442:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(442, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(442, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(442, 98);
						// SugarCpp.g:442:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(442, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:443:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(443, 18);
						// SugarCpp.g:443:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(443, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(443, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(126); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:445:8: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(445, 8);
				string_literal292=(IToken)Match(input,103,Follow._103_in_stmt_alloc3154);  
				stream_103.Add(string_literal292);

				DebugLocation(445, 14);
				// SugarCpp.g:445:14: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:445:15: expr ( ',' expr )*
				{
				DebugLocation(445, 15);
				PushFollow(Follow._expr_in_stmt_alloc3158);
				expr293=expr();
				PopFollow();

				stream_expr.Add(expr293.Tree);
				DebugLocation(445, 20);
				// SugarCpp.g:445:20: ( ',' expr )*
				try { DebugEnterSubRule(127);
				while (true)
				{
					int alt127=2;
					try { DebugEnterDecision(127, false);
					int LA127_0 = input.LA(1);

					if ((LA127_0==91))
					{
						alt127 = 1;
					}


					} finally { DebugExitDecision(127); }
					switch ( alt127 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:445:21: ',' expr
						{
						DebugLocation(445, 21);
						char_literal294=(IToken)Match(input,91,Follow._91_in_stmt_alloc3161);  
						stream_91.Add(char_literal294);

						DebugLocation(445, 25);
						PushFollow(Follow._expr_in_stmt_alloc3163);
						expr295=expr();
						PopFollow();

						stream_expr.Add(expr295.Tree);

						}
						break;

					default:
						goto loop127;
					}
				}

				loop127:
					;

				} finally { DebugExitSubRule(127); }


				}



				{
				// AST REWRITE
				// elements: expr, ident_list, 103
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 445:33: -> ^( ':=' ident_list ( expr )* )
				{
					DebugLocation(445, 36);
					// SugarCpp.g:445:36: ^( ':=' ident_list ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(445, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_103.NextNode(), root_1);

					DebugLocation(445, 43);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(445, 54);
					// SugarCpp.g:445:54: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(445, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 46);
			LeaveRule("stmt_alloc", 46);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:448:1: stmt_modify : lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 47);
		TraceIn("stmt_modify", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal299 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal299_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(448, 1);
		try
		{
			// SugarCpp.g:449:2: ( lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:449:4: lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(449, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3189);
			lvalue296=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue296.Tree);
			DebugLocation(449, 11);
			// SugarCpp.g:449:11: ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			int alt129=3;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==80||LA129_0==83||LA129_0==87||LA129_0==90||LA129_0==94||LA129_0==100||LA129_0==108||LA129_0==110||LA129_0==116||LA129_0==123||LA129_0==161))
			{
				alt129 = 1;
			}
			else if ((LA129_0==118))
			{
				alt129 = 2;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:449:13: modify_expr_op ^ expr
				{
				DebugLocation(449, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3193);
				modify_expr_op297=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op297.Tree, root_0);
				DebugLocation(449, 29);
				PushFollow(Follow._expr_in_stmt_modify3196);
				expr298=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr298.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:450:13: '?=' ^ modify_expr
				{
				DebugLocation(450, 17);
				string_literal299=(IToken)Match(input,118,Follow._118_in_stmt_modify3210); 
				string_literal299_tree = (CommonTree)adaptor.Create(string_literal299);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal299_tree, root_0);
				DebugLocation(450, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify3213);
				modify_expr300=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr300.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 47);
			LeaveRule("stmt_modify", 47);
			LeaveRule_stmt_modify();
		}
		DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:453:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( stmt )+ ) ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 48);
		TraceIn("where_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE301 = default(IToken);
		IToken INDENT302 = default(IToken);
		IToken NEWLINE303 = default(IToken);
		IToken string_literal304 = default(IToken);
		IToken NEWLINE306 = default(IToken);
		IToken DEDENT307 = default(IToken);
		IToken NEWLINE308 = default(IToken);
		IToken INDENT309 = default(IToken);
		IToken NEWLINE310 = default(IToken);
		IToken NEWLINE312 = default(IToken);
		IToken DEDENT313 = default(IToken);
		IToken NEWLINE314 = default(IToken);
		IToken DEDENT315 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken INDENT317 = default(IToken);
		IToken NEWLINE318 = default(IToken);
		IToken NEWLINE320 = default(IToken);
		IToken DEDENT321 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		IToken DEDENT323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt319 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE301_tree = default(CommonTree);
		CommonTree INDENT302_tree = default(CommonTree);
		CommonTree NEWLINE303_tree = default(CommonTree);
		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree NEWLINE306_tree = default(CommonTree);
		CommonTree DEDENT307_tree = default(CommonTree);
		CommonTree NEWLINE308_tree = default(CommonTree);
		CommonTree INDENT309_tree = default(CommonTree);
		CommonTree NEWLINE310_tree = default(CommonTree);
		CommonTree NEWLINE312_tree = default(CommonTree);
		CommonTree DEDENT313_tree = default(CommonTree);
		CommonTree NEWLINE314_tree = default(CommonTree);
		CommonTree DEDENT315_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree INDENT317_tree = default(CommonTree);
		CommonTree NEWLINE318_tree = default(CommonTree);
		CommonTree NEWLINE320_tree = default(CommonTree);
		CommonTree DEDENT321_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		CommonTree DEDENT323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(453, 1);
		try
		{
			// SugarCpp.g:454:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( stmt )+ ) ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:454:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( stmt )+ ) ) | -> expr )
			{
			DebugLocation(454, 4);
			// SugarCpp.g:454:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:454:5: a= expr
			{
			DebugLocation(454, 6);
			PushFollow(Follow._expr_in_where_expr3229);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 454:12: -> $a
			{
				DebugLocation(454, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(454, 19);
			// SugarCpp.g:454:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( stmt )+ ) ) | -> expr )
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			try
			{
				alt145 = dfa145.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:454:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( stmt )+ ) )
				{
				DebugLocation(454, 21);
				// SugarCpp.g:454:21: ( NEWLINE )+
				int cnt130=0;
				try { DebugEnterSubRule(130);
				while (true)
				{
					int alt130=2;
					try { DebugEnterDecision(130, false);
					int LA130_0 = input.LA(1);

					if ((LA130_0==NEWLINE))
					{
						alt130 = 1;
					}


					} finally { DebugExitDecision(130); }
					switch (alt130)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:21: NEWLINE
						{
						DebugLocation(454, 21);
						NEWLINE301=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3239);  
						stream_NEWLINE.Add(NEWLINE301);


						}
						break;

					default:
						if (cnt130 >= 1)
							goto loop130;

						EarlyExitException eee130 = new EarlyExitException( 130, input );
						DebugRecognitionException(eee130);
						throw eee130;
					}
					cnt130++;
				}
				loop130:
					;

				} finally { DebugExitSubRule(130); }

				DebugLocation(454, 30);
				INDENT302=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3242);  
				stream_INDENT.Add(INDENT302);

				DebugLocation(454, 37);
				// SugarCpp.g:454:37: ( NEWLINE )*
				try { DebugEnterSubRule(131);
				while (true)
				{
					int alt131=2;
					try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0==NEWLINE))
					{
						alt131 = 1;
					}


					} finally { DebugExitDecision(131); }
					switch ( alt131 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:37: NEWLINE
						{
						DebugLocation(454, 37);
						NEWLINE303=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3244);  
						stream_NEWLINE.Add(NEWLINE303);


						}
						break;

					default:
						goto loop131;
					}
				}

				loop131:
					;

				} finally { DebugExitSubRule(131); }

				DebugLocation(454, 46);
				string_literal304=(IToken)Match(input,158,Follow._158_in_where_expr3247);  
				stream_158.Add(string_literal304);

				DebugLocation(454, 54);
				// SugarCpp.g:454:54: ( stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( stmt )+ ) )
				int alt144=2;
				try { DebugEnterSubRule(144);
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==IDENT))
				{
					alt144 = 1;
				}
				else if ((LA144_0==NEWLINE))
				{
					alt144 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:454:56: stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) )
					{
					DebugLocation(454, 56);
					PushFollow(Follow._stmt_alloc_in_where_expr3251);
					stmt_alloc305=stmt_alloc();
					PopFollow();

					stream_stmt_alloc.Add(stmt_alloc305.Tree);
					DebugLocation(454, 67);
					// SugarCpp.g:454:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) )
					int alt138=2;
					try { DebugEnterSubRule(138);
					try { DebugEnterDecision(138, false);
					try
					{
						alt138 = dfa138.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(138); }
					switch (alt138)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(454, 69);
						// SugarCpp.g:454:69: ( NEWLINE )*
						try { DebugEnterSubRule(132);
						while (true)
						{
							int alt132=2;
							try { DebugEnterDecision(132, false);
							int LA132_0 = input.LA(1);

							if ((LA132_0==NEWLINE))
							{
								alt132 = 1;
							}


							} finally { DebugExitDecision(132); }
							switch ( alt132 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:454:69: NEWLINE
								{
								DebugLocation(454, 69);
								NEWLINE306=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3255);  
								stream_NEWLINE.Add(NEWLINE306);


								}
								break;

							default:
								goto loop132;
							}
						}

						loop132:
							;

						} finally { DebugExitSubRule(132); }

						DebugLocation(454, 78);
						DEDENT307=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3258);  
						stream_DEDENT.Add(DEDENT307);



						{
						// AST REWRITE
						// elements: stmt_alloc, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 454:85: -> ^( Expr_Where $where_expr stmt_alloc )
						{
							DebugLocation(454, 88);
							// SugarCpp.g:454:88: ^( Expr_Where $where_expr stmt_alloc )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(454, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(454, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(454, 113);
							adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:455:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(455, 21);
						// SugarCpp.g:455:21: ( NEWLINE )+
						int cnt133=0;
						try { DebugEnterSubRule(133);
						while (true)
						{
							int alt133=2;
							try { DebugEnterDecision(133, false);
							int LA133_0 = input.LA(1);

							if ((LA133_0==NEWLINE))
							{
								alt133 = 1;
							}


							} finally { DebugExitDecision(133); }
							switch (alt133)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:455:21: NEWLINE
								{
								DebugLocation(455, 21);
								NEWLINE308=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3291);  
								stream_NEWLINE.Add(NEWLINE308);


								}
								break;

							default:
								if (cnt133 >= 1)
									goto loop133;

								EarlyExitException eee133 = new EarlyExitException( 133, input );
								DebugRecognitionException(eee133);
								throw eee133;
							}
							cnt133++;
						}
						loop133:
							;

						} finally { DebugExitSubRule(133); }

						DebugLocation(455, 30);
						INDENT309=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3294);  
						stream_INDENT.Add(INDENT309);

						DebugLocation(455, 37);
						// SugarCpp.g:455:37: ( NEWLINE )*
						try { DebugEnterSubRule(134);
						while (true)
						{
							int alt134=2;
							try { DebugEnterDecision(134, false);
							int LA134_0 = input.LA(1);

							if ((LA134_0==NEWLINE))
							{
								alt134 = 1;
							}


							} finally { DebugExitDecision(134); }
							switch ( alt134 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:455:37: NEWLINE
								{
								DebugLocation(455, 37);
								NEWLINE310=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3296);  
								stream_NEWLINE.Add(NEWLINE310);


								}
								break;

							default:
								goto loop134;
							}
						}

						loop134:
							;

						} finally { DebugExitSubRule(134); }

						DebugLocation(455, 46);
						// SugarCpp.g:455:46: ( stmt ( NEWLINE )+ )+
						int cnt136=0;
						try { DebugEnterSubRule(136);
						while (true)
						{
							int alt136=2;
							try { DebugEnterDecision(136, false);
							int LA136_0 = input.LA(1);

							if ((LA136_0==IDENT||LA136_0==77||LA136_0==82||LA136_0==84||LA136_0==86||(LA136_0>=88 && LA136_0<=89)||(LA136_0>=92 && LA136_0<=93)||LA136_0==119||LA136_0==131||(LA136_0>=135 && LA136_0<=137)||LA136_0==141||LA136_0==144||LA136_0==146||LA136_0==148||(LA136_0>=151 && LA136_0<=153)||(LA136_0>=155 && LA136_0<=156)||LA136_0==159||LA136_0==163))
							{
								alt136 = 1;
							}


							} finally { DebugExitDecision(136); }
							switch (alt136)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:455:47: stmt ( NEWLINE )+
								{
								DebugLocation(455, 47);
								PushFollow(Follow._stmt_in_where_expr3300);
								stmt311=stmt();
								PopFollow();

								stream_stmt.Add(stmt311.Tree);
								DebugLocation(455, 52);
								// SugarCpp.g:455:52: ( NEWLINE )+
								int cnt135=0;
								try { DebugEnterSubRule(135);
								while (true)
								{
									int alt135=2;
									try { DebugEnterDecision(135, false);
									int LA135_0 = input.LA(1);

									if ((LA135_0==NEWLINE))
									{
										alt135 = 1;
									}


									} finally { DebugExitDecision(135); }
									switch (alt135)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:455:52: NEWLINE
										{
										DebugLocation(455, 52);
										NEWLINE312=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3302);  
										stream_NEWLINE.Add(NEWLINE312);


										}
										break;

									default:
										if (cnt135 >= 1)
											goto loop135;

										EarlyExitException eee135 = new EarlyExitException( 135, input );
										DebugRecognitionException(eee135);
										throw eee135;
									}
									cnt135++;
								}
								loop135:
									;

								} finally { DebugExitSubRule(135); }


								}
								break;

							default:
								if (cnt136 >= 1)
									goto loop136;

								EarlyExitException eee136 = new EarlyExitException( 136, input );
								DebugRecognitionException(eee136);
								throw eee136;
							}
							cnt136++;
						}
						loop136:
							;

						} finally { DebugExitSubRule(136); }

						DebugLocation(455, 63);
						DEDENT313=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3307);  
						stream_DEDENT.Add(DEDENT313);

						DebugLocation(455, 70);
						// SugarCpp.g:455:70: ( NEWLINE )*
						try { DebugEnterSubRule(137);
						while (true)
						{
							int alt137=2;
							try { DebugEnterDecision(137, false);
							int LA137_0 = input.LA(1);

							if ((LA137_0==NEWLINE))
							{
								alt137 = 1;
							}


							} finally { DebugExitDecision(137); }
							switch ( alt137 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:455:70: NEWLINE
								{
								DebugLocation(455, 70);
								NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3309);  
								stream_NEWLINE.Add(NEWLINE314);


								}
								break;

							default:
								goto loop137;
							}
						}

						loop137:
							;

						} finally { DebugExitSubRule(137); }

						DebugLocation(455, 79);
						DEDENT315=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3312);  
						stream_DEDENT.Add(DEDENT315);



						{
						// AST REWRITE
						// elements: stmt, stmt_alloc, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 455:86: -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ )
						{
							DebugLocation(455, 89);
							// SugarCpp.g:455:89: ^( Expr_Where $where_expr stmt_alloc ( stmt )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(455, 91);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(455, 103);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(455, 114);
							adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
							DebugLocation(455, 125);
							if (!(stream_stmt.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_stmt.HasNext )
							{
								DebugLocation(455, 125);
								adaptor.AddChild(root_1, stream_stmt.NextTree());

							}
							stream_stmt.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(138); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:457:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(457, 17);
					// SugarCpp.g:457:17: ( NEWLINE )+
					int cnt139=0;
					try { DebugEnterSubRule(139);
					while (true)
					{
						int alt139=2;
						try { DebugEnterDecision(139, false);
						int LA139_0 = input.LA(1);

						if ((LA139_0==NEWLINE))
						{
							alt139 = 1;
						}


						} finally { DebugExitDecision(139); }
						switch (alt139)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:457:17: NEWLINE
							{
							DebugLocation(457, 17);
							NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3364);  
							stream_NEWLINE.Add(NEWLINE316);


							}
							break;

						default:
							if (cnt139 >= 1)
								goto loop139;

							EarlyExitException eee139 = new EarlyExitException( 139, input );
							DebugRecognitionException(eee139);
							throw eee139;
						}
						cnt139++;
					}
					loop139:
						;

					} finally { DebugExitSubRule(139); }

					DebugLocation(457, 26);
					INDENT317=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3367);  
					stream_INDENT.Add(INDENT317);

					DebugLocation(457, 33);
					// SugarCpp.g:457:33: ( NEWLINE )*
					try { DebugEnterSubRule(140);
					while (true)
					{
						int alt140=2;
						try { DebugEnterDecision(140, false);
						int LA140_0 = input.LA(1);

						if ((LA140_0==NEWLINE))
						{
							alt140 = 1;
						}


						} finally { DebugExitDecision(140); }
						switch ( alt140 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:457:33: NEWLINE
							{
							DebugLocation(457, 33);
							NEWLINE318=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3369);  
							stream_NEWLINE.Add(NEWLINE318);


							}
							break;

						default:
							goto loop140;
						}
					}

					loop140:
						;

					} finally { DebugExitSubRule(140); }

					DebugLocation(457, 42);
					// SugarCpp.g:457:42: ( stmt ( NEWLINE )+ )+
					int cnt142=0;
					try { DebugEnterSubRule(142);
					while (true)
					{
						int alt142=2;
						try { DebugEnterDecision(142, false);
						int LA142_0 = input.LA(1);

						if ((LA142_0==IDENT||LA142_0==77||LA142_0==82||LA142_0==84||LA142_0==86||(LA142_0>=88 && LA142_0<=89)||(LA142_0>=92 && LA142_0<=93)||LA142_0==119||LA142_0==131||(LA142_0>=135 && LA142_0<=137)||LA142_0==141||LA142_0==144||LA142_0==146||LA142_0==148||(LA142_0>=151 && LA142_0<=153)||(LA142_0>=155 && LA142_0<=156)||LA142_0==159||LA142_0==163))
						{
							alt142 = 1;
						}


						} finally { DebugExitDecision(142); }
						switch (alt142)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:457:43: stmt ( NEWLINE )+
							{
							DebugLocation(457, 43);
							PushFollow(Follow._stmt_in_where_expr3373);
							stmt319=stmt();
							PopFollow();

							stream_stmt.Add(stmt319.Tree);
							DebugLocation(457, 48);
							// SugarCpp.g:457:48: ( NEWLINE )+
							int cnt141=0;
							try { DebugEnterSubRule(141);
							while (true)
							{
								int alt141=2;
								try { DebugEnterDecision(141, false);
								int LA141_0 = input.LA(1);

								if ((LA141_0==NEWLINE))
								{
									alt141 = 1;
								}


								} finally { DebugExitDecision(141); }
								switch (alt141)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:457:48: NEWLINE
									{
									DebugLocation(457, 48);
									NEWLINE320=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3375);  
									stream_NEWLINE.Add(NEWLINE320);


									}
									break;

								default:
									if (cnt141 >= 1)
										goto loop141;

									EarlyExitException eee141 = new EarlyExitException( 141, input );
									DebugRecognitionException(eee141);
									throw eee141;
								}
								cnt141++;
							}
							loop141:
								;

							} finally { DebugExitSubRule(141); }


							}
							break;

						default:
							if (cnt142 >= 1)
								goto loop142;

							EarlyExitException eee142 = new EarlyExitException( 142, input );
							DebugRecognitionException(eee142);
							throw eee142;
						}
						cnt142++;
					}
					loop142:
						;

					} finally { DebugExitSubRule(142); }

					DebugLocation(457, 59);
					DEDENT321=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3380);  
					stream_DEDENT.Add(DEDENT321);

					DebugLocation(457, 66);
					// SugarCpp.g:457:66: ( NEWLINE )*
					try { DebugEnterSubRule(143);
					while (true)
					{
						int alt143=2;
						try { DebugEnterDecision(143, false);
						int LA143_0 = input.LA(1);

						if ((LA143_0==NEWLINE))
						{
							alt143 = 1;
						}


						} finally { DebugExitDecision(143); }
						switch ( alt143 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:457:66: NEWLINE
							{
							DebugLocation(457, 66);
							NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3382);  
							stream_NEWLINE.Add(NEWLINE322);


							}
							break;

						default:
							goto loop143;
						}
					}

					loop143:
						;

					} finally { DebugExitSubRule(143); }

					DebugLocation(457, 75);
					DEDENT323=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3385);  
					stream_DEDENT.Add(DEDENT323);



					{
					// AST REWRITE
					// elements: where_expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 457:82: -> ^( Expr_Where $where_expr ( stmt )+ )
					{
						DebugLocation(457, 85);
						// SugarCpp.g:457:85: ^( Expr_Where $where_expr ( stmt )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(457, 87);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(457, 99);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(457, 110);
						if (!(stream_stmt.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_stmt.HasNext )
						{
							DebugLocation(457, 110);
							adaptor.AddChild(root_1, stream_stmt.NextTree());

						}
						stream_stmt.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(144); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:459:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 459:15: -> expr
				{
					DebugLocation(459, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(145); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 48);
			LeaveRule("where_expr", 48);
			LeaveRule_where_expr();
		}
		DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:463:1: expr : list_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 49);
		TraceIn("expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr324 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(463, 1);
		try
		{
			// SugarCpp.g:464:2: ( list_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:464:4: list_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(464, 4);
			PushFollow(Follow._list_expr_in_expr3459);
			list_expr324=list_expr();
			PopFollow();

			adaptor.AddChild(root_0, list_expr324.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 49);
			LeaveRule("expr", 49);
			LeaveRule_expr();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:467:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 50);
		TraceIn("list_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal325 = default(IToken);
		IToken char_literal326 = default(IToken);
		IToken NEWLINE327 = default(IToken);
		IToken INDENT328 = default(IToken);
		IToken DEDENT329 = default(IToken);
		IToken char_literal331 = default(IToken);
		IToken NEWLINE332 = default(IToken);
		IToken INDENT333 = default(IToken);
		IToken DEDENT334 = default(IToken);
		IToken char_literal336 = default(IToken);
		IToken NEWLINE337 = default(IToken);
		IToken INDENT338 = default(IToken);
		IToken DEDENT339 = default(IToken);
		IToken char_literal340 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal325_tree = default(CommonTree);
		CommonTree char_literal326_tree = default(CommonTree);
		CommonTree NEWLINE327_tree = default(CommonTree);
		CommonTree INDENT328_tree = default(CommonTree);
		CommonTree DEDENT329_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		CommonTree NEWLINE332_tree = default(CommonTree);
		CommonTree INDENT333_tree = default(CommonTree);
		CommonTree DEDENT334_tree = default(CommonTree);
		CommonTree char_literal336_tree = default(CommonTree);
		CommonTree NEWLINE337_tree = default(CommonTree);
		CommonTree INDENT338_tree = default(CommonTree);
		CommonTree DEDENT339_tree = default(CommonTree);
		CommonTree char_literal340_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(467, 1);
		try
		{
			// SugarCpp.g:468:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt151=2;
			try { DebugEnterDecision(151, false);
			int LA151_0 = input.LA(1);

			if ((LA151_0==120))
			{
				alt151 = 1;
			}
			else if ((LA151_0==IDENT||LA151_0==NUMBER||LA151_0==STRING||LA151_0==77||LA151_0==82||LA151_0==84||LA151_0==86||(LA151_0>=88 && LA151_0<=89)||(LA151_0>=92 && LA151_0<=93)||LA151_0==119||(LA151_0>=143 && LA151_0<=144)||LA151_0==163))
			{
				alt151 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:468:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(468, 4);
				char_literal325=(IToken)Match(input,120,Follow._120_in_list_expr3470);  
				stream_120.Add(char_literal325);

				DebugLocation(468, 8);
				// SugarCpp.g:468:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, false);
				try
				{
					alt149 = dfa149.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(468, 9);
					// SugarCpp.g:468:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(146);
					while (true)
					{
						int alt146=5;
						try { DebugEnterDecision(146, false);
						switch (input.LA(1))
						{
						case 91:
							{
							alt146 = 1;
							}
							break;
						case NEWLINE:
							{
							alt146 = 2;
							}
							break;
						case INDENT:
							{
							alt146 = 3;
							}
							break;
						case DEDENT:
							{
							alt146 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(146); }
						switch ( alt146 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:468:10: ','
							{
							DebugLocation(468, 10);
							char_literal326=(IToken)Match(input,91,Follow._91_in_list_expr3474);  
							stream_91.Add(char_literal326);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:468:16: NEWLINE
							{
							DebugLocation(468, 16);
							NEWLINE327=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3478);  
							stream_NEWLINE.Add(NEWLINE327);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:468:26: INDENT
							{
							DebugLocation(468, 26);
							INDENT328=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3482);  
							stream_INDENT.Add(INDENT328);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:468:35: DEDENT
							{
							DebugLocation(468, 35);
							DEDENT329=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3486);  
							stream_DEDENT.Add(DEDENT329);


							}
							break;

						default:
							goto loop146;
						}
					}

					loop146:
						;

					} finally { DebugExitSubRule(146); }

					DebugLocation(468, 44);
					PushFollow(Follow._list_expr_in_list_expr3490);
					list_expr330=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr330.Tree);
					DebugLocation(468, 54);
					// SugarCpp.g:468:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(148);
					while (true)
					{
						int alt148=2;
						try { DebugEnterDecision(148, false);
						try
						{
							alt148 = dfa148.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(148); }
						switch ( alt148 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:468:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(468, 55);
							// SugarCpp.g:468:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt147=0;
							try { DebugEnterSubRule(147);
							while (true)
							{
								int alt147=5;
								try { DebugEnterDecision(147, false);
								switch (input.LA(1))
								{
								case 91:
									{
									alt147 = 1;
									}
									break;
								case NEWLINE:
									{
									alt147 = 2;
									}
									break;
								case INDENT:
									{
									alt147 = 3;
									}
									break;
								case DEDENT:
									{
									alt147 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(147); }
								switch (alt147)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:468:56: ','
									{
									DebugLocation(468, 56);
									char_literal331=(IToken)Match(input,91,Follow._91_in_list_expr3494);  
									stream_91.Add(char_literal331);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:468:62: NEWLINE
									{
									DebugLocation(468, 62);
									NEWLINE332=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3498);  
									stream_NEWLINE.Add(NEWLINE332);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:468:72: INDENT
									{
									DebugLocation(468, 72);
									INDENT333=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3502);  
									stream_INDENT.Add(INDENT333);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:468:81: DEDENT
									{
									DebugLocation(468, 81);
									DEDENT334=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3506);  
									stream_DEDENT.Add(DEDENT334);


									}
									break;

								default:
									if (cnt147 >= 1)
										goto loop147;

									EarlyExitException eee147 = new EarlyExitException( 147, input );
									DebugRecognitionException(eee147);
									throw eee147;
								}
								cnt147++;
							}
							loop147:
								;

							} finally { DebugExitSubRule(147); }

							DebugLocation(468, 90);
							PushFollow(Follow._list_expr_in_list_expr3510);
							list_expr335=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr335.Tree);

							}
							break;

						default:
							goto loop148;
						}
					}

					loop148:
						;

					} finally { DebugExitSubRule(148); }


					}
					break;

				}
				} finally { DebugExitSubRule(149); }

				DebugLocation(468, 104);
				// SugarCpp.g:468:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=5;
					try { DebugEnterDecision(150, false);
					switch (input.LA(1))
					{
					case 91:
						{
						alt150 = 1;
						}
						break;
					case NEWLINE:
						{
						alt150 = 2;
						}
						break;
					case INDENT:
						{
						alt150 = 3;
						}
						break;
					case DEDENT:
						{
						alt150 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:468:105: ','
						{
						DebugLocation(468, 105);
						char_literal336=(IToken)Match(input,91,Follow._91_in_list_expr3517);  
						stream_91.Add(char_literal336);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:468:111: NEWLINE
						{
						DebugLocation(468, 111);
						NEWLINE337=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3521);  
						stream_NEWLINE.Add(NEWLINE337);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:468:121: INDENT
						{
						DebugLocation(468, 121);
						INDENT338=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3525);  
						stream_INDENT.Add(INDENT338);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:468:130: DEDENT
						{
						DebugLocation(468, 130);
						DEDENT339=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3529);  
						stream_DEDENT.Add(DEDENT339);


						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }

				DebugLocation(468, 139);
				char_literal340=(IToken)Match(input,121,Follow._121_in_list_expr3533);  
				stream_121.Add(char_literal340);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 468:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(468, 146);
					// SugarCpp.g:468:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(468, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(468, 158);
					// SugarCpp.g:468:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(468, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:469:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(469, 4);
				PushFollow(Follow._lambda_expr_in_list_expr3547);
				lambda_expr341=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr341.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 50);
			LeaveRule("list_expr", 50);
			LeaveRule_list_expr();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:472:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 51);
		TraceIn("lambda_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal342 = default(IToken);
		IToken char_literal344 = default(IToken);
		IToken string_literal345 = default(IToken);
		IToken string_literal347 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args343 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr348 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr349 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal342_tree = default(CommonTree);
		CommonTree char_literal344_tree = default(CommonTree);
		CommonTree string_literal345_tree = default(CommonTree);
		CommonTree string_literal347_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(472, 1);
		try
		{
			// SugarCpp.g:473:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt154=2;
			try { DebugEnterDecision(154, false);
			try
			{
				alt154 = dfa154.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:473:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(473, 4);
				char_literal342=(IToken)Match(input,84,Follow._84_in_lambda_expr3558);  
				stream_84.Add(char_literal342);

				DebugLocation(473, 8);
				// SugarCpp.g:473:8: ( func_args )?
				int alt152=2;
				try { DebugEnterSubRule(152);
				try { DebugEnterDecision(152, false);
				int LA152_0 = input.LA(1);

				if ((LA152_0==IDENT||LA152_0==103))
				{
					alt152 = 1;
				}
				} finally { DebugExitDecision(152); }
				switch (alt152)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:8: func_args
					{
					DebugLocation(473, 8);
					PushFollow(Follow._func_args_in_lambda_expr3560);
					func_args343=func_args();
					PopFollow();

					stream_func_args.Add(func_args343.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(152); }

				DebugLocation(473, 19);
				char_literal344=(IToken)Match(input,85,Follow._85_in_lambda_expr3563);  
				stream_85.Add(char_literal344);

				DebugLocation(473, 23);
				// SugarCpp.g:473:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt153=2;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, false);
				int LA153_0 = input.LA(1);

				if ((LA153_0==95))
				{
					alt153 = 1;
				}
				else if ((LA153_0==112))
				{
					alt153 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 153, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:25: '->' expr
					{
					DebugLocation(473, 25);
					string_literal345=(IToken)Match(input,95,Follow._95_in_lambda_expr3567);  
					stream_95.Add(string_literal345);

					DebugLocation(473, 30);
					PushFollow(Follow._expr_in_lambda_expr3569);
					expr346=expr();
					PopFollow();

					stream_expr.Add(expr346.Tree);


					{
					// AST REWRITE
					// elements: expr, func_args, 95
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 473:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(473, 39);
						// SugarCpp.g:473:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(473, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(473, 53);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(473, 58);
						// SugarCpp.g:473:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(473, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(473, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:474:25: '=>' expr
					{
					DebugLocation(474, 25);
					string_literal347=(IToken)Match(input,112,Follow._112_in_lambda_expr3609);  
					stream_112.Add(string_literal347);

					DebugLocation(474, 30);
					PushFollow(Follow._expr_in_lambda_expr3611);
					expr348=expr();
					PopFollow();

					stream_expr.Add(expr348.Tree);


					{
					// AST REWRITE
					// elements: expr, func_args, 112
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 474:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(474, 39);
						// SugarCpp.g:474:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(474, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(474, 53);
						adaptor.AddChild(root_1, stream_112.NextNode());
						DebugLocation(474, 58);
						// SugarCpp.g:474:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(474, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(474, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(153); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:475:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(475, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr3631);
				modify_expr349=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr349.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 51);
			LeaveRule("lambda_expr", 51);
			LeaveRule_lambda_expr();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:478:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 52);
		TraceIn("modify_expr_op", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set350 = default(IToken);

		CommonTree set350_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(478, 91);
		try
		{
			// SugarCpp.g:478:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(478, 15);

			set350=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==83||input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==100||input.LA(1)==108||input.LA(1)==110||input.LA(1)==116||input.LA(1)==123||input.LA(1)==161)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set350));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 52);
			LeaveRule("modify_expr_op", 52);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(478, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:479:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 53);
		TraceIn("modify_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set352 = default(IToken);
		IToken char_literal354 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr355 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set352_tree = default(CommonTree);
		CommonTree char_literal354_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(479, 1);
		try
		{
			// SugarCpp.g:480:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:480:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(480, 4);
			PushFollow(Follow._cond_expr_in_modify_expr3688);
			cond_expr351=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr351.Tree);
			DebugLocation(480, 14);
			// SugarCpp.g:480:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt156=3;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			int LA156_0 = input.LA(1);

			if ((LA156_0==80||LA156_0==83||LA156_0==87||LA156_0==90||LA156_0==94||LA156_0==100||LA156_0==103||LA156_0==108||LA156_0==116||LA156_0==123||LA156_0==161))
			{
				alt156 = 1;
			}
			else if ((LA156_0==110))
			{
				alt156 = 2;
			}
			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:480:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(480, 94);

				set352=(IToken)input.LT(1);
				set352=(IToken)input.LT(1);
				if (input.LA(1)==80||input.LA(1)==83||input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==100||input.LA(1)==103||input.LA(1)==108||input.LA(1)==116||input.LA(1)==123||input.LA(1)==161)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set352), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(480, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3737);
				cond_expr353=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr353.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:481:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(481, 7);
				// SugarCpp.g:481:7: ( '=' ^ cond_expr )+
				int cnt155=0;
				try { DebugEnterSubRule(155);
				while (true)
				{
					int alt155=2;
					try { DebugEnterDecision(155, false);
					int LA155_0 = input.LA(1);

					if ((LA155_0==110))
					{
						alt155 = 1;
					}


					} finally { DebugExitDecision(155); }
					switch (alt155)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:481:8: '=' ^ cond_expr
						{
						DebugLocation(481, 11);
						char_literal354=(IToken)Match(input,110,Follow._110_in_modify_expr3746); 
						char_literal354_tree = (CommonTree)adaptor.Create(char_literal354);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal354_tree, root_0);
						DebugLocation(481, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3749);
						cond_expr355=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr355.Tree);

						}
						break;

					default:
						if (cnt155 >= 1)
							goto loop155;

						EarlyExitException eee155 = new EarlyExitException( 155, input );
						DebugRecognitionException(eee155);
						throw eee155;
					}
					cnt155++;
				}
				loop155:
					;

				} finally { DebugExitSubRule(155); }


				}
				break;

			}
			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 53);
			LeaveRule("modify_expr", 53);
			LeaveRule_modify_expr();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:484:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 54);
		TraceIn("cond_expr_item", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr356 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(484, 24);
		try
		{
			// SugarCpp.g:484:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:484:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(484, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3762);
			or_expr356=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr356.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 54);
			LeaveRule("cond_expr_item", 54);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(484, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:485:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 55);
		TraceIn("cond_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal357 = default(IToken);
		IToken char_literal358 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal357_tree = default(CommonTree);
		CommonTree char_literal358_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(485, 1);
		try
		{
			// SugarCpp.g:486:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:486:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(486, 4);
			// SugarCpp.g:486:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:486:5: a= or_expr
			{
			DebugLocation(486, 6);
			PushFollow(Follow._or_expr_in_cond_expr3774);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 486:15: -> $a
			{
				DebugLocation(486, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(486, 22);
			// SugarCpp.g:486:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt159=2;
			try { DebugEnterSubRule(159);
			try { DebugEnterDecision(159, false);
			int LA159_0 = input.LA(1);

			if ((LA159_0==117))
			{
				alt159 = 1;
			}
			} finally { DebugExitDecision(159); }
			switch (alt159)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:486:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(486, 23);
				char_literal357=(IToken)Match(input,117,Follow._117_in_cond_expr3783);  
				stream_117.Add(char_literal357);

				DebugLocation(486, 27);
				// SugarCpp.g:486:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt158=2;
				try { DebugEnterSubRule(158);
				try { DebugEnterDecision(158, false);
				int LA158_0 = input.LA(1);

				if ((LA158_0==IDENT||LA158_0==NUMBER||LA158_0==STRING||LA158_0==77||LA158_0==82||LA158_0==84||LA158_0==86||(LA158_0>=88 && LA158_0<=89)||(LA158_0>=92 && LA158_0<=93)||LA158_0==119||(LA158_0>=143 && LA158_0<=144)||LA158_0==163))
				{
					alt158 = 1;
				}
				else if ((LA158_0==DEDENT||LA158_0==INDENT||LA158_0==NEWLINE||LA158_0==80||LA158_0==83||LA158_0==85||LA158_0==87||(LA158_0>=90 && LA158_0<=91)||LA158_0==94||LA158_0==100||(LA158_0>=103 && LA158_0<=104)||LA158_0==108||LA158_0==110||LA158_0==116||LA158_0==121||LA158_0==123||LA158_0==127||LA158_0==132||(LA158_0>=136 && LA158_0<=137)||(LA158_0>=149 && LA158_0<=150)||LA158_0==153||LA158_0==155||LA158_0==159||LA158_0==161))
				{
					alt158 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 158, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(158); }
				switch (alt158)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:486:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(486, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3789);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(486, 46);
					// SugarCpp.g:486:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt157=2;
					try { DebugEnterSubRule(157);
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==101))
					{
						alt157 = 1;
					}
					else if ((LA157_0==DEDENT||LA157_0==INDENT||LA157_0==NEWLINE||LA157_0==80||LA157_0==83||LA157_0==85||LA157_0==87||(LA157_0>=90 && LA157_0<=91)||LA157_0==94||LA157_0==100||(LA157_0>=103 && LA157_0<=104)||LA157_0==108||LA157_0==110||LA157_0==116||LA157_0==121||LA157_0==123||LA157_0==127||LA157_0==132||(LA157_0>=136 && LA157_0<=137)||(LA157_0>=149 && LA157_0<=150)||LA157_0==153||LA157_0==155||LA157_0==159||LA157_0==161))
					{
						alt157 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(157); }
					switch (alt157)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:48: ':' b= cond_expr_item
						{
						DebugLocation(486, 48);
						char_literal358=(IToken)Match(input,101,Follow._101_in_cond_expr3793);  
						stream_101.Add(char_literal358);

						DebugLocation(486, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3797);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, b, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 486:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(486, 72);
							// SugarCpp.g:486:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(486, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(486, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(486, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(486, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:487:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 487:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(487, 20);
							// SugarCpp.g:487:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(487, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(487, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(487, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(157); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:489:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 489:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(489, 14);
						// SugarCpp.g:489:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(489, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(489, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(158); }


				}
				break;

			}
			} finally { DebugExitSubRule(159); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 55);
			LeaveRule("cond_expr", 55);
			LeaveRule_cond_expr();
		}
		DebugLocation(491, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:493:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 56);
		TraceIn("or_op", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set359 = default(IToken);

		CommonTree set359_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(493, 19);
		try
		{
			// SugarCpp.g:493:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(493, 6);

			set359=(IToken)input.LT(1);
			if (input.LA(1)==145||input.LA(1)==162)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set359));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 56);
			LeaveRule("or_op", 56);
			LeaveRule_or_op();
		}
		DebugLocation(493, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:494:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 57);
		TraceIn("or_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(494, 1);
		try
		{
			// SugarCpp.g:495:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:495:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(495, 4);
			// SugarCpp.g:495:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:495:5: a= and_expr
			{
			DebugLocation(495, 6);
			PushFollow(Follow._and_expr_in_or_expr3911);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 495:16: -> $a
			{
				DebugLocation(495, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(495, 23);
			// SugarCpp.g:495:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(160);
			while (true)
			{
				int alt160=2;
				try { DebugEnterDecision(160, false);
				int LA160_0 = input.LA(1);

				if ((LA160_0==145||LA160_0==162))
				{
					alt160 = 1;
				}


				} finally { DebugExitDecision(160); }
				switch ( alt160 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:24: op= or_op b= and_expr
					{
					DebugLocation(495, 26);
					PushFollow(Follow._or_op_in_or_expr3922);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(495, 34);
					PushFollow(Follow._and_expr_in_or_expr3926);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, or_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 495:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(495, 47);
						// SugarCpp.g:495:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(495, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(495, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(495, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(495, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop160;
				}
			}

			loop160:
				;

			} finally { DebugExitSubRule(160); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 57);
			LeaveRule("or_expr", 57);
			LeaveRule_or_expr();
		}
		DebugLocation(496, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:498:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 58);
		TraceIn("and_op", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set360 = default(IToken);

		CommonTree set360_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(498, 21);
		try
		{
			// SugarCpp.g:498:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(498, 7);

			set360=(IToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==125)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set360));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 58);
			LeaveRule("and_op", 58);
			LeaveRule_and_op();
		}
		DebugLocation(498, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:499:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 59);
		TraceIn("and_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(499, 1);
		try
		{
			// SugarCpp.g:500:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:500:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(500, 4);
			// SugarCpp.g:500:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:500:5: a= bit_or
			{
			DebugLocation(500, 6);
			PushFollow(Follow._bit_or_in_and_expr3968);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 500:14: -> $a
			{
				DebugLocation(500, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(500, 21);
			// SugarCpp.g:500:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(161);
			while (true)
			{
				int alt161=2;
				try { DebugEnterDecision(161, false);
				int LA161_0 = input.LA(1);

				if ((LA161_0==81||LA161_0==125))
				{
					alt161 = 1;
				}


				} finally { DebugExitDecision(161); }
				switch ( alt161 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:500:22: op= and_op b= bit_or
					{
					DebugLocation(500, 24);
					PushFollow(Follow._and_op_in_and_expr3979);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(500, 33);
					PushFollow(Follow._bit_or_in_and_expr3983);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, and_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 500:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(500, 44);
						// SugarCpp.g:500:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(500, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(500, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(500, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(500, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop161;
				}
			}

			loop161:
				;

			} finally { DebugExitSubRule(161); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 59);
			LeaveRule("and_expr", 59);
			LeaveRule_and_expr();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:503:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 60);
		TraceIn("bit_or", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal361 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal361_tree = default(CommonTree);
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(503, 1);
		try
		{
			// SugarCpp.g:504:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:504:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(504, 4);
			// SugarCpp.g:504:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:504:5: a= bit_xor
			{
			DebugLocation(504, 6);
			PushFollow(Follow._bit_xor_in_bit_or4014);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 504:15: -> $a
			{
				DebugLocation(504, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(504, 22);
			// SugarCpp.g:504:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(162);
			while (true)
			{
				int alt162=2;
				try { DebugEnterDecision(162, false);
				int LA162_0 = input.LA(1);

				if ((LA162_0==160))
				{
					alt162 = 1;
				}


				} finally { DebugExitDecision(162); }
				switch ( alt162 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:504:23: '|' b= bit_xor
					{
					DebugLocation(504, 23);
					char_literal361=(IToken)Match(input,160,Follow._160_in_bit_or4023);  
					stream_160.Add(char_literal361);

					DebugLocation(504, 28);
					PushFollow(Follow._bit_xor_in_bit_or4027);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 160
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 504:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(504, 40);
						// SugarCpp.g:504:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(504, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(504, 51);
						adaptor.AddChild(root_1, stream_160.NextNode());
						DebugLocation(504, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(504, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop162;
				}
			}

			loop162:
				;

			} finally { DebugExitSubRule(162); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 60);
			LeaveRule("bit_or", 60);
			LeaveRule_bit_or();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:507:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 61);
		TraceIn("bit_xor", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal362 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal362_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(507, 1);
		try
		{
			// SugarCpp.g:508:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:508:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(508, 4);
			// SugarCpp.g:508:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:508:5: a= bit_and
			{
			DebugLocation(508, 6);
			PushFollow(Follow._bit_and_in_bit_xor4057);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 508:15: -> $a
			{
				DebugLocation(508, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(508, 22);
			// SugarCpp.g:508:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(163);
			while (true)
			{
				int alt163=2;
				try { DebugEnterDecision(163, false);
				int LA163_0 = input.LA(1);

				if ((LA163_0==122))
				{
					alt163 = 1;
				}


				} finally { DebugExitDecision(163); }
				switch ( alt163 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:508:23: '^' b= bit_and
					{
					DebugLocation(508, 23);
					char_literal362=(IToken)Match(input,122,Follow._122_in_bit_xor4066);  
					stream_122.Add(char_literal362);

					DebugLocation(508, 28);
					PushFollow(Follow._bit_and_in_bit_xor4070);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 122, bit_xor, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 508:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(508, 40);
						// SugarCpp.g:508:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(508, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(508, 51);
						adaptor.AddChild(root_1, stream_122.NextNode());
						DebugLocation(508, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(508, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop163;
				}
			}

			loop163:
				;

			} finally { DebugExitSubRule(163); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 61);
			LeaveRule("bit_xor", 61);
			LeaveRule_bit_xor();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:511:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 62);
		TraceIn("bit_and", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal363 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal363_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(512, 4);
			// SugarCpp.g:512:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:512:5: a= cmp_expr
			{
			DebugLocation(512, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4100);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 512:16: -> $a
			{
				DebugLocation(512, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(512, 23);
			// SugarCpp.g:512:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(164);
			while (true)
			{
				int alt164=2;
				try { DebugEnterDecision(164, false);
				int LA164_0 = input.LA(1);

				if ((LA164_0==82))
				{
					alt164 = 1;
				}


				} finally { DebugExitDecision(164); }
				switch ( alt164 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:24: '&' b= cmp_expr
					{
					DebugLocation(512, 24);
					char_literal363=(IToken)Match(input,82,Follow._82_in_bit_and4109);  
					stream_82.Add(char_literal363);

					DebugLocation(512, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4113);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 82
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 512:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(512, 42);
						// SugarCpp.g:512:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(512, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(512, 53);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(512, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(512, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop164;
				}
			}

			loop164:
				;

			} finally { DebugExitSubRule(164); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 62);
			LeaveRule("bit_and", 62);
			LeaveRule_bit_and();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:515:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 63);
		TraceIn("chain_op", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set364 = default(IToken);

		CommonTree set364_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(515, 64);
		try
		{
			// SugarCpp.g:515:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(515, 9);

			set364=(IToken)input.LT(1);
			if (input.LA(1)==78||input.LA(1)==105||input.LA(1)==109||input.LA(1)==111||(input.LA(1)>=113 && input.LA(1)<=114)||(input.LA(1)>=139 && input.LA(1)<=140))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set364));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 63);
			LeaveRule("chain_op", 63);
			LeaveRule_chain_op();
		}
		DebugLocation(515, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:516:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 64);
		TraceIn("no_less_op", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set365 = default(IToken);

		CommonTree set365_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(516, 60);
		try
		{
			// SugarCpp.g:516:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(516, 11);

			set365=(IToken)input.LT(1);
			if (input.LA(1)==78||input.LA(1)==109||input.LA(1)==111||(input.LA(1)>=113 && input.LA(1)<=114)||(input.LA(1)>=139 && input.LA(1)<=140))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set365));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 64);
			LeaveRule("no_less_op", 64);
			LeaveRule_no_less_op();
		}
		DebugLocation(516, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:517:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 65);
		TraceIn("chain_list", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(517, 35);
		try
		{
			// SugarCpp.g:517:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:517:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(517, 13);
			// SugarCpp.g:517:13: ( chain_op infix_expr )+
			int cnt165=0;
			try { DebugEnterSubRule(165);
			while (true)
			{
				int alt165=2;
				try { DebugEnterDecision(165, false);
				int LA165_0 = input.LA(1);

				if ((LA165_0==78||LA165_0==105||LA165_0==109||LA165_0==111||(LA165_0>=113 && LA165_0<=114)||(LA165_0>=139 && LA165_0<=140)))
				{
					alt165 = 1;
				}


				} finally { DebugExitDecision(165); }
				switch (alt165)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:517:14: chain_op infix_expr
					{
					DebugLocation(517, 14);
					PushFollow(Follow._chain_op_in_chain_list4205);
					chain_op366=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op366.Tree);
					DebugLocation(517, 23);
					PushFollow(Follow._infix_expr_in_chain_list4207);
					infix_expr367=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr367.Tree);

					}
					break;

				default:
					if (cnt165 >= 1)
						goto loop165;

					EarlyExitException eee165 = new EarlyExitException( 165, input );
					DebugRecognitionException(eee165);
					throw eee165;
				}
				cnt165++;
			}
			loop165:
				;

			} finally { DebugExitSubRule(165); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 65);
			LeaveRule("chain_list", 65);
			LeaveRule_chain_list();
		}
		DebugLocation(517, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:518:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 66);
		TraceIn("cmp_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal368 = default(IToken);
		IToken char_literal370 = default(IToken);
		IToken char_literal371 = default(IToken);
		IToken char_literal373 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident369 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list374 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list375 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal368_tree = default(CommonTree);
		CommonTree char_literal370_tree = default(CommonTree);
		CommonTree char_literal371_tree = default(CommonTree);
		CommonTree char_literal373_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(518, 1);
		try
		{
			// SugarCpp.g:519:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:519:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(519, 4);
			// SugarCpp.g:519:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:519:5: a= infix_expr
			{
			DebugLocation(519, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr4221);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 519:18: -> $a
			{
				DebugLocation(519, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(519, 25);
			// SugarCpp.g:519:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt170=3;
			try { DebugEnterSubRule(170);
			try { DebugEnterDecision(170, false);
			int LA170_0 = input.LA(1);

			if ((LA170_0==105))
			{
				alt170 = 1;
			}
			else if ((LA170_0==78||LA170_0==109||LA170_0==111||(LA170_0>=113 && LA170_0<=114)||(LA170_0>=139 && LA170_0<=140)))
			{
				alt170 = 2;
			}
			} finally { DebugExitDecision(170); }
			switch (alt170)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:519:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(519, 27);
				char_literal368=(IToken)Match(input,105,Follow._105_in_cmp_expr4231);  
				stream_105.Add(char_literal368);

				DebugLocation(519, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr4235);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(519, 44);
				// SugarCpp.g:519:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt168=3;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt168 = 1;
					}
					break;
				case 113:
					{
					int LA168_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt168 = 1;
					}
					else if ((true))
					{
						alt168 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 168, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 78:
				case 105:
				case 109:
				case 111:
				case 114:
				case 139:
				case 140:
					{
					alt168 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 80:
				case 81:
				case 82:
				case 83:
				case 85:
				case 87:
				case 90:
				case 91:
				case 94:
				case 100:
				case 101:
				case 103:
				case 104:
				case 108:
				case 110:
				case 116:
				case 117:
				case 121:
				case 122:
				case 123:
				case 125:
				case 127:
				case 132:
				case 136:
				case 137:
				case 145:
				case 149:
				case 150:
				case 153:
				case 155:
				case 159:
				case 160:
				case 161:
				case 162:
					{
					alt168 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:519:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(519, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(519, 76);
					// SugarCpp.g:519:76: ( ident )*
					try { DebugEnterSubRule(166);
					while (true)
					{
						int alt166=2;
						try { DebugEnterDecision(166, false);
						int LA166_0 = input.LA(1);

						if ((LA166_0==IDENT))
						{
							alt166 = 1;
						}


						} finally { DebugExitDecision(166); }
						switch ( alt166 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:519:76: ident
							{
							DebugLocation(519, 76);
							PushFollow(Follow._ident_in_cmp_expr4241);
							ident369=ident();
							PopFollow();

							stream_ident.Add(ident369.Tree);

							}
							break;

						default:
							goto loop166;
						}
					}

					loop166:
						;

					} finally { DebugExitSubRule(166); }

					DebugLocation(519, 83);
					char_literal370=(IToken)Match(input,113,Follow._113_in_cmp_expr4244);  
					stream_113.Add(char_literal370);

					DebugLocation(519, 87);
					char_literal371=(IToken)Match(input,84,Follow._84_in_cmp_expr4246);  
					stream_84.Add(char_literal371);

					DebugLocation(519, 91);
					// SugarCpp.g:519:91: ( expr_list )?
					int alt167=2;
					try { DebugEnterSubRule(167);
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==IDENT||LA167_0==NUMBER||LA167_0==STRING||LA167_0==77||LA167_0==82||LA167_0==84||LA167_0==86||(LA167_0>=88 && LA167_0<=89)||(LA167_0>=92 && LA167_0<=93)||(LA167_0>=119 && LA167_0<=120)||(LA167_0>=143 && LA167_0<=144)||LA167_0==163))
					{
						alt167 = 1;
					}
					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:519:91: expr_list
						{
						DebugLocation(519, 91);
						PushFollow(Follow._expr_list_in_cmp_expr4248);
						expr_list372=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list372.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(167); }

					DebugLocation(519, 102);
					char_literal373=(IToken)Match(input,85,Follow._85_in_cmp_expr4251);  
					stream_85.Add(char_literal373);



					{
					// AST REWRITE
					// elements: ident, expr_list, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 519:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(519, 109);
						// SugarCpp.g:519:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(519, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(519, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(519, 131);
						// SugarCpp.g:519:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(519, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(519, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(519, 155);
						// SugarCpp.g:519:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(519, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(519, 163);
						// SugarCpp.g:519:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(519, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:520:46: chain_list
					{
					DebugLocation(520, 46);
					PushFollow(Follow._chain_list_in_cmp_expr4320);
					chain_list374=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list374.Tree);


					{
					// AST REWRITE
					// elements: chain_list, 105, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 520:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(520, 60);
						// SugarCpp.g:520:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(520, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(520, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(520, 84);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(520, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(520, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:521:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, 105, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 521:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(521, 19);
						// SugarCpp.g:521:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(521, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(521, 30);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(521, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(521, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(168); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:522:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(522, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr4397);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(522, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr4401);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(522, 54);
				// SugarCpp.g:522:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt169=2;
				try { DebugEnterSubRule(169);
				try { DebugEnterDecision(169, false);
				int LA169_0 = input.LA(1);

				if ((LA169_0==78||LA169_0==105||LA169_0==109||LA169_0==111||(LA169_0>=113 && LA169_0<=114)||(LA169_0>=139 && LA169_0<=140)))
				{
					alt169 = 1;
				}
				else if ((LA169_0==DEDENT||LA169_0==INDENT||LA169_0==NEWLINE||(LA169_0>=80 && LA169_0<=83)||LA169_0==85||LA169_0==87||(LA169_0>=90 && LA169_0<=91)||LA169_0==94||(LA169_0>=100 && LA169_0<=101)||(LA169_0>=103 && LA169_0<=104)||LA169_0==108||LA169_0==110||(LA169_0>=116 && LA169_0<=117)||(LA169_0>=121 && LA169_0<=123)||LA169_0==125||LA169_0==127||LA169_0==132||(LA169_0>=136 && LA169_0<=137)||LA169_0==145||(LA169_0>=149 && LA169_0<=150)||LA169_0==153||LA169_0==155||(LA169_0>=159 && LA169_0<=162)))
				{
					alt169 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 169, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:522:56: chain_list
					{
					DebugLocation(522, 56);
					PushFollow(Follow._chain_list_in_cmp_expr4405);
					chain_list375=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list375.Tree);


					{
					// AST REWRITE
					// elements: chain_list, op, cmp_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 522:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(522, 70);
						// SugarCpp.g:522:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(522, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(522, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(522, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(522, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(522, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:523:17: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 523:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(523, 20);
						// SugarCpp.g:523:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(523, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(523, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(523, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(523, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(169); }


				}
				break;

			}
			} finally { DebugExitSubRule(170); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 66);
			LeaveRule("cmp_expr", 66);
			LeaveRule_cmp_expr();
		}
		DebugLocation(526, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:528:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 67);
		TraceIn("infix_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func376 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(528, 1);
		try
		{
			// SugarCpp.g:529:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:529:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(529, 4);
			// SugarCpp.g:529:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:529:5: a= shift_expr
			{
			DebugLocation(529, 6);
			PushFollow(Follow._shift_expr_in_infix_expr4496);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 529:18: -> $a
			{
				DebugLocation(529, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(529, 25);
			// SugarCpp.g:529:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(171);
			while (true)
			{
				int alt171=2;
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==124))
				{
					alt171 = 1;
				}


				} finally { DebugExitDecision(171); }
				switch ( alt171 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:529:27: infix_func b= shift_expr
					{
					DebugLocation(529, 27);
					PushFollow(Follow._infix_func_in_infix_expr4506);
					infix_func376=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func376.Tree);
					DebugLocation(529, 39);
					PushFollow(Follow._shift_expr_in_infix_expr4510);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_func, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 529:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(529, 55);
						// SugarCpp.g:529:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(529, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(529, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(529, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(529, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop171;
				}
			}

			loop171:
				;

			} finally { DebugExitSubRule(171); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 67);
			LeaveRule("infix_expr", 67);
			LeaveRule_infix_expr();
		}
		DebugLocation(530, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:532:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 68);
		TraceIn("shift_expr_op", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set377 = default(IToken);

		CommonTree set377_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(532, 27);
		try
		{
			// SugarCpp.g:532:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(532, 14);

			set377=(IToken)input.LT(1);
			if (input.LA(1)==107||input.LA(1)==115)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set377));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 68);
			LeaveRule("shift_expr_op", 68);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(532, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:533:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 69);
		TraceIn("shift_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op378 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(533, 1);
		try
		{
			// SugarCpp.g:534:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:534:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(534, 4);
			// SugarCpp.g:534:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:534:5: a= add_expr
			{
			DebugLocation(534, 6);
			PushFollow(Follow._add_expr_in_shift_expr4553);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 534:16: -> $a
			{
				DebugLocation(534, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(534, 23);
			// SugarCpp.g:534:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, false);
				int LA172_0 = input.LA(1);

				if ((LA172_0==107||LA172_0==115))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch ( alt172 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:24: shift_expr_op b= add_expr
					{
					DebugLocation(534, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr4562);
					shift_expr_op378=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op378.Tree);
					DebugLocation(534, 39);
					PushFollow(Follow._add_expr_in_shift_expr4566);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 534:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(534, 52);
						// SugarCpp.g:534:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(534, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(534, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(534, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(534, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop172;
				}
			}

			loop172:
				;

			} finally { DebugExitSubRule(172); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 69);
			LeaveRule("shift_expr", 69);
			LeaveRule_shift_expr();
		}
		DebugLocation(535, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:537:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 70);
		TraceIn("add_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal379 = default(IToken);
		IToken char_literal380 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal379_tree = default(CommonTree);
		CommonTree char_literal380_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(537, 1);
		try
		{
			// SugarCpp.g:538:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:538:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(538, 4);
			// SugarCpp.g:538:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:538:5: a= mul_expr
			{
			DebugLocation(538, 6);
			PushFollow(Follow._mul_expr_in_add_expr4596);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 538:16: -> $a
			{
				DebugLocation(538, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(538, 23);
			// SugarCpp.g:538:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=3;
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==88))
				{
					alt173 = 1;
				}
				else if ((LA173_0==92))
				{
					alt173 = 2;
				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:538:25: '+' b= mul_expr
					{
					DebugLocation(538, 25);
					char_literal379=(IToken)Match(input,88,Follow._88_in_add_expr4606);  
					stream_88.Add(char_literal379);

					DebugLocation(538, 30);
					PushFollow(Follow._mul_expr_in_add_expr4610);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 88, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 538:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(538, 43);
						// SugarCpp.g:538:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(538, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(538, 54);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(538, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(538, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:539:10: '-' b= mul_expr
					{
					DebugLocation(539, 10);
					char_literal380=(IToken)Match(input,92,Follow._92_in_add_expr4635);  
					stream_92.Add(char_literal380);

					DebugLocation(539, 15);
					PushFollow(Follow._mul_expr_in_add_expr4639);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 92, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 539:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(539, 28);
						// SugarCpp.g:539:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(539, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(539, 39);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(539, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(539, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 70);
			LeaveRule("add_expr", 70);
			LeaveRule_add_expr();
		}
		DebugLocation(541, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:543:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 71);
		TraceIn("mul_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal381 = default(IToken);
		IToken char_literal382 = default(IToken);
		IToken char_literal383 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal381_tree = default(CommonTree);
		CommonTree char_literal382_tree = default(CommonTree);
		CommonTree char_literal383_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(543, 1);
		try
		{
			// SugarCpp.g:544:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:544:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(544, 4);
			// SugarCpp.g:544:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:544:5: a= selector_expr
			{
			DebugLocation(544, 6);
			PushFollow(Follow._selector_expr_in_mul_expr4677);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 544:21: -> $a
			{
				DebugLocation(544, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(544, 28);
			// SugarCpp.g:544:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(174);
			while (true)
			{
				int alt174=4;
				try { DebugEnterDecision(174, false);
				switch (input.LA(1))
				{
				case 86:
					{
					alt174 = 1;
					}
					break;
				case 99:
					{
					alt174 = 2;
					}
					break;
				case 79:
					{
					alt174 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(174); }
				switch ( alt174 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:544:30: '*' b= selector_expr
					{
					DebugLocation(544, 30);
					char_literal381=(IToken)Match(input,86,Follow._86_in_mul_expr4687);  
					stream_86.Add(char_literal381);

					DebugLocation(544, 35);
					PushFollow(Follow._selector_expr_in_mul_expr4691);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 86
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 544:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(544, 53);
						// SugarCpp.g:544:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(544, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(544, 64);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(544, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(544, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:545:15: '/' b= selector_expr
					{
					DebugLocation(545, 15);
					char_literal382=(IToken)Match(input,99,Follow._99_in_mul_expr4721);  
					stream_99.Add(char_literal382);

					DebugLocation(545, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4725);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 99, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 545:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(545, 38);
						// SugarCpp.g:545:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(545, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(545, 49);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(545, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(545, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:546:15: '%' b= selector_expr
					{
					DebugLocation(546, 15);
					char_literal383=(IToken)Match(input,79,Follow._79_in_mul_expr4755);  
					stream_79.Add(char_literal383);

					DebugLocation(546, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4759);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 79, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 546:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(546, 38);
						// SugarCpp.g:546:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(546, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(546, 49);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(546, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(546, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop174;
				}
			}

			loop174:
				;

			} finally { DebugExitSubRule(174); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 71);
			LeaveRule("mul_expr", 71);
			LeaveRule_mul_expr();
		}
		DebugLocation(548, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:550:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 72);
		TraceIn("selector_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal384 = default(IToken);
		IToken string_literal385 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal384_tree = default(CommonTree);
		CommonTree string_literal385_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(550, 1);
		try
		{
			// SugarCpp.g:551:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:551:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(551, 4);
			// SugarCpp.g:551:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:551:5: a= cast_expr
			{
			DebugLocation(551, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4802);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 551:17: -> $a
			{
				DebugLocation(551, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(551, 24);
			// SugarCpp.g:551:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=3;
				try { DebugEnterDecision(175, false);
				int LA175_0 = input.LA(1);

				if ((LA175_0==96))
				{
					alt175 = 1;
				}
				else if ((LA175_0==98))
				{
					alt175 = 2;
				}


				} finally { DebugExitDecision(175); }
				switch ( alt175 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:551:26: '->*' b= ident
					{
					DebugLocation(551, 26);
					string_literal384=(IToken)Match(input,96,Follow._96_in_selector_expr4812);  
					stream_96.Add(string_literal384);

					DebugLocation(551, 33);
					PushFollow(Follow._ident_in_selector_expr4816);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 96, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 551:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(551, 43);
						// SugarCpp.g:551:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(551, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(551, 57);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(551, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(551, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:552:11: '.*' b= ident
					{
					DebugLocation(552, 11);
					string_literal385=(IToken)Match(input,98,Follow._98_in_selector_expr4842);  
					stream_98.Add(string_literal385);

					DebugLocation(552, 18);
					PushFollow(Follow._ident_in_selector_expr4847);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 98, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 552:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(552, 28);
						// SugarCpp.g:552:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(552, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(552, 42);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(552, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(552, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop175;
				}
			}

			loop175:
				;

			} finally { DebugExitSubRule(175); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 72);
			LeaveRule("selector_expr", 72);
			LeaveRule_selector_expr();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:556:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 73);
		TraceIn("cast_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal386 = default(IToken);
		IToken char_literal387 = default(IToken);
		IToken char_literal389 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name388 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal386_tree = default(CommonTree);
		CommonTree char_literal387_tree = default(CommonTree);
		CommonTree char_literal389_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(556, 1);
		try
		{
			// SugarCpp.g:557:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:557:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(557, 4);
			// SugarCpp.g:557:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:557:5: a= prefix_expr
			{
			DebugLocation(557, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4887);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 557:19: -> $a
			{
				DebugLocation(557, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(557, 26);
			// SugarCpp.g:557:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_0 = input.LA(1);

			if ((LA176_0==126))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:557:27: 'as' '(' type_name ')'
				{
				DebugLocation(557, 27);
				string_literal386=(IToken)Match(input,126,Follow._126_in_cast_expr4896);  
				stream_126.Add(string_literal386);

				DebugLocation(557, 32);
				char_literal387=(IToken)Match(input,84,Follow._84_in_cast_expr4898);  
				stream_84.Add(char_literal387);

				DebugLocation(557, 36);
				PushFollow(Follow._type_name_in_cast_expr4900);
				type_name388=type_name();
				PopFollow();

				stream_type_name.Add(type_name388.Tree);
				DebugLocation(557, 46);
				char_literal389=(IToken)Match(input,85,Follow._85_in_cast_expr4902);  
				stream_85.Add(char_literal389);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 557:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(557, 53);
					// SugarCpp.g:557:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(557, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(557, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(557, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(176); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 73);
			LeaveRule("cast_expr", 73);
			LeaveRule_cast_expr();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:560:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 74);
		TraceIn("prefix_expr_op", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set390 = default(IToken);

		CommonTree set390_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(560, 71);
		try
		{
			// SugarCpp.g:560:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(560, 15);

			set390=(IToken)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==82||input.LA(1)==86||(input.LA(1)>=88 && input.LA(1)<=89)||(input.LA(1)>=92 && input.LA(1)<=93)||input.LA(1)==144||input.LA(1)==163)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set390));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 74);
			LeaveRule("prefix_expr_op", 74);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(560, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:561:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 75);
		TraceIn("prefix_expr", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal393 = default(IToken);
		IToken char_literal395 = default(IToken);
		IToken char_literal397 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op391 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr392 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name394 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list396 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr398 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal393_tree = default(CommonTree);
		CommonTree char_literal395_tree = default(CommonTree);
		CommonTree char_literal397_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(561, 1);
		try
		{
			// SugarCpp.g:562:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr )
			int alt178=3;
			try { DebugEnterDecision(178, false);
			switch (input.LA(1))
			{
			case 77:
			case 82:
			case 86:
			case 88:
			case 89:
			case 92:
			case 93:
			case 144:
			case 163:
				{
				alt178 = 1;
				}
				break;
			case 143:
				{
				alt178 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 84:
			case 119:
				{
				alt178 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 178, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(178); }
			switch (alt178)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:562:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(562, 4);
				// SugarCpp.g:562:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:562:5: prefix_expr_op prefix_expr
				{
				DebugLocation(562, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4964);
				prefix_expr_op391=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op391.Tree);
				DebugLocation(562, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4966);
				prefix_expr392=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr392.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 562:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(562, 36);
					// SugarCpp.g:562:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(562, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(562, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(562, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:563:4: 'new' type_name '(' ( expr_list )? ')'
				{
				DebugLocation(563, 4);
				string_literal393=(IToken)Match(input,143,Follow._143_in_prefix_expr4982);  
				stream_143.Add(string_literal393);

				DebugLocation(563, 10);
				PushFollow(Follow._type_name_in_prefix_expr4984);
				type_name394=type_name();
				PopFollow();

				stream_type_name.Add(type_name394.Tree);
				DebugLocation(563, 20);
				char_literal395=(IToken)Match(input,84,Follow._84_in_prefix_expr4986);  
				stream_84.Add(char_literal395);

				DebugLocation(563, 24);
				// SugarCpp.g:563:24: ( expr_list )?
				int alt177=2;
				try { DebugEnterSubRule(177);
				try { DebugEnterDecision(177, false);
				int LA177_0 = input.LA(1);

				if ((LA177_0==IDENT||LA177_0==NUMBER||LA177_0==STRING||LA177_0==77||LA177_0==82||LA177_0==84||LA177_0==86||(LA177_0>=88 && LA177_0<=89)||(LA177_0>=92 && LA177_0<=93)||(LA177_0>=119 && LA177_0<=120)||(LA177_0>=143 && LA177_0<=144)||LA177_0==163))
				{
					alt177 = 1;
				}
				} finally { DebugExitDecision(177); }
				switch (alt177)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:563:24: expr_list
					{
					DebugLocation(563, 24);
					PushFollow(Follow._expr_list_in_prefix_expr4988);
					expr_list396=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list396.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(177); }

				DebugLocation(563, 35);
				char_literal397=(IToken)Match(input,85,Follow._85_in_prefix_expr4991);  
				stream_85.Add(char_literal397);



				{
				// AST REWRITE
				// elements: type_name, expr_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 563:39: -> ^( Expr_New_Type type_name ( expr_list )? )
				{
					DebugLocation(563, 42);
					// SugarCpp.g:563:42: ^( Expr_New_Type type_name ( expr_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(563, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

					DebugLocation(563, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(563, 68);
					// SugarCpp.g:563:68: ( expr_list )?
					if (stream_expr_list.HasNext)
					{
						DebugLocation(563, 68);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

					}
					stream_expr_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:564:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(564, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5007);
				suffix_expr398=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr398.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 75);
			LeaveRule("prefix_expr", 75);
			LeaveRule_prefix_expr();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:567:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 76);
		TraceIn("expr_list", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal400 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr401 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal400_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(568, 4);
			PushFollow(Follow._expr_in_expr_list5019);
			expr399=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr399.Tree);
			DebugLocation(568, 9);
			// SugarCpp.g:568:9: ( ',' ! expr )*
			try { DebugEnterSubRule(179);
			while (true)
			{
				int alt179=2;
				try { DebugEnterDecision(179, false);
				int LA179_0 = input.LA(1);

				if ((LA179_0==91))
				{
					alt179 = 1;
				}


				} finally { DebugExitDecision(179); }
				switch ( alt179 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:568:10: ',' ! expr
					{
					DebugLocation(568, 13);
					char_literal400=(IToken)Match(input,91,Follow._91_in_expr_list5022); 
					DebugLocation(568, 15);
					PushFollow(Follow._expr_in_expr_list5025);
					expr401=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr401.Tree);

					}
					break;

				default:
					goto loop179;
				}
			}

			loop179:
				;

			} finally { DebugExitSubRule(179); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 76);
			LeaveRule("expr_list", 76);
			LeaveRule_expr_list();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:571:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 77);
		TraceIn("suffix_expr", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal402 = default(IToken);
		IToken string_literal403 = default(IToken);
		IToken char_literal404 = default(IToken);
		IToken string_literal406 = default(IToken);
		IToken char_literal408 = default(IToken);
		IToken char_literal410 = default(IToken);
		IToken char_literal411 = default(IToken);
		IToken char_literal412 = default(IToken);
		IToken char_literal414 = default(IToken);
		IToken char_literal415 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident405 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident407 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list409 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list413 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal402_tree = default(CommonTree);
		CommonTree string_literal403_tree = default(CommonTree);
		CommonTree char_literal404_tree = default(CommonTree);
		CommonTree string_literal406_tree = default(CommonTree);
		CommonTree char_literal408_tree = default(CommonTree);
		CommonTree char_literal410_tree = default(CommonTree);
		CommonTree char_literal411_tree = default(CommonTree);
		CommonTree char_literal412_tree = default(CommonTree);
		CommonTree char_literal414_tree = default(CommonTree);
		CommonTree char_literal415_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:572:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			{
			DebugLocation(572, 4);
			// SugarCpp.g:572:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:572:5: a= atom_expr
			{
			DebugLocation(572, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr5041);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 572:17: -> $a
			{
				DebugLocation(572, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(572, 24);
			// SugarCpp.g:572:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=7;
				try { DebugEnterDecision(182, false);
				switch (input.LA(1))
				{
				case 89:
					{
					alt182 = 1;
					}
					break;
				case 93:
					{
					alt182 = 2;
					}
					break;
				case 97:
					{
					alt182 = 3;
					}
					break;
				case 95:
					{
					alt182 = 4;
					}
					break;
				case 84:
					{
					alt182 = 5;
					}
					break;
				case 120:
					{
					alt182 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:572:26: '++'
					{
					DebugLocation(572, 26);
					string_literal402=(IToken)Match(input,89,Follow._89_in_suffix_expr5051);  
					stream_89.Add(string_literal402);



					{
					// AST REWRITE
					// elements: 89, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 572:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(572, 34);
						// SugarCpp.g:572:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(572, 48);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(572, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:573:14: '--'
					{
					DebugLocation(573, 14);
					string_literal403=(IToken)Match(input,93,Follow._93_in_suffix_expr5077);  
					stream_93.Add(string_literal403);



					{
					// AST REWRITE
					// elements: 93, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 573:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(573, 22);
						// SugarCpp.g:573:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(573, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(573, 36);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(573, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:574:11: '.' ident
					{
					DebugLocation(574, 11);
					char_literal404=(IToken)Match(input,97,Follow._97_in_suffix_expr5100);  
					stream_97.Add(char_literal404);

					DebugLocation(574, 15);
					PushFollow(Follow._ident_in_suffix_expr5102);
					ident405=ident();
					PopFollow();

					stream_ident.Add(ident405.Tree);


					{
					// AST REWRITE
					// elements: ident, 97, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 574:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(574, 24);
						// SugarCpp.g:574:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(574, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(574, 38);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(574, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(574, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:575:11: '->' ident
					{
					DebugLocation(575, 11);
					string_literal406=(IToken)Match(input,95,Follow._95_in_suffix_expr5127);  
					stream_95.Add(string_literal406);

					DebugLocation(575, 16);
					PushFollow(Follow._ident_in_suffix_expr5129);
					ident407=ident();
					PopFollow();

					stream_ident.Add(ident407.Tree);


					{
					// AST REWRITE
					// elements: 95, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 575:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(575, 25);
						// SugarCpp.g:575:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(575, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(575, 39);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(575, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(575, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:576:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(576, 11);
					char_literal408=(IToken)Match(input,84,Follow._84_in_suffix_expr5154);  
					stream_84.Add(char_literal408);

					DebugLocation(576, 15);
					// SugarCpp.g:576:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt180=2;
					try { DebugEnterSubRule(180);
					try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0==IDENT||LA180_0==NUMBER||LA180_0==STRING||LA180_0==77||LA180_0==82||LA180_0==84||LA180_0==86||(LA180_0>=88 && LA180_0<=89)||(LA180_0>=92 && LA180_0<=93)||(LA180_0>=119 && LA180_0<=120)||(LA180_0>=143 && LA180_0<=144)||LA180_0==163))
					{
						alt180 = 1;
					}
					else if ((LA180_0==85))
					{
						alt180 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 180, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(180); }
					switch (alt180)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:576:17: expr_list ')'
						{
						DebugLocation(576, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5158);
						expr_list409=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list409.Tree);
						DebugLocation(576, 27);
						char_literal410=(IToken)Match(input,85,Follow._85_in_suffix_expr5160);  
						stream_85.Add(char_literal410);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 576:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(576, 34);
							// SugarCpp.g:576:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(576, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(576, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(576, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:577:17: ')'
						{
						DebugLocation(577, 17);
						char_literal411=(IToken)Match(input,85,Follow._85_in_suffix_expr5189);  
						stream_85.Add(char_literal411);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 577:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(577, 24);
							// SugarCpp.g:577:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(577, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(577, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(180); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:579:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(579, 11);
					char_literal412=(IToken)Match(input,120,Follow._120_in_suffix_expr5220);  
					stream_120.Add(char_literal412);

					DebugLocation(579, 15);
					// SugarCpp.g:579:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt181=2;
					try { DebugEnterSubRule(181);
					try { DebugEnterDecision(181, false);
					int LA181_0 = input.LA(1);

					if ((LA181_0==IDENT||LA181_0==NUMBER||LA181_0==STRING||LA181_0==77||LA181_0==82||LA181_0==84||LA181_0==86||(LA181_0>=88 && LA181_0<=89)||(LA181_0>=92 && LA181_0<=93)||(LA181_0>=119 && LA181_0<=120)||(LA181_0>=143 && LA181_0<=144)||LA181_0==163))
					{
						alt181 = 1;
					}
					else if ((LA181_0==121))
					{
						alt181 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 181, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(181); }
					switch (alt181)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:579:17: expr_list ']'
						{
						DebugLocation(579, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5224);
						expr_list413=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list413.Tree);
						DebugLocation(579, 27);
						char_literal414=(IToken)Match(input,121,Follow._121_in_suffix_expr5226);  
						stream_121.Add(char_literal414);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 579:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(579, 34);
							// SugarCpp.g:579:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(579, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(579, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(579, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:580:17: ']'
						{
						DebugLocation(580, 17);
						char_literal415=(IToken)Match(input,121,Follow._121_in_suffix_expr5255);  
						stream_121.Add(char_literal415);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 580:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(580, 24);
							// SugarCpp.g:580:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(580, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(580, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(181); }


					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 77);
			LeaveRule("suffix_expr", 77);
			LeaveRule_suffix_expr();
		}
		DebugLocation(584, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:586:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 78);
		TraceIn("atom_expr", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER416 = default(IToken);
		IToken STRING418 = default(IToken);
		IToken char_literal419 = default(IToken);
		IToken char_literal421 = default(IToken);
		IToken char_literal422 = default(IToken);
		IToken char_literal424 = default(IToken);
		IToken char_literal425 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER416_tree = default(CommonTree);
		CommonTree STRING418_tree = default(CommonTree);
		CommonTree char_literal419_tree = default(CommonTree);
		CommonTree char_literal421_tree = default(CommonTree);
		CommonTree char_literal422_tree = default(CommonTree);
		CommonTree char_literal424_tree = default(CommonTree);
		CommonTree char_literal425_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(586, 1);
		try
		{
			// SugarCpp.g:587:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt185=5;
			try { DebugEnterDecision(185, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt185 = 1;
				}
				break;
			case IDENT:
				{
				alt185 = 2;
				}
				break;
			case STRING:
				{
				alt185 = 3;
				}
				break;
			case 119:
				{
				alt185 = 4;
				}
				break;
			case 84:
				{
				alt185 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 185, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(185); }
			switch (alt185)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:587:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(587, 4);
				NUMBER416=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr5308); 
				NUMBER416_tree = (CommonTree)adaptor.Create(NUMBER416);
				adaptor.AddChild(root_0, NUMBER416_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:588:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(588, 4);
				PushFollow(Follow._ident_in_atom_expr5313);
				ident417=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident417.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:589:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(589, 4);
				STRING418=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr5318); 
				STRING418_tree = (CommonTree)adaptor.Create(STRING418);
				adaptor.AddChild(root_0, STRING418_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:590:4: '@' ident
				{
				DebugLocation(590, 4);
				char_literal419=(IToken)Match(input,119,Follow._119_in_atom_expr5323);  
				stream_119.Add(char_literal419);

				DebugLocation(590, 8);
				PushFollow(Follow._ident_in_atom_expr5325);
				ident420=ident();
				PopFollow();

				stream_ident.Add(ident420.Tree);


				{
				// AST REWRITE
				// elements: 119, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 590:14: -> ^( '@' ident )
				{
					DebugLocation(590, 17);
					// SugarCpp.g:590:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(590, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_119.NextNode(), root_1);

					DebugLocation(590, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:591:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(591, 4);
				char_literal421=(IToken)Match(input,84,Follow._84_in_atom_expr5338);  
				stream_84.Add(char_literal421);

				DebugLocation(591, 9);
				PushFollow(Follow._expr_in_atom_expr5342);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(591, 15);
				// SugarCpp.g:591:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt184=2;
				try { DebugEnterSubRule(184);
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==91))
				{
					alt184 = 1;
				}
				else if ((LA184_0==85))
				{
					alt184 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 184, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:591:17: ( ',' expr )+ ')'
					{
					DebugLocation(591, 17);
					// SugarCpp.g:591:17: ( ',' expr )+
					int cnt183=0;
					try { DebugEnterSubRule(183);
					while (true)
					{
						int alt183=2;
						try { DebugEnterDecision(183, false);
						int LA183_0 = input.LA(1);

						if ((LA183_0==91))
						{
							alt183 = 1;
						}


						} finally { DebugExitDecision(183); }
						switch (alt183)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:591:18: ',' expr
							{
							DebugLocation(591, 18);
							char_literal422=(IToken)Match(input,91,Follow._91_in_atom_expr5347);  
							stream_91.Add(char_literal422);

							DebugLocation(591, 22);
							PushFollow(Follow._expr_in_atom_expr5349);
							expr423=expr();
							PopFollow();

							stream_expr.Add(expr423.Tree);

							}
							break;

						default:
							if (cnt183 >= 1)
								goto loop183;

							EarlyExitException eee183 = new EarlyExitException( 183, input );
							DebugRecognitionException(eee183);
							throw eee183;
						}
						cnt183++;
					}
					loop183:
						;

					} finally { DebugExitSubRule(183); }

					DebugLocation(591, 29);
					char_literal424=(IToken)Match(input,85,Follow._85_in_atom_expr5353);  
					stream_85.Add(char_literal424);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 591:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(591, 36);
						// SugarCpp.g:591:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(591, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(591, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(591, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:592:17: ')' {...}?
					{
					DebugLocation(592, 17);
					char_literal425=(IToken)Match(input,85,Follow._85_in_atom_expr5380);  
					stream_85.Add(char_literal425);

					DebugLocation(592, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 592:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(592, 40);
						// SugarCpp.g:592:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(592, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(592, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(184); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 78);
			LeaveRule("atom_expr", 78);
			LeaveRule_atom_expr();
		}
		DebugLocation(594, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:596:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 79);
		TraceIn("lvalue_item", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix426 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(596, 1);
		try
		{
			// SugarCpp.g:597:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:597:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(597, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item5411);
			lvalue_prefix426=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix426.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 79);
			LeaveRule("lvalue_item", 79);
			LeaveRule_lvalue_item();
		}
		DebugLocation(598, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:600:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 80);
		TraceIn("lvalue_prefix", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op427 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix428 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix429 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(600, 1);
		try
		{
			// SugarCpp.g:601:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt186=2;
			try { DebugEnterDecision(186, false);
			int LA186_0 = input.LA(1);

			if ((LA186_0==77||LA186_0==82||LA186_0==86||(LA186_0>=88 && LA186_0<=89)||(LA186_0>=92 && LA186_0<=93)||LA186_0==144||LA186_0==163))
			{
				alt186 = 1;
			}
			else if ((LA186_0==IDENT||LA186_0==119))
			{
				alt186 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 186, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(186); }
			switch (alt186)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:601:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(601, 4);
				// SugarCpp.g:601:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:601:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(601, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix5423);
				prefix_expr_op427=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op427.Tree);
				DebugLocation(601, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix5425);
				lvalue_prefix428=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix428.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 601:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(601, 38);
					// SugarCpp.g:601:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(601, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(601, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(601, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:602:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(602, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix5441);
				lvalue_suffix429=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix429.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 80);
			LeaveRule("lvalue_prefix", 80);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(603, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:605:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 81);
		TraceIn("lvalue_suffix", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal430 = default(IToken);
		IToken string_literal431 = default(IToken);
		IToken char_literal432 = default(IToken);
		IToken string_literal434 = default(IToken);
		IToken char_literal437 = default(IToken);
		IToken char_literal439 = default(IToken);
		IToken char_literal440 = default(IToken);
		IToken char_literal442 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident433 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter436 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list438 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list441 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal430_tree = default(CommonTree);
		CommonTree string_literal431_tree = default(CommonTree);
		CommonTree char_literal432_tree = default(CommonTree);
		CommonTree string_literal434_tree = default(CommonTree);
		CommonTree char_literal437_tree = default(CommonTree);
		CommonTree char_literal439_tree = default(CommonTree);
		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree char_literal442_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(605, 1);
		try
		{
			// SugarCpp.g:606:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:606:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(606, 4);
			// SugarCpp.g:606:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:606:5: a= lvalue_atom
			{
			DebugLocation(606, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix5455);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 606:19: -> $a
			{
				DebugLocation(606, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(606, 26);
			// SugarCpp.g:606:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=7;
				try { DebugEnterDecision(190, false);
				switch (input.LA(1))
				{
				case 89:
					{
					alt190 = 1;
					}
					break;
				case 93:
					{
					alt190 = 2;
					}
					break;
				case 97:
					{
					alt190 = 3;
					}
					break;
				case 95:
					{
					alt190 = 4;
					}
					break;
				case 84:
				case 105:
					{
					alt190 = 5;
					}
					break;
				case 120:
					{
					alt190 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(190); }
				switch ( alt190 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:606:28: '++'
					{
					DebugLocation(606, 28);
					string_literal430=(IToken)Match(input,89,Follow._89_in_lvalue_suffix5465);  
					stream_89.Add(string_literal430);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 89
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 606:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(606, 36);
						// SugarCpp.g:606:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(606, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(606, 50);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(606, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:607:16: '--'
					{
					DebugLocation(607, 16);
					string_literal431=(IToken)Match(input,93,Follow._93_in_lvalue_suffix5493);  
					stream_93.Add(string_literal431);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 93
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 607:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(607, 24);
						// SugarCpp.g:607:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(607, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(607, 38);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(607, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:608:13: '.' ident
					{
					DebugLocation(608, 13);
					char_literal432=(IToken)Match(input,97,Follow._97_in_lvalue_suffix5518);  
					stream_97.Add(char_literal432);

					DebugLocation(608, 17);
					PushFollow(Follow._ident_in_lvalue_suffix5520);
					ident433=ident();
					PopFollow();

					stream_ident.Add(ident433.Tree);


					{
					// AST REWRITE
					// elements: 97, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(608, 26);
						// SugarCpp.g:608:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(608, 40);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(608, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(608, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:609:13: '->' ident
					{
					DebugLocation(609, 13);
					string_literal434=(IToken)Match(input,95,Follow._95_in_lvalue_suffix5547);  
					stream_95.Add(string_literal434);

					DebugLocation(609, 18);
					PushFollow(Follow._ident_in_lvalue_suffix5549);
					ident435=ident();
					PopFollow();

					stream_ident.Add(ident435.Tree);


					{
					// AST REWRITE
					// elements: 95, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 609:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(609, 27);
						// SugarCpp.g:609:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(609, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(609, 41);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(609, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(609, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:610:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(610, 13);
					// SugarCpp.g:610:13: ( generic_parameter )?
					int alt187=2;
					try { DebugEnterSubRule(187);
					try { DebugEnterDecision(187, false);
					int LA187_0 = input.LA(1);

					if ((LA187_0==105))
					{
						alt187 = 1;
					}
					} finally { DebugExitDecision(187); }
					switch (alt187)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:610:13: generic_parameter
						{
						DebugLocation(610, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix5576);
						generic_parameter436=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter436.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(187); }

					DebugLocation(610, 32);
					char_literal437=(IToken)Match(input,84,Follow._84_in_lvalue_suffix5579);  
					stream_84.Add(char_literal437);

					DebugLocation(610, 36);
					// SugarCpp.g:610:36: ( expr_list )?
					int alt188=2;
					try { DebugEnterSubRule(188);
					try { DebugEnterDecision(188, false);
					int LA188_0 = input.LA(1);

					if ((LA188_0==IDENT||LA188_0==NUMBER||LA188_0==STRING||LA188_0==77||LA188_0==82||LA188_0==84||LA188_0==86||(LA188_0>=88 && LA188_0<=89)||(LA188_0>=92 && LA188_0<=93)||(LA188_0>=119 && LA188_0<=120)||(LA188_0>=143 && LA188_0<=144)||LA188_0==163))
					{
						alt188 = 1;
					}
					} finally { DebugExitDecision(188); }
					switch (alt188)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:610:36: expr_list
						{
						DebugLocation(610, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix5581);
						expr_list438=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list438.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(188); }

					DebugLocation(610, 47);
					char_literal439=(IToken)Match(input,85,Follow._85_in_lvalue_suffix5584);  
					stream_85.Add(char_literal439);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(610, 54);
						// SugarCpp.g:610:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(610, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(610, 81);
						// SugarCpp.g:610:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(610, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(610, 100);
						// SugarCpp.g:610:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(610, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:611:13: '[' ( expr_list )? ']'
					{
					DebugLocation(611, 13);
					char_literal440=(IToken)Match(input,120,Follow._120_in_lvalue_suffix5613);  
					stream_120.Add(char_literal440);

					DebugLocation(611, 17);
					// SugarCpp.g:611:17: ( expr_list )?
					int alt189=2;
					try { DebugEnterSubRule(189);
					try { DebugEnterDecision(189, false);
					int LA189_0 = input.LA(1);

					if ((LA189_0==IDENT||LA189_0==NUMBER||LA189_0==STRING||LA189_0==77||LA189_0==82||LA189_0==84||LA189_0==86||(LA189_0>=88 && LA189_0<=89)||(LA189_0>=92 && LA189_0<=93)||(LA189_0>=119 && LA189_0<=120)||(LA189_0>=143 && LA189_0<=144)||LA189_0==163))
					{
						alt189 = 1;
					}
					} finally { DebugExitDecision(189); }
					switch (alt189)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:611:17: expr_list
						{
						DebugLocation(611, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix5615);
						expr_list441=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list441.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(189); }

					DebugLocation(611, 28);
					char_literal442=(IToken)Match(input,121,Follow._121_in_lvalue_suffix5618);  
					stream_121.Add(char_literal442);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 611:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(611, 35);
						// SugarCpp.g:611:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(611, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(611, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(611, 62);
						// SugarCpp.g:611:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(611, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop190;
				}
			}

			loop190:
				;

			} finally { DebugExitSubRule(190); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 81);
			LeaveRule("lvalue_suffix", 81);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(613, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:615:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 82);
		TraceIn("lvalue_atom", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal444 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident443 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident445 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal444_tree = default(CommonTree);
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(615, 1);
		try
		{
			// SugarCpp.g:616:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt191=2;
			try { DebugEnterDecision(191, false);
			int LA191_0 = input.LA(1);

			if ((LA191_0==IDENT))
			{
				alt191 = 1;
			}
			else if ((LA191_0==119))
			{
				alt191 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:616:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(616, 4);
				PushFollow(Follow._ident_in_lvalue_atom5657);
				ident443=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident443.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:617:4: '@' ident
				{
				DebugLocation(617, 4);
				char_literal444=(IToken)Match(input,119,Follow._119_in_lvalue_atom5662);  
				stream_119.Add(char_literal444);

				DebugLocation(617, 8);
				PushFollow(Follow._ident_in_lvalue_atom5664);
				ident445=ident();
				PopFollow();

				stream_ident.Add(ident445.Tree);


				{
				// AST REWRITE
				// elements: ident, 119
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 617:14: -> ^( '@' ident )
				{
					DebugLocation(617, 17);
					// SugarCpp.g:617:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(617, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_119.NextNode(), root_1);

					DebugLocation(617, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 82);
			LeaveRule("lvalue_atom", 82);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(618, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:620:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 83);
		TraceIn("lvalue", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal446 = default(IToken);
		IToken char_literal448 = default(IToken);
		IToken char_literal450 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item447 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item449 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item451 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal446_tree = default(CommonTree);
		CommonTree char_literal448_tree = default(CommonTree);
		CommonTree char_literal450_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(620, 1);
		try
		{
			// SugarCpp.g:621:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt193=2;
			try { DebugEnterDecision(193, false);
			int LA193_0 = input.LA(1);

			if ((LA193_0==84))
			{
				alt193 = 1;
			}
			else if ((LA193_0==IDENT||LA193_0==77||LA193_0==82||LA193_0==86||(LA193_0>=88 && LA193_0<=89)||(LA193_0>=92 && LA193_0<=93)||LA193_0==119||LA193_0==144||LA193_0==163))
			{
				alt193 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 193, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(193); }
			switch (alt193)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:621:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(621, 4);
				char_literal446=(IToken)Match(input,84,Follow._84_in_lvalue5683);  
				stream_84.Add(char_literal446);

				DebugLocation(621, 8);
				PushFollow(Follow._lvalue_item_in_lvalue5685);
				lvalue_item447=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item447.Tree);
				DebugLocation(621, 20);
				// SugarCpp.g:621:20: ( ',' lvalue_item )+
				int cnt192=0;
				try { DebugEnterSubRule(192);
				while (true)
				{
					int alt192=2;
					try { DebugEnterDecision(192, false);
					int LA192_0 = input.LA(1);

					if ((LA192_0==91))
					{
						alt192 = 1;
					}


					} finally { DebugExitDecision(192); }
					switch (alt192)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:621:21: ',' lvalue_item
						{
						DebugLocation(621, 21);
						char_literal448=(IToken)Match(input,91,Follow._91_in_lvalue5688);  
						stream_91.Add(char_literal448);

						DebugLocation(621, 25);
						PushFollow(Follow._lvalue_item_in_lvalue5690);
						lvalue_item449=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item449.Tree);

						}
						break;

					default:
						if (cnt192 >= 1)
							goto loop192;

						EarlyExitException eee192 = new EarlyExitException( 192, input );
						DebugRecognitionException(eee192);
						throw eee192;
					}
					cnt192++;
				}
				loop192:
					;

				} finally { DebugExitSubRule(192); }

				DebugLocation(621, 39);
				char_literal450=(IToken)Match(input,85,Follow._85_in_lvalue5694);  
				stream_85.Add(char_literal450);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 621:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(621, 46);
					// SugarCpp.g:621:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(621, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(621, 60);
					// SugarCpp.g:621:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(621, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:622:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(622, 4);
				PushFollow(Follow._lvalue_item_in_lvalue5708);
				lvalue_item451=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item451.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 83);
			LeaveRule("lvalue", 83);
			LeaveRule_lvalue();
		}
		DebugLocation(623, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:625:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 84);
		TraceIn("ident", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT452 = default(IToken);
		IToken string_literal453 = default(IToken);
		IToken IDENT454 = default(IToken);

		CommonTree IDENT452_tree = default(CommonTree);
		CommonTree string_literal453_tree = default(CommonTree);
		CommonTree IDENT454_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(625, 1);
		try
		{
			// SugarCpp.g:626:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:626:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(626, 4);
			IDENT452=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5719); 
			IDENT452_tree = (CommonTree)adaptor.Create(IDENT452);
			adaptor.AddChild(root_0, IDENT452_tree);
			DebugLocation(626, 10);
			// SugarCpp.g:626:10: ( '::' IDENT )*
			try { DebugEnterSubRule(194);
			while (true)
			{
				int alt194=2;
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==102))
				{
					alt194 = 1;
				}


				} finally { DebugExitDecision(194); }
				switch ( alt194 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:626:11: '::' IDENT
					{
					DebugLocation(626, 11);
					string_literal453=(IToken)Match(input,102,Follow._102_in_ident5722); 
					string_literal453_tree = (CommonTree)adaptor.Create(string_literal453);
					adaptor.AddChild(root_0, string_literal453_tree);
					DebugLocation(626, 16);
					IDENT454=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5724); 
					IDENT454_tree = (CommonTree)adaptor.Create(IDENT454);
					adaptor.AddChild(root_0, IDENT454_tree);

					}
					break;

				default:
					goto loop194;
				}
			}

			loop194:
				;

			} finally { DebugExitSubRule(194); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 84);
			LeaveRule("ident", 84);
			LeaveRule_ident();
		}
		DebugLocation(627, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:629:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 85);
		TraceIn("infix_func", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal455 = default(IToken);
		IToken char_literal457 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident456 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal455_tree = default(CommonTree);
		CommonTree char_literal457_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(629, 1);
		try
		{
			// SugarCpp.g:630:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:630:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(630, 7);
			char_literal455=(IToken)Match(input,124,Follow._124_in_infix_func5737); 
			DebugLocation(630, 9);
			PushFollow(Follow._ident_in_infix_func5740);
			ident456=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident456.Tree);
			DebugLocation(630, 18);
			char_literal457=(IToken)Match(input,124,Follow._124_in_infix_func5742); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 85);
			LeaveRule("infix_func", 85);
			LeaveRule_infix_func();
		}
		DebugLocation(631, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA62 dfa62;
	private DFA79 dfa79;
	private DFA88 dfa88;
	private DFA93 dfa93;
	private DFA106 dfa106;
	private DFA145 dfa145;
	private DFA138 dfa138;
	private DFA149 dfa149;
	private DFA148 dfa148;
	private DFA154 dfa154;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa62 = new DFA62( this );
		dfa79 = new DFA79( this );
		dfa88 = new DFA88( this );
		dfa93 = new DFA93( this );
		dfa106 = new DFA106( this );
		dfa145 = new DFA145( this );
		dfa138 = new DFA138( this );
		dfa149 = new DFA149( this );
		dfa148 = new DFA148( this );
		dfa154 = new DFA154( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2A\x1\xFFFF\x1\x2A\x6\xFFFF\x2\x54\x1\x2A\x1\xFFFF\x3\x2A\x1\x31"+
			"\x2\x2A\x1\x54\x3\x55\x2\x54\x1\x2A\x3\x55\x1\x2A\x1\x5B\x5\x2A\x1\x5B"+
			"\x1\x2A\x4\x55\x1\x54\xA\x55\x2\x2A\x1\x5B\x2\x2A\x1\x5B\x2\x2A\xA\x55"+
			"\x2\x2A\x2\x55";
		private const string DFA4_maxS =
			"\x1\xA3\x1\x82\x1\xFFFF\x1\xA3\x6\xFFFF\x2\x79\x1\x2A\x1\xFFFF\x1\x2A"+
			"\x1\x37\x1\x82\x1\x31\x1\x37\x1\xA3\x1\x79\x2\x5B\x1\x66\x2\x79\x1\xA3"+
			"\x2\x5B\x1\x66\x1\x37\x1\x79\x2\x2A\x3\x37\x1\x79\x1\x2A\x2\x5B\x2\x66"+
			"\x1\x79\x2\x5B\x1\x66\x2\x5B\x1\x66\x2\x5B\x2\x66\x1\x2A\x1\x37\x1\x79"+
			"\x1\x2A\x1\x37\x1\x79\x2\x2A\x1\x66\x2\x5B\x2\x66\x2\x5B\x3\x66\x2\x2A"+
			"\x2\x66";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4D\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x3\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\xA\x57\xFFFF\x1\xB",
				"",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x2A\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x7\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x57\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x7\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x2A\xFFFF"+
				"\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x6\xFFFF\x1\x1A\x46\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x3\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x7\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x7\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x7\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x7\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x7\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x7\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "208:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x31\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x31\x1\xA3\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "252:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x31\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x31\x1\xA3\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "260:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x31\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x31\x1\xA3\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "264:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA62 : DFA
	{
		private const string DFA62_eotS =
			"\xF\xFFFF";
		private const string DFA62_eofS =
			"\xF\xFFFF";
		private const string DFA62_minS =
			"\x1\x2A\x1\xFFFF\x1\x2A\x1\xFFFF\x3\x2A\x1\x52\x3\x2A\x2\x52\x1\x2A\x1"+
			"\x52";
		private const string DFA62_maxS =
			"\x1\xA3\x1\xFFFF\x1\xA3\x1\xFFFF\x1\x2A\x1\x9A\x1\xA3\x1\x78\x1\x2A\x1"+
			"\x9A\x1\xA3\x2\x78\x1\x2A\x1\x78";
		private const string DFA62_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA62_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA62_transitionS =
			{
				"\x1\x2\x57\xFFFF\x1\x1\x10\xFFFF\x1\x1\x6\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x2A\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x46\xFFFF\x1\x1\x10\xFFFF\x1\x1\x10\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x2A\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x57\xFFFF\x1\x1\x10\xFFFF\x1\x1\x6\xFFFF\x1\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x21\xFFFF\x1\x1"+
				"\x2A\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA62_eot = DFA.UnpackEncodedString(DFA62_eotS);
		private static readonly short[] DFA62_eof = DFA.UnpackEncodedString(DFA62_eofS);
		private static readonly char[] DFA62_min = DFA.UnpackEncodedStringToUnsignedChars(DFA62_minS);
		private static readonly char[] DFA62_max = DFA.UnpackEncodedStringToUnsignedChars(DFA62_maxS);
		private static readonly short[] DFA62_accept = DFA.UnpackEncodedString(DFA62_acceptS);
		private static readonly short[] DFA62_special = DFA.UnpackEncodedString(DFA62_specialS);
		private static readonly short[][] DFA62_transition;

		static DFA62()
		{
			int numStates = DFA62_transitionS.Length;
			DFA62_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA62_transition[i] = DFA.UnpackEncodedString(DFA62_transitionS[i]);
			}
		}

		public DFA62( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 62;
			this.eot = DFA62_eot;
			this.eof = DFA62_eof;
			this.min = DFA62_min;
			this.max = DFA62_max;
			this.accept = DFA62_accept;
			this.special = DFA62_special;
			this.transition = DFA62_transition;
		}

		public override string Description { get { return "311:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA79 : DFA
	{
		private const string DFA79_eotS =
			"\x9\xFFFF";
		private const string DFA79_eofS =
			"\x9\xFFFF";
		private const string DFA79_minS =
			"\x1\x2A\x1\x31\x4\xFFFF\x1\x2A\x1\xFFFF\x1\x31";
		private const string DFA79_maxS =
			"\x1\xA3\x1\xA1\x4\xFFFF\x1\x2A\x1\xFFFF\x1\xA1";
		private const string DFA79_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA79_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA79_transitionS =
			{
				"\x1\x1\x22\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x18\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x3\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xF\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xF\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA79_eot = DFA.UnpackEncodedString(DFA79_eotS);
		private static readonly short[] DFA79_eof = DFA.UnpackEncodedString(DFA79_eofS);
		private static readonly char[] DFA79_min = DFA.UnpackEncodedStringToUnsignedChars(DFA79_minS);
		private static readonly char[] DFA79_max = DFA.UnpackEncodedStringToUnsignedChars(DFA79_maxS);
		private static readonly short[] DFA79_accept = DFA.UnpackEncodedString(DFA79_acceptS);
		private static readonly short[] DFA79_special = DFA.UnpackEncodedString(DFA79_specialS);
		private static readonly short[][] DFA79_transition;

		static DFA79()
		{
			int numStates = DFA79_transitionS.Length;
			DFA79_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA79_transition[i] = DFA.UnpackEncodedString(DFA79_transitionS[i]);
			}
		}

		public DFA79( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 79;
			this.eot = DFA79_eot;
			this.eof = DFA79_eof;
			this.min = DFA79_min;
			this.max = DFA79_max;
			this.accept = DFA79_accept;
			this.special = DFA79_special;
			this.transition = DFA79_transition;
		}

		public override string Description { get { return "351:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA88 : DFA
	{
		private const string DFA88_eotS =
			"\x4\xFFFF";
		private const string DFA88_eofS =
			"\x4\xFFFF";
		private const string DFA88_minS =
			"\x1\x31\x1\x8\x2\xFFFF";
		private const string DFA88_maxS =
			"\x1\x85\x1\xA3\x2\xFFFF";
		private const string DFA88_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA88_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA88_transitionS =
			{
				"\x1\x1\x53\xFFFF\x1\x2",
				"\x1\x3\x21\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
		private static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
		private static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
		private static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
		private static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
		private static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
		private static readonly short[][] DFA88_transition;

		static DFA88()
		{
			int numStates = DFA88_transitionS.Length;
			DFA88_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA88_transition[i] = DFA.UnpackEncodedString(DFA88_transitionS[i]);
			}
		}

		public DFA88( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}

		public override string Description { get { return "382:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA93 : DFA
	{
		private const string DFA93_eotS =
			"\x4\xFFFF";
		private const string DFA93_eofS =
			"\x4\xFFFF";
		private const string DFA93_minS =
			"\x1\x31\x1\x8\x2\xFFFF";
		private const string DFA93_maxS =
			"\x1\x85\x1\xA3\x2\xFFFF";
		private const string DFA93_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA93_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA93_transitionS =
			{
				"\x1\x1\x53\xFFFF\x1\x2",
				"\x1\x3\x21\xFFFF\x1\x3\x6\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA93_eot = DFA.UnpackEncodedString(DFA93_eotS);
		private static readonly short[] DFA93_eof = DFA.UnpackEncodedString(DFA93_eofS);
		private static readonly char[] DFA93_min = DFA.UnpackEncodedStringToUnsignedChars(DFA93_minS);
		private static readonly char[] DFA93_max = DFA.UnpackEncodedStringToUnsignedChars(DFA93_maxS);
		private static readonly short[] DFA93_accept = DFA.UnpackEncodedString(DFA93_acceptS);
		private static readonly short[] DFA93_special = DFA.UnpackEncodedString(DFA93_specialS);
		private static readonly short[][] DFA93_transition;

		static DFA93()
		{
			int numStates = DFA93_transitionS.Length;
			DFA93_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA93_transition[i] = DFA.UnpackEncodedString(DFA93_transitionS[i]);
			}
		}

		public DFA93( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 93;
			this.eot = DFA93_eot;
			this.eof = DFA93_eof;
			this.min = DFA93_min;
			this.max = DFA93_max;
			this.accept = DFA93_accept;
			this.special = DFA93_special;
			this.transition = DFA93_transition;
		}

		public override string Description { get { return "385:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA106 : DFA
	{
		private const string DFA106_eotS =
			"\x6\xFFFF";
		private const string DFA106_eofS =
			"\x6\xFFFF";
		private const string DFA106_minS =
			"\x1\x2A\x1\x31\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x31";
		private const string DFA106_maxS =
			"\x1\xA3\x1\xA2\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xA2";
		private const string DFA106_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA106_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA106_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x3\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x3\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x4\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x4\x2"
			};

		private static readonly short[] DFA106_eot = DFA.UnpackEncodedString(DFA106_eotS);
		private static readonly short[] DFA106_eof = DFA.UnpackEncodedString(DFA106_eofS);
		private static readonly char[] DFA106_min = DFA.UnpackEncodedStringToUnsignedChars(DFA106_minS);
		private static readonly char[] DFA106_max = DFA.UnpackEncodedStringToUnsignedChars(DFA106_maxS);
		private static readonly short[] DFA106_accept = DFA.UnpackEncodedString(DFA106_acceptS);
		private static readonly short[] DFA106_special = DFA.UnpackEncodedString(DFA106_specialS);
		private static readonly short[][] DFA106_transition;

		static DFA106()
		{
			int numStates = DFA106_transitionS.Length;
			DFA106_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA106_transition[i] = DFA.UnpackEncodedString(DFA106_transitionS[i]);
			}
		}

		public DFA106( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}

		public override string Description { get { return "411:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA145 : DFA
	{
		private const string DFA145_eotS =
			"\x4\xFFFF";
		private const string DFA145_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA145_minS =
			"\x1\x31\x1\x8\x2\xFFFF";
		private const string DFA145_maxS =
			"\x1\x31\x1\xA3\x2\xFFFF";
		private const string DFA145_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA145_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA145_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA145_eot = DFA.UnpackEncodedString(DFA145_eotS);
		private static readonly short[] DFA145_eof = DFA.UnpackEncodedString(DFA145_eofS);
		private static readonly char[] DFA145_min = DFA.UnpackEncodedStringToUnsignedChars(DFA145_minS);
		private static readonly char[] DFA145_max = DFA.UnpackEncodedStringToUnsignedChars(DFA145_maxS);
		private static readonly short[] DFA145_accept = DFA.UnpackEncodedString(DFA145_acceptS);
		private static readonly short[] DFA145_special = DFA.UnpackEncodedString(DFA145_specialS);
		private static readonly short[][] DFA145_transition;

		static DFA145()
		{
			int numStates = DFA145_transitionS.Length;
			DFA145_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA145_transition[i] = DFA.UnpackEncodedString(DFA145_transitionS[i]);
			}
		}

		public DFA145( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 145;
			this.eot = DFA145_eot;
			this.eof = DFA145_eof;
			this.min = DFA145_min;
			this.max = DFA145_max;
			this.accept = DFA145_accept;
			this.special = DFA145_special;
			this.transition = DFA145_transition;
		}

		public override string Description { get { return "454:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( stmt_alloc ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( stmt )+ ) ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA138 : DFA
	{
		private const string DFA138_eotS =
			"\x4\xFFFF";
		private const string DFA138_eofS =
			"\x4\xFFFF";
		private const string DFA138_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA138_maxS =
			"\x2\x31\x2\xFFFF";
		private const string DFA138_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA138_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA138_transitionS =
			{
				"\x1\x2\x28\xFFFF\x1\x1",
				"\x1\x2\x22\xFFFF\x1\x3\x5\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA138_eot = DFA.UnpackEncodedString(DFA138_eotS);
		private static readonly short[] DFA138_eof = DFA.UnpackEncodedString(DFA138_eofS);
		private static readonly char[] DFA138_min = DFA.UnpackEncodedStringToUnsignedChars(DFA138_minS);
		private static readonly char[] DFA138_max = DFA.UnpackEncodedStringToUnsignedChars(DFA138_maxS);
		private static readonly short[] DFA138_accept = DFA.UnpackEncodedString(DFA138_acceptS);
		private static readonly short[] DFA138_special = DFA.UnpackEncodedString(DFA138_specialS);
		private static readonly short[][] DFA138_transition;

		static DFA138()
		{
			int numStates = DFA138_transitionS.Length;
			DFA138_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA138_transition[i] = DFA.UnpackEncodedString(DFA138_transitionS[i]);
			}
		}

		public DFA138( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 138;
			this.eot = DFA138_eot;
			this.eof = DFA138_eof;
			this.min = DFA138_min;
			this.max = DFA138_max;
			this.accept = DFA138_accept;
			this.special = DFA138_special;
			this.transition = DFA138_transition;
		}

		public override string Description { get { return "454:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr stmt_alloc ( stmt )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA149 : DFA
	{
		private const string DFA149_eotS =
			"\x7\xFFFF";
		private const string DFA149_eofS =
			"\x7\xFFFF";
		private const string DFA149_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA149_maxS =
			"\x5\xA3\x2\xFFFF";
		private const string DFA149_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA149_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA149_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x15\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA149_eot = DFA.UnpackEncodedString(DFA149_eotS);
		private static readonly short[] DFA149_eof = DFA.UnpackEncodedString(DFA149_eofS);
		private static readonly char[] DFA149_min = DFA.UnpackEncodedStringToUnsignedChars(DFA149_minS);
		private static readonly char[] DFA149_max = DFA.UnpackEncodedStringToUnsignedChars(DFA149_maxS);
		private static readonly short[] DFA149_accept = DFA.UnpackEncodedString(DFA149_acceptS);
		private static readonly short[] DFA149_special = DFA.UnpackEncodedString(DFA149_specialS);
		private static readonly short[][] DFA149_transition;

		static DFA149()
		{
			int numStates = DFA149_transitionS.Length;
			DFA149_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA149_transition[i] = DFA.UnpackEncodedString(DFA149_transitionS[i]);
			}
		}

		public DFA149( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 149;
			this.eot = DFA149_eot;
			this.eof = DFA149_eof;
			this.min = DFA149_min;
			this.max = DFA149_max;
			this.accept = DFA149_accept;
			this.special = DFA149_special;
			this.transition = DFA149_transition;
		}

		public override string Description { get { return "468:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA148 : DFA
	{
		private const string DFA148_eotS =
			"\x7\xFFFF";
		private const string DFA148_eofS =
			"\x7\xFFFF";
		private const string DFA148_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA148_maxS =
			"\x1\x79\x4\xA3\x2\xFFFF";
		private const string DFA148_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA148_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA148_transitionS =
			{
				"\x1\x4\x22\xFFFF\x1\x3\x5\xFFFF\x1\x2\x29\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x15\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA148_eot = DFA.UnpackEncodedString(DFA148_eotS);
		private static readonly short[] DFA148_eof = DFA.UnpackEncodedString(DFA148_eofS);
		private static readonly char[] DFA148_min = DFA.UnpackEncodedStringToUnsignedChars(DFA148_minS);
		private static readonly char[] DFA148_max = DFA.UnpackEncodedStringToUnsignedChars(DFA148_maxS);
		private static readonly short[] DFA148_accept = DFA.UnpackEncodedString(DFA148_acceptS);
		private static readonly short[] DFA148_special = DFA.UnpackEncodedString(DFA148_specialS);
		private static readonly short[][] DFA148_transition;

		static DFA148()
		{
			int numStates = DFA148_transitionS.Length;
			DFA148_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA148_transition[i] = DFA.UnpackEncodedString(DFA148_transitionS[i]);
			}
		}

		public DFA148( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 148;
			this.eot = DFA148_eot;
			this.eof = DFA148_eof;
			this.min = DFA148_min;
			this.max = DFA148_max;
			this.accept = DFA148_accept;
			this.special = DFA148_special;
			this.transition = DFA148_transition;
		}

		public override string Description { get { return "()* loopback of 468:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA154 : DFA
	{
		private const string DFA154_eotS =
			"\xB\xFFFF";
		private const string DFA154_eofS =
			"\xB\xFFFF";
		private const string DFA154_minS =
			"\x2\x2A\x1\xFFFF\x1\x4E\x1\xFFFF\x2\x2A\x2\x4E\x1\x2A\x1\x4E";
		private const string DFA154_maxS =
			"\x2\xA3\x1\xFFFF\x1\xA2\x1\xFFFF\x1\x2A\x1\xA3\x2\xA2\x1\x2A\x1\xA2";
		private const string DFA154_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA154_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA154_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x17\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x16\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x4\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2"
			};

		private static readonly short[] DFA154_eot = DFA.UnpackEncodedString(DFA154_eotS);
		private static readonly short[] DFA154_eof = DFA.UnpackEncodedString(DFA154_eofS);
		private static readonly char[] DFA154_min = DFA.UnpackEncodedStringToUnsignedChars(DFA154_minS);
		private static readonly char[] DFA154_max = DFA.UnpackEncodedStringToUnsignedChars(DFA154_maxS);
		private static readonly short[] DFA154_accept = DFA.UnpackEncodedString(DFA154_acceptS);
		private static readonly short[] DFA154_special = DFA.UnpackEncodedString(DFA154_specialS);
		private static readonly short[][] DFA154_transition;

		static DFA154()
		{
			int numStates = DFA154_transitionS.Length;
			DFA154_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA154_transition[i] = DFA.UnpackEncodedString(DFA154_transitionS[i]);
			}
		}

		public DFA154( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 154;
			this.eot = DFA154_eot;
			this.eof = DFA154_eof;
			this.min = DFA154_min;
			this.max = DFA154_max;
			this.accept = DFA154_accept;
			this.special = DFA154_special;
			this.transition = DFA154_transition;
		}

		public override string Description { get { return "472:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root533 = new BitSet(new ulong[]{0x2040000000000UL,0x100000000000000UL,0x815084446UL});
		public static readonly BitSet _global_block_in_root536 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block558 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block560 = new BitSet(new ulong[]{0x2040000000002UL,0x100000000000000UL,0x815084446UL});
		public static readonly BitSet _func_def_in_node583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item651 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_attribute_item654 = new BitSet(new ulong[]{0x84040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item656 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _91_in_attribute_item659 = new BitSet(new ulong[]{0x84040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item661 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _85_in_attribute_item665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_attribute_item683 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_attribute_item686 = new BitSet(new ulong[]{0x84040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item688 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _91_in_attribute_item691 = new BitSet(new ulong[]{0x84040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item693 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _85_in_attribute_item697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_attribute722 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _attribute_item_in_attribute724 = new BitSet(new ulong[]{0x0UL,0x200000008000000UL});
		public static readonly BitSet _91_in_attribute727 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _attribute_item_in_attribute729 = new BitSet(new ulong[]{0x0UL,0x200000008000000UL});
		public static readonly BitSet _121_in_attribute733 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute735 = new BitSet(new ulong[]{0x2000000000002UL,0x100000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc754 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc757 = new BitSet(new ulong[]{0x0UL,0xA000000000UL});
		public static readonly BitSet _101_in_global_alloc761 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_global_alloc763 = new BitSet(new ulong[]{0x2UL,0x408000100000UL});
		public static readonly BitSet _110_in_global_alloc768 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _103_in_global_alloc772 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_global_alloc775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_global_alloc835 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033742000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_global_alloc837 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_global_alloc840 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_global_alloc913 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_global_alloc916 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_global_alloc919 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_global_alloc921 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _attribute_in_global_using958 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_global_using961 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x4000UL});
		public static readonly BitSet _stmt_using_item_in_global_using963 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x4000UL});
		public static readonly BitSet _attribute_in_global_typedef987 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_global_typedef990 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef992 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_global_typedef994 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_global_typedef996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1020 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_import_def1023 = new BitSet(new ulong[]{0x82000000000002UL});
		public static readonly BitSet _STRING_in_import_def1025 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1029 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _INDENT_in_import_def1032 = new BitSet(new ulong[]{0x82000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1034 = new BitSet(new ulong[]{0x82000000000100UL});
		public static readonly BitSet _STRING_in_import_def1039 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1041 = new BitSet(new ulong[]{0x82000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1071 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_enum_def1074 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1076 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_enum_def1078 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _ident_in_enum_def1081 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _160_in_enum_def1084 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1086 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _attribute_in_namespace_def1119 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000UL});
		public static readonly BitSet _142_in_namespace_def1122 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_namespace_def1124 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1127 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1130 = new BitSet(new ulong[]{0x2040000000100UL,0x100000000000000UL,0x815084446UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1132 = new BitSet(new ulong[]{0x2040000000100UL,0x100000000000000UL,0x815084446UL});
		public static readonly BitSet _global_block_in_namespace_def1135 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1137 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1165 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_class_def1168 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1170 = new BitSet(new ulong[]{0x2000000000002UL,0x22000100000UL});
		public static readonly BitSet _generic_parameter_in_class_def1173 = new BitSet(new ulong[]{0x2000000000002UL,0x2000100000UL});
		public static readonly BitSet _84_in_class_def1178 = new BitSet(new ulong[]{0x40000000000UL,0x8000000000UL});
		public static readonly BitSet _func_args_in_class_def1180 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_class_def1182 = new BitSet(new ulong[]{0x2000000000002UL,0x2000000000UL});
		public static readonly BitSet _101_in_class_def1187 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1189 = new BitSet(new ulong[]{0x2000000000002UL,0x8000000UL});
		public static readonly BitSet _91_in_class_def1192 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1194 = new BitSet(new ulong[]{0x2000000000002UL,0x8000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1201 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1204 = new BitSet(new ulong[]{0x2040000000100UL,0x100000000000000UL,0x815084446UL});
		public static readonly BitSet _NEWLINE_in_class_def1206 = new BitSet(new ulong[]{0x2040000000100UL,0x100000000000000UL,0x815084446UL});
		public static readonly BitSet _global_block_in_class_def1209 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1254 = new BitSet(new ulong[]{0x2UL,0x100000000040000UL});
		public static readonly BitSet _82_in_type_name1258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_type_name1274 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_type_name1276 = new BitSet(new ulong[]{0x0UL,0x200000008000000UL});
		public static readonly BitSet _91_in_type_name1279 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_type_name1281 = new BitSet(new ulong[]{0x0UL,0x200000008000000UL});
		public static readonly BitSet _121_in_type_name1285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1323 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_type_star1327 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _type_ident_in_type_template_type1373 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_type_template_type1377 = new BitSet(new ulong[]{0x40000000000UL,0x2000000000000UL,0x4080004UL});
		public static readonly BitSet _type_name_in_type_template_type1380 = new BitSet(new ulong[]{0x0UL,0x2000008000000UL});
		public static readonly BitSet _91_in_type_template_type1383 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_type_template_type1385 = new BitSet(new ulong[]{0x0UL,0x2000008000000UL});
		public static readonly BitSet _113_in_type_template_type1391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_type_ident1431 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080000UL});
		public static readonly BitSet _154_in_type_ident1434 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_type_ident1437 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident1440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1468 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_generic_parameter_inside1471 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1473 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _105_in_generic_parameter1495 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1497 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_generic_parameter1499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1514 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_func_args1517 = new BitSet(new ulong[]{0x40000000000UL,0x8000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1519 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1541 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_func_args_item1543 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_func_args_item1545 = new BitSet(new ulong[]{0x2UL,0x408000100000UL});
		public static readonly BitSet _110_in_func_args_item1550 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _103_in_func_args_item1554 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_func_args_item1557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_func_args_item1605 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033742000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_func_args_item1607 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_func_args_item1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_func_args_item1667 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1682 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x804080004UL});
		public static readonly BitSet _type_name_in_func_def1685 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_func_def1688 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_func_def1691 = new BitSet(new ulong[]{0x0UL,0x20000100000UL});
		public static readonly BitSet _generic_parameter_in_func_def1693 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_func_def1696 = new BitSet(new ulong[]{0x40000000000UL,0x8000200000UL});
		public static readonly BitSet _func_args_in_func_def1698 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_func_def1701 = new BitSet(new ulong[]{0x2000000000000UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1704 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_func_def1756 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _where_expr_in_func_def1758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item1799 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1801 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item1811 = new BitSet(new ulong[]{0x2000000000000UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1814 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _104_in_stmt_block_item1819 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1821 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block1838 = new BitSet(new ulong[]{0x2040000000100UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1840 = new BitSet(new ulong[]{0x2040000000100UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block1843 = new BitSet(new ulong[]{0x40000000100UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _DEDENT_in_stmt_block1846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt1866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt1871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple1882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex1893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex1898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex1903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex1908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex1913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex1918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1932 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8A000300UL});
		public static readonly BitSet _137_in_stmt_expr1942 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_expr1944 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8A000300UL});
		public static readonly BitSet _153_in_stmt_expr1973 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_expr1975 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8A000300UL});
		public static readonly BitSet _159_in_stmt_expr2004 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_expr2006 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8A000300UL});
		public static readonly BitSet _155_in_stmt_expr2035 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_expr2037 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8A000300UL});
		public static readonly BitSet _136_in_stmt_expr2066 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _for_item_in_stmt_expr2068 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x8A000300UL});
		public static readonly BitSet _91_in_stmt_expr2071 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _for_item_in_stmt_expr2073 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x8A000300UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2125 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_stmt_defer2146 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _stmt_in_stmt_defer2148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_defer2161 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _stmt_in_stmt_defer2163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_stmt_typedef2182 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2184 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_stmt_typedef2186 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_stmt_typedef2188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_using_item2211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_using2219 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x4000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2221 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x4000UL});
		public static readonly BitSet _146_in_stmt_return2242 = new BitSet(new ulong[]{0x84040000000002UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_return2244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2265 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _104_in_inline_stmt_block2268 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x811050000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2270 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _137_in_stmt_if2292 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_if2294 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2297 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2300 = new BitSet(new ulong[]{0x2000000000002UL,0x0UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2303 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_stmt_if2306 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2308 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_if2343 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x811050000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_stmt_if2366 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_if2368 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2371 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2374 = new BitSet(new ulong[]{0x2000000000002UL,0x0UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2377 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_stmt_if2380 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2382 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_if2421 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x811050000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_while2454 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_while2456 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2460 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_while2487 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x811050000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_stmt_while2513 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_while2515 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2519 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_while2546 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x811050000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_while2572 = new BitSet(new ulong[]{0x86040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_while2574 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2577 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2602 = new BitSet(new ulong[]{0x0UL,0x40000000000UL});
		public static readonly BitSet _106_in_for_range2604 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_for_range2608 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400010UL});
		public static readonly BitSet _150_in_for_range2611 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_for_range2615 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_for_range2618 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_for_range2622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_for_range2651 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_for_range2655 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_for_range2658 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_for_range2662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_for2755 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _for_item_in_stmt_for2759 = new BitSet(new ulong[]{0x2000000000000UL,0x8000000UL});
		public static readonly BitSet _91_in_stmt_for2762 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _for_item_in_stmt_for2764 = new BitSet(new ulong[]{0x2000000000000UL,0x8000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2768 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_try2802 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2804 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2807 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2809 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_stmt_try2812 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2814 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2816 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_switch_item2842 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_switch_item2844 = new BitSet(new ulong[]{0x2000000000000UL,0x8000000UL,0x200000UL});
		public static readonly BitSet _91_in_switch_item2847 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_switch_item2849 = new BitSet(new ulong[]{0x2000000000000UL,0x8000000UL,0x200000UL});
		public static readonly BitSet _NEWLINE_in_switch_item2855 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item2858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_switch_item2900 = new BitSet(new ulong[]{0x40000000000UL,0x80000033542000UL,0x811050000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item2902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_switch2935 = new BitSet(new ulong[]{0x86040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_switch2937 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2940 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch2943 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2945 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch2949 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2951 = new BitSet(new ulong[]{0x2000000000100UL,0x0UL,0x20000020UL});
		public static readonly BitSet _133_in_stmt_switch2957 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2959 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch2962 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2964 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch2969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2995 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_ident_list2998 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_ident_list3000 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3022 = new BitSet(new ulong[]{0x0UL,0xA000000000UL});
		public static readonly BitSet _101_in_stmt_alloc3026 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_stmt_alloc3028 = new BitSet(new ulong[]{0x2UL,0x408000100000UL});
		public static readonly BitSet _110_in_stmt_alloc3033 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _103_in_stmt_alloc3037 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_alloc3040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_stmt_alloc3088 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033742000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3090 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_stmt_alloc3093 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_stmt_alloc3154 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_alloc3158 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_stmt_alloc3161 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_alloc3163 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3189 = new BitSet(new ulong[]{0x2UL,0x850501044890000UL,0x200000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3193 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_stmt_modify3196 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_stmt_modify3210 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _modify_expr_in_stmt_modify3213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3229 = new BitSet(new ulong[]{0x2000000000002UL});
		public static readonly BitSet _NEWLINE_in_where_expr3239 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3242 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3244 = new BitSet(new ulong[]{0x2000000000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_where_expr3247 = new BitSet(new ulong[]{0x2040000000000UL});
		public static readonly BitSet _stmt_alloc_in_where_expr3251 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3255 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3291 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3294 = new BitSet(new ulong[]{0x2040000000000UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _NEWLINE_in_where_expr3296 = new BitSet(new ulong[]{0x2040000000000UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _stmt_in_where_expr3300 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3302 = new BitSet(new ulong[]{0x2040000000100UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _DEDENT_in_where_expr3307 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3309 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3364 = new BitSet(new ulong[]{0x2080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3367 = new BitSet(new ulong[]{0x2040000000000UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _NEWLINE_in_where_expr3369 = new BitSet(new ulong[]{0x2040000000000UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _stmt_in_where_expr3373 = new BitSet(new ulong[]{0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3375 = new BitSet(new ulong[]{0x2040000000100UL,0x80000033542000UL,0x89B952388UL});
		public static readonly BitSet _DEDENT_in_where_expr3380 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3382 = new BitSet(new ulong[]{0x2000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_list_expr3470 = new BitSet(new ulong[]{0x860C0000000100UL,0x38000003B542000UL,0x800018000UL});
		public static readonly BitSet _91_in_list_expr3474 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3478 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _INDENT_in_list_expr3482 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _DEDENT_in_list_expr3486 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _list_expr_in_list_expr3490 = new BitSet(new ulong[]{0x2080000000100UL,0x200000008000000UL});
		public static readonly BitSet _91_in_list_expr3494 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3498 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _INDENT_in_list_expr3502 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _DEDENT_in_list_expr3506 = new BitSet(new ulong[]{0x860C0000000100UL,0x18000003B542000UL,0x800018000UL});
		public static readonly BitSet _list_expr_in_list_expr3510 = new BitSet(new ulong[]{0x2080000000100UL,0x200000008000000UL});
		public static readonly BitSet _91_in_list_expr3517 = new BitSet(new ulong[]{0x2080000000100UL,0x200000008000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3521 = new BitSet(new ulong[]{0x2080000000100UL,0x200000008000000UL});
		public static readonly BitSet _INDENT_in_list_expr3525 = new BitSet(new ulong[]{0x2080000000100UL,0x200000008000000UL});
		public static readonly BitSet _DEDENT_in_list_expr3529 = new BitSet(new ulong[]{0x2080000000100UL,0x200000008000000UL});
		public static readonly BitSet _121_in_list_expr3533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr3547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_lambda_expr3558 = new BitSet(new ulong[]{0x40000000000UL,0x8000200000UL});
		public static readonly BitSet _func_args_in_lambda_expr3560 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_lambda_expr3563 = new BitSet(new ulong[]{0x0UL,0x1000080000000UL});
		public static readonly BitSet _95_in_lambda_expr3567 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_lambda_expr3569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_lambda_expr3609 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_lambda_expr3611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr3631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr3688 = new BitSet(new ulong[]{0x2UL,0x810509044890000UL,0x200000000UL});
		public static readonly BitSet _set_in_modify_expr3692 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3737 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_modify_expr3746 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3749 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3774 = new BitSet(new ulong[]{0x2UL,0x20000000000000UL});
		public static readonly BitSet _117_in_cond_expr3783 = new BitSet(new ulong[]{0x84040000000002UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3789 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_cond_expr3793 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3911 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400020000UL});
		public static readonly BitSet _or_op_in_or_expr3922 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _and_expr_in_or_expr3926 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400020000UL});
		public static readonly BitSet _bit_or_in_and_expr3968 = new BitSet(new ulong[]{0x2UL,0x2000000000020000UL});
		public static readonly BitSet _and_op_in_and_expr3979 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _bit_or_in_and_expr3983 = new BitSet(new ulong[]{0x2UL,0x2000000000020000UL});
		public static readonly BitSet _bit_xor_in_bit_or4014 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _160_in_bit_or4023 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _bit_xor_in_bit_or4027 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4057 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _122_in_bit_xor4066 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _bit_and_in_bit_xor4070 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4100 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_bit_and4109 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4113 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _chain_op_in_chain_list4205 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _infix_expr_in_chain_list4207 = new BitSet(new ulong[]{0x2UL,0x6A20000004000UL,0x1800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4221 = new BitSet(new ulong[]{0x2UL,0x6A20000004000UL,0x1800UL});
		public static readonly BitSet _105_in_cmp_expr4231 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4235 = new BitSet(new ulong[]{0x40000000002UL,0x6A20000004000UL,0x1800UL});
		public static readonly BitSet _ident_in_cmp_expr4241 = new BitSet(new ulong[]{0x40000000000UL,0x2000000000000UL});
		public static readonly BitSet _113_in_cmp_expr4244 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_cmp_expr4246 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033742000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_cmp_expr4248 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_cmp_expr4251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr4320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr4397 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4401 = new BitSet(new ulong[]{0x2UL,0x6A20000004000UL,0x1800UL});
		public static readonly BitSet _chain_list_in_cmp_expr4405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr4496 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr4506 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _shift_expr_in_infix_expr4510 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr4553 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr4562 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _add_expr_in_shift_expr4566 = new BitSet(new ulong[]{0x2UL,0x8080000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr4596 = new BitSet(new ulong[]{0x2UL,0x11000000UL});
		public static readonly BitSet _88_in_add_expr4606 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _mul_expr_in_add_expr4610 = new BitSet(new ulong[]{0x2UL,0x11000000UL});
		public static readonly BitSet _92_in_add_expr4635 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _mul_expr_in_add_expr4639 = new BitSet(new ulong[]{0x2UL,0x11000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4677 = new BitSet(new ulong[]{0x2UL,0x800408000UL});
		public static readonly BitSet _86_in_mul_expr4687 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4691 = new BitSet(new ulong[]{0x2UL,0x800408000UL});
		public static readonly BitSet _99_in_mul_expr4721 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4725 = new BitSet(new ulong[]{0x2UL,0x800408000UL});
		public static readonly BitSet _79_in_mul_expr4755 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4759 = new BitSet(new ulong[]{0x2UL,0x800408000UL});
		public static readonly BitSet _cast_expr_in_selector_expr4802 = new BitSet(new ulong[]{0x2UL,0x500000000UL});
		public static readonly BitSet _96_in_selector_expr4812 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr4816 = new BitSet(new ulong[]{0x2UL,0x500000000UL});
		public static readonly BitSet _98_in_selector_expr4842 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr4847 = new BitSet(new ulong[]{0x2UL,0x500000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4887 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_cast_expr4896 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_cast_expr4898 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_cast_expr4900 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_cast_expr4902 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4964 = new BitSet(new ulong[]{0x84040000000000UL,0x80000033542000UL,0x800018000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_prefix_expr4982 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4080004UL});
		public static readonly BitSet _type_name_in_prefix_expr4984 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_prefix_expr4986 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033742000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_prefix_expr4988 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_prefix_expr4991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list5019 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_expr_list5022 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_expr_list5025 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr5041 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _89_in_suffix_expr5051 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _93_in_suffix_expr5077 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _97_in_suffix_expr5100 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5102 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _95_in_suffix_expr5127 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5129 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _84_in_suffix_expr5154 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033742000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5158 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_suffix_expr5160 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _85_in_suffix_expr5189 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _120_in_suffix_expr5220 = new BitSet(new ulong[]{0x84040000000000UL,0x380000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5224 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_suffix_expr5226 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _121_in_suffix_expr5255 = new BitSet(new ulong[]{0x2UL,0x1000002A2100000UL});
		public static readonly BitSet _NUMBER_in_atom_expr5308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr5313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr5318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_atom_expr5323 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_atom_expr5325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_atom_expr5338 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_atom_expr5342 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _91_in_atom_expr5347 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_in_atom_expr5349 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _85_in_atom_expr5353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _85_in_atom_expr5380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item5411 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix5423 = new BitSet(new ulong[]{0x40000000000UL,0x80000033442000UL,0x800010000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix5425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix5441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix5455 = new BitSet(new ulong[]{0x2UL,0x1000202A2100000UL});
		public static readonly BitSet _89_in_lvalue_suffix5465 = new BitSet(new ulong[]{0x2UL,0x1000202A2100000UL});
		public static readonly BitSet _93_in_lvalue_suffix5493 = new BitSet(new ulong[]{0x2UL,0x1000202A2100000UL});
		public static readonly BitSet _97_in_lvalue_suffix5518 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5520 = new BitSet(new ulong[]{0x2UL,0x1000202A2100000UL});
		public static readonly BitSet _95_in_lvalue_suffix5547 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5549 = new BitSet(new ulong[]{0x2UL,0x1000202A2100000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix5576 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_lvalue_suffix5579 = new BitSet(new ulong[]{0x84040000000000UL,0x180000033742000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5581 = new BitSet(new ulong[]{0x0UL,0x200000UL});
		public static readonly BitSet _85_in_lvalue_suffix5584 = new BitSet(new ulong[]{0x2UL,0x1000202A2100000UL});
		public static readonly BitSet _120_in_lvalue_suffix5613 = new BitSet(new ulong[]{0x84040000000000UL,0x380000033542000UL,0x800018000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5615 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_lvalue_suffix5618 = new BitSet(new ulong[]{0x2UL,0x1000202A2100000UL});
		public static readonly BitSet _ident_in_lvalue_atom5657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_lvalue_atom5662 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom5664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_lvalue5683 = new BitSet(new ulong[]{0x40000000000UL,0x80000033442000UL,0x800010000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5685 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_lvalue5688 = new BitSet(new ulong[]{0x40000000000UL,0x80000033442000UL,0x800010000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5690 = new BitSet(new ulong[]{0x0UL,0x8200000UL});
		public static readonly BitSet _85_in_lvalue5694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue5708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident5719 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _102_in_ident5722 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident5724 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _124_in_infix_func5737 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_infix_func5740 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_infix_func5742 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
