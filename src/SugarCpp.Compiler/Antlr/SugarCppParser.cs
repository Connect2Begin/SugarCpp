//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-29 12:49:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_To=39;
	public const int For_Item_When=40;
	public const int Func_Args=41;
	public const int Func_Def=42;
	public const int Generic_Patameters=43;
	public const int Global_Block=44;
	public const int IDENT=45;
	public const int INDENT=46;
	public const int Ident_List=47;
	public const int Import=48;
	public const int Left_Bracket=49;
	public const int LineComment=50;
	public const int Match_Expr=51;
	public const int Match_Expr_Item=52;
	public const int Match_Tuple=53;
	public const int NEWLINE=54;
	public const int NUMBER=55;
	public const int Namespace=56;
	public const int Right_Bracket=57;
	public const int Root=58;
	public const int SP=59;
	public const int STRING=60;
	public const int Stmt_Block=61;
	public const int Stmt_Defer=62;
	public const int Stmt_Finally=63;
	public const int Stmt_For=64;
	public const int Stmt_If=65;
	public const int Stmt_Loop=66;
	public const int Stmt_Return=67;
	public const int Stmt_Switch=68;
	public const int Stmt_Try=69;
	public const int Stmt_Typedef=70;
	public const int Stmt_Unless=71;
	public const int Stmt_Until=72;
	public const int Stmt_Using=73;
	public const int Stmt_While=74;
	public const int Switch_Item=75;
	public const int Type_Array=76;
	public const int Type_Func=77;
	public const int Type_Ident=78;
	public const int Type_List=79;
	public const int Type_Ref=80;
	public const int Type_Star=81;
	public const int Type_Template=82;
	public const int White_Space=83;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:211:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(211, 1);
		try
		{
			// SugarCpp.g:212:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:212:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(212, 4);
			// SugarCpp.g:212:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:212:4: NEWLINE
					{
					DebugLocation(212, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root581); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(212, 13);
			PushFollow(Follow._global_block_in_root584);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(212, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 212:30: -> ^( Root global_block )
			{
				DebugLocation(212, 33);
				// SugarCpp.g:212:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(212, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:215:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(215, 1);
		try
		{
			// SugarCpp.g:216:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:216:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(216, 4);
			// SugarCpp.g:216:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==91||LA3_0==130||LA3_0==137||(LA3_0>=139 && LA3_0<=140)||LA3_0==144||LA3_0==148||LA3_0==153||LA3_0==156||LA3_0==161||LA3_0==166||LA3_0==169||LA3_0==177))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:216:5: node ( NEWLINE )+
					{
					DebugLocation(216, 5);
					PushFollow(Follow._node_in_global_block606);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(216, 10);
					// SugarCpp.g:216:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:216:10: NEWLINE
							{
							DebugLocation(216, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block608); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 216:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(216, 24);
				// SugarCpp.g:216:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(216, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(216, 39);
				// SugarCpp.g:216:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(216, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:219:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._func_def_in_node631);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:221:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._class_def_in_node636);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:222:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._enum_def_in_node641);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:223:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._global_alloc_in_node646);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:224:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._global_using_in_node651);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:225:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._global_typedef_in_node656);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:226:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._import_def_in_node661);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:227:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._namespace_def_in_node666);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:230:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args678); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:232:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(232, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:233:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				PushFollow(Follow._ident_in_attribute_args688);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:236:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==140))
			{
				alt10 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(237, 4);
				PushFollow(Follow._ident_in_attribute_item699);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(237, 10);
				// SugarCpp.g:237:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==91))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(237, 11);
					char_literal18=(IToken)Match(input,91,Follow._91_in_attribute_item702); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal18);

					DebugLocation(237, 15);
					PushFollow(Follow._attribute_args_in_attribute_item704);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(237, 30);
					// SugarCpp.g:237:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==98))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:31: ',' attribute_args
							{
							DebugLocation(237, 31);
							char_literal20=(IToken)Match(input,98,Follow._98_in_attribute_item707); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal20);

							DebugLocation(237, 35);
							PushFollow(Follow._attribute_args_in_attribute_item709);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(237, 52);
					char_literal22=(IToken)Match(input,92,Follow._92_in_attribute_item713); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 237:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(237, 61);
					// SugarCpp.g:237:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(237, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(237, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(237, 79);
					// SugarCpp.g:237:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(237, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:238:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(238, 4);
				string_literal23=(IToken)Match(input,140,Follow._140_in_attribute_item731); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal23);

				DebugLocation(238, 12);
				// SugarCpp.g:238:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==91))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(238, 13);
					char_literal24=(IToken)Match(input,91,Follow._91_in_attribute_item734); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal24);

					DebugLocation(238, 17);
					PushFollow(Follow._attribute_args_in_attribute_item736);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(238, 32);
					// SugarCpp.g:238:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==98))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:238:33: ',' attribute_args
							{
							DebugLocation(238, 33);
							char_literal26=(IToken)Match(input,98,Follow._98_in_attribute_item739); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal26);

							DebugLocation(238, 37);
							PushFollow(Follow._attribute_args_in_attribute_item741);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(238, 54);
					char_literal28=(IToken)Match(input,92,Follow._92_in_attribute_item745); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 140
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 238:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(238, 63);
					// SugarCpp.g:238:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(238, 75);
					adaptor.AddChild(root_1, stream_140.NextNode());
					DebugLocation(238, 83);
					// SugarCpp.g:238:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(238, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:241:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(241, 1);
		try
		{
			// SugarCpp.g:242:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:242:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(242, 4);
			// SugarCpp.g:242:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==130))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:242:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(242, 5);
					char_literal29=(IToken)Match(input,130,Follow._130_in_attribute770); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_130.Add(char_literal29);

					DebugLocation(242, 9);
					PushFollow(Follow._attribute_item_in_attribute772);
					attribute_item30=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(242, 24);
					// SugarCpp.g:242:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==98))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:242:25: ',' attribute_item
							{
							DebugLocation(242, 25);
							char_literal31=(IToken)Match(input,98,Follow._98_in_attribute775); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal31);

							DebugLocation(242, 29);
							PushFollow(Follow._attribute_item_in_attribute777);
							attribute_item32=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(242, 46);
					char_literal33=(IToken)Match(input,131,Follow._131_in_attribute781); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal33);

					DebugLocation(242, 50);
					// SugarCpp.g:242:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:242:50: NEWLINE
							{
							DebugLocation(242, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute783); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 242:61: -> ( attribute_item )+
			{
				DebugLocation(242, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(242, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:245:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken string_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree string_literal43_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(245, 1);
		try
		{
			// SugarCpp.g:246:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:246:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(246, 4);
			// SugarCpp.g:246:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==130))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:246:4: attribute
				{
				DebugLocation(246, 4);
				PushFollow(Follow._attribute_in_global_alloc802);
				attribute35=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(246, 15);
			PushFollow(Follow._ident_list_in_global_alloc805);
			ident_list36=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(246, 26);
			// SugarCpp.g:246:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==109))
			{
				alt18 = 1;
			}
			else if ((LA18_0==111))
			{
				alt18 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:246:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(246, 28);
				char_literal37=(IToken)Match(input,109,Follow._109_in_global_alloc809); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal37);

				DebugLocation(246, 32);
				PushFollow(Follow._type_name_in_global_alloc811);
				type_name38=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name38.Tree);
				DebugLocation(246, 42);
				// SugarCpp.g:246:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				int alt16=3;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				switch (input.LA(1))
				{
				case 111:
				case 119:
					{
					alt16 = 1;
					}
					break;
				case 91:
					{
					alt16 = 2;
					}
					break;
				case NEWLINE:
					{
					alt16 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:246:44: ( '=' | ':=' ) expr
					{
					DebugLocation(246, 44);
					// SugarCpp.g:246:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==119))
					{
						alt15 = 1;
					}
					else if ((LA15_0==111))
					{
						alt15 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:246:45: '='
						{
						DebugLocation(246, 45);
						char_literal39=(IToken)Match(input,119,Follow._119_in_global_alloc816); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_119.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:246:51: ':='
						{
						DebugLocation(246, 51);
						string_literal40=(IToken)Match(input,111,Follow._111_in_global_alloc820); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(246, 57);
					PushFollow(Follow._expr_in_global_alloc823);
					expr41=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 246:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(246, 65);
						// SugarCpp.g:246:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(246, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(246, 84);
						// SugarCpp.g:246:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(246, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(246, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(246, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(246, 116);
						// SugarCpp.g:246:116: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(246, 118);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(246, 128);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:247:43: bracket_expr_list
					{
					DebugLocation(247, 43);
					PushFollow(Follow._bracket_expr_list_in_global_alloc886);
					bracket_expr_list42=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list42.Tree);


					{
					// AST REWRITE
					// elements: type_name, bracket_expr_list, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 247:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(247, 64);
						// SugarCpp.g:247:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(247, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(247, 85);
						// SugarCpp.g:247:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(247, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(247, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(247, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(247, 117);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:248:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 248:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(248, 20);
						// SugarCpp.g:248:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(248, 39);
						// SugarCpp.g:248:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(248, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(248, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(248, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(248, 71);
						// SugarCpp.g:248:71: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 73);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:250:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(250, 10);
				string_literal43=(IToken)Match(input,111,Follow._111_in_global_alloc962); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(string_literal43);

				DebugLocation(250, 15);
				// SugarCpp.g:250:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:250:16: expr ( ',' expr )*
				{
				DebugLocation(250, 16);
				PushFollow(Follow._expr_in_global_alloc965);
				expr44=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr44.Tree);
				DebugLocation(250, 21);
				// SugarCpp.g:250:21: ( ',' expr )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==98))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:250:22: ',' expr
						{
						DebugLocation(250, 22);
						char_literal45=(IToken)Match(input,98,Follow._98_in_global_alloc968); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal45);

						DebugLocation(250, 26);
						PushFollow(Follow._expr_in_global_alloc970);
						expr46=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr46.Tree);

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				}



				{
				// AST REWRITE
				// elements: attribute, expr, ident_list, 111
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 250:34: -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(250, 37);
					// SugarCpp.g:250:37: ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(250, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_111.NextNode(), root_1);

					DebugLocation(250, 44);
					// SugarCpp.g:250:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(250, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(250, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(250, 66);
					// SugarCpp.g:250:66: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(250, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(250, 78);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(250, 78);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:254:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(254, 1);
		try
		{
			// SugarCpp.g:255:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:255:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(255, 4);
			// SugarCpp.g:255:4: ( attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==130))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:4: attribute
				{
				DebugLocation(255, 4);
				PushFollow(Follow._attribute_in_global_using1011);
				attribute47=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute47.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(255, 15);
			string_literal48=(IToken)Match(input,169,Follow._169_in_global_using1014); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(string_literal48);

			DebugLocation(255, 23);
			// SugarCpp.g:255:23: ( stmt_using_item )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==IDENT||LA20_0==156))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:255:23: stmt_using_item
					{
					DebugLocation(255, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1016);
					stmt_using_item49=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item49.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }



			{
			// AST REWRITE
			// elements: attribute, stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(255, 43);
				// SugarCpp.g:255:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(255, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(255, 56);
				// SugarCpp.g:255:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(255, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(255, 67);
				// SugarCpp.g:255:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(255, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:258:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken char_literal53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name54 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(259, 4);
			// SugarCpp.g:259:4: ( attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==130))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:4: attribute
				{
				DebugLocation(259, 4);
				PushFollow(Follow._attribute_in_global_typedef1040);
				attribute50=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute50.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(259, 15);
			string_literal51=(IToken)Match(input,166,Follow._166_in_global_typedef1043); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_166.Add(string_literal51);

			DebugLocation(259, 22);
			PushFollow(Follow._ident_in_global_typedef1045);
			ident52=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident52.Tree);
			DebugLocation(259, 28);
			char_literal53=(IToken)Match(input,119,Follow._119_in_global_typedef1047); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal53);

			DebugLocation(259, 32);
			PushFollow(Follow._type_name_in_global_typedef1049);
			type_name54=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name54.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(259, 45);
				// SugarCpp.g:259:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(259, 60);
				// SugarCpp.g:259:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(259, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(259, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(259, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:262:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal56 = default(IToken);
		IToken STRING57 = default(IToken);
		IToken NEWLINE58 = default(IToken);
		IToken INDENT59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken STRING61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken DEDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree STRING57_tree = default(CommonTree);
		CommonTree NEWLINE58_tree = default(CommonTree);
		CommonTree INDENT59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree STRING61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree DEDENT63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(262, 1);
		try
		{
			// SugarCpp.g:263:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:263:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(263, 4);
			// SugarCpp.g:263:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==130))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:4: attribute
				{
				DebugLocation(263, 4);
				PushFollow(Follow._attribute_in_import_def1073);
				attribute55=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute55.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(263, 15);
			string_literal56=(IToken)Match(input,148,Follow._148_in_import_def1076); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_148.Add(string_literal56);

			DebugLocation(263, 24);
			// SugarCpp.g:263:24: ( STRING )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==STRING))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:24: STRING
				{
				DebugLocation(263, 24);
				STRING57=(IToken)Match(input,STRING,Follow._STRING_in_import_def1078); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING57);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(263, 32);
			// SugarCpp.g:263:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			try
			{
				alt28 = dfa28.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(263, 33);
				// SugarCpp.g:263:33: ( NEWLINE )+
				int cnt24=0;
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==NEWLINE))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:33: NEWLINE
						{
						DebugLocation(263, 33);
						NEWLINE58=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1082); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE58);


						}
						break;

					default:
						if (cnt24 >= 1)
							goto loop24;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee24 = new EarlyExitException( 24, input );
						DebugRecognitionException(eee24);
						throw eee24;
					}
					cnt24++;
				}
				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(263, 42);
				INDENT59=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1085); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT59);

				DebugLocation(263, 49);
				// SugarCpp.g:263:49: ( NEWLINE )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:49: NEWLINE
						{
						DebugLocation(263, 49);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1087); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(263, 59);
				// SugarCpp.g:263:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==STRING))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:60: STRING ( NEWLINE )+
						{
						DebugLocation(263, 60);
						STRING61=(IToken)Match(input,STRING,Follow._STRING_in_import_def1092); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING61);

						DebugLocation(263, 67);
						// SugarCpp.g:263:67: ( NEWLINE )+
						int cnt26=0;
						try { DebugEnterSubRule(26);
						while (true)
						{
							int alt26=2;
							try { DebugEnterDecision(26, false);
							int LA26_0 = input.LA(1);

							if ((LA26_0==NEWLINE))
							{
								alt26 = 1;
							}


							} finally { DebugExitDecision(26); }
							switch (alt26)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:263:67: NEWLINE
								{
								DebugLocation(263, 67);
								NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1094); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE62);


								}
								break;

							default:
								if (cnt26 >= 1)
									goto loop26;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee26 = new EarlyExitException( 26, input );
								DebugRecognitionException(eee26);
								throw eee26;
							}
							cnt26++;
						}
						loop26:
							;

						} finally { DebugExitSubRule(26); }


						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(263, 78);
				DEDENT63=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1099); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT63);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(263, 90);
				// SugarCpp.g:263:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(263, 99);
				// SugarCpp.g:263:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(263, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(263, 110);
				// SugarCpp.g:263:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(263, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:266:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal65 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal65_tree = default(CommonTree);
		CommonTree char_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(266, 1);
		try
		{
			// SugarCpp.g:267:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:267:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(267, 4);
			// SugarCpp.g:267:4: ( attribute )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==130))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:4: attribute
				{
				DebugLocation(267, 4);
				PushFollow(Follow._attribute_in_enum_def1124);
				attribute64=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(267, 15);
			string_literal65=(IToken)Match(input,144,Follow._144_in_enum_def1127); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_144.Add(string_literal65);

			DebugLocation(267, 22);
			PushFollow(Follow._ident_in_enum_def1129);
			ident66=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident66.Tree);
			DebugLocation(267, 28);
			char_literal67=(IToken)Match(input,119,Follow._119_in_enum_def1131); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal67);

			DebugLocation(267, 32);
			// SugarCpp.g:267:32: ( ident ( '|' ident )* )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==IDENT))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:33: ident ( '|' ident )*
				{
				DebugLocation(267, 33);
				PushFollow(Follow._ident_in_enum_def1134);
				ident68=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident68.Tree);
				DebugLocation(267, 39);
				// SugarCpp.g:267:39: ( '|' ident )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==173))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:40: '|' ident
						{
						DebugLocation(267, 40);
						char_literal69=(IToken)Match(input,173,Follow._173_in_enum_def1137); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_173.Add(char_literal69);

						DebugLocation(267, 44);
						PushFollow(Follow._ident_in_enum_def1139);
						ident70=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident70.Tree);

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(267, 57);
				// SugarCpp.g:267:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(267, 64);
				// SugarCpp.g:267:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(267, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(267, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(267, 81);
				// SugarCpp.g:267:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(267, 94);
				// SugarCpp.g:267:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(267, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:270:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal72 = default(IToken);
		IToken NEWLINE74 = default(IToken);
		IToken INDENT75 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken DEDENT78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal72_tree = default(CommonTree);
		CommonTree NEWLINE74_tree = default(CommonTree);
		CommonTree INDENT75_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree DEDENT78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(270, 1);
		try
		{
			// SugarCpp.g:271:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(271, 4);
			// SugarCpp.g:271:4: ( attribute )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==130))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:4: attribute
				{
				DebugLocation(271, 4);
				PushFollow(Follow._attribute_in_namespace_def1172);
				attribute71=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute71.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(271, 15);
			string_literal72=(IToken)Match(input,156,Follow._156_in_namespace_def1175); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_156.Add(string_literal72);

			DebugLocation(271, 27);
			PushFollow(Follow._ident_in_namespace_def1177);
			ident73=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident73.Tree);
			DebugLocation(271, 33);
			// SugarCpp.g:271:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			try
			{
				alt35 = dfa35.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(271, 34);
				// SugarCpp.g:271:34: ( NEWLINE )+
				int cnt33=0;
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==NEWLINE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:271:34: NEWLINE
						{
						DebugLocation(271, 34);
						NEWLINE74=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1180); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE74);


						}
						break;

					default:
						if (cnt33 >= 1)
							goto loop33;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee33 = new EarlyExitException( 33, input );
						DebugRecognitionException(eee33);
						throw eee33;
					}
					cnt33++;
				}
				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(271, 43);
				INDENT75=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1183); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT75);

				DebugLocation(271, 50);
				// SugarCpp.g:271:50: ( NEWLINE )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:271:50: NEWLINE
						{
						DebugLocation(271, 50);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1185); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(271, 59);
				PushFollow(Follow._global_block_in_namespace_def1188);
				global_block77=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block77.Tree);
				DebugLocation(271, 72);
				DEDENT78=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1190); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT78);


				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 271:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(271, 84);
				// SugarCpp.g:271:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(271, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(271, 96);
				// SugarCpp.g:271:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(271, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(271, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(271, 113);
				// SugarCpp.g:271:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(271, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:274:1: class_def : ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal80 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken NEWLINE87 = default(IToken);
		IToken INDENT88 = default(IToken);
		IToken NEWLINE89 = default(IToken);
		IToken DEDENT91 = default(IToken);
		IToken string_literal92 = default(IToken);
		IToken string_literal93 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken NEWLINE103 = default(IToken);
		IToken INDENT104 = default(IToken);
		IToken NEWLINE105 = default(IToken);
		IToken DEDENT107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal80_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree NEWLINE87_tree = default(CommonTree);
		CommonTree INDENT88_tree = default(CommonTree);
		CommonTree NEWLINE89_tree = default(CommonTree);
		CommonTree DEDENT91_tree = default(CommonTree);
		CommonTree string_literal92_tree = default(CommonTree);
		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree NEWLINE103_tree = default(CommonTree);
		CommonTree INDENT104_tree = default(CommonTree);
		CommonTree NEWLINE105_tree = default(CommonTree);
		CommonTree DEDENT107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(274, 1);
		try
		{
			// SugarCpp.g:275:2: ( ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:5: ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(275, 5);
			// SugarCpp.g:275:5: ( attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==130))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:5: attribute
				{
				DebugLocation(275, 5);
				PushFollow(Follow._attribute_in_class_def1218);
				attribute79=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(275, 16);
			// SugarCpp.g:275:16: ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==139))
			{
				alt50 = 1;
			}
			else if ((LA50_0==137))
			{
				alt50 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:18: 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(275, 18);
				string_literal80=(IToken)Match(input,139,Follow._139_in_class_def1223); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_139.Add(string_literal80);

				DebugLocation(275, 26);
				PushFollow(Follow._ident_in_class_def1225);
				ident81=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident81.Tree);
				DebugLocation(275, 32);
				// SugarCpp.g:275:32: ( generic_parameter )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==113))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:275:33: generic_parameter
					{
					DebugLocation(275, 33);
					PushFollow(Follow._generic_parameter_in_class_def1228);
					generic_parameter82=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter82.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(275, 53);
				// SugarCpp.g:275:53: ( ':' ident ( ',' ident )* )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==109))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:275:54: ':' ident ( ',' ident )*
					{
					DebugLocation(275, 54);
					char_literal83=(IToken)Match(input,109,Follow._109_in_class_def1233); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(char_literal83);

					DebugLocation(275, 58);
					PushFollow(Follow._ident_in_class_def1235);
					ident84=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident84.Tree);
					DebugLocation(275, 64);
					// SugarCpp.g:275:64: ( ',' ident )*
					try { DebugEnterSubRule(38);
					while (true)
					{
						int alt38=2;
						try { DebugEnterDecision(38, false);
						int LA38_0 = input.LA(1);

						if ((LA38_0==98))
						{
							alt38 = 1;
						}


						} finally { DebugExitDecision(38); }
						switch ( alt38 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:275:65: ',' ident
							{
							DebugLocation(275, 65);
							char_literal85=(IToken)Match(input,98,Follow._98_in_class_def1238); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal85);

							DebugLocation(275, 69);
							PushFollow(Follow._ident_in_class_def1240);
							ident86=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident86.Tree);

							}
							break;

						default:
							goto loop38;
						}
					}

					loop38:
						;

					} finally { DebugExitSubRule(38); }


					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(275, 79);
				// SugarCpp.g:275:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				try
				{
					alt42 = dfa42.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:275:80: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(275, 80);
					// SugarCpp.g:275:80: ( NEWLINE )+
					int cnt40=0;
					try { DebugEnterSubRule(40);
					while (true)
					{
						int alt40=2;
						try { DebugEnterDecision(40, false);
						int LA40_0 = input.LA(1);

						if ((LA40_0==NEWLINE))
						{
							alt40 = 1;
						}


						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:275:80: NEWLINE
							{
							DebugLocation(275, 80);
							NEWLINE87=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1247); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE87);


							}
							break;

						default:
							if (cnt40 >= 1)
								goto loop40;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee40 = new EarlyExitException( 40, input );
							DebugRecognitionException(eee40);
							throw eee40;
						}
						cnt40++;
					}
					loop40:
						;

					} finally { DebugExitSubRule(40); }

					DebugLocation(275, 89);
					INDENT88=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1250); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT88);

					DebugLocation(275, 96);
					// SugarCpp.g:275:96: ( NEWLINE )*
					try { DebugEnterSubRule(41);
					while (true)
					{
						int alt41=2;
						try { DebugEnterDecision(41, false);
						int LA41_0 = input.LA(1);

						if ((LA41_0==NEWLINE))
						{
							alt41 = 1;
						}


						} finally { DebugExitDecision(41); }
						switch ( alt41 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:275:96: NEWLINE
							{
							DebugLocation(275, 96);
							NEWLINE89=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1252); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE89);


							}
							break;

						default:
							goto loop41;
						}
					}

					loop41:
						;

					} finally { DebugExitSubRule(41); }

					DebugLocation(275, 105);
					PushFollow(Follow._global_block_in_class_def1255);
					global_block90=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block90.Tree);
					DebugLocation(275, 118);
					DEDENT91=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1257); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT91);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }



				{
				// AST REWRITE
				// elements: ident, ident, generic_parameter, attribute, global_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 275:127: -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(275, 130);
					// SugarCpp.g:275:130: ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(275, 132);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(275, 138);
					// SugarCpp.g:275:138: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(275, 138);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(275, 149);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(275, 155);
					// SugarCpp.g:275:155: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(275, 155);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(275, 174);
					// SugarCpp.g:275:174: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(275, 175);
						// SugarCpp.g:275:175: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(275, 177);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(275, 188);
						// SugarCpp.g:275:188: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(275, 188);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(275, 198);
					// SugarCpp.g:275:198: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(275, 198);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:276:12: 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(276, 12);
				string_literal92=(IToken)Match(input,137,Follow._137_in_class_def1299); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_137.Add(string_literal92);

				DebugLocation(276, 19);
				string_literal93=(IToken)Match(input,139,Follow._139_in_class_def1301); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_139.Add(string_literal93);

				DebugLocation(276, 27);
				PushFollow(Follow._ident_in_class_def1303);
				ident94=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident94.Tree);
				DebugLocation(276, 33);
				// SugarCpp.g:276:33: ( generic_parameter )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==113))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:34: generic_parameter
					{
					DebugLocation(276, 34);
					PushFollow(Follow._generic_parameter_in_class_def1306);
					generic_parameter95=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter95.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(276, 54);
				// SugarCpp.g:276:54: ( '(' func_args ')' )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==91))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:55: '(' func_args ')'
					{
					DebugLocation(276, 55);
					char_literal96=(IToken)Match(input,91,Follow._91_in_class_def1311); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal96);

					DebugLocation(276, 59);
					PushFollow(Follow._func_args_in_class_def1313);
					func_args97=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args97.Tree);
					DebugLocation(276, 69);
					char_literal98=(IToken)Match(input,92,Follow._92_in_class_def1315); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal98);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(276, 75);
				// SugarCpp.g:276:75: ( ':' ident ( ',' ident )* )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==109))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:76: ':' ident ( ',' ident )*
					{
					DebugLocation(276, 76);
					char_literal99=(IToken)Match(input,109,Follow._109_in_class_def1320); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(char_literal99);

					DebugLocation(276, 80);
					PushFollow(Follow._ident_in_class_def1322);
					ident100=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident100.Tree);
					DebugLocation(276, 86);
					// SugarCpp.g:276:86: ( ',' ident )*
					try { DebugEnterSubRule(45);
					while (true)
					{
						int alt45=2;
						try { DebugEnterDecision(45, false);
						int LA45_0 = input.LA(1);

						if ((LA45_0==98))
						{
							alt45 = 1;
						}


						} finally { DebugExitDecision(45); }
						switch ( alt45 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:276:87: ',' ident
							{
							DebugLocation(276, 87);
							char_literal101=(IToken)Match(input,98,Follow._98_in_class_def1325); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal101);

							DebugLocation(276, 91);
							PushFollow(Follow._ident_in_class_def1327);
							ident102=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident102.Tree);

							}
							break;

						default:
							goto loop45;
						}
					}

					loop45:
						;

					} finally { DebugExitSubRule(45); }


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(276, 101);
				// SugarCpp.g:276:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				try
				{
					alt49 = dfa49.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:102: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(276, 102);
					// SugarCpp.g:276:102: ( NEWLINE )+
					int cnt47=0;
					try { DebugEnterSubRule(47);
					while (true)
					{
						int alt47=2;
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==NEWLINE))
						{
							alt47 = 1;
						}


						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:276:102: NEWLINE
							{
							DebugLocation(276, 102);
							NEWLINE103=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1334); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE103);


							}
							break;

						default:
							if (cnt47 >= 1)
								goto loop47;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee47 = new EarlyExitException( 47, input );
							DebugRecognitionException(eee47);
							throw eee47;
						}
						cnt47++;
					}
					loop47:
						;

					} finally { DebugExitSubRule(47); }

					DebugLocation(276, 111);
					INDENT104=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1337); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT104);

					DebugLocation(276, 118);
					// SugarCpp.g:276:118: ( NEWLINE )*
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==NEWLINE))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch ( alt48 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:276:118: NEWLINE
							{
							DebugLocation(276, 118);
							NEWLINE105=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1339); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE105);


							}
							break;

						default:
							goto loop48;
						}
					}

					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(276, 127);
					PushFollow(Follow._global_block_in_class_def1342);
					global_block106=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block106.Tree);
					DebugLocation(276, 140);
					DEDENT107=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1344); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT107);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }



				{
				// AST REWRITE
				// elements: ident, 137, generic_parameter, ident, attribute, func_args, global_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 276:149: -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(276, 152);
					// SugarCpp.g:276:152: ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(276, 154);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(276, 160);
					adaptor.AddChild(root_1, stream_137.NextNode());
					DebugLocation(276, 167);
					// SugarCpp.g:276:167: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(276, 167);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(276, 178);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(276, 184);
					// SugarCpp.g:276:184: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(276, 184);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(276, 203);
					// SugarCpp.g:276:203: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(276, 203);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(276, 214);
					// SugarCpp.g:276:214: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(276, 215);
						// SugarCpp.g:276:215: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(276, 217);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(276, 228);
						// SugarCpp.g:276:228: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(276, 228);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(276, 238);
					// SugarCpp.g:276:238: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(276, 238);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:280:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: type_name ( ',' type_name )*
			{
			DebugLocation(281, 4);
			PushFollow(Follow._type_name_in_type_list1397);
			type_name108=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name108.Tree);
			DebugLocation(281, 14);
			// SugarCpp.g:281:14: ( ',' type_name )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==98))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:15: ',' type_name
					{
					DebugLocation(281, 15);
					char_literal109=(IToken)Match(input,98,Follow._98_in_type_list1400); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal109);

					DebugLocation(281, 19);
					PushFollow(Follow._type_name_in_type_list1402);
					type_name110=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name110.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 281:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(281, 34);
				// SugarCpp.g:281:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(281, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(281, 46);
				// SugarCpp.g:281:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(281, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:284:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal115 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken string_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree string_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==140||LA56_0==153||LA56_0==161))
			{
				alt56 = 1;
			}
			else if ((LA56_0==91))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(285, 4);
				PushFollow(Follow._type_single_in_type_name1424);
				type_single111=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single111.Tree);
				DebugLocation(285, 16);
				// SugarCpp.g:285:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==103))
				{
					alt53 = 1;
				}
				else if ((LA53_0==DEDENT||(LA53_0>=IDENT && LA53_0<=INDENT)||LA53_0==NEWLINE||(LA53_0>=91 && LA53_0<=92)||LA53_0==98||(LA53_0>=111 && LA53_0<=112)||LA53_0==119||(LA53_0>=122 && LA53_0<=123)||LA53_0==131||LA53_0==136||LA53_0==142||(LA53_0>=146 && LA53_0<=147)||LA53_0==149||(LA53_0>=163 && LA53_0<=164)||(LA53_0>=167 && LA53_0<=168)||(LA53_0>=171 && LA53_0<=172)||LA53_0==177))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:285:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(285, 18);
					string_literal112=(IToken)Match(input,103,Follow._103_in_type_name1428); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal112);

					DebugLocation(285, 23);
					// SugarCpp.g:285:23: ( type_name | '(' ')' )
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if ((LA52_0==IDENT||LA52_0==140||LA52_0==153||LA52_0==161))
					{
						alt52 = 1;
					}
					else if ((LA52_0==91))
					{
						int LA52_2 = input.LA(2);

						if ((LA52_2==92))
						{
							int LA52_3 = input.LA(3);

							if ((LA52_3==103))
							{
								alt52 = 1;
							}
							else if ((LA52_3==DEDENT||(LA52_3>=IDENT && LA52_3<=INDENT)||LA52_3==NEWLINE||(LA52_3>=91 && LA52_3<=92)||LA52_3==98||(LA52_3>=111 && LA52_3<=112)||LA52_3==119||(LA52_3>=122 && LA52_3<=123)||LA52_3==131||LA52_3==136||LA52_3==142||(LA52_3>=146 && LA52_3<=147)||LA52_3==149||(LA52_3>=163 && LA52_3<=164)||(LA52_3>=167 && LA52_3<=168)||(LA52_3>=171 && LA52_3<=172)||LA52_3==177))
							{
								alt52 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 52, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA52_2==IDENT||LA52_2==91||LA52_2==140||LA52_2==153||LA52_2==161))
						{
							alt52 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 52, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:285:24: type_name
						{
						DebugLocation(285, 24);
						PushFollow(Follow._type_name_in_type_name1431);
						type_name113=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name113.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:285:36: '(' ')'
						{
						DebugLocation(285, 36);
						char_literal114=(IToken)Match(input,91,Follow._91_in_type_name1435); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_91.Add(char_literal114);

						DebugLocation(285, 40);
						char_literal115=(IToken)Match(input,92,Follow._92_in_type_name1437); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }



					{
					// AST REWRITE
					// elements: type_name, type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 285:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(285, 48);
						// SugarCpp.g:285:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(285, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(285, 60);
						// SugarCpp.g:285:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(285, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(285, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(285, 85);
						// SugarCpp.g:285:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(285, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:286:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 286:9: -> type_single
					{
						DebugLocation(286, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:288:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(288, 4);
				char_literal116=(IToken)Match(input,91,Follow._91_in_type_name1478); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal116);

				DebugLocation(288, 8);
				// SugarCpp.g:288:8: ( type_list )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==IDENT||LA54_0==91||LA54_0==140||LA54_0==153||LA54_0==161))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:288:8: type_list
					{
					DebugLocation(288, 8);
					PushFollow(Follow._type_list_in_type_name1480);
					type_list117=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list117.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(288, 19);
				char_literal118=(IToken)Match(input,92,Follow._92_in_type_name1483); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal118);

				DebugLocation(288, 23);
				string_literal119=(IToken)Match(input,103,Follow._103_in_type_name1485); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(string_literal119);

				DebugLocation(288, 28);
				// SugarCpp.g:288:28: ( type_name | '(' ')' )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==140||LA55_0==153||LA55_0==161))
				{
					alt55 = 1;
				}
				else if ((LA55_0==91))
				{
					int LA55_2 = input.LA(2);

					if ((LA55_2==92))
					{
						int LA55_3 = input.LA(3);

						if ((LA55_3==103))
						{
							alt55 = 1;
						}
						else if ((LA55_3==DEDENT||(LA55_3>=IDENT && LA55_3<=INDENT)||LA55_3==NEWLINE||(LA55_3>=91 && LA55_3<=92)||LA55_3==98||(LA55_3>=111 && LA55_3<=112)||LA55_3==119||(LA55_3>=122 && LA55_3<=123)||LA55_3==131||LA55_3==136||LA55_3==142||(LA55_3>=146 && LA55_3<=147)||LA55_3==149||(LA55_3>=163 && LA55_3<=164)||(LA55_3>=167 && LA55_3<=168)||(LA55_3>=171 && LA55_3<=172)||LA55_3==177))
						{
							alt55 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 55, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA55_2==IDENT||LA55_2==91||LA55_2==140||LA55_2==153||LA55_2==161))
					{
						alt55 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 55, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:288:29: type_name
					{
					DebugLocation(288, 29);
					PushFollow(Follow._type_name_in_type_name1488);
					type_name120=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name120.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:288:41: '(' ')'
					{
					DebugLocation(288, 41);
					char_literal121=(IToken)Match(input,91,Follow._91_in_type_name1492); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal121);

					DebugLocation(288, 45);
					char_literal122=(IToken)Match(input,92,Follow._92_in_type_name1494); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal122);


					}
					break;

				}
				} finally { DebugExitSubRule(55); }



				{
				// AST REWRITE
				// elements: type_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 288:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(288, 53);
					// SugarCpp.g:288:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(288, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(288, 65);
					// SugarCpp.g:288:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(288, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(288, 76);
					// SugarCpp.g:288:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(288, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:291:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(291, 1);
		try
		{
			// SugarCpp.g:292:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:292:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(292, 4);
			PushFollow(Follow._type_star_in_type_single1518);
			type_star123=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star123.Tree);
			DebugLocation(292, 14);
			// SugarCpp.g:292:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt60=3;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case 89:
				{
				alt60 = 1;
				}
				break;
			case 130:
				{
				alt60 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case INDENT:
			case NEWLINE:
			case 91:
			case 92:
			case 98:
			case 103:
			case 111:
			case 112:
			case 119:
			case 122:
			case 123:
			case 131:
			case 136:
			case 142:
			case 146:
			case 147:
			case 149:
			case 163:
			case 164:
			case 167:
			case 168:
			case 171:
			case 172:
			case 177:
				{
				alt60 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:292:16: '&'
				{
				DebugLocation(292, 16);
				char_literal124=(IToken)Match(input,89,Follow._89_in_type_single1522); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal124);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 292:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(292, 23);
					// SugarCpp.g:292:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(292, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(292, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:293:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(293, 7);
				char_literal125=(IToken)Match(input,130,Follow._130_in_type_single1538); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal125);

				DebugLocation(293, 11);
				// SugarCpp.g:293:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==IDENT||LA59_0==NUMBER||LA59_0==STRING||LA59_0==84||LA59_0==89||LA59_0==91||LA59_0==93||(LA59_0>=95 && LA59_0<=96)||(LA59_0>=99 && LA59_0<=100)||(LA59_0>=129 && LA59_0<=130)||LA59_0==152||LA59_0==155||(LA59_0>=157 && LA59_0<=158)||LA59_0==177))
				{
					alt59 = 1;
				}
				else if ((LA59_0==98||LA59_0==131))
				{
					alt59 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:293:13: expr ( ',' expr )* ']'
					{
					DebugLocation(293, 13);
					PushFollow(Follow._expr_in_type_single1542);
					expr126=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr126.Tree);
					DebugLocation(293, 18);
					// SugarCpp.g:293:18: ( ',' expr )*
					try { DebugEnterSubRule(57);
					while (true)
					{
						int alt57=2;
						try { DebugEnterDecision(57, false);
						int LA57_0 = input.LA(1);

						if ((LA57_0==98))
						{
							alt57 = 1;
						}


						} finally { DebugExitDecision(57); }
						switch ( alt57 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:293:19: ',' expr
							{
							DebugLocation(293, 19);
							char_literal127=(IToken)Match(input,98,Follow._98_in_type_single1545); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal127);

							DebugLocation(293, 23);
							PushFollow(Follow._expr_in_type_single1547);
							expr128=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr128.Tree);

							}
							break;

						default:
							goto loop57;
						}
					}

					loop57:
						;

					} finally { DebugExitSubRule(57); }

					DebugLocation(293, 30);
					char_literal129=(IToken)Match(input,131,Follow._131_in_type_single1551); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal129);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 293:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(293, 37);
						// SugarCpp.g:293:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(293, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(293, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(293, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(293, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:294:13: ( ',' )* ']'
					{
					DebugLocation(294, 13);
					// SugarCpp.g:294:13: ( ',' )*
					try { DebugEnterSubRule(58);
					while (true)
					{
						int alt58=2;
						try { DebugEnterDecision(58, false);
						int LA58_0 = input.LA(1);

						if ((LA58_0==98))
						{
							alt58 = 1;
						}


						} finally { DebugExitDecision(58); }
						switch ( alt58 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:294:13: ','
							{
							DebugLocation(294, 13);
							char_literal130=(IToken)Match(input,98,Follow._98_in_type_single1576); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal130);


							}
							break;

						default:
							goto loop58;
						}
					}

					loop58:
						;

					} finally { DebugExitSubRule(58); }

					DebugLocation(294, 18);
					char_literal131=(IToken)Match(input,131,Follow._131_in_type_single1579); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal131);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 294:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(294, 25);
						// SugarCpp.g:294:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(294, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(294, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(294, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(294, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:296:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:7: -> type_star
				{
					DebugLocation(296, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:300:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(300, 1);
		try
		{
			// SugarCpp.g:301:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:301:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(301, 4);
			PushFollow(Follow._type_star_in_type_no_array1626);
			type_star132=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star132.Tree);
			DebugLocation(301, 14);
			// SugarCpp.g:301:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==89))
			{
				alt61 = 1;
			}
			else if ((LA61_0==91||LA61_0==130))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:301:16: '&'
				{
				DebugLocation(301, 16);
				char_literal133=(IToken)Match(input,89,Follow._89_in_type_no_array1630); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal133);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 301:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(301, 23);
					// SugarCpp.g:301:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(301, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(301, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:302:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:7: -> type_star
				{
					DebugLocation(302, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:306:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(306, 1);
		try
		{
			// SugarCpp.g:307:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:307:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(307, 4);
			PushFollow(Follow._type_template_type_in_type_star1665);
			type_template_type134=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type134.Tree);
			DebugLocation(307, 23);
			// SugarCpp.g:307:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==93))
			{
				alt63 = 1;
			}
			else if ((LA63_0==DEDENT||(LA63_0>=IDENT && LA63_0<=INDENT)||LA63_0==NEWLINE||LA63_0==89||(LA63_0>=91 && LA63_0<=92)||LA63_0==98||LA63_0==103||(LA63_0>=111 && LA63_0<=112)||LA63_0==119||(LA63_0>=122 && LA63_0<=123)||(LA63_0>=130 && LA63_0<=131)||LA63_0==136||LA63_0==142||(LA63_0>=146 && LA63_0<=147)||LA63_0==149||(LA63_0>=163 && LA63_0<=164)||(LA63_0>=167 && LA63_0<=168)||(LA63_0>=171 && LA63_0<=172)||LA63_0==177))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:307:25: ( '*' )+
				{
				DebugLocation(307, 25);
				// SugarCpp.g:307:25: ( '*' )+
				int cnt62=0;
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_0 = input.LA(1);

					if ((LA62_0==93))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:307:25: '*'
						{
						DebugLocation(307, 25);
						char_literal135=(IToken)Match(input,93,Follow._93_in_type_star1669); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal135);


						}
						break;

					default:
						if (cnt62 >= 1)
							goto loop62;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee62 = new EarlyExitException( 62, input );
						DebugRecognitionException(eee62);
						throw eee62;
					}
					cnt62++;
				}
				loop62:
					;

				} finally { DebugExitSubRule(62); }



				{
				// AST REWRITE
				// elements: 93, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 307:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(307, 33);
					// SugarCpp.g:307:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(307, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(307, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(307, 64);
					if (!(stream_93.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_93.HasNext )
					{
						DebugLocation(307, 64);
						adaptor.AddChild(root_1, stream_93.NextNode());

					}
					stream_93.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:308:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 308:10: -> type_template_type
				{
					DebugLocation(308, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:312:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal137 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(312, 1);
		try
		{
			// SugarCpp.g:313:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:313:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(313, 4);
			PushFollow(Follow._type_ident_in_type_template_type1715);
			type_ident136=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident136.Tree);
			DebugLocation(313, 15);
			// SugarCpp.g:313:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==113))
			{
				alt66 = 1;
			}
			else if ((LA66_0==DEDENT||(LA66_0>=IDENT && LA66_0<=INDENT)||LA66_0==NEWLINE||LA66_0==89||(LA66_0>=91 && LA66_0<=93)||LA66_0==98||LA66_0==103||(LA66_0>=111 && LA66_0<=112)||LA66_0==119||(LA66_0>=122 && LA66_0<=123)||(LA66_0>=130 && LA66_0<=131)||LA66_0==136||LA66_0==142||(LA66_0>=146 && LA66_0<=147)||LA66_0==149||(LA66_0>=163 && LA66_0<=164)||(LA66_0>=167 && LA66_0<=168)||(LA66_0>=171 && LA66_0<=172)||LA66_0==177))
			{
				alt66 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:313:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(313, 17);
				char_literal137=(IToken)Match(input,113,Follow._113_in_type_template_type1719); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(char_literal137);

				DebugLocation(313, 21);
				// SugarCpp.g:313:21: ( type_name ( ',' type_name )* )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==IDENT||LA65_0==91||LA65_0==140||LA65_0==153||LA65_0==161))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:313:22: type_name ( ',' type_name )*
					{
					DebugLocation(313, 22);
					PushFollow(Follow._type_name_in_type_template_type1722);
					type_name138=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name138.Tree);
					DebugLocation(313, 32);
					// SugarCpp.g:313:32: ( ',' type_name )*
					try { DebugEnterSubRule(64);
					while (true)
					{
						int alt64=2;
						try { DebugEnterDecision(64, false);
						int LA64_0 = input.LA(1);

						if ((LA64_0==98))
						{
							alt64 = 1;
						}


						} finally { DebugExitDecision(64); }
						switch ( alt64 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:313:33: ',' type_name
							{
							DebugLocation(313, 33);
							char_literal139=(IToken)Match(input,98,Follow._98_in_type_template_type1725); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal139);

							DebugLocation(313, 37);
							PushFollow(Follow._type_name_in_type_template_type1727);
							type_name140=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name140.Tree);

							}
							break;

						default:
							goto loop64;
						}
					}

					loop64:
						;

					} finally { DebugExitSubRule(64); }


					}
					break;

				}
				} finally { DebugExitSubRule(65); }

				DebugLocation(313, 51);
				char_literal141=(IToken)Match(input,123,Follow._123_in_type_template_type1733); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal141);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 313:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(313, 58);
					// SugarCpp.g:313:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(313, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(313, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(313, 85);
					// SugarCpp.g:313:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(313, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:314:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:8: -> type_ident
				{
					DebugLocation(314, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(316, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:318:1: type_ident : ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal142 = default(IToken);
		IToken string_literal143 = default(IToken);
		IToken string_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal142_tree = default(CommonTree);
		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree string_literal144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(318, 1);
		try
		{
			// SugarCpp.g:319:2: ( ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:319:4: ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(319, 4);
			// SugarCpp.g:319:4: ( 'const' )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==140))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:319:4: 'const'
				{
				DebugLocation(319, 4);
				string_literal142=(IToken)Match(input,140,Follow._140_in_type_ident1773); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal142);


				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(319, 13);
			// SugarCpp.g:319:13: ( 'struct' )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==161))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:319:13: 'struct'
				{
				DebugLocation(319, 13);
				string_literal143=(IToken)Match(input,161,Follow._161_in_type_ident1776); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_161.Add(string_literal143);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(319, 23);
			// SugarCpp.g:319:23: ( 'long' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==153))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:319:23: 'long'
				{
				DebugLocation(319, 23);
				string_literal144=(IToken)Match(input,153,Follow._153_in_type_ident1779); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_153.Add(string_literal144);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(319, 31);
			PushFollow(Follow._ident_in_type_ident1782);
			ident145=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident145.Tree);


			{
			// AST REWRITE
			// elements: 153, 161, ident, 140
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 319:37: -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(319, 40);
				// SugarCpp.g:319:40: ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(319, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(319, 53);
				// SugarCpp.g:319:53: ( 'const' )?
				if (stream_140.HasNext)
				{
					DebugLocation(319, 53);
					adaptor.AddChild(root_1, stream_140.NextNode());

				}
				stream_140.Reset();
				DebugLocation(319, 62);
				// SugarCpp.g:319:62: ( 'struct' )?
				if (stream_161.HasNext)
				{
					DebugLocation(319, 62);
					adaptor.AddChild(root_1, stream_161.NextNode());

				}
				stream_161.Reset();
				DebugLocation(319, 72);
				// SugarCpp.g:319:72: ( 'long' )?
				if (stream_153.HasNext)
				{
					DebugLocation(319, 72);
					adaptor.AddChild(root_1, stream_153.NextNode());

				}
				stream_153.Reset();
				DebugLocation(319, 80);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:322:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(322, 1);
		try
		{
			// SugarCpp.g:323:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: ident ( ',' ident )*
			{
			DebugLocation(323, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1810);
			ident146=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident146.Tree);
			DebugLocation(323, 10);
			// SugarCpp.g:323:10: ( ',' ident )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==98))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:323:11: ',' ident
					{
					DebugLocation(323, 11);
					char_literal147=(IToken)Match(input,98,Follow._98_in_generic_parameter_inside1813); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal147);

					DebugLocation(323, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1815);
					ident148=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident148.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(323, 26);
				// SugarCpp.g:323:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(323, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(323, 47);
				// SugarCpp.g:323:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(323, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:326:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal149_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(326, 1);
		try
		{
			// SugarCpp.g:327:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:327:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(327, 4);
			char_literal149=(IToken)Match(input,113,Follow._113_in_generic_parameter1837); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_113.Add(char_literal149);

			DebugLocation(327, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1839);
			generic_parameter_inside150=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside150.Tree);
			DebugLocation(327, 33);
			char_literal151=(IToken)Match(input,123,Follow._123_in_generic_parameter1841); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(char_literal151);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:37: -> generic_parameter_inside
			{
				DebugLocation(327, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:330:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(330, 1);
		try
		{
			// SugarCpp.g:331:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:331:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(331, 4);
			PushFollow(Follow._func_args_item_in_func_args1856);
			func_args_item152=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item152.Tree);
			DebugLocation(331, 19);
			// SugarCpp.g:331:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==98))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:331:20: ',' func_args_item
					{
					DebugLocation(331, 20);
					char_literal153=(IToken)Match(input,98,Follow._98_in_func_args1859); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal153);

					DebugLocation(331, 24);
					PushFollow(Follow._func_args_item_in_func_args1861);
					func_args_item154=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item154.Tree);

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(331, 44);
				// SugarCpp.g:331:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(331, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(331, 56);
				// SugarCpp.g:331:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(331, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:334:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken string_literal159 = default(IToken);
		IToken string_literal162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree string_literal162_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==IDENT))
			{
				alt74 = 1;
			}
			else if ((LA74_0==111))
			{
				alt74 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:335:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(335, 4);
				PushFollow(Follow._ident_list_in_func_args_item1883);
				ident_list155=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list155.Tree);
				DebugLocation(335, 15);
				char_literal156=(IToken)Match(input,109,Follow._109_in_func_args_item1885); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal156);

				DebugLocation(335, 19);
				PushFollow(Follow._type_name_in_func_args_item1887);
				type_name157=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name157.Tree);
				DebugLocation(335, 29);
				// SugarCpp.g:335:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt73=3;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				switch (input.LA(1))
				{
				case 111:
				case 119:
					{
					alt73 = 1;
					}
					break;
				case 91:
					{
					alt73 = 2;
					}
					break;
				case 92:
				case 98:
					{
					alt73 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:335:31: ( '=' | ':=' ) expr
					{
					DebugLocation(335, 31);
					// SugarCpp.g:335:31: ( '=' | ':=' )
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if ((LA72_0==119))
					{
						alt72 = 1;
					}
					else if ((LA72_0==111))
					{
						alt72 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:335:32: '='
						{
						DebugLocation(335, 32);
						char_literal158=(IToken)Match(input,119,Follow._119_in_func_args_item1892); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_119.Add(char_literal158);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:335:38: ':='
						{
						DebugLocation(335, 38);
						string_literal159=(IToken)Match(input,111,Follow._111_in_func_args_item1896); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(string_literal159);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(335, 44);
					PushFollow(Follow._expr_in_func_args_item1899);
					expr160=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr160.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 335:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(335, 53);
						// SugarCpp.g:335:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(335, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(335, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(335, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(335, 93);
						// SugarCpp.g:335:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(335, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(335, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:336:33: bracket_expr_list
					{
					DebugLocation(336, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item1950);
					bracket_expr_list161=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list161.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 336:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(336, 55);
						// SugarCpp.g:336:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(336, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(336, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(336, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(336, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:337:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 337:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(337, 18);
						// SugarCpp.g:337:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(337, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(337, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(337, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(337, 58);
						// SugarCpp.g:337:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(337, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:339:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 8);
				string_literal162=(IToken)Match(input,111,Follow._111_in_func_args_item2010); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal162_tree = (CommonTree)adaptor.Create(string_literal162);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal162_tree, root_0);
				}
				DebugLocation(339, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2014);
				modify_expr163=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr163.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:342:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set164 = default(IToken);

		CommonTree set164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(342, 1);
		try
		{
			// SugarCpp.g:343:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(343, 2);

			set164=(IToken)input.LT(1);
			if (input.LA(1)==93||input.LA(1)==95||input.LA(1)==99||input.LA(1)==107)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set164));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:346:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT))
			{
				alt75 = 1;
			}
			else if ((LA75_0==91))
			{
				alt75 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:347:4: ident
				{
				DebugLocation(347, 4);
				PushFollow(Follow._ident_in_func_name2048);
				ident165=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident165.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 347:10: -> ident
				{
					DebugLocation(347, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:348:4: '(' operator ')'
				{
				DebugLocation(348, 4);
				char_literal166=(IToken)Match(input,91,Follow._91_in_func_name2057); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal166);

				DebugLocation(348, 8);
				PushFollow(Follow._operator_in_func_name2059);
				operator167=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator167.Tree);
				DebugLocation(348, 17);
				char_literal168=(IToken)Match(input,92,Follow._92_in_func_name2061); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal168);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:21: -> operator
				{
					DebugLocation(348, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:351:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 27);
		TraceIn("func_type", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(351, 1);
		try
		{
			// SugarCpp.g:352:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:352:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(352, 4);
			PushFollow(Follow._type_name_in_func_type2076);
			type_name169=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name169.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 27);
			LeaveRule("func_type", 27);
			LeaveRule_func_type();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:355:1: func_def : ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 28);
		TraceIn("func_def", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal172 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken char_literal177 = default(IToken);
		IToken NEWLINE178 = default(IToken);
		IToken char_literal180 = default(IToken);
		IToken NEWLINE182 = default(IToken);
		IToken INDENT183 = default(IToken);
		IToken NEWLINE184 = default(IToken);
		IToken NEWLINE186 = default(IToken);
		IToken DEDENT187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item185 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree NEWLINE178_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree NEWLINE182_tree = default(CommonTree);
		CommonTree INDENT183_tree = default(CommonTree);
		CommonTree NEWLINE184_tree = default(CommonTree);
		CommonTree NEWLINE186_tree = default(CommonTree);
		CommonTree DEDENT187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(355, 4);
		try
		{
			// SugarCpp.g:356:2: ( ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:356:4: ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			{
			DebugLocation(356, 4);
			// SugarCpp.g:356:4: ( attribute )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==130))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:4: attribute
				{
				DebugLocation(356, 4);
				PushFollow(Follow._attribute_in_func_def2087);
				attribute170=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute170.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(356, 15);
			// SugarCpp.g:356:15: ( func_type )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			try
			{
				alt77 = dfa77.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:15: func_type
				{
				DebugLocation(356, 15);
				PushFollow(Follow._func_type_in_func_def2090);
				func_type171=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type171.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(356, 26);
			// SugarCpp.g:356:26: ( '~' )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==177))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:26: '~'
				{
				DebugLocation(356, 26);
				char_literal172=(IToken)Match(input,177,Follow._177_in_func_def2093); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_177.Add(char_literal172);


				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(356, 31);
			PushFollow(Follow._func_name_in_func_def2096);
			func_name173=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name173.Tree);
			DebugLocation(356, 41);
			// SugarCpp.g:356:41: ( generic_parameter )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==113))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:41: generic_parameter
				{
				DebugLocation(356, 41);
				PushFollow(Follow._generic_parameter_in_func_def2098);
				generic_parameter174=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter174.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(356, 60);
			char_literal175=(IToken)Match(input,91,Follow._91_in_func_def2101); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal175);

			DebugLocation(356, 64);
			// SugarCpp.g:356:64: ( func_args )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==IDENT||LA80_0==111))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:64: func_args
				{
				DebugLocation(356, 64);
				PushFollow(Follow._func_args_in_func_def2103);
				func_args176=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args176.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(356, 75);
			char_literal177=(IToken)Match(input,92,Follow._92_in_func_def2106); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal177);

			DebugLocation(356, 79);
			// SugarCpp.g:356:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==NEWLINE))
			{
				alt87 = 1;
			}
			else if ((LA87_0==119))
			{
				alt87 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:81: ( NEWLINE )+ stmt_block
				{
				DebugLocation(356, 81);
				// SugarCpp.g:356:81: ( NEWLINE )+
				int cnt81=0;
				try { DebugEnterSubRule(81);
				while (true)
				{
					int alt81=2;
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==NEWLINE))
					{
						alt81 = 1;
					}


					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:81: NEWLINE
						{
						DebugLocation(356, 81);
						NEWLINE178=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2110); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE178);


						}
						break;

					default:
						if (cnt81 >= 1)
							goto loop81;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee81 = new EarlyExitException( 81, input );
						DebugRecognitionException(eee81);
						throw eee81;
					}
					cnt81++;
				}
				loop81:
					;

				} finally { DebugExitSubRule(81); }

				DebugLocation(356, 90);
				PushFollow(Follow._stmt_block_in_func_def2113);
				stmt_block179=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block179.Tree);


				{
				// AST REWRITE
				// elements: func_args, generic_parameter, func_type, attribute, 177, stmt_block, func_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:101: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(356, 104);
					// SugarCpp.g:356:104: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(356, 106);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(356, 115);
					// SugarCpp.g:356:115: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(356, 115);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(356, 126);
					// SugarCpp.g:356:126: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(356, 126);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(356, 137);
					// SugarCpp.g:356:137: ( '~' )?
					if (stream_177.HasNext)
					{
						DebugLocation(356, 137);
						adaptor.AddChild(root_1, stream_177.NextNode());

					}
					stream_177.Reset();
					DebugLocation(356, 142);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(356, 152);
					// SugarCpp.g:356:152: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(356, 152);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(356, 171);
					// SugarCpp.g:356:171: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(356, 171);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(356, 182);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:357:24: '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(357, 24);
				char_literal180=(IToken)Match(input,119,Follow._119_in_func_def2163); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(char_literal180);

				DebugLocation(357, 28);
				// SugarCpp.g:357:28: ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==IDENT||LA86_0==NUMBER||LA86_0==STRING||LA86_0==84||LA86_0==89||LA86_0==91||LA86_0==93||(LA86_0>=95 && LA86_0<=96)||(LA86_0>=99 && LA86_0<=100)||(LA86_0>=129 && LA86_0<=130)||LA86_0==152||LA86_0==155||(LA86_0>=157 && LA86_0<=158)||LA86_0==177))
				{
					alt86 = 1;
				}
				else if ((LA86_0==NEWLINE))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:357:30: where_expr
					{
					DebugLocation(357, 30);
					PushFollow(Follow._where_expr_in_func_def2167);
					where_expr181=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr181.Tree);


					{
					// AST REWRITE
					// elements: func_type, where_expr, 177, generic_parameter, func_name, attribute, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 357:42: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
						DebugLocation(357, 45);
						// SugarCpp.g:357:45: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(357, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(357, 56);
						// SugarCpp.g:357:56: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(357, 56);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(357, 67);
						// SugarCpp.g:357:67: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(357, 67);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(357, 78);
						// SugarCpp.g:357:78: ( '~' )?
						if (stream_177.HasNext)
						{
							DebugLocation(357, 78);
							adaptor.AddChild(root_1, stream_177.NextNode());

						}
						stream_177.Reset();
						DebugLocation(357, 83);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(357, 93);
						// SugarCpp.g:357:93: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(357, 93);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(357, 112);
						// SugarCpp.g:357:112: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(357, 112);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(357, 123);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:358:27: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(358, 27);
					// SugarCpp.g:358:27: ( NEWLINE )+
					int cnt82=0;
					try { DebugEnterSubRule(82);
					while (true)
					{
						int alt82=2;
						try { DebugEnterDecision(82, false);
						int LA82_0 = input.LA(1);

						if ((LA82_0==NEWLINE))
						{
							alt82 = 1;
						}


						} finally { DebugExitDecision(82); }
						switch (alt82)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:358:27: NEWLINE
							{
							DebugLocation(358, 27);
							NEWLINE182=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2221); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE182);


							}
							break;

						default:
							if (cnt82 >= 1)
								goto loop82;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee82 = new EarlyExitException( 82, input );
							DebugRecognitionException(eee82);
							throw eee82;
						}
						cnt82++;
					}
					loop82:
						;

					} finally { DebugExitSubRule(82); }

					DebugLocation(358, 36);
					INDENT183=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2224); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT183);

					DebugLocation(358, 43);
					// SugarCpp.g:358:43: ( NEWLINE )*
					try { DebugEnterSubRule(83);
					while (true)
					{
						int alt83=2;
						try { DebugEnterDecision(83, false);
						int LA83_0 = input.LA(1);

						if ((LA83_0==NEWLINE))
						{
							alt83 = 1;
						}


						} finally { DebugExitDecision(83); }
						switch ( alt83 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:358:43: NEWLINE
							{
							DebugLocation(358, 43);
							NEWLINE184=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2226); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE184);


							}
							break;

						default:
							goto loop83;
						}
					}

					loop83:
						;

					} finally { DebugExitSubRule(83); }

					DebugLocation(358, 52);
					// SugarCpp.g:358:52: ( match_item ( NEWLINE )+ )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==173))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:358:53: match_item ( NEWLINE )+
							{
							DebugLocation(358, 53);
							PushFollow(Follow._match_item_in_func_def2230);
							match_item185=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item185.Tree);
							DebugLocation(358, 64);
							// SugarCpp.g:358:64: ( NEWLINE )+
							int cnt84=0;
							try { DebugEnterSubRule(84);
							while (true)
							{
								int alt84=2;
								try { DebugEnterDecision(84, false);
								int LA84_0 = input.LA(1);

								if ((LA84_0==NEWLINE))
								{
									alt84 = 1;
								}


								} finally { DebugExitDecision(84); }
								switch (alt84)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:358:64: NEWLINE
									{
									DebugLocation(358, 64);
									NEWLINE186=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2232); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE186);


									}
									break;

								default:
									if (cnt84 >= 1)
										goto loop84;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee84 = new EarlyExitException( 84, input );
									DebugRecognitionException(eee84);
									throw eee84;
								}
								cnt84++;
							}
							loop84:
								;

							} finally { DebugExitSubRule(84); }


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(358, 75);
					DEDENT187=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2237); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT187);



					{
					// AST REWRITE
					// elements: match_item, attribute, func_type, func_name, func_args, generic_parameter, 177
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 358:82: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(358, 85);
						// SugarCpp.g:358:85: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 87);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(358, 96);
						// SugarCpp.g:358:96: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(358, 96);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(358, 107);
						// SugarCpp.g:358:107: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(358, 107);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(358, 118);
						// SugarCpp.g:358:118: ( '~' )?
						if (stream_177.HasNext)
						{
							DebugLocation(358, 118);
							adaptor.AddChild(root_1, stream_177.NextNode());

						}
						stream_177.Reset();
						DebugLocation(358, 123);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(358, 133);
						// SugarCpp.g:358:133: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(358, 133);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(358, 152);
						// SugarCpp.g:358:152: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(358, 152);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(358, 163);
						// SugarCpp.g:358:163: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 165);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(358, 176);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(358, 176);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(86); }


				}
				break;

			}
			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 28);
			LeaveRule("func_def", 28);
			LeaveRule_func_def();
		}
		DebugLocation(361, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:363:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 29);
		TraceIn("stmt_block_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE189 = default(IToken);
		IToken NEWLINE191 = default(IToken);
		IToken char_literal192 = default(IToken);
		IToken NEWLINE193 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE189_tree = default(CommonTree);
		CommonTree NEWLINE191_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		CommonTree NEWLINE193_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(363, 1);
		try
		{
			// SugarCpp.g:364:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt92=2;
			try { DebugEnterDecision(92, false);
			int LA92_0 = input.LA(1);

			if ((LA92_0==141||(LA92_0>=145 && LA92_0<=147)||LA92_0==154||LA92_0==162||LA92_0==165||(LA92_0>=167 && LA92_0<=168)||LA92_0==172))
			{
				alt92 = 1;
			}
			else if ((LA92_0==IDENT||LA92_0==84||LA92_0==89||LA92_0==91||LA92_0==93||(LA92_0>=95 && LA92_0<=96)||(LA92_0>=99 && LA92_0<=100)||LA92_0==129||LA92_0==158||LA92_0==160||LA92_0==166||LA92_0==169||LA92_0==177))
			{
				alt92 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(364, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2330);
				stmt_complex188=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex188.Tree);
				DebugLocation(364, 17);
				// SugarCpp.g:364:17: ( NEWLINE )+
				int cnt88=0;
				try { DebugEnterSubRule(88);
				while (true)
				{
					int alt88=2;
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==NEWLINE))
					{
						alt88 = 1;
					}


					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:364:17: NEWLINE
						{
						DebugLocation(364, 17);
						NEWLINE189=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2332); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE189);


						}
						break;

					default:
						if (cnt88 >= 1)
							goto loop88;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee88 = new EarlyExitException( 88, input );
						DebugRecognitionException(eee88);
						throw eee88;
					}
					cnt88++;
				}
				loop88:
					;

				} finally { DebugExitSubRule(88); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 364:26: -> stmt_complex
				{
					DebugLocation(364, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:365:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(365, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2342);
				stmt_simple190=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple190.Tree);
				DebugLocation(365, 16);
				// SugarCpp.g:365:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==NEWLINE))
				{
					alt91 = 1;
				}
				else if ((LA91_0==112))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:365:17: ( NEWLINE )+
					{
					DebugLocation(365, 17);
					// SugarCpp.g:365:17: ( NEWLINE )+
					int cnt89=0;
					try { DebugEnterSubRule(89);
					while (true)
					{
						int alt89=2;
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==NEWLINE))
						{
							alt89 = 1;
						}


						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:365:17: NEWLINE
							{
							DebugLocation(365, 17);
							NEWLINE191=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2345); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE191);


							}
							break;

						default:
							if (cnt89 >= 1)
								goto loop89;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee89 = new EarlyExitException( 89, input );
							DebugRecognitionException(eee89);
							throw eee89;
						}
						cnt89++;
					}
					loop89:
						;

					} finally { DebugExitSubRule(89); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:365:28: ';' ( NEWLINE )*
					{
					DebugLocation(365, 28);
					char_literal192=(IToken)Match(input,112,Follow._112_in_stmt_block_item2350); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_112.Add(char_literal192);

					DebugLocation(365, 32);
					// SugarCpp.g:365:32: ( NEWLINE )*
					try { DebugEnterSubRule(90);
					while (true)
					{
						int alt90=2;
						try { DebugEnterDecision(90, false);
						int LA90_0 = input.LA(1);

						if ((LA90_0==NEWLINE))
						{
							alt90 = 1;
						}


						} finally { DebugExitDecision(90); }
						switch ( alt90 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:365:32: NEWLINE
							{
							DebugLocation(365, 32);
							NEWLINE193=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2352); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE193);


							}
							break;

						default:
							goto loop90;
						}
					}

					loop90:
						;

					} finally { DebugExitSubRule(90); }


					}
					break;

				}
				} finally { DebugExitSubRule(91); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 365:42: -> stmt_simple
				{
					DebugLocation(365, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 29);
			LeaveRule("stmt_block_item", 29);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(366, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:368:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 30);
		TraceIn("stmt_block", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT194 = default(IToken);
		IToken NEWLINE195 = default(IToken);
		IToken DEDENT197 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT194_tree = default(CommonTree);
		CommonTree NEWLINE195_tree = default(CommonTree);
		CommonTree DEDENT197_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(368, 1);
		try
		{
			// SugarCpp.g:369:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:369:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(369, 4);
			INDENT194=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2369); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT194);

			DebugLocation(369, 11);
			// SugarCpp.g:369:11: ( NEWLINE )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==NEWLINE))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:369:11: NEWLINE
					{
					DebugLocation(369, 11);
					NEWLINE195=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2371); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE195);


					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }

			DebugLocation(369, 20);
			// SugarCpp.g:369:20: ( stmt_block_item )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==IDENT||LA94_0==84||LA94_0==89||LA94_0==91||LA94_0==93||(LA94_0>=95 && LA94_0<=96)||(LA94_0>=99 && LA94_0<=100)||LA94_0==129||LA94_0==141||(LA94_0>=145 && LA94_0<=147)||LA94_0==154||LA94_0==158||LA94_0==160||LA94_0==162||(LA94_0>=165 && LA94_0<=169)||LA94_0==172||LA94_0==177))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:369:20: stmt_block_item
					{
					DebugLocation(369, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2374);
					stmt_block_item196=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item196.Tree);

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }

			DebugLocation(369, 37);
			DEDENT197=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2377); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT197);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 369:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(369, 47);
				// SugarCpp.g:369:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(369, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(369, 60);
				// SugarCpp.g:369:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(369, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 30);
			LeaveRule("stmt_block", 30);
			LeaveRule_stmt_block();
		}
		DebugLocation(370, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:372:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 31);
		TraceIn("stmt", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex199 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(372, 1);
		try
		{
			// SugarCpp.g:373:2: ( stmt_simple | stmt_complex )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==IDENT||LA95_0==84||LA95_0==89||LA95_0==91||LA95_0==93||(LA95_0>=95 && LA95_0<=96)||(LA95_0>=99 && LA95_0<=100)||LA95_0==129||LA95_0==158||LA95_0==160||LA95_0==166||LA95_0==169||LA95_0==177))
			{
				alt95 = 1;
			}
			else if ((LA95_0==141||(LA95_0>=145 && LA95_0<=147)||LA95_0==154||LA95_0==162||LA95_0==165||(LA95_0>=167 && LA95_0<=168)||LA95_0==172))
			{
				alt95 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:373:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(373, 4);
				PushFollow(Follow._stmt_simple_in_stmt2397);
				stmt_simple198=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple198.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:374:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(374, 4);
				PushFollow(Follow._stmt_complex_in_stmt2402);
				stmt_complex199=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex199.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 31);
			LeaveRule("stmt", 31);
			LeaveRule_stmt();
		}
		DebugLocation(375, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:377:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 32);
		TraceIn("stmt_simple", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(377, 1);
		try
		{
			// SugarCpp.g:378:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:378:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(378, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2413);
			stmt_expr200=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr200.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 32);
			LeaveRule("stmt_simple", 32);
			LeaveRule_stmt_simple();
		}
		DebugLocation(379, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:381:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 33);
		TraceIn("stmt_complex", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(381, 1);
		try
		{
			// SugarCpp.g:382:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt96=6;
			try { DebugEnterDecision(96, false);
			switch (input.LA(1))
			{
			case 147:
			case 167:
				{
				alt96 = 1;
				}
				break;
			case 146:
				{
				alt96 = 2;
				}
				break;
			case 154:
			case 168:
			case 172:
				{
				alt96 = 3;
				}
				break;
			case 165:
				{
				alt96 = 4;
				}
				break;
			case 162:
				{
				alt96 = 5;
				}
				break;
			case 141:
			case 145:
				{
				alt96 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:382:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2424);
				stmt_if201=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if201.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:383:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(383, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2429);
				stmt_for202=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for202.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:384:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2434);
				stmt_while203=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while203.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:385:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2439);
				stmt_try204=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try204.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:386:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2444);
				stmt_switch205=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch205.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:387:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(387, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2449);
				stmt_defer206=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer206.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 33);
			LeaveRule("stmt_complex", 33);
			LeaveRule_stmt_complex();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:390:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 34);
		TraceIn("stmt_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal207 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken string_literal213 = default(IToken);
		IToken string_literal215 = default(IToken);
		IToken char_literal217 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item218 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree char_literal217_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(390, 1);
		try
		{
			// SugarCpp.g:391:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:391:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(391, 4);
			// SugarCpp.g:391:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:391:5: a= stmt_expr_item
			{
			DebugLocation(391, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2463);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 391:22: -> $a
			{
				DebugLocation(391, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(391, 29);
			// SugarCpp.g:391:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=6;
				try { DebugEnterDecision(98, false);
				switch (input.LA(1))
				{
				case 147:
					{
					alt98 = 1;
					}
					break;
				case 167:
					{
					alt98 = 2;
					}
					break;
				case 172:
					{
					alt98 = 3;
					}
					break;
				case 168:
					{
					alt98 = 4;
					}
					break;
				case 146:
					{
					alt98 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:391:31: 'if' expr
					{
					DebugLocation(391, 31);
					string_literal207=(IToken)Match(input,147,Follow._147_in_stmt_expr2473); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_147.Add(string_literal207);

					DebugLocation(391, 36);
					PushFollow(Follow._expr_in_stmt_expr2475);
					expr208=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr208.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(391, 44);
						// SugarCpp.g:391:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(391, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(391, 59);
						// SugarCpp.g:391:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(391, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:392:13: 'unless' expr
					{
					DebugLocation(392, 13);
					string_literal209=(IToken)Match(input,167,Follow._167_in_stmt_expr2504); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_167.Add(string_literal209);

					DebugLocation(392, 22);
					PushFollow(Follow._expr_in_stmt_expr2506);
					expr210=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr210.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(392, 30);
						// SugarCpp.g:392:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(392, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(392, 49);
						// SugarCpp.g:392:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(392, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:393:13: 'while' expr
					{
					DebugLocation(393, 13);
					string_literal211=(IToken)Match(input,172,Follow._172_in_stmt_expr2535); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_172.Add(string_literal211);

					DebugLocation(393, 21);
					PushFollow(Follow._expr_in_stmt_expr2537);
					expr212=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr212.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(393, 29);
						// SugarCpp.g:393:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(393, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(393, 47);
						// SugarCpp.g:393:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(393, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:394:13: 'until' expr
					{
					DebugLocation(394, 13);
					string_literal213=(IToken)Match(input,168,Follow._168_in_stmt_expr2566); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal213);

					DebugLocation(394, 21);
					PushFollow(Follow._expr_in_stmt_expr2568);
					expr214=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr214.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(394, 29);
						// SugarCpp.g:394:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(394, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(394, 47);
						// SugarCpp.g:394:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(394, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:395:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(395, 13);
					string_literal215=(IToken)Match(input,146,Follow._146_in_stmt_expr2597); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_146.Add(string_literal215);

					DebugLocation(395, 19);
					PushFollow(Follow._for_item_in_stmt_expr2599);
					for_item216=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item216.Tree);
					DebugLocation(395, 28);
					// SugarCpp.g:395:28: ( ',' for_item )*
					try { DebugEnterSubRule(97);
					while (true)
					{
						int alt97=2;
						try { DebugEnterDecision(97, false);
						int LA97_0 = input.LA(1);

						if ((LA97_0==98))
						{
							alt97 = 1;
						}


						} finally { DebugExitDecision(97); }
						switch ( alt97 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:395:29: ',' for_item
							{
							DebugLocation(395, 29);
							char_literal217=(IToken)Match(input,98,Follow._98_in_stmt_expr2602); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal217);

							DebugLocation(395, 33);
							PushFollow(Follow._for_item_in_stmt_expr2604);
							for_item218=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item218.Tree);

							}
							break;

						default:
							goto loop97;
						}
					}

					loop97:
						;

					} finally { DebugExitSubRule(97); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(395, 47);
						// SugarCpp.g:395:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(395, 58);
						// SugarCpp.g:395:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(395, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(395, 68);
						// SugarCpp.g:395:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(395, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 34);
			LeaveRule("stmt_expr", 34);
			LeaveRule_stmt_expr();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:399:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 35);
		TraceIn("stmt_expr_item", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify223 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(399, 1);
		try
		{
			// SugarCpp.g:400:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt99=5;
			try { DebugEnterDecision(99, false);
			try
			{
				alt99 = dfa99.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:400:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2646);
				stmt_alloc219=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc219.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:401:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2651);
				stmt_return220=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return220.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:402:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2656);
				stmt_using221=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using221.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:403:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(403, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2661);
				stmt_typedef222=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef222.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:404:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2666);
				stmt_modify223=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify223.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 35);
			LeaveRule("stmt_expr_item", 35);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:407:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 36);
		TraceIn("stmt_defer", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal224 = default(IToken);
		IToken string_literal226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal224_tree = default(CommonTree);
		CommonTree string_literal226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(407, 1);
		try
		{
			// SugarCpp.g:408:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_0 = input.LA(1);

			if ((LA100_0==141))
			{
				alt100 = 1;
			}
			else if ((LA100_0==145))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:408:4: 'defer' stmt
				{
				DebugLocation(408, 4);
				string_literal224=(IToken)Match(input,141,Follow._141_in_stmt_defer2677); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal224);

				DebugLocation(408, 12);
				PushFollow(Follow._stmt_in_stmt_defer2679);
				stmt225=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt225.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 408:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(408, 20);
					// SugarCpp.g:408:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(408, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(408, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:409:4: 'finally' stmt
				{
				DebugLocation(409, 4);
				string_literal226=(IToken)Match(input,145,Follow._145_in_stmt_defer2692); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_145.Add(string_literal226);

				DebugLocation(409, 14);
				PushFollow(Follow._stmt_in_stmt_defer2694);
				stmt227=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt227.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 409:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(409, 22);
					// SugarCpp.g:409:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(409, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(409, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 36);
			LeaveRule("stmt_defer", 36);
			LeaveRule_stmt_defer();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:412:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 37);
		TraceIn("stmt_typedef", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(412, 1);
		try
		{
			// SugarCpp.g:413:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:413:4: 'type' ident '=' type_name
			{
			DebugLocation(413, 4);
			string_literal228=(IToken)Match(input,166,Follow._166_in_stmt_typedef2713); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_166.Add(string_literal228);

			DebugLocation(413, 11);
			PushFollow(Follow._ident_in_stmt_typedef2715);
			ident229=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident229.Tree);
			DebugLocation(413, 17);
			char_literal230=(IToken)Match(input,119,Follow._119_in_stmt_typedef2717); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal230);

			DebugLocation(413, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2719);
			type_name231=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name231.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 413:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(413, 34);
				// SugarCpp.g:413:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(413, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(413, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(413, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 37);
			LeaveRule("stmt_typedef", 37);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:416:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 38);
		TraceIn("stmt_using_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal233_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(416, 36);
		try
		{
			// SugarCpp.g:416:16: ( ident | 'namespace' )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==IDENT))
			{
				alt101 = 1;
			}
			else if ((LA101_0==156))
			{
				alt101 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:416:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(416, 18);
				PushFollow(Follow._ident_in_stmt_using_item2738);
				ident232=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident232.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:416:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(416, 26);
				string_literal233=(IToken)Match(input,156,Follow._156_in_stmt_using_item2742); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal233_tree = (CommonTree)adaptor.Create(string_literal233);
				adaptor.AddChild(root_0, string_literal233_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 38);
			LeaveRule("stmt_using_item", 38);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(416, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:417:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 39);
		TraceIn("stmt_using", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal234 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal234_tree = default(CommonTree);
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(417, 1);
		try
		{
			// SugarCpp.g:418:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(418, 4);
			string_literal234=(IToken)Match(input,169,Follow._169_in_stmt_using2750); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(string_literal234);

			DebugLocation(418, 12);
			// SugarCpp.g:418:12: ( stmt_using_item )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==IDENT||LA102_0==156))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:418:12: stmt_using_item
					{
					DebugLocation(418, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2752);
					stmt_using_item235=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item235.Tree);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(418, 32);
				// SugarCpp.g:418:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(418, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(418, 45);
				// SugarCpp.g:418:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(418, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 39);
			LeaveRule("stmt_using", 39);
			LeaveRule_stmt_using();
		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:421:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 40);
		TraceIn("stmt_return", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal236 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal236_tree = default(CommonTree);
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(421, 1);
		try
		{
			// SugarCpp.g:422:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:422:4: 'return' ( expr )?
			{
			DebugLocation(422, 4);
			string_literal236=(IToken)Match(input,160,Follow._160_in_stmt_return2773); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_160.Add(string_literal236);

			DebugLocation(422, 13);
			// SugarCpp.g:422:13: ( expr )?
			int alt103=2;
			try { DebugEnterSubRule(103);
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==IDENT||LA103_0==NUMBER||LA103_0==STRING||LA103_0==84||LA103_0==89||LA103_0==91||LA103_0==93||(LA103_0>=95 && LA103_0<=96)||(LA103_0>=99 && LA103_0<=100)||(LA103_0>=129 && LA103_0<=130)||LA103_0==152||LA103_0==155||(LA103_0>=157 && LA103_0<=158)||LA103_0==177))
			{
				alt103 = 1;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:422:13: expr
				{
				DebugLocation(422, 13);
				PushFollow(Follow._expr_in_stmt_return2775);
				expr237=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr237.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(103); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 422:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(422, 22);
				// SugarCpp.g:422:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(422, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(422, 36);
				// SugarCpp.g:422:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(422, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 40);
			LeaveRule("stmt_return", 40);
			LeaveRule_stmt_return();
		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:425:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 41);
		TraceIn("inline_stmt_block", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(425, 1);
		try
		{
			// SugarCpp.g:426:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:426:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(426, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2796);
			stmt_simple238=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple238.Tree);
			DebugLocation(426, 16);
			// SugarCpp.g:426:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==112))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:426:17: ';' stmt_simple
					{
					DebugLocation(426, 17);
					char_literal239=(IToken)Match(input,112,Follow._112_in_inline_stmt_block2799); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_112.Add(char_literal239);

					DebugLocation(426, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2801);
					stmt_simple240=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple240.Tree);

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 426:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(426, 38);
				// SugarCpp.g:426:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(426, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(426, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(426, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 41);
			LeaveRule("inline_stmt_block", 41);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:429:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 42);
		TraceIn("stmt_if", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		IToken NEWLINE243 = default(IToken);
		IToken NEWLINE245 = default(IToken);
		IToken string_literal246 = default(IToken);
		IToken NEWLINE247 = default(IToken);
		IToken string_literal249 = default(IToken);
		IToken string_literal251 = default(IToken);
		IToken NEWLINE253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken NEWLINE257 = default(IToken);
		IToken string_literal259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree NEWLINE243_tree = default(CommonTree);
		CommonTree NEWLINE245_tree = default(CommonTree);
		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree NEWLINE247_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree NEWLINE253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree NEWLINE257_tree = default(CommonTree);
		CommonTree string_literal259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(429, 1);
		try
		{
			// SugarCpp.g:430:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt115=2;
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==147))
			{
				alt115 = 1;
			}
			else if ((LA115_0==167))
			{
				alt115 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:430:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(430, 4);
				string_literal241=(IToken)Match(input,147,Follow._147_in_stmt_if2823); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal241);

				DebugLocation(430, 9);
				PushFollow(Follow._expr_in_stmt_if2825);
				expr242=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr242.Tree);
				DebugLocation(430, 14);
				// SugarCpp.g:430:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}
				else if ((LA109_0==163))
				{
					alt109 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:430:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(430, 15);
					// SugarCpp.g:430:15: ( NEWLINE )+
					int cnt105=0;
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=2;
						try { DebugEnterDecision(105, false);
						int LA105_0 = input.LA(1);

						if ((LA105_0==NEWLINE))
						{
							alt105 = 1;
						}


						} finally { DebugExitDecision(105); }
						switch (alt105)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:430:15: NEWLINE
							{
							DebugLocation(430, 15);
							NEWLINE243=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2828); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE243);


							}
							break;

						default:
							if (cnt105 >= 1)
								goto loop105;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee105 = new EarlyExitException( 105, input );
							DebugRecognitionException(eee105);
							throw eee105;
						}
						cnt105++;
					}
					loop105:
						;

					} finally { DebugExitSubRule(105); }

					DebugLocation(430, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2831);
					stmt_block244=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block244.Tree);
					DebugLocation(430, 35);
					// SugarCpp.g:430:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					try
					{
						alt108 = dfa108.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:430:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(430, 36);
						// SugarCpp.g:430:36: ( NEWLINE )*
						try { DebugEnterSubRule(106);
						while (true)
						{
							int alt106=2;
							try { DebugEnterDecision(106, false);
							int LA106_0 = input.LA(1);

							if ((LA106_0==NEWLINE))
							{
								alt106 = 1;
							}


							} finally { DebugExitDecision(106); }
							switch ( alt106 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:430:36: NEWLINE
								{
								DebugLocation(430, 36);
								NEWLINE245=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2834); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE245);


								}
								break;

							default:
								goto loop106;
							}
						}

						loop106:
							;

						} finally { DebugExitSubRule(106); }

						DebugLocation(430, 45);
						string_literal246=(IToken)Match(input,143,Follow._143_in_stmt_if2837); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_143.Add(string_literal246);

						DebugLocation(430, 52);
						// SugarCpp.g:430:52: ( NEWLINE )+
						int cnt107=0;
						try { DebugEnterSubRule(107);
						while (true)
						{
							int alt107=2;
							try { DebugEnterDecision(107, false);
							int LA107_0 = input.LA(1);

							if ((LA107_0==NEWLINE))
							{
								alt107 = 1;
							}


							} finally { DebugExitDecision(107); }
							switch (alt107)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:430:52: NEWLINE
								{
								DebugLocation(430, 52);
								NEWLINE247=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2839); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE247);


								}
								break;

							default:
								if (cnt107 >= 1)
									goto loop107;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee107 = new EarlyExitException( 107, input );
								DebugRecognitionException(eee107);
								throw eee107;
							}
							cnt107++;
						}
						loop107:
							;

						} finally { DebugExitSubRule(107); }

						DebugLocation(430, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2842);
						stmt_block248=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block248.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(108); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 430:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(430, 77);
						// SugarCpp.g:430:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(430, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(430, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(430, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(430, 103);
						// SugarCpp.g:430:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(430, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:431:16: 'then' inline_stmt_block
					{
					DebugLocation(431, 16);
					string_literal249=(IToken)Match(input,163,Follow._163_in_stmt_if2874); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_163.Add(string_literal249);

					DebugLocation(431, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2876);
					inline_stmt_block250=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block250.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 431:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(431, 44);
						// SugarCpp.g:431:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(431, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(431, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(431, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(109); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:433:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(433, 4);
				string_literal251=(IToken)Match(input,167,Follow._167_in_stmt_if2897); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal251);

				DebugLocation(433, 13);
				PushFollow(Follow._expr_in_stmt_if2899);
				expr252=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr252.Tree);
				DebugLocation(433, 18);
				// SugarCpp.g:433:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==NEWLINE))
				{
					alt114 = 1;
				}
				else if ((LA114_0==163))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(433, 19);
					// SugarCpp.g:433:19: ( NEWLINE )+
					int cnt110=0;
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=2;
						try { DebugEnterDecision(110, false);
						int LA110_0 = input.LA(1);

						if ((LA110_0==NEWLINE))
						{
							alt110 = 1;
						}


						} finally { DebugExitDecision(110); }
						switch (alt110)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:433:19: NEWLINE
							{
							DebugLocation(433, 19);
							NEWLINE253=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2902); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE253);


							}
							break;

						default:
							if (cnt110 >= 1)
								goto loop110;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee110 = new EarlyExitException( 110, input );
							DebugRecognitionException(eee110);
							throw eee110;
						}
						cnt110++;
					}
					loop110:
						;

					} finally { DebugExitSubRule(110); }

					DebugLocation(433, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2905);
					stmt_block254=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block254.Tree);
					DebugLocation(433, 39);
					// SugarCpp.g:433:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt113=2;
					try { DebugEnterSubRule(113);
					try { DebugEnterDecision(113, false);
					try
					{
						alt113 = dfa113.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:433:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(433, 40);
						// SugarCpp.g:433:40: ( NEWLINE )*
						try { DebugEnterSubRule(111);
						while (true)
						{
							int alt111=2;
							try { DebugEnterDecision(111, false);
							int LA111_0 = input.LA(1);

							if ((LA111_0==NEWLINE))
							{
								alt111 = 1;
							}


							} finally { DebugExitDecision(111); }
							switch ( alt111 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:433:40: NEWLINE
								{
								DebugLocation(433, 40);
								NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2908); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE255);


								}
								break;

							default:
								goto loop111;
							}
						}

						loop111:
							;

						} finally { DebugExitSubRule(111); }

						DebugLocation(433, 49);
						string_literal256=(IToken)Match(input,143,Follow._143_in_stmt_if2911); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_143.Add(string_literal256);

						DebugLocation(433, 56);
						// SugarCpp.g:433:56: ( NEWLINE )+
						int cnt112=0;
						try { DebugEnterSubRule(112);
						while (true)
						{
							int alt112=2;
							try { DebugEnterDecision(112, false);
							int LA112_0 = input.LA(1);

							if ((LA112_0==NEWLINE))
							{
								alt112 = 1;
							}


							} finally { DebugExitDecision(112); }
							switch (alt112)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:433:56: NEWLINE
								{
								DebugLocation(433, 56);
								NEWLINE257=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2913); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE257);


								}
								break;

							default:
								if (cnt112 >= 1)
									goto loop112;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee112 = new EarlyExitException( 112, input );
								DebugRecognitionException(eee112);
								throw eee112;
							}
							cnt112++;
						}
						loop112:
							;

						} finally { DebugExitSubRule(112); }

						DebugLocation(433, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2916);
						stmt_block258=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block258.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(113); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 433:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(433, 81);
						// SugarCpp.g:433:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(433, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(433, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(433, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(433, 111);
						// SugarCpp.g:433:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(433, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:434:20: 'then' inline_stmt_block
					{
					DebugLocation(434, 20);
					string_literal259=(IToken)Match(input,163,Follow._163_in_stmt_if2952); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_163.Add(string_literal259);

					DebugLocation(434, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2954);
					inline_stmt_block260=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block260.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(434, 48);
						// SugarCpp.g:434:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(434, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(434, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 42);
			LeaveRule("stmt_if", 42);
			LeaveRule_stmt_if();
		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:438:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 43);
		TraceIn("stmt_while", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal261 = default(IToken);
		IToken NEWLINE263 = default(IToken);
		IToken string_literal265 = default(IToken);
		IToken string_literal267 = default(IToken);
		IToken NEWLINE269 = default(IToken);
		IToken string_literal271 = default(IToken);
		IToken string_literal273 = default(IToken);
		IToken NEWLINE275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block276 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree NEWLINE263_tree = default(CommonTree);
		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal267_tree = default(CommonTree);
		CommonTree NEWLINE269_tree = default(CommonTree);
		CommonTree string_literal271_tree = default(CommonTree);
		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree NEWLINE275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt122=3;
			try { DebugEnterDecision(122, false);
			switch (input.LA(1))
			{
			case 172:
				{
				alt122 = 1;
				}
				break;
			case 168:
				{
				alt122 = 2;
				}
				break;
			case 154:
				{
				alt122 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:439:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(439, 4);
				string_literal261=(IToken)Match(input,172,Follow._172_in_stmt_while2985); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(string_literal261);

				DebugLocation(439, 12);
				PushFollow(Follow._expr_in_stmt_while2987);
				expr262=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr262.Tree);
				DebugLocation(439, 17);
				// SugarCpp.g:439:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}
				else if ((LA117_0==163))
				{
					alt117 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(439, 19);
					// SugarCpp.g:439:19: ( NEWLINE )+
					int cnt116=0;
					try { DebugEnterSubRule(116);
					while (true)
					{
						int alt116=2;
						try { DebugEnterDecision(116, false);
						int LA116_0 = input.LA(1);

						if ((LA116_0==NEWLINE))
						{
							alt116 = 1;
						}


						} finally { DebugExitDecision(116); }
						switch (alt116)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:439:19: NEWLINE
							{
							DebugLocation(439, 19);
							NEWLINE263=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2991); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE263);


							}
							break;

						default:
							if (cnt116 >= 1)
								goto loop116;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee116 = new EarlyExitException( 116, input );
							DebugRecognitionException(eee116);
							throw eee116;
						}
						cnt116++;
					}
					loop116:
						;

					} finally { DebugExitSubRule(116); }

					DebugLocation(439, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2994);
					stmt_block264=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block264.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(439, 42);
						// SugarCpp.g:439:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(439, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(439, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:440:13: 'then' inline_stmt_block
					{
					DebugLocation(440, 13);
					string_literal265=(IToken)Match(input,163,Follow._163_in_stmt_while3018); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_163.Add(string_literal265);

					DebugLocation(440, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3020);
					inline_stmt_block266=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block266.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(440, 41);
						// SugarCpp.g:440:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(440, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(440, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(117); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:442:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(442, 4);
				string_literal267=(IToken)Match(input,168,Follow._168_in_stmt_while3044); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal267);

				DebugLocation(442, 12);
				PushFollow(Follow._expr_in_stmt_while3046);
				expr268=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr268.Tree);
				DebugLocation(442, 17);
				// SugarCpp.g:442:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==NEWLINE))
				{
					alt119 = 1;
				}
				else if ((LA119_0==163))
				{
					alt119 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:442:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(442, 19);
					// SugarCpp.g:442:19: ( NEWLINE )+
					int cnt118=0;
					try { DebugEnterSubRule(118);
					while (true)
					{
						int alt118=2;
						try { DebugEnterDecision(118, false);
						int LA118_0 = input.LA(1);

						if ((LA118_0==NEWLINE))
						{
							alt118 = 1;
						}


						} finally { DebugExitDecision(118); }
						switch (alt118)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:442:19: NEWLINE
							{
							DebugLocation(442, 19);
							NEWLINE269=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3050); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE269);


							}
							break;

						default:
							if (cnt118 >= 1)
								goto loop118;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee118 = new EarlyExitException( 118, input );
							DebugRecognitionException(eee118);
							throw eee118;
						}
						cnt118++;
					}
					loop118:
						;

					} finally { DebugExitSubRule(118); }

					DebugLocation(442, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3053);
					stmt_block270=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block270.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(442, 42);
						// SugarCpp.g:442:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(442, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(442, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:443:13: 'then' inline_stmt_block
					{
					DebugLocation(443, 13);
					string_literal271=(IToken)Match(input,163,Follow._163_in_stmt_while3077); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_163.Add(string_literal271);

					DebugLocation(443, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3079);
					inline_stmt_block272=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block272.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(443, 41);
						// SugarCpp.g:443:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(443, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(443, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(119); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:445:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(445, 4);
				string_literal273=(IToken)Match(input,154,Follow._154_in_stmt_while3103); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal273);

				DebugLocation(445, 11);
				// SugarCpp.g:445:11: ( expr )?
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==IDENT||LA120_0==NUMBER||LA120_0==STRING||LA120_0==84||LA120_0==89||LA120_0==91||LA120_0==93||(LA120_0>=95 && LA120_0<=96)||(LA120_0>=99 && LA120_0<=100)||(LA120_0>=129 && LA120_0<=130)||LA120_0==152||LA120_0==155||(LA120_0>=157 && LA120_0<=158)||LA120_0==177))
				{
					alt120 = 1;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:11: expr
					{
					DebugLocation(445, 11);
					PushFollow(Follow._expr_in_stmt_while3105);
					expr274=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr274.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(445, 17);
				// SugarCpp.g:445:17: ( NEWLINE )+
				int cnt121=0;
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==NEWLINE))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:445:17: NEWLINE
						{
						DebugLocation(445, 17);
						NEWLINE275=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3108); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE275);


						}
						break;

					default:
						if (cnt121 >= 1)
							goto loop121;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee121 = new EarlyExitException( 121, input );
						DebugRecognitionException(eee121);
						throw eee121;
					}
					cnt121++;
				}
				loop121:
					;

				} finally { DebugExitSubRule(121); }

				DebugLocation(445, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3111);
				stmt_block276=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block276.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 445:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(445, 40);
					// SugarCpp.g:445:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(445, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(445, 52);
					// SugarCpp.g:445:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(445, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(445, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 43);
			LeaveRule("stmt_while", 43);
			LeaveRule_stmt_while();
		}
		DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:448:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 44);
		TraceIn("for_range", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal278 = default(IToken);
		IToken string_literal279 = default(IToken);
		IToken string_literal280 = default(IToken);
		IToken string_literal281 = default(IToken);
		IToken string_literal282 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree string_literal279_tree = default(CommonTree);
		CommonTree string_literal280_tree = default(CommonTree);
		CommonTree string_literal281_tree = default(CommonTree);
		CommonTree string_literal282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(448, 1);
		try
		{
			// SugarCpp.g:449:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:449:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(449, 4);
			PushFollow(Follow._ident_in_for_range3133);
			ident277=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident277.Tree);
			DebugLocation(449, 10);
			string_literal278=(IToken)Match(input,114,Follow._114_in_for_range3135); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(string_literal278);

			DebugLocation(449, 16);
			PushFollow(Follow._expr_in_for_range3139);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(449, 22);
			// SugarCpp.g:449:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt125=3;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			switch (input.LA(1))
			{
			case 164:
				{
				alt125 = 1;
				}
				break;
			case 142:
				{
				alt125 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 98:
			case 112:
			case 131:
			case 146:
			case 147:
			case 149:
			case 167:
			case 168:
			case 172:
				{
				alt125 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:449:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(449, 23);
				string_literal279=(IToken)Match(input,164,Follow._164_in_for_range3142); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal279);

				DebugLocation(449, 29);
				PushFollow(Follow._expr_in_for_range3146);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(449, 35);
				// SugarCpp.g:449:35: ( 'by' c= expr )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==136))
				{
					alt123 = 1;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:36: 'by' c= expr
					{
					DebugLocation(449, 36);
					string_literal280=(IToken)Match(input,136,Follow._136_in_for_range3149); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_136.Add(string_literal280);

					DebugLocation(449, 42);
					PushFollow(Follow._expr_in_for_range3153);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(123); }



				{
				// AST REWRITE
				// elements: c, a, ident, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 449:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(449, 53);
					// SugarCpp.g:449:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(449, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(449, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(449, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(449, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(449, 80);
					// SugarCpp.g:449:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(449, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:450:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(450, 8);
				string_literal281=(IToken)Match(input,142,Follow._142_in_for_range3182); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal281);

				DebugLocation(450, 18);
				PushFollow(Follow._expr_in_for_range3186);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(450, 24);
				// SugarCpp.g:450:24: ( 'by' c= expr )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==136))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:450:25: 'by' c= expr
					{
					DebugLocation(450, 25);
					string_literal282=(IToken)Match(input,136,Follow._136_in_for_range3189); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_136.Add(string_literal282);

					DebugLocation(450, 31);
					PushFollow(Follow._expr_in_for_range3193);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(124); }



				{
				// AST REWRITE
				// elements: b, c, ident, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 450:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(450, 42);
					// SugarCpp.g:450:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(450, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(450, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(450, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(450, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(450, 74);
					// SugarCpp.g:450:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(450, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:451:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 451:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(451, 12);
					// SugarCpp.g:451:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(451, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(451, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(451, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 44);
			LeaveRule("for_range", 44);
			LeaveRule_for_range();
		}
		DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:455:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 45);
		TraceIn("for_when", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(455, 1);
		try
		{
			// SugarCpp.g:456:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:456:4: expr
			{
			DebugLocation(456, 4);
			PushFollow(Follow._expr_in_for_when3251);
			expr283=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr283.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 456:9: -> ^( For_Item_When expr )
			{
				DebugLocation(456, 12);
				// SugarCpp.g:456:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(456, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(456, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 45);
			LeaveRule("for_when", 45);
			LeaveRule_for_when();
		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:459:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 46);
		TraceIn("for_map", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal285 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident284 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr286 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal285_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(459, 1);
		try
		{
			// SugarCpp.g:460:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:460:4: ident '=>' expr
			{
			DebugLocation(460, 4);
			PushFollow(Follow._ident_in_for_map3270);
			ident284=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident284.Tree);
			DebugLocation(460, 10);
			string_literal285=(IToken)Match(input,122,Follow._122_in_for_map3272); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_122.Add(string_literal285);

			DebugLocation(460, 15);
			PushFollow(Follow._expr_in_for_map3274);
			expr286=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr286.Tree);


			{
			// AST REWRITE
			// elements: expr, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 460:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(460, 23);
				// SugarCpp.g:460:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(460, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(460, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(460, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 46);
			LeaveRule("for_map", 46);
			LeaveRule_for_map();
		}
		DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:463:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 47);
		TraceIn("for_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(463, 1);
		try
		{
			// SugarCpp.g:464:2: ( for_range | for_when | for_map )
			int alt126=3;
			try { DebugEnterDecision(126, false);
			try
			{
				alt126 = dfa126.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:464:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(464, 4);
				PushFollow(Follow._for_range_in_for_item3295);
				for_range287=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range287.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:465:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(465, 4);
				PushFollow(Follow._for_when_in_for_item3300);
				for_when288=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when288.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:466:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(466, 4);
				PushFollow(Follow._for_map_in_for_item3305);
				for_map289=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map289.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 47);
			LeaveRule("for_item", 47);
			LeaveRule_for_item();
		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:469:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 48);
		TraceIn("stmt_for", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken NEWLINE294 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree NEWLINE294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(469, 1);
		try
		{
			// SugarCpp.g:470:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:470:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(470, 4);
			string_literal290=(IToken)Match(input,146,Follow._146_in_stmt_for3316); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_146.Add(string_literal290);

			DebugLocation(470, 10);
			// SugarCpp.g:470:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:470:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(470, 12);
			PushFollow(Follow._for_item_in_stmt_for3320);
			for_item291=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item291.Tree);
			DebugLocation(470, 21);
			// SugarCpp.g:470:21: ( ',' for_item )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==98))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:22: ',' for_item
					{
					DebugLocation(470, 22);
					char_literal292=(IToken)Match(input,98,Follow._98_in_stmt_for3323); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal292);

					DebugLocation(470, 26);
					PushFollow(Follow._for_item_in_stmt_for3325);
					for_item293=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item293.Tree);

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }

			DebugLocation(470, 37);
			// SugarCpp.g:470:37: ( NEWLINE )+
			int cnt128=0;
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==NEWLINE))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:37: NEWLINE
					{
					DebugLocation(470, 37);
					NEWLINE294=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3329); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE294);


					}
					break;

				default:
					if (cnt128 >= 1)
						goto loop128;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee128 = new EarlyExitException( 128, input );
					DebugRecognitionException(eee128);
					throw eee128;
				}
				cnt128++;
			}
			loop128:
				;

			} finally { DebugExitSubRule(128); }

			DebugLocation(470, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3332);
			stmt_block295=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block295.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 470:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(470, 60);
				// SugarCpp.g:470:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(470, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(470, 71);
				// SugarCpp.g:470:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(470, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(470, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 48);
			LeaveRule("stmt_for", 48);
			LeaveRule_stmt_for();
		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:475:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 49);
		TraceIn("stmt_try", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal296 = default(IToken);
		IToken NEWLINE297 = default(IToken);
		IToken NEWLINE299 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken NEWLINE302 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block303 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal296_tree = default(CommonTree);
		CommonTree NEWLINE297_tree = default(CommonTree);
		CommonTree NEWLINE299_tree = default(CommonTree);
		CommonTree string_literal300_tree = default(CommonTree);
		CommonTree NEWLINE302_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(475, 1);
		try
		{
			// SugarCpp.g:476:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:476:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(476, 4);
			string_literal296=(IToken)Match(input,165,Follow._165_in_stmt_try3363); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_165.Add(string_literal296);

			DebugLocation(476, 10);
			// SugarCpp.g:476:10: ( NEWLINE )+
			int cnt129=0;
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==NEWLINE))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:476:10: NEWLINE
					{
					DebugLocation(476, 10);
					NEWLINE297=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3365); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE297);


					}
					break;

				default:
					if (cnt129 >= 1)
						goto loop129;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee129 = new EarlyExitException( 129, input );
					DebugRecognitionException(eee129);
					throw eee129;
				}
				cnt129++;
			}
			loop129:
				;

			} finally { DebugExitSubRule(129); }

			DebugLocation(476, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3368);
			stmt_block298=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block298.Tree);
			DebugLocation(476, 30);
			// SugarCpp.g:476:30: ( NEWLINE )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==NEWLINE))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:476:30: NEWLINE
					{
					DebugLocation(476, 30);
					NEWLINE299=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3370); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE299);


					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }

			DebugLocation(476, 39);
			string_literal300=(IToken)Match(input,138,Follow._138_in_stmt_try3373); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_138.Add(string_literal300);

			DebugLocation(476, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3375);
			stmt_alloc301=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc301.Tree);
			DebugLocation(476, 58);
			// SugarCpp.g:476:58: ( NEWLINE )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==NEWLINE))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:476:58: NEWLINE
					{
					DebugLocation(476, 58);
					NEWLINE302=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3377); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE302);


					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(476, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3380);
			stmt_block303=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block303.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 476:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(476, 81);
				// SugarCpp.g:476:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(476, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(476, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(476, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(476, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 49);
			LeaveRule("stmt_try", 49);
			LeaveRule_stmt_try();
		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:479:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 50);
		TraceIn("switch_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal304 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken NEWLINE308 = default(IToken);
		IToken string_literal310 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block311 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree NEWLINE308_tree = default(CommonTree);
		CommonTree string_literal310_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(479, 1);
		try
		{
			// SugarCpp.g:480:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:480:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(480, 4);
			string_literal304=(IToken)Match(input,170,Follow._170_in_switch_item3403); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(string_literal304);

			DebugLocation(480, 11);
			PushFollow(Follow._expr_in_switch_item3405);
			expr305=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr305.Tree);
			DebugLocation(480, 16);
			// SugarCpp.g:480:16: ( ',' expr )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==98))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:480:17: ',' expr
					{
					DebugLocation(480, 17);
					char_literal306=(IToken)Match(input,98,Follow._98_in_switch_item3408); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal306);

					DebugLocation(480, 21);
					PushFollow(Follow._expr_in_switch_item3410);
					expr307=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr307.Tree);

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(480, 28);
			// SugarCpp.g:480:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_0 = input.LA(1);

			if ((LA134_0==NEWLINE))
			{
				alt134 = 1;
			}
			else if ((LA134_0==163))
			{
				alt134 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:480:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(480, 30);
				// SugarCpp.g:480:30: ( NEWLINE )+
				int cnt133=0;
				try { DebugEnterSubRule(133);
				while (true)
				{
					int alt133=2;
					try { DebugEnterDecision(133, false);
					int LA133_0 = input.LA(1);

					if ((LA133_0==NEWLINE))
					{
						alt133 = 1;
					}


					} finally { DebugExitDecision(133); }
					switch (alt133)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:480:30: NEWLINE
						{
						DebugLocation(480, 30);
						NEWLINE308=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3416); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE308);


						}
						break;

					default:
						if (cnt133 >= 1)
							goto loop133;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee133 = new EarlyExitException( 133, input );
						DebugRecognitionException(eee133);
						throw eee133;
					}
					cnt133++;
				}
				loop133:
					;

				} finally { DebugExitSubRule(133); }

				DebugLocation(480, 39);
				PushFollow(Follow._stmt_block_in_switch_item3419);
				stmt_block309=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block309.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 480:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(480, 53);
					// SugarCpp.g:480:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(480, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(480, 67);
					// SugarCpp.g:480:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(480, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(480, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(480, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(480, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:481:30: 'then' inline_stmt_block
				{
				DebugLocation(481, 30);
				string_literal310=(IToken)Match(input,163,Follow._163_in_switch_item3465); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal310);

				DebugLocation(481, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3467);
				inline_stmt_block311=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block311.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 481:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(481, 58);
					// SugarCpp.g:481:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(481, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(481, 72);
					// SugarCpp.g:481:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(481, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(481, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(481, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(481, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 50);
			LeaveRule("switch_item", 50);
			LeaveRule_switch_item();
		}
		DebugLocation(483, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:485:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 51);
		TraceIn("stmt_switch", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal312 = default(IToken);
		IToken NEWLINE314 = default(IToken);
		IToken INDENT315 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken NEWLINE318 = default(IToken);
		IToken string_literal319 = default(IToken);
		IToken NEWLINE320 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		IToken DEDENT323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal312_tree = default(CommonTree);
		CommonTree NEWLINE314_tree = default(CommonTree);
		CommonTree INDENT315_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree NEWLINE318_tree = default(CommonTree);
		CommonTree string_literal319_tree = default(CommonTree);
		CommonTree NEWLINE320_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		CommonTree DEDENT323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(485, 1);
		try
		{
			// SugarCpp.g:486:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:486:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(486, 4);
			string_literal312=(IToken)Match(input,162,Follow._162_in_stmt_switch3507); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_162.Add(string_literal312);

			DebugLocation(486, 13);
			// SugarCpp.g:486:13: ( expr )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==IDENT||LA135_0==NUMBER||LA135_0==STRING||LA135_0==84||LA135_0==89||LA135_0==91||LA135_0==93||(LA135_0>=95 && LA135_0<=96)||(LA135_0>=99 && LA135_0<=100)||(LA135_0>=129 && LA135_0<=130)||LA135_0==152||LA135_0==155||(LA135_0>=157 && LA135_0<=158)||LA135_0==177))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:486:13: expr
				{
				DebugLocation(486, 13);
				PushFollow(Follow._expr_in_stmt_switch3509);
				expr313=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr313.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(135); }

			DebugLocation(486, 19);
			// SugarCpp.g:486:19: ( NEWLINE )+
			int cnt136=0;
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==NEWLINE))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:486:19: NEWLINE
					{
					DebugLocation(486, 19);
					NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3512); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE314);


					}
					break;

				default:
					if (cnt136 >= 1)
						goto loop136;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee136 = new EarlyExitException( 136, input );
					DebugRecognitionException(eee136);
					throw eee136;
				}
				cnt136++;
			}
			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(486, 28);
			INDENT315=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3515); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT315);

			DebugLocation(486, 35);
			// SugarCpp.g:486:35: ( NEWLINE )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==NEWLINE))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:486:35: NEWLINE
					{
					DebugLocation(486, 35);
					NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3517); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE316);


					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }

			DebugLocation(486, 44);
			// SugarCpp.g:486:44: ( switch_item ( NEWLINE )+ )+
			int cnt139=0;
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==170))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:486:45: switch_item ( NEWLINE )+
					{
					DebugLocation(486, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3521);
					switch_item317=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item317.Tree);
					DebugLocation(486, 57);
					// SugarCpp.g:486:57: ( NEWLINE )+
					int cnt138=0;
					try { DebugEnterSubRule(138);
					while (true)
					{
						int alt138=2;
						try { DebugEnterDecision(138, false);
						int LA138_0 = input.LA(1);

						if ((LA138_0==NEWLINE))
						{
							alt138 = 1;
						}


						} finally { DebugExitDecision(138); }
						switch (alt138)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:486:57: NEWLINE
							{
							DebugLocation(486, 57);
							NEWLINE318=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3523); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE318);


							}
							break;

						default:
							if (cnt138 >= 1)
								goto loop138;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee138 = new EarlyExitException( 138, input );
							DebugRecognitionException(eee138);
							throw eee138;
						}
						cnt138++;
					}
					loop138:
						;

					} finally { DebugExitSubRule(138); }


					}
					break;

				default:
					if (cnt139 >= 1)
						goto loop139;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee139 = new EarlyExitException( 139, input );
					DebugRecognitionException(eee139);
					throw eee139;
				}
				cnt139++;
			}
			loop139:
				;

			} finally { DebugExitSubRule(139); }

			DebugLocation(486, 68);
			// SugarCpp.g:486:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_0 = input.LA(1);

			if ((LA142_0==143))
			{
				alt142 = 1;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:486:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(486, 69);
				string_literal319=(IToken)Match(input,143,Follow._143_in_stmt_switch3529); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal319);

				DebugLocation(486, 76);
				// SugarCpp.g:486:76: ( NEWLINE )+
				int cnt140=0;
				try { DebugEnterSubRule(140);
				while (true)
				{
					int alt140=2;
					try { DebugEnterDecision(140, false);
					int LA140_0 = input.LA(1);

					if ((LA140_0==NEWLINE))
					{
						alt140 = 1;
					}


					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:76: NEWLINE
						{
						DebugLocation(486, 76);
						NEWLINE320=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3531); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE320);


						}
						break;

					default:
						if (cnt140 >= 1)
							goto loop140;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee140 = new EarlyExitException( 140, input );
						DebugRecognitionException(eee140);
						throw eee140;
					}
					cnt140++;
				}
				loop140:
					;

				} finally { DebugExitSubRule(140); }

				DebugLocation(486, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3534);
				stmt_block321=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block321.Tree);
				DebugLocation(486, 96);
				// SugarCpp.g:486:96: ( NEWLINE )*
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=2;
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==NEWLINE))
					{
						alt141 = 1;
					}


					} finally { DebugExitDecision(141); }
					switch ( alt141 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:96: NEWLINE
						{
						DebugLocation(486, 96);
						NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3536); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE322);


						}
						break;

					default:
						goto loop141;
					}
				}

				loop141:
					;

				} finally { DebugExitSubRule(141); }


				}
				break;

			}
			} finally { DebugExitSubRule(142); }

			DebugLocation(486, 107);
			DEDENT323=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3541); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT323);



			{
			// AST REWRITE
			// elements: stmt_block, expr, switch_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 486:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(486, 117);
				// SugarCpp.g:486:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(486, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(486, 131);
				// SugarCpp.g:486:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(486, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(486, 137);
				// SugarCpp.g:486:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(486, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(486, 150);
				// SugarCpp.g:486:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(486, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 51);
			LeaveRule("stmt_switch", 51);
			LeaveRule_stmt_switch();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:489:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 52);
		TraceIn("ident_list", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal325 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident326 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal325_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(489, 1);
		try
		{
			// SugarCpp.g:490:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:490:4: ident ( ',' ident )*
			{
			DebugLocation(490, 4);
			PushFollow(Follow._ident_in_ident_list3567);
			ident324=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident324.Tree);
			DebugLocation(490, 10);
			// SugarCpp.g:490:10: ( ',' ident )*
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_0 = input.LA(1);

				if ((LA143_0==98))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch ( alt143 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:490:11: ',' ident
					{
					DebugLocation(490, 11);
					char_literal325=(IToken)Match(input,98,Follow._98_in_ident_list3570); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal325);

					DebugLocation(490, 15);
					PushFollow(Follow._ident_in_ident_list3572);
					ident326=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident326.Tree);

					}
					break;

				default:
					goto loop143;
				}
			}

			loop143:
				;

			} finally { DebugExitSubRule(143); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 490:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(490, 26);
				// SugarCpp.g:490:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(490, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(490, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(490, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 52);
			LeaveRule("ident_list", 52);
			LeaveRule_ident_list();
		}
		DebugLocation(491, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:493:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 53);
		TraceIn("stmt_alloc", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken string_literal331 = default(IToken);
		IToken string_literal334 = default(IToken);
		IToken char_literal336 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr337 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree string_literal331_tree = default(CommonTree);
		CommonTree string_literal334_tree = default(CommonTree);
		CommonTree char_literal336_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(493, 1);
		try
		{
			// SugarCpp.g:494:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:494:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(494, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3594);
			ident_list327=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list327.Tree);
			DebugLocation(494, 15);
			// SugarCpp.g:494:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_0 = input.LA(1);

			if ((LA147_0==109))
			{
				alt147 = 1;
			}
			else if ((LA147_0==111))
			{
				alt147 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 147, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:494:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(494, 17);
				char_literal328=(IToken)Match(input,109,Follow._109_in_stmt_alloc3598); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal328);

				DebugLocation(494, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3600);
				type_name329=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name329.Tree);
				DebugLocation(494, 31);
				// SugarCpp.g:494:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt145=3;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				switch (input.LA(1))
				{
				case 111:
				case 119:
					{
					alt145 = 1;
					}
					break;
				case 91:
					{
					alt145 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 112:
				case 146:
				case 147:
				case 149:
				case 167:
				case 168:
				case 172:
					{
					alt145 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 145, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:494:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(494, 33);
					// SugarCpp.g:494:33: ( '=' | ':=' )
					int alt144=2;
					try { DebugEnterSubRule(144);
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==119))
					{
						alt144 = 1;
					}
					else if ((LA144_0==111))
					{
						alt144 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 144, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:494:34: '='
						{
						DebugLocation(494, 34);
						char_literal330=(IToken)Match(input,119,Follow._119_in_stmt_alloc3605); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_119.Add(char_literal330);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:494:40: ':='
						{
						DebugLocation(494, 40);
						string_literal331=(IToken)Match(input,111,Follow._111_in_stmt_alloc3609); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(string_literal331);


						}
						break;

					}
					} finally { DebugExitSubRule(144); }

					DebugLocation(494, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3612);
					where_expr332=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr332.Tree);


					{
					// AST REWRITE
					// elements: ident_list, where_expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 494:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(494, 61);
						// SugarCpp.g:494:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(494, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(494, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(494, 101);
						// SugarCpp.g:494:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(494, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:495:33: bracket_expr_list
					{
					DebugLocation(495, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3663);
					bracket_expr_list333=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list333.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 495:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(495, 55);
						// SugarCpp.g:495:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(495, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(495, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(495, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(495, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:496:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 496:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(496, 18);
						// SugarCpp.g:496:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(496, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(496, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(496, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(496, 58);
						// SugarCpp.g:496:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(496, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:498:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(498, 8);
				string_literal334=(IToken)Match(input,111,Follow._111_in_stmt_alloc3727); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(string_literal334);

				DebugLocation(498, 14);
				// SugarCpp.g:498:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:498:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(498, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3731);
				where_expr335=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr335.Tree);
				DebugLocation(498, 26);
				// SugarCpp.g:498:26: ( ',' where_expr )*
				try { DebugEnterSubRule(146);
				while (true)
				{
					int alt146=2;
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==98))
					{
						alt146 = 1;
					}


					} finally { DebugExitDecision(146); }
					switch ( alt146 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:498:27: ',' where_expr
						{
						DebugLocation(498, 27);
						char_literal336=(IToken)Match(input,98,Follow._98_in_stmt_alloc3734); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal336);

						DebugLocation(498, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3736);
						where_expr337=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr337.Tree);

						}
						break;

					default:
						goto loop146;
					}
				}

				loop146:
					;

				} finally { DebugExitSubRule(146); }


				}



				{
				// AST REWRITE
				// elements: 111, where_expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 498:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(498, 48);
					// SugarCpp.g:498:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(498, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_111.NextNode(), root_1);

					DebugLocation(498, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(498, 66);
					// SugarCpp.g:498:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(498, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(498, 78);
					// SugarCpp.g:498:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(498, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 53);
			LeaveRule("stmt_alloc", 53);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:501:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 54);
		TraceIn("stmt_modify", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal341 = default(IToken);
		IToken string_literal343 = default(IToken);
		IToken string_literal345 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op339 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal341_tree = default(CommonTree);
		CommonTree string_literal343_tree = default(CommonTree);
		CommonTree string_literal345_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(501, 1);
		try
		{
			// SugarCpp.g:502:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:502:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(502, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3766);
			lvalue338=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue338.Tree);
			DebugLocation(502, 11);
			// SugarCpp.g:502:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt148=5;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			switch (input.LA(1))
			{
			case 87:
			case 90:
			case 94:
			case 97:
			case 102:
			case 108:
			case 116:
			case 119:
			case 126:
			case 133:
			case 174:
				{
				alt148 = 1;
				}
				break;
			case 128:
				{
				alt148 = 2;
				}
				break;
			case 115:
				{
				alt148 = 3;
				}
				break;
			case 125:
				{
				alt148 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 112:
			case 146:
			case 147:
			case 149:
			case 167:
			case 168:
			case 172:
				{
				alt148 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 148, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:502:13: modify_expr_op where_expr
				{
				DebugLocation(502, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3770);
				modify_expr_op339=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op339.Tree);
				DebugLocation(502, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3772);
				where_expr340=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr340.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, modify_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 502:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(502, 42);
					// SugarCpp.g:502:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(502, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(502, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(502, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:503:13: '?=' where_expr
				{
				DebugLocation(503, 13);
				string_literal341=(IToken)Match(input,128,Follow._128_in_stmt_modify3796); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_128.Add(string_literal341);

				DebugLocation(503, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3798);
				where_expr342=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr342.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 128
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 503:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(503, 32);
					// SugarCpp.g:503:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_128.NextNode(), root_1);

					DebugLocation(503, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(503, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:504:16: '<<' where_expr
				{
				DebugLocation(504, 16);
				string_literal343=(IToken)Match(input,115,Follow._115_in_stmt_modify3825); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(string_literal343);

				DebugLocation(504, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3827);
				where_expr344=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr344.Tree);


				{
				// AST REWRITE
				// elements: 115, lvalue, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 504:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(504, 35);
					// SugarCpp.g:504:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(504, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(504, 46);
					adaptor.AddChild(root_1, stream_115.NextNode());
					DebugLocation(504, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(504, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:505:16: '>>' where_expr
				{
				DebugLocation(505, 16);
				string_literal345=(IToken)Match(input,125,Follow._125_in_stmt_modify3856); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(string_literal345);

				DebugLocation(505, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3858);
				where_expr346=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr346.Tree);


				{
				// AST REWRITE
				// elements: lvalue, 125, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 505:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(505, 35);
					// SugarCpp.g:505:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(505, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(505, 46);
					adaptor.AddChild(root_1, stream_125.NextNode());
					DebugLocation(505, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(505, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:506:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 506:7: -> lvalue
				{
					DebugLocation(506, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 54);
			LeaveRule("stmt_modify", 54);
			LeaveRule_stmt_modify();
		}
		DebugLocation(507, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:509:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 55);
		TraceIn("where_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt347 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(509, 1);
		try
		{
			// SugarCpp.g:510:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:510:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(510, 4);
			PushFollow(Follow._stmt_in_where_item3892);
			stmt347=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt347.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 55);
			LeaveRule("where_item", 55);
			LeaveRule_where_item();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:513:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE348 = default(IToken);
		IToken INDENT349 = default(IToken);
		IToken NEWLINE350 = default(IToken);
		IToken string_literal351 = default(IToken);
		IToken NEWLINE353 = default(IToken);
		IToken DEDENT354 = default(IToken);
		IToken NEWLINE355 = default(IToken);
		IToken INDENT356 = default(IToken);
		IToken NEWLINE357 = default(IToken);
		IToken NEWLINE359 = default(IToken);
		IToken DEDENT360 = default(IToken);
		IToken NEWLINE361 = default(IToken);
		IToken DEDENT362 = default(IToken);
		IToken NEWLINE363 = default(IToken);
		IToken INDENT364 = default(IToken);
		IToken NEWLINE365 = default(IToken);
		IToken NEWLINE367 = default(IToken);
		IToken DEDENT368 = default(IToken);
		IToken NEWLINE369 = default(IToken);
		IToken DEDENT370 = default(IToken);
		IToken string_literal371 = default(IToken);
		IToken NEWLINE372 = default(IToken);
		IToken INDENT373 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken DEDENT377 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item375 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE348_tree = default(CommonTree);
		CommonTree INDENT349_tree = default(CommonTree);
		CommonTree NEWLINE350_tree = default(CommonTree);
		CommonTree string_literal351_tree = default(CommonTree);
		CommonTree NEWLINE353_tree = default(CommonTree);
		CommonTree DEDENT354_tree = default(CommonTree);
		CommonTree NEWLINE355_tree = default(CommonTree);
		CommonTree INDENT356_tree = default(CommonTree);
		CommonTree NEWLINE357_tree = default(CommonTree);
		CommonTree NEWLINE359_tree = default(CommonTree);
		CommonTree DEDENT360_tree = default(CommonTree);
		CommonTree NEWLINE361_tree = default(CommonTree);
		CommonTree DEDENT362_tree = default(CommonTree);
		CommonTree NEWLINE363_tree = default(CommonTree);
		CommonTree INDENT364_tree = default(CommonTree);
		CommonTree NEWLINE365_tree = default(CommonTree);
		CommonTree NEWLINE367_tree = default(CommonTree);
		CommonTree DEDENT368_tree = default(CommonTree);
		CommonTree NEWLINE369_tree = default(CommonTree);
		CommonTree DEDENT370_tree = default(CommonTree);
		CommonTree string_literal371_tree = default(CommonTree);
		CommonTree NEWLINE372_tree = default(CommonTree);
		CommonTree INDENT373_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree DEDENT377_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(513, 1);
		try
		{
			// SugarCpp.g:514:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:514:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(514, 4);
			// SugarCpp.g:514:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:514:5: a= expr
			{
			DebugLocation(514, 6);
			PushFollow(Follow._expr_in_where_expr3906);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 514:12: -> $a
			{
				DebugLocation(514, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(514, 19);
			// SugarCpp.g:514:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt168=3;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			try
			{
				alt168 = dfa168.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:514:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(514, 21);
				// SugarCpp.g:514:21: ( NEWLINE )+
				int cnt149=0;
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==NEWLINE))
					{
						alt149 = 1;
					}


					} finally { DebugExitDecision(149); }
					switch (alt149)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:514:21: NEWLINE
						{
						DebugLocation(514, 21);
						NEWLINE348=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3916); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE348);


						}
						break;

					default:
						if (cnt149 >= 1)
							goto loop149;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee149 = new EarlyExitException( 149, input );
						DebugRecognitionException(eee149);
						throw eee149;
					}
					cnt149++;
				}
				loop149:
					;

				} finally { DebugExitSubRule(149); }

				DebugLocation(514, 30);
				INDENT349=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3919); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT349);

				DebugLocation(514, 37);
				// SugarCpp.g:514:37: ( NEWLINE )*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, false);
					int LA150_0 = input.LA(1);

					if ((LA150_0==NEWLINE))
					{
						alt150 = 1;
					}


					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:514:37: NEWLINE
						{
						DebugLocation(514, 37);
						NEWLINE350=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3921); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE350);


						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }

				DebugLocation(514, 46);
				string_literal351=(IToken)Match(input,171,Follow._171_in_where_expr3924); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(string_literal351);

				DebugLocation(514, 54);
				// SugarCpp.g:514:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt163=2;
				try { DebugEnterSubRule(163);
				try { DebugEnterDecision(163, false);
				int LA163_0 = input.LA(1);

				if ((LA163_0==IDENT||LA163_0==84||LA163_0==89||LA163_0==91||LA163_0==93||(LA163_0>=95 && LA163_0<=96)||(LA163_0>=99 && LA163_0<=100)||LA163_0==129||LA163_0==141||(LA163_0>=145 && LA163_0<=147)||LA163_0==154||LA163_0==158||LA163_0==160||LA163_0==162||(LA163_0>=165 && LA163_0<=169)||LA163_0==172||LA163_0==177))
				{
					alt163 = 1;
				}
				else if ((LA163_0==NEWLINE))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:514:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(514, 56);
					PushFollow(Follow._where_item_in_where_expr3928);
					where_item352=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item352.Tree);
					DebugLocation(514, 67);
					// SugarCpp.g:514:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt157=2;
					try { DebugEnterSubRule(157);
					try { DebugEnterDecision(157, false);
					try
					{
						alt157 = dfa157.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(157); }
					switch (alt157)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:514:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(514, 69);
						// SugarCpp.g:514:69: ( NEWLINE )*
						try { DebugEnterSubRule(151);
						while (true)
						{
							int alt151=2;
							try { DebugEnterDecision(151, false);
							int LA151_0 = input.LA(1);

							if ((LA151_0==NEWLINE))
							{
								alt151 = 1;
							}


							} finally { DebugExitDecision(151); }
							switch ( alt151 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:514:69: NEWLINE
								{
								DebugLocation(514, 69);
								NEWLINE353=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3932); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE353);


								}
								break;

							default:
								goto loop151;
							}
						}

						loop151:
							;

						} finally { DebugExitSubRule(151); }

						DebugLocation(514, 78);
						DEDENT354=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3935); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT354);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 514:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(514, 88);
							// SugarCpp.g:514:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(514, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(514, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(514, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:515:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(515, 21);
						// SugarCpp.g:515:21: ( NEWLINE )+
						int cnt152=0;
						try { DebugEnterSubRule(152);
						while (true)
						{
							int alt152=2;
							try { DebugEnterDecision(152, false);
							int LA152_0 = input.LA(1);

							if ((LA152_0==NEWLINE))
							{
								alt152 = 1;
							}


							} finally { DebugExitDecision(152); }
							switch (alt152)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:515:21: NEWLINE
								{
								DebugLocation(515, 21);
								NEWLINE355=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3968); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE355);


								}
								break;

							default:
								if (cnt152 >= 1)
									goto loop152;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee152 = new EarlyExitException( 152, input );
								DebugRecognitionException(eee152);
								throw eee152;
							}
							cnt152++;
						}
						loop152:
							;

						} finally { DebugExitSubRule(152); }

						DebugLocation(515, 30);
						INDENT356=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3971); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT356);

						DebugLocation(515, 37);
						// SugarCpp.g:515:37: ( NEWLINE )*
						try { DebugEnterSubRule(153);
						while (true)
						{
							int alt153=2;
							try { DebugEnterDecision(153, false);
							int LA153_0 = input.LA(1);

							if ((LA153_0==NEWLINE))
							{
								alt153 = 1;
							}


							} finally { DebugExitDecision(153); }
							switch ( alt153 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:515:37: NEWLINE
								{
								DebugLocation(515, 37);
								NEWLINE357=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3973); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE357);


								}
								break;

							default:
								goto loop153;
							}
						}

						loop153:
							;

						} finally { DebugExitSubRule(153); }

						DebugLocation(515, 46);
						// SugarCpp.g:515:46: ( where_item ( NEWLINE )+ )+
						int cnt155=0;
						try { DebugEnterSubRule(155);
						while (true)
						{
							int alt155=2;
							try { DebugEnterDecision(155, false);
							int LA155_0 = input.LA(1);

							if ((LA155_0==IDENT||LA155_0==84||LA155_0==89||LA155_0==91||LA155_0==93||(LA155_0>=95 && LA155_0<=96)||(LA155_0>=99 && LA155_0<=100)||LA155_0==129||LA155_0==141||(LA155_0>=145 && LA155_0<=147)||LA155_0==154||LA155_0==158||LA155_0==160||LA155_0==162||(LA155_0>=165 && LA155_0<=169)||LA155_0==172||LA155_0==177))
							{
								alt155 = 1;
							}


							} finally { DebugExitDecision(155); }
							switch (alt155)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:515:47: where_item ( NEWLINE )+
								{
								DebugLocation(515, 47);
								PushFollow(Follow._where_item_in_where_expr3977);
								where_item358=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item358.Tree);
								DebugLocation(515, 58);
								// SugarCpp.g:515:58: ( NEWLINE )+
								int cnt154=0;
								try { DebugEnterSubRule(154);
								while (true)
								{
									int alt154=2;
									try { DebugEnterDecision(154, false);
									int LA154_0 = input.LA(1);

									if ((LA154_0==NEWLINE))
									{
										alt154 = 1;
									}


									} finally { DebugExitDecision(154); }
									switch (alt154)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:515:58: NEWLINE
										{
										DebugLocation(515, 58);
										NEWLINE359=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3979); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE359);


										}
										break;

									default:
										if (cnt154 >= 1)
											goto loop154;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee154 = new EarlyExitException( 154, input );
										DebugRecognitionException(eee154);
										throw eee154;
									}
									cnt154++;
								}
								loop154:
									;

								} finally { DebugExitSubRule(154); }


								}
								break;

							default:
								if (cnt155 >= 1)
									goto loop155;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee155 = new EarlyExitException( 155, input );
								DebugRecognitionException(eee155);
								throw eee155;
							}
							cnt155++;
						}
						loop155:
							;

						} finally { DebugExitSubRule(155); }

						DebugLocation(515, 69);
						DEDENT360=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3984); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT360);

						DebugLocation(515, 76);
						// SugarCpp.g:515:76: ( NEWLINE )*
						try { DebugEnterSubRule(156);
						while (true)
						{
							int alt156=2;
							try { DebugEnterDecision(156, false);
							int LA156_0 = input.LA(1);

							if ((LA156_0==NEWLINE))
							{
								alt156 = 1;
							}


							} finally { DebugExitDecision(156); }
							switch ( alt156 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:515:76: NEWLINE
								{
								DebugLocation(515, 76);
								NEWLINE361=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3986); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE361);


								}
								break;

							default:
								goto loop156;
							}
						}

						loop156:
							;

						} finally { DebugExitSubRule(156); }

						DebugLocation(515, 85);
						DEDENT362=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3989); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT362);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 515:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(515, 95);
							// SugarCpp.g:515:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(515, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(515, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(515, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(515, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(157); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:517:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(517, 17);
					// SugarCpp.g:517:17: ( NEWLINE )+
					int cnt158=0;
					try { DebugEnterSubRule(158);
					while (true)
					{
						int alt158=2;
						try { DebugEnterDecision(158, false);
						int LA158_0 = input.LA(1);

						if ((LA158_0==NEWLINE))
						{
							alt158 = 1;
						}


						} finally { DebugExitDecision(158); }
						switch (alt158)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:517:17: NEWLINE
							{
							DebugLocation(517, 17);
							NEWLINE363=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4039); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE363);


							}
							break;

						default:
							if (cnt158 >= 1)
								goto loop158;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee158 = new EarlyExitException( 158, input );
							DebugRecognitionException(eee158);
							throw eee158;
						}
						cnt158++;
					}
					loop158:
						;

					} finally { DebugExitSubRule(158); }

					DebugLocation(517, 26);
					INDENT364=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4042); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT364);

					DebugLocation(517, 33);
					// SugarCpp.g:517:33: ( NEWLINE )*
					try { DebugEnterSubRule(159);
					while (true)
					{
						int alt159=2;
						try { DebugEnterDecision(159, false);
						int LA159_0 = input.LA(1);

						if ((LA159_0==NEWLINE))
						{
							alt159 = 1;
						}


						} finally { DebugExitDecision(159); }
						switch ( alt159 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:517:33: NEWLINE
							{
							DebugLocation(517, 33);
							NEWLINE365=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4044); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE365);


							}
							break;

						default:
							goto loop159;
						}
					}

					loop159:
						;

					} finally { DebugExitSubRule(159); }

					DebugLocation(517, 42);
					// SugarCpp.g:517:42: ( where_item ( NEWLINE )+ )+
					int cnt161=0;
					try { DebugEnterSubRule(161);
					while (true)
					{
						int alt161=2;
						try { DebugEnterDecision(161, false);
						int LA161_0 = input.LA(1);

						if ((LA161_0==IDENT||LA161_0==84||LA161_0==89||LA161_0==91||LA161_0==93||(LA161_0>=95 && LA161_0<=96)||(LA161_0>=99 && LA161_0<=100)||LA161_0==129||LA161_0==141||(LA161_0>=145 && LA161_0<=147)||LA161_0==154||LA161_0==158||LA161_0==160||LA161_0==162||(LA161_0>=165 && LA161_0<=169)||LA161_0==172||LA161_0==177))
						{
							alt161 = 1;
						}


						} finally { DebugExitDecision(161); }
						switch (alt161)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:517:43: where_item ( NEWLINE )+
							{
							DebugLocation(517, 43);
							PushFollow(Follow._where_item_in_where_expr4048);
							where_item366=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item366.Tree);
							DebugLocation(517, 54);
							// SugarCpp.g:517:54: ( NEWLINE )+
							int cnt160=0;
							try { DebugEnterSubRule(160);
							while (true)
							{
								int alt160=2;
								try { DebugEnterDecision(160, false);
								int LA160_0 = input.LA(1);

								if ((LA160_0==NEWLINE))
								{
									alt160 = 1;
								}


								} finally { DebugExitDecision(160); }
								switch (alt160)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:517:54: NEWLINE
									{
									DebugLocation(517, 54);
									NEWLINE367=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4050); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE367);


									}
									break;

								default:
									if (cnt160 >= 1)
										goto loop160;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee160 = new EarlyExitException( 160, input );
									DebugRecognitionException(eee160);
									throw eee160;
								}
								cnt160++;
							}
							loop160:
								;

							} finally { DebugExitSubRule(160); }


							}
							break;

						default:
							if (cnt161 >= 1)
								goto loop161;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee161 = new EarlyExitException( 161, input );
							DebugRecognitionException(eee161);
							throw eee161;
						}
						cnt161++;
					}
					loop161:
						;

					} finally { DebugExitSubRule(161); }

					DebugLocation(517, 65);
					DEDENT368=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4055); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT368);

					DebugLocation(517, 72);
					// SugarCpp.g:517:72: ( NEWLINE )*
					try { DebugEnterSubRule(162);
					while (true)
					{
						int alt162=2;
						try { DebugEnterDecision(162, false);
						int LA162_0 = input.LA(1);

						if ((LA162_0==NEWLINE))
						{
							alt162 = 1;
						}


						} finally { DebugExitDecision(162); }
						switch ( alt162 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:517:72: NEWLINE
							{
							DebugLocation(517, 72);
							NEWLINE369=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4057); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE369);


							}
							break;

						default:
							goto loop162;
						}
					}

					loop162:
						;

					} finally { DebugExitSubRule(162); }

					DebugLocation(517, 81);
					DEDENT370=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4060); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT370);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(517, 91);
						// SugarCpp.g:517:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(517, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(517, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(517, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(163); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:519:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(519, 9);
				string_literal371=(IToken)Match(input,171,Follow._171_in_where_expr4098); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(string_literal371);

				DebugLocation(519, 17);
				// SugarCpp.g:519:17: ( NEWLINE )+
				int cnt164=0;
				try { DebugEnterSubRule(164);
				while (true)
				{
					int alt164=2;
					try { DebugEnterDecision(164, false);
					int LA164_0 = input.LA(1);

					if ((LA164_0==NEWLINE))
					{
						alt164 = 1;
					}


					} finally { DebugExitDecision(164); }
					switch (alt164)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:519:17: NEWLINE
						{
						DebugLocation(519, 17);
						NEWLINE372=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4100); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE372);


						}
						break;

					default:
						if (cnt164 >= 1)
							goto loop164;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee164 = new EarlyExitException( 164, input );
						DebugRecognitionException(eee164);
						throw eee164;
					}
					cnt164++;
				}
				loop164:
					;

				} finally { DebugExitSubRule(164); }

				DebugLocation(519, 26);
				INDENT373=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4103); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT373);

				DebugLocation(519, 33);
				// SugarCpp.g:519:33: ( NEWLINE )*
				try { DebugEnterSubRule(165);
				while (true)
				{
					int alt165=2;
					try { DebugEnterDecision(165, false);
					int LA165_0 = input.LA(1);

					if ((LA165_0==NEWLINE))
					{
						alt165 = 1;
					}


					} finally { DebugExitDecision(165); }
					switch ( alt165 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:519:33: NEWLINE
						{
						DebugLocation(519, 33);
						NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4105); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE374);


						}
						break;

					default:
						goto loop165;
					}
				}

				loop165:
					;

				} finally { DebugExitSubRule(165); }

				DebugLocation(519, 42);
				// SugarCpp.g:519:42: ( where_item ( NEWLINE )+ )+
				int cnt167=0;
				try { DebugEnterSubRule(167);
				while (true)
				{
					int alt167=2;
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==IDENT||LA167_0==84||LA167_0==89||LA167_0==91||LA167_0==93||(LA167_0>=95 && LA167_0<=96)||(LA167_0>=99 && LA167_0<=100)||LA167_0==129||LA167_0==141||(LA167_0>=145 && LA167_0<=147)||LA167_0==154||LA167_0==158||LA167_0==160||LA167_0==162||(LA167_0>=165 && LA167_0<=169)||LA167_0==172||LA167_0==177))
					{
						alt167 = 1;
					}


					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:519:43: where_item ( NEWLINE )+
						{
						DebugLocation(519, 43);
						PushFollow(Follow._where_item_in_where_expr4109);
						where_item375=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item375.Tree);
						DebugLocation(519, 54);
						// SugarCpp.g:519:54: ( NEWLINE )+
						int cnt166=0;
						try { DebugEnterSubRule(166);
						while (true)
						{
							int alt166=2;
							try { DebugEnterDecision(166, false);
							int LA166_0 = input.LA(1);

							if ((LA166_0==NEWLINE))
							{
								alt166 = 1;
							}


							} finally { DebugExitDecision(166); }
							switch (alt166)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:519:54: NEWLINE
								{
								DebugLocation(519, 54);
								NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4111); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE376);


								}
								break;

							default:
								if (cnt166 >= 1)
									goto loop166;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee166 = new EarlyExitException( 166, input );
								DebugRecognitionException(eee166);
								throw eee166;
							}
							cnt166++;
						}
						loop166:
							;

						} finally { DebugExitSubRule(166); }


						}
						break;

					default:
						if (cnt167 >= 1)
							goto loop167;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee167 = new EarlyExitException( 167, input );
						DebugRecognitionException(eee167);
						throw eee167;
					}
					cnt167++;
				}
				loop167:
					;

				} finally { DebugExitSubRule(167); }

				DebugLocation(519, 65);
				DEDENT377=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4116); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT377);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 519:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(519, 75);
					// SugarCpp.g:519:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(519, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(519, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(519, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(519, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:520:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 520:15: -> expr
				{
					DebugLocation(520, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(168); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(522, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:524:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 57);
		TraceIn("let_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal378 = default(IToken);
		IToken string_literal380 = default(IToken);
		IToken NEWLINE382 = default(IToken);
		IToken INDENT383 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken DEDENT387 = default(IToken);
		IToken NEWLINE389 = default(IToken);
		IToken INDENT390 = default(IToken);
		IToken NEWLINE391 = default(IToken);
		IToken NEWLINE393 = default(IToken);
		IToken string_literal394 = default(IToken);
		IToken NEWLINE396 = default(IToken);
		IToken DEDENT397 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item379 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr381 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr385 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr388 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item392 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal378_tree = default(CommonTree);
		CommonTree string_literal380_tree = default(CommonTree);
		CommonTree NEWLINE382_tree = default(CommonTree);
		CommonTree INDENT383_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree DEDENT387_tree = default(CommonTree);
		CommonTree NEWLINE389_tree = default(CommonTree);
		CommonTree INDENT390_tree = default(CommonTree);
		CommonTree NEWLINE391_tree = default(CommonTree);
		CommonTree NEWLINE393_tree = default(CommonTree);
		CommonTree string_literal394_tree = default(CommonTree);
		CommonTree NEWLINE396_tree = default(CommonTree);
		CommonTree DEDENT397_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(524, 1);
		try
		{
			// SugarCpp.g:525:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:525:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(525, 4);
			string_literal378=(IToken)Match(input,152,Follow._152_in_let_expr4174); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_152.Add(string_literal378);

			DebugLocation(525, 10);
			PushFollow(Follow._where_item_in_let_expr4176);
			where_item379=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item379.Tree);
			DebugLocation(525, 21);
			// SugarCpp.g:525:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_0 = input.LA(1);

			if ((LA179_0==149))
			{
				alt179 = 1;
			}
			else if ((LA179_0==NEWLINE))
			{
				alt179 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:525:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(525, 23);
				string_literal380=(IToken)Match(input,149,Follow._149_in_let_expr4180); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal380);

				DebugLocation(525, 28);
				// SugarCpp.g:525:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt173=2;
				try { DebugEnterSubRule(173);
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==IDENT||LA173_0==NUMBER||LA173_0==STRING||LA173_0==84||LA173_0==89||LA173_0==91||LA173_0==93||(LA173_0>=95 && LA173_0<=96)||(LA173_0>=99 && LA173_0<=100)||(LA173_0>=129 && LA173_0<=130)||LA173_0==152||LA173_0==155||(LA173_0>=157 && LA173_0<=158)||LA173_0==177))
				{
					alt173 = 1;
				}
				else if ((LA173_0==NEWLINE))
				{
					alt173 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 173, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:525:30: expr
					{
					DebugLocation(525, 30);
					PushFollow(Follow._expr_in_let_expr4184);
					expr381=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr381.Tree);


					{
					// AST REWRITE
					// elements: expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 525:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(525, 38);
						// SugarCpp.g:525:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(525, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(525, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(525, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(525, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:526:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(526, 12);
					// SugarCpp.g:526:12: ( NEWLINE )+
					int cnt169=0;
					try { DebugEnterSubRule(169);
					while (true)
					{
						int alt169=2;
						try { DebugEnterDecision(169, false);
						int LA169_0 = input.LA(1);

						if ((LA169_0==NEWLINE))
						{
							alt169 = 1;
						}


						} finally { DebugExitDecision(169); }
						switch (alt169)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:526:12: NEWLINE
							{
							DebugLocation(526, 12);
							NEWLINE382=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4208); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE382);


							}
							break;

						default:
							if (cnt169 >= 1)
								goto loop169;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee169 = new EarlyExitException( 169, input );
							DebugRecognitionException(eee169);
							throw eee169;
						}
						cnt169++;
					}
					loop169:
						;

					} finally { DebugExitSubRule(169); }

					DebugLocation(526, 21);
					// SugarCpp.g:526:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt172=2;
					try { DebugEnterSubRule(172);
					try { DebugEnterDecision(172, false);
					int LA172_0 = input.LA(1);

					if ((LA172_0==INDENT))
					{
						alt172 = 1;
					}
					else if ((LA172_0==IDENT||LA172_0==NUMBER||LA172_0==STRING||LA172_0==84||LA172_0==89||LA172_0==91||LA172_0==93||(LA172_0>=95 && LA172_0<=96)||(LA172_0>=99 && LA172_0<=100)||(LA172_0>=129 && LA172_0<=130)||LA172_0==152||LA172_0==155||(LA172_0>=157 && LA172_0<=158)||LA172_0==177))
					{
						alt172 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 172, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(172); }
					switch (alt172)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(526, 23);
						INDENT383=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4213); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT383);

						DebugLocation(526, 30);
						// SugarCpp.g:526:30: ( NEWLINE )*
						try { DebugEnterSubRule(170);
						while (true)
						{
							int alt170=2;
							try { DebugEnterDecision(170, false);
							int LA170_0 = input.LA(1);

							if ((LA170_0==NEWLINE))
							{
								alt170 = 1;
							}


							} finally { DebugExitDecision(170); }
							switch ( alt170 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:526:30: NEWLINE
								{
								DebugLocation(526, 30);
								NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4215); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE384);


								}
								break;

							default:
								goto loop170;
							}
						}

						loop170:
							;

						} finally { DebugExitSubRule(170); }

						DebugLocation(526, 39);
						PushFollow(Follow._expr_in_let_expr4218);
						expr385=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr385.Tree);
						DebugLocation(526, 44);
						// SugarCpp.g:526:44: ( NEWLINE )+
						int cnt171=0;
						try { DebugEnterSubRule(171);
						while (true)
						{
							int alt171=2;
							try { DebugEnterDecision(171, false);
							int LA171_0 = input.LA(1);

							if ((LA171_0==NEWLINE))
							{
								alt171 = 1;
							}


							} finally { DebugExitDecision(171); }
							switch (alt171)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:526:44: NEWLINE
								{
								DebugLocation(526, 44);
								NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4220); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE386);


								}
								break;

							default:
								if (cnt171 >= 1)
									goto loop171;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee171 = new EarlyExitException( 171, input );
								DebugRecognitionException(eee171);
								throw eee171;
							}
							cnt171++;
						}
						loop171:
							;

						} finally { DebugExitSubRule(171); }

						DebugLocation(526, 53);
						DEDENT387=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4223); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT387);



						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 526:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(526, 63);
							// SugarCpp.g:526:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(526, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(526, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(526, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(526, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:527:14: expr
						{
						DebugLocation(527, 14);
						PushFollow(Follow._expr_in_let_expr4249);
						expr388=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr388.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 527:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(527, 22);
							// SugarCpp.g:527:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(527, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(527, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(527, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(527, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(172); }


					}
					break;

				}
				} finally { DebugExitSubRule(173); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:530:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(530, 11);
				// SugarCpp.g:530:11: ( NEWLINE )+
				int cnt174=0;
				try { DebugEnterSubRule(174);
				while (true)
				{
					int alt174=2;
					try { DebugEnterDecision(174, false);
					int LA174_0 = input.LA(1);

					if ((LA174_0==NEWLINE))
					{
						alt174 = 1;
					}


					} finally { DebugExitDecision(174); }
					switch (alt174)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:530:11: NEWLINE
						{
						DebugLocation(530, 11);
						NEWLINE389=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4296); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE389);


						}
						break;

					default:
						if (cnt174 >= 1)
							goto loop174;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee174 = new EarlyExitException( 174, input );
						DebugRecognitionException(eee174);
						throw eee174;
					}
					cnt174++;
				}
				loop174:
					;

				} finally { DebugExitSubRule(174); }

				DebugLocation(530, 20);
				INDENT390=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4299); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT390);

				DebugLocation(530, 27);
				// SugarCpp.g:530:27: ( NEWLINE )*
				try { DebugEnterSubRule(175);
				while (true)
				{
					int alt175=2;
					try { DebugEnterDecision(175, false);
					int LA175_0 = input.LA(1);

					if ((LA175_0==NEWLINE))
					{
						alt175 = 1;
					}


					} finally { DebugExitDecision(175); }
					switch ( alt175 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:530:27: NEWLINE
						{
						DebugLocation(530, 27);
						NEWLINE391=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4301); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE391);


						}
						break;

					default:
						goto loop175;
					}
				}

				loop175:
					;

				} finally { DebugExitSubRule(175); }

				DebugLocation(530, 36);
				// SugarCpp.g:530:36: ( where_item ( NEWLINE )+ )+
				int cnt177=0;
				try { DebugEnterSubRule(177);
				while (true)
				{
					int alt177=2;
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==IDENT||LA177_0==84||LA177_0==89||LA177_0==91||LA177_0==93||(LA177_0>=95 && LA177_0<=96)||(LA177_0>=99 && LA177_0<=100)||LA177_0==129||LA177_0==141||(LA177_0>=145 && LA177_0<=147)||LA177_0==154||LA177_0==158||LA177_0==160||LA177_0==162||(LA177_0>=165 && LA177_0<=169)||LA177_0==172||LA177_0==177))
					{
						alt177 = 1;
					}


					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:530:37: where_item ( NEWLINE )+
						{
						DebugLocation(530, 37);
						PushFollow(Follow._where_item_in_let_expr4305);
						where_item392=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item392.Tree);
						DebugLocation(530, 48);
						// SugarCpp.g:530:48: ( NEWLINE )+
						int cnt176=0;
						try { DebugEnterSubRule(176);
						while (true)
						{
							int alt176=2;
							try { DebugEnterDecision(176, false);
							int LA176_0 = input.LA(1);

							if ((LA176_0==NEWLINE))
							{
								alt176 = 1;
							}


							} finally { DebugExitDecision(176); }
							switch (alt176)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:530:48: NEWLINE
								{
								DebugLocation(530, 48);
								NEWLINE393=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4307); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE393);


								}
								break;

							default:
								if (cnt176 >= 1)
									goto loop176;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee176 = new EarlyExitException( 176, input );
								DebugRecognitionException(eee176);
								throw eee176;
							}
							cnt176++;
						}
						loop176:
							;

						} finally { DebugExitSubRule(176); }


						}
						break;

					default:
						if (cnt177 >= 1)
							goto loop177;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee177 = new EarlyExitException( 177, input );
						DebugRecognitionException(eee177);
						throw eee177;
					}
					cnt177++;
				}
				loop177:
					;

				} finally { DebugExitSubRule(177); }

				DebugLocation(530, 59);
				string_literal394=(IToken)Match(input,149,Follow._149_in_let_expr4312); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal394);

				DebugLocation(530, 64);
				PushFollow(Follow._expr_in_let_expr4314);
				expr395=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr395.Tree);
				DebugLocation(530, 69);
				// SugarCpp.g:530:69: ( NEWLINE )+
				int cnt178=0;
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=2;
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==NEWLINE))
					{
						alt178 = 1;
					}


					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:530:69: NEWLINE
						{
						DebugLocation(530, 69);
						NEWLINE396=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4316); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE396);


						}
						break;

					default:
						if (cnt178 >= 1)
							goto loop178;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee178 = new EarlyExitException( 178, input );
						DebugRecognitionException(eee178);
						throw eee178;
					}
					cnt178++;
				}
				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(530, 78);
				DEDENT397=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4319); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT397);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 530:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(530, 88);
					// SugarCpp.g:530:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(530, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(530, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(530, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(530, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(179); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 57);
			LeaveRule("let_expr", 57);
			LeaveRule_let_expr();
		}
		DebugLocation(532, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:534:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal398 = default(IToken);
		IToken string_literal400 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr401 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal398_tree = default(CommonTree);
		CommonTree string_literal400_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(534, 1);
		try
		{
			// SugarCpp.g:535:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:535:4: '|' expr '=>' where_expr
			{
			DebugLocation(535, 4);
			char_literal398=(IToken)Match(input,173,Follow._173_in_match_item4351); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_173.Add(char_literal398);

			DebugLocation(535, 8);
			PushFollow(Follow._expr_in_match_item4353);
			expr399=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr399.Tree);
			DebugLocation(535, 13);
			string_literal400=(IToken)Match(input,122,Follow._122_in_match_item4355); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_122.Add(string_literal400);

			DebugLocation(535, 18);
			PushFollow(Follow._where_expr_in_match_item4357);
			where_expr401=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr401.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 535:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(535, 32);
				// SugarCpp.g:535:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(535, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(535, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(535, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(536, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:538:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal402 = default(IToken);
		IToken NEWLINE404 = default(IToken);
		IToken INDENT405 = default(IToken);
		IToken NEWLINE406 = default(IToken);
		IToken NEWLINE408 = default(IToken);
		IToken DEDENT409 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr403 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item407 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal402_tree = default(CommonTree);
		CommonTree NEWLINE404_tree = default(CommonTree);
		CommonTree INDENT405_tree = default(CommonTree);
		CommonTree NEWLINE406_tree = default(CommonTree);
		CommonTree NEWLINE408_tree = default(CommonTree);
		CommonTree DEDENT409_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(538, 1);
		try
		{
			// SugarCpp.g:539:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:539:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(539, 4);
			string_literal402=(IToken)Match(input,155,Follow._155_in_match_expr4378); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_155.Add(string_literal402);

			DebugLocation(539, 12);
			// SugarCpp.g:539:12: ( expr )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_0 = input.LA(1);

			if ((LA180_0==IDENT||LA180_0==NUMBER||LA180_0==STRING||LA180_0==84||LA180_0==89||LA180_0==91||LA180_0==93||(LA180_0>=95 && LA180_0<=96)||(LA180_0>=99 && LA180_0<=100)||(LA180_0>=129 && LA180_0<=130)||LA180_0==152||LA180_0==155||(LA180_0>=157 && LA180_0<=158)||LA180_0==177))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:539:12: expr
				{
				DebugLocation(539, 12);
				PushFollow(Follow._expr_in_match_expr4380);
				expr403=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr403.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(539, 18);
			// SugarCpp.g:539:18: ( NEWLINE )+
			int cnt181=0;
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=2;
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==NEWLINE))
				{
					alt181 = 1;
				}


				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:539:18: NEWLINE
					{
					DebugLocation(539, 18);
					NEWLINE404=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4383); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE404);


					}
					break;

				default:
					if (cnt181 >= 1)
						goto loop181;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee181 = new EarlyExitException( 181, input );
					DebugRecognitionException(eee181);
					throw eee181;
				}
				cnt181++;
			}
			loop181:
				;

			} finally { DebugExitSubRule(181); }

			DebugLocation(539, 27);
			INDENT405=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4386); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT405);

			DebugLocation(539, 34);
			// SugarCpp.g:539:34: ( NEWLINE )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==NEWLINE))
				{
					alt182 = 1;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:539:34: NEWLINE
					{
					DebugLocation(539, 34);
					NEWLINE406=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4388); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE406);


					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }

			DebugLocation(539, 43);
			// SugarCpp.g:539:43: ( match_item ( NEWLINE )+ )+
			int cnt184=0;
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=2;
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==173))
				{
					alt184 = 1;
				}


				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:539:44: match_item ( NEWLINE )+
					{
					DebugLocation(539, 44);
					PushFollow(Follow._match_item_in_match_expr4392);
					match_item407=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item407.Tree);
					DebugLocation(539, 55);
					// SugarCpp.g:539:55: ( NEWLINE )+
					int cnt183=0;
					try { DebugEnterSubRule(183);
					while (true)
					{
						int alt183=2;
						try { DebugEnterDecision(183, false);
						int LA183_0 = input.LA(1);

						if ((LA183_0==NEWLINE))
						{
							alt183 = 1;
						}


						} finally { DebugExitDecision(183); }
						switch (alt183)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:539:55: NEWLINE
							{
							DebugLocation(539, 55);
							NEWLINE408=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4394); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE408);


							}
							break;

						default:
							if (cnt183 >= 1)
								goto loop183;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee183 = new EarlyExitException( 183, input );
							DebugRecognitionException(eee183);
							throw eee183;
						}
						cnt183++;
					}
					loop183:
						;

					} finally { DebugExitSubRule(183); }


					}
					break;

				default:
					if (cnt184 >= 1)
						goto loop184;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee184 = new EarlyExitException( 184, input );
					DebugRecognitionException(eee184);
					throw eee184;
				}
				cnt184++;
			}
			loop184:
				;

			} finally { DebugExitSubRule(184); }

			DebugLocation(539, 66);
			DEDENT409=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4399); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT409);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 539:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(539, 76);
				// SugarCpp.g:539:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(539, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(539, 89);
				// SugarCpp.g:539:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(539, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(539, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(539, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:542:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr410 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr411 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr412 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(542, 1);
		try
		{
			// SugarCpp.g:543:2: ( feed_expr | match_expr | let_expr )
			int alt185=3;
			try { DebugEnterDecision(185, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 84:
			case 89:
			case 91:
			case 93:
			case 95:
			case 96:
			case 99:
			case 100:
			case 129:
			case 130:
			case 157:
			case 158:
			case 177:
				{
				alt185 = 1;
				}
				break;
			case 155:
				{
				alt185 = 2;
				}
				break;
			case 152:
				{
				alt185 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 185, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(185); }
			switch (alt185)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:543:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(543, 4);
				PushFollow(Follow._feed_expr_in_expr4422);
				feed_expr410=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr410.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:544:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(544, 4);
				PushFollow(Follow._match_expr_in_expr4427);
				match_expr411=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr411.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:545:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(545, 4);
				PushFollow(Follow._let_expr_in_expr4432);
				let_expr412=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr412.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(546, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:548:1: feed_expr : ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 61);
		TraceIn("feed_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal413 = default(IToken);
		IToken string_literal415 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr414 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr416 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr417 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal413_tree = default(CommonTree);
		CommonTree string_literal415_tree = default(CommonTree);
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(548, 1);
		try
		{
			// SugarCpp.g:549:2: ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt187=2;
			try { DebugEnterDecision(187, false);
			switch (input.LA(1))
			{
			case 91:
				{
				int LA187_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 84:
			case 89:
			case 93:
			case 95:
			case 96:
			case 99:
			case 100:
			case 158:
			case 177:
				{
				int LA187_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 157:
				{
				int LA187_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA187_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA187_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA187_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA187_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt187 = 1;
				}
				else if ((true))
				{
					alt187 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				alt187 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 187, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:549:4: ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(549, 36);
				// SugarCpp.g:549:36: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:549:37: a= modify_expr
				{
				DebugLocation(549, 38);
				PushFollow(Follow._modify_expr_in_feed_expr4461);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 549:51: -> $a
				{
					DebugLocation(549, 55);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(549, 58);
				// SugarCpp.g:549:58: ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt186=2;
				try { DebugEnterSubRule(186);
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==118))
				{
					alt186 = 1;
				}
				else if ((LA186_0==175))
				{
					alt186 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 186, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(186); }
				switch (alt186)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:549:60: '<|' list_expr
					{
					DebugLocation(549, 60);
					string_literal413=(IToken)Match(input,118,Follow._118_in_feed_expr4471); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_118.Add(string_literal413);

					DebugLocation(549, 65);
					PushFollow(Follow._list_expr_in_feed_expr4473);
					list_expr414=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr414.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 549:75: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(549, 78);
						// SugarCpp.g:549:78: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(549, 80);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(549, 91);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(549, 101);
						// SugarCpp.g:549:101: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(549, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(549, 113);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:550:18: '|>' list_expr
					{
					DebugLocation(550, 18);
					string_literal415=(IToken)Match(input,175,Follow._175_in_feed_expr4507); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_175.Add(string_literal415);

					DebugLocation(550, 23);
					PushFollow(Follow._list_expr_in_feed_expr4509);
					list_expr416=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr416.Tree);


					{
					// AST REWRITE
					// elements: list_expr, feed_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 550:33: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(550, 36);
						// SugarCpp.g:550:36: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(550, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(550, 48);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(550, 58);
						// SugarCpp.g:550:58: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(550, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(550, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(186); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:552:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(552, 4);
				PushFollow(Follow._list_expr_in_feed_expr4546);
				list_expr417=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr417.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 61);
			LeaveRule("feed_expr", 61);
			LeaveRule_feed_expr();
		}
		DebugLocation(553, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:555:1: list_expr : ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 62);
		TraceIn("list_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal418 = default(IToken);
		IToken string_literal420 = default(IToken);
		IToken char_literal422 = default(IToken);
		IToken char_literal424 = default(IToken);
		IToken char_literal425 = default(IToken);
		IToken char_literal427 = default(IToken);
		IToken char_literal428 = default(IToken);
		IToken NEWLINE429 = default(IToken);
		IToken INDENT430 = default(IToken);
		IToken DEDENT431 = default(IToken);
		IToken char_literal433 = default(IToken);
		IToken NEWLINE434 = default(IToken);
		IToken INDENT435 = default(IToken);
		IToken DEDENT436 = default(IToken);
		IToken char_literal438 = default(IToken);
		IToken NEWLINE439 = default(IToken);
		IToken INDENT440 = default(IToken);
		IToken DEDENT441 = default(IToken);
		IToken char_literal442 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr419 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item421 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr437 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr443 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal418_tree = default(CommonTree);
		CommonTree string_literal420_tree = default(CommonTree);
		CommonTree char_literal422_tree = default(CommonTree);
		CommonTree char_literal424_tree = default(CommonTree);
		CommonTree char_literal425_tree = default(CommonTree);
		CommonTree char_literal427_tree = default(CommonTree);
		CommonTree char_literal428_tree = default(CommonTree);
		CommonTree NEWLINE429_tree = default(CommonTree);
		CommonTree INDENT430_tree = default(CommonTree);
		CommonTree DEDENT431_tree = default(CommonTree);
		CommonTree char_literal433_tree = default(CommonTree);
		CommonTree NEWLINE434_tree = default(CommonTree);
		CommonTree INDENT435_tree = default(CommonTree);
		CommonTree DEDENT436_tree = default(CommonTree);
		CommonTree char_literal438_tree = default(CommonTree);
		CommonTree NEWLINE439_tree = default(CommonTree);
		CommonTree INDENT440_tree = default(CommonTree);
		CommonTree DEDENT441_tree = default(CommonTree);
		CommonTree char_literal442_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(555, 1);
		try
		{
			// SugarCpp.g:556:2: ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt194=3;
			try { DebugEnterDecision(194, false);
			int LA194_0 = input.LA(1);

			if ((LA194_0==130))
			{
				int LA194_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA194_0==IDENT||LA194_0==NUMBER||LA194_0==STRING||LA194_0==84||LA194_0==89||LA194_0==91||LA194_0==93||(LA194_0>=95 && LA194_0<=96)||(LA194_0>=99 && LA194_0<=100)||LA194_0==129||(LA194_0>=157 && LA194_0<=158)||LA194_0==177))
			{
				alt194 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:556:4: ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name
				{
				DebugLocation(556, 29);
				char_literal418=(IToken)Match(input,130,Follow._130_in_list_expr4567); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal418);

				DebugLocation(556, 33);
				PushFollow(Follow._feed_expr_in_list_expr4569);
				feed_expr419=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr419.Tree);
				DebugLocation(556, 43);
				string_literal420=(IToken)Match(input,146,Follow._146_in_list_expr4571); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal420);

				DebugLocation(556, 49);
				PushFollow(Follow._for_item_in_list_expr4573);
				for_item421=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item421.Tree);
				DebugLocation(556, 58);
				// SugarCpp.g:556:58: ( ',' for_item )*
				try { DebugEnterSubRule(188);
				while (true)
				{
					int alt188=2;
					try { DebugEnterDecision(188, false);
					int LA188_0 = input.LA(1);

					if ((LA188_0==98))
					{
						alt188 = 1;
					}


					} finally { DebugExitDecision(188); }
					switch ( alt188 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:556:59: ',' for_item
						{
						DebugLocation(556, 59);
						char_literal422=(IToken)Match(input,98,Follow._98_in_list_expr4576); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal422);

						DebugLocation(556, 63);
						PushFollow(Follow._for_item_in_list_expr4578);
						for_item423=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item423.Tree);

						}
						break;

					default:
						goto loop188;
					}
				}

				loop188:
					;

				} finally { DebugExitSubRule(188); }

				DebugLocation(556, 74);
				char_literal424=(IToken)Match(input,131,Follow._131_in_list_expr4582); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal424);

				DebugLocation(556, 78);
				char_literal425=(IToken)Match(input,109,Follow._109_in_list_expr4584); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal425);

				DebugLocation(556, 82);
				PushFollow(Follow._type_name_in_list_expr4586);
				type_name426=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name426.Tree);


				{
				// AST REWRITE
				// elements: feed_expr, for_item, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 556:93: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(556, 96);
					// SugarCpp.g:556:96: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(556, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(556, 119);
					// SugarCpp.g:556:119: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(556, 119);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(556, 130);
					// SugarCpp.g:556:130: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(556, 132);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(556, 141);
					// SugarCpp.g:556:141: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(556, 141);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(556, 151);
					// SugarCpp.g:556:151: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(556, 153);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(556, 166);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:557:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(557, 4);
				char_literal427=(IToken)Match(input,130,Follow._130_in_list_expr4614); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal427);

				DebugLocation(557, 8);
				// SugarCpp.g:557:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?
				int alt192=2;
				try { DebugEnterSubRule(192);
				try { DebugEnterDecision(192, false);
				try
				{
					alt192 = dfa192.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(192); }
				switch (alt192)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:557:9: ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					{
					DebugLocation(557, 9);
					// SugarCpp.g:557:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(189);
					while (true)
					{
						int alt189=5;
						try { DebugEnterDecision(189, false);
						switch (input.LA(1))
						{
						case 98:
							{
							alt189 = 1;
							}
							break;
						case NEWLINE:
							{
							alt189 = 2;
							}
							break;
						case INDENT:
							{
							alt189 = 3;
							}
							break;
						case DEDENT:
							{
							alt189 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(189); }
						switch ( alt189 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:557:10: ','
							{
							DebugLocation(557, 10);
							char_literal428=(IToken)Match(input,98,Follow._98_in_list_expr4618); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal428);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:557:16: NEWLINE
							{
							DebugLocation(557, 16);
							NEWLINE429=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4622); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE429);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:557:26: INDENT
							{
							DebugLocation(557, 26);
							INDENT430=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4626); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT430);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:557:35: DEDENT
							{
							DebugLocation(557, 35);
							DEDENT431=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4630); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT431);


							}
							break;

						default:
							goto loop189;
						}
					}

					loop189:
						;

					} finally { DebugExitSubRule(189); }

					DebugLocation(557, 44);
					PushFollow(Follow._feed_expr_in_list_expr4634);
					feed_expr432=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr432.Tree);
					DebugLocation(557, 54);
					// SugarCpp.g:557:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					try { DebugEnterSubRule(191);
					while (true)
					{
						int alt191=2;
						try { DebugEnterDecision(191, false);
						try
						{
							alt191 = dfa191.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(191); }
						switch ( alt191 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:557:55: ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr
							{
							DebugLocation(557, 55);
							// SugarCpp.g:557:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt190=0;
							try { DebugEnterSubRule(190);
							while (true)
							{
								int alt190=5;
								try { DebugEnterDecision(190, false);
								switch (input.LA(1))
								{
								case 98:
									{
									alt190 = 1;
									}
									break;
								case NEWLINE:
									{
									alt190 = 2;
									}
									break;
								case INDENT:
									{
									alt190 = 3;
									}
									break;
								case DEDENT:
									{
									alt190 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(190); }
								switch (alt190)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:557:56: ','
									{
									DebugLocation(557, 56);
									char_literal433=(IToken)Match(input,98,Follow._98_in_list_expr4638); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_98.Add(char_literal433);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:557:62: NEWLINE
									{
									DebugLocation(557, 62);
									NEWLINE434=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4642); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE434);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:557:72: INDENT
									{
									DebugLocation(557, 72);
									INDENT435=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4646); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT435);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:557:81: DEDENT
									{
									DebugLocation(557, 81);
									DEDENT436=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4650); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT436);


									}
									break;

								default:
									if (cnt190 >= 1)
										goto loop190;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee190 = new EarlyExitException( 190, input );
									DebugRecognitionException(eee190);
									throw eee190;
								}
								cnt190++;
							}
							loop190:
								;

							} finally { DebugExitSubRule(190); }

							DebugLocation(557, 90);
							PushFollow(Follow._feed_expr_in_list_expr4654);
							feed_expr437=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr437.Tree);

							}
							break;

						default:
							goto loop191;
						}
					}

					loop191:
						;

					} finally { DebugExitSubRule(191); }


					}
					break;

				}
				} finally { DebugExitSubRule(192); }

				DebugLocation(557, 104);
				// SugarCpp.g:557:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(193);
				while (true)
				{
					int alt193=5;
					try { DebugEnterDecision(193, false);
					switch (input.LA(1))
					{
					case 98:
						{
						alt193 = 1;
						}
						break;
					case NEWLINE:
						{
						alt193 = 2;
						}
						break;
					case INDENT:
						{
						alt193 = 3;
						}
						break;
					case DEDENT:
						{
						alt193 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(193); }
					switch ( alt193 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:557:105: ','
						{
						DebugLocation(557, 105);
						char_literal438=(IToken)Match(input,98,Follow._98_in_list_expr4661); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal438);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:557:111: NEWLINE
						{
						DebugLocation(557, 111);
						NEWLINE439=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4665); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE439);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:557:121: INDENT
						{
						DebugLocation(557, 121);
						INDENT440=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4669); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT440);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:557:130: DEDENT
						{
						DebugLocation(557, 130);
						DEDENT441=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4673); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT441);


						}
						break;

					default:
						goto loop193;
					}
				}

				loop193:
					;

				} finally { DebugExitSubRule(193); }

				DebugLocation(557, 139);
				char_literal442=(IToken)Match(input,131,Follow._131_in_list_expr4677); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal442);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 557:143: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(557, 146);
					// SugarCpp.g:557:146: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(557, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(557, 158);
					// SugarCpp.g:557:158: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(557, 158);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:558:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(558, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4691);
				lambda_expr443=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr443.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 62);
			LeaveRule("list_expr", 62);
			LeaveRule_list_expr();
		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:561:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 63);
		TraceIn("lambda_value", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE445 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr444 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block446 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE445_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(561, 1);
		try
		{
			// SugarCpp.g:562:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt196=2;
			try { DebugEnterDecision(196, false);
			int LA196_0 = input.LA(1);

			if ((LA196_0==IDENT||LA196_0==NUMBER||LA196_0==STRING||LA196_0==84||LA196_0==89||LA196_0==91||LA196_0==93||(LA196_0>=95 && LA196_0<=96)||(LA196_0>=99 && LA196_0<=100)||(LA196_0>=129 && LA196_0<=130)||LA196_0==152||LA196_0==155||(LA196_0>=157 && LA196_0<=158)||LA196_0==177))
			{
				alt196 = 1;
			}
			else if ((LA196_0==NEWLINE))
			{
				alt196 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(196); }
			switch (alt196)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:562:4: expr
				{
				DebugLocation(562, 4);
				PushFollow(Follow._expr_in_lambda_value4702);
				expr444=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr444.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 562:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(562, 12);
					// SugarCpp.g:562:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(562, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(562, 25);
					// SugarCpp.g:562:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(562, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(562, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:563:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(563, 4);
				// SugarCpp.g:563:4: ( NEWLINE )+
				int cnt195=0;
				try { DebugEnterSubRule(195);
				while (true)
				{
					int alt195=2;
					try { DebugEnterDecision(195, false);
					int LA195_0 = input.LA(1);

					if ((LA195_0==NEWLINE))
					{
						alt195 = 1;
					}


					} finally { DebugExitDecision(195); }
					switch (alt195)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:563:4: NEWLINE
						{
						DebugLocation(563, 4);
						NEWLINE445=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4719); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE445);


						}
						break;

					default:
						if (cnt195 >= 1)
							goto loop195;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee195 = new EarlyExitException( 195, input );
						DebugRecognitionException(eee195);
						throw eee195;
					}
					cnt195++;
				}
				loop195:
					;

				} finally { DebugExitSubRule(195); }

				DebugLocation(563, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4722);
				stmt_block446=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block446.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 563:24: -> stmt_block
				{
					DebugLocation(563, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 63);
			LeaveRule("lambda_value", 63);
			LeaveRule_lambda_value();
		}
		DebugLocation(564, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:566:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 64);
		TraceIn("lambda_type", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal447 = default(IToken);
		IToken char_literal449 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name448 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal447_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(566, 1);
		try
		{
			// SugarCpp.g:567:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:567:4: '(' type_name ')'
			{
			DebugLocation(567, 4);
			char_literal447=(IToken)Match(input,91,Follow._91_in_lambda_type4737); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal447);

			DebugLocation(567, 8);
			PushFollow(Follow._type_name_in_lambda_type4739);
			type_name448=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name448.Tree);
			DebugLocation(567, 18);
			char_literal449=(IToken)Match(input,92,Follow._92_in_lambda_type4741); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal449);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 567:22: -> type_name
			{
				DebugLocation(567, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 64);
			LeaveRule("lambda_type", 64);
			LeaveRule_lambda_type();
		}
		DebugLocation(568, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:570:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 65);
		TraceIn("lambda_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal450 = default(IToken);
		IToken char_literal452 = default(IToken);
		IToken string_literal454 = default(IToken);
		IToken string_literal456 = default(IToken);
		IToken string_literal458 = default(IToken);
		IToken string_literal460 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args451 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type453 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value455 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value459 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value461 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr462 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal450_tree = default(CommonTree);
		CommonTree char_literal452_tree = default(CommonTree);
		CommonTree string_literal454_tree = default(CommonTree);
		CommonTree string_literal456_tree = default(CommonTree);
		CommonTree string_literal458_tree = default(CommonTree);
		CommonTree string_literal460_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(570, 1);
		try
		{
			// SugarCpp.g:571:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt200=2;
			try { DebugEnterDecision(200, false);
			try
			{
				alt200 = dfa200.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(200); }
			switch (alt200)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:571:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(571, 4);
				char_literal450=(IToken)Match(input,91,Follow._91_in_lambda_expr4756); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal450);

				DebugLocation(571, 8);
				// SugarCpp.g:571:8: ( func_args )?
				int alt197=2;
				try { DebugEnterSubRule(197);
				try { DebugEnterDecision(197, false);
				int LA197_0 = input.LA(1);

				if ((LA197_0==IDENT||LA197_0==111))
				{
					alt197 = 1;
				}
				} finally { DebugExitDecision(197); }
				switch (alt197)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:8: func_args
					{
					DebugLocation(571, 8);
					PushFollow(Follow._func_args_in_lambda_expr4758);
					func_args451=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args451.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(197); }

				DebugLocation(571, 19);
				char_literal452=(IToken)Match(input,92,Follow._92_in_lambda_expr4761); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal452);

				DebugLocation(571, 23);
				// SugarCpp.g:571:23: ( lambda_type )?
				int alt198=2;
				try { DebugEnterSubRule(198);
				try { DebugEnterDecision(198, false);
				int LA198_0 = input.LA(1);

				if ((LA198_0==91))
				{
					alt198 = 1;
				}
				} finally { DebugExitDecision(198); }
				switch (alt198)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:23: lambda_type
					{
					DebugLocation(571, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4763);
					lambda_type453=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type453.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(198); }

				DebugLocation(571, 36);
				// SugarCpp.g:571:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt199=4;
				try { DebugEnterSubRule(199);
				try { DebugEnterDecision(199, false);
				switch (input.LA(1))
				{
				case 103:
					{
					alt199 = 1;
					}
					break;
				case 122:
					{
					alt199 = 2;
					}
					break;
				case 101:
					{
					alt199 = 3;
					}
					break;
				case 121:
					{
					alt199 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 199, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(199); }
				switch (alt199)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:38: '->' lambda_value
					{
					DebugLocation(571, 38);
					string_literal454=(IToken)Match(input,103,Follow._103_in_lambda_expr4768); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal454);

					DebugLocation(571, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4770);
					lambda_value455=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value455.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, func_args, lambda_value, 103
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 571:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(571, 60);
						// SugarCpp.g:571:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(571, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(571, 74);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(571, 79);
						// SugarCpp.g:571:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(571, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(571, 90);
						// SugarCpp.g:571:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(571, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(571, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:572:17: '=>' lambda_value
					{
					DebugLocation(572, 17);
					string_literal456=(IToken)Match(input,122,Follow._122_in_lambda_expr4805); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_122.Add(string_literal456);

					DebugLocation(572, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr4807);
					lambda_value457=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value457.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, 122, func_args, lambda_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 572:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(572, 39);
						// SugarCpp.g:572:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(572, 53);
						adaptor.AddChild(root_1, stream_122.NextNode());
						DebugLocation(572, 58);
						// SugarCpp.g:572:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(572, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(572, 69);
						// SugarCpp.g:572:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(572, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(572, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:573:14: '-->' lambda_value
					{
					DebugLocation(573, 14);
					string_literal458=(IToken)Match(input,101,Follow._101_in_lambda_expr4839); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal458);

					DebugLocation(573, 20);
					PushFollow(Follow._lambda_value_in_lambda_expr4841);
					lambda_value459=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value459.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, func_args, lambda_type, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 573:34: -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(573, 37);
						// SugarCpp.g:573:37: ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(573, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(573, 51);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(573, 57);
						// SugarCpp.g:573:57: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(573, 57);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(573, 68);
						// SugarCpp.g:573:68: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(573, 68);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(573, 81);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:574:17: '==>' lambda_value
					{
					DebugLocation(574, 17);
					string_literal460=(IToken)Match(input,121,Follow._121_in_lambda_expr4876); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_121.Add(string_literal460);

					DebugLocation(574, 23);
					PushFollow(Follow._lambda_value_in_lambda_expr4878);
					lambda_value461=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value461.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, lambda_value, func_args, 121
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 574:37: -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(574, 40);
						// SugarCpp.g:574:40: ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(574, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(574, 54);
						adaptor.AddChild(root_1, stream_121.NextNode());
						DebugLocation(574, 60);
						// SugarCpp.g:574:60: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(574, 60);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(574, 71);
						// SugarCpp.g:574:71: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(574, 71);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(574, 84);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(199); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:576:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(576, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4913);
				modify_expr462=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr462.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 65);
			LeaveRule("lambda_expr", 65);
			LeaveRule_lambda_expr();
		}
		DebugLocation(577, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:579:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 66);
		TraceIn("modify_expr_op", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set463 = default(IToken);

		CommonTree set463_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(579, 91);
		try
		{
			// SugarCpp.g:579:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(579, 15);

			set463=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==97||input.LA(1)==102||input.LA(1)==108||input.LA(1)==116||input.LA(1)==119||input.LA(1)==126||input.LA(1)==133||input.LA(1)==174)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set463));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 66);
			LeaveRule("modify_expr_op", 66);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(579, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:580:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 67);
		TraceIn("modify_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set465 = default(IToken);
		IToken char_literal467 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr468 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set465_tree = default(CommonTree);
		CommonTree char_literal467_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(580, 1);
		try
		{
			// SugarCpp.g:581:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:581:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(581, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4970);
			cond_expr464=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr464.Tree);
			DebugLocation(581, 14);
			// SugarCpp.g:581:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt202=3;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_0 = input.LA(1);

			if ((LA202_0==87||LA202_0==90||LA202_0==94||LA202_0==97||LA202_0==102||LA202_0==108||LA202_0==111||LA202_0==116||LA202_0==126||LA202_0==133||LA202_0==174))
			{
				alt202 = 1;
			}
			else if ((LA202_0==119))
			{
				alt202 = 2;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:581:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(581, 94);

				set465=(IToken)input.LT(1);
				set465=(IToken)input.LT(1);
				if (input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==97||input.LA(1)==102||input.LA(1)==108||input.LA(1)==111||input.LA(1)==116||input.LA(1)==126||input.LA(1)==133||input.LA(1)==174)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set465), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(581, 96);
				PushFollow(Follow._cond_expr_in_modify_expr5019);
				cond_expr466=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr466.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:582:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(582, 7);
				// SugarCpp.g:582:7: ( '=' ^ cond_expr )+
				int cnt201=0;
				try { DebugEnterSubRule(201);
				while (true)
				{
					int alt201=2;
					try { DebugEnterDecision(201, false);
					int LA201_0 = input.LA(1);

					if ((LA201_0==119))
					{
						alt201 = 1;
					}


					} finally { DebugExitDecision(201); }
					switch (alt201)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:582:8: '=' ^ cond_expr
						{
						DebugLocation(582, 11);
						char_literal467=(IToken)Match(input,119,Follow._119_in_modify_expr5028); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal467_tree = (CommonTree)adaptor.Create(char_literal467);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal467_tree, root_0);
						}
						DebugLocation(582, 13);
						PushFollow(Follow._cond_expr_in_modify_expr5031);
						cond_expr468=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr468.Tree);

						}
						break;

					default:
						if (cnt201 >= 1)
							goto loop201;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee201 = new EarlyExitException( 201, input );
						DebugRecognitionException(eee201);
						throw eee201;
					}
					cnt201++;
				}
				loop201:
					;

				} finally { DebugExitSubRule(201); }


				}
				break;

			}
			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 67);
			LeaveRule("modify_expr", 67);
			LeaveRule_modify_expr();
		}
		DebugLocation(583, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:585:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 68);
		TraceIn("cond_expr_item", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr469 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(585, 24);
		try
		{
			// SugarCpp.g:585:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:585:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(585, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item5044);
			or_expr469=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr469.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 68);
			LeaveRule("cond_expr_item", 68);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(585, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:586:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 69);
		TraceIn("cond_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal470 = default(IToken);
		IToken char_literal471 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal470_tree = default(CommonTree);
		CommonTree char_literal471_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(586, 1);
		try
		{
			// SugarCpp.g:587:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:587:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(587, 4);
			// SugarCpp.g:587:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:587:5: a= or_expr
			{
			DebugLocation(587, 6);
			PushFollow(Follow._or_expr_in_cond_expr5056);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 587:15: -> $a
			{
				DebugLocation(587, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(587, 22);
			// SugarCpp.g:587:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt205=2;
			try { DebugEnterSubRule(205);
			try { DebugEnterDecision(205, false);
			int LA205_0 = input.LA(1);

			if ((LA205_0==127))
			{
				alt205 = 1;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:587:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(587, 23);
				char_literal470=(IToken)Match(input,127,Follow._127_in_cond_expr5065); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(char_literal470);

				DebugLocation(587, 27);
				// SugarCpp.g:587:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt204=2;
				try { DebugEnterSubRule(204);
				try { DebugEnterDecision(204, false);
				int LA204_0 = input.LA(1);

				if ((LA204_0==IDENT||LA204_0==NUMBER||LA204_0==STRING||LA204_0==84||LA204_0==89||LA204_0==91||LA204_0==93||(LA204_0>=95 && LA204_0<=96)||(LA204_0>=99 && LA204_0<=100)||LA204_0==129||(LA204_0>=157 && LA204_0<=158)||LA204_0==177))
				{
					alt204 = 1;
				}
				else if ((LA204_0==DEDENT||LA204_0==INDENT||LA204_0==NEWLINE||LA204_0==87||LA204_0==90||LA204_0==92||LA204_0==94||(LA204_0>=97 && LA204_0<=98)||LA204_0==102||LA204_0==108||(LA204_0>=111 && LA204_0<=112)||LA204_0==116||(LA204_0>=118 && LA204_0<=119)||LA204_0==122||LA204_0==126||LA204_0==131||LA204_0==133||LA204_0==136||LA204_0==142||(LA204_0>=146 && LA204_0<=147)||LA204_0==149||(LA204_0>=163 && LA204_0<=164)||(LA204_0>=167 && LA204_0<=168)||(LA204_0>=171 && LA204_0<=172)||(LA204_0>=174 && LA204_0<=175)))
				{
					alt204 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 204, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(204); }
				switch (alt204)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:587:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(587, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr5071);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(587, 46);
					// SugarCpp.g:587:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt203=2;
					try { DebugEnterSubRule(203);
					try { DebugEnterDecision(203, false);
					int LA203_0 = input.LA(1);

					if ((LA203_0==109))
					{
						alt203 = 1;
					}
					else if ((LA203_0==DEDENT||LA203_0==INDENT||LA203_0==NEWLINE||LA203_0==87||LA203_0==90||LA203_0==92||LA203_0==94||(LA203_0>=97 && LA203_0<=98)||LA203_0==102||LA203_0==108||(LA203_0>=111 && LA203_0<=112)||LA203_0==116||(LA203_0>=118 && LA203_0<=119)||LA203_0==122||LA203_0==126||LA203_0==131||LA203_0==133||LA203_0==136||LA203_0==142||(LA203_0>=146 && LA203_0<=147)||LA203_0==149||(LA203_0>=163 && LA203_0<=164)||(LA203_0>=167 && LA203_0<=168)||(LA203_0>=171 && LA203_0<=172)||(LA203_0>=174 && LA203_0<=175)))
					{
						alt203 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 203, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(203); }
					switch (alt203)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:587:48: ':' b= cond_expr_item
						{
						DebugLocation(587, 48);
						char_literal471=(IToken)Match(input,109,Follow._109_in_cond_expr5075); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_109.Add(char_literal471);

						DebugLocation(587, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr5079);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, cond_expr, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 587:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(587, 72);
							// SugarCpp.g:587:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(587, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(587, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(587, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(587, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:588:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 588:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(588, 20);
							// SugarCpp.g:588:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(588, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(588, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(588, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(203); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:590:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 590:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(590, 14);
						// SugarCpp.g:590:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(590, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(590, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(204); }


				}
				break;

			}
			} finally { DebugExitSubRule(205); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 69);
			LeaveRule("cond_expr", 69);
			LeaveRule_cond_expr();
		}
		DebugLocation(592, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:594:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 70);
		TraceIn("or_op", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set472 = default(IToken);

		CommonTree set472_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(594, 19);
		try
		{
			// SugarCpp.g:594:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(594, 6);

			set472=(IToken)input.LT(1);
			if (input.LA(1)==159||input.LA(1)==176)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set472));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 70);
			LeaveRule("or_op", 70);
			LeaveRule_or_op();
		}
		DebugLocation(594, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:595:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 71);
		TraceIn("or_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(595, 1);
		try
		{
			// SugarCpp.g:596:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:596:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(596, 4);
			// SugarCpp.g:596:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:596:5: a= and_expr
			{
			DebugLocation(596, 6);
			PushFollow(Follow._and_expr_in_or_expr5193);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 596:16: -> $a
			{
				DebugLocation(596, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(596, 23);
			// SugarCpp.g:596:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==159||LA206_0==176))
				{
					alt206 = 1;
				}


				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:596:24: op= or_op b= and_expr
					{
					DebugLocation(596, 26);
					PushFollow(Follow._or_op_in_or_expr5204);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(596, 34);
					PushFollow(Follow._and_expr_in_or_expr5208);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 596:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(596, 47);
						// SugarCpp.g:596:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(596, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(596, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(596, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(596, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 71);
			LeaveRule("or_expr", 71);
			LeaveRule_or_expr();
		}
		DebugLocation(597, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:599:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 72);
		TraceIn("and_op", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set473 = default(IToken);

		CommonTree set473_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(599, 21);
		try
		{
			// SugarCpp.g:599:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(599, 7);

			set473=(IToken)input.LT(1);
			if (input.LA(1)==88||input.LA(1)==135)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set473));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 72);
			LeaveRule("and_op", 72);
			LeaveRule_and_op();
		}
		DebugLocation(599, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:600:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 73);
		TraceIn("and_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(600, 1);
		try
		{
			// SugarCpp.g:601:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:601:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(601, 4);
			// SugarCpp.g:601:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:601:5: a= bit_or
			{
			DebugLocation(601, 6);
			PushFollow(Follow._bit_or_in_and_expr5250);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 601:14: -> $a
			{
				DebugLocation(601, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(601, 21);
			// SugarCpp.g:601:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(207);
			while (true)
			{
				int alt207=2;
				try { DebugEnterDecision(207, false);
				int LA207_0 = input.LA(1);

				if ((LA207_0==88||LA207_0==135))
				{
					alt207 = 1;
				}


				} finally { DebugExitDecision(207); }
				switch ( alt207 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:601:22: op= and_op b= bit_or
					{
					DebugLocation(601, 24);
					PushFollow(Follow._and_op_in_and_expr5261);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(601, 33);
					PushFollow(Follow._bit_or_in_and_expr5265);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, and_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 601:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(601, 44);
						// SugarCpp.g:601:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(601, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(601, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(601, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(601, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop207;
				}
			}

			loop207:
				;

			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 73);
			LeaveRule("and_expr", 73);
			LeaveRule_and_expr();
		}
		DebugLocation(602, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:604:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 74);
		TraceIn("bit_or", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal474 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal474_tree = default(CommonTree);
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(604, 1);
		try
		{
			// SugarCpp.g:605:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:605:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(605, 4);
			// SugarCpp.g:605:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:605:5: a= bit_xor
			{
			DebugLocation(605, 6);
			PushFollow(Follow._bit_xor_in_bit_or5296);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 605:15: -> $a
			{
				DebugLocation(605, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(605, 22);
			// SugarCpp.g:605:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(208);
			while (true)
			{
				int alt208=2;
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==173))
				{
					alt208 = 1;
				}


				} finally { DebugExitDecision(208); }
				switch ( alt208 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:605:23: '|' b= bit_xor
					{
					DebugLocation(605, 23);
					char_literal474=(IToken)Match(input,173,Follow._173_in_bit_or5305); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(char_literal474);

					DebugLocation(605, 28);
					PushFollow(Follow._bit_xor_in_bit_or5309);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 173, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 605:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(605, 40);
						// SugarCpp.g:605:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(605, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(605, 51);
						adaptor.AddChild(root_1, stream_173.NextNode());
						DebugLocation(605, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(605, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop208;
				}
			}

			loop208:
				;

			} finally { DebugExitSubRule(208); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 74);
			LeaveRule("bit_or", 74);
			LeaveRule_bit_or();
		}
		DebugLocation(606, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:608:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 75);
		TraceIn("bit_xor", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal475 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal475_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(608, 1);
		try
		{
			// SugarCpp.g:609:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:609:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(609, 4);
			// SugarCpp.g:609:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:609:5: a= bit_and
			{
			DebugLocation(609, 6);
			PushFollow(Follow._bit_and_in_bit_xor5339);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 609:15: -> $a
			{
				DebugLocation(609, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(609, 22);
			// SugarCpp.g:609:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(209);
			while (true)
			{
				int alt209=2;
				try { DebugEnterDecision(209, false);
				int LA209_0 = input.LA(1);

				if ((LA209_0==132))
				{
					alt209 = 1;
				}


				} finally { DebugExitDecision(209); }
				switch ( alt209 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:609:23: '^' b= bit_and
					{
					DebugLocation(609, 23);
					char_literal475=(IToken)Match(input,132,Follow._132_in_bit_xor5348); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal475);

					DebugLocation(609, 28);
					PushFollow(Follow._bit_and_in_bit_xor5352);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, b, 132
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 609:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(609, 40);
						// SugarCpp.g:609:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(609, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(609, 51);
						adaptor.AddChild(root_1, stream_132.NextNode());
						DebugLocation(609, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(609, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop209;
				}
			}

			loop209:
				;

			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 75);
			LeaveRule("bit_xor", 75);
			LeaveRule_bit_xor();
		}
		DebugLocation(610, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:612:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 76);
		TraceIn("bit_and", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal476 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal476_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(612, 1);
		try
		{
			// SugarCpp.g:613:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:613:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(613, 4);
			// SugarCpp.g:613:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:613:5: a= cmp_expr
			{
			DebugLocation(613, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5382);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 613:16: -> $a
			{
				DebugLocation(613, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(613, 23);
			// SugarCpp.g:613:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(210);
			while (true)
			{
				int alt210=2;
				try { DebugEnterDecision(210, false);
				int LA210_0 = input.LA(1);

				if ((LA210_0==89))
				{
					alt210 = 1;
				}


				} finally { DebugExitDecision(210); }
				switch ( alt210 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:613:24: '&' b= cmp_expr
					{
					DebugLocation(613, 24);
					char_literal476=(IToken)Match(input,89,Follow._89_in_bit_and5391); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal476);

					DebugLocation(613, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5395);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 89
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 613:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(613, 42);
						// SugarCpp.g:613:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(613, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(613, 53);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(613, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(613, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop210;
				}
			}

			loop210:
				;

			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 76);
			LeaveRule("bit_and", 76);
			LeaveRule_bit_and();
		}
		DebugLocation(614, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:616:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 77);
		TraceIn("chain_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set477 = default(IToken);

		CommonTree set477_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(616, 64);
		try
		{
			// SugarCpp.g:616:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(616, 9);

			set477=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==113||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=123 && input.LA(1)<=124)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set477));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 77);
			LeaveRule("chain_op", 77);
			LeaveRule_chain_op();
		}
		DebugLocation(616, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:617:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 78);
		TraceIn("no_less_op", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set478 = default(IToken);

		CommonTree set478_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(617, 60);
		try
		{
			// SugarCpp.g:617:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(617, 11);

			set478=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=123 && input.LA(1)<=124)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set478));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 78);
			LeaveRule("no_less_op", 78);
			LeaveRule_no_less_op();
		}
		DebugLocation(617, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:618:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 79);
		TraceIn("chain_list", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr480 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(618, 35);
		try
		{
			// SugarCpp.g:618:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:618:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(618, 13);
			// SugarCpp.g:618:13: ( chain_op shift_expr )+
			int cnt211=0;
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=2;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==85||LA211_0==113||LA211_0==117||LA211_0==120||(LA211_0>=123 && LA211_0<=124)||(LA211_0>=150 && LA211_0<=151)))
				{
					alt211 = 1;
				}


				} finally { DebugExitDecision(211); }
				switch (alt211)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:618:14: chain_op shift_expr
					{
					DebugLocation(618, 14);
					PushFollow(Follow._chain_op_in_chain_list5487);
					chain_op479=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op479.Tree);
					DebugLocation(618, 23);
					PushFollow(Follow._shift_expr_in_chain_list5489);
					shift_expr480=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr480.Tree);

					}
					break;

				default:
					if (cnt211 >= 1)
						goto loop211;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee211 = new EarlyExitException( 211, input );
					DebugRecognitionException(eee211);
					throw eee211;
				}
				cnt211++;
			}
			loop211:
				;

			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 79);
			LeaveRule("chain_list", 79);
			LeaveRule_chain_list();
		}
		DebugLocation(618, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:619:1: cmp_expr : (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 80);
		TraceIn("cmp_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal481 = default(IToken);
		IToken char_literal483 = default(IToken);
		IToken char_literal485 = default(IToken);
		IToken char_literal487 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident484 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list489 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal481_tree = default(CommonTree);
		CommonTree char_literal483_tree = default(CommonTree);
		CommonTree char_literal485_tree = default(CommonTree);
		CommonTree char_literal487_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(619, 1);
		try
		{
			// SugarCpp.g:620:2: ( (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:620:4: (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(620, 4);
			// SugarCpp.g:620:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:620:5: a= shift_expr
			{
			DebugLocation(620, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5503);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 620:18: -> $a
			{
				DebugLocation(620, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(620, 25);
			// SugarCpp.g:620:25: ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt215=4;
			try { DebugEnterSubRule(215);
			try { DebugEnterDecision(215, false);
			int LA215_0 = input.LA(1);

			if ((LA215_0==113))
			{
				int LA215_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt215 = 1;
				}
				else if ((true))
				{
					alt215 = 2;
				}
			}
			else if ((LA215_0==85||LA215_0==117||LA215_0==120||(LA215_0>=123 && LA215_0<=124)||(LA215_0>=150 && LA215_0<=151)))
			{
				alt215 = 3;
			}
			} finally { DebugExitDecision(215); }
			switch (alt215)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:620:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list
				{
				DebugLocation(620, 77);
				char_literal481=(IToken)Match(input,113,Follow._113_in_cmp_expr5532); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(char_literal481);

				DebugLocation(620, 81);
				PushFollow(Follow._ident_in_cmp_expr5534);
				ident482=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident482.Tree);
				DebugLocation(620, 87);
				// SugarCpp.g:620:87: ( ',' ident )*
				try { DebugEnterSubRule(212);
				while (true)
				{
					int alt212=2;
					try { DebugEnterDecision(212, false);
					int LA212_0 = input.LA(1);

					if ((LA212_0==98))
					{
						alt212 = 1;
					}


					} finally { DebugExitDecision(212); }
					switch ( alt212 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:620:88: ',' ident
						{
						DebugLocation(620, 88);
						char_literal483=(IToken)Match(input,98,Follow._98_in_cmp_expr5537); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal483);

						DebugLocation(620, 92);
						PushFollow(Follow._ident_in_cmp_expr5539);
						ident484=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident484.Tree);

						}
						break;

					default:
						goto loop212;
					}
				}

				loop212:
					;

				} finally { DebugExitSubRule(212); }

				DebugLocation(620, 100);
				char_literal485=(IToken)Match(input,123,Follow._123_in_cmp_expr5543); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal485);

				DebugLocation(620, 104);
				PushFollow(Follow._bracket_expr_list_in_cmp_expr5545);
				bracket_expr_list486=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list486.Tree);


				{
				// AST REWRITE
				// elements: ident, bracket_expr_list, cmp_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 620:122: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
				{
					DebugLocation(620, 125);
					// SugarCpp.g:620:125: ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(620, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(620, 138);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(620, 147);
					// SugarCpp.g:620:147: ^( Generic_Patameters ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(620, 149);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

					DebugLocation(620, 168);
					// SugarCpp.g:620:168: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(620, 168);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(620, 176);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:621:12: '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(621, 12);
				char_literal487=(IToken)Match(input,113,Follow._113_in_cmp_expr5576); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(char_literal487);

				DebugLocation(621, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr5580);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(621, 29);
				// SugarCpp.g:621:29: ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt213=2;
				try { DebugEnterSubRule(213);
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==85||LA213_0==113||LA213_0==117||LA213_0==120||(LA213_0>=123 && LA213_0<=124)||(LA213_0>=150 && LA213_0<=151)))
				{
					alt213 = 1;
				}
				else if ((LA213_0==DEDENT||LA213_0==INDENT||LA213_0==NEWLINE||(LA213_0>=87 && LA213_0<=90)||LA213_0==92||LA213_0==94||(LA213_0>=97 && LA213_0<=98)||LA213_0==102||(LA213_0>=108 && LA213_0<=109)||(LA213_0>=111 && LA213_0<=112)||LA213_0==116||(LA213_0>=118 && LA213_0<=119)||LA213_0==122||(LA213_0>=126 && LA213_0<=127)||(LA213_0>=131 && LA213_0<=133)||(LA213_0>=135 && LA213_0<=136)||LA213_0==142||(LA213_0>=146 && LA213_0<=147)||LA213_0==149||LA213_0==159||(LA213_0>=163 && LA213_0<=164)||(LA213_0>=167 && LA213_0<=168)||(LA213_0>=171 && LA213_0<=176)))
				{
					alt213 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 213, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(213); }
				switch (alt213)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:621:31: chain_list
					{
					DebugLocation(621, 31);
					PushFollow(Follow._chain_list_in_cmp_expr5584);
					chain_list488=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list488.Tree);


					{
					// AST REWRITE
					// elements: chain_list, b, 113, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 621:42: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(621, 45);
						// SugarCpp.g:621:45: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(621, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(621, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(621, 69);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(621, 74);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(621, 76);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:622:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, 113
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 622:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(622, 19);
						// SugarCpp.g:622:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(622, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(622, 30);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(622, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(622, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(213); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:623:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(623, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5661);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(623, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5665);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(623, 54);
				// SugarCpp.g:623:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt214=2;
				try { DebugEnterSubRule(214);
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==85||LA214_0==113||LA214_0==117||LA214_0==120||(LA214_0>=123 && LA214_0<=124)||(LA214_0>=150 && LA214_0<=151)))
				{
					alt214 = 1;
				}
				else if ((LA214_0==DEDENT||LA214_0==INDENT||LA214_0==NEWLINE||(LA214_0>=87 && LA214_0<=90)||LA214_0==92||LA214_0==94||(LA214_0>=97 && LA214_0<=98)||LA214_0==102||(LA214_0>=108 && LA214_0<=109)||(LA214_0>=111 && LA214_0<=112)||LA214_0==116||(LA214_0>=118 && LA214_0<=119)||LA214_0==122||(LA214_0>=126 && LA214_0<=127)||(LA214_0>=131 && LA214_0<=133)||(LA214_0>=135 && LA214_0<=136)||LA214_0==142||(LA214_0>=146 && LA214_0<=147)||LA214_0==149||LA214_0==159||(LA214_0>=163 && LA214_0<=164)||(LA214_0>=167 && LA214_0<=168)||(LA214_0>=171 && LA214_0<=176)))
				{
					alt214 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 214, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(214); }
				switch (alt214)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:623:56: chain_list
					{
					DebugLocation(623, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5669);
					chain_list489=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list489.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, op, chain_list
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 623:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(623, 70);
						// SugarCpp.g:623:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(623, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(623, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(623, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(623, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(623, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:624:17: 
					{

					{
					// AST REWRITE
					// elements: b, op, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 624:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(624, 20);
						// SugarCpp.g:624:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(624, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(624, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(624, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(624, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(214); }


				}
				break;

			}
			} finally { DebugExitSubRule(215); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 80);
			LeaveRule("cmp_expr", 80);
			LeaveRule_cmp_expr();
		}
		DebugLocation(627, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:629:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 81);
		TraceIn("shift_expr_op", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set490 = default(IToken);

		CommonTree set490_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(629, 27);
		try
		{
			// SugarCpp.g:629:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(629, 14);

			set490=(IToken)input.LT(1);
			if (input.LA(1)==115||input.LA(1)==125)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set490));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 81);
			LeaveRule("shift_expr_op", 81);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(629, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:630:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 82);
		TraceIn("shift_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op491 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(630, 1);
		try
		{
			// SugarCpp.g:631:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:631:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(631, 4);
			// SugarCpp.g:631:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:631:5: a= add_expr
			{
			DebugLocation(631, 6);
			PushFollow(Follow._add_expr_in_shift_expr5771);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 631:16: -> $a
			{
				DebugLocation(631, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(631, 23);
			// SugarCpp.g:631:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==115||LA216_0==125))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:631:24: shift_expr_op b= add_expr
					{
					DebugLocation(631, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5780);
					shift_expr_op491=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op491.Tree);
					DebugLocation(631, 39);
					PushFollow(Follow._add_expr_in_shift_expr5784);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, b, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 631:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(631, 52);
						// SugarCpp.g:631:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(631, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(631, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(631, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(631, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 82);
			LeaveRule("shift_expr", 82);
			LeaveRule_shift_expr();
		}
		DebugLocation(632, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:634:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 83);
		TraceIn("add_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal492 = default(IToken);
		IToken char_literal493 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal492_tree = default(CommonTree);
		CommonTree char_literal493_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(634, 1);
		try
		{
			// SugarCpp.g:635:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:635:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(635, 4);
			// SugarCpp.g:635:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:635:5: a= mul_expr
			{
			DebugLocation(635, 6);
			PushFollow(Follow._mul_expr_in_add_expr5814);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 635:16: -> $a
			{
				DebugLocation(635, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(635, 23);
			// SugarCpp.g:635:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=3;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==95))
				{
					alt217 = 1;
				}
				else if ((LA217_0==99))
				{
					alt217 = 2;
				}


				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:635:25: '+' b= mul_expr
					{
					DebugLocation(635, 25);
					char_literal492=(IToken)Match(input,95,Follow._95_in_add_expr5824); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal492);

					DebugLocation(635, 30);
					PushFollow(Follow._mul_expr_in_add_expr5828);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 95, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 635:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(635, 43);
						// SugarCpp.g:635:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(635, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(635, 54);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(635, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(635, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:636:10: '-' b= mul_expr
					{
					DebugLocation(636, 10);
					char_literal493=(IToken)Match(input,99,Follow._99_in_add_expr5853); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal493);

					DebugLocation(636, 15);
					PushFollow(Follow._mul_expr_in_add_expr5857);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 99, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(636, 28);
						// SugarCpp.g:636:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(636, 39);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(636, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(636, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 83);
			LeaveRule("add_expr", 83);
			LeaveRule_add_expr();
		}
		DebugLocation(638, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:640:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 84);
		TraceIn("mul_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal494 = default(IToken);
		IToken char_literal495 = default(IToken);
		IToken char_literal496 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal494_tree = default(CommonTree);
		CommonTree char_literal495_tree = default(CommonTree);
		CommonTree char_literal496_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(640, 1);
		try
		{
			// SugarCpp.g:641:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:641:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(641, 4);
			// SugarCpp.g:641:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:641:5: a= infix_expr
			{
			DebugLocation(641, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5895);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 641:18: -> $a
			{
				DebugLocation(641, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(641, 25);
			// SugarCpp.g:641:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=4;
				try { DebugEnterDecision(218, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt218 = 1;
					}
					break;
				case 107:
					{
					alt218 = 2;
					}
					break;
				case 86:
					{
					alt218 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(218); }
				switch ( alt218 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:641:27: '*' b= infix_expr
					{
					DebugLocation(641, 27);
					char_literal494=(IToken)Match(input,93,Follow._93_in_mul_expr5905); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal494);

					DebugLocation(641, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5909);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 93, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 641:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(641, 47);
						// SugarCpp.g:641:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(641, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(641, 58);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(641, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(641, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:642:12: '/' b= infix_expr
					{
					DebugLocation(642, 12);
					char_literal495=(IToken)Match(input,107,Follow._107_in_mul_expr5936); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal495);

					DebugLocation(642, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5940);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 107
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 642:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(642, 32);
						// SugarCpp.g:642:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(642, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(642, 43);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(642, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(642, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:643:12: '%' b= infix_expr
					{
					DebugLocation(643, 12);
					char_literal496=(IToken)Match(input,86,Follow._86_in_mul_expr5967); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_86.Add(char_literal496);

					DebugLocation(643, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5971);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 86, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 643:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(643, 32);
						// SugarCpp.g:643:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(643, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(643, 43);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(643, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(643, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop218;
				}
			}

			loop218:
				;

			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 84);
			LeaveRule("mul_expr", 84);
			LeaveRule_mul_expr();
		}
		DebugLocation(645, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:647:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 85);
		TraceIn("infix_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func497 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(647, 1);
		try
		{
			// SugarCpp.g:648:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:648:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(648, 4);
			// SugarCpp.g:648:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:648:5: a= selector_expr
			{
			DebugLocation(648, 6);
			PushFollow(Follow._selector_expr_in_infix_expr6011);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 648:21: -> $a
			{
				DebugLocation(648, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(648, 28);
			// SugarCpp.g:648:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==134))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch ( alt219 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:648:30: infix_func b= selector_expr
					{
					DebugLocation(648, 30);
					PushFollow(Follow._infix_func_in_infix_expr6021);
					infix_func497=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func497.Tree);
					DebugLocation(648, 42);
					PushFollow(Follow._selector_expr_in_infix_expr6025);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, infix_func, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 648:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(648, 61);
						// SugarCpp.g:648:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(648, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(648, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(648, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(648, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop219;
				}
			}

			loop219:
				;

			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 85);
			LeaveRule("infix_expr", 85);
			LeaveRule_infix_expr();
		}
		DebugLocation(649, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:651:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 86);
		TraceIn("selector_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal498 = default(IToken);
		IToken string_literal499 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal498_tree = default(CommonTree);
		CommonTree string_literal499_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(651, 1);
		try
		{
			// SugarCpp.g:652:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:652:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(652, 4);
			// SugarCpp.g:652:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:652:5: a= cast_expr
			{
			DebugLocation(652, 6);
			PushFollow(Follow._cast_expr_in_selector_expr6057);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 652:17: -> $a
			{
				DebugLocation(652, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(652, 24);
			// SugarCpp.g:652:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=3;
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==104))
				{
					alt220 = 1;
				}
				else if ((LA220_0==106))
				{
					alt220 = 2;
				}


				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:652:26: '->*' b= ident
					{
					DebugLocation(652, 26);
					string_literal498=(IToken)Match(input,104,Follow._104_in_selector_expr6067); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal498);

					DebugLocation(652, 33);
					PushFollow(Follow._ident_in_selector_expr6071);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 104, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 652:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(652, 43);
						// SugarCpp.g:652:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(652, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(652, 57);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(652, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(652, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:653:11: '.*' b= ident
					{
					DebugLocation(653, 11);
					string_literal499=(IToken)Match(input,106,Follow._106_in_selector_expr6097); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(string_literal499);

					DebugLocation(653, 18);
					PushFollow(Follow._ident_in_selector_expr6102);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 106, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 653:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(653, 28);
						// SugarCpp.g:653:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(653, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(653, 42);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(653, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(653, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 86);
			LeaveRule("selector_expr", 86);
			LeaveRule_selector_expr();
		}
		DebugLocation(655, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:657:1: cast_expr : ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 87);
		TraceIn("cast_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal500 = default(IToken);
		IToken char_literal502 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr503 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr504 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal500_tree = default(CommonTree);
		CommonTree char_literal502_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(657, 1);
		try
		{
			// SugarCpp.g:658:2: ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt221=2;
			try { DebugEnterDecision(221, false);
			int LA221_0 = input.LA(1);

			if ((LA221_0==91))
			{
				int LA221_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_SugarCpp_fragment)))
				{
					alt221 = 1;
				}
				else if ((true))
				{
					alt221 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 221, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA221_0==IDENT||LA221_0==NUMBER||LA221_0==STRING||LA221_0==84||LA221_0==89||LA221_0==93||(LA221_0>=95 && LA221_0<=96)||(LA221_0>=99 && LA221_0<=100)||LA221_0==129||(LA221_0>=157 && LA221_0<=158)||LA221_0==177))
			{
				alt221 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 221, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(221); }
			switch (alt221)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:658:4: ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr
				{
				DebugLocation(658, 39);
				char_literal500=(IToken)Match(input,91,Follow._91_in_cast_expr6151); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal500);

				DebugLocation(658, 43);
				PushFollow(Follow._type_name_in_cast_expr6153);
				type_name501=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name501.Tree);
				DebugLocation(658, 53);
				char_literal502=(IToken)Match(input,92,Follow._92_in_cast_expr6155); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal502);

				DebugLocation(658, 57);
				PushFollow(Follow._prefix_expr_in_cast_expr6157);
				prefix_expr503=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr503.Tree);


				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 658:69: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(658, 72);
					// SugarCpp.g:658:72: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(658, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(658, 84);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(658, 94);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:659:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(659, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr6172);
				prefix_expr504=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr504.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 87);
			LeaveRule("cast_expr", 87);
			LeaveRule_cast_expr();
		}
		DebugLocation(660, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:662:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 88);
		TraceIn("prefix_expr_op", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set505 = default(IToken);

		CommonTree set505_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(662, 71);
		try
		{
			// SugarCpp.g:662:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(662, 15);

			set505=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==89||input.LA(1)==93||(input.LA(1)>=95 && input.LA(1)<=96)||(input.LA(1)>=99 && input.LA(1)<=100)||input.LA(1)==158||input.LA(1)==177)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set505));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 88);
			LeaveRule("prefix_expr_op", 88);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(662, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:663:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 89);
		TraceIn("prefix_expr", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal508 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op506 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr507 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list510 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list511 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr512 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal508_tree = default(CommonTree);
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(663, 1);
		try
		{
			// SugarCpp.g:664:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt223=3;
			try { DebugEnterDecision(223, false);
			switch (input.LA(1))
			{
			case 84:
			case 89:
			case 93:
			case 95:
			case 96:
			case 99:
			case 100:
			case 158:
			case 177:
				{
				alt223 = 1;
				}
				break;
			case 157:
				{
				alt223 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 91:
			case 129:
				{
				alt223 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 223, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(223); }
			switch (alt223)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:664:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(664, 4);
				// SugarCpp.g:664:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:664:5: prefix_expr_op prefix_expr
				{
				DebugLocation(664, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr6222);
				prefix_expr_op506=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op506.Tree);
				DebugLocation(664, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr6224);
				prefix_expr507=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr507.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 664:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(664, 36);
					// SugarCpp.g:664:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(664, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(664, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(664, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:665:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(665, 4);
				string_literal508=(IToken)Match(input,157,Follow._157_in_prefix_expr6240); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_157.Add(string_literal508);

				DebugLocation(665, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr6242);
				type_no_array509=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array509.Tree);
				DebugLocation(665, 24);
				// SugarCpp.g:665:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt222=2;
				try { DebugEnterSubRule(222);
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==91))
				{
					alt222 = 1;
				}
				else if ((LA222_0==130))
				{
					alt222 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 222, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(222); }
				switch (alt222)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:665:26: bracket_expr_list
					{
					DebugLocation(665, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr6246);
					bracket_expr_list510=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list510.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 665:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(665, 47);
						// SugarCpp.g:665:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(665, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(665, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(665, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:666:11: square_expr_list
					{
					DebugLocation(666, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6268);
					square_expr_list511=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list511.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 666:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(666, 31);
						// SugarCpp.g:666:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(666, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(666, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(666, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(222); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:668:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(668, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6293);
				suffix_expr512=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr512.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 89);
			LeaveRule("prefix_expr", 89);
			LeaveRule_prefix_expr();
		}
		DebugLocation(669, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:671:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 90);
		TraceIn("square_expr_list", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal513 = default(IToken);
		IToken char_literal515 = default(IToken);
		IToken char_literal517 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr514 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr516 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal513_tree = default(CommonTree);
		CommonTree char_literal515_tree = default(CommonTree);
		CommonTree char_literal517_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(671, 1);
		try
		{
			// SugarCpp.g:672:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:672:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(672, 4);
			char_literal513=(IToken)Match(input,130,Follow._130_in_square_expr_list6305); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_130.Add(char_literal513);

			DebugLocation(672, 8);
			PushFollow(Follow._expr_in_square_expr_list6307);
			expr514=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr514.Tree);
			DebugLocation(672, 13);
			// SugarCpp.g:672:13: ( ',' expr )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=2;
				try { DebugEnterDecision(224, false);
				int LA224_0 = input.LA(1);

				if ((LA224_0==98))
				{
					alt224 = 1;
				}


				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:672:14: ',' expr
					{
					DebugLocation(672, 14);
					char_literal515=(IToken)Match(input,98,Follow._98_in_square_expr_list6310); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal515);

					DebugLocation(672, 18);
					PushFollow(Follow._expr_in_square_expr_list6312);
					expr516=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr516.Tree);

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }

			DebugLocation(672, 25);
			char_literal517=(IToken)Match(input,131,Follow._131_in_square_expr_list6316); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_131.Add(char_literal517);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 672:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(672, 32);
				// SugarCpp.g:672:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(672, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(672, 44);
				// SugarCpp.g:672:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(672, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 90);
			LeaveRule("square_expr_list", 90);
			LeaveRule_square_expr_list();
		}
		DebugLocation(673, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:675:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 91);
		TraceIn("bracket_expr_list", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal518 = default(IToken);
		IToken char_literal520 = default(IToken);
		IToken char_literal522 = default(IToken);
		IToken NEWLINE523 = default(IToken);
		IToken INDENT524 = default(IToken);
		IToken NEWLINE525 = default(IToken);
		IToken char_literal527 = default(IToken);
		IToken NEWLINE528 = default(IToken);
		IToken NEWLINE530 = default(IToken);
		IToken char_literal531 = default(IToken);
		IToken NEWLINE532 = default(IToken);
		IToken DEDENT533 = default(IToken);
		IToken DEDENT534 = default(IToken);
		IToken NEWLINE535 = default(IToken);
		IToken char_literal536 = default(IToken);
		IToken char_literal538 = default(IToken);
		IToken NEWLINE539 = default(IToken);
		IToken char_literal541 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr529 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr537 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr540 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal518_tree = default(CommonTree);
		CommonTree char_literal520_tree = default(CommonTree);
		CommonTree char_literal522_tree = default(CommonTree);
		CommonTree NEWLINE523_tree = default(CommonTree);
		CommonTree INDENT524_tree = default(CommonTree);
		CommonTree NEWLINE525_tree = default(CommonTree);
		CommonTree char_literal527_tree = default(CommonTree);
		CommonTree NEWLINE528_tree = default(CommonTree);
		CommonTree NEWLINE530_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		CommonTree NEWLINE532_tree = default(CommonTree);
		CommonTree DEDENT533_tree = default(CommonTree);
		CommonTree DEDENT534_tree = default(CommonTree);
		CommonTree NEWLINE535_tree = default(CommonTree);
		CommonTree char_literal536_tree = default(CommonTree);
		CommonTree char_literal538_tree = default(CommonTree);
		CommonTree NEWLINE539_tree = default(CommonTree);
		CommonTree char_literal541_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(675, 1);
		try
		{
			// SugarCpp.g:676:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:676:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(676, 4);
			char_literal518=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6336); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal518);

			DebugLocation(676, 8);
			// SugarCpp.g:676:8: ( expr ( ',' expr )* )?
			int alt226=2;
			try { DebugEnterSubRule(226);
			try { DebugEnterDecision(226, false);
			int LA226_0 = input.LA(1);

			if ((LA226_0==IDENT||LA226_0==NUMBER||LA226_0==STRING||LA226_0==84||LA226_0==89||LA226_0==91||LA226_0==93||(LA226_0>=95 && LA226_0<=96)||(LA226_0>=99 && LA226_0<=100)||(LA226_0>=129 && LA226_0<=130)||LA226_0==152||LA226_0==155||(LA226_0>=157 && LA226_0<=158)||LA226_0==177))
			{
				alt226 = 1;
			}
			} finally { DebugExitDecision(226); }
			switch (alt226)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:676:9: expr ( ',' expr )*
				{
				DebugLocation(676, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6339);
				expr519=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr519.Tree);
				DebugLocation(676, 14);
				// SugarCpp.g:676:14: ( ',' expr )*
				try { DebugEnterSubRule(225);
				while (true)
				{
					int alt225=2;
					try { DebugEnterDecision(225, false);
					int LA225_0 = input.LA(1);

					if ((LA225_0==98))
					{
						alt225 = 1;
					}


					} finally { DebugExitDecision(225); }
					switch ( alt225 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:676:15: ',' expr
						{
						DebugLocation(676, 15);
						char_literal520=(IToken)Match(input,98,Follow._98_in_bracket_expr_list6342); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal520);

						DebugLocation(676, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6344);
						expr521=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr521.Tree);

						}
						break;

					default:
						goto loop225;
					}
				}

				loop225:
					;

				} finally { DebugExitSubRule(225); }


				}
				break;

			}
			} finally { DebugExitSubRule(226); }

			DebugLocation(676, 28);
			// SugarCpp.g:676:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt239=2;
			try { DebugEnterSubRule(239);
			try { DebugEnterDecision(239, false);
			int LA239_0 = input.LA(1);

			if ((LA239_0==92))
			{
				alt239 = 1;
			}
			else if ((LA239_0==NEWLINE))
			{
				alt239 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(239); }
			switch (alt239)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:676:30: ')'
				{
				DebugLocation(676, 30);
				char_literal522=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6352); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal522);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 676:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(676, 37);
					// SugarCpp.g:676:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(676, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(676, 49);
					// SugarCpp.g:676:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(676, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:677:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(677, 12);
				// SugarCpp.g:677:12: ( NEWLINE )+
				int cnt227=0;
				try { DebugEnterSubRule(227);
				while (true)
				{
					int alt227=2;
					try { DebugEnterDecision(227, false);
					int LA227_0 = input.LA(1);

					if ((LA227_0==NEWLINE))
					{
						alt227 = 1;
					}


					} finally { DebugExitDecision(227); }
					switch (alt227)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:677:12: NEWLINE
						{
						DebugLocation(677, 12);
						NEWLINE523=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6374); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE523);


						}
						break;

					default:
						if (cnt227 >= 1)
							goto loop227;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee227 = new EarlyExitException( 227, input );
						DebugRecognitionException(eee227);
						throw eee227;
					}
					cnt227++;
				}
				loop227:
					;

				} finally { DebugExitSubRule(227); }

				DebugLocation(677, 21);
				// SugarCpp.g:677:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt238=2;
				try { DebugEnterSubRule(238);
				try { DebugEnterDecision(238, false);
				int LA238_0 = input.LA(1);

				if ((LA238_0==INDENT))
				{
					alt238 = 1;
				}
				else if ((LA238_0==IDENT||LA238_0==NUMBER||LA238_0==STRING||LA238_0==84||LA238_0==89||(LA238_0>=91 && LA238_0<=93)||(LA238_0>=95 && LA238_0<=96)||(LA238_0>=99 && LA238_0<=100)||(LA238_0>=129 && LA238_0<=130)||LA238_0==152||LA238_0==155||(LA238_0>=157 && LA238_0<=158)||LA238_0==177))
				{
					alt238 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 238, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(238); }
				switch (alt238)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:677:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(677, 23);
					INDENT524=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6379); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT524);

					DebugLocation(677, 30);
					// SugarCpp.g:677:30: ( NEWLINE )*
					try { DebugEnterSubRule(228);
					while (true)
					{
						int alt228=2;
						try { DebugEnterDecision(228, false);
						int LA228_0 = input.LA(1);

						if ((LA228_0==NEWLINE))
						{
							alt228 = 1;
						}


						} finally { DebugExitDecision(228); }
						switch ( alt228 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:677:30: NEWLINE
							{
							DebugLocation(677, 30);
							NEWLINE525=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6381); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE525);


							}
							break;

						default:
							goto loop228;
						}
					}

					loop228:
						;

					} finally { DebugExitSubRule(228); }

					DebugLocation(677, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6384);
					expr526=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr526.Tree);
					DebugLocation(677, 44);
					// SugarCpp.g:677:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(230);
					while (true)
					{
						int alt230=2;
						try { DebugEnterDecision(230, false);
						try
						{
							alt230 = dfa230.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(230); }
						switch ( alt230 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:677:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(677, 45);
							// SugarCpp.g:677:45: ( ',' | NEWLINE )+
							int cnt229=0;
							try { DebugEnterSubRule(229);
							while (true)
							{
								int alt229=3;
								try { DebugEnterDecision(229, false);
								int LA229_0 = input.LA(1);

								if ((LA229_0==98))
								{
									alt229 = 1;
								}
								else if ((LA229_0==NEWLINE))
								{
									alt229 = 2;
								}


								} finally { DebugExitDecision(229); }
								switch (alt229)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:677:46: ','
									{
									DebugLocation(677, 46);
									char_literal527=(IToken)Match(input,98,Follow._98_in_bracket_expr_list6388); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_98.Add(char_literal527);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:677:52: NEWLINE
									{
									DebugLocation(677, 52);
									NEWLINE528=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6392); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE528);


									}
									break;

								default:
									if (cnt229 >= 1)
										goto loop229;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee229 = new EarlyExitException( 229, input );
									DebugRecognitionException(eee229);
									throw eee229;
								}
								cnt229++;
							}
							loop229:
								;

							} finally { DebugExitSubRule(229); }

							DebugLocation(677, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6396);
							expr529=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr529.Tree);

							}
							break;

						default:
							goto loop230;
						}
					}

					loop230:
						;

					} finally { DebugExitSubRule(230); }

					DebugLocation(677, 69);
					// SugarCpp.g:677:69: ( NEWLINE )*
					try { DebugEnterSubRule(231);
					while (true)
					{
						int alt231=2;
						try { DebugEnterDecision(231, false);
						int LA231_0 = input.LA(1);

						if ((LA231_0==NEWLINE))
						{
							alt231 = 1;
						}


						} finally { DebugExitDecision(231); }
						switch ( alt231 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:677:69: NEWLINE
							{
							DebugLocation(677, 69);
							NEWLINE530=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6400); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE530);


							}
							break;

						default:
							goto loop231;
						}
					}

					loop231:
						;

					} finally { DebugExitSubRule(231); }

					DebugLocation(677, 78);
					// SugarCpp.g:677:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt234=2;
					try { DebugEnterSubRule(234);
					try { DebugEnterDecision(234, false);
					int LA234_0 = input.LA(1);

					if ((LA234_0==92))
					{
						alt234 = 1;
					}
					else if ((LA234_0==DEDENT))
					{
						alt234 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 234, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(234); }
					switch (alt234)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:677:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(677, 80);
						char_literal531=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6405); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal531);

						DebugLocation(677, 84);
						// SugarCpp.g:677:84: ( NEWLINE )*
						try { DebugEnterSubRule(232);
						while (true)
						{
							int alt232=2;
							try { DebugEnterDecision(232, false);
							int LA232_0 = input.LA(1);

							if ((LA232_0==NEWLINE))
							{
								alt232 = 1;
							}


							} finally { DebugExitDecision(232); }
							switch ( alt232 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:677:84: NEWLINE
								{
								DebugLocation(677, 84);
								NEWLINE532=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6407); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE532);


								}
								break;

							default:
								goto loop232;
							}
						}

						loop232:
							;

						} finally { DebugExitSubRule(232); }

						DebugLocation(677, 93);
						DEDENT533=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6410); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT533);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:677:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(677, 102);
						DEDENT534=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6414); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT534);

						DebugLocation(677, 109);
						// SugarCpp.g:677:109: ( NEWLINE )*
						try { DebugEnterSubRule(233);
						while (true)
						{
							int alt233=2;
							try { DebugEnterDecision(233, false);
							int LA233_0 = input.LA(1);

							if ((LA233_0==NEWLINE))
							{
								alt233 = 1;
							}


							} finally { DebugExitDecision(233); }
							switch ( alt233 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:677:109: NEWLINE
								{
								DebugLocation(677, 109);
								NEWLINE535=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6416); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE535);


								}
								break;

							default:
								goto loop233;
							}
						}

						loop233:
							;

						} finally { DebugExitSubRule(233); }

						DebugLocation(677, 118);
						char_literal536=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6419); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal536);


						}
						break;

					}
					} finally { DebugExitSubRule(234); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 677:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(677, 127);
						// SugarCpp.g:677:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(677, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(677, 139);
						// SugarCpp.g:677:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(677, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:678:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(678, 14);
					// SugarCpp.g:678:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt237=2;
					try { DebugEnterSubRule(237);
					try { DebugEnterDecision(237, false);
					int LA237_0 = input.LA(1);

					if ((LA237_0==IDENT||LA237_0==NUMBER||LA237_0==STRING||LA237_0==84||LA237_0==89||LA237_0==91||LA237_0==93||(LA237_0>=95 && LA237_0<=96)||(LA237_0>=99 && LA237_0<=100)||(LA237_0>=129 && LA237_0<=130)||LA237_0==152||LA237_0==155||(LA237_0>=157 && LA237_0<=158)||LA237_0==177))
					{
						alt237 = 1;
					}
					} finally { DebugExitDecision(237); }
					switch (alt237)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:678:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(678, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6446);
						expr537=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr537.Tree);
						DebugLocation(678, 20);
						// SugarCpp.g:678:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(236);
						while (true)
						{
							int alt236=2;
							try { DebugEnterDecision(236, false);
							int LA236_0 = input.LA(1);

							if ((LA236_0==NEWLINE||LA236_0==98))
							{
								alt236 = 1;
							}


							} finally { DebugExitDecision(236); }
							switch ( alt236 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:678:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(678, 21);
								// SugarCpp.g:678:21: ( ',' | NEWLINE )+
								int cnt235=0;
								try { DebugEnterSubRule(235);
								while (true)
								{
									int alt235=3;
									try { DebugEnterDecision(235, false);
									int LA235_0 = input.LA(1);

									if ((LA235_0==98))
									{
										alt235 = 1;
									}
									else if ((LA235_0==NEWLINE))
									{
										alt235 = 2;
									}


									} finally { DebugExitDecision(235); }
									switch (alt235)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:678:22: ','
										{
										DebugLocation(678, 22);
										char_literal538=(IToken)Match(input,98,Follow._98_in_bracket_expr_list6450); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_98.Add(char_literal538);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:678:28: NEWLINE
										{
										DebugLocation(678, 28);
										NEWLINE539=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6454); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE539);


										}
										break;

									default:
										if (cnt235 >= 1)
											goto loop235;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee235 = new EarlyExitException( 235, input );
										DebugRecognitionException(eee235);
										throw eee235;
									}
									cnt235++;
								}
								loop235:
									;

								} finally { DebugExitSubRule(235); }

								DebugLocation(678, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6458);
								expr540=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr540.Tree);

								}
								break;

							default:
								goto loop236;
							}
						}

						loop236:
							;

						} finally { DebugExitSubRule(236); }


						}
						break;

					}
					} finally { DebugExitSubRule(237); }

					DebugLocation(678, 47);
					char_literal541=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6464); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal541);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 678:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(678, 54);
						// SugarCpp.g:678:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(678, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(678, 66);
						// SugarCpp.g:678:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(678, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(238); }


				}
				break;

			}
			} finally { DebugExitSubRule(239); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 91);
			LeaveRule("bracket_expr_list", 91);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(681, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:683:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 92);
		TraceIn("suffix_expr", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal542 = default(IToken);
		IToken string_literal543 = default(IToken);
		IToken char_literal544 = default(IToken);
		IToken string_literal546 = default(IToken);
		IToken char_literal550 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident545 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident547 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list548 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list549 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident551 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list552 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal542_tree = default(CommonTree);
		CommonTree string_literal543_tree = default(CommonTree);
		CommonTree char_literal544_tree = default(CommonTree);
		CommonTree string_literal546_tree = default(CommonTree);
		CommonTree char_literal550_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(683, 1);
		try
		{
			// SugarCpp.g:684:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:684:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(684, 4);
			// SugarCpp.g:684:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:684:5: a= atom_expr
			{
			DebugLocation(684, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6511);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 684:17: -> $a
			{
				DebugLocation(684, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(684, 24);
			// SugarCpp.g:684:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(240);
			while (true)
			{
				int alt240=8;
				try { DebugEnterDecision(240, false);
				switch (input.LA(1))
				{
				case 96:
					{
					alt240 = 1;
					}
					break;
				case 100:
					{
					alt240 = 2;
					}
					break;
				case 105:
					{
					alt240 = 3;
					}
					break;
				case 103:
					{
					alt240 = 4;
					}
					break;
				case 91:
					{
					alt240 = 5;
					}
					break;
				case 130:
					{
					alt240 = 6;
					}
					break;
				case 129:
					{
					alt240 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(240); }
				switch ( alt240 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:684:26: '++'
					{
					DebugLocation(684, 26);
					string_literal542=(IToken)Match(input,96,Follow._96_in_suffix_expr6521); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(string_literal542);



					{
					// AST REWRITE
					// elements: suffix_expr, 96
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 684:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(684, 34);
						// SugarCpp.g:684:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(684, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(684, 48);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(684, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:685:14: '--'
					{
					DebugLocation(685, 14);
					string_literal543=(IToken)Match(input,100,Follow._100_in_suffix_expr6547); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(string_literal543);



					{
					// AST REWRITE
					// elements: suffix_expr, 100
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 685:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(685, 22);
						// SugarCpp.g:685:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(685, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(685, 36);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(685, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:686:11: '.' ident
					{
					DebugLocation(686, 11);
					char_literal544=(IToken)Match(input,105,Follow._105_in_suffix_expr6570); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal544);

					DebugLocation(686, 15);
					PushFollow(Follow._ident_in_suffix_expr6572);
					ident545=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident545.Tree);


					{
					// AST REWRITE
					// elements: ident, 105, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 686:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(686, 24);
						// SugarCpp.g:686:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(686, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(686, 38);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(686, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(686, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:687:11: '->' ident
					{
					DebugLocation(687, 11);
					string_literal546=(IToken)Match(input,103,Follow._103_in_suffix_expr6597); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal546);

					DebugLocation(687, 16);
					PushFollow(Follow._ident_in_suffix_expr6599);
					ident547=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident547.Tree);


					{
					// AST REWRITE
					// elements: ident, 103, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 687:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(687, 25);
						// SugarCpp.g:687:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(687, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(687, 39);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(687, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(687, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:688:11: bracket_expr_list
					{
					DebugLocation(688, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6624);
					bracket_expr_list548=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list548.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 688:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(688, 32);
						// SugarCpp.g:688:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(688, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(688, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(688, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:689:11: square_expr_list
					{
					DebugLocation(689, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6647);
					square_expr_list549=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list549.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 689:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(689, 31);
						// SugarCpp.g:689:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(689, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(689, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(689, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:690:11: '@' ident bracket_expr_list
					{
					DebugLocation(690, 11);
					char_literal550=(IToken)Match(input,129,Follow._129_in_suffix_expr6670); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_129.Add(char_literal550);

					DebugLocation(690, 15);
					PushFollow(Follow._ident_in_suffix_expr6672);
					ident551=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident551.Tree);
					DebugLocation(690, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6674);
					bracket_expr_list552=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list552.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 690:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(690, 42);
						// SugarCpp.g:690:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(690, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(690, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(690, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(690, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop240;
				}
			}

			loop240:
				;

			} finally { DebugExitSubRule(240); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 92);
			LeaveRule("suffix_expr", 92);
			LeaveRule_suffix_expr();
		}
		DebugLocation(692, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:694:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 93);
		TraceIn("atom_expr", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER553 = default(IToken);
		IToken STRING555 = default(IToken);
		IToken char_literal556 = default(IToken);
		IToken char_literal558 = default(IToken);
		IToken char_literal559 = default(IToken);
		IToken char_literal561 = default(IToken);
		IToken char_literal562 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident557 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr560 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER553_tree = default(CommonTree);
		CommonTree STRING555_tree = default(CommonTree);
		CommonTree char_literal556_tree = default(CommonTree);
		CommonTree char_literal558_tree = default(CommonTree);
		CommonTree char_literal559_tree = default(CommonTree);
		CommonTree char_literal561_tree = default(CommonTree);
		CommonTree char_literal562_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(694, 1);
		try
		{
			// SugarCpp.g:695:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt243=5;
			try { DebugEnterDecision(243, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt243 = 1;
				}
				break;
			case IDENT:
				{
				alt243 = 2;
				}
				break;
			case STRING:
				{
				alt243 = 3;
				}
				break;
			case 129:
				{
				alt243 = 4;
				}
				break;
			case 91:
				{
				alt243 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 243, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(243); }
			switch (alt243)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:695:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(695, 4);
				NUMBER553=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6712); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER553_tree = (CommonTree)adaptor.Create(NUMBER553);
				adaptor.AddChild(root_0, NUMBER553_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:696:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(696, 4);
				PushFollow(Follow._ident_in_atom_expr6717);
				ident554=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident554.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:697:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(697, 4);
				STRING555=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6722); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING555_tree = (CommonTree)adaptor.Create(STRING555);
				adaptor.AddChild(root_0, STRING555_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:698:4: '@' ident
				{
				DebugLocation(698, 4);
				char_literal556=(IToken)Match(input,129,Follow._129_in_atom_expr6727); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(char_literal556);

				DebugLocation(698, 8);
				PushFollow(Follow._ident_in_atom_expr6729);
				ident557=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident557.Tree);


				{
				// AST REWRITE
				// elements: ident, 129
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 698:14: -> ^( '@' ident )
				{
					DebugLocation(698, 17);
					// SugarCpp.g:698:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(698, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_129.NextNode(), root_1);

					DebugLocation(698, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:699:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(699, 4);
				char_literal558=(IToken)Match(input,91,Follow._91_in_atom_expr6742); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal558);

				DebugLocation(699, 9);
				PushFollow(Follow._expr_in_atom_expr6746);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(699, 15);
				// SugarCpp.g:699:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt242=2;
				try { DebugEnterSubRule(242);
				try { DebugEnterDecision(242, false);
				int LA242_0 = input.LA(1);

				if ((LA242_0==98))
				{
					alt242 = 1;
				}
				else if ((LA242_0==92))
				{
					alt242 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 242, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(242); }
				switch (alt242)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:699:17: ( ',' expr )+ ')'
					{
					DebugLocation(699, 17);
					// SugarCpp.g:699:17: ( ',' expr )+
					int cnt241=0;
					try { DebugEnterSubRule(241);
					while (true)
					{
						int alt241=2;
						try { DebugEnterDecision(241, false);
						int LA241_0 = input.LA(1);

						if ((LA241_0==98))
						{
							alt241 = 1;
						}


						} finally { DebugExitDecision(241); }
						switch (alt241)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:699:18: ',' expr
							{
							DebugLocation(699, 18);
							char_literal559=(IToken)Match(input,98,Follow._98_in_atom_expr6751); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal559);

							DebugLocation(699, 22);
							PushFollow(Follow._expr_in_atom_expr6753);
							expr560=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr560.Tree);

							}
							break;

						default:
							if (cnt241 >= 1)
								goto loop241;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee241 = new EarlyExitException( 241, input );
							DebugRecognitionException(eee241);
							throw eee241;
						}
						cnt241++;
					}
					loop241:
						;

					} finally { DebugExitSubRule(241); }

					DebugLocation(699, 29);
					char_literal561=(IToken)Match(input,92,Follow._92_in_atom_expr6757); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal561);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 699:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(699, 36);
						// SugarCpp.g:699:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(699, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(699, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(699, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:700:17: ')' {...}?
					{
					DebugLocation(700, 17);
					char_literal562=(IToken)Match(input,92,Follow._92_in_atom_expr6784); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal562);

					DebugLocation(700, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 700:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(700, 40);
						// SugarCpp.g:700:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(700, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(700, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(242); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 93);
			LeaveRule("atom_expr", 93);
			LeaveRule_atom_expr();
		}
		DebugLocation(702, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:704:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 94);
		TraceIn("lvalue_item", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix563 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(704, 1);
		try
		{
			// SugarCpp.g:705:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:705:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(705, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6815);
			lvalue_prefix563=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix563.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 94);
			LeaveRule("lvalue_item", 94);
			LeaveRule_lvalue_item();
		}
		DebugLocation(706, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:708:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 95);
		TraceIn("lvalue_prefix", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op564 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix565 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix566 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(708, 1);
		try
		{
			// SugarCpp.g:709:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt244=2;
			try { DebugEnterDecision(244, false);
			int LA244_0 = input.LA(1);

			if ((LA244_0==84||LA244_0==89||LA244_0==93||(LA244_0>=95 && LA244_0<=96)||(LA244_0>=99 && LA244_0<=100)||LA244_0==158||LA244_0==177))
			{
				alt244 = 1;
			}
			else if ((LA244_0==IDENT||LA244_0==129))
			{
				alt244 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 244, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(244); }
			switch (alt244)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:709:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(709, 4);
				// SugarCpp.g:709:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:709:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(709, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6827);
				prefix_expr_op564=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op564.Tree);
				DebugLocation(709, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6829);
				lvalue_prefix565=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix565.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 709:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(709, 38);
					// SugarCpp.g:709:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(709, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(709, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(709, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:710:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(710, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6845);
				lvalue_suffix566=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix566.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 95);
			LeaveRule("lvalue_prefix", 95);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(711, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:713:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 96);
		TraceIn("lvalue_suffix", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal567 = default(IToken);
		IToken string_literal568 = default(IToken);
		IToken char_literal569 = default(IToken);
		IToken string_literal571 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident570 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident572 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter573 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list574 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list575 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal567_tree = default(CommonTree);
		CommonTree string_literal568_tree = default(CommonTree);
		CommonTree char_literal569_tree = default(CommonTree);
		CommonTree string_literal571_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(713, 1);
		try
		{
			// SugarCpp.g:714:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:714:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(714, 4);
			// SugarCpp.g:714:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:714:5: a= lvalue_atom
			{
			DebugLocation(714, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6859);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 714:19: -> $a
			{
				DebugLocation(714, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(714, 26);
			// SugarCpp.g:714:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(246);
			while (true)
			{
				int alt246=7;
				try { DebugEnterDecision(246, false);
				switch (input.LA(1))
				{
				case 96:
					{
					alt246 = 1;
					}
					break;
				case 100:
					{
					alt246 = 2;
					}
					break;
				case 105:
					{
					alt246 = 3;
					}
					break;
				case 103:
					{
					alt246 = 4;
					}
					break;
				case 91:
				case 113:
					{
					alt246 = 5;
					}
					break;
				case 130:
					{
					alt246 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(246); }
				switch ( alt246 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:714:28: '++'
					{
					DebugLocation(714, 28);
					string_literal567=(IToken)Match(input,96,Follow._96_in_lvalue_suffix6869); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(string_literal567);



					{
					// AST REWRITE
					// elements: 96, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 714:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(714, 36);
						// SugarCpp.g:714:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(714, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(714, 50);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(714, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:715:16: '--'
					{
					DebugLocation(715, 16);
					string_literal568=(IToken)Match(input,100,Follow._100_in_lvalue_suffix6897); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(string_literal568);



					{
					// AST REWRITE
					// elements: 100, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 715:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(715, 24);
						// SugarCpp.g:715:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(715, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(715, 38);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(715, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:716:13: '.' ident
					{
					DebugLocation(716, 13);
					char_literal569=(IToken)Match(input,105,Follow._105_in_lvalue_suffix6922); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal569);

					DebugLocation(716, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6924);
					ident570=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident570.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_suffix, 105
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 716:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(716, 26);
						// SugarCpp.g:716:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(716, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(716, 40);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(716, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(716, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:717:13: '->' ident
					{
					DebugLocation(717, 13);
					string_literal571=(IToken)Match(input,103,Follow._103_in_lvalue_suffix6951); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal571);

					DebugLocation(717, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6953);
					ident572=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident572.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, ident, 103
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 717:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(717, 27);
						// SugarCpp.g:717:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(717, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(717, 41);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(717, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(717, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:718:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(718, 13);
					// SugarCpp.g:718:13: ( generic_parameter )?
					int alt245=2;
					try { DebugEnterSubRule(245);
					try { DebugEnterDecision(245, false);
					int LA245_0 = input.LA(1);

					if ((LA245_0==113))
					{
						alt245 = 1;
					}
					} finally { DebugExitDecision(245); }
					switch (alt245)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:718:13: generic_parameter
						{
						DebugLocation(718, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix6980);
						generic_parameter573=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter573.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(245); }

					DebugLocation(718, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix6983);
					bracket_expr_list574=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list574.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter, bracket_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 718:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(718, 53);
						// SugarCpp.g:718:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(718, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(718, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(718, 80);
						// SugarCpp.g:718:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(718, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(718, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:719:13: square_expr_list
					{
					DebugLocation(719, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix7011);
					square_expr_list575=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list575.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 719:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(719, 33);
						// SugarCpp.g:719:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(719, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(719, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(719, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop246;
				}
			}

			loop246:
				;

			} finally { DebugExitSubRule(246); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 96);
			LeaveRule("lvalue_suffix", 96);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(721, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:723:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 97);
		TraceIn("lvalue_atom", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal577 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident576 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident578 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal577_tree = default(CommonTree);
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(723, 1);
		try
		{
			// SugarCpp.g:724:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt247=2;
			try { DebugEnterDecision(247, false);
			int LA247_0 = input.LA(1);

			if ((LA247_0==IDENT))
			{
				alt247 = 1;
			}
			else if ((LA247_0==129))
			{
				alt247 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 247, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(247); }
			switch (alt247)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:724:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(724, 4);
				PushFollow(Follow._ident_in_lvalue_atom7049);
				ident576=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident576.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:725:4: '@' ident
				{
				DebugLocation(725, 4);
				char_literal577=(IToken)Match(input,129,Follow._129_in_lvalue_atom7054); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(char_literal577);

				DebugLocation(725, 8);
				PushFollow(Follow._ident_in_lvalue_atom7056);
				ident578=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident578.Tree);


				{
				// AST REWRITE
				// elements: 129, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 725:14: -> ^( '@' ident )
				{
					DebugLocation(725, 17);
					// SugarCpp.g:725:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(725, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_129.NextNode(), root_1);

					DebugLocation(725, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 97);
			LeaveRule("lvalue_atom", 97);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(726, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:728:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 98);
		TraceIn("lvalue", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal579 = default(IToken);
		IToken char_literal581 = default(IToken);
		IToken char_literal583 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item580 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item582 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item584 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal579_tree = default(CommonTree);
		CommonTree char_literal581_tree = default(CommonTree);
		CommonTree char_literal583_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(728, 1);
		try
		{
			// SugarCpp.g:729:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt249=2;
			try { DebugEnterDecision(249, false);
			int LA249_0 = input.LA(1);

			if ((LA249_0==91))
			{
				alt249 = 1;
			}
			else if ((LA249_0==IDENT||LA249_0==84||LA249_0==89||LA249_0==93||(LA249_0>=95 && LA249_0<=96)||(LA249_0>=99 && LA249_0<=100)||LA249_0==129||LA249_0==158||LA249_0==177))
			{
				alt249 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 249, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(249); }
			switch (alt249)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:729:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(729, 4);
				char_literal579=(IToken)Match(input,91,Follow._91_in_lvalue7075); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal579);

				DebugLocation(729, 8);
				PushFollow(Follow._lvalue_item_in_lvalue7077);
				lvalue_item580=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item580.Tree);
				DebugLocation(729, 20);
				// SugarCpp.g:729:20: ( ',' lvalue_item )+
				int cnt248=0;
				try { DebugEnterSubRule(248);
				while (true)
				{
					int alt248=2;
					try { DebugEnterDecision(248, false);
					int LA248_0 = input.LA(1);

					if ((LA248_0==98))
					{
						alt248 = 1;
					}


					} finally { DebugExitDecision(248); }
					switch (alt248)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:729:21: ',' lvalue_item
						{
						DebugLocation(729, 21);
						char_literal581=(IToken)Match(input,98,Follow._98_in_lvalue7080); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal581);

						DebugLocation(729, 25);
						PushFollow(Follow._lvalue_item_in_lvalue7082);
						lvalue_item582=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item582.Tree);

						}
						break;

					default:
						if (cnt248 >= 1)
							goto loop248;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee248 = new EarlyExitException( 248, input );
						DebugRecognitionException(eee248);
						throw eee248;
					}
					cnt248++;
				}
				loop248:
					;

				} finally { DebugExitSubRule(248); }

				DebugLocation(729, 39);
				char_literal583=(IToken)Match(input,92,Follow._92_in_lvalue7086); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal583);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 729:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(729, 46);
					// SugarCpp.g:729:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(729, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(729, 60);
					// SugarCpp.g:729:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(729, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:730:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(730, 4);
				PushFollow(Follow._lvalue_item_in_lvalue7100);
				lvalue_item584=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item584.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 98);
			LeaveRule("lvalue", 98);
			LeaveRule_lvalue();
		}
		DebugLocation(731, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:733:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 99);
		TraceIn("ident", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT585 = default(IToken);
		IToken string_literal586 = default(IToken);
		IToken IDENT587 = default(IToken);

		CommonTree IDENT585_tree = default(CommonTree);
		CommonTree string_literal586_tree = default(CommonTree);
		CommonTree IDENT587_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(733, 1);
		try
		{
			// SugarCpp.g:734:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:734:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(734, 4);
			IDENT585=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7111); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT585_tree = (CommonTree)adaptor.Create(IDENT585);
			adaptor.AddChild(root_0, IDENT585_tree);
			}
			DebugLocation(734, 10);
			// SugarCpp.g:734:10: ( '::' IDENT )*
			try { DebugEnterSubRule(250);
			while (true)
			{
				int alt250=2;
				try { DebugEnterDecision(250, false);
				int LA250_0 = input.LA(1);

				if ((LA250_0==110))
				{
					alt250 = 1;
				}


				} finally { DebugExitDecision(250); }
				switch ( alt250 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:734:11: '::' IDENT
					{
					DebugLocation(734, 11);
					string_literal586=(IToken)Match(input,110,Follow._110_in_ident7114); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal586_tree = (CommonTree)adaptor.Create(string_literal586);
					adaptor.AddChild(root_0, string_literal586_tree);
					}
					DebugLocation(734, 16);
					IDENT587=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7116); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT587_tree = (CommonTree)adaptor.Create(IDENT587);
					adaptor.AddChild(root_0, IDENT587_tree);
					}

					}
					break;

				default:
					goto loop250;
				}
			}

			loop250:
				;

			} finally { DebugExitSubRule(250); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 99);
			LeaveRule("ident", 99);
			LeaveRule_ident();
		}
		DebugLocation(735, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:737:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 100);
		TraceIn("infix_func", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal588 = default(IToken);
		IToken char_literal590 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident589 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal588_tree = default(CommonTree);
		CommonTree char_literal590_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(737, 1);
		try
		{
			// SugarCpp.g:738:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:738:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(738, 7);
			char_literal588=(IToken)Match(input,134,Follow._134_in_infix_func7129); if (state.failed) return retval;
			DebugLocation(738, 9);
			PushFollow(Follow._ident_in_infix_func7132);
			ident589=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident589.Tree);
			DebugLocation(738, 18);
			char_literal590=(IToken)Match(input,134,Follow._134_in_infix_func7134); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 100);
			LeaveRule("infix_func", 100);
			LeaveRule_infix_func();
		}
		DebugLocation(739, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 101);
		TraceIn("synpred1_SugarCpp_fragment", 101);
		try
		{
			// SugarCpp.g:549:4: ( modify_expr ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:549:5: modify_expr ( '<|' | '|>' )
			{
			DebugLocation(549, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp4444);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(549, 17);
			if (input.LA(1)==118||input.LA(1)==175)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 101);
			LeaveRule("synpred1_SugarCpp_fragment", 101);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 102);
		TraceIn("synpred2_SugarCpp_fragment", 102);
		try
		{
			// SugarCpp.g:556:4: ( '[' feed_expr 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:556:5: '[' feed_expr 'for'
			{
			DebugLocation(556, 5);
			Match(input,130,Follow._130_in_synpred2_SugarCpp4558); if (state.failed) return;
			DebugLocation(556, 9);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp4560);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(556, 19);
			Match(input,146,Follow._146_in_synpred2_SugarCpp4562); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 102);
			LeaveRule("synpred2_SugarCpp_fragment", 102);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 103);
		TraceIn("synpred3_SugarCpp_fragment", 103);
		try
		{
			// SugarCpp.g:620:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )
			DebugEnterAlt(1);
			// SugarCpp.g:620:28: '<' ident ( ',' ident )* '>' bracket_expr_list
			{
			DebugLocation(620, 28);
			Match(input,113,Follow._113_in_synpred3_SugarCpp5514); if (state.failed) return;
			DebugLocation(620, 32);
			PushFollow(Follow._ident_in_synpred3_SugarCpp5516);
			ident();
			PopFollow();
			if (state.failed) return;
			DebugLocation(620, 38);
			// SugarCpp.g:620:38: ( ',' ident )*
			try { DebugEnterSubRule(251);
			while (true)
			{
				int alt251=2;
				try { DebugEnterDecision(251, false);
				int LA251_0 = input.LA(1);

				if ((LA251_0==98))
				{
					alt251 = 1;
				}


				} finally { DebugExitDecision(251); }
				switch ( alt251 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:620:39: ',' ident
					{
					DebugLocation(620, 39);
					Match(input,98,Follow._98_in_synpred3_SugarCpp5519); if (state.failed) return;
					DebugLocation(620, 43);
					PushFollow(Follow._ident_in_synpred3_SugarCpp5521);
					ident();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop251;
				}
			}

			loop251:
				;

			} finally { DebugExitSubRule(251); }

			DebugLocation(620, 51);
			Match(input,123,Follow._123_in_synpred3_SugarCpp5525); if (state.failed) return;
			DebugLocation(620, 55);
			PushFollow(Follow._bracket_expr_list_in_synpred3_SugarCpp5527);
			bracket_expr_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 103);
			LeaveRule("synpred3_SugarCpp_fragment", 103);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp

	partial void EnterRule_synpred4_SugarCpp_fragment();
	partial void LeaveRule_synpred4_SugarCpp_fragment();

	// $ANTLR start synpred4_SugarCpp
	public void synpred4_SugarCpp_fragment()
	{
		EnterRule_synpred4_SugarCpp_fragment();
		EnterRule("synpred4_SugarCpp_fragment", 104);
		TraceIn("synpred4_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:658:4: ( '(' type_name ')' prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:658:5: '(' type_name ')' prefix_expr
			{
			DebugLocation(658, 5);
			Match(input,91,Follow._91_in_synpred4_SugarCpp6140); if (state.failed) return;
			DebugLocation(658, 9);
			PushFollow(Follow._type_name_in_synpred4_SugarCpp6142);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(658, 19);
			Match(input,92,Follow._92_in_synpred4_SugarCpp6144); if (state.failed) return;
			DebugLocation(658, 23);
			PushFollow(Follow._prefix_expr_in_synpred4_SugarCpp6146);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_SugarCpp_fragment", 104);
			LeaveRule("synpred4_SugarCpp_fragment", 104);
			LeaveRule_synpred4_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred4_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA28 dfa28;
	private DFA35 dfa35;
	private DFA42 dfa42;
	private DFA49 dfa49;
	private DFA77 dfa77;
	private DFA99 dfa99;
	private DFA108 dfa108;
	private DFA113 dfa113;
	private DFA126 dfa126;
	private DFA168 dfa168;
	private DFA157 dfa157;
	private DFA192 dfa192;
	private DFA191 dfa191;
	private DFA200 dfa200;
	private DFA230 dfa230;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa28 = new DFA28( this );
		dfa35 = new DFA35( this );
		dfa42 = new DFA42( this );
		dfa49 = new DFA49( this );
		dfa77 = new DFA77( this );
		dfa99 = new DFA99( this );
		dfa108 = new DFA108( this );
		dfa113 = new DFA113( this );
		dfa126 = new DFA126( this );
		dfa168 = new DFA168( this );
		dfa157 = new DFA157( this );
		dfa192 = new DFA192( this );
		dfa191 = new DFA191( this );
		dfa200 = new DFA200( this );
		dfa230 = new DFA230( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2D\x1\xFFFF\x1\x2D\x6\xFFFF\x2\x5B\x1\x2D\x1\xFFFF\x3\x2D\x1\x36"+
			"\x2\x2D\x1\x5B\x3\x5C\x2\x5B\x1\x2D\x3\x5C\x1\x2D\x1\x62\x5\x2D\x1\x62"+
			"\x1\x2D\x4\x5C\x1\x5B\xA\x5C\x2\x2D\x1\x62\x2\x2D\x1\x62\x2\x2D\xA\x5C"+
			"\x2\x2D\x2\x5C";
		private const string DFA4_maxS =
			"\x1\xB1\x1\x8C\x1\xFFFF\x1\xB1\x6\xFFFF\x2\x83\x1\x2D\x1\xFFFF\x1\x2D"+
			"\x1\x3C\x1\x8C\x1\x36\x1\x3C\x1\xB1\x1\x83\x2\x62\x1\x6E\x2\x83\x1\xB1"+
			"\x2\x62\x1\x6E\x1\x3C\x1\x83\x2\x2D\x3\x3C\x1\x83\x1\x2D\x2\x62\x2\x6E"+
			"\x1\x83\x2\x62\x1\x6E\x2\x62\x1\x6E\x2\x62\x2\x6E\x1\x2D\x1\x3C\x1\x83"+
			"\x1\x2D\x1\x3C\x1\x83\x2\x2D\x1\x6E\x2\x62\x2\x6E\x2\x62\x3\x6E\x2\x2D"+
			"\x2\x6E";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x26\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2\x2\xFFFF\x1\x9\x4"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x7\xFFFF\x1\x2",
				"\x1\xA\x5E\xFFFF\x1\xB",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x4\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\x10\xFFFF"+
				"\x1\x2\x2E\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xB\xFFFF\x1\xE\x14\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x20\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5E\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x4\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\x10\xFFFF"+
				"\x1\x2\x2E\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xB\xFFFF\x1\xE\x14\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xB\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xB\xFFFF\x1\x21\x14\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x20\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x24\xFFFF\x1\x2\x26\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x7\xFFFF"+
				"\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x20\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x20\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xB\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xB\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xB\xFFFF\x1\x21\x14\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xB\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x20\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x20\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xB\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xB\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xB\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xB\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "219:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA28 : DFA
	{
		private const string DFA28_eotS =
			"\x4\xFFFF";
		private const string DFA28_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA28_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA28_maxS =
			"\x1\x36\x1\xB1\x2\xFFFF";
		private const string DFA28_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA28_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA28_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
		private static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
		private static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
		private static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
		private static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
		private static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
		private static readonly short[][] DFA28_transition;

		static DFA28()
		{
			int numStates = DFA28_transitionS.Length;
			DFA28_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA28_transition[i] = DFA.UnpackEncodedString(DFA28_transitionS[i]);
			}
		}

		public DFA28( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}

		public override string Description { get { return "263:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA35 : DFA
	{
		private const string DFA35_eotS =
			"\x4\xFFFF";
		private const string DFA35_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA35_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA35_maxS =
			"\x1\x36\x1\xB1\x2\xFFFF";
		private const string DFA35_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA35_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA35_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
		private static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
		private static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
		private static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
		private static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
		private static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
		private static readonly short[][] DFA35_transition;

		static DFA35()
		{
			int numStates = DFA35_transitionS.Length;
			DFA35_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA35_transition[i] = DFA.UnpackEncodedString(DFA35_transitionS[i]);
			}
		}

		public DFA35( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 35;
			this.eot = DFA35_eot;
			this.eof = DFA35_eof;
			this.min = DFA35_min;
			this.max = DFA35_max;
			this.accept = DFA35_accept;
			this.special = DFA35_special;
			this.transition = DFA35_transition;
		}

		public override string Description { get { return "271:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x4\xFFFF";
		private const string DFA42_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA42_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA42_maxS =
			"\x1\x36\x1\xB1\x2\xFFFF";
		private const string DFA42_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA42_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "275:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x4\xFFFF";
		private const string DFA49_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA49_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA49_maxS =
			"\x1\x36\x1\xB1\x2\xFFFF";
		private const string DFA49_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA49_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "276:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA77 : DFA
	{
		private const string DFA77_eotS =
			"\x11\xFFFF";
		private const string DFA77_eofS =
			"\x11\xFFFF";
		private const string DFA77_minS =
			"\x1\x2D\x1\xFFFF\x2\x2D\x1\xFFFF\x4\x2D\x1\x59\x3\x2D\x2\x59\x1\x2D\x1"+
			"\x59";
		private const string DFA77_maxS =
			"\x1\xB1\x1\xFFFF\x1\xB1\x1\xA1\x1\xFFFF\x1\x2D\x1\xA1\x1\x6F\x1\xB1\x1"+
			"\x82\x1\x2D\x1\xA1\x1\xB1\x2\x82\x1\x2D\x1\x82";
		private const string DFA77_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA77_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA77_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1"+
				"\xF\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x20\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1F\xFFFF\x1\x1\x10\xFFFF\x1\x1\xC\xFFFF\x1"+
				"\x1\x7\xFFFF\x1\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x7\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x1A\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA77_eot = DFA.UnpackEncodedString(DFA77_eotS);
		private static readonly short[] DFA77_eof = DFA.UnpackEncodedString(DFA77_eofS);
		private static readonly char[] DFA77_min = DFA.UnpackEncodedStringToUnsignedChars(DFA77_minS);
		private static readonly char[] DFA77_max = DFA.UnpackEncodedStringToUnsignedChars(DFA77_maxS);
		private static readonly short[] DFA77_accept = DFA.UnpackEncodedString(DFA77_acceptS);
		private static readonly short[] DFA77_special = DFA.UnpackEncodedString(DFA77_specialS);
		private static readonly short[][] DFA77_transition;

		static DFA77()
		{
			int numStates = DFA77_transitionS.Length;
			DFA77_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA77_transition[i] = DFA.UnpackEncodedString(DFA77_transitionS[i]);
			}
		}

		public DFA77( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 77;
			this.eot = DFA77_eot;
			this.eof = DFA77_eof;
			this.min = DFA77_min;
			this.max = DFA77_max;
			this.accept = DFA77_accept;
			this.special = DFA77_special;
			this.transition = DFA77_transition;
		}

		public override string Description { get { return "356:15: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\x9\xFFFF";
		private const string DFA99_eofS =
			"\x9\xFFFF";
		private const string DFA99_minS =
			"\x1\x2D\x1\x8\x4\xFFFF\x1\x2D\x1\xFFFF\x1\x8";
		private const string DFA99_maxS =
			"\x1\xB1\x1\xAE\x4\xFFFF\x1\x2D\x1\xFFFF\x1\xAE";
		private const string DFA99_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA99_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1C\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x2\xFFFF\x1\x3\x7\xFFFF\x1\x5",
				"\x1\x5\x2D\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x11\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2D\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x11\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "399:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA108 : DFA
	{
		private const string DFA108_eotS =
			"\x4\xFFFF";
		private const string DFA108_eofS =
			"\x4\xFFFF";
		private const string DFA108_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA108_maxS =
			"\x1\x95\x1\xB1\x2\xFFFF";
		private const string DFA108_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA108_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA108_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x24\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
		private static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
		private static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
		private static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
		private static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
		private static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
		private static readonly short[][] DFA108_transition;

		static DFA108()
		{
			int numStates = DFA108_transitionS.Length;
			DFA108_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA108_transition[i] = DFA.UnpackEncodedString(DFA108_transitionS[i]);
			}
		}

		public DFA108( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 108;
			this.eot = DFA108_eot;
			this.eof = DFA108_eof;
			this.min = DFA108_min;
			this.max = DFA108_max;
			this.accept = DFA108_accept;
			this.special = DFA108_special;
			this.transition = DFA108_transition;
		}

		public override string Description { get { return "430:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA113 : DFA
	{
		private const string DFA113_eotS =
			"\x4\xFFFF";
		private const string DFA113_eofS =
			"\x4\xFFFF";
		private const string DFA113_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA113_maxS =
			"\x1\x95\x1\xB1\x2\xFFFF";
		private const string DFA113_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA113_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA113_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x24\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
		private static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
		private static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
		private static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
		private static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
		private static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
		private static readonly short[][] DFA113_transition;

		static DFA113()
		{
			int numStates = DFA113_transitionS.Length;
			DFA113_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA113_transition[i] = DFA.UnpackEncodedString(DFA113_transitionS[i]);
			}
		}

		public DFA113( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 113;
			this.eot = DFA113_eot;
			this.eof = DFA113_eof;
			this.min = DFA113_min;
			this.max = DFA113_max;
			this.accept = DFA113_accept;
			this.special = DFA113_special;
			this.transition = DFA113_transition;
		}

		public override string Description { get { return "433:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA126 : DFA
	{
		private const string DFA126_eotS =
			"\x7\xFFFF";
		private const string DFA126_eofS =
			"\x7\xFFFF";
		private const string DFA126_minS =
			"\x1\x2D\x1\x8\x1\xFFFF\x1\x2D\x2\xFFFF\x1\x8";
		private const string DFA126_maxS =
			"\x1\xB1\x1\xB0\x1\xFFFF\x1\x2D\x2\xFFFF\x1\xB0";
		private const string DFA126_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA126_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA126_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x2\x2D\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF"+
				"\x5\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2D\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF"+
				"\x5\x2"
			};

		private static readonly short[] DFA126_eot = DFA.UnpackEncodedString(DFA126_eotS);
		private static readonly short[] DFA126_eof = DFA.UnpackEncodedString(DFA126_eofS);
		private static readonly char[] DFA126_min = DFA.UnpackEncodedStringToUnsignedChars(DFA126_minS);
		private static readonly char[] DFA126_max = DFA.UnpackEncodedStringToUnsignedChars(DFA126_maxS);
		private static readonly short[] DFA126_accept = DFA.UnpackEncodedString(DFA126_acceptS);
		private static readonly short[] DFA126_special = DFA.UnpackEncodedString(DFA126_specialS);
		private static readonly short[][] DFA126_transition;

		static DFA126()
		{
			int numStates = DFA126_transitionS.Length;
			DFA126_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA126_transition[i] = DFA.UnpackEncodedString(DFA126_transitionS[i]);
			}
		}

		public DFA126( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 126;
			this.eot = DFA126_eot;
			this.eof = DFA126_eof;
			this.min = DFA126_min;
			this.max = DFA126_max;
			this.accept = DFA126_accept;
			this.special = DFA126_special;
			this.transition = DFA126_transition;
		}

		public override string Description { get { return "463:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA168 : DFA
	{
		private const string DFA168_eotS =
			"\x7\xFFFF";
		private const string DFA168_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA168_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA168_maxS =
			"\x1\xAC\x1\xB1\x2\xFFFF\x2\xB1\x1\xFFFF";
		private const string DFA168_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA168_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA168_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xD\xFFFF\x1\x3\x21\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x11\xFFFF\x2\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C"+
				"\xFFFF\x2\x3\x6\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x6\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x24\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x3\x24\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA168_eot = DFA.UnpackEncodedString(DFA168_eotS);
		private static readonly short[] DFA168_eof = DFA.UnpackEncodedString(DFA168_eofS);
		private static readonly char[] DFA168_min = DFA.UnpackEncodedStringToUnsignedChars(DFA168_minS);
		private static readonly char[] DFA168_max = DFA.UnpackEncodedStringToUnsignedChars(DFA168_maxS);
		private static readonly short[] DFA168_accept = DFA.UnpackEncodedString(DFA168_acceptS);
		private static readonly short[] DFA168_special = DFA.UnpackEncodedString(DFA168_specialS);
		private static readonly short[][] DFA168_transition;

		static DFA168()
		{
			int numStates = DFA168_transitionS.Length;
			DFA168_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA168_transition[i] = DFA.UnpackEncodedString(DFA168_transitionS[i]);
			}
		}

		public DFA168( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 168;
			this.eot = DFA168_eot;
			this.eof = DFA168_eof;
			this.min = DFA168_min;
			this.max = DFA168_max;
			this.accept = DFA168_accept;
			this.special = DFA168_special;
			this.transition = DFA168_transition;
		}

		public override string Description { get { return "514:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA157 : DFA
	{
		private const string DFA157_eotS =
			"\x4\xFFFF";
		private const string DFA157_eofS =
			"\x4\xFFFF";
		private const string DFA157_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA157_maxS =
			"\x2\x36\x2\xFFFF";
		private const string DFA157_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA157_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA157_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x1",
				"\x1\x2\x25\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA157_eot = DFA.UnpackEncodedString(DFA157_eotS);
		private static readonly short[] DFA157_eof = DFA.UnpackEncodedString(DFA157_eofS);
		private static readonly char[] DFA157_min = DFA.UnpackEncodedStringToUnsignedChars(DFA157_minS);
		private static readonly char[] DFA157_max = DFA.UnpackEncodedStringToUnsignedChars(DFA157_maxS);
		private static readonly short[] DFA157_accept = DFA.UnpackEncodedString(DFA157_acceptS);
		private static readonly short[] DFA157_special = DFA.UnpackEncodedString(DFA157_specialS);
		private static readonly short[][] DFA157_transition;

		static DFA157()
		{
			int numStates = DFA157_transitionS.Length;
			DFA157_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA157_transition[i] = DFA.UnpackEncodedString(DFA157_transitionS[i]);
			}
		}

		public DFA157( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 157;
			this.eot = DFA157_eot;
			this.eof = DFA157_eof;
			this.min = DFA157_min;
			this.max = DFA157_max;
			this.accept = DFA157_accept;
			this.special = DFA157_special;
			this.transition = DFA157_transition;
		}

		public override string Description { get { return "514:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA192 : DFA
	{
		private const string DFA192_eotS =
			"\x7\xFFFF";
		private const string DFA192_eofS =
			"\x7\xFFFF";
		private const string DFA192_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA192_maxS =
			"\x5\xB1\x2\xFFFF";
		private const string DFA192_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA192_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA192_transitionS =
			{
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA192_eot = DFA.UnpackEncodedString(DFA192_eotS);
		private static readonly short[] DFA192_eof = DFA.UnpackEncodedString(DFA192_eofS);
		private static readonly char[] DFA192_min = DFA.UnpackEncodedStringToUnsignedChars(DFA192_minS);
		private static readonly char[] DFA192_max = DFA.UnpackEncodedStringToUnsignedChars(DFA192_maxS);
		private static readonly short[] DFA192_accept = DFA.UnpackEncodedString(DFA192_acceptS);
		private static readonly short[] DFA192_special = DFA.UnpackEncodedString(DFA192_specialS);
		private static readonly short[][] DFA192_transition;

		static DFA192()
		{
			int numStates = DFA192_transitionS.Length;
			DFA192_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA192_transition[i] = DFA.UnpackEncodedString(DFA192_transitionS[i]);
			}
		}

		public DFA192( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 192;
			this.eot = DFA192_eot;
			this.eof = DFA192_eof;
			this.min = DFA192_min;
			this.max = DFA192_max;
			this.accept = DFA192_accept;
			this.special = DFA192_special;
			this.transition = DFA192_transition;
		}

		public override string Description { get { return "557:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA191 : DFA
	{
		private const string DFA191_eotS =
			"\x7\xFFFF";
		private const string DFA191_eofS =
			"\x7\xFFFF";
		private const string DFA191_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA191_maxS =
			"\x1\x83\x4\xB1\x2\xFFFF";
		private const string DFA191_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA191_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA191_transitionS =
			{
				"\x1\x4\x25\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x20\xFFFF\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA191_eot = DFA.UnpackEncodedString(DFA191_eotS);
		private static readonly short[] DFA191_eof = DFA.UnpackEncodedString(DFA191_eofS);
		private static readonly char[] DFA191_min = DFA.UnpackEncodedStringToUnsignedChars(DFA191_minS);
		private static readonly char[] DFA191_max = DFA.UnpackEncodedStringToUnsignedChars(DFA191_maxS);
		private static readonly short[] DFA191_accept = DFA.UnpackEncodedString(DFA191_acceptS);
		private static readonly short[] DFA191_special = DFA.UnpackEncodedString(DFA191_specialS);
		private static readonly short[][] DFA191_transition;

		static DFA191()
		{
			int numStates = DFA191_transitionS.Length;
			DFA191_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA191_transition[i] = DFA.UnpackEncodedString(DFA191_transitionS[i]);
			}
		}

		public DFA191( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 191;
			this.eot = DFA191_eot;
			this.eof = DFA191_eof;
			this.min = DFA191_min;
			this.max = DFA191_max;
			this.accept = DFA191_accept;
			this.special = DFA191_special;
			this.transition = DFA191_transition;
		}

		public override string Description { get { return "()* loopback of 557:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA200 : DFA
	{
		private const string DFA200_eotS =
			"\xB\xFFFF";
		private const string DFA200_eofS =
			"\xB\xFFFF";
		private const string DFA200_minS =
			"\x2\x2D\x1\xFFFF\x1\x55\x1\xFFFF\x2\x2D\x2\x55\x1\x2D\x1\x55";
		private const string DFA200_maxS =
			"\x2\xB1\x1\xFFFF\x1\xB0\x1\xFFFF\x1\x2D\x1\xB1\x2\xB0\x1\x2D\x1\xB0";
		private const string DFA200_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA200_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA200_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\xA\xFFFF\x1"+
				"\x4\x11\xFFFF\x2\x2\x9\xFFFF\x1\x2\xB\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x2\xFFFF\x1\x2\xF\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xD\xFFFF\x4\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xD\xFFFF\x4\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xD\xFFFF\x4\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xD\xFFFF\x4\x2"
			};

		private static readonly short[] DFA200_eot = DFA.UnpackEncodedString(DFA200_eotS);
		private static readonly short[] DFA200_eof = DFA.UnpackEncodedString(DFA200_eofS);
		private static readonly char[] DFA200_min = DFA.UnpackEncodedStringToUnsignedChars(DFA200_minS);
		private static readonly char[] DFA200_max = DFA.UnpackEncodedStringToUnsignedChars(DFA200_maxS);
		private static readonly short[] DFA200_accept = DFA.UnpackEncodedString(DFA200_acceptS);
		private static readonly short[] DFA200_special = DFA.UnpackEncodedString(DFA200_specialS);
		private static readonly short[][] DFA200_transition;

		static DFA200()
		{
			int numStates = DFA200_transitionS.Length;
			DFA200_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA200_transition[i] = DFA.UnpackEncodedString(DFA200_transitionS[i]);
			}
		}

		public DFA200( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 200;
			this.eot = DFA200_eot;
			this.eof = DFA200_eof;
			this.min = DFA200_min;
			this.max = DFA200_max;
			this.accept = DFA200_accept;
			this.special = DFA200_special;
			this.transition = DFA200_transition;
		}

		public override string Description { get { return "570:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA230 : DFA
	{
		private const string DFA230_eotS =
			"\x4\xFFFF";
		private const string DFA230_eofS =
			"\x4\xFFFF";
		private const string DFA230_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA230_maxS =
			"\x1\x62\x1\xB1\x2\xFFFF";
		private const string DFA230_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA230_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA230_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x24\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x1C\xFFFF\x2\x3\x15\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x12\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA230_eot = DFA.UnpackEncodedString(DFA230_eotS);
		private static readonly short[] DFA230_eof = DFA.UnpackEncodedString(DFA230_eofS);
		private static readonly char[] DFA230_min = DFA.UnpackEncodedStringToUnsignedChars(DFA230_minS);
		private static readonly char[] DFA230_max = DFA.UnpackEncodedStringToUnsignedChars(DFA230_maxS);
		private static readonly short[] DFA230_accept = DFA.UnpackEncodedString(DFA230_acceptS);
		private static readonly short[] DFA230_special = DFA.UnpackEncodedString(DFA230_specialS);
		private static readonly short[][] DFA230_transition;

		static DFA230()
		{
			int numStates = DFA230_transitionS.Length;
			DFA230_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA230_transition[i] = DFA.UnpackEncodedString(DFA230_transitionS[i]);
			}
		}

		public DFA230( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 230;
			this.eot = DFA230_eot;
			this.eof = DFA230_eof;
			this.min = DFA230_min;
			this.max = DFA230_max;
			this.accept = DFA230_accept;
			this.special = DFA230_special;
			this.transition = DFA230_transition;
		}

		public override string Description { get { return "()* loopback of 677:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root581 = new BitSet(new ulong[]{0x40200000000000UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _global_block_in_root584 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block606 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block608 = new BitSet(new ulong[]{0x40200000000002UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _func_def_in_node631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item699 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_item702 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item704 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _98_in_attribute_item707 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item709 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_attribute_item713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_attribute_item731 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_item734 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item736 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _98_in_attribute_item739 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item741 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_attribute_item745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_attribute770 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _attribute_item_in_attribute772 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_attribute775 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _attribute_item_in_attribute777 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_attribute781 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute783 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x4UL});
		public static readonly BitSet _attribute_in_global_alloc802 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc805 = new BitSet(new ulong[]{0x0UL,0xA00000000000UL});
		public static readonly BitSet _109_in_global_alloc809 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_global_alloc811 = new BitSet(new ulong[]{0x2UL,0x80800008000000UL});
		public static readonly BitSet _119_in_global_alloc816 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _111_in_global_alloc820 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_global_alloc823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_global_alloc962 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_global_alloc965 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_global_alloc968 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_global_alloc970 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _attribute_in_global_using1011 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_global_using1014 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1016 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _attribute_in_global_typedef1040 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_global_typedef1043 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_global_typedef1045 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_global_typedef1047 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_global_typedef1049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1073 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_import_def1076 = new BitSet(new ulong[]{0x1040000000000002UL});
		public static readonly BitSet _STRING_in_import_def1078 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1082 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_import_def1085 = new BitSet(new ulong[]{0x1040000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1087 = new BitSet(new ulong[]{0x1040000000000100UL});
		public static readonly BitSet _STRING_in_import_def1092 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1094 = new BitSet(new ulong[]{0x1040000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1124 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_enum_def1127 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_enum_def1129 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_enum_def1131 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _ident_in_enum_def1134 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_enum_def1137 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_enum_def1139 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1172 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_namespace_def1175 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_namespace_def1177 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1180 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1183 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1185 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _global_block_in_namespace_def1188 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1218 = new BitSet(new ulong[]{0x0UL,0x0UL,0xA00UL});
		public static readonly BitSet _139_in_class_def1223 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1225 = new BitSet(new ulong[]{0x40000000000002UL,0x2200000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1228 = new BitSet(new ulong[]{0x40000000000002UL,0x200000000000UL});
		public static readonly BitSet _109_in_class_def1233 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1235 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _98_in_class_def1238 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1240 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1247 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_class_def1250 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _NEWLINE_in_class_def1252 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _global_block_in_class_def1255 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_class_def1299 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_class_def1301 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1303 = new BitSet(new ulong[]{0x40000000000002UL,0x2200008000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1306 = new BitSet(new ulong[]{0x40000000000002UL,0x200008000000UL});
		public static readonly BitSet _91_in_class_def1311 = new BitSet(new ulong[]{0x200000000000UL,0x800000000000UL});
		public static readonly BitSet _func_args_in_class_def1313 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_class_def1315 = new BitSet(new ulong[]{0x40000000000002UL,0x200000000000UL});
		public static readonly BitSet _109_in_class_def1320 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1322 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _98_in_class_def1325 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1327 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1334 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_class_def1337 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _NEWLINE_in_class_def1339 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x2024212111A04UL});
		public static readonly BitSet _global_block_in_class_def1342 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1344 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1397 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_type_list1400 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_type_list1402 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _type_single_in_type_name1424 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_type_name1428 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_type_name1431 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_name1435 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name1437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_name1478 = new BitSet(new ulong[]{0x200000000000UL,0x18000000UL,0x202001000UL});
		public static readonly BitSet _type_list_in_type_name1480 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name1483 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _103_in_type_name1485 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_type_name1488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_name1492 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name1494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1518 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x4UL});
		public static readonly BitSet _89_in_type_single1522 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_type_single1538 = new BitSet(new ulong[]{0x1080200000000000UL,0x1DAA100000UL,0x200006900000EUL});
		public static readonly BitSet _expr_in_type_single1542 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_type_single1545 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_type_single1547 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_type_single1551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_type_single1576 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_type_single1579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1626 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_type_no_array1630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1665 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_type_star1669 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1715 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_type_template_type1719 = new BitSet(new ulong[]{0x200000000000UL,0x800000008000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_type_template_type1722 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _98_in_type_template_type1725 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_type_template_type1727 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _123_in_type_template_type1733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_type_ident1773 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x202000000UL});
		public static readonly BitSet _161_in_type_ident1776 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_type_ident1779 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_type_ident1782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1810 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_generic_parameter_inside1813 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1815 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _113_in_generic_parameter1837 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1839 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_generic_parameter1841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1856 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_func_args1859 = new BitSet(new ulong[]{0x200000000000UL,0x800000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1861 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1883 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_func_args_item1885 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_func_args_item1887 = new BitSet(new ulong[]{0x2UL,0x80800008000000UL});
		public static readonly BitSet _119_in_func_args_item1892 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _111_in_func_args_item1896 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_func_args_item1899 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item1950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_func_args_item2010 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _modify_expr_in_func_args_item2014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_func_name2057 = new BitSet(new ulong[]{0x0UL,0x808A0000000UL});
		public static readonly BitSet _operator_in_func_name2059 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_name2061 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2087 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x2000202001000UL});
		public static readonly BitSet _func_type_in_func_def2090 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x2000000000000UL});
		public static readonly BitSet _177_in_func_def2093 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL});
		public static readonly BitSet _func_name_in_func_def2096 = new BitSet(new ulong[]{0x0UL,0x2000008000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2098 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_func_def2101 = new BitSet(new ulong[]{0x200000000000UL,0x800010000000UL});
		public static readonly BitSet _func_args_in_func_def2103 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_def2106 = new BitSet(new ulong[]{0x40000000000000UL,0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2110 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_func_def2163 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_func_def2167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2221 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_func_def2224 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2226 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _match_item_in_func_def2230 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2232 = new BitSet(new ulong[]{0x40000000000100UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2237 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2330 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2332 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2342 = new BitSet(new ulong[]{0x40000000000000UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2345 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _112_in_stmt_block_item2350 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2352 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2369 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2371 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2374 = new BitSet(new ulong[]{0x200000000100UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _DEDENT_in_stmt_block2377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2463 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1180000C0000UL});
		public static readonly BitSet _147_in_stmt_expr2473 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2475 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1180000C0000UL});
		public static readonly BitSet _167_in_stmt_expr2504 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2506 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1180000C0000UL});
		public static readonly BitSet _172_in_stmt_expr2535 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2537 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1180000C0000UL});
		public static readonly BitSet _168_in_stmt_expr2566 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2568 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1180000C0000UL});
		public static readonly BitSet _146_in_stmt_expr2597 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _for_item_in_stmt_expr2599 = new BitSet(new ulong[]{0x2UL,0x400000000UL,0x1180000C0000UL});
		public static readonly BitSet _98_in_stmt_expr2602 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _for_item_in_stmt_expr2604 = new BitSet(new ulong[]{0x2UL,0x400000000UL,0x1180000C0000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_defer2677 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _stmt_in_stmt_defer2679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_defer2692 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _stmt_in_stmt_defer2694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_typedef2713 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2715 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_stmt_typedef2717 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_using_item2742 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_stmt_using2750 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2752 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _160_in_stmt_return2773 = new BitSet(new ulong[]{0x1080200000000002UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_return2775 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2796 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_inline_stmt_block2799 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x2024140000002UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2801 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _147_in_stmt_if2823 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_if2825 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2828 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2831 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2834 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_stmt_if2837 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2839 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_if2874 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x2024140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_stmt_if2897 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_if2899 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2902 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2905 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2908 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_stmt_if2911 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2913 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_if2952 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x2024140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_stmt_while2985 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_while2987 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2991 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_while3018 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x2024140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_while3044 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_while3046 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3050 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_while3077 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x2024140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_while3103 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_while3105 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3108 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3133 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_for_range3135 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_for_range3139 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000004000UL});
		public static readonly BitSet _164_in_for_range3142 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_for_range3146 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_for_range3149 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_for_range3153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_for_range3182 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_for_range3186 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_for_range3189 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_for_range3193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3270 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_for_map3272 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_for_map3274 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_for3316 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _for_item_in_stmt_for3320 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_for3323 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _for_item_in_stmt_for3325 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3329 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_try3363 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3365 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3368 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3370 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_stmt_try3373 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3375 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3377 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_switch_item3403 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_switch_item3405 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL,0x800000000UL});
		public static readonly BitSet _98_in_switch_item3408 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_switch_item3410 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3416 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_switch_item3465 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x2024140000002UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_switch3507 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_stmt_switch3509 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3512 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3515 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3517 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3521 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3523 = new BitSet(new ulong[]{0x40000000000100UL,0x0UL,0x40000008000UL});
		public static readonly BitSet _143_in_stmt_switch3529 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3531 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3534 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3536 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3567 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_ident_list3570 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_ident_list3572 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3594 = new BitSet(new ulong[]{0x0UL,0xA00000000000UL});
		public static readonly BitSet _109_in_stmt_alloc3598 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_stmt_alloc3600 = new BitSet(new ulong[]{0x2UL,0x80800008000000UL});
		public static readonly BitSet _119_in_stmt_alloc3605 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _111_in_stmt_alloc3609 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_alloc3727 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3731 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_alloc3734 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3736 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3766 = new BitSet(new ulong[]{0x2UL,0x6098104244800000UL,0x400000000021UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3770 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_stmt_modify3796 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_stmt_modify3825 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_modify3856 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3906 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3916 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3919 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3921 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _171_in_where_expr3924 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _where_item_in_where_expr3928 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3932 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3968 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3971 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _NEWLINE_in_where_expr3973 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _where_item_in_where_expr3977 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3979 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _DEDENT_in_where_expr3984 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3986 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4039 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4042 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _NEWLINE_in_where_expr4044 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _where_item_in_where_expr4048 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4050 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _DEDENT_in_where_expr4055 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4057 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_where_expr4098 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4100 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4103 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _NEWLINE_in_where_expr4105 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _where_item_in_where_expr4109 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4111 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _DEDENT_in_where_expr4116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_let_expr4174 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _where_item_in_let_expr4176 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_let_expr4180 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_let_expr4184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4208 = new BitSet(new ulong[]{0x10C0600000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _INDENT_in_let_expr4213 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _NEWLINE_in_let_expr4215 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_let_expr4218 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4220 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4296 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4299 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _NEWLINE_in_let_expr4301 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5440E2002UL});
		public static readonly BitSet _where_item_in_let_expr4305 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4307 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x213E5442E2002UL});
		public static readonly BitSet _149_in_let_expr4312 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_let_expr4314 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4316 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_match_item4351 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_match_item4353 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_match_item4355 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _where_expr_in_match_item4357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_match_expr4378 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_match_expr4380 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4383 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4386 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4388 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _match_item_in_match_expr4392 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4394 = new BitSet(new ulong[]{0x40000000000100UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4399 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr4422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr4461 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x800000000000UL});
		public static readonly BitSet _118_in_feed_expr4471 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000006UL});
		public static readonly BitSet _list_expr_in_feed_expr4473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_feed_expr4507 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000006UL});
		public static readonly BitSet _list_expr_in_feed_expr4509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr4546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_list_expr4567 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000006UL});
		public static readonly BitSet _feed_expr_in_list_expr4569 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_list_expr4571 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _for_item_in_list_expr4573 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_list_expr4576 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _for_item_in_list_expr4578 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_list_expr4582 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_list_expr4584 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_list_expr4586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_list_expr4614 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x200006000000EUL});
		public static readonly BitSet _98_in_list_expr4618 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _NEWLINE_in_list_expr4622 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _INDENT_in_list_expr4626 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _DEDENT_in_list_expr4630 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _feed_expr_in_list_expr4634 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_list_expr4638 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _NEWLINE_in_list_expr4642 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _INDENT_in_list_expr4646 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _DEDENT_in_list_expr4650 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x2000060000006UL});
		public static readonly BitSet _feed_expr_in_list_expr4654 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_list_expr4661 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _NEWLINE_in_list_expr4665 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _INDENT_in_list_expr4669 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _DEDENT_in_list_expr4673 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_list_expr4677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4719 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_lambda_type4737 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_lambda_type4739 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_lambda_type4741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_lambda_expr4756 = new BitSet(new ulong[]{0x200000000000UL,0x800010000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4758 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_lambda_expr4761 = new BitSet(new ulong[]{0x0UL,0x60000A008000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4763 = new BitSet(new ulong[]{0x0UL,0x60000A000000000UL});
		public static readonly BitSet _103_in_lambda_expr4768 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_lambda_expr4805 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_lambda_expr4839 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_lambda_expr4876 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4913 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4970 = new BitSet(new ulong[]{0x2UL,0x4090904244800000UL,0x400000000020UL});
		public static readonly BitSet _set_in_modify_expr4974 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _cond_expr_in_modify_expr5019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_modify_expr5028 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _cond_expr_in_modify_expr5031 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item5044 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr5056 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_cond_expr5065 = new BitSet(new ulong[]{0x1080200000000002UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5071 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_cond_expr5075 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr5193 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000080000000UL});
		public static readonly BitSet _or_op_in_or_expr5204 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _and_expr_in_or_expr5208 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1000080000000UL});
		public static readonly BitSet _bit_or_in_and_expr5250 = new BitSet(new ulong[]{0x2UL,0x1000000UL,0x80UL});
		public static readonly BitSet _and_op_in_and_expr5261 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _bit_or_in_and_expr5265 = new BitSet(new ulong[]{0x2UL,0x1000000UL,0x80UL});
		public static readonly BitSet _bit_xor_in_bit_or5296 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _173_in_bit_or5305 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _bit_xor_in_bit_or5309 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5339 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_bit_xor5348 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _bit_and_in_bit_xor5352 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _cmp_expr_in_bit_and5382 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_bit_and5391 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _cmp_expr_in_bit_and5395 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _chain_op_in_chain_list5487 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _shift_expr_in_chain_list5489 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5503 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _113_in_cmp_expr5532 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5534 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _98_in_cmp_expr5537 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5539 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _123_in_cmp_expr5543 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_cmp_expr5576 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5580 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5661 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5665 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5771 = new BitSet(new ulong[]{0x2UL,0x2008000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5780 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _add_expr_in_shift_expr5784 = new BitSet(new ulong[]{0x2UL,0x2008000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5814 = new BitSet(new ulong[]{0x2UL,0x880000000UL});
		public static readonly BitSet _95_in_add_expr5824 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _mul_expr_in_add_expr5828 = new BitSet(new ulong[]{0x2UL,0x880000000UL});
		public static readonly BitSet _99_in_add_expr5853 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _mul_expr_in_add_expr5857 = new BitSet(new ulong[]{0x2UL,0x880000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5895 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _93_in_mul_expr5905 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _infix_expr_in_mul_expr5909 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _107_in_mul_expr5936 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _infix_expr_in_mul_expr5940 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _86_in_mul_expr5967 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _infix_expr_in_mul_expr5971 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _selector_expr_in_infix_expr6011 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _infix_func_in_infix_expr6021 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _selector_expr_in_infix_expr6025 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _cast_expr_in_selector_expr6057 = new BitSet(new ulong[]{0x2UL,0x50000000000UL});
		public static readonly BitSet _104_in_selector_expr6067 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_selector_expr6071 = new BitSet(new ulong[]{0x2UL,0x50000000000UL});
		public static readonly BitSet _106_in_selector_expr6097 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_selector_expr6102 = new BitSet(new ulong[]{0x2UL,0x50000000000UL});
		public static readonly BitSet _91_in_cast_expr6151 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_cast_expr6153 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_cast_expr6155 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr6222 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr6224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_prefix_expr6240 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x202001000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr6242 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x4UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr6246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6293 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_square_expr_list6305 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_square_expr_list6307 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_square_expr_list6310 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_square_expr_list6312 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_square_expr_list6316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_bracket_expr_list6336 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19BA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6339 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _98_in_bracket_expr_list6342 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6344 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6374 = new BitSet(new ulong[]{0x10C0600000000000UL,0x19BA100000UL,0x2000069000006UL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6379 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6381 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6384 = new BitSet(new ulong[]{0x40000000000100UL,0x410000000UL});
		public static readonly BitSet _98_in_bracket_expr_list6388 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x2000069000006UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6392 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6396 = new BitSet(new ulong[]{0x40000000000100UL,0x410000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6400 = new BitSet(new ulong[]{0x40000000000100UL,0x10000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6405 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6407 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6414 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6416 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6446 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _98_in_bracket_expr_list6450 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x2000069000006UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6454 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6458 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6511 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _96_in_suffix_expr6521 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _100_in_suffix_expr6547 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _105_in_suffix_expr6570 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6572 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _103_in_suffix_expr6597 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6599 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6624 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6647 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _129_in_suffix_expr6670 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6672 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6674 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _NUMBER_in_atom_expr6712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_atom_expr6727 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_atom_expr6729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_atom_expr6742 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_atom_expr6746 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _98_in_atom_expr6751 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000069000006UL});
		public static readonly BitSet _expr_in_atom_expr6753 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_atom_expr6757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_atom_expr6784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6827 = new BitSet(new ulong[]{0x200000000000UL,0x19A2100000UL,0x2000040000002UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6859 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _96_in_lvalue_suffix6869 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _100_in_lvalue_suffix6897 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _105_in_lvalue_suffix6922 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6924 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _103_in_lvalue_suffix6951 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6953 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix6980 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix6983 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix7011 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _ident_in_lvalue_atom7049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_lvalue_atom7054 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom7056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_lvalue7075 = new BitSet(new ulong[]{0x200000000000UL,0x19A2100000UL,0x2000040000002UL});
		public static readonly BitSet _lvalue_item_in_lvalue7077 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_lvalue7080 = new BitSet(new ulong[]{0x200000000000UL,0x19A2100000UL,0x2000040000002UL});
		public static readonly BitSet _lvalue_item_in_lvalue7082 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_lvalue7086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue7100 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident7111 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_ident7114 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _IDENT_in_ident7116 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _134_in_infix_func7129 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_infix_func7132 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_infix_func7134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp4444 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x800000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp4446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_synpred2_SugarCpp4558 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000006UL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp4560 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_synpred2_SugarCpp4562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_synpred3_SugarCpp5514 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5516 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _98_in_synpred3_SugarCpp5519 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5521 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _123_in_synpred3_SugarCpp5525 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_synpred3_SugarCpp5527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_synpred4_SugarCpp6140 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x202001000UL});
		public static readonly BitSet _type_name_in_synpred4_SugarCpp6142 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_synpred4_SugarCpp6144 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x2000060000002UL});
		public static readonly BitSet _prefix_expr_in_synpred4_SugarCpp6146 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
