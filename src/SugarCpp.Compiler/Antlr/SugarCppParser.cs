//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-16 13:11:19

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'switch'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int For_Item_Down_To=33;
	public const int For_Item_Each=34;
	public const int For_Item_To=35;
	public const int For_Item_When=36;
	public const int Func_Args=37;
	public const int Func_Def=38;
	public const int Generic_Patameters=39;
	public const int Global_Block=40;
	public const int IDENT=41;
	public const int INDENT=42;
	public const int Ident_List=43;
	public const int Import=44;
	public const int Left_Bracket=45;
	public const int LineComment=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_If=59;
	public const int Stmt_Loop=60;
	public const int Stmt_Return=61;
	public const int Stmt_Switch=62;
	public const int Stmt_Try=63;
	public const int Stmt_Typedef=64;
	public const int Stmt_Unless=65;
	public const int Stmt_Until=66;
	public const int Stmt_Using=67;
	public const int Stmt_While=68;
	public const int Switch_Item=69;
	public const int Type_Array=70;
	public const int Type_Ident=71;
	public const int Type_Ref=72;
	public const int Type_Star=73;
	public const int Type_Template=74;
	public const int White_Space=75;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:200:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(200, 1);
		try
		{
			// SugarCpp.g:201:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:201:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(201, 4);
			// SugarCpp.g:201:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:201:4: NEWLINE
					{
					DebugLocation(201, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root528);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(201, 13);
			PushFollow(Follow._global_block_in_root531);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(201, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root533);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 201:30: -> ^( Root global_block )
			{
				DebugLocation(201, 33);
				// SugarCpp.g:201:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(201, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(201, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:204:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(204, 1);
		try
		{
			// SugarCpp.g:205:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:205:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(205, 4);
			// SugarCpp.g:205:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==118||(LA3_0>=127 && LA3_0<=128)||LA3_0==132||LA3_0==136||LA3_0==140||LA3_0==148||LA3_0==150||LA3_0==152||LA3_0==158))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:5: node ( NEWLINE )+
					{
					DebugLocation(205, 5);
					PushFollow(Follow._node_in_global_block553);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(205, 10);
					// SugarCpp.g:205:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:205:10: NEWLINE
							{
							DebugLocation(205, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block555);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 205:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(205, 24);
				// SugarCpp.g:205:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(205, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(205, 39);
				// SugarCpp.g:205:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(205, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:208:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(208, 1);
		try
		{
			// SugarCpp.g:209:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:209:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(209, 4);
				PushFollow(Follow._func_def_in_node578);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:210:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(210, 4);
				PushFollow(Follow._class_def_in_node583);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:211:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(211, 4);
				PushFollow(Follow._enum_def_in_node588);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:212:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._global_alloc_in_node593);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:213:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 4);
				PushFollow(Follow._global_using_in_node598);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:214:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(214, 4);
				PushFollow(Follow._global_typedef_in_node603);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:215:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._import_def_in_node608);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:216:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._namespace_def_in_node613);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:219:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args625); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:221:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args630); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:222:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._ident_in_attribute_args635);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:225:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==128))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(226, 4);
				PushFollow(Follow._ident_in_attribute_item646);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(226, 10);
				// SugarCpp.g:226:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==83))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:226:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(226, 11);
					char_literal18=(IToken)Match(input,83,Follow._83_in_attribute_item649);  
					stream_83.Add(char_literal18);

					DebugLocation(226, 15);
					PushFollow(Follow._attribute_args_in_attribute_item651);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(226, 30);
					// SugarCpp.g:226:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==90))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:226:31: ',' attribute_args
							{
							DebugLocation(226, 31);
							char_literal20=(IToken)Match(input,90,Follow._90_in_attribute_item654);  
							stream_90.Add(char_literal20);

							DebugLocation(226, 35);
							PushFollow(Follow._attribute_args_in_attribute_item656);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(226, 52);
					char_literal22=(IToken)Match(input,84,Follow._84_in_attribute_item660);  
					stream_84.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 226:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(226, 61);
					// SugarCpp.g:226:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(226, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(226, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(226, 79);
					// SugarCpp.g:226:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(226, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:227:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(227, 4);
				string_literal23=(IToken)Match(input,128,Follow._128_in_attribute_item678);  
				stream_128.Add(string_literal23);

				DebugLocation(227, 12);
				// SugarCpp.g:227:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==83))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(227, 13);
					char_literal24=(IToken)Match(input,83,Follow._83_in_attribute_item681);  
					stream_83.Add(char_literal24);

					DebugLocation(227, 17);
					PushFollow(Follow._attribute_args_in_attribute_item683);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(227, 32);
					// SugarCpp.g:227:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==90))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:227:33: ',' attribute_args
							{
							DebugLocation(227, 33);
							char_literal26=(IToken)Match(input,90,Follow._90_in_attribute_item686);  
							stream_90.Add(char_literal26);

							DebugLocation(227, 37);
							PushFollow(Follow._attribute_args_in_attribute_item688);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(227, 54);
					char_literal28=(IToken)Match(input,84,Follow._84_in_attribute_item692);  
					stream_84.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 128
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 227:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(227, 63);
					// SugarCpp.g:227:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(227, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(227, 75);
					adaptor.AddChild(root_1, stream_128.NextNode());
					DebugLocation(227, 83);
					// SugarCpp.g:227:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(227, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:230:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(231, 4);
			// SugarCpp.g:231:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==118))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(231, 5);
					char_literal29=(IToken)Match(input,118,Follow._118_in_attribute717);  
					stream_118.Add(char_literal29);

					DebugLocation(231, 9);
					PushFollow(Follow._attribute_item_in_attribute719);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(231, 24);
					// SugarCpp.g:231:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==90))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:25: ',' attribute_item
							{
							DebugLocation(231, 25);
							char_literal31=(IToken)Match(input,90,Follow._90_in_attribute722);  
							stream_90.Add(char_literal31);

							DebugLocation(231, 29);
							PushFollow(Follow._attribute_item_in_attribute724);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(231, 46);
					char_literal33=(IToken)Match(input,119,Follow._119_in_attribute728);  
					stream_119.Add(char_literal33);

					DebugLocation(231, 50);
					// SugarCpp.g:231:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:231:50: NEWLINE
							{
							DebugLocation(231, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute730);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:61: -> ( attribute_item )+
			{
				DebugLocation(231, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(231, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:234:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:235:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(235, 4);
			// SugarCpp.g:235:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==118))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:4: attribute
				{
				DebugLocation(235, 4);
				PushFollow(Follow._attribute_in_global_alloc749);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(235, 15);
			PushFollow(Follow._ident_list_in_global_alloc752);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(235, 26);
			// SugarCpp.g:235:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==100))
			{
				alt19 = 1;
			}
			else if ((LA19_0==102))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(235, 28);
				char_literal37=(IToken)Match(input,100,Follow._100_in_global_alloc756);  
				stream_100.Add(char_literal37);

				DebugLocation(235, 32);
				PushFollow(Follow._type_name_in_global_alloc758);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(235, 42);
				// SugarCpp.g:235:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 102:
				case 108:
					{
					alt17 = 1;
					}
					break;
				case 83:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:44: ( '=' | ':=' ) expr
					{
					DebugLocation(235, 44);
					// SugarCpp.g:235:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==108))
					{
						alt15 = 1;
					}
					else if ((LA15_0==102))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:235:45: '='
						{
						DebugLocation(235, 45);
						char_literal39=(IToken)Match(input,108,Follow._108_in_global_alloc763);  
						stream_108.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:235:51: ':='
						{
						DebugLocation(235, 51);
						string_literal40=(IToken)Match(input,102,Follow._102_in_global_alloc767);  
						stream_102.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(235, 57);
					PushFollow(Follow._expr_in_global_alloc770);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 235:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(235, 65);
						// SugarCpp.g:235:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(235, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(235, 84);
						// SugarCpp.g:235:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(235, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(235, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(235, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(235, 116);
						// SugarCpp.g:235:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(235, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:236:43: '(' ( expr_list )? ')'
					{
					DebugLocation(236, 43);
					char_literal42=(IToken)Match(input,83,Follow._83_in_global_alloc830);  
					stream_83.Add(char_literal42);

					DebugLocation(236, 47);
					// SugarCpp.g:236:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==76||LA16_0==81||LA16_0==83||LA16_0==85||(LA16_0>=87 && LA16_0<=88)||(LA16_0>=91 && LA16_0<=92)||(LA16_0>=117 && LA16_0<=118)||LA16_0==141||LA16_0==158))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:236:47: expr_list
						{
						DebugLocation(236, 47);
						PushFollow(Follow._expr_list_in_global_alloc832);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(236, 58);
					char_literal44=(IToken)Match(input,84,Follow._84_in_global_alloc835);  
					stream_84.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 236:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(236, 65);
						// SugarCpp.g:236:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(236, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(236, 86);
						// SugarCpp.g:236:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(236, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(236, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(236, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(236, 118);
						// SugarCpp.g:236:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(236, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:237:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 237:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(237, 20);
						// SugarCpp.g:237:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(237, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(237, 39);
						// SugarCpp.g:237:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(237, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(237, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(237, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:239:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(239, 10);
				string_literal45=(IToken)Match(input,102,Follow._102_in_global_alloc908);  
				stream_102.Add(string_literal45);

				DebugLocation(239, 15);
				// SugarCpp.g:239:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:239:16: expr ( ',' expr )*
				{
				DebugLocation(239, 16);
				PushFollow(Follow._expr_in_global_alloc911);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(239, 21);
				// SugarCpp.g:239:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==90))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:239:22: ',' expr
						{
						DebugLocation(239, 22);
						char_literal47=(IToken)Match(input,90,Follow._90_in_global_alloc914);  
						stream_90.Add(char_literal47);

						DebugLocation(239, 26);
						PushFollow(Follow._expr_in_global_alloc916);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 102, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(239, 37);
					// SugarCpp.g:239:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_102.NextNode(), root_1);

					DebugLocation(239, 44);
					// SugarCpp.g:239:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(239, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(239, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(239, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(239, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:243:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(244, 4);
			// SugarCpp.g:244:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==118))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:4: attribute
				{
				DebugLocation(244, 4);
				PushFollow(Follow._attribute_in_global_using953);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(244, 15);
			string_literal50=(IToken)Match(input,152,Follow._152_in_global_using956);  
			stream_152.Add(string_literal50);

			DebugLocation(244, 23);
			// SugarCpp.g:244:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==140))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:23: stmt_using_item
					{
					DebugLocation(244, 23);
					PushFollow(Follow._stmt_using_item_in_global_using958);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(244, 43);
				// SugarCpp.g:244:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(244, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(244, 56);
				// SugarCpp.g:244:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(244, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(244, 67);
				// SugarCpp.g:244:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(244, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:247:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(248, 4);
			// SugarCpp.g:248:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==118))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:4: attribute
				{
				DebugLocation(248, 4);
				PushFollow(Follow._attribute_in_global_typedef982);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(248, 15);
			string_literal53=(IToken)Match(input,148,Follow._148_in_global_typedef985);  
			stream_148.Add(string_literal53);

			DebugLocation(248, 25);
			PushFollow(Follow._ident_in_global_typedef987);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(248, 31);
			char_literal55=(IToken)Match(input,108,Follow._108_in_global_typedef989);  
			stream_108.Add(char_literal55);

			DebugLocation(248, 35);
			PushFollow(Follow._type_name_in_global_typedef991);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(248, 48);
				// SugarCpp.g:248:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(248, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(248, 63);
				// SugarCpp.g:248:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(248, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(248, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(248, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:251:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(252, 4);
			// SugarCpp.g:252:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==118))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:4: attribute
				{
				DebugLocation(252, 4);
				PushFollow(Follow._attribute_in_import_def1015);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(252, 15);
			string_literal58=(IToken)Match(input,136,Follow._136_in_import_def1018);  
			stream_136.Add(string_literal58);

			DebugLocation(252, 24);
			// SugarCpp.g:252:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:24: STRING
				{
				DebugLocation(252, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1020);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(252, 32);
			// SugarCpp.g:252:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(252, 33);
				// SugarCpp.g:252:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:33: NEWLINE
						{
						DebugLocation(252, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1024);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(252, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1027);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(252, 49);
				// SugarCpp.g:252:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:49: NEWLINE
						{
						DebugLocation(252, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1029);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(252, 59);
				// SugarCpp.g:252:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:60: STRING ( NEWLINE )+
						{
						DebugLocation(252, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1034);  
						stream_STRING.Add(STRING63);

						DebugLocation(252, 67);
						// SugarCpp.g:252:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:252:67: NEWLINE
								{
								DebugLocation(252, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1036);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(252, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1041);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 252:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(252, 90);
				// SugarCpp.g:252:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(252, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(252, 99);
				// SugarCpp.g:252:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(252, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(252, 110);
				// SugarCpp.g:252:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(252, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:255:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(255, 1);
		try
		{
			// SugarCpp.g:256:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:256:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(256, 4);
			// SugarCpp.g:256:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==118))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:4: attribute
				{
				DebugLocation(256, 4);
				PushFollow(Follow._attribute_in_enum_def1066);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(256, 15);
			string_literal67=(IToken)Match(input,132,Follow._132_in_enum_def1069);  
			stream_132.Add(string_literal67);

			DebugLocation(256, 22);
			PushFollow(Follow._ident_in_enum_def1071);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(256, 28);
			char_literal69=(IToken)Match(input,108,Follow._108_in_enum_def1073);  
			stream_108.Add(char_literal69);

			DebugLocation(256, 32);
			// SugarCpp.g:256:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:33: ident ( '|' ident )*
				{
				DebugLocation(256, 33);
				PushFollow(Follow._ident_in_enum_def1076);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(256, 39);
				// SugarCpp.g:256:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==155))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:40: '|' ident
						{
						DebugLocation(256, 40);
						char_literal71=(IToken)Match(input,155,Follow._155_in_enum_def1079);  
						stream_155.Add(char_literal71);

						DebugLocation(256, 44);
						PushFollow(Follow._ident_in_enum_def1081);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 256:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(256, 57);
				// SugarCpp.g:256:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(256, 64);
				// SugarCpp.g:256:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(256, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(256, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(256, 81);
				// SugarCpp.g:256:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(256, 94);
				// SugarCpp.g:256:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(256, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:259:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(259, 1);
		try
		{
			// SugarCpp.g:260:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:260:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(260, 4);
			// SugarCpp.g:260:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==118))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:4: attribute
				{
				DebugLocation(260, 4);
				PushFollow(Follow._attribute_in_namespace_def1114);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(260, 15);
			string_literal74=(IToken)Match(input,140,Follow._140_in_namespace_def1117);  
			stream_140.Add(string_literal74);

			DebugLocation(260, 27);
			PushFollow(Follow._ident_in_namespace_def1119);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(260, 33);
			// SugarCpp.g:260:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(260, 34);
				// SugarCpp.g:260:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:34: NEWLINE
						{
						DebugLocation(260, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1122);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(260, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1125);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(260, 50);
				// SugarCpp.g:260:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:260:50: NEWLINE
						{
						DebugLocation(260, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1127);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(260, 59);
				PushFollow(Follow._global_block_in_namespace_def1130);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(260, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1132);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 260:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(260, 84);
				// SugarCpp.g:260:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(260, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(260, 96);
				// SugarCpp.g:260:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(260, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(260, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(260, 113);
				// SugarCpp.g:260:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(260, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:263:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(263, 1);
		try
		{
			// SugarCpp.g:264:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:264:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(264, 5);
			// SugarCpp.g:264:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==118))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:5: attribute
				{
				DebugLocation(264, 5);
				PushFollow(Follow._attribute_in_class_def1160);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(264, 16);
			string_literal82=(IToken)Match(input,127,Follow._127_in_class_def1163);  
			stream_127.Add(string_literal82);

			DebugLocation(264, 24);
			PushFollow(Follow._ident_in_class_def1165);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(264, 30);
			// SugarCpp.g:264:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==103))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:31: generic_parameter
				{
				DebugLocation(264, 31);
				PushFollow(Follow._generic_parameter_in_class_def1168);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(264, 51);
			// SugarCpp.g:264:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==83))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:52: '(' func_args ')'
				{
				DebugLocation(264, 52);
				char_literal85=(IToken)Match(input,83,Follow._83_in_class_def1173);  
				stream_83.Add(char_literal85);

				DebugLocation(264, 56);
				PushFollow(Follow._func_args_in_class_def1175);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(264, 66);
				char_literal87=(IToken)Match(input,84,Follow._84_in_class_def1177);  
				stream_84.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(264, 72);
			// SugarCpp.g:264:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==100))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:73: ':' ident ( ',' ident )*
				{
				DebugLocation(264, 73);
				char_literal88=(IToken)Match(input,100,Follow._100_in_class_def1182);  
				stream_100.Add(char_literal88);

				DebugLocation(264, 77);
				PushFollow(Follow._ident_in_class_def1184);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(264, 83);
				// SugarCpp.g:264:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==90))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:84: ',' ident
						{
						DebugLocation(264, 84);
						char_literal90=(IToken)Match(input,90,Follow._90_in_class_def1187);  
						stream_90.Add(char_literal90);

						DebugLocation(264, 88);
						PushFollow(Follow._ident_in_class_def1189);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(264, 98);
			// SugarCpp.g:264:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(264, 99);
				// SugarCpp.g:264:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:99: NEWLINE
						{
						DebugLocation(264, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1196);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(264, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1199);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(264, 115);
				// SugarCpp.g:264:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:115: NEWLINE
						{
						DebugLocation(264, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1201);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(264, 124);
				PushFollow(Follow._global_block_in_class_def1204);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(264, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1206);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, attribute, func_args, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 264:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(264, 149);
				// SugarCpp.g:264:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(264, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(264, 157);
				// SugarCpp.g:264:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(264, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(264, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(264, 174);
				// SugarCpp.g:264:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(264, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(264, 193);
				// SugarCpp.g:264:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(264, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(264, 204);
				// SugarCpp.g:264:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(264, 205);
					// SugarCpp.g:264:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(264, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(264, 218);
					// SugarCpp.g:264:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(264, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(264, 228);
				// SugarCpp.g:264:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(264, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:267:1: type_name : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(267, 1);
		try
		{
			// SugarCpp.g:268:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:268:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(268, 4);
			PushFollow(Follow._type_star_in_type_name1249);
			type_star97=type_star();
			PopFollow();

			stream_type_star.Add(type_star97.Tree);
			DebugLocation(268, 14);
			// SugarCpp.g:268:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt46=3;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 81:
				{
				alt46 = 1;
				}
				break;
			case 118:
				{
				alt46 = 2;
				}
				break;
			case IDENT:
			case NEWLINE:
			case 83:
			case 84:
			case 90:
			case 102:
			case 108:
			case 111:
			case 134:
			case 135:
			case 149:
			case 151:
			case 154:
			case 158:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:268:16: '&'
				{
				DebugLocation(268, 16);
				char_literal98=(IToken)Match(input,81,Follow._81_in_type_name1253);  
				stream_81.Add(char_literal98);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 268:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(268, 23);
					// SugarCpp.g:268:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(268, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(268, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:269:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(269, 7);
				char_literal99=(IToken)Match(input,118,Follow._118_in_type_name1269);  
				stream_118.Add(char_literal99);

				DebugLocation(269, 11);
				PushFollow(Follow._expr_in_type_name1271);
				expr100=expr();
				PopFollow();

				stream_expr.Add(expr100.Tree);
				DebugLocation(269, 16);
				// SugarCpp.g:269:16: ( ',' expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==90))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:17: ',' expr
						{
						DebugLocation(269, 17);
						char_literal101=(IToken)Match(input,90,Follow._90_in_type_name1274);  
						stream_90.Add(char_literal101);

						DebugLocation(269, 21);
						PushFollow(Follow._expr_in_type_name1276);
						expr102=expr();
						PopFollow();

						stream_expr.Add(expr102.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(269, 28);
				char_literal103=(IToken)Match(input,119,Follow._119_in_type_name1280);  
				stream_119.Add(char_literal103);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 269:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(269, 35);
					// SugarCpp.g:269:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(269, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(269, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(269, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(269, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:270:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:7: -> type_star
				{
					DebugLocation(270, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:274:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 15);
		TraceIn("type_star", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(274, 1);
		try
		{
			// SugarCpp.g:275:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(275, 4);
			PushFollow(Follow._type_template_type_in_type_star1318);
			type_template_type104=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type104.Tree);
			DebugLocation(275, 23);
			// SugarCpp.g:275:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==85))
			{
				alt48 = 1;
			}
			else if ((LA48_0==IDENT||LA48_0==NEWLINE||LA48_0==81||(LA48_0>=83 && LA48_0<=84)||LA48_0==90||LA48_0==102||LA48_0==108||LA48_0==111||LA48_0==118||(LA48_0>=134 && LA48_0<=135)||LA48_0==149||LA48_0==151||LA48_0==154||LA48_0==158))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:25: ( '*' )+
				{
				DebugLocation(275, 25);
				// SugarCpp.g:275:25: ( '*' )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==85))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:275:25: '*'
						{
						DebugLocation(275, 25);
						char_literal105=(IToken)Match(input,85,Follow._85_in_type_star1322);  
						stream_85.Add(char_literal105);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: 85, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 275:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(275, 33);
					// SugarCpp.g:275:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(275, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(275, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(275, 64);
					if (!(stream_85.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_85.HasNext )
					{
						DebugLocation(275, 64);
						adaptor.AddChild(root_1, stream_85.NextNode());

					}
					stream_85.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:276:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 276:10: -> type_template_type
				{
					DebugLocation(276, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 15);
			LeaveRule("type_star", 15);
			LeaveRule_type_star();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:280:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 16);
		TraceIn("type_template_type", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(281, 4);
			PushFollow(Follow._type_ident_in_type_template_type1368);
			type_ident106=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident106.Tree);
			DebugLocation(281, 15);
			// SugarCpp.g:281:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==103))
			{
				alt51 = 1;
			}
			else if ((LA51_0==IDENT||LA51_0==NEWLINE||LA51_0==81||(LA51_0>=83 && LA51_0<=85)||LA51_0==90||LA51_0==102||LA51_0==108||LA51_0==111||LA51_0==118||(LA51_0>=134 && LA51_0<=135)||LA51_0==149||LA51_0==151||LA51_0==154||LA51_0==158))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(281, 17);
				char_literal107=(IToken)Match(input,103,Follow._103_in_type_template_type1372);  
				stream_103.Add(char_literal107);

				DebugLocation(281, 21);
				// SugarCpp.g:281:21: ( type_name ( ',' type_name )* )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==IDENT||LA50_0==128||LA50_0==150))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:281:22: type_name ( ',' type_name )*
					{
					DebugLocation(281, 22);
					PushFollow(Follow._type_name_in_type_template_type1375);
					type_name108=type_name();
					PopFollow();

					stream_type_name.Add(type_name108.Tree);
					DebugLocation(281, 32);
					// SugarCpp.g:281:32: ( ',' type_name )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==90))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:281:33: ',' type_name
							{
							DebugLocation(281, 33);
							char_literal109=(IToken)Match(input,90,Follow._90_in_type_template_type1378);  
							stream_90.Add(char_literal109);

							DebugLocation(281, 37);
							PushFollow(Follow._type_name_in_type_template_type1380);
							type_name110=type_name();
							PopFollow();

							stream_type_name.Add(type_name110.Tree);

							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(281, 51);
				char_literal111=(IToken)Match(input,111,Follow._111_in_type_template_type1386);  
				stream_111.Add(char_literal111);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(281, 58);
					// SugarCpp.g:281:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(281, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(281, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(281, 85);
					// SugarCpp.g:281:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(281, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:282:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:8: -> type_ident
				{
					DebugLocation(282, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 16);
			LeaveRule("type_template_type", 16);
			LeaveRule_type_template_type();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:286:1: type_ident : ( 'const' )? ( 'unsigned' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 17);
		TraceIn("type_ident", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal113_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( ( 'const' )? ( 'unsigned' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: ( 'const' )? ( 'unsigned' )? ident
			{
			DebugLocation(287, 4);
			// SugarCpp.g:287:4: ( 'const' )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==128))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:4: 'const'
				{
				DebugLocation(287, 4);
				string_literal112=(IToken)Match(input,128,Follow._128_in_type_ident1426);  
				stream_128.Add(string_literal112);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(287, 13);
			// SugarCpp.g:287:13: ( 'unsigned' )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==150))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:13: 'unsigned'
				{
				DebugLocation(287, 13);
				string_literal113=(IToken)Match(input,150,Follow._150_in_type_ident1429);  
				stream_150.Add(string_literal113);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(287, 25);
			PushFollow(Follow._ident_in_type_ident1432);
			ident114=ident();
			PopFollow();

			stream_ident.Add(ident114.Tree);


			{
			// AST REWRITE
			// elements: 150, ident, 128
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:31: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident )
			{
				DebugLocation(287, 34);
				// SugarCpp.g:287:34: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(287, 47);
				// SugarCpp.g:287:47: ( 'const' )?
				if (stream_128.HasNext)
				{
					DebugLocation(287, 47);
					adaptor.AddChild(root_1, stream_128.NextNode());

				}
				stream_128.Reset();
				DebugLocation(287, 56);
				// SugarCpp.g:287:56: ( 'unsigned' )?
				if (stream_150.HasNext)
				{
					DebugLocation(287, 56);
					adaptor.AddChild(root_1, stream_150.NextNode());

				}
				stream_150.Reset();
				DebugLocation(287, 68);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 17);
			LeaveRule("type_ident", 17);
			LeaveRule_type_ident();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:290:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 18);
		TraceIn("generic_parameter_inside", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal116 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident117 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal116_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: ident ( ',' ident )*
			{
			DebugLocation(291, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1457);
			ident115=ident();
			PopFollow();

			stream_ident.Add(ident115.Tree);
			DebugLocation(291, 10);
			// SugarCpp.g:291:10: ( ',' ident )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==90))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:11: ',' ident
					{
					DebugLocation(291, 11);
					char_literal116=(IToken)Match(input,90,Follow._90_in_generic_parameter_inside1460);  
					stream_90.Add(char_literal116);

					DebugLocation(291, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1462);
					ident117=ident();
					PopFollow();

					stream_ident.Add(ident117.Tree);

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(291, 26);
				// SugarCpp.g:291:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(291, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(291, 47);
				// SugarCpp.g:291:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(291, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 18);
			LeaveRule("generic_parameter_inside", 18);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:294:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 19);
		TraceIn("generic_parameter", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal118 = default(IToken);
		IToken char_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(294, 1);
		try
		{
			// SugarCpp.g:295:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:295:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(295, 4);
			char_literal118=(IToken)Match(input,103,Follow._103_in_generic_parameter1484);  
			stream_103.Add(char_literal118);

			DebugLocation(295, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1486);
			generic_parameter_inside119=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside119.Tree);
			DebugLocation(295, 33);
			char_literal120=(IToken)Match(input,111,Follow._111_in_generic_parameter1488);  
			stream_111.Add(char_literal120);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 295:37: -> generic_parameter_inside
			{
				DebugLocation(295, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 19);
			LeaveRule("generic_parameter", 19);
			LeaveRule_generic_parameter();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:298:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item123 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(298, 1);
		try
		{
			// SugarCpp.g:299:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:299:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(299, 4);
			PushFollow(Follow._func_args_item_in_func_args1503);
			func_args_item121=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item121.Tree);
			DebugLocation(299, 19);
			// SugarCpp.g:299:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==90))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:299:20: ',' func_args_item
					{
					DebugLocation(299, 20);
					char_literal122=(IToken)Match(input,90,Follow._90_in_func_args1506);  
					stream_90.Add(char_literal122);

					DebugLocation(299, 24);
					PushFollow(Follow._func_args_item_in_func_args1508);
					func_args_item123=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item123.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 299:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(299, 44);
				// SugarCpp.g:299:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(299, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(299, 56);
				// SugarCpp.g:299:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(299, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:302:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 21);
		TraceIn("func_args_item", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken string_literal128 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken string_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list124 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree string_literal128_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree string_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(302, 1);
		try
		{
			// SugarCpp.g:303:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt59=2;
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==IDENT))
			{
				alt59 = 1;
			}
			else if ((LA59_0==102))
			{
				alt59 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:303:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(303, 4);
				PushFollow(Follow._ident_list_in_func_args_item1530);
				ident_list124=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list124.Tree);
				DebugLocation(303, 15);
				char_literal125=(IToken)Match(input,100,Follow._100_in_func_args_item1532);  
				stream_100.Add(char_literal125);

				DebugLocation(303, 19);
				PushFollow(Follow._type_name_in_func_args_item1534);
				type_name126=type_name();
				PopFollow();

				stream_type_name.Add(type_name126.Tree);
				DebugLocation(303, 29);
				// SugarCpp.g:303:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt58=3;
				try { DebugEnterSubRule(58);
				try { DebugEnterDecision(58, false);
				switch (input.LA(1))
				{
				case 102:
				case 108:
					{
					alt58 = 1;
					}
					break;
				case 83:
					{
					alt58 = 2;
					}
					break;
				case 84:
				case 90:
					{
					alt58 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(58); }
				switch (alt58)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:303:31: ( '=' | ':=' ) expr
					{
					DebugLocation(303, 31);
					// SugarCpp.g:303:31: ( '=' | ':=' )
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, false);
					int LA56_0 = input.LA(1);

					if ((LA56_0==108))
					{
						alt56 = 1;
					}
					else if ((LA56_0==102))
					{
						alt56 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:303:32: '='
						{
						DebugLocation(303, 32);
						char_literal127=(IToken)Match(input,108,Follow._108_in_func_args_item1539);  
						stream_108.Add(char_literal127);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:303:38: ':='
						{
						DebugLocation(303, 38);
						string_literal128=(IToken)Match(input,102,Follow._102_in_func_args_item1543);  
						stream_102.Add(string_literal128);


						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(303, 44);
					PushFollow(Follow._expr_in_func_args_item1546);
					expr129=expr();
					PopFollow();

					stream_expr.Add(expr129.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 303:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(303, 53);
						// SugarCpp.g:303:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(303, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(303, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(303, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(303, 93);
						// SugarCpp.g:303:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(303, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:304:33: '(' ( expr_list )? ')'
					{
					DebugLocation(304, 33);
					char_literal130=(IToken)Match(input,83,Follow._83_in_func_args_item1594);  
					stream_83.Add(char_literal130);

					DebugLocation(304, 37);
					// SugarCpp.g:304:37: ( expr_list )?
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==IDENT||LA57_0==NUMBER||LA57_0==STRING||LA57_0==76||LA57_0==81||LA57_0==83||LA57_0==85||(LA57_0>=87 && LA57_0<=88)||(LA57_0>=91 && LA57_0<=92)||(LA57_0>=117 && LA57_0<=118)||LA57_0==141||LA57_0==158))
					{
						alt57 = 1;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:304:37: expr_list
						{
						DebugLocation(304, 37);
						PushFollow(Follow._expr_list_in_func_args_item1596);
						expr_list131=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list131.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(304, 48);
					char_literal132=(IToken)Match(input,84,Follow._84_in_func_args_item1599);  
					stream_84.Add(char_literal132);



					{
					// AST REWRITE
					// elements: ident_list, expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 304:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(304, 56);
						// SugarCpp.g:304:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(304, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(304, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(304, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(304, 98);
						// SugarCpp.g:304:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(304, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:305:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 305:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(305, 18);
						// SugarCpp.g:305:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(305, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(305, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(305, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(58); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:307:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(307, 8);
				string_literal133=(IToken)Match(input,102,Follow._102_in_func_args_item1656); 
				string_literal133_tree = (CommonTree)adaptor.Create(string_literal133);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal133_tree, root_0);
				DebugLocation(307, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1660);
				modify_expr134=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr134.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 21);
			LeaveRule("func_args_item", 21);
			LeaveRule_func_args_item();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:310:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 22);
		TraceIn("func_def", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal137 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken NEWLINE143 = default(IToken);
		IToken char_literal145 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree NEWLINE143_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(310, 4);
		try
		{
			// SugarCpp.g:311:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(311, 4);
			// SugarCpp.g:311:4: ( attribute )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==118))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:4: attribute
				{
				DebugLocation(311, 4);
				PushFollow(Follow._attribute_in_func_def1671);
				attribute135=attribute();
				PopFollow();

				stream_attribute.Add(attribute135.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(60); }

			DebugLocation(311, 15);
			// SugarCpp.g:311:15: ( type_name )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			try
			{
				alt61 = dfa61.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:15: type_name
				{
				DebugLocation(311, 15);
				PushFollow(Follow._type_name_in_func_def1674);
				type_name136=type_name();
				PopFollow();

				stream_type_name.Add(type_name136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(311, 26);
			// SugarCpp.g:311:26: ( '~' )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==158))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:26: '~'
				{
				DebugLocation(311, 26);
				char_literal137=(IToken)Match(input,158,Follow._158_in_func_def1677);  
				stream_158.Add(char_literal137);


				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(311, 31);
			PushFollow(Follow._ident_in_func_def1680);
			ident138=ident();
			PopFollow();

			stream_ident.Add(ident138.Tree);
			DebugLocation(311, 37);
			// SugarCpp.g:311:37: ( generic_parameter )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==103))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:37: generic_parameter
				{
				DebugLocation(311, 37);
				PushFollow(Follow._generic_parameter_in_func_def1682);
				generic_parameter139=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter139.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(311, 56);
			char_literal140=(IToken)Match(input,83,Follow._83_in_func_def1685);  
			stream_83.Add(char_literal140);

			DebugLocation(311, 60);
			// SugarCpp.g:311:60: ( func_args )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==IDENT||LA64_0==102))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:60: func_args
				{
				DebugLocation(311, 60);
				PushFollow(Follow._func_args_in_func_def1687);
				func_args141=func_args();
				PopFollow();

				stream_func_args.Add(func_args141.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(311, 71);
			char_literal142=(IToken)Match(input,84,Follow._84_in_func_def1690);  
			stream_84.Add(char_literal142);

			DebugLocation(311, 75);
			// SugarCpp.g:311:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==NEWLINE))
			{
				alt66 = 1;
			}
			else if ((LA66_0==108))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(311, 76);
				// SugarCpp.g:311:76: ( NEWLINE )+
				int cnt65=0;
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if ((LA65_0==NEWLINE))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:311:76: NEWLINE
						{
						DebugLocation(311, 76);
						NEWLINE143=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1693);  
						stream_NEWLINE.Add(NEWLINE143);


						}
						break;

					default:
						if (cnt65 >= 1)
							goto loop65;

						EarlyExitException eee65 = new EarlyExitException( 65, input );
						DebugRecognitionException(eee65);
						throw eee65;
					}
					cnt65++;
				}
				loop65:
					;

				} finally { DebugExitSubRule(65); }

				DebugLocation(311, 85);
				PushFollow(Follow._stmt_block_in_func_def1696);
				stmt_block144=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block144.Tree);


				{
				// AST REWRITE
				// elements: func_args, generic_parameter, stmt_block, attribute, ident, 158, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(311, 99);
					// SugarCpp.g:311:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(311, 110);
					// SugarCpp.g:311:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(311, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(311, 121);
					// SugarCpp.g:311:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(311, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(311, 132);
					// SugarCpp.g:311:132: ( '~' )?
					if (stream_158.HasNext)
					{
						DebugLocation(311, 132);
						adaptor.AddChild(root_1, stream_158.NextNode());

					}
					stream_158.Reset();
					DebugLocation(311, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(311, 143);
					// SugarCpp.g:311:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(311, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(311, 162);
					// SugarCpp.g:311:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(311, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(311, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:23: '=' expr
				{
				DebugLocation(312, 23);
				char_literal145=(IToken)Match(input,108,Follow._108_in_func_def1745);  
				stream_108.Add(char_literal145);

				DebugLocation(312, 27);
				PushFollow(Follow._expr_in_func_def1747);
				expr146=expr();
				PopFollow();

				stream_expr.Add(expr146.Tree);


				{
				// AST REWRITE
				// elements: type_name, attribute, expr, generic_parameter, ident, 158, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(312, 36);
					// SugarCpp.g:312:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(312, 47);
					// SugarCpp.g:312:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(312, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(312, 58);
					// SugarCpp.g:312:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(312, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(312, 69);
					// SugarCpp.g:312:69: ( '~' )?
					if (stream_158.HasNext)
					{
						DebugLocation(312, 69);
						adaptor.AddChild(root_1, stream_158.NextNode());

					}
					stream_158.Reset();
					DebugLocation(312, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(312, 80);
					// SugarCpp.g:312:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(312, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(312, 99);
					// SugarCpp.g:312:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(312, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(312, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 22);
			LeaveRule("func_def", 22);
			LeaveRule_func_def();
		}
		DebugLocation(313, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:315:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 23);
		TraceIn("stmt_block", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT147 = default(IToken);
		IToken NEWLINE148 = default(IToken);
		IToken NEWLINE150 = default(IToken);
		IToken DEDENT151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT147_tree = default(CommonTree);
		CommonTree NEWLINE148_tree = default(CommonTree);
		CommonTree NEWLINE150_tree = default(CommonTree);
		CommonTree DEDENT151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(315, 1);
		try
		{
			// SugarCpp.g:316:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:316:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(316, 4);
			INDENT147=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1788);  
			stream_INDENT.Add(INDENT147);

			DebugLocation(316, 11);
			// SugarCpp.g:316:11: ( NEWLINE )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==NEWLINE))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:11: NEWLINE
					{
					DebugLocation(316, 11);
					NEWLINE148=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1790);  
					stream_NEWLINE.Add(NEWLINE148);


					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }

			DebugLocation(316, 20);
			// SugarCpp.g:316:20: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=2;
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==IDENT||LA69_0==83||LA69_0==117||LA69_0==129||(LA69_0>=133 && LA69_0<=135)||LA69_0==139||(LA69_0>=143 && LA69_0<=144)||(LA69_0>=147 && LA69_0<=149)||(LA69_0>=151 && LA69_0<=152)||LA69_0==154))
				{
					alt69 = 1;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:316:21: stmt ( NEWLINE )+
					{
					DebugLocation(316, 21);
					PushFollow(Follow._stmt_in_stmt_block1794);
					stmt149=stmt();
					PopFollow();

					stream_stmt.Add(stmt149.Tree);
					DebugLocation(316, 26);
					// SugarCpp.g:316:26: ( NEWLINE )+
					int cnt68=0;
					try { DebugEnterSubRule(68);
					while (true)
					{
						int alt68=2;
						try { DebugEnterDecision(68, false);
						int LA68_0 = input.LA(1);

						if ((LA68_0==NEWLINE))
						{
							alt68 = 1;
						}


						} finally { DebugExitDecision(68); }
						switch (alt68)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:316:26: NEWLINE
							{
							DebugLocation(316, 26);
							NEWLINE150=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1796);  
							stream_NEWLINE.Add(NEWLINE150);


							}
							break;

						default:
							if (cnt68 >= 1)
								goto loop68;

							EarlyExitException eee68 = new EarlyExitException( 68, input );
							DebugRecognitionException(eee68);
							throw eee68;
						}
						cnt68++;
					}
					loop68:
						;

					} finally { DebugExitSubRule(68); }


					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }

			DebugLocation(316, 37);
			DEDENT151=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1801);  
			stream_DEDENT.Add(DEDENT151);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 316:44: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(316, 47);
				// SugarCpp.g:316:47: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(316, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(316, 60);
				// SugarCpp.g:316:60: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(316, 60);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 23);
			LeaveRule("stmt_block", 23);
			LeaveRule_stmt_block();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:319:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 24);
		TraceIn("stmt", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(319, 1);
		try
		{
			// SugarCpp.g:320:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_defer )
			int alt70=6;
			try { DebugEnterDecision(70, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 83:
			case 117:
			case 143:
			case 144:
			case 148:
			case 152:
				{
				alt70 = 1;
				}
				break;
			case 135:
			case 149:
				{
				alt70 = 2;
				}
				break;
			case 134:
				{
				alt70 = 3;
				}
				break;
			case 139:
			case 151:
			case 154:
				{
				alt70 = 4;
				}
				break;
			case 147:
				{
				alt70 = 5;
				}
				break;
			case 129:
			case 133:
				{
				alt70 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 70, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(320, 4);
				PushFollow(Follow._stmt_expr_in_stmt1821);
				stmt_expr152=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr152.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:321:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(321, 4);
				PushFollow(Follow._stmt_if_in_stmt1826);
				stmt_if153=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if153.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:322:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(322, 4);
				PushFollow(Follow._stmt_for_in_stmt1831);
				stmt_for154=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for154.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:323:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(323, 4);
				PushFollow(Follow._stmt_while_in_stmt1836);
				stmt_while155=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while155.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:324:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(324, 4);
				PushFollow(Follow._stmt_try_in_stmt1841);
				stmt_try156=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try156.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:325:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(325, 4);
				PushFollow(Follow._stmt_defer_in_stmt1846);
				stmt_defer157=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer157.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 24);
			LeaveRule("stmt", 24);
			LeaveRule_stmt();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:328:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 25);
		TraceIn("stmt_expr", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal158 = default(IToken);
		IToken string_literal160 = default(IToken);
		IToken string_literal162 = default(IToken);
		IToken string_literal164 = default(IToken);
		IToken string_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal158_tree = default(CommonTree);
		CommonTree string_literal160_tree = default(CommonTree);
		CommonTree string_literal162_tree = default(CommonTree);
		CommonTree string_literal164_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(329, 4);
			// SugarCpp.g:329:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:329:5: a= stmt_expr_item
			{
			DebugLocation(329, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1860);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:22: -> $a
			{
				DebugLocation(329, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(329, 29);
			// SugarCpp.g:329:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=6;
				try { DebugEnterDecision(72, false);
				switch (input.LA(1))
				{
				case 135:
					{
					alt72 = 1;
					}
					break;
				case 149:
					{
					alt72 = 2;
					}
					break;
				case 154:
					{
					alt72 = 3;
					}
					break;
				case 151:
					{
					alt72 = 4;
					}
					break;
				case 134:
					{
					alt72 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:31: 'if' expr
					{
					DebugLocation(329, 31);
					string_literal158=(IToken)Match(input,135,Follow._135_in_stmt_expr1870);  
					stream_135.Add(string_literal158);

					DebugLocation(329, 36);
					PushFollow(Follow._expr_in_stmt_expr1872);
					expr159=expr();
					PopFollow();

					stream_expr.Add(expr159.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 329:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(329, 44);
						// SugarCpp.g:329:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(329, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(329, 59);
						// SugarCpp.g:329:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(329, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:330:13: 'unless' expr
					{
					DebugLocation(330, 13);
					string_literal160=(IToken)Match(input,149,Follow._149_in_stmt_expr1901);  
					stream_149.Add(string_literal160);

					DebugLocation(330, 22);
					PushFollow(Follow._expr_in_stmt_expr1903);
					expr161=expr();
					PopFollow();

					stream_expr.Add(expr161.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 330:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(330, 30);
						// SugarCpp.g:330:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(330, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(330, 49);
						// SugarCpp.g:330:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(330, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:331:13: 'while' expr
					{
					DebugLocation(331, 13);
					string_literal162=(IToken)Match(input,154,Follow._154_in_stmt_expr1932);  
					stream_154.Add(string_literal162);

					DebugLocation(331, 21);
					PushFollow(Follow._expr_in_stmt_expr1934);
					expr163=expr();
					PopFollow();

					stream_expr.Add(expr163.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 331:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(331, 29);
						// SugarCpp.g:331:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(331, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(331, 47);
						// SugarCpp.g:331:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(331, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:332:13: 'until' expr
					{
					DebugLocation(332, 13);
					string_literal164=(IToken)Match(input,151,Follow._151_in_stmt_expr1963);  
					stream_151.Add(string_literal164);

					DebugLocation(332, 21);
					PushFollow(Follow._expr_in_stmt_expr1965);
					expr165=expr();
					PopFollow();

					stream_expr.Add(expr165.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 332:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(332, 29);
						// SugarCpp.g:332:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(332, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(332, 47);
						// SugarCpp.g:332:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(332, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:333:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(333, 13);
					string_literal166=(IToken)Match(input,134,Follow._134_in_stmt_expr1994);  
					stream_134.Add(string_literal166);

					DebugLocation(333, 19);
					PushFollow(Follow._for_item_in_stmt_expr1996);
					for_item167=for_item();
					PopFollow();

					stream_for_item.Add(for_item167.Tree);
					DebugLocation(333, 28);
					// SugarCpp.g:333:28: ( ',' for_item )*
					try { DebugEnterSubRule(71);
					while (true)
					{
						int alt71=2;
						try { DebugEnterDecision(71, false);
						int LA71_0 = input.LA(1);

						if ((LA71_0==90))
						{
							alt71 = 1;
						}


						} finally { DebugExitDecision(71); }
						switch ( alt71 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:333:29: ',' for_item
							{
							DebugLocation(333, 29);
							char_literal168=(IToken)Match(input,90,Follow._90_in_stmt_expr1999);  
							stream_90.Add(char_literal168);

							DebugLocation(333, 33);
							PushFollow(Follow._for_item_in_stmt_expr2001);
							for_item169=for_item();
							PopFollow();

							stream_for_item.Add(for_item169.Tree);

							}
							break;

						default:
							goto loop71;
						}
					}

					loop71:
						;

					} finally { DebugExitSubRule(71); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(333, 47);
						// SugarCpp.g:333:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(333, 58);
						// SugarCpp.g:333:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(333, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(333, 68);
						// SugarCpp.g:333:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(333, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 25);
			LeaveRule("stmt_expr", 25);
			LeaveRule_stmt_expr();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:337:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify | stmt_switch );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 26);
		TraceIn("stmt_expr_item", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(337, 1);
		try
		{
			// SugarCpp.g:338:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify | stmt_switch )
			int alt73=6;
			try { DebugEnterDecision(73, false);
			try
			{
				alt73 = dfa73.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:338:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2043);
				stmt_alloc170=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc170.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:339:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2048);
				stmt_return171=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return171.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:340:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(340, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2053);
				stmt_using172=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using172.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:341:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(341, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2058);
				stmt_typedef173=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef173.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:342:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(342, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2063);
				stmt_modify174=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify174.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:343:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(343, 4);
				PushFollow(Follow._stmt_switch_in_stmt_expr_item2068);
				stmt_switch175=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch175.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 26);
			LeaveRule("stmt_expr_item", 26);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:346:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 27);
		TraceIn("stmt_defer", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal176 = default(IToken);
		IToken string_literal178 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal176_tree = default(CommonTree);
		CommonTree string_literal178_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==129))
			{
				alt74 = 1;
			}
			else if ((LA74_0==133))
			{
				alt74 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:347:4: 'defer' stmt
				{
				DebugLocation(347, 4);
				string_literal176=(IToken)Match(input,129,Follow._129_in_stmt_defer2079);  
				stream_129.Add(string_literal176);

				DebugLocation(347, 12);
				PushFollow(Follow._stmt_in_stmt_defer2081);
				stmt177=stmt();
				PopFollow();

				stream_stmt.Add(stmt177.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 347:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(347, 20);
					// SugarCpp.g:347:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(347, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(347, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:348:4: 'finally' stmt
				{
				DebugLocation(348, 4);
				string_literal178=(IToken)Match(input,133,Follow._133_in_stmt_defer2094);  
				stream_133.Add(string_literal178);

				DebugLocation(348, 14);
				PushFollow(Follow._stmt_in_stmt_defer2096);
				stmt179=stmt();
				PopFollow();

				stream_stmt.Add(stmt179.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(348, 22);
					// SugarCpp.g:348:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(348, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(348, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 27);
			LeaveRule("stmt_defer", 27);
			LeaveRule_stmt_defer();
		}
		DebugLocation(349, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:351:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 28);
		TraceIn("stmt_typedef", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal180_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(351, 1);
		try
		{
			// SugarCpp.g:352:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:352:4: 'typedef' ident '=' type_name
			{
			DebugLocation(352, 4);
			string_literal180=(IToken)Match(input,148,Follow._148_in_stmt_typedef2115);  
			stream_148.Add(string_literal180);

			DebugLocation(352, 14);
			PushFollow(Follow._ident_in_stmt_typedef2117);
			ident181=ident();
			PopFollow();

			stream_ident.Add(ident181.Tree);
			DebugLocation(352, 20);
			char_literal182=(IToken)Match(input,108,Follow._108_in_stmt_typedef2119);  
			stream_108.Add(char_literal182);

			DebugLocation(352, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2121);
			type_name183=type_name();
			PopFollow();

			stream_type_name.Add(type_name183.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 352:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(352, 37);
				// SugarCpp.g:352:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(352, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(352, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(352, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 28);
			LeaveRule("stmt_typedef", 28);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(353, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:355:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 29);
		TraceIn("stmt_using_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal185 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal185_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(355, 36);
		try
		{
			// SugarCpp.g:355:16: ( ident | 'namespace' )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT))
			{
				alt75 = 1;
			}
			else if ((LA75_0==140))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:355:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 18);
				PushFollow(Follow._ident_in_stmt_using_item2140);
				ident184=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident184.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:355:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 26);
				string_literal185=(IToken)Match(input,140,Follow._140_in_stmt_using_item2144); 
				string_literal185_tree = (CommonTree)adaptor.Create(string_literal185);
				adaptor.AddChild(root_0, string_literal185_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 29);
			LeaveRule("stmt_using_item", 29);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(355, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:356:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 30);
		TraceIn("stmt_using", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal186 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal186_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:357:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(357, 4);
			string_literal186=(IToken)Match(input,152,Follow._152_in_stmt_using2152);  
			stream_152.Add(string_literal186);

			DebugLocation(357, 12);
			// SugarCpp.g:357:12: ( stmt_using_item )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==IDENT||LA76_0==140))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:357:12: stmt_using_item
					{
					DebugLocation(357, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2154);
					stmt_using_item187=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item187.Tree);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 357:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(357, 32);
				// SugarCpp.g:357:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(357, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(357, 45);
				// SugarCpp.g:357:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(357, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 30);
			LeaveRule("stmt_using", 30);
			LeaveRule_stmt_using();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:360:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 31);
		TraceIn("stmt_return", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal188 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr189 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:361:4: 'return' ( expr )?
			{
			DebugLocation(361, 4);
			string_literal188=(IToken)Match(input,143,Follow._143_in_stmt_return2175);  
			stream_143.Add(string_literal188);

			DebugLocation(361, 13);
			// SugarCpp.g:361:13: ( expr )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==IDENT||LA77_0==NUMBER||LA77_0==STRING||LA77_0==76||LA77_0==81||LA77_0==83||LA77_0==85||(LA77_0>=87 && LA77_0<=88)||(LA77_0>=91 && LA77_0<=92)||(LA77_0>=117 && LA77_0<=118)||LA77_0==141||LA77_0==158))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:13: expr
				{
				DebugLocation(361, 13);
				PushFollow(Follow._expr_in_stmt_return2177);
				expr189=expr();
				PopFollow();

				stream_expr.Add(expr189.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(77); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 361:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(361, 22);
				// SugarCpp.g:361:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(361, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(361, 36);
				// SugarCpp.g:361:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(361, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 31);
			LeaveRule("stmt_return", 31);
			LeaveRule_stmt_return();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:364:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 32);
		TraceIn("stmt_if", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal190 = default(IToken);
		IToken NEWLINE192 = default(IToken);
		IToken NEWLINE194 = default(IToken);
		IToken string_literal195 = default(IToken);
		IToken NEWLINE196 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken string_literal200 = default(IToken);
		IToken NEWLINE202 = default(IToken);
		IToken NEWLINE204 = default(IToken);
		IToken string_literal205 = default(IToken);
		IToken NEWLINE206 = default(IToken);
		IToken string_literal208 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal190_tree = default(CommonTree);
		CommonTree NEWLINE192_tree = default(CommonTree);
		CommonTree NEWLINE194_tree = default(CommonTree);
		CommonTree string_literal195_tree = default(CommonTree);
		CommonTree NEWLINE196_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree string_literal200_tree = default(CommonTree);
		CommonTree NEWLINE202_tree = default(CommonTree);
		CommonTree NEWLINE204_tree = default(CommonTree);
		CommonTree string_literal205_tree = default(CommonTree);
		CommonTree NEWLINE206_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) )
			int alt88=2;
			try { DebugEnterDecision(88, false);
			int LA88_0 = input.LA(1);

			if ((LA88_0==135))
			{
				alt88 = 1;
			}
			else if ((LA88_0==149))
			{
				alt88 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 88, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:365:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(365, 4);
				string_literal190=(IToken)Match(input,135,Follow._135_in_stmt_if2198);  
				stream_135.Add(string_literal190);

				DebugLocation(365, 9);
				PushFollow(Follow._expr_in_stmt_if2200);
				expr191=expr();
				PopFollow();

				stream_expr.Add(expr191.Tree);
				DebugLocation(365, 14);
				// SugarCpp.g:365:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==NEWLINE))
				{
					alt82 = 1;
				}
				else if ((LA82_0==145))
				{
					alt82 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:365:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(365, 15);
					// SugarCpp.g:365:15: ( NEWLINE )+
					int cnt78=0;
					try { DebugEnterSubRule(78);
					while (true)
					{
						int alt78=2;
						try { DebugEnterDecision(78, false);
						int LA78_0 = input.LA(1);

						if ((LA78_0==NEWLINE))
						{
							alt78 = 1;
						}


						} finally { DebugExitDecision(78); }
						switch (alt78)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:365:15: NEWLINE
							{
							DebugLocation(365, 15);
							NEWLINE192=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2203);  
							stream_NEWLINE.Add(NEWLINE192);


							}
							break;

						default:
							if (cnt78 >= 1)
								goto loop78;

							EarlyExitException eee78 = new EarlyExitException( 78, input );
							DebugRecognitionException(eee78);
							throw eee78;
						}
						cnt78++;
					}
					loop78:
						;

					} finally { DebugExitSubRule(78); }

					DebugLocation(365, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2206);
					stmt_block193=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block193.Tree);
					DebugLocation(365, 35);
					// SugarCpp.g:365:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, false);
					try
					{
						alt81 = dfa81.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:365:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(365, 36);
						// SugarCpp.g:365:36: ( NEWLINE )*
						try { DebugEnterSubRule(79);
						while (true)
						{
							int alt79=2;
							try { DebugEnterDecision(79, false);
							int LA79_0 = input.LA(1);

							if ((LA79_0==NEWLINE))
							{
								alt79 = 1;
							}


							} finally { DebugExitDecision(79); }
							switch ( alt79 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:365:36: NEWLINE
								{
								DebugLocation(365, 36);
								NEWLINE194=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2209);  
								stream_NEWLINE.Add(NEWLINE194);


								}
								break;

							default:
								goto loop79;
							}
						}

						loop79:
							;

						} finally { DebugExitSubRule(79); }

						DebugLocation(365, 45);
						string_literal195=(IToken)Match(input,131,Follow._131_in_stmt_if2212);  
						stream_131.Add(string_literal195);

						DebugLocation(365, 52);
						// SugarCpp.g:365:52: ( NEWLINE )+
						int cnt80=0;
						try { DebugEnterSubRule(80);
						while (true)
						{
							int alt80=2;
							try { DebugEnterDecision(80, false);
							int LA80_0 = input.LA(1);

							if ((LA80_0==NEWLINE))
							{
								alt80 = 1;
							}


							} finally { DebugExitDecision(80); }
							switch (alt80)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:365:52: NEWLINE
								{
								DebugLocation(365, 52);
								NEWLINE196=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2214);  
								stream_NEWLINE.Add(NEWLINE196);


								}
								break;

							default:
								if (cnt80 >= 1)
									goto loop80;

								EarlyExitException eee80 = new EarlyExitException( 80, input );
								DebugRecognitionException(eee80);
								throw eee80;
							}
							cnt80++;
						}
						loop80:
							;

						} finally { DebugExitSubRule(80); }

						DebugLocation(365, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2217);
						stmt_block197=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block197.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(81); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 365:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(365, 77);
						// SugarCpp.g:365:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(365, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(365, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(365, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(365, 103);
						// SugarCpp.g:365:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(365, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:366:16: 'then' stmt
					{
					DebugLocation(366, 16);
					string_literal198=(IToken)Match(input,145,Follow._145_in_stmt_if2249);  
					stream_145.Add(string_literal198);

					DebugLocation(366, 23);
					PushFollow(Follow._stmt_in_stmt_if2251);
					stmt199=stmt();
					PopFollow();

					stream_stmt.Add(stmt199.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 366:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(366, 31);
						// SugarCpp.g:366:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(366, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(366, 46);
						// SugarCpp.g:366:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(366, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(82); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:368:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(368, 4);
				string_literal200=(IToken)Match(input,149,Follow._149_in_stmt_if2276);  
				stream_149.Add(string_literal200);

				DebugLocation(368, 13);
				PushFollow(Follow._expr_in_stmt_if2278);
				expr201=expr();
				PopFollow();

				stream_expr.Add(expr201.Tree);
				DebugLocation(368, 18);
				// SugarCpp.g:368:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==NEWLINE))
				{
					alt87 = 1;
				}
				else if ((LA87_0==145))
				{
					alt87 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:368:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(368, 19);
					// SugarCpp.g:368:19: ( NEWLINE )+
					int cnt83=0;
					try { DebugEnterSubRule(83);
					while (true)
					{
						int alt83=2;
						try { DebugEnterDecision(83, false);
						int LA83_0 = input.LA(1);

						if ((LA83_0==NEWLINE))
						{
							alt83 = 1;
						}


						} finally { DebugExitDecision(83); }
						switch (alt83)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:368:19: NEWLINE
							{
							DebugLocation(368, 19);
							NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2281);  
							stream_NEWLINE.Add(NEWLINE202);


							}
							break;

						default:
							if (cnt83 >= 1)
								goto loop83;

							EarlyExitException eee83 = new EarlyExitException( 83, input );
							DebugRecognitionException(eee83);
							throw eee83;
						}
						cnt83++;
					}
					loop83:
						;

					} finally { DebugExitSubRule(83); }

					DebugLocation(368, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2284);
					stmt_block203=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block203.Tree);
					DebugLocation(368, 39);
					// SugarCpp.g:368:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, false);
					try
					{
						alt86 = dfa86.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:368:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(368, 40);
						// SugarCpp.g:368:40: ( NEWLINE )*
						try { DebugEnterSubRule(84);
						while (true)
						{
							int alt84=2;
							try { DebugEnterDecision(84, false);
							int LA84_0 = input.LA(1);

							if ((LA84_0==NEWLINE))
							{
								alt84 = 1;
							}


							} finally { DebugExitDecision(84); }
							switch ( alt84 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:368:40: NEWLINE
								{
								DebugLocation(368, 40);
								NEWLINE204=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2287);  
								stream_NEWLINE.Add(NEWLINE204);


								}
								break;

							default:
								goto loop84;
							}
						}

						loop84:
							;

						} finally { DebugExitSubRule(84); }

						DebugLocation(368, 49);
						string_literal205=(IToken)Match(input,131,Follow._131_in_stmt_if2290);  
						stream_131.Add(string_literal205);

						DebugLocation(368, 56);
						// SugarCpp.g:368:56: ( NEWLINE )+
						int cnt85=0;
						try { DebugEnterSubRule(85);
						while (true)
						{
							int alt85=2;
							try { DebugEnterDecision(85, false);
							int LA85_0 = input.LA(1);

							if ((LA85_0==NEWLINE))
							{
								alt85 = 1;
							}


							} finally { DebugExitDecision(85); }
							switch (alt85)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:368:56: NEWLINE
								{
								DebugLocation(368, 56);
								NEWLINE206=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2292);  
								stream_NEWLINE.Add(NEWLINE206);


								}
								break;

							default:
								if (cnt85 >= 1)
									goto loop85;

								EarlyExitException eee85 = new EarlyExitException( 85, input );
								DebugRecognitionException(eee85);
								throw eee85;
							}
							cnt85++;
						}
						loop85:
							;

						} finally { DebugExitSubRule(85); }

						DebugLocation(368, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2295);
						stmt_block207=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block207.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(86); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(368, 81);
						// SugarCpp.g:368:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(368, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(368, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(368, 111);
						// SugarCpp.g:368:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(368, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:369:20: 'then' stmt
					{
					DebugLocation(369, 20);
					string_literal208=(IToken)Match(input,145,Follow._145_in_stmt_if2331);  
					stream_145.Add(string_literal208);

					DebugLocation(369, 27);
					PushFollow(Follow._stmt_in_stmt_if2333);
					stmt209=stmt();
					PopFollow();

					stream_stmt.Add(stmt209.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:32: -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(369, 35);
						// SugarCpp.g:369:35: ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(369, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(369, 54);
						// SugarCpp.g:369:54: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 56);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(369, 67);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 32);
			LeaveRule("stmt_if", 32);
			LeaveRule_stmt_if();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:373:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 33);
		TraceIn("stmt_while", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal210 = default(IToken);
		IToken NEWLINE212 = default(IToken);
		IToken string_literal214 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken NEWLINE218 = default(IToken);
		IToken string_literal220 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken NEWLINE224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal210_tree = default(CommonTree);
		CommonTree NEWLINE212_tree = default(CommonTree);
		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree NEWLINE218_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree NEWLINE224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(373, 1);
		try
		{
			// SugarCpp.g:374:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt95=3;
			try { DebugEnterDecision(95, false);
			switch (input.LA(1))
			{
			case 154:
				{
				alt95 = 1;
				}
				break;
			case 151:
				{
				alt95 = 2;
				}
				break;
			case 139:
				{
				alt95 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:374:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(374, 4);
				string_literal210=(IToken)Match(input,154,Follow._154_in_stmt_while2368);  
				stream_154.Add(string_literal210);

				DebugLocation(374, 12);
				PushFollow(Follow._expr_in_stmt_while2370);
				expr211=expr();
				PopFollow();

				stream_expr.Add(expr211.Tree);
				DebugLocation(374, 17);
				// SugarCpp.g:374:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==NEWLINE))
				{
					alt90 = 1;
				}
				else if ((LA90_0==145))
				{
					alt90 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:374:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(374, 19);
					// SugarCpp.g:374:19: ( NEWLINE )+
					int cnt89=0;
					try { DebugEnterSubRule(89);
					while (true)
					{
						int alt89=2;
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==NEWLINE))
						{
							alt89 = 1;
						}


						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:374:19: NEWLINE
							{
							DebugLocation(374, 19);
							NEWLINE212=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2374);  
							stream_NEWLINE.Add(NEWLINE212);


							}
							break;

						default:
							if (cnt89 >= 1)
								goto loop89;

							EarlyExitException eee89 = new EarlyExitException( 89, input );
							DebugRecognitionException(eee89);
							throw eee89;
						}
						cnt89++;
					}
					loop89:
						;

					} finally { DebugExitSubRule(89); }

					DebugLocation(374, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2377);
					stmt_block213=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block213.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 374:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(374, 42);
						// SugarCpp.g:374:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(374, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(374, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(374, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:375:13: 'then' stmt
					{
					DebugLocation(375, 13);
					string_literal214=(IToken)Match(input,145,Follow._145_in_stmt_while2401);  
					stream_145.Add(string_literal214);

					DebugLocation(375, 20);
					PushFollow(Follow._stmt_in_stmt_while2403);
					stmt215=stmt();
					PopFollow();

					stream_stmt.Add(stmt215.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:25: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(375, 28);
						// SugarCpp.g:375:28: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(375, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(375, 46);
						// SugarCpp.g:375:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(375, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:377:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(377, 4);
				string_literal216=(IToken)Match(input,151,Follow._151_in_stmt_while2431);  
				stream_151.Add(string_literal216);

				DebugLocation(377, 12);
				PushFollow(Follow._expr_in_stmt_while2433);
				expr217=expr();
				PopFollow();

				stream_expr.Add(expr217.Tree);
				DebugLocation(377, 17);
				// SugarCpp.g:377:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==NEWLINE))
				{
					alt92 = 1;
				}
				else if ((LA92_0==145))
				{
					alt92 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(377, 19);
					// SugarCpp.g:377:19: ( NEWLINE )+
					int cnt91=0;
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						int LA91_0 = input.LA(1);

						if ((LA91_0==NEWLINE))
						{
							alt91 = 1;
						}


						} finally { DebugExitDecision(91); }
						switch (alt91)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:377:19: NEWLINE
							{
							DebugLocation(377, 19);
							NEWLINE218=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2437);  
							stream_NEWLINE.Add(NEWLINE218);


							}
							break;

						default:
							if (cnt91 >= 1)
								goto loop91;

							EarlyExitException eee91 = new EarlyExitException( 91, input );
							DebugRecognitionException(eee91);
							throw eee91;
						}
						cnt91++;
					}
					loop91:
						;

					} finally { DebugExitSubRule(91); }

					DebugLocation(377, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2440);
					stmt_block219=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block219.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 377:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(377, 42);
						// SugarCpp.g:377:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(377, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(377, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(377, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:378:13: 'then' stmt
					{
					DebugLocation(378, 13);
					string_literal220=(IToken)Match(input,145,Follow._145_in_stmt_while2464);  
					stream_145.Add(string_literal220);

					DebugLocation(378, 20);
					PushFollow(Follow._stmt_in_stmt_while2466);
					stmt221=stmt();
					PopFollow();

					stream_stmt.Add(stmt221.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 378:25: -> ^( Stmt_Until expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(378, 28);
						// SugarCpp.g:378:28: ^( Stmt_Until expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(378, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(378, 46);
						// SugarCpp.g:378:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(378, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(378, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(92); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:380:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(380, 4);
				string_literal222=(IToken)Match(input,139,Follow._139_in_stmt_while2494);  
				stream_139.Add(string_literal222);

				DebugLocation(380, 11);
				// SugarCpp.g:380:11: ( expr )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==IDENT||LA93_0==NUMBER||LA93_0==STRING||LA93_0==76||LA93_0==81||LA93_0==83||LA93_0==85||(LA93_0>=87 && LA93_0<=88)||(LA93_0>=91 && LA93_0<=92)||(LA93_0>=117 && LA93_0<=118)||LA93_0==141||LA93_0==158))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:11: expr
					{
					DebugLocation(380, 11);
					PushFollow(Follow._expr_in_stmt_while2496);
					expr223=expr();
					PopFollow();

					stream_expr.Add(expr223.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(380, 17);
				// SugarCpp.g:380:17: ( NEWLINE )+
				int cnt94=0;
				try { DebugEnterSubRule(94);
				while (true)
				{
					int alt94=2;
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==NEWLINE))
					{
						alt94 = 1;
					}


					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:380:17: NEWLINE
						{
						DebugLocation(380, 17);
						NEWLINE224=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2499);  
						stream_NEWLINE.Add(NEWLINE224);


						}
						break;

					default:
						if (cnt94 >= 1)
							goto loop94;

						EarlyExitException eee94 = new EarlyExitException( 94, input );
						DebugRecognitionException(eee94);
						throw eee94;
					}
					cnt94++;
				}
				loop94:
					;

				} finally { DebugExitSubRule(94); }

				DebugLocation(380, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2502);
				stmt_block225=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block225.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(380, 40);
					// SugarCpp.g:380:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(380, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(380, 52);
					// SugarCpp.g:380:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(380, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(380, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 33);
			LeaveRule("stmt_while", 33);
			LeaveRule_stmt_while();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:383:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 34);
		TraceIn("for_range", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal227 = default(IToken);
		IToken string_literal228 = default(IToken);
		IToken string_literal229 = default(IToken);
		IToken string_literal230 = default(IToken);
		IToken string_literal231 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree string_literal229_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:384:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(384, 4);
			PushFollow(Follow._ident_in_for_range2524);
			ident226=ident();
			PopFollow();

			stream_ident.Add(ident226.Tree);
			DebugLocation(384, 10);
			string_literal227=(IToken)Match(input,104,Follow._104_in_for_range2526);  
			stream_104.Add(string_literal227);

			DebugLocation(384, 16);
			PushFollow(Follow._expr_in_for_range2530);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(384, 22);
			// SugarCpp.g:384:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt98=3;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			switch (input.LA(1))
			{
			case 146:
				{
				alt98 = 1;
				}
				break;
			case 130:
				{
				alt98 = 2;
				}
				break;
			case NEWLINE:
			case 90:
			case 134:
			case 135:
			case 149:
			case 151:
			case 154:
				{
				alt98 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(384, 23);
				string_literal228=(IToken)Match(input,146,Follow._146_in_for_range2533);  
				stream_146.Add(string_literal228);

				DebugLocation(384, 29);
				PushFollow(Follow._expr_in_for_range2537);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(384, 35);
				// SugarCpp.g:384:35: ( 'by' c= expr )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==125))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:384:36: 'by' c= expr
					{
					DebugLocation(384, 36);
					string_literal229=(IToken)Match(input,125,Follow._125_in_for_range2540);  
					stream_125.Add(string_literal229);

					DebugLocation(384, 42);
					PushFollow(Follow._expr_in_for_range2544);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(96); }



				{
				// AST REWRITE
				// elements: b, a, ident, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 384:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(384, 53);
					// SugarCpp.g:384:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(384, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(384, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(384, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(384, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(384, 80);
					// SugarCpp.g:384:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(384, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:385:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(385, 8);
				string_literal230=(IToken)Match(input,130,Follow._130_in_for_range2573);  
				stream_130.Add(string_literal230);

				DebugLocation(385, 18);
				PushFollow(Follow._expr_in_for_range2577);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(385, 24);
				// SugarCpp.g:385:24: ( 'by' c= expr )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==125))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:385:25: 'by' c= expr
					{
					DebugLocation(385, 25);
					string_literal231=(IToken)Match(input,125,Follow._125_in_for_range2580);  
					stream_125.Add(string_literal231);

					DebugLocation(385, 31);
					PushFollow(Follow._expr_in_for_range2584);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(97); }



				{
				// AST REWRITE
				// elements: b, ident, c, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 385:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(385, 42);
					// SugarCpp.g:385:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(385, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(385, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(385, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(385, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(385, 74);
					// SugarCpp.g:385:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(385, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:386:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 386:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(386, 12);
					// SugarCpp.g:386:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(386, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(386, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(386, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 34);
			LeaveRule("for_range", 34);
			LeaveRule_for_range();
		}
		DebugLocation(388, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:390:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 35);
		TraceIn("for_when", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(390, 1);
		try
		{
			// SugarCpp.g:391:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:391:4: expr
			{
			DebugLocation(391, 4);
			PushFollow(Follow._expr_in_for_when2642);
			expr232=expr();
			PopFollow();

			stream_expr.Add(expr232.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 391:9: -> ^( For_Item_When expr )
			{
				DebugLocation(391, 12);
				// SugarCpp.g:391:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(391, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(391, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 35);
			LeaveRule("for_when", 35);
			LeaveRule_for_when();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:394:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 36);
		TraceIn("for_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(394, 1);
		try
		{
			// SugarCpp.g:395:2: ( for_range | for_when )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			try
			{
				alt99 = dfa99.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:395:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._for_range_in_for_item2661);
				for_range233=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range233.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:396:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._for_when_in_for_item2666);
				for_when234=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when234.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 36);
			LeaveRule("for_item", 36);
			LeaveRule_for_item();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:399:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 37);
		TraceIn("stmt_for", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal235 = default(IToken);
		IToken char_literal237 = default(IToken);
		IToken NEWLINE239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree char_literal237_tree = default(CommonTree);
		CommonTree NEWLINE239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(399, 1);
		try
		{
			// SugarCpp.g:400:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:400:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(400, 4);
			string_literal235=(IToken)Match(input,134,Follow._134_in_stmt_for2677);  
			stream_134.Add(string_literal235);

			DebugLocation(400, 10);
			// SugarCpp.g:400:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:400:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(400, 12);
			PushFollow(Follow._for_item_in_stmt_for2681);
			for_item236=for_item();
			PopFollow();

			stream_for_item.Add(for_item236.Tree);
			DebugLocation(400, 21);
			// SugarCpp.g:400:21: ( ',' for_item )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==90))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:400:22: ',' for_item
					{
					DebugLocation(400, 22);
					char_literal237=(IToken)Match(input,90,Follow._90_in_stmt_for2684);  
					stream_90.Add(char_literal237);

					DebugLocation(400, 26);
					PushFollow(Follow._for_item_in_stmt_for2686);
					for_item238=for_item();
					PopFollow();

					stream_for_item.Add(for_item238.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }

			DebugLocation(400, 37);
			// SugarCpp.g:400:37: ( NEWLINE )+
			int cnt101=0;
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==NEWLINE))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:400:37: NEWLINE
					{
					DebugLocation(400, 37);
					NEWLINE239=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2690);  
					stream_NEWLINE.Add(NEWLINE239);


					}
					break;

				default:
					if (cnt101 >= 1)
						goto loop101;

					EarlyExitException eee101 = new EarlyExitException( 101, input );
					DebugRecognitionException(eee101);
					throw eee101;
				}
				cnt101++;
			}
			loop101:
				;

			} finally { DebugExitSubRule(101); }

			DebugLocation(400, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2693);
			stmt_block240=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block240.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 400:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(400, 60);
				// SugarCpp.g:400:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(400, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(400, 71);
				// SugarCpp.g:400:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(400, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(400, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 37);
			LeaveRule("stmt_for", 37);
			LeaveRule_stmt_for();
		}
		DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:405:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 38);
		TraceIn("stmt_try", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		IToken NEWLINE242 = default(IToken);
		IToken NEWLINE244 = default(IToken);
		IToken string_literal245 = default(IToken);
		IToken NEWLINE247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block248 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree NEWLINE242_tree = default(CommonTree);
		CommonTree NEWLINE244_tree = default(CommonTree);
		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree NEWLINE247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(405, 1);
		try
		{
			// SugarCpp.g:406:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:406:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(406, 4);
			string_literal241=(IToken)Match(input,147,Follow._147_in_stmt_try2724);  
			stream_147.Add(string_literal241);

			DebugLocation(406, 10);
			// SugarCpp.g:406:10: ( NEWLINE )+
			int cnt102=0;
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==NEWLINE))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:10: NEWLINE
					{
					DebugLocation(406, 10);
					NEWLINE242=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2726);  
					stream_NEWLINE.Add(NEWLINE242);


					}
					break;

				default:
					if (cnt102 >= 1)
						goto loop102;

					EarlyExitException eee102 = new EarlyExitException( 102, input );
					DebugRecognitionException(eee102);
					throw eee102;
				}
				cnt102++;
			}
			loop102:
				;

			} finally { DebugExitSubRule(102); }

			DebugLocation(406, 19);
			PushFollow(Follow._stmt_block_in_stmt_try2729);
			stmt_block243=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block243.Tree);
			DebugLocation(406, 30);
			// SugarCpp.g:406:30: ( NEWLINE )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==NEWLINE))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:30: NEWLINE
					{
					DebugLocation(406, 30);
					NEWLINE244=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2731);  
					stream_NEWLINE.Add(NEWLINE244);


					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }

			DebugLocation(406, 39);
			string_literal245=(IToken)Match(input,126,Follow._126_in_stmt_try2734);  
			stream_126.Add(string_literal245);

			DebugLocation(406, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try2736);
			stmt_alloc246=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc246.Tree);
			DebugLocation(406, 58);
			// SugarCpp.g:406:58: ( NEWLINE )+
			int cnt104=0;
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==NEWLINE))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:58: NEWLINE
					{
					DebugLocation(406, 58);
					NEWLINE247=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2738);  
					stream_NEWLINE.Add(NEWLINE247);


					}
					break;

				default:
					if (cnt104 >= 1)
						goto loop104;

					EarlyExitException eee104 = new EarlyExitException( 104, input );
					DebugRecognitionException(eee104);
					throw eee104;
				}
				cnt104++;
			}
			loop104:
				;

			} finally { DebugExitSubRule(104); }

			DebugLocation(406, 67);
			PushFollow(Follow._stmt_block_in_stmt_try2741);
			stmt_block248=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block248.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 406:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(406, 81);
				// SugarCpp.g:406:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(406, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(406, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(406, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(406, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 38);
			LeaveRule("stmt_try", 38);
			LeaveRule_stmt_try();
		}
		DebugLocation(407, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:409:1: switch_item : 'when' expr ( ',' expr )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 39);
		TraceIn("switch_item", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal249 = default(IToken);
		IToken char_literal251 = default(IToken);
		IToken NEWLINE253 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal249_tree = default(CommonTree);
		CommonTree char_literal251_tree = default(CommonTree);
		CommonTree NEWLINE253_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( 'when' expr ( ',' expr )* ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: 'when' expr ( ',' expr )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(410, 4);
			string_literal249=(IToken)Match(input,153,Follow._153_in_switch_item2764);  
			stream_153.Add(string_literal249);

			DebugLocation(410, 11);
			PushFollow(Follow._expr_in_switch_item2766);
			expr250=expr();
			PopFollow();

			stream_expr.Add(expr250.Tree);
			DebugLocation(410, 16);
			// SugarCpp.g:410:16: ( ',' expr )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==90))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:17: ',' expr
					{
					DebugLocation(410, 17);
					char_literal251=(IToken)Match(input,90,Follow._90_in_switch_item2769);  
					stream_90.Add(char_literal251);

					DebugLocation(410, 21);
					PushFollow(Follow._expr_in_switch_item2771);
					expr252=expr();
					PopFollow();

					stream_expr.Add(expr252.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }

			DebugLocation(410, 28);
			// SugarCpp.g:410:28: ( NEWLINE )+
			int cnt106=0;
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==NEWLINE))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:28: NEWLINE
					{
					DebugLocation(410, 28);
					NEWLINE253=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item2775);  
					stream_NEWLINE.Add(NEWLINE253);


					}
					break;

				default:
					if (cnt106 >= 1)
						goto loop106;

					EarlyExitException eee106 = new EarlyExitException( 106, input );
					DebugRecognitionException(eee106);
					throw eee106;
				}
				cnt106++;
			}
			loop106:
				;

			} finally { DebugExitSubRule(106); }

			DebugLocation(410, 37);
			PushFollow(Follow._stmt_block_in_switch_item2778);
			stmt_block254=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block254.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 410:48: -> ^( Switch_Item ( expr )+ stmt_block )
			{
				DebugLocation(410, 51);
				// SugarCpp.g:410:51: ^( Switch_Item ( expr )+ stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(410, 53);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

				DebugLocation(410, 65);
				if (!(stream_expr.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expr.HasNext )
				{
					DebugLocation(410, 65);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(410, 71);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 39);
			LeaveRule("switch_item", 39);
			LeaveRule_switch_item();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:413:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( ( NEWLINE )* switch_item )* ( NEWLINE )* DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 40);
		TraceIn("stmt_switch", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal255 = default(IToken);
		IToken NEWLINE257 = default(IToken);
		IToken INDENT258 = default(IToken);
		IToken NEWLINE259 = default(IToken);
		IToken NEWLINE261 = default(IToken);
		IToken DEDENT262 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal255_tree = default(CommonTree);
		CommonTree NEWLINE257_tree = default(CommonTree);
		CommonTree INDENT258_tree = default(CommonTree);
		CommonTree NEWLINE259_tree = default(CommonTree);
		CommonTree NEWLINE261_tree = default(CommonTree);
		CommonTree DEDENT262_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(413, 1);
		try
		{
			// SugarCpp.g:414:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( ( NEWLINE )* switch_item )* ( NEWLINE )* DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:414:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( ( NEWLINE )* switch_item )* ( NEWLINE )* DEDENT
			{
			DebugLocation(414, 4);
			string_literal255=(IToken)Match(input,144,Follow._144_in_stmt_switch2800);  
			stream_144.Add(string_literal255);

			DebugLocation(414, 13);
			// SugarCpp.g:414:13: ( expr )?
			int alt107=2;
			try { DebugEnterSubRule(107);
			try { DebugEnterDecision(107, false);
			int LA107_0 = input.LA(1);

			if ((LA107_0==IDENT||LA107_0==NUMBER||LA107_0==STRING||LA107_0==76||LA107_0==81||LA107_0==83||LA107_0==85||(LA107_0>=87 && LA107_0<=88)||(LA107_0>=91 && LA107_0<=92)||(LA107_0>=117 && LA107_0<=118)||LA107_0==141||LA107_0==158))
			{
				alt107 = 1;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:13: expr
				{
				DebugLocation(414, 13);
				PushFollow(Follow._expr_in_stmt_switch2802);
				expr256=expr();
				PopFollow();

				stream_expr.Add(expr256.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(107); }

			DebugLocation(414, 19);
			// SugarCpp.g:414:19: ( NEWLINE )+
			int cnt108=0;
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==NEWLINE))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:19: NEWLINE
					{
					DebugLocation(414, 19);
					NEWLINE257=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2805);  
					stream_NEWLINE.Add(NEWLINE257);


					}
					break;

				default:
					if (cnt108 >= 1)
						goto loop108;

					EarlyExitException eee108 = new EarlyExitException( 108, input );
					DebugRecognitionException(eee108);
					throw eee108;
				}
				cnt108++;
			}
			loop108:
				;

			} finally { DebugExitSubRule(108); }

			DebugLocation(414, 28);
			INDENT258=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch2808);  
			stream_INDENT.Add(INDENT258);

			DebugLocation(414, 35);
			// SugarCpp.g:414:35: ( ( NEWLINE )* switch_item )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				try
				{
					alt110 = dfa110.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:36: ( NEWLINE )* switch_item
					{
					DebugLocation(414, 36);
					// SugarCpp.g:414:36: ( NEWLINE )*
					try { DebugEnterSubRule(109);
					while (true)
					{
						int alt109=2;
						try { DebugEnterDecision(109, false);
						int LA109_0 = input.LA(1);

						if ((LA109_0==NEWLINE))
						{
							alt109 = 1;
						}


						} finally { DebugExitDecision(109); }
						switch ( alt109 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:414:36: NEWLINE
							{
							DebugLocation(414, 36);
							NEWLINE259=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2811);  
							stream_NEWLINE.Add(NEWLINE259);


							}
							break;

						default:
							goto loop109;
						}
					}

					loop109:
						;

					} finally { DebugExitSubRule(109); }

					DebugLocation(414, 45);
					PushFollow(Follow._switch_item_in_stmt_switch2814);
					switch_item260=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item260.Tree);

					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }

			DebugLocation(414, 59);
			// SugarCpp.g:414:59: ( NEWLINE )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==NEWLINE))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:59: NEWLINE
					{
					DebugLocation(414, 59);
					NEWLINE261=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2818);  
					stream_NEWLINE.Add(NEWLINE261);


					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }

			DebugLocation(414, 68);
			DEDENT262=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch2821);  
			stream_DEDENT.Add(DEDENT262);



			{
			// AST REWRITE
			// elements: expr, switch_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 414:75: -> ^( Stmt_Switch ( expr )? ( switch_item )* )
			{
				DebugLocation(414, 78);
				// SugarCpp.g:414:78: ^( Stmt_Switch ( expr )? ( switch_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(414, 80);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(414, 92);
				// SugarCpp.g:414:92: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(414, 92);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(414, 98);
				// SugarCpp.g:414:98: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(414, 98);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 40);
			LeaveRule("stmt_switch", 40);
			LeaveRule_stmt_switch();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:417:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 41);
		TraceIn("ident_list", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal264 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident265 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal264_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(417, 1);
		try
		{
			// SugarCpp.g:418:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: ident ( ',' ident )*
			{
			DebugLocation(418, 4);
			PushFollow(Follow._ident_in_ident_list2844);
			ident263=ident();
			PopFollow();

			stream_ident.Add(ident263.Tree);
			DebugLocation(418, 10);
			// SugarCpp.g:418:10: ( ',' ident )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==90))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:418:11: ',' ident
					{
					DebugLocation(418, 11);
					char_literal264=(IToken)Match(input,90,Follow._90_in_ident_list2847);  
					stream_90.Add(char_literal264);

					DebugLocation(418, 15);
					PushFollow(Follow._ident_in_ident_list2849);
					ident265=ident();
					PopFollow();

					stream_ident.Add(ident265.Tree);

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(418, 26);
				// SugarCpp.g:418:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(418, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(418, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(418, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 41);
			LeaveRule("ident_list", 41);
			LeaveRule_ident_list();
		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:421:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 42);
		TraceIn("stmt_alloc", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal267 = default(IToken);
		IToken char_literal269 = default(IToken);
		IToken string_literal270 = default(IToken);
		IToken char_literal272 = default(IToken);
		IToken char_literal274 = default(IToken);
		IToken string_literal275 = default(IToken);
		IToken char_literal277 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr278 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree char_literal269_tree = default(CommonTree);
		CommonTree string_literal270_tree = default(CommonTree);
		CommonTree char_literal272_tree = default(CommonTree);
		CommonTree char_literal274_tree = default(CommonTree);
		CommonTree string_literal275_tree = default(CommonTree);
		CommonTree char_literal277_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(421, 1);
		try
		{
			// SugarCpp.g:422:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:422:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			{
			DebugLocation(422, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2871);
			ident_list266=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list266.Tree);
			DebugLocation(422, 15);
			// SugarCpp.g:422:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			int alt117=2;
			try { DebugEnterSubRule(117);
			try { DebugEnterDecision(117, false);
			int LA117_0 = input.LA(1);

			if ((LA117_0==100))
			{
				alt117 = 1;
			}
			else if ((LA117_0==102))
			{
				alt117 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:422:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(422, 17);
				char_literal267=(IToken)Match(input,100,Follow._100_in_stmt_alloc2875);  
				stream_100.Add(char_literal267);

				DebugLocation(422, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2877);
				type_name268=type_name();
				PopFollow();

				stream_type_name.Add(type_name268.Tree);
				DebugLocation(422, 31);
				// SugarCpp.g:422:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt115=3;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				switch (input.LA(1))
				{
				case 102:
				case 108:
					{
					alt115 = 1;
					}
					break;
				case 83:
					{
					alt115 = 2;
					}
					break;
				case NEWLINE:
				case 134:
				case 135:
				case 149:
				case 151:
				case 154:
					{
					alt115 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:422:33: ( '=' | ':=' ) expr
					{
					DebugLocation(422, 33);
					// SugarCpp.g:422:33: ( '=' | ':=' )
					int alt113=2;
					try { DebugEnterSubRule(113);
					try { DebugEnterDecision(113, false);
					int LA113_0 = input.LA(1);

					if ((LA113_0==108))
					{
						alt113 = 1;
					}
					else if ((LA113_0==102))
					{
						alt113 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 113, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:422:34: '='
						{
						DebugLocation(422, 34);
						char_literal269=(IToken)Match(input,108,Follow._108_in_stmt_alloc2882);  
						stream_108.Add(char_literal269);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:422:40: ':='
						{
						DebugLocation(422, 40);
						string_literal270=(IToken)Match(input,102,Follow._102_in_stmt_alloc2886);  
						stream_102.Add(string_literal270);


						}
						break;

					}
					} finally { DebugExitSubRule(113); }

					DebugLocation(422, 46);
					PushFollow(Follow._expr_in_stmt_alloc2889);
					expr271=expr();
					PopFollow();

					stream_expr.Add(expr271.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 422:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(422, 55);
						// SugarCpp.g:422:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(422, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(422, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(422, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(422, 95);
						// SugarCpp.g:422:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(422, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:423:33: '(' ( expr_list )? ')'
					{
					DebugLocation(423, 33);
					char_literal272=(IToken)Match(input,83,Follow._83_in_stmt_alloc2937);  
					stream_83.Add(char_literal272);

					DebugLocation(423, 37);
					// SugarCpp.g:423:37: ( expr_list )?
					int alt114=2;
					try { DebugEnterSubRule(114);
					try { DebugEnterDecision(114, false);
					int LA114_0 = input.LA(1);

					if ((LA114_0==IDENT||LA114_0==NUMBER||LA114_0==STRING||LA114_0==76||LA114_0==81||LA114_0==83||LA114_0==85||(LA114_0>=87 && LA114_0<=88)||(LA114_0>=91 && LA114_0<=92)||(LA114_0>=117 && LA114_0<=118)||LA114_0==141||LA114_0==158))
					{
						alt114 = 1;
					}
					} finally { DebugExitDecision(114); }
					switch (alt114)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:423:37: expr_list
						{
						DebugLocation(423, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2939);
						expr_list273=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list273.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(114); }

					DebugLocation(423, 48);
					char_literal274=(IToken)Match(input,84,Follow._84_in_stmt_alloc2942);  
					stream_84.Add(char_literal274);



					{
					// AST REWRITE
					// elements: expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 423:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(423, 56);
						// SugarCpp.g:423:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(423, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(423, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(423, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(423, 98);
						// SugarCpp.g:423:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(423, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:424:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 424:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(424, 18);
						// SugarCpp.g:424:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(424, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(424, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(424, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(115); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:426:8: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(426, 8);
				string_literal275=(IToken)Match(input,102,Follow._102_in_stmt_alloc3003);  
				stream_102.Add(string_literal275);

				DebugLocation(426, 14);
				// SugarCpp.g:426:14: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:426:15: expr ( ',' expr )*
				{
				DebugLocation(426, 15);
				PushFollow(Follow._expr_in_stmt_alloc3007);
				expr276=expr();
				PopFollow();

				stream_expr.Add(expr276.Tree);
				DebugLocation(426, 20);
				// SugarCpp.g:426:20: ( ',' expr )*
				try { DebugEnterSubRule(116);
				while (true)
				{
					int alt116=2;
					try { DebugEnterDecision(116, false);
					int LA116_0 = input.LA(1);

					if ((LA116_0==90))
					{
						alt116 = 1;
					}


					} finally { DebugExitDecision(116); }
					switch ( alt116 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:426:21: ',' expr
						{
						DebugLocation(426, 21);
						char_literal277=(IToken)Match(input,90,Follow._90_in_stmt_alloc3010);  
						stream_90.Add(char_literal277);

						DebugLocation(426, 25);
						PushFollow(Follow._expr_in_stmt_alloc3012);
						expr278=expr();
						PopFollow();

						stream_expr.Add(expr278.Tree);

						}
						break;

					default:
						goto loop116;
					}
				}

				loop116:
					;

				} finally { DebugExitSubRule(116); }


				}



				{
				// AST REWRITE
				// elements: 102, ident_list, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 426:33: -> ^( ':=' ident_list ( expr )* )
				{
					DebugLocation(426, 36);
					// SugarCpp.g:426:36: ^( ':=' ident_list ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(426, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_102.NextNode(), root_1);

					DebugLocation(426, 43);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(426, 54);
					// SugarCpp.g:426:54: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(426, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 42);
			LeaveRule("stmt_alloc", 42);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:429:1: stmt_modify : lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 43);
		TraceIn("stmt_modify", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal282 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal282_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(429, 1);
		try
		{
			// SugarCpp.g:430:2: ( lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:430:4: lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(430, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3038);
			lvalue279=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue279.Tree);
			DebugLocation(430, 11);
			// SugarCpp.g:430:11: ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			int alt118=3;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==79||LA118_0==82||LA118_0==86||LA118_0==89||LA118_0==93||LA118_0==99||LA118_0==106||LA118_0==108||LA118_0==114||LA118_0==121||LA118_0==156))
			{
				alt118 = 1;
			}
			else if ((LA118_0==116))
			{
				alt118 = 2;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:430:13: modify_expr_op ^ expr
				{
				DebugLocation(430, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3042);
				modify_expr_op280=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op280.Tree, root_0);
				DebugLocation(430, 29);
				PushFollow(Follow._expr_in_stmt_modify3045);
				expr281=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr281.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:431:13: '?=' ^ modify_expr
				{
				DebugLocation(431, 17);
				string_literal282=(IToken)Match(input,116,Follow._116_in_stmt_modify3059); 
				string_literal282_tree = (CommonTree)adaptor.Create(string_literal282);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal282_tree, root_0);
				DebugLocation(431, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify3062);
				modify_expr283=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr283.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 43);
			LeaveRule("stmt_modify", 43);
			LeaveRule_stmt_modify();
		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:434:1: expr : list_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 44);
		TraceIn("expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(434, 1);
		try
		{
			// SugarCpp.g:435:2: ( list_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:435:4: list_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(435, 4);
			PushFollow(Follow._list_expr_in_expr3075);
			list_expr284=list_expr();
			PopFollow();

			adaptor.AddChild(root_0, list_expr284.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 44);
			LeaveRule("expr", 44);
			LeaveRule_expr();
		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:438:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 45);
		TraceIn("list_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal285 = default(IToken);
		IToken char_literal286 = default(IToken);
		IToken NEWLINE287 = default(IToken);
		IToken INDENT288 = default(IToken);
		IToken DEDENT289 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken NEWLINE292 = default(IToken);
		IToken INDENT293 = default(IToken);
		IToken DEDENT294 = default(IToken);
		IToken char_literal296 = default(IToken);
		IToken NEWLINE297 = default(IToken);
		IToken INDENT298 = default(IToken);
		IToken DEDENT299 = default(IToken);
		IToken char_literal300 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr290 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr301 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal285_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		CommonTree NEWLINE287_tree = default(CommonTree);
		CommonTree INDENT288_tree = default(CommonTree);
		CommonTree DEDENT289_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree NEWLINE292_tree = default(CommonTree);
		CommonTree INDENT293_tree = default(CommonTree);
		CommonTree DEDENT294_tree = default(CommonTree);
		CommonTree char_literal296_tree = default(CommonTree);
		CommonTree NEWLINE297_tree = default(CommonTree);
		CommonTree INDENT298_tree = default(CommonTree);
		CommonTree DEDENT299_tree = default(CommonTree);
		CommonTree char_literal300_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt124=2;
			try { DebugEnterDecision(124, false);
			int LA124_0 = input.LA(1);

			if ((LA124_0==118))
			{
				alt124 = 1;
			}
			else if ((LA124_0==IDENT||LA124_0==NUMBER||LA124_0==STRING||LA124_0==76||LA124_0==81||LA124_0==83||LA124_0==85||(LA124_0>=87 && LA124_0<=88)||(LA124_0>=91 && LA124_0<=92)||LA124_0==117||LA124_0==141||LA124_0==158))
			{
				alt124 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(124); }
			switch (alt124)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:439:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(439, 4);
				char_literal285=(IToken)Match(input,118,Follow._118_in_list_expr3086);  
				stream_118.Add(char_literal285);

				DebugLocation(439, 8);
				// SugarCpp.g:439:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				try
				{
					alt122 = dfa122.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(439, 9);
					// SugarCpp.g:439:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(119);
					while (true)
					{
						int alt119=5;
						try { DebugEnterDecision(119, false);
						switch (input.LA(1))
						{
						case 90:
							{
							alt119 = 1;
							}
							break;
						case NEWLINE:
							{
							alt119 = 2;
							}
							break;
						case INDENT:
							{
							alt119 = 3;
							}
							break;
						case DEDENT:
							{
							alt119 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(119); }
						switch ( alt119 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:439:10: ','
							{
							DebugLocation(439, 10);
							char_literal286=(IToken)Match(input,90,Follow._90_in_list_expr3090);  
							stream_90.Add(char_literal286);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:439:16: NEWLINE
							{
							DebugLocation(439, 16);
							NEWLINE287=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3094);  
							stream_NEWLINE.Add(NEWLINE287);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:439:26: INDENT
							{
							DebugLocation(439, 26);
							INDENT288=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3098);  
							stream_INDENT.Add(INDENT288);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:439:35: DEDENT
							{
							DebugLocation(439, 35);
							DEDENT289=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3102);  
							stream_DEDENT.Add(DEDENT289);


							}
							break;

						default:
							goto loop119;
						}
					}

					loop119:
						;

					} finally { DebugExitSubRule(119); }

					DebugLocation(439, 44);
					PushFollow(Follow._list_expr_in_list_expr3106);
					list_expr290=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr290.Tree);
					DebugLocation(439, 54);
					// SugarCpp.g:439:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(121);
					while (true)
					{
						int alt121=2;
						try { DebugEnterDecision(121, false);
						try
						{
							alt121 = dfa121.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(121); }
						switch ( alt121 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:439:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(439, 55);
							// SugarCpp.g:439:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt120=0;
							try { DebugEnterSubRule(120);
							while (true)
							{
								int alt120=5;
								try { DebugEnterDecision(120, false);
								switch (input.LA(1))
								{
								case 90:
									{
									alt120 = 1;
									}
									break;
								case NEWLINE:
									{
									alt120 = 2;
									}
									break;
								case INDENT:
									{
									alt120 = 3;
									}
									break;
								case DEDENT:
									{
									alt120 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(120); }
								switch (alt120)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:439:56: ','
									{
									DebugLocation(439, 56);
									char_literal291=(IToken)Match(input,90,Follow._90_in_list_expr3110);  
									stream_90.Add(char_literal291);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:439:62: NEWLINE
									{
									DebugLocation(439, 62);
									NEWLINE292=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3114);  
									stream_NEWLINE.Add(NEWLINE292);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:439:72: INDENT
									{
									DebugLocation(439, 72);
									INDENT293=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3118);  
									stream_INDENT.Add(INDENT293);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:439:81: DEDENT
									{
									DebugLocation(439, 81);
									DEDENT294=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3122);  
									stream_DEDENT.Add(DEDENT294);


									}
									break;

								default:
									if (cnt120 >= 1)
										goto loop120;

									EarlyExitException eee120 = new EarlyExitException( 120, input );
									DebugRecognitionException(eee120);
									throw eee120;
								}
								cnt120++;
							}
							loop120:
								;

							} finally { DebugExitSubRule(120); }

							DebugLocation(439, 90);
							PushFollow(Follow._list_expr_in_list_expr3126);
							list_expr295=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr295.Tree);

							}
							break;

						default:
							goto loop121;
						}
					}

					loop121:
						;

					} finally { DebugExitSubRule(121); }


					}
					break;

				}
				} finally { DebugExitSubRule(122); }

				DebugLocation(439, 104);
				// SugarCpp.g:439:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(123);
				while (true)
				{
					int alt123=5;
					try { DebugEnterDecision(123, false);
					switch (input.LA(1))
					{
					case 90:
						{
						alt123 = 1;
						}
						break;
					case NEWLINE:
						{
						alt123 = 2;
						}
						break;
					case INDENT:
						{
						alt123 = 3;
						}
						break;
					case DEDENT:
						{
						alt123 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(123); }
					switch ( alt123 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:439:105: ','
						{
						DebugLocation(439, 105);
						char_literal296=(IToken)Match(input,90,Follow._90_in_list_expr3133);  
						stream_90.Add(char_literal296);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:439:111: NEWLINE
						{
						DebugLocation(439, 111);
						NEWLINE297=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3137);  
						stream_NEWLINE.Add(NEWLINE297);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:439:121: INDENT
						{
						DebugLocation(439, 121);
						INDENT298=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3141);  
						stream_INDENT.Add(INDENT298);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:439:130: DEDENT
						{
						DebugLocation(439, 130);
						DEDENT299=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3145);  
						stream_DEDENT.Add(DEDENT299);


						}
						break;

					default:
						goto loop123;
					}
				}

				loop123:
					;

				} finally { DebugExitSubRule(123); }

				DebugLocation(439, 139);
				char_literal300=(IToken)Match(input,119,Follow._119_in_list_expr3149);  
				stream_119.Add(char_literal300);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 439:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(439, 146);
					// SugarCpp.g:439:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(439, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(439, 158);
					// SugarCpp.g:439:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(439, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:440:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(440, 4);
				PushFollow(Follow._lambda_expr_in_list_expr3163);
				lambda_expr301=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr301.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 45);
			LeaveRule("list_expr", 45);
			LeaveRule_list_expr();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:443:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 46);
		TraceIn("lambda_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal302 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken string_literal305 = default(IToken);
		IToken string_literal307 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr306 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr309 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal302_tree = default(CommonTree);
		CommonTree char_literal304_tree = default(CommonTree);
		CommonTree string_literal305_tree = default(CommonTree);
		CommonTree string_literal307_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(443, 1);
		try
		{
			// SugarCpp.g:444:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt127=2;
			try { DebugEnterDecision(127, false);
			try
			{
				alt127 = dfa127.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:444:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(444, 4);
				char_literal302=(IToken)Match(input,83,Follow._83_in_lambda_expr3174);  
				stream_83.Add(char_literal302);

				DebugLocation(444, 8);
				// SugarCpp.g:444:8: ( func_args )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==IDENT||LA125_0==102))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:8: func_args
					{
					DebugLocation(444, 8);
					PushFollow(Follow._func_args_in_lambda_expr3176);
					func_args303=func_args();
					PopFollow();

					stream_func_args.Add(func_args303.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(444, 19);
				char_literal304=(IToken)Match(input,84,Follow._84_in_lambda_expr3179);  
				stream_84.Add(char_literal304);

				DebugLocation(444, 23);
				// SugarCpp.g:444:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==94))
				{
					alt126 = 1;
				}
				else if ((LA126_0==110))
				{
					alt126 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:25: '->' expr
					{
					DebugLocation(444, 25);
					string_literal305=(IToken)Match(input,94,Follow._94_in_lambda_expr3183);  
					stream_94.Add(string_literal305);

					DebugLocation(444, 30);
					PushFollow(Follow._expr_in_lambda_expr3185);
					expr306=expr();
					PopFollow();

					stream_expr.Add(expr306.Tree);


					{
					// AST REWRITE
					// elements: expr, func_args, 94
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(444, 39);
						// SugarCpp.g:444:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(444, 53);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(444, 58);
						// SugarCpp.g:444:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(444, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(444, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:445:25: '=>' expr
					{
					DebugLocation(445, 25);
					string_literal307=(IToken)Match(input,110,Follow._110_in_lambda_expr3225);  
					stream_110.Add(string_literal307);

					DebugLocation(445, 30);
					PushFollow(Follow._expr_in_lambda_expr3227);
					expr308=expr();
					PopFollow();

					stream_expr.Add(expr308.Tree);


					{
					// AST REWRITE
					// elements: expr, 110, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(445, 39);
						// SugarCpp.g:445:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(445, 53);
						adaptor.AddChild(root_1, stream_110.NextNode());
						DebugLocation(445, 58);
						// SugarCpp.g:445:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(445, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(445, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(126); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:446:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(446, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr3247);
				modify_expr309=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr309.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 46);
			LeaveRule("lambda_expr", 46);
			LeaveRule_lambda_expr();
		}
		DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:449:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 47);
		TraceIn("modify_expr_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set310 = default(IToken);

		CommonTree set310_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(449, 91);
		try
		{
			// SugarCpp.g:449:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(449, 15);

			set310=(IToken)input.LT(1);
			if (input.LA(1)==79||input.LA(1)==82||input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==99||input.LA(1)==106||input.LA(1)==108||input.LA(1)==114||input.LA(1)==121||input.LA(1)==156)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set310));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 47);
			LeaveRule("modify_expr_op", 47);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(449, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:450:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 48);
		TraceIn("modify_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set312 = default(IToken);
		IToken char_literal314 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set312_tree = default(CommonTree);
		CommonTree char_literal314_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(450, 1);
		try
		{
			// SugarCpp.g:451:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:451:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(451, 4);
			PushFollow(Follow._cond_expr_in_modify_expr3304);
			cond_expr311=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr311.Tree);
			DebugLocation(451, 14);
			// SugarCpp.g:451:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt129=3;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==79||LA129_0==82||LA129_0==86||LA129_0==89||LA129_0==93||LA129_0==99||LA129_0==102||LA129_0==106||LA129_0==114||LA129_0==121||LA129_0==156))
			{
				alt129 = 1;
			}
			else if ((LA129_0==108))
			{
				alt129 = 2;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:451:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(451, 94);

				set312=(IToken)input.LT(1);
				set312=(IToken)input.LT(1);
				if (input.LA(1)==79||input.LA(1)==82||input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==99||input.LA(1)==102||input.LA(1)==106||input.LA(1)==114||input.LA(1)==121||input.LA(1)==156)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set312), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(451, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3353);
				cond_expr313=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr313.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:452:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(452, 7);
				// SugarCpp.g:452:7: ( '=' ^ cond_expr )+
				int cnt128=0;
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==108))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:452:8: '=' ^ cond_expr
						{
						DebugLocation(452, 11);
						char_literal314=(IToken)Match(input,108,Follow._108_in_modify_expr3362); 
						char_literal314_tree = (CommonTree)adaptor.Create(char_literal314);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal314_tree, root_0);
						DebugLocation(452, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3365);
						cond_expr315=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr315.Tree);

						}
						break;

					default:
						if (cnt128 >= 1)
							goto loop128;

						EarlyExitException eee128 = new EarlyExitException( 128, input );
						DebugRecognitionException(eee128);
						throw eee128;
					}
					cnt128++;
				}
				loop128:
					;

				} finally { DebugExitSubRule(128); }


				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 48);
			LeaveRule("modify_expr", 48);
			LeaveRule_modify_expr();
		}
		DebugLocation(453, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:455:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 49);
		TraceIn("cond_expr_item", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr316 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(455, 24);
		try
		{
			// SugarCpp.g:455:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:455:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(455, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3378);
			or_expr316=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr316.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 49);
			LeaveRule("cond_expr_item", 49);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(455, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:456:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 50);
		TraceIn("cond_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal317 = default(IToken);
		IToken char_literal318 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal317_tree = default(CommonTree);
		CommonTree char_literal318_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(457, 4);
			// SugarCpp.g:457:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:457:5: a= or_expr
			{
			DebugLocation(457, 6);
			PushFollow(Follow._or_expr_in_cond_expr3390);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 457:15: -> $a
			{
				DebugLocation(457, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(457, 22);
			// SugarCpp.g:457:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt132=2;
			try { DebugEnterSubRule(132);
			try { DebugEnterDecision(132, false);
			int LA132_0 = input.LA(1);

			if ((LA132_0==115))
			{
				alt132 = 1;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:457:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(457, 23);
				char_literal317=(IToken)Match(input,115,Follow._115_in_cond_expr3399);  
				stream_115.Add(char_literal317);

				DebugLocation(457, 27);
				// SugarCpp.g:457:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==IDENT||LA131_0==NUMBER||LA131_0==STRING||LA131_0==76||LA131_0==81||LA131_0==83||LA131_0==85||(LA131_0>=87 && LA131_0<=88)||(LA131_0>=91 && LA131_0<=92)||LA131_0==117||LA131_0==141||LA131_0==158))
				{
					alt131 = 1;
				}
				else if ((LA131_0==DEDENT||LA131_0==INDENT||LA131_0==NEWLINE||LA131_0==79||LA131_0==82||LA131_0==84||LA131_0==86||(LA131_0>=89 && LA131_0<=90)||LA131_0==93||LA131_0==99||LA131_0==102||LA131_0==106||LA131_0==108||LA131_0==114||LA131_0==119||LA131_0==121||LA131_0==125||LA131_0==130||(LA131_0>=134 && LA131_0<=135)||(LA131_0>=145 && LA131_0<=146)||LA131_0==149||LA131_0==151||LA131_0==154||LA131_0==156))
				{
					alt131 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:457:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(457, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3405);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(457, 46);
					// SugarCpp.g:457:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt130=2;
					try { DebugEnterSubRule(130);
					try { DebugEnterDecision(130, false);
					int LA130_0 = input.LA(1);

					if ((LA130_0==100))
					{
						alt130 = 1;
					}
					else if ((LA130_0==DEDENT||LA130_0==INDENT||LA130_0==NEWLINE||LA130_0==79||LA130_0==82||LA130_0==84||LA130_0==86||(LA130_0>=89 && LA130_0<=90)||LA130_0==93||LA130_0==99||LA130_0==102||LA130_0==106||LA130_0==108||LA130_0==114||LA130_0==119||LA130_0==121||LA130_0==125||LA130_0==130||(LA130_0>=134 && LA130_0<=135)||(LA130_0>=145 && LA130_0<=146)||LA130_0==149||LA130_0==151||LA130_0==154||LA130_0==156))
					{
						alt130 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 130, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(130); }
					switch (alt130)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:457:48: ':' b= cond_expr_item
						{
						DebugLocation(457, 48);
						char_literal318=(IToken)Match(input,100,Follow._100_in_cond_expr3409);  
						stream_100.Add(char_literal318);

						DebugLocation(457, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3413);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, b, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 457:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(457, 72);
							// SugarCpp.g:457:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(457, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(457, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(457, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(457, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:458:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 458:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(458, 20);
							// SugarCpp.g:458:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(458, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(458, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(458, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(130); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:460:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 460:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(460, 14);
						// SugarCpp.g:460:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(460, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(460, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(131); }


				}
				break;

			}
			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 50);
			LeaveRule("cond_expr", 50);
			LeaveRule_cond_expr();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:464:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 51);
		TraceIn("or_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set319 = default(IToken);

		CommonTree set319_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(464, 19);
		try
		{
			// SugarCpp.g:464:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(464, 6);

			set319=(IToken)input.LT(1);
			if (input.LA(1)==142||input.LA(1)==157)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set319));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 51);
			LeaveRule("or_op", 51);
			LeaveRule_or_op();
		}
		DebugLocation(464, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:465:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 52);
		TraceIn("or_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(465, 1);
		try
		{
			// SugarCpp.g:466:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:466:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(466, 4);
			// SugarCpp.g:466:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:466:5: a= and_expr
			{
			DebugLocation(466, 6);
			PushFollow(Follow._and_expr_in_or_expr3527);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 466:16: -> $a
			{
				DebugLocation(466, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(466, 23);
			// SugarCpp.g:466:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==142||LA133_0==157))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:466:24: op= or_op b= and_expr
					{
					DebugLocation(466, 26);
					PushFollow(Follow._or_op_in_or_expr3538);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(466, 34);
					PushFollow(Follow._and_expr_in_or_expr3542);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op, or_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 466:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(466, 47);
						// SugarCpp.g:466:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(466, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(466, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(466, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(466, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 52);
			LeaveRule("or_expr", 52);
			LeaveRule_or_expr();
		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:469:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 53);
		TraceIn("and_op", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set320 = default(IToken);

		CommonTree set320_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(469, 21);
		try
		{
			// SugarCpp.g:469:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(469, 7);

			set320=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==123)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set320));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 53);
			LeaveRule("and_op", 53);
			LeaveRule_and_op();
		}
		DebugLocation(469, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:470:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 54);
		TraceIn("and_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(470, 1);
		try
		{
			// SugarCpp.g:471:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:471:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(471, 4);
			// SugarCpp.g:471:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:471:5: a= bit_or
			{
			DebugLocation(471, 6);
			PushFollow(Follow._bit_or_in_and_expr3584);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 471:14: -> $a
			{
				DebugLocation(471, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(471, 21);
			// SugarCpp.g:471:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==80||LA134_0==123))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch ( alt134 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:22: op= and_op b= bit_or
					{
					DebugLocation(471, 24);
					PushFollow(Follow._and_op_in_and_expr3595);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(471, 33);
					PushFollow(Follow._bit_or_in_and_expr3599);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 471:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(471, 44);
						// SugarCpp.g:471:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(471, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(471, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(471, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(471, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop134;
				}
			}

			loop134:
				;

			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 54);
			LeaveRule("and_expr", 54);
			LeaveRule_and_expr();
		}
		DebugLocation(472, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:474:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 55);
		TraceIn("bit_or", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal321 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal321_tree = default(CommonTree);
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(474, 1);
		try
		{
			// SugarCpp.g:475:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:475:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(475, 4);
			// SugarCpp.g:475:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:475:5: a= bit_xor
			{
			DebugLocation(475, 6);
			PushFollow(Follow._bit_xor_in_bit_or3630);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 475:15: -> $a
			{
				DebugLocation(475, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(475, 22);
			// SugarCpp.g:475:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==155))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:475:23: '|' b= bit_xor
					{
					DebugLocation(475, 23);
					char_literal321=(IToken)Match(input,155,Follow._155_in_bit_or3639);  
					stream_155.Add(char_literal321);

					DebugLocation(475, 28);
					PushFollow(Follow._bit_xor_in_bit_or3643);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 155, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 475:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(475, 40);
						// SugarCpp.g:475:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(475, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(475, 51);
						adaptor.AddChild(root_1, stream_155.NextNode());
						DebugLocation(475, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(475, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 55);
			LeaveRule("bit_or", 55);
			LeaveRule_bit_or();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:478:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 56);
		TraceIn("bit_xor", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal322 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal322_tree = default(CommonTree);
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(478, 1);
		try
		{
			// SugarCpp.g:479:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:479:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(479, 4);
			// SugarCpp.g:479:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:479:5: a= bit_and
			{
			DebugLocation(479, 6);
			PushFollow(Follow._bit_and_in_bit_xor3673);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 479:15: -> $a
			{
				DebugLocation(479, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(479, 22);
			// SugarCpp.g:479:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==120))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:23: '^' b= bit_and
					{
					DebugLocation(479, 23);
					char_literal322=(IToken)Match(input,120,Follow._120_in_bit_xor3682);  
					stream_120.Add(char_literal322);

					DebugLocation(479, 28);
					PushFollow(Follow._bit_and_in_bit_xor3686);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, 120, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 479:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(479, 40);
						// SugarCpp.g:479:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(479, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(479, 51);
						adaptor.AddChild(root_1, stream_120.NextNode());
						DebugLocation(479, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(479, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 56);
			LeaveRule("bit_xor", 56);
			LeaveRule_bit_xor();
		}
		DebugLocation(480, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:482:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 57);
		TraceIn("bit_and", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(482, 1);
		try
		{
			// SugarCpp.g:483:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:483:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(483, 4);
			// SugarCpp.g:483:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:483:5: a= cmp_expr
			{
			DebugLocation(483, 6);
			PushFollow(Follow._cmp_expr_in_bit_and3716);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 483:16: -> $a
			{
				DebugLocation(483, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(483, 23);
			// SugarCpp.g:483:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==81))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:483:24: '&' b= cmp_expr
					{
					DebugLocation(483, 24);
					char_literal323=(IToken)Match(input,81,Follow._81_in_bit_and3725);  
					stream_81.Add(char_literal323);

					DebugLocation(483, 29);
					PushFollow(Follow._cmp_expr_in_bit_and3729);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 81
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 483:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(483, 42);
						// SugarCpp.g:483:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(483, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(483, 53);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(483, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(483, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 57);
			LeaveRule("bit_and", 57);
			LeaveRule_bit_and();
		}
		DebugLocation(484, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:486:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 58);
		TraceIn("chain_op", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set324 = default(IToken);

		CommonTree set324_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(486, 64);
		try
		{
			// SugarCpp.g:486:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(486, 9);

			set324=(IToken)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==103||input.LA(1)==107||input.LA(1)==109||(input.LA(1)>=111 && input.LA(1)<=112)||(input.LA(1)>=137 && input.LA(1)<=138))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set324));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 58);
			LeaveRule("chain_op", 58);
			LeaveRule_chain_op();
		}
		DebugLocation(486, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:487:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 59);
		TraceIn("no_less_op", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set325 = default(IToken);

		CommonTree set325_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(487, 60);
		try
		{
			// SugarCpp.g:487:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(487, 11);

			set325=(IToken)input.LT(1);
			if (input.LA(1)==77||input.LA(1)==107||input.LA(1)==109||(input.LA(1)>=111 && input.LA(1)<=112)||(input.LA(1)>=137 && input.LA(1)<=138))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set325));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 59);
			LeaveRule("no_less_op", 59);
			LeaveRule_no_less_op();
		}
		DebugLocation(487, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:488:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 60);
		TraceIn("chain_list", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr327 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(488, 35);
		try
		{
			// SugarCpp.g:488:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:488:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(488, 13);
			// SugarCpp.g:488:13: ( chain_op infix_expr )+
			int cnt138=0;
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==77||LA138_0==103||LA138_0==107||LA138_0==109||(LA138_0>=111 && LA138_0<=112)||(LA138_0>=137 && LA138_0<=138)))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch (alt138)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:488:14: chain_op infix_expr
					{
					DebugLocation(488, 14);
					PushFollow(Follow._chain_op_in_chain_list3821);
					chain_op326=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op326.Tree);
					DebugLocation(488, 23);
					PushFollow(Follow._infix_expr_in_chain_list3823);
					infix_expr327=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr327.Tree);

					}
					break;

				default:
					if (cnt138 >= 1)
						goto loop138;

					EarlyExitException eee138 = new EarlyExitException( 138, input );
					DebugRecognitionException(eee138);
					throw eee138;
				}
				cnt138++;
			}
			loop138:
				;

			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 60);
			LeaveRule("chain_list", 60);
			LeaveRule_chain_list();
		}
		DebugLocation(488, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:489:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 61);
		TraceIn("cmp_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken char_literal331 = default(IToken);
		IToken char_literal333 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list335 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		CommonTree char_literal333_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(489, 1);
		try
		{
			// SugarCpp.g:490:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:490:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(490, 4);
			// SugarCpp.g:490:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:490:5: a= infix_expr
			{
			DebugLocation(490, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3837);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 490:18: -> $a
			{
				DebugLocation(490, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(490, 25);
			// SugarCpp.g:490:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt143=3;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_0 = input.LA(1);

			if ((LA143_0==103))
			{
				alt143 = 1;
			}
			else if ((LA143_0==77||LA143_0==107||LA143_0==109||(LA143_0>=111 && LA143_0<=112)||(LA143_0>=137 && LA143_0<=138)))
			{
				alt143 = 2;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:490:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(490, 27);
				char_literal328=(IToken)Match(input,103,Follow._103_in_cmp_expr3847);  
				stream_103.Add(char_literal328);

				DebugLocation(490, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr3851);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(490, 44);
				// SugarCpp.g:490:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt141=3;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt141 = 1;
					}
					break;
				case 111:
					{
					int LA141_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt141 = 1;
					}
					else if ((true))
					{
						alt141 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 141, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 77:
				case 103:
				case 107:
				case 109:
				case 112:
				case 137:
				case 138:
					{
					alt141 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 79:
				case 80:
				case 81:
				case 82:
				case 84:
				case 86:
				case 89:
				case 90:
				case 93:
				case 99:
				case 100:
				case 102:
				case 106:
				case 108:
				case 114:
				case 115:
				case 119:
				case 120:
				case 121:
				case 123:
				case 125:
				case 130:
				case 134:
				case 135:
				case 142:
				case 145:
				case 146:
				case 149:
				case 151:
				case 154:
				case 155:
				case 156:
				case 157:
					{
					alt141 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 141, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:490:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(490, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(490, 76);
					// SugarCpp.g:490:76: ( ident )*
					try { DebugEnterSubRule(139);
					while (true)
					{
						int alt139=2;
						try { DebugEnterDecision(139, false);
						int LA139_0 = input.LA(1);

						if ((LA139_0==IDENT))
						{
							alt139 = 1;
						}


						} finally { DebugExitDecision(139); }
						switch ( alt139 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:490:76: ident
							{
							DebugLocation(490, 76);
							PushFollow(Follow._ident_in_cmp_expr3857);
							ident329=ident();
							PopFollow();

							stream_ident.Add(ident329.Tree);

							}
							break;

						default:
							goto loop139;
						}
					}

					loop139:
						;

					} finally { DebugExitSubRule(139); }

					DebugLocation(490, 83);
					char_literal330=(IToken)Match(input,111,Follow._111_in_cmp_expr3860);  
					stream_111.Add(char_literal330);

					DebugLocation(490, 87);
					char_literal331=(IToken)Match(input,83,Follow._83_in_cmp_expr3862);  
					stream_83.Add(char_literal331);

					DebugLocation(490, 91);
					// SugarCpp.g:490:91: ( expr_list )?
					int alt140=2;
					try { DebugEnterSubRule(140);
					try { DebugEnterDecision(140, false);
					int LA140_0 = input.LA(1);

					if ((LA140_0==IDENT||LA140_0==NUMBER||LA140_0==STRING||LA140_0==76||LA140_0==81||LA140_0==83||LA140_0==85||(LA140_0>=87 && LA140_0<=88)||(LA140_0>=91 && LA140_0<=92)||(LA140_0>=117 && LA140_0<=118)||LA140_0==141||LA140_0==158))
					{
						alt140 = 1;
					}
					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:490:91: expr_list
						{
						DebugLocation(490, 91);
						PushFollow(Follow._expr_list_in_cmp_expr3864);
						expr_list332=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list332.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(140); }

					DebugLocation(490, 102);
					char_literal333=(IToken)Match(input,84,Follow._84_in_cmp_expr3867);  
					stream_84.Add(char_literal333);



					{
					// AST REWRITE
					// elements: cmp_expr, b, expr_list, ident
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(490, 109);
						// SugarCpp.g:490:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(490, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(490, 131);
						// SugarCpp.g:490:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(490, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(490, 155);
						// SugarCpp.g:490:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(490, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(490, 163);
						// SugarCpp.g:490:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(490, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:491:46: chain_list
					{
					DebugLocation(491, 46);
					PushFollow(Follow._chain_list_in_cmp_expr3936);
					chain_list334=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list334.Tree);


					{
					// AST REWRITE
					// elements: b, chain_list, cmp_expr, 103
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 491:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(491, 60);
						// SugarCpp.g:491:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(491, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(491, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(491, 84);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(491, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(491, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:492:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, b, 103
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 492:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(492, 19);
						// SugarCpp.g:492:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(492, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(492, 30);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(492, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(492, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(141); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:493:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(493, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr4013);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(493, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr4017);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(493, 54);
				// SugarCpp.g:493:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==77||LA142_0==103||LA142_0==107||LA142_0==109||(LA142_0>=111 && LA142_0<=112)||(LA142_0>=137 && LA142_0<=138)))
				{
					alt142 = 1;
				}
				else if ((LA142_0==DEDENT||LA142_0==INDENT||LA142_0==NEWLINE||(LA142_0>=79 && LA142_0<=82)||LA142_0==84||LA142_0==86||(LA142_0>=89 && LA142_0<=90)||LA142_0==93||(LA142_0>=99 && LA142_0<=100)||LA142_0==102||LA142_0==106||LA142_0==108||(LA142_0>=114 && LA142_0<=115)||(LA142_0>=119 && LA142_0<=121)||LA142_0==123||LA142_0==125||LA142_0==130||(LA142_0>=134 && LA142_0<=135)||LA142_0==142||(LA142_0>=145 && LA142_0<=146)||LA142_0==149||LA142_0==151||(LA142_0>=154 && LA142_0<=157)))
				{
					alt142 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 142, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:493:56: chain_list
					{
					DebugLocation(493, 56);
					PushFollow(Follow._chain_list_in_cmp_expr4021);
					chain_list335=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list335.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, op, chain_list, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 493:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(493, 70);
						// SugarCpp.g:493:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(493, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(493, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(493, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(493, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(493, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:494:17: 
					{

					{
					// AST REWRITE
					// elements: op, cmp_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 494:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(494, 20);
						// SugarCpp.g:494:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(494, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(494, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(494, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(142); }


				}
				break;

			}
			} finally { DebugExitSubRule(143); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 61);
			LeaveRule("cmp_expr", 61);
			LeaveRule_cmp_expr();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:499:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 62);
		TraceIn("infix_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func336 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(499, 1);
		try
		{
			// SugarCpp.g:500:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:500:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(500, 4);
			// SugarCpp.g:500:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:500:5: a= shift_expr
			{
			DebugLocation(500, 6);
			PushFollow(Follow._shift_expr_in_infix_expr4112);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 500:18: -> $a
			{
				DebugLocation(500, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(500, 25);
			// SugarCpp.g:500:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==122))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:500:27: infix_func b= shift_expr
					{
					DebugLocation(500, 27);
					PushFollow(Follow._infix_func_in_infix_expr4122);
					infix_func336=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func336.Tree);
					DebugLocation(500, 39);
					PushFollow(Follow._shift_expr_in_infix_expr4126);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, b, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 500:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(500, 55);
						// SugarCpp.g:500:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(500, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(500, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(500, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(500, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 62);
			LeaveRule("infix_expr", 62);
			LeaveRule_infix_expr();
		}
		DebugLocation(501, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:503:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 63);
		TraceIn("shift_expr_op", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set337 = default(IToken);

		CommonTree set337_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(503, 27);
		try
		{
			// SugarCpp.g:503:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(503, 14);

			set337=(IToken)input.LT(1);
			if (input.LA(1)==105||input.LA(1)==113)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set337));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 63);
			LeaveRule("shift_expr_op", 63);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(503, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:504:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 64);
		TraceIn("shift_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op338 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:505:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(505, 4);
			// SugarCpp.g:505:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:505:5: a= add_expr
			{
			DebugLocation(505, 6);
			PushFollow(Follow._add_expr_in_shift_expr4169);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 505:16: -> $a
			{
				DebugLocation(505, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(505, 23);
			// SugarCpp.g:505:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==105||LA145_0==113))
				{
					alt145 = 1;
				}


				} finally { DebugExitDecision(145); }
				switch ( alt145 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:505:24: shift_expr_op b= add_expr
					{
					DebugLocation(505, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr4178);
					shift_expr_op338=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op338.Tree);
					DebugLocation(505, 39);
					PushFollow(Follow._add_expr_in_shift_expr4182);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr_op, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 505:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(505, 52);
						// SugarCpp.g:505:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(505, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(505, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(505, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(505, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop145;
				}
			}

			loop145:
				;

			} finally { DebugExitSubRule(145); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 64);
			LeaveRule("shift_expr", 64);
			LeaveRule_shift_expr();
		}
		DebugLocation(506, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:508:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 65);
		TraceIn("add_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal339 = default(IToken);
		IToken char_literal340 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal339_tree = default(CommonTree);
		CommonTree char_literal340_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(508, 1);
		try
		{
			// SugarCpp.g:509:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:509:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(509, 4);
			// SugarCpp.g:509:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:509:5: a= mul_expr
			{
			DebugLocation(509, 6);
			PushFollow(Follow._mul_expr_in_add_expr4212);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 509:16: -> $a
			{
				DebugLocation(509, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(509, 23);
			// SugarCpp.g:509:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(146);
			while (true)
			{
				int alt146=3;
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==87))
				{
					alt146 = 1;
				}
				else if ((LA146_0==91))
				{
					alt146 = 2;
				}


				} finally { DebugExitDecision(146); }
				switch ( alt146 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:509:25: '+' b= mul_expr
					{
					DebugLocation(509, 25);
					char_literal339=(IToken)Match(input,87,Follow._87_in_add_expr4222);  
					stream_87.Add(char_literal339);

					DebugLocation(509, 30);
					PushFollow(Follow._mul_expr_in_add_expr4226);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 87, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 509:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(509, 43);
						// SugarCpp.g:509:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(509, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(509, 54);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(509, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(509, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:510:10: '-' b= mul_expr
					{
					DebugLocation(510, 10);
					char_literal340=(IToken)Match(input,91,Follow._91_in_add_expr4251);  
					stream_91.Add(char_literal340);

					DebugLocation(510, 15);
					PushFollow(Follow._mul_expr_in_add_expr4255);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 91
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 510:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(510, 28);
						// SugarCpp.g:510:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(510, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(510, 39);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(510, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(510, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop146;
				}
			}

			loop146:
				;

			} finally { DebugExitSubRule(146); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 65);
			LeaveRule("add_expr", 65);
			LeaveRule_add_expr();
		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:514:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 66);
		TraceIn("mul_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal341 = default(IToken);
		IToken char_literal342 = default(IToken);
		IToken char_literal343 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal341_tree = default(CommonTree);
		CommonTree char_literal342_tree = default(CommonTree);
		CommonTree char_literal343_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(514, 1);
		try
		{
			// SugarCpp.g:515:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:515:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(515, 4);
			// SugarCpp.g:515:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:515:5: a= selector_expr
			{
			DebugLocation(515, 6);
			PushFollow(Follow._selector_expr_in_mul_expr4293);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 515:21: -> $a
			{
				DebugLocation(515, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(515, 28);
			// SugarCpp.g:515:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(147);
			while (true)
			{
				int alt147=4;
				try { DebugEnterDecision(147, false);
				switch (input.LA(1))
				{
				case 85:
					{
					alt147 = 1;
					}
					break;
				case 98:
					{
					alt147 = 2;
					}
					break;
				case 78:
					{
					alt147 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(147); }
				switch ( alt147 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:515:30: '*' b= selector_expr
					{
					DebugLocation(515, 30);
					char_literal341=(IToken)Match(input,85,Follow._85_in_mul_expr4303);  
					stream_85.Add(char_literal341);

					DebugLocation(515, 35);
					PushFollow(Follow._selector_expr_in_mul_expr4307);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 85, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 515:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(515, 53);
						// SugarCpp.g:515:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(515, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(515, 64);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(515, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(515, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:516:15: '/' b= selector_expr
					{
					DebugLocation(516, 15);
					char_literal342=(IToken)Match(input,98,Follow._98_in_mul_expr4337);  
					stream_98.Add(char_literal342);

					DebugLocation(516, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4341);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 98, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 516:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(516, 38);
						// SugarCpp.g:516:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(516, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(516, 49);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(516, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(516, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:517:15: '%' b= selector_expr
					{
					DebugLocation(517, 15);
					char_literal343=(IToken)Match(input,78,Follow._78_in_mul_expr4371);  
					stream_78.Add(char_literal343);

					DebugLocation(517, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4375);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 78, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(517, 38);
						// SugarCpp.g:517:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(517, 49);
						adaptor.AddChild(root_1, stream_78.NextNode());
						DebugLocation(517, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(517, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop147;
				}
			}

			loop147:
				;

			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 66);
			LeaveRule("mul_expr", 66);
			LeaveRule_mul_expr();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:521:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 67);
		TraceIn("selector_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal344 = default(IToken);
		IToken string_literal345 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal344_tree = default(CommonTree);
		CommonTree string_literal345_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:522:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(522, 4);
			// SugarCpp.g:522:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:522:5: a= cast_expr
			{
			DebugLocation(522, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4418);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 522:17: -> $a
			{
				DebugLocation(522, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(522, 24);
			// SugarCpp.g:522:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=3;
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==95))
				{
					alt148 = 1;
				}
				else if ((LA148_0==97))
				{
					alt148 = 2;
				}


				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:522:26: '->*' b= ident
					{
					DebugLocation(522, 26);
					string_literal344=(IToken)Match(input,95,Follow._95_in_selector_expr4428);  
					stream_95.Add(string_literal344);

					DebugLocation(522, 33);
					PushFollow(Follow._ident_in_selector_expr4432);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 95
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 522:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(522, 43);
						// SugarCpp.g:522:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(522, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(522, 57);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(522, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(522, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:523:11: '.*' b= ident
					{
					DebugLocation(523, 11);
					string_literal345=(IToken)Match(input,97,Follow._97_in_selector_expr4458);  
					stream_97.Add(string_literal345);

					DebugLocation(523, 18);
					PushFollow(Follow._ident_in_selector_expr4463);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 97, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 523:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(523, 28);
						// SugarCpp.g:523:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(523, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(523, 42);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(523, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(523, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 67);
			LeaveRule("selector_expr", 67);
			LeaveRule_selector_expr();
		}
		DebugLocation(525, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:527:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 68);
		TraceIn("cast_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal346 = default(IToken);
		IToken char_literal347 = default(IToken);
		IToken char_literal349 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name348 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal346_tree = default(CommonTree);
		CommonTree char_literal347_tree = default(CommonTree);
		CommonTree char_literal349_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(527, 1);
		try
		{
			// SugarCpp.g:528:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:528:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(528, 4);
			// SugarCpp.g:528:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:528:5: a= prefix_expr
			{
			DebugLocation(528, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4503);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 528:19: -> $a
			{
				DebugLocation(528, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(528, 26);
			// SugarCpp.g:528:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt149=2;
			try { DebugEnterSubRule(149);
			try { DebugEnterDecision(149, false);
			int LA149_0 = input.LA(1);

			if ((LA149_0==124))
			{
				alt149 = 1;
			}
			} finally { DebugExitDecision(149); }
			switch (alt149)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:528:27: 'as' '(' type_name ')'
				{
				DebugLocation(528, 27);
				string_literal346=(IToken)Match(input,124,Follow._124_in_cast_expr4512);  
				stream_124.Add(string_literal346);

				DebugLocation(528, 32);
				char_literal347=(IToken)Match(input,83,Follow._83_in_cast_expr4514);  
				stream_83.Add(char_literal347);

				DebugLocation(528, 36);
				PushFollow(Follow._type_name_in_cast_expr4516);
				type_name348=type_name();
				PopFollow();

				stream_type_name.Add(type_name348.Tree);
				DebugLocation(528, 46);
				char_literal349=(IToken)Match(input,84,Follow._84_in_cast_expr4518);  
				stream_84.Add(char_literal349);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 528:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(528, 53);
					// SugarCpp.g:528:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(528, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(528, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(528, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(149); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 68);
			LeaveRule("cast_expr", 68);
			LeaveRule_cast_expr();
		}
		DebugLocation(529, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:531:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 69);
		TraceIn("prefix_expr_op", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set350 = default(IToken);

		CommonTree set350_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(531, 63);
		try
		{
			// SugarCpp.g:531:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(531, 15);

			set350=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==81||input.LA(1)==85||(input.LA(1)>=87 && input.LA(1)<=88)||(input.LA(1)>=91 && input.LA(1)<=92)||input.LA(1)==158)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set350));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 69);
			LeaveRule("prefix_expr_op", 69);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(531, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:532:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 70);
		TraceIn("prefix_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal353 = default(IToken);
		IToken char_literal355 = default(IToken);
		IToken char_literal357 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name354 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list356 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr358 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal353_tree = default(CommonTree);
		CommonTree char_literal355_tree = default(CommonTree);
		CommonTree char_literal357_tree = default(CommonTree);
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(532, 1);
		try
		{
			// SugarCpp.g:533:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr )
			int alt151=3;
			try { DebugEnterDecision(151, false);
			switch (input.LA(1))
			{
			case 76:
			case 81:
			case 85:
			case 87:
			case 88:
			case 91:
			case 92:
			case 158:
				{
				alt151 = 1;
				}
				break;
			case 141:
				{
				alt151 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 83:
			case 117:
				{
				alt151 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:533:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(533, 4);
				// SugarCpp.g:533:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:533:5: prefix_expr_op prefix_expr
				{
				DebugLocation(533, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4576);
				prefix_expr_op351=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op351.Tree);
				DebugLocation(533, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4578);
				prefix_expr352=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr352.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 533:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(533, 36);
					// SugarCpp.g:533:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(533, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(533, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(533, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:534:4: 'new' type_name '(' ( expr_list )? ')'
				{
				DebugLocation(534, 4);
				string_literal353=(IToken)Match(input,141,Follow._141_in_prefix_expr4594);  
				stream_141.Add(string_literal353);

				DebugLocation(534, 10);
				PushFollow(Follow._type_name_in_prefix_expr4596);
				type_name354=type_name();
				PopFollow();

				stream_type_name.Add(type_name354.Tree);
				DebugLocation(534, 20);
				char_literal355=(IToken)Match(input,83,Follow._83_in_prefix_expr4598);  
				stream_83.Add(char_literal355);

				DebugLocation(534, 24);
				// SugarCpp.g:534:24: ( expr_list )?
				int alt150=2;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, false);
				int LA150_0 = input.LA(1);

				if ((LA150_0==IDENT||LA150_0==NUMBER||LA150_0==STRING||LA150_0==76||LA150_0==81||LA150_0==83||LA150_0==85||(LA150_0>=87 && LA150_0<=88)||(LA150_0>=91 && LA150_0<=92)||(LA150_0>=117 && LA150_0<=118)||LA150_0==141||LA150_0==158))
				{
					alt150 = 1;
				}
				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:24: expr_list
					{
					DebugLocation(534, 24);
					PushFollow(Follow._expr_list_in_prefix_expr4600);
					expr_list356=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list356.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(150); }

				DebugLocation(534, 35);
				char_literal357=(IToken)Match(input,84,Follow._84_in_prefix_expr4603);  
				stream_84.Add(char_literal357);



				{
				// AST REWRITE
				// elements: expr_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 534:39: -> ^( Expr_New_Type type_name ( expr_list )? )
				{
					DebugLocation(534, 42);
					// SugarCpp.g:534:42: ^( Expr_New_Type type_name ( expr_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(534, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

					DebugLocation(534, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(534, 68);
					// SugarCpp.g:534:68: ( expr_list )?
					if (stream_expr_list.HasNext)
					{
						DebugLocation(534, 68);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

					}
					stream_expr_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:535:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(535, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4619);
				suffix_expr358=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr358.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 70);
			LeaveRule("prefix_expr", 70);
			LeaveRule_prefix_expr();
		}
		DebugLocation(536, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:538:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 71);
		TraceIn("expr_list", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal360 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr359 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr361 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal360_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(538, 1);
		try
		{
			// SugarCpp.g:539:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:539:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(539, 4);
			PushFollow(Follow._expr_in_expr_list4631);
			expr359=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr359.Tree);
			DebugLocation(539, 9);
			// SugarCpp.g:539:9: ( ',' ! expr )*
			try { DebugEnterSubRule(152);
			while (true)
			{
				int alt152=2;
				try { DebugEnterDecision(152, false);
				int LA152_0 = input.LA(1);

				if ((LA152_0==90))
				{
					alt152 = 1;
				}


				} finally { DebugExitDecision(152); }
				switch ( alt152 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:539:10: ',' ! expr
					{
					DebugLocation(539, 13);
					char_literal360=(IToken)Match(input,90,Follow._90_in_expr_list4634); 
					DebugLocation(539, 15);
					PushFollow(Follow._expr_in_expr_list4637);
					expr361=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr361.Tree);

					}
					break;

				default:
					goto loop152;
				}
			}

			loop152:
				;

			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 71);
			LeaveRule("expr_list", 71);
			LeaveRule_expr_list();
		}
		DebugLocation(540, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:542:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 72);
		TraceIn("suffix_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal362 = default(IToken);
		IToken string_literal363 = default(IToken);
		IToken char_literal364 = default(IToken);
		IToken string_literal366 = default(IToken);
		IToken char_literal368 = default(IToken);
		IToken char_literal370 = default(IToken);
		IToken char_literal371 = default(IToken);
		IToken char_literal373 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident367 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list369 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list372 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal362_tree = default(CommonTree);
		CommonTree string_literal363_tree = default(CommonTree);
		CommonTree char_literal364_tree = default(CommonTree);
		CommonTree string_literal366_tree = default(CommonTree);
		CommonTree char_literal368_tree = default(CommonTree);
		CommonTree char_literal370_tree = default(CommonTree);
		CommonTree char_literal371_tree = default(CommonTree);
		CommonTree char_literal373_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(542, 1);
		try
		{
			// SugarCpp.g:543:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:543:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(543, 4);
			// SugarCpp.g:543:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:543:5: a= atom_expr
			{
			DebugLocation(543, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4653);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 543:17: -> $a
			{
				DebugLocation(543, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(543, 24);
			// SugarCpp.g:543:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(155);
			while (true)
			{
				int alt155=7;
				try { DebugEnterDecision(155, false);
				switch (input.LA(1))
				{
				case 88:
					{
					alt155 = 1;
					}
					break;
				case 92:
					{
					alt155 = 2;
					}
					break;
				case 96:
					{
					alt155 = 3;
					}
					break;
				case 94:
					{
					alt155 = 4;
					}
					break;
				case 83:
					{
					alt155 = 5;
					}
					break;
				case 118:
					{
					alt155 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(155); }
				switch ( alt155 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:543:26: '++'
					{
					DebugLocation(543, 26);
					string_literal362=(IToken)Match(input,88,Follow._88_in_suffix_expr4663);  
					stream_88.Add(string_literal362);



					{
					// AST REWRITE
					// elements: suffix_expr, 88
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 543:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(543, 34);
						// SugarCpp.g:543:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(543, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(543, 48);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(543, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:544:14: '--'
					{
					DebugLocation(544, 14);
					string_literal363=(IToken)Match(input,92,Follow._92_in_suffix_expr4689);  
					stream_92.Add(string_literal363);



					{
					// AST REWRITE
					// elements: 92, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 544:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(544, 22);
						// SugarCpp.g:544:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(544, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(544, 36);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(544, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:545:11: '.' ident
					{
					DebugLocation(545, 11);
					char_literal364=(IToken)Match(input,96,Follow._96_in_suffix_expr4712);  
					stream_96.Add(char_literal364);

					DebugLocation(545, 15);
					PushFollow(Follow._ident_in_suffix_expr4714);
					ident365=ident();
					PopFollow();

					stream_ident.Add(ident365.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 96, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 545:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(545, 24);
						// SugarCpp.g:545:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(545, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(545, 38);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(545, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(545, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:546:11: '->' ident
					{
					DebugLocation(546, 11);
					string_literal366=(IToken)Match(input,94,Follow._94_in_suffix_expr4739);  
					stream_94.Add(string_literal366);

					DebugLocation(546, 16);
					PushFollow(Follow._ident_in_suffix_expr4741);
					ident367=ident();
					PopFollow();

					stream_ident.Add(ident367.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 94
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 546:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(546, 25);
						// SugarCpp.g:546:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(546, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(546, 39);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(546, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(546, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:547:11: '(' ( expr_list )? ')'
					{
					DebugLocation(547, 11);
					char_literal368=(IToken)Match(input,83,Follow._83_in_suffix_expr4766);  
					stream_83.Add(char_literal368);

					DebugLocation(547, 15);
					// SugarCpp.g:547:15: ( expr_list )?
					int alt153=2;
					try { DebugEnterSubRule(153);
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==IDENT||LA153_0==NUMBER||LA153_0==STRING||LA153_0==76||LA153_0==81||LA153_0==83||LA153_0==85||(LA153_0>=87 && LA153_0<=88)||(LA153_0>=91 && LA153_0<=92)||(LA153_0>=117 && LA153_0<=118)||LA153_0==141||LA153_0==158))
					{
						alt153 = 1;
					}
					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:547:15: expr_list
						{
						DebugLocation(547, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4768);
						expr_list369=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list369.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(153); }

					DebugLocation(547, 26);
					char_literal370=(IToken)Match(input,84,Follow._84_in_suffix_expr4771);  
					stream_84.Add(char_literal370);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 547:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(547, 33);
						// SugarCpp.g:547:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(547, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(547, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(547, 58);
						// SugarCpp.g:547:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(547, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:548:11: '[' ( expr_list )? ']'
					{
					DebugLocation(548, 11);
					char_literal371=(IToken)Match(input,118,Follow._118_in_suffix_expr4795);  
					stream_118.Add(char_literal371);

					DebugLocation(548, 15);
					// SugarCpp.g:548:15: ( expr_list )?
					int alt154=2;
					try { DebugEnterSubRule(154);
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==IDENT||LA154_0==NUMBER||LA154_0==STRING||LA154_0==76||LA154_0==81||LA154_0==83||LA154_0==85||(LA154_0>=87 && LA154_0<=88)||(LA154_0>=91 && LA154_0<=92)||(LA154_0>=117 && LA154_0<=118)||LA154_0==141||LA154_0==158))
					{
						alt154 = 1;
					}
					} finally { DebugExitDecision(154); }
					switch (alt154)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:548:15: expr_list
						{
						DebugLocation(548, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4797);
						expr_list372=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list372.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(154); }

					DebugLocation(548, 26);
					char_literal373=(IToken)Match(input,119,Follow._119_in_suffix_expr4800);  
					stream_119.Add(char_literal373);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 548:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(548, 33);
						// SugarCpp.g:548:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(548, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(548, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(548, 58);
						// SugarCpp.g:548:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(548, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop155;
				}
			}

			loop155:
				;

			} finally { DebugExitSubRule(155); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 72);
			LeaveRule("suffix_expr", 72);
			LeaveRule_suffix_expr();
		}
		DebugLocation(551, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:553:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 73);
		TraceIn("atom_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER374 = default(IToken);
		IToken STRING376 = default(IToken);
		IToken char_literal377 = default(IToken);
		IToken char_literal379 = default(IToken);
		IToken char_literal380 = default(IToken);
		IToken char_literal382 = default(IToken);
		IToken char_literal383 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident375 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident378 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr381 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER374_tree = default(CommonTree);
		CommonTree STRING376_tree = default(CommonTree);
		CommonTree char_literal377_tree = default(CommonTree);
		CommonTree char_literal379_tree = default(CommonTree);
		CommonTree char_literal380_tree = default(CommonTree);
		CommonTree char_literal382_tree = default(CommonTree);
		CommonTree char_literal383_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(553, 1);
		try
		{
			// SugarCpp.g:554:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt158=5;
			try { DebugEnterDecision(158, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt158 = 1;
				}
				break;
			case IDENT:
				{
				alt158 = 2;
				}
				break;
			case STRING:
				{
				alt158 = 3;
				}
				break;
			case 117:
				{
				alt158 = 4;
				}
				break;
			case 83:
				{
				alt158 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 158, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(158); }
			switch (alt158)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:554:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(554, 4);
				NUMBER374=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4846); 
				NUMBER374_tree = (CommonTree)adaptor.Create(NUMBER374);
				adaptor.AddChild(root_0, NUMBER374_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:555:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(555, 4);
				PushFollow(Follow._ident_in_atom_expr4851);
				ident375=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident375.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:556:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(556, 4);
				STRING376=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4856); 
				STRING376_tree = (CommonTree)adaptor.Create(STRING376);
				adaptor.AddChild(root_0, STRING376_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:557:4: '@' ident
				{
				DebugLocation(557, 4);
				char_literal377=(IToken)Match(input,117,Follow._117_in_atom_expr4861);  
				stream_117.Add(char_literal377);

				DebugLocation(557, 8);
				PushFollow(Follow._ident_in_atom_expr4863);
				ident378=ident();
				PopFollow();

				stream_ident.Add(ident378.Tree);


				{
				// AST REWRITE
				// elements: ident, 117
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 557:14: -> ^( '@' ident )
				{
					DebugLocation(557, 17);
					// SugarCpp.g:557:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(557, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_117.NextNode(), root_1);

					DebugLocation(557, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:558:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(558, 4);
				char_literal379=(IToken)Match(input,83,Follow._83_in_atom_expr4876);  
				stream_83.Add(char_literal379);

				DebugLocation(558, 9);
				PushFollow(Follow._expr_in_atom_expr4880);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(558, 15);
				// SugarCpp.g:558:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt157=2;
				try { DebugEnterSubRule(157);
				try { DebugEnterDecision(157, false);
				int LA157_0 = input.LA(1);

				if ((LA157_0==90))
				{
					alt157 = 1;
				}
				else if ((LA157_0==84))
				{
					alt157 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(157); }
				switch (alt157)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:558:17: ( ',' expr )+ ')'
					{
					DebugLocation(558, 17);
					// SugarCpp.g:558:17: ( ',' expr )+
					int cnt156=0;
					try { DebugEnterSubRule(156);
					while (true)
					{
						int alt156=2;
						try { DebugEnterDecision(156, false);
						int LA156_0 = input.LA(1);

						if ((LA156_0==90))
						{
							alt156 = 1;
						}


						} finally { DebugExitDecision(156); }
						switch (alt156)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:558:18: ',' expr
							{
							DebugLocation(558, 18);
							char_literal380=(IToken)Match(input,90,Follow._90_in_atom_expr4885);  
							stream_90.Add(char_literal380);

							DebugLocation(558, 22);
							PushFollow(Follow._expr_in_atom_expr4887);
							expr381=expr();
							PopFollow();

							stream_expr.Add(expr381.Tree);

							}
							break;

						default:
							if (cnt156 >= 1)
								goto loop156;

							EarlyExitException eee156 = new EarlyExitException( 156, input );
							DebugRecognitionException(eee156);
							throw eee156;
						}
						cnt156++;
					}
					loop156:
						;

					} finally { DebugExitSubRule(156); }

					DebugLocation(558, 29);
					char_literal382=(IToken)Match(input,84,Follow._84_in_atom_expr4891);  
					stream_84.Add(char_literal382);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 558:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(558, 36);
						// SugarCpp.g:558:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(558, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(558, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(558, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:559:17: ')' {...}?
					{
					DebugLocation(559, 17);
					char_literal383=(IToken)Match(input,84,Follow._84_in_atom_expr4918);  
					stream_84.Add(char_literal383);

					DebugLocation(559, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 559:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(559, 40);
						// SugarCpp.g:559:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(559, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(559, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(157); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 73);
			LeaveRule("atom_expr", 73);
			LeaveRule_atom_expr();
		}
		DebugLocation(561, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:563:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 74);
		TraceIn("lvalue_item", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal384 = default(IToken);
		IToken string_literal385 = default(IToken);
		IToken char_literal386 = default(IToken);
		IToken string_literal388 = default(IToken);
		IToken char_literal391 = default(IToken);
		IToken char_literal393 = default(IToken);
		IToken char_literal394 = default(IToken);
		IToken char_literal396 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident387 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident389 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter390 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list392 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal384_tree = default(CommonTree);
		CommonTree string_literal385_tree = default(CommonTree);
		CommonTree char_literal386_tree = default(CommonTree);
		CommonTree string_literal388_tree = default(CommonTree);
		CommonTree char_literal391_tree = default(CommonTree);
		CommonTree char_literal393_tree = default(CommonTree);
		CommonTree char_literal394_tree = default(CommonTree);
		CommonTree char_literal396_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(563, 1);
		try
		{
			// SugarCpp.g:564:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:564:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(564, 4);
			// SugarCpp.g:564:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:564:5: a= lvalue_atom
			{
			DebugLocation(564, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4952);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 564:19: -> $a
			{
				DebugLocation(564, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(564, 26);
			// SugarCpp.g:564:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(162);
			while (true)
			{
				int alt162=7;
				try { DebugEnterDecision(162, false);
				switch (input.LA(1))
				{
				case 88:
					{
					alt162 = 1;
					}
					break;
				case 92:
					{
					alt162 = 2;
					}
					break;
				case 96:
					{
					alt162 = 3;
					}
					break;
				case 94:
					{
					alt162 = 4;
					}
					break;
				case 83:
				case 103:
					{
					alt162 = 5;
					}
					break;
				case 118:
					{
					alt162 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(162); }
				switch ( alt162 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:564:28: '++'
					{
					DebugLocation(564, 28);
					string_literal384=(IToken)Match(input,88,Follow._88_in_lvalue_item4962);  
					stream_88.Add(string_literal384);



					{
					// AST REWRITE
					// elements: 88, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 564:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(564, 36);
						// SugarCpp.g:564:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(564, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(564, 50);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(564, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:565:16: '--'
					{
					DebugLocation(565, 16);
					string_literal385=(IToken)Match(input,92,Follow._92_in_lvalue_item4990);  
					stream_92.Add(string_literal385);



					{
					// AST REWRITE
					// elements: lvalue_item, 92
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 565:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(565, 24);
						// SugarCpp.g:565:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(565, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(565, 38);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(565, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:566:13: '.' ident
					{
					DebugLocation(566, 13);
					char_literal386=(IToken)Match(input,96,Follow._96_in_lvalue_item5015);  
					stream_96.Add(char_literal386);

					DebugLocation(566, 17);
					PushFollow(Follow._ident_in_lvalue_item5017);
					ident387=ident();
					PopFollow();

					stream_ident.Add(ident387.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 96
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 566:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(566, 26);
						// SugarCpp.g:566:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(566, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(566, 40);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(566, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(566, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:567:13: '->' ident
					{
					DebugLocation(567, 13);
					string_literal388=(IToken)Match(input,94,Follow._94_in_lvalue_item5044);  
					stream_94.Add(string_literal388);

					DebugLocation(567, 18);
					PushFollow(Follow._ident_in_lvalue_item5046);
					ident389=ident();
					PopFollow();

					stream_ident.Add(ident389.Tree);


					{
					// AST REWRITE
					// elements: ident, lvalue_item, 94
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 567:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(567, 27);
						// SugarCpp.g:567:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(567, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(567, 41);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(567, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(567, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:568:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(568, 13);
					// SugarCpp.g:568:13: ( generic_parameter )?
					int alt159=2;
					try { DebugEnterSubRule(159);
					try { DebugEnterDecision(159, false);
					int LA159_0 = input.LA(1);

					if ((LA159_0==103))
					{
						alt159 = 1;
					}
					} finally { DebugExitDecision(159); }
					switch (alt159)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:568:13: generic_parameter
						{
						DebugLocation(568, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item5073);
						generic_parameter390=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter390.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(159); }

					DebugLocation(568, 32);
					char_literal391=(IToken)Match(input,83,Follow._83_in_lvalue_item5076);  
					stream_83.Add(char_literal391);

					DebugLocation(568, 36);
					// SugarCpp.g:568:36: ( expr_list )?
					int alt160=2;
					try { DebugEnterSubRule(160);
					try { DebugEnterDecision(160, false);
					int LA160_0 = input.LA(1);

					if ((LA160_0==IDENT||LA160_0==NUMBER||LA160_0==STRING||LA160_0==76||LA160_0==81||LA160_0==83||LA160_0==85||(LA160_0>=87 && LA160_0<=88)||(LA160_0>=91 && LA160_0<=92)||(LA160_0>=117 && LA160_0<=118)||LA160_0==141||LA160_0==158))
					{
						alt160 = 1;
					}
					} finally { DebugExitDecision(160); }
					switch (alt160)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:568:36: expr_list
						{
						DebugLocation(568, 36);
						PushFollow(Follow._expr_list_in_lvalue_item5078);
						expr_list392=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list392.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(160); }

					DebugLocation(568, 47);
					char_literal393=(IToken)Match(input,84,Follow._84_in_lvalue_item5081);  
					stream_84.Add(char_literal393);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 568:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(568, 54);
						// SugarCpp.g:568:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(568, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(568, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(568, 79);
						// SugarCpp.g:568:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(568, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(568, 98);
						// SugarCpp.g:568:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(568, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:569:13: '[' ( expr_list )? ']'
					{
					DebugLocation(569, 13);
					char_literal394=(IToken)Match(input,118,Follow._118_in_lvalue_item5110);  
					stream_118.Add(char_literal394);

					DebugLocation(569, 17);
					// SugarCpp.g:569:17: ( expr_list )?
					int alt161=2;
					try { DebugEnterSubRule(161);
					try { DebugEnterDecision(161, false);
					int LA161_0 = input.LA(1);

					if ((LA161_0==IDENT||LA161_0==NUMBER||LA161_0==STRING||LA161_0==76||LA161_0==81||LA161_0==83||LA161_0==85||(LA161_0>=87 && LA161_0<=88)||(LA161_0>=91 && LA161_0<=92)||(LA161_0>=117 && LA161_0<=118)||LA161_0==141||LA161_0==158))
					{
						alt161 = 1;
					}
					} finally { DebugExitDecision(161); }
					switch (alt161)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:569:17: expr_list
						{
						DebugLocation(569, 17);
						PushFollow(Follow._expr_list_in_lvalue_item5112);
						expr_list395=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list395.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(161); }

					DebugLocation(569, 28);
					char_literal396=(IToken)Match(input,119,Follow._119_in_lvalue_item5115);  
					stream_119.Add(char_literal396);



					{
					// AST REWRITE
					// elements: expr_list, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 569:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(569, 35);
						// SugarCpp.g:569:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(569, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(569, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(569, 60);
						// SugarCpp.g:569:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(569, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop162;
				}
			}

			loop162:
				;

			} finally { DebugExitSubRule(162); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 74);
			LeaveRule("lvalue_item", 74);
			LeaveRule_lvalue_item();
		}
		DebugLocation(571, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:573:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 75);
		TraceIn("lvalue_atom", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal398 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident397 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident399 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal398_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(573, 1);
		try
		{
			// SugarCpp.g:574:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt163=2;
			try { DebugEnterDecision(163, false);
			int LA163_0 = input.LA(1);

			if ((LA163_0==IDENT))
			{
				alt163 = 1;
			}
			else if ((LA163_0==117))
			{
				alt163 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 163, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(163); }
			switch (alt163)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:574:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(574, 4);
				PushFollow(Follow._ident_in_lvalue_atom5154);
				ident397=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident397.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:575:4: '@' ident
				{
				DebugLocation(575, 4);
				char_literal398=(IToken)Match(input,117,Follow._117_in_lvalue_atom5159);  
				stream_117.Add(char_literal398);

				DebugLocation(575, 8);
				PushFollow(Follow._ident_in_lvalue_atom5161);
				ident399=ident();
				PopFollow();

				stream_ident.Add(ident399.Tree);


				{
				// AST REWRITE
				// elements: 117, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 575:14: -> ^( '@' ident )
				{
					DebugLocation(575, 17);
					// SugarCpp.g:575:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(575, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_117.NextNode(), root_1);

					DebugLocation(575, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 75);
			LeaveRule("lvalue_atom", 75);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(576, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:578:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 76);
		TraceIn("lvalue", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal400 = default(IToken);
		IToken char_literal402 = default(IToken);
		IToken char_literal404 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item403 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item405 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal400_tree = default(CommonTree);
		CommonTree char_literal402_tree = default(CommonTree);
		CommonTree char_literal404_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(578, 1);
		try
		{
			// SugarCpp.g:579:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt165=2;
			try { DebugEnterDecision(165, false);
			int LA165_0 = input.LA(1);

			if ((LA165_0==83))
			{
				alt165 = 1;
			}
			else if ((LA165_0==IDENT||LA165_0==117))
			{
				alt165 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 165, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(165); }
			switch (alt165)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:579:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(579, 4);
				char_literal400=(IToken)Match(input,83,Follow._83_in_lvalue5180);  
				stream_83.Add(char_literal400);

				DebugLocation(579, 8);
				PushFollow(Follow._lvalue_item_in_lvalue5182);
				lvalue_item401=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item401.Tree);
				DebugLocation(579, 20);
				// SugarCpp.g:579:20: ( ',' lvalue_item )+
				int cnt164=0;
				try { DebugEnterSubRule(164);
				while (true)
				{
					int alt164=2;
					try { DebugEnterDecision(164, false);
					int LA164_0 = input.LA(1);

					if ((LA164_0==90))
					{
						alt164 = 1;
					}


					} finally { DebugExitDecision(164); }
					switch (alt164)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:579:21: ',' lvalue_item
						{
						DebugLocation(579, 21);
						char_literal402=(IToken)Match(input,90,Follow._90_in_lvalue5185);  
						stream_90.Add(char_literal402);

						DebugLocation(579, 25);
						PushFollow(Follow._lvalue_item_in_lvalue5187);
						lvalue_item403=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item403.Tree);

						}
						break;

					default:
						if (cnt164 >= 1)
							goto loop164;

						EarlyExitException eee164 = new EarlyExitException( 164, input );
						DebugRecognitionException(eee164);
						throw eee164;
					}
					cnt164++;
				}
				loop164:
					;

				} finally { DebugExitSubRule(164); }

				DebugLocation(579, 39);
				char_literal404=(IToken)Match(input,84,Follow._84_in_lvalue5191);  
				stream_84.Add(char_literal404);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 579:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(579, 46);
					// SugarCpp.g:579:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(579, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(579, 60);
					// SugarCpp.g:579:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(579, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:580:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(580, 4);
				PushFollow(Follow._lvalue_item_in_lvalue5205);
				lvalue_item405=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item405.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 76);
			LeaveRule("lvalue", 76);
			LeaveRule_lvalue();
		}
		DebugLocation(581, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:583:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 77);
		TraceIn("ident", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT406 = default(IToken);
		IToken string_literal407 = default(IToken);
		IToken IDENT408 = default(IToken);

		CommonTree IDENT406_tree = default(CommonTree);
		CommonTree string_literal407_tree = default(CommonTree);
		CommonTree IDENT408_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(583, 1);
		try
		{
			// SugarCpp.g:584:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:584:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(584, 4);
			IDENT406=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5216); 
			IDENT406_tree = (CommonTree)adaptor.Create(IDENT406);
			adaptor.AddChild(root_0, IDENT406_tree);
			DebugLocation(584, 10);
			// SugarCpp.g:584:10: ( '::' IDENT )*
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==101))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch ( alt166 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:584:11: '::' IDENT
					{
					DebugLocation(584, 11);
					string_literal407=(IToken)Match(input,101,Follow._101_in_ident5219); 
					string_literal407_tree = (CommonTree)adaptor.Create(string_literal407);
					adaptor.AddChild(root_0, string_literal407_tree);
					DebugLocation(584, 16);
					IDENT408=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5221); 
					IDENT408_tree = (CommonTree)adaptor.Create(IDENT408);
					adaptor.AddChild(root_0, IDENT408_tree);

					}
					break;

				default:
					goto loop166;
				}
			}

			loop166:
				;

			} finally { DebugExitSubRule(166); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 77);
			LeaveRule("ident", 77);
			LeaveRule_ident();
		}
		DebugLocation(585, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:587:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 78);
		TraceIn("infix_func", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal409 = default(IToken);
		IToken char_literal411 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident410 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal409_tree = default(CommonTree);
		CommonTree char_literal411_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(587, 1);
		try
		{
			// SugarCpp.g:588:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:588:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(588, 7);
			char_literal409=(IToken)Match(input,122,Follow._122_in_infix_func5234); 
			DebugLocation(588, 9);
			PushFollow(Follow._ident_in_infix_func5237);
			ident410=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident410.Tree);
			DebugLocation(588, 18);
			char_literal411=(IToken)Match(input,122,Follow._122_in_infix_func5239); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 78);
			LeaveRule("infix_func", 78);
			LeaveRule_infix_func();
		}
		DebugLocation(589, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA61 dfa61;
	private DFA73 dfa73;
	private DFA81 dfa81;
	private DFA86 dfa86;
	private DFA99 dfa99;
	private DFA110 dfa110;
	private DFA122 dfa122;
	private DFA121 dfa121;
	private DFA127 dfa127;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa61 = new DFA61( this );
		dfa73 = new DFA73( this );
		dfa81 = new DFA81( this );
		dfa86 = new DFA86( this );
		dfa99 = new DFA99( this );
		dfa110 = new DFA110( this );
		dfa122 = new DFA122( this );
		dfa121 = new DFA121( this );
		dfa127 = new DFA127( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x29\x1\xFFFF\x1\x29\x6\xFFFF\x2\x53\x1\x29\x1\xFFFF\x3\x29\x1\x30"+
			"\x2\x29\x1\x53\x3\x54\x2\x53\x1\x29\x3\x54\x1\x29\x1\x5A\x5\x29\x1\x5A"+
			"\x1\x29\x4\x54\x1\x53\xA\x54\x2\x29\x1\x5A\x2\x29\x1\x5A\x2\x29\xA\x54"+
			"\x2\x29\x2\x54";
		private const string DFA4_maxS =
			"\x1\x9E\x1\x80\x1\xFFFF\x1\x9E\x6\xFFFF\x2\x77\x1\x29\x1\xFFFF\x1\x29"+
			"\x1\x36\x1\x80\x1\x30\x1\x36\x1\x9E\x1\x77\x2\x5A\x1\x65\x2\x77\x1\x9E"+
			"\x2\x5A\x1\x65\x1\x36\x1\x77\x2\x29\x3\x36\x1\x77\x1\x29\x2\x5A\x2\x65"+
			"\x1\x77\x2\x5A\x1\x65\x2\x5A\x1\x65\x2\x5A\x2\x65\x1\x29\x1\x36\x1\x77"+
			"\x1\x29\x1\x36\x1\x77\x2\x29\x1\x65\x2\x5A\x2\x65\x2\x5A\x3\x65\x2\x29"+
			"\x2\x65";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4C\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x3\xFFFF\x1\x9\x7\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x5"+
				"\xFFFF\x1\x2",
				"\x1\xA\x56\xFFFF\x1\xB",
				"",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x27\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x7\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x56\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x7\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x27\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x3\x6\xFFFF\x1\x1A\x45\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x3\xFFFF\x1\x9\x7\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x6\x5\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x7\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x7\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x7\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x7\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x7\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x7\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "208:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x30\x1\x9E\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x45\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "252:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x30\x1\x9E\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x45\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "260:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x30\x1\x9E\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x20\xFFFF\x1\x3\x1\x2\x5\xFFFF\x1\x1\x45\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x7\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "264:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA61 : DFA
	{
		private const string DFA61_eotS =
			"\xF\xFFFF";
		private const string DFA61_eofS =
			"\xF\xFFFF";
		private const string DFA61_minS =
			"\x1\x29\x1\xFFFF\x1\x29\x1\xFFFF\x3\x29\x1\x51\x3\x29\x2\x51\x1\x29\x1"+
			"\x51";
		private const string DFA61_maxS =
			"\x1\x9E\x1\xFFFF\x1\x9E\x1\xFFFF\x1\x29\x1\x96\x1\x9E\x1\x76\x1\x29\x1"+
			"\x96\x1\x9E\x2\x76\x1\x29\x1\x76";
		private const string DFA61_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA61_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA61_transitionS =
			{
				"\x1\x2\x56\xFFFF\x1\x1\x15\xFFFF\x1\x1\x7\xFFFF\x1\x3",
				"",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x27\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x45\xFFFF\x1\x1\x10\xFFFF\x1\x1\x15\xFFFF\x1\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x27\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x56\xFFFF\x1\x1\x15\xFFFF\x1\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x20\xFFFF\x1\x1"+
				"\x27\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA61_eot = DFA.UnpackEncodedString(DFA61_eotS);
		private static readonly short[] DFA61_eof = DFA.UnpackEncodedString(DFA61_eofS);
		private static readonly char[] DFA61_min = DFA.UnpackEncodedStringToUnsignedChars(DFA61_minS);
		private static readonly char[] DFA61_max = DFA.UnpackEncodedStringToUnsignedChars(DFA61_maxS);
		private static readonly short[] DFA61_accept = DFA.UnpackEncodedString(DFA61_acceptS);
		private static readonly short[] DFA61_special = DFA.UnpackEncodedString(DFA61_specialS);
		private static readonly short[][] DFA61_transition;

		static DFA61()
		{
			int numStates = DFA61_transitionS.Length;
			DFA61_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA61_transition[i] = DFA.UnpackEncodedString(DFA61_transitionS[i]);
			}
		}

		public DFA61( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 61;
			this.eot = DFA61_eot;
			this.eof = DFA61_eof;
			this.min = DFA61_min;
			this.max = DFA61_max;
			this.accept = DFA61_accept;
			this.special = DFA61_special;
			this.transition = DFA61_transition;
		}

		public override string Description { get { return "311:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA73 : DFA
	{
		private const string DFA73_eotS =
			"\xA\xFFFF";
		private const string DFA73_eofS =
			"\xA\xFFFF";
		private const string DFA73_minS =
			"\x1\x29\x1\x30\x5\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA73_maxS =
			"\x1\x98\x1\x9C\x5\xFFFF\x1\x29\x1\xFFFF\x1\x9C";
		private const string DFA73_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA73_specialS =
			"\xA\xFFFF}>";
		private static readonly string[] DFA73_transitionS =
			{
				"\x1\x1\x29\xFFFF\x1\x5\x21\xFFFF\x1\x5\x19\xFFFF\x1\x2\x1\x6\x3\xFFFF"+
				"\x1\x4\x3\xFFFF\x1\x3",
				"\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x8\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x8\x1\x7\x1\x8"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xD\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"",
				"\x1\x9",
				"",
				"\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x8\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x8\x1\x7\x1\x8"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\xD\xFFFF\x1\x5\x1\xFFFF\x1"+
				"\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA73_eot = DFA.UnpackEncodedString(DFA73_eotS);
		private static readonly short[] DFA73_eof = DFA.UnpackEncodedString(DFA73_eofS);
		private static readonly char[] DFA73_min = DFA.UnpackEncodedStringToUnsignedChars(DFA73_minS);
		private static readonly char[] DFA73_max = DFA.UnpackEncodedStringToUnsignedChars(DFA73_maxS);
		private static readonly short[] DFA73_accept = DFA.UnpackEncodedString(DFA73_acceptS);
		private static readonly short[] DFA73_special = DFA.UnpackEncodedString(DFA73_specialS);
		private static readonly short[][] DFA73_transition;

		static DFA73()
		{
			int numStates = DFA73_transitionS.Length;
			DFA73_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA73_transition[i] = DFA.UnpackEncodedString(DFA73_transitionS[i]);
			}
		}

		public DFA73( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 73;
			this.eot = DFA73_eot;
			this.eof = DFA73_eof;
			this.min = DFA73_min;
			this.max = DFA73_max;
			this.accept = DFA73_accept;
			this.special = DFA73_special;
			this.transition = DFA73_transition;
		}

		public override string Description { get { return "337:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify | stmt_switch );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA81 : DFA
	{
		private const string DFA81_eotS =
			"\x4\xFFFF";
		private const string DFA81_eofS =
			"\x4\xFFFF";
		private const string DFA81_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA81_maxS =
			"\x1\x83\x1\x9A\x2\xFFFF";
		private const string DFA81_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA81_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA81_transitionS =
			{
				"\x1\x1\x52\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x22\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x2\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
		private static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
		private static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
		private static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
		private static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
		private static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
		private static readonly short[][] DFA81_transition;

		static DFA81()
		{
			int numStates = DFA81_transitionS.Length;
			DFA81_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA81_transition[i] = DFA.UnpackEncodedString(DFA81_transitionS[i]);
			}
		}

		public DFA81( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}

		public override string Description { get { return "365:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA86 : DFA
	{
		private const string DFA86_eotS =
			"\x4\xFFFF";
		private const string DFA86_eofS =
			"\x4\xFFFF";
		private const string DFA86_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA86_maxS =
			"\x1\x83\x1\x9A\x2\xFFFF";
		private const string DFA86_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA86_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA86_transitionS =
			{
				"\x1\x1\x52\xFFFF\x1\x2",
				"\x1\x3\x20\xFFFF\x1\x3\x6\xFFFF\x1\x1\x22\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF"+
				"\x2\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA86_eot = DFA.UnpackEncodedString(DFA86_eotS);
		private static readonly short[] DFA86_eof = DFA.UnpackEncodedString(DFA86_eofS);
		private static readonly char[] DFA86_min = DFA.UnpackEncodedStringToUnsignedChars(DFA86_minS);
		private static readonly char[] DFA86_max = DFA.UnpackEncodedStringToUnsignedChars(DFA86_maxS);
		private static readonly short[] DFA86_accept = DFA.UnpackEncodedString(DFA86_acceptS);
		private static readonly short[] DFA86_special = DFA.UnpackEncodedString(DFA86_specialS);
		private static readonly short[][] DFA86_transition;

		static DFA86()
		{
			int numStates = DFA86_transitionS.Length;
			DFA86_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA86_transition[i] = DFA.UnpackEncodedString(DFA86_transitionS[i]);
			}
		}

		public DFA86( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 86;
			this.eot = DFA86_eot;
			this.eof = DFA86_eof;
			this.min = DFA86_min;
			this.max = DFA86_max;
			this.accept = DFA86_accept;
			this.special = DFA86_special;
			this.transition = DFA86_transition;
		}

		public override string Description { get { return "368:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\x6\xFFFF";
		private const string DFA99_eofS =
			"\x6\xFFFF";
		private const string DFA99_minS =
			"\x1\x29\x1\x30\x1\xFFFF\x1\x29\x1\xFFFF\x1\x30";
		private const string DFA99_maxS =
			"\x1\x9E\x1\x9D\x1\xFFFF\x1\x29\x1\xFFFF\x1\x9D";
		private const string DFA99_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA99_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x1\x1\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x10\xFFFF\x1\x2",
				"\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\x6\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3\x2\x2\x1\x4\x5"+
				"\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF\x2\x2\x1\xFFFF"+
				"\x2\x2\x3\xFFFF\x1\x2\x6\xFFFF\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x4\x2"
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "394:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA110 : DFA
	{
		private const string DFA110_eotS =
			"\x4\xFFFF";
		private const string DFA110_eofS =
			"\x4\xFFFF";
		private const string DFA110_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA110_maxS =
			"\x2\x99\x2\xFFFF";
		private const string DFA110_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA110_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA110_transitionS =
			{
				"\x1\x2\x27\xFFFF\x1\x1\x68\xFFFF\x1\x3",
				"\x1\x2\x27\xFFFF\x1\x1\x68\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA110_eot = DFA.UnpackEncodedString(DFA110_eotS);
		private static readonly short[] DFA110_eof = DFA.UnpackEncodedString(DFA110_eofS);
		private static readonly char[] DFA110_min = DFA.UnpackEncodedStringToUnsignedChars(DFA110_minS);
		private static readonly char[] DFA110_max = DFA.UnpackEncodedStringToUnsignedChars(DFA110_maxS);
		private static readonly short[] DFA110_accept = DFA.UnpackEncodedString(DFA110_acceptS);
		private static readonly short[] DFA110_special = DFA.UnpackEncodedString(DFA110_specialS);
		private static readonly short[][] DFA110_transition;

		static DFA110()
		{
			int numStates = DFA110_transitionS.Length;
			DFA110_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA110_transition[i] = DFA.UnpackEncodedString(DFA110_transitionS[i]);
			}
		}

		public DFA110( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 110;
			this.eot = DFA110_eot;
			this.eof = DFA110_eof;
			this.min = DFA110_min;
			this.max = DFA110_max;
			this.accept = DFA110_accept;
			this.special = DFA110_special;
			this.transition = DFA110_transition;
		}

		public override string Description { get { return "()* loopback of 414:35: ( ( NEWLINE )* switch_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA122 : DFA
	{
		private const string DFA122_eotS =
			"\x7\xFFFF";
		private const string DFA122_eofS =
			"\x7\xFFFF";
		private const string DFA122_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA122_maxS =
			"\x5\x9E\x2\xFFFF";
		private const string DFA122_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA122_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA122_transitionS =
			{
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\x10\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\x10\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\x10\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\x10\xFFFF"+
				"\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x5\x1\x3\x5\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x18\xFFFF\x2\x5\x1\x6\x15\xFFFF\x1\x5\x10\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA122_eot = DFA.UnpackEncodedString(DFA122_eotS);
		private static readonly short[] DFA122_eof = DFA.UnpackEncodedString(DFA122_eofS);
		private static readonly char[] DFA122_min = DFA.UnpackEncodedStringToUnsignedChars(DFA122_minS);
		private static readonly char[] DFA122_max = DFA.UnpackEncodedStringToUnsignedChars(DFA122_maxS);
		private static readonly short[] DFA122_accept = DFA.UnpackEncodedString(DFA122_acceptS);
		private static readonly short[] DFA122_special = DFA.UnpackEncodedString(DFA122_specialS);
		private static readonly short[][] DFA122_transition;

		static DFA122()
		{
			int numStates = DFA122_transitionS.Length;
			DFA122_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA122_transition[i] = DFA.UnpackEncodedString(DFA122_transitionS[i]);
			}
		}

		public DFA122( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 122;
			this.eot = DFA122_eot;
			this.eof = DFA122_eof;
			this.min = DFA122_min;
			this.max = DFA122_max;
			this.accept = DFA122_accept;
			this.special = DFA122_special;
			this.transition = DFA122_transition;
		}

		public override string Description { get { return "439:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA121 : DFA
	{
		private const string DFA121_eotS =
			"\x7\xFFFF";
		private const string DFA121_eofS =
			"\x7\xFFFF";
		private const string DFA121_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA121_maxS =
			"\x1\x77\x4\x9E\x2\xFFFF";
		private const string DFA121_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA121_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA121_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x3\x5\xFFFF\x1\x2\x29\xFFFF\x1\x1\x1C\xFFFF\x1\x5",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\x10\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\x10\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\x10\xFFFF"+
				"\x1\x6",
				"\x1\x4\x20\xFFFF\x1\x6\x1\x3\x5\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x18\xFFFF\x2\x6\x1\x5\x15\xFFFF\x1\x6\x10\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA121_eot = DFA.UnpackEncodedString(DFA121_eotS);
		private static readonly short[] DFA121_eof = DFA.UnpackEncodedString(DFA121_eofS);
		private static readonly char[] DFA121_min = DFA.UnpackEncodedStringToUnsignedChars(DFA121_minS);
		private static readonly char[] DFA121_max = DFA.UnpackEncodedStringToUnsignedChars(DFA121_maxS);
		private static readonly short[] DFA121_accept = DFA.UnpackEncodedString(DFA121_acceptS);
		private static readonly short[] DFA121_special = DFA.UnpackEncodedString(DFA121_specialS);
		private static readonly short[][] DFA121_transition;

		static DFA121()
		{
			int numStates = DFA121_transitionS.Length;
			DFA121_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA121_transition[i] = DFA.UnpackEncodedString(DFA121_transitionS[i]);
			}
		}

		public DFA121( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 121;
			this.eot = DFA121_eot;
			this.eof = DFA121_eof;
			this.min = DFA121_min;
			this.max = DFA121_max;
			this.accept = DFA121_accept;
			this.special = DFA121_special;
			this.transition = DFA121_transition;
		}

		public override string Description { get { return "()* loopback of 439:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA127 : DFA
	{
		private const string DFA127_eotS =
			"\xB\xFFFF";
		private const string DFA127_eofS =
			"\xB\xFFFF";
		private const string DFA127_minS =
			"\x2\x29\x1\xFFFF\x1\x4D\x1\xFFFF\x2\x29\x2\x4D\x1\x29\x1\x4D";
		private const string DFA127_maxS =
			"\x2\x9E\x1\xFFFF\x1\x9D\x1\xFFFF\x1\x29\x1\x9E\x2\x9D\x1\x29\x1\x9D";
		private const string DFA127_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA127_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA127_transitionS =
			{
				"\x1\x2\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x17\xFFFF\x1\x2\x10\xFFFF\x1\x2",
				"\x1\x3\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x2\x2\x16\xFFFF\x1\x2\x10\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xC\xFFFF"+
				"\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x7\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x10\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xC\xFFFF"+
				"\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xC\xFFFF"+
				"\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x3\xFFFF\x1\x2\xC\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA127_eot = DFA.UnpackEncodedString(DFA127_eotS);
		private static readonly short[] DFA127_eof = DFA.UnpackEncodedString(DFA127_eofS);
		private static readonly char[] DFA127_min = DFA.UnpackEncodedStringToUnsignedChars(DFA127_minS);
		private static readonly char[] DFA127_max = DFA.UnpackEncodedStringToUnsignedChars(DFA127_maxS);
		private static readonly short[] DFA127_accept = DFA.UnpackEncodedString(DFA127_acceptS);
		private static readonly short[] DFA127_special = DFA.UnpackEncodedString(DFA127_specialS);
		private static readonly short[][] DFA127_transition;

		static DFA127()
		{
			int numStates = DFA127_transitionS.Length;
			DFA127_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA127_transition[i] = DFA.UnpackEncodedString(DFA127_transitionS[i]);
			}
		}

		public DFA127( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 127;
			this.eot = DFA127_eot;
			this.eof = DFA127_eof;
			this.min = DFA127_min;
			this.max = DFA127_max;
			this.accept = DFA127_accept;
			this.special = DFA127_special;
			this.transition = DFA127_transition;
		}

		public override string Description { get { return "443:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root528 = new BitSet(new ulong[]{0x1020000000000UL,0x8040000000000000UL,0x41501111UL});
		public static readonly BitSet _global_block_in_root531 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block553 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block555 = new BitSet(new ulong[]{0x1020000000002UL,0x8040000000000000UL,0x41501111UL});
		public static readonly BitSet _func_def_in_node578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node588 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args625 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item646 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _83_in_attribute_item649 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item651 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _90_in_attribute_item654 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item656 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_attribute_item660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_attribute_item678 = new BitSet(new ulong[]{0x2UL,0x80000UL});
		public static readonly BitSet _83_in_attribute_item681 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item683 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _90_in_attribute_item686 = new BitSet(new ulong[]{0x42020000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item688 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_attribute_item692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_attribute717 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _attribute_item_in_attribute719 = new BitSet(new ulong[]{0x0UL,0x80000004000000UL});
		public static readonly BitSet _90_in_attribute722 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _attribute_item_in_attribute724 = new BitSet(new ulong[]{0x0UL,0x80000004000000UL});
		public static readonly BitSet _119_in_attribute728 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute730 = new BitSet(new ulong[]{0x1000000000002UL,0x40000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc749 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc752 = new BitSet(new ulong[]{0x0UL,0x5000000000UL});
		public static readonly BitSet _100_in_global_alloc756 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_global_alloc758 = new BitSet(new ulong[]{0x2UL,0x104000080000UL});
		public static readonly BitSet _108_in_global_alloc763 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _102_in_global_alloc767 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_global_alloc770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_global_alloc830 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_global_alloc832 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_global_alloc835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_global_alloc908 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_global_alloc911 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_global_alloc914 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_global_alloc916 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _attribute_in_global_using953 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_global_using956 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _stmt_using_item_in_global_using958 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _attribute_in_global_typedef982 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_global_typedef985 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_global_typedef987 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_global_typedef989 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_global_typedef991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1015 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_import_def1018 = new BitSet(new ulong[]{0x41000000000002UL});
		public static readonly BitSet _STRING_in_import_def1020 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1024 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_import_def1027 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1029 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _STRING_in_import_def1034 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1036 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1066 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_enum_def1069 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1071 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_enum_def1073 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _ident_in_enum_def1076 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_enum_def1079 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_enum_def1081 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _attribute_in_namespace_def1114 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_namespace_def1117 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_namespace_def1119 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1122 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1125 = new BitSet(new ulong[]{0x1020000000100UL,0x8040000000000000UL,0x41501111UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1127 = new BitSet(new ulong[]{0x1020000000100UL,0x8040000000000000UL,0x41501111UL});
		public static readonly BitSet _global_block_in_namespace_def1130 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1160 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_class_def1163 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1165 = new BitSet(new ulong[]{0x1000000000002UL,0x9000080000UL});
		public static readonly BitSet _generic_parameter_in_class_def1168 = new BitSet(new ulong[]{0x1000000000002UL,0x1000080000UL});
		public static readonly BitSet _83_in_class_def1173 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000UL});
		public static readonly BitSet _func_args_in_class_def1175 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_class_def1177 = new BitSet(new ulong[]{0x1000000000002UL,0x1000000000UL});
		public static readonly BitSet _100_in_class_def1182 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1184 = new BitSet(new ulong[]{0x1000000000002UL,0x4000000UL});
		public static readonly BitSet _90_in_class_def1187 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_class_def1189 = new BitSet(new ulong[]{0x1000000000002UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1196 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_class_def1199 = new BitSet(new ulong[]{0x1020000000100UL,0x8040000000000000UL,0x41501111UL});
		public static readonly BitSet _NEWLINE_in_class_def1201 = new BitSet(new ulong[]{0x1020000000100UL,0x8040000000000000UL,0x41501111UL});
		public static readonly BitSet _global_block_in_class_def1204 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1249 = new BitSet(new ulong[]{0x2UL,0x40000000020000UL});
		public static readonly BitSet _81_in_type_name1253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_type_name1269 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_type_name1271 = new BitSet(new ulong[]{0x0UL,0x80000004000000UL});
		public static readonly BitSet _90_in_type_name1274 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_type_name1276 = new BitSet(new ulong[]{0x0UL,0x80000004000000UL});
		public static readonly BitSet _119_in_type_name1280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1318 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _85_in_type_star1322 = new BitSet(new ulong[]{0x2UL,0x200000UL});
		public static readonly BitSet _type_ident_in_type_template_type1368 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_type_template_type1372 = new BitSet(new ulong[]{0x20000000000UL,0x800000000000UL,0x400001UL});
		public static readonly BitSet _type_name_in_type_template_type1375 = new BitSet(new ulong[]{0x0UL,0x800004000000UL});
		public static readonly BitSet _90_in_type_template_type1378 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_type_template_type1380 = new BitSet(new ulong[]{0x0UL,0x800004000000UL});
		public static readonly BitSet _111_in_type_template_type1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_type_ident1426 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_type_ident1429 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_type_ident1432 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1457 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_generic_parameter_inside1460 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1462 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _103_in_generic_parameter1484 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1486 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_generic_parameter1488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1503 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_func_args1506 = new BitSet(new ulong[]{0x20000000000UL,0x4000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1508 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1530 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_func_args_item1532 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_func_args_item1534 = new BitSet(new ulong[]{0x2UL,0x104000080000UL});
		public static readonly BitSet _108_in_func_args_item1539 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _102_in_func_args_item1543 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_func_args_item1546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_func_args_item1594 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_func_args_item1596 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_func_args_item1599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_func_args_item1656 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1671 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x40400001UL});
		public static readonly BitSet _type_name_in_func_def1674 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_func_def1677 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_func_def1680 = new BitSet(new ulong[]{0x0UL,0x8000080000UL});
		public static readonly BitSet _generic_parameter_in_func_def1682 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_func_def1685 = new BitSet(new ulong[]{0x20000000000UL,0x4000100000UL});
		public static readonly BitSet _func_args_in_func_def1687 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_func_def1690 = new BitSet(new ulong[]{0x1000000000000UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1693 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_func_def1745 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_func_def1747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1788 = new BitSet(new ulong[]{0x1020000000100UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1790 = new BitSet(new ulong[]{0x1020000000100UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _stmt_in_stmt_block1794 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1796 = new BitSet(new ulong[]{0x1020000000100UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _DEDENT_in_stmt_block1801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1860 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4A000C0UL});
		public static readonly BitSet _135_in_stmt_expr1870 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_expr1872 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4A000C0UL});
		public static readonly BitSet _149_in_stmt_expr1901 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_expr1903 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4A000C0UL});
		public static readonly BitSet _154_in_stmt_expr1932 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_expr1934 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4A000C0UL});
		public static readonly BitSet _151_in_stmt_expr1963 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_expr1965 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4A000C0UL});
		public static readonly BitSet _134_in_stmt_expr1994 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _for_item_in_stmt_expr1996 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x4A000C0UL});
		public static readonly BitSet _90_in_stmt_expr1999 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _for_item_in_stmt_expr2001 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x4A000C0UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2053 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_expr_item2068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_defer2079 = new BitSet(new ulong[]{0x20000000000UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _stmt_in_stmt_defer2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_defer2094 = new BitSet(new ulong[]{0x20000000000UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _stmt_in_stmt_defer2096 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_typedef2115 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2117 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_stmt_typedef2119 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_stmt_typedef2121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_using_item2144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_stmt_using2152 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2154 = new BitSet(new ulong[]{0x20000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _143_in_stmt_return2175 = new BitSet(new ulong[]{0x42020000000002UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_return2177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_stmt_if2198 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_if2200 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2203 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2206 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2209 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_stmt_if2212 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2214 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_if2249 = new BitSet(new ulong[]{0x20000000000UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _stmt_in_stmt_if2251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_if2276 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_if2278 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2281 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2284 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2287 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_stmt_if2290 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2292 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_if2331 = new BitSet(new ulong[]{0x20000000000UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _stmt_in_stmt_if2333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_while2368 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_while2370 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2374 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_while2401 = new BitSet(new ulong[]{0x20000000000UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _stmt_in_stmt_while2403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_while2431 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_while2433 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x20000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2437 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_while2464 = new BitSet(new ulong[]{0x20000000000UL,0x20000000080000UL,0x5B988E2UL});
		public static readonly BitSet _stmt_in_stmt_while2466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_stmt_while2494 = new BitSet(new ulong[]{0x43020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_while2496 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2499 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2524 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_for_range2526 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_for_range2530 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40004UL});
		public static readonly BitSet _146_in_for_range2533 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_for_range2537 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_for_range2540 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_for_range2544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_for_range2573 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_for_range2577 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_for_range2580 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_for_range2584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_stmt_for2677 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _for_item_in_stmt_for2681 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _90_in_stmt_for2684 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _for_item_in_stmt_for2686 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2690 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_try2724 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2726 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2729 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2731 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_stmt_try2734 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2736 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2738 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_switch_item2764 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_switch_item2766 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _90_in_switch_item2769 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_switch_item2771 = new BitSet(new ulong[]{0x1000000000000UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item2775 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item2778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_stmt_switch2800 = new BitSet(new ulong[]{0x43020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_switch2802 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2805 = new BitSet(new ulong[]{0x1040000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch2808 = new BitSet(new ulong[]{0x1000000000100UL,0x0UL,0x2000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2811 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch2814 = new BitSet(new ulong[]{0x1000000000100UL,0x0UL,0x2000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2818 = new BitSet(new ulong[]{0x1000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2844 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_ident_list2847 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_ident_list2849 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2871 = new BitSet(new ulong[]{0x0UL,0x5000000000UL});
		public static readonly BitSet _100_in_stmt_alloc2875 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_stmt_alloc2877 = new BitSet(new ulong[]{0x2UL,0x104000080000UL});
		public static readonly BitSet _108_in_stmt_alloc2882 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _102_in_stmt_alloc2886 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_alloc2889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_stmt_alloc2937 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2939 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_stmt_alloc2942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_stmt_alloc3003 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_alloc3007 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_stmt_alloc3010 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_alloc3012 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3038 = new BitSet(new ulong[]{0x2UL,0x214140822448000UL,0x10000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3042 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_stmt_modify3045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_modify3059 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _modify_expr_in_stmt_modify3062 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3075 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_list_expr3086 = new BitSet(new ulong[]{0x43060000000100UL,0xE000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _90_in_list_expr3090 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3094 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _INDENT_in_list_expr3098 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _DEDENT_in_list_expr3102 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _list_expr_in_list_expr3106 = new BitSet(new ulong[]{0x1040000000100UL,0x80000004000000UL});
		public static readonly BitSet _90_in_list_expr3110 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3114 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _INDENT_in_list_expr3118 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _DEDENT_in_list_expr3122 = new BitSet(new ulong[]{0x43060000000100UL,0x6000001DAA1000UL,0x40002000UL});
		public static readonly BitSet _list_expr_in_list_expr3126 = new BitSet(new ulong[]{0x1040000000100UL,0x80000004000000UL});
		public static readonly BitSet _90_in_list_expr3133 = new BitSet(new ulong[]{0x1040000000100UL,0x80000004000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3137 = new BitSet(new ulong[]{0x1040000000100UL,0x80000004000000UL});
		public static readonly BitSet _INDENT_in_list_expr3141 = new BitSet(new ulong[]{0x1040000000100UL,0x80000004000000UL});
		public static readonly BitSet _DEDENT_in_list_expr3145 = new BitSet(new ulong[]{0x1040000000100UL,0x80000004000000UL});
		public static readonly BitSet _119_in_list_expr3149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr3163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_lambda_expr3174 = new BitSet(new ulong[]{0x20000000000UL,0x4000100000UL});
		public static readonly BitSet _func_args_in_lambda_expr3176 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_lambda_expr3179 = new BitSet(new ulong[]{0x0UL,0x400040000000UL});
		public static readonly BitSet _94_in_lambda_expr3183 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_lambda_expr3185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_lambda_expr3225 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_lambda_expr3227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr3247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr3304 = new BitSet(new ulong[]{0x2UL,0x204144822448000UL,0x10000000UL});
		public static readonly BitSet _set_in_modify_expr3308 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3353 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_modify_expr3362 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3365 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3378 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3390 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_cond_expr3399 = new BitSet(new ulong[]{0x42020000000002UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3405 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_cond_expr3409 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3527 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20004000UL});
		public static readonly BitSet _or_op_in_or_expr3538 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _and_expr_in_or_expr3542 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20004000UL});
		public static readonly BitSet _bit_or_in_and_expr3584 = new BitSet(new ulong[]{0x2UL,0x800000000010000UL});
		public static readonly BitSet _and_op_in_and_expr3595 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _bit_or_in_and_expr3599 = new BitSet(new ulong[]{0x2UL,0x800000000010000UL});
		public static readonly BitSet _bit_xor_in_bit_or3630 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_bit_or3639 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _bit_xor_in_bit_or3643 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000UL});
		public static readonly BitSet _bit_and_in_bit_xor3673 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _120_in_bit_xor3682 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _bit_and_in_bit_xor3686 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3716 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_bit_and3725 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3729 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _chain_op_in_chain_list3821 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _infix_expr_in_chain_list3823 = new BitSet(new ulong[]{0x2UL,0x1A88000002000UL,0x600UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3837 = new BitSet(new ulong[]{0x2UL,0x1A88000002000UL,0x600UL});
		public static readonly BitSet _103_in_cmp_expr3847 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3851 = new BitSet(new ulong[]{0x20000000002UL,0x1A88000002000UL,0x600UL});
		public static readonly BitSet _ident_in_cmp_expr3857 = new BitSet(new ulong[]{0x20000000000UL,0x800000000000UL});
		public static readonly BitSet _111_in_cmp_expr3860 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_cmp_expr3862 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_cmp_expr3864 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_cmp_expr3867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr3936 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr4013 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4017 = new BitSet(new ulong[]{0x2UL,0x1A88000002000UL,0x600UL});
		public static readonly BitSet _chain_list_in_cmp_expr4021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr4112 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr4122 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _shift_expr_in_infix_expr4126 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr4169 = new BitSet(new ulong[]{0x2UL,0x2020000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr4178 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _add_expr_in_shift_expr4182 = new BitSet(new ulong[]{0x2UL,0x2020000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr4212 = new BitSet(new ulong[]{0x2UL,0x8800000UL});
		public static readonly BitSet _87_in_add_expr4222 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _mul_expr_in_add_expr4226 = new BitSet(new ulong[]{0x2UL,0x8800000UL});
		public static readonly BitSet _91_in_add_expr4251 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _mul_expr_in_add_expr4255 = new BitSet(new ulong[]{0x2UL,0x8800000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4293 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _85_in_mul_expr4303 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4307 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _98_in_mul_expr4337 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4341 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _78_in_mul_expr4371 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4375 = new BitSet(new ulong[]{0x2UL,0x400204000UL});
		public static readonly BitSet _cast_expr_in_selector_expr4418 = new BitSet(new ulong[]{0x2UL,0x280000000UL});
		public static readonly BitSet _95_in_selector_expr4428 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4432 = new BitSet(new ulong[]{0x2UL,0x280000000UL});
		public static readonly BitSet _97_in_selector_expr4458 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_selector_expr4463 = new BitSet(new ulong[]{0x2UL,0x280000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4503 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_cast_expr4512 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_cast_expr4514 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_cast_expr4516 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_cast_expr4518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4576 = new BitSet(new ulong[]{0x42020000000000UL,0x20000019AA1000UL,0x40002000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_prefix_expr4594 = new BitSet(new ulong[]{0x20000000000UL,0x0UL,0x400001UL});
		public static readonly BitSet _type_name_in_prefix_expr4596 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_prefix_expr4598 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_prefix_expr4600 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_prefix_expr4603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4631 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_expr_list4634 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_expr_list4637 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4653 = new BitSet(new ulong[]{0x2UL,0x40000151080000UL});
		public static readonly BitSet _88_in_suffix_expr4663 = new BitSet(new ulong[]{0x2UL,0x40000151080000UL});
		public static readonly BitSet _92_in_suffix_expr4689 = new BitSet(new ulong[]{0x2UL,0x40000151080000UL});
		public static readonly BitSet _96_in_suffix_expr4712 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4714 = new BitSet(new ulong[]{0x2UL,0x40000151080000UL});
		public static readonly BitSet _94_in_suffix_expr4739 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4741 = new BitSet(new ulong[]{0x2UL,0x40000151080000UL});
		public static readonly BitSet _83_in_suffix_expr4766 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4768 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_suffix_expr4771 = new BitSet(new ulong[]{0x2UL,0x40000151080000UL});
		public static readonly BitSet _118_in_suffix_expr4795 = new BitSet(new ulong[]{0x42020000000000UL,0xE0000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4797 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_suffix_expr4800 = new BitSet(new ulong[]{0x2UL,0x40000151080000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_atom_expr4861 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_atom_expr4863 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_atom_expr4876 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_atom_expr4880 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _90_in_atom_expr4885 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_in_atom_expr4887 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_atom_expr4891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_atom_expr4918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4952 = new BitSet(new ulong[]{0x2UL,0x40008151080000UL});
		public static readonly BitSet _88_in_lvalue_item4962 = new BitSet(new ulong[]{0x2UL,0x40008151080000UL});
		public static readonly BitSet _92_in_lvalue_item4990 = new BitSet(new ulong[]{0x2UL,0x40008151080000UL});
		public static readonly BitSet _96_in_lvalue_item5015 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item5017 = new BitSet(new ulong[]{0x2UL,0x40008151080000UL});
		public static readonly BitSet _94_in_lvalue_item5044 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_item5046 = new BitSet(new ulong[]{0x2UL,0x40008151080000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item5073 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_lvalue_item5076 = new BitSet(new ulong[]{0x42020000000000UL,0x60000019BA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_lvalue_item5078 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_lvalue_item5081 = new BitSet(new ulong[]{0x2UL,0x40008151080000UL});
		public static readonly BitSet _118_in_lvalue_item5110 = new BitSet(new ulong[]{0x42020000000000UL,0xE0000019AA1000UL,0x40002000UL});
		public static readonly BitSet _expr_list_in_lvalue_item5112 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_lvalue_item5115 = new BitSet(new ulong[]{0x2UL,0x40008151080000UL});
		public static readonly BitSet _ident_in_lvalue_atom5154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_lvalue_atom5159 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom5161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_lvalue5180 = new BitSet(new ulong[]{0x20000000000UL,0x20000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5182 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_lvalue5185 = new BitSet(new ulong[]{0x20000000000UL,0x20000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5187 = new BitSet(new ulong[]{0x0UL,0x4100000UL});
		public static readonly BitSet _84_in_lvalue5191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue5205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident5216 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_ident5219 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _IDENT_in_ident5221 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _122_in_infix_func5234 = new BitSet(new ulong[]{0x20000000000UL});
		public static readonly BitSet _ident_in_infix_func5237 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_infix_func5239 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
