//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-18 14:04:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'is'", "'isnt'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Expr=48;
	public const int Match_Expr_Item=49;
	public const int Match_Tuple=50;
	public const int NEWLINE=51;
	public const int NUMBER=52;
	public const int Namespace=53;
	public const int Right_Bracket=54;
	public const int Root=55;
	public const int SP=56;
	public const int STRING=57;
	public const int Stmt_Block=58;
	public const int Stmt_Defer=59;
	public const int Stmt_Finally=60;
	public const int Stmt_For=61;
	public const int Stmt_If=62;
	public const int Stmt_Loop=63;
	public const int Stmt_Return=64;
	public const int Stmt_Switch=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Switch_Item=72;
	public const int Type_Array=73;
	public const int Type_Ident=74;
	public const int Type_Ref=75;
	public const int Type_Star=76;
	public const int Type_Template=77;
	public const int White_Space=78;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:203:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(203, 1);
		try
		{
			// SugarCpp.g:204:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:204:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(204, 4);
			// SugarCpp.g:204:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:204:4: NEWLINE
					{
					DebugLocation(204, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root546);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(204, 13);
			PushFollow(Follow._global_block_in_root549);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(204, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root551);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 204:30: -> ^( Root global_block )
			{
				DebugLocation(204, 33);
				// SugarCpp.g:204:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(204, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(204, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:207:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(207, 1);
		try
		{
			// SugarCpp.g:208:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:208:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(208, 4);
			// SugarCpp.g:208:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==122||(LA3_0>=131 && LA3_0<=132)||LA3_0==136||LA3_0==140||LA3_0==145||LA3_0==150||LA3_0==155||LA3_0==157||LA3_0==159||LA3_0==166))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:208:5: node ( NEWLINE )+
					{
					DebugLocation(208, 5);
					PushFollow(Follow._node_in_global_block571);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(208, 10);
					// SugarCpp.g:208:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:208:10: NEWLINE
							{
							DebugLocation(208, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block573);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 208:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(208, 24);
				// SugarCpp.g:208:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(208, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(208, 39);
				// SugarCpp.g:208:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(208, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:211:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(211, 1);
		try
		{
			// SugarCpp.g:212:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:212:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._func_def_in_node596);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:213:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 4);
				PushFollow(Follow._class_def_in_node601);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:214:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(214, 4);
				PushFollow(Follow._enum_def_in_node606);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:215:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._global_alloc_in_node611);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:216:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._global_using_in_node616);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:217:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._global_typedef_in_node621);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:218:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._import_def_in_node626);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:219:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._namespace_def_in_node631);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:222:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args643); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args648); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:225:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._ident_in_attribute_args653);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:228:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(228, 1);
		try
		{
			// SugarCpp.g:229:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==132))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:229:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(229, 4);
				PushFollow(Follow._ident_in_attribute_item664);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(229, 10);
				// SugarCpp.g:229:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==86))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:229:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(229, 11);
					char_literal18=(IToken)Match(input,86,Follow._86_in_attribute_item667);  
					stream_86.Add(char_literal18);

					DebugLocation(229, 15);
					PushFollow(Follow._attribute_args_in_attribute_item669);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(229, 30);
					// SugarCpp.g:229:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==93))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:229:31: ',' attribute_args
							{
							DebugLocation(229, 31);
							char_literal20=(IToken)Match(input,93,Follow._93_in_attribute_item672);  
							stream_93.Add(char_literal20);

							DebugLocation(229, 35);
							PushFollow(Follow._attribute_args_in_attribute_item674);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(229, 52);
					char_literal22=(IToken)Match(input,87,Follow._87_in_attribute_item678);  
					stream_87.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 229:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(229, 61);
					// SugarCpp.g:229:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(229, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(229, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(229, 79);
					// SugarCpp.g:229:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(229, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:230:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(230, 4);
				string_literal23=(IToken)Match(input,132,Follow._132_in_attribute_item696);  
				stream_132.Add(string_literal23);

				DebugLocation(230, 12);
				// SugarCpp.g:230:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==86))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:230:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(230, 13);
					char_literal24=(IToken)Match(input,86,Follow._86_in_attribute_item699);  
					stream_86.Add(char_literal24);

					DebugLocation(230, 17);
					PushFollow(Follow._attribute_args_in_attribute_item701);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(230, 32);
					// SugarCpp.g:230:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==93))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:230:33: ',' attribute_args
							{
							DebugLocation(230, 33);
							char_literal26=(IToken)Match(input,93,Follow._93_in_attribute_item704);  
							stream_93.Add(char_literal26);

							DebugLocation(230, 37);
							PushFollow(Follow._attribute_args_in_attribute_item706);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(230, 54);
					char_literal28=(IToken)Match(input,87,Follow._87_in_attribute_item710);  
					stream_87.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 132, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 230:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(230, 63);
					// SugarCpp.g:230:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(230, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(230, 75);
					adaptor.AddChild(root_1, stream_132.NextNode());
					DebugLocation(230, 83);
					// SugarCpp.g:230:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(230, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:233:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(233, 1);
		try
		{
			// SugarCpp.g:234:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:234:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(234, 4);
			// SugarCpp.g:234:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==122))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:234:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(234, 5);
					char_literal29=(IToken)Match(input,122,Follow._122_in_attribute735);  
					stream_122.Add(char_literal29);

					DebugLocation(234, 9);
					PushFollow(Follow._attribute_item_in_attribute737);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(234, 24);
					// SugarCpp.g:234:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==93))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:234:25: ',' attribute_item
							{
							DebugLocation(234, 25);
							char_literal31=(IToken)Match(input,93,Follow._93_in_attribute740);  
							stream_93.Add(char_literal31);

							DebugLocation(234, 29);
							PushFollow(Follow._attribute_item_in_attribute742);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(234, 46);
					char_literal33=(IToken)Match(input,123,Follow._123_in_attribute746);  
					stream_123.Add(char_literal33);

					DebugLocation(234, 50);
					// SugarCpp.g:234:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:234:50: NEWLINE
							{
							DebugLocation(234, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute748);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 234:61: -> ( attribute_item )+
			{
				DebugLocation(234, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(234, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:237:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(237, 1);
		try
		{
			// SugarCpp.g:238:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:238:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(238, 4);
			// SugarCpp.g:238:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==122))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:4: attribute
				{
				DebugLocation(238, 4);
				PushFollow(Follow._attribute_in_global_alloc767);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(238, 15);
			PushFollow(Follow._ident_list_in_global_alloc770);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(238, 26);
			// SugarCpp.g:238:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==103))
			{
				alt19 = 1;
			}
			else if ((LA19_0==105))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(238, 28);
				char_literal37=(IToken)Match(input,103,Follow._103_in_global_alloc774);  
				stream_103.Add(char_literal37);

				DebugLocation(238, 32);
				PushFollow(Follow._type_name_in_global_alloc776);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(238, 42);
				// SugarCpp.g:238:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 105:
				case 112:
					{
					alt17 = 1;
					}
					break;
				case 86:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:44: ( '=' | ':=' ) expr
					{
					DebugLocation(238, 44);
					// SugarCpp.g:238:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==112))
					{
						alt15 = 1;
					}
					else if ((LA15_0==105))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:238:45: '='
						{
						DebugLocation(238, 45);
						char_literal39=(IToken)Match(input,112,Follow._112_in_global_alloc781);  
						stream_112.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:238:51: ':='
						{
						DebugLocation(238, 51);
						string_literal40=(IToken)Match(input,105,Follow._105_in_global_alloc785);  
						stream_105.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(238, 57);
					PushFollow(Follow._expr_in_global_alloc788);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 238:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(238, 65);
						// SugarCpp.g:238:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(238, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(238, 84);
						// SugarCpp.g:238:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(238, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(238, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(238, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(238, 116);
						// SugarCpp.g:238:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(238, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:239:43: '(' ( expr_list )? ')'
					{
					DebugLocation(239, 43);
					char_literal42=(IToken)Match(input,86,Follow._86_in_global_alloc848);  
					stream_86.Add(char_literal42);

					DebugLocation(239, 47);
					// SugarCpp.g:239:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==79||LA16_0==84||LA16_0==86||LA16_0==88||(LA16_0>=90 && LA16_0<=91)||(LA16_0>=94 && LA16_0<=95)||(LA16_0>=121 && LA16_0<=122)||LA16_0==144||(LA16_0>=146 && LA16_0<=147)||LA16_0==166))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:239:47: expr_list
						{
						DebugLocation(239, 47);
						PushFollow(Follow._expr_list_in_global_alloc850);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(239, 58);
					char_literal44=(IToken)Match(input,87,Follow._87_in_global_alloc853);  
					stream_87.Add(char_literal44);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 239:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(239, 65);
						// SugarCpp.g:239:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(239, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(239, 86);
						// SugarCpp.g:239:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(239, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(239, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(239, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(239, 118);
						// SugarCpp.g:239:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(239, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:240:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 240:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(240, 20);
						// SugarCpp.g:240:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(240, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(240, 39);
						// SugarCpp.g:240:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(240, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(240, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(240, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:242:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(242, 10);
				string_literal45=(IToken)Match(input,105,Follow._105_in_global_alloc926);  
				stream_105.Add(string_literal45);

				DebugLocation(242, 15);
				// SugarCpp.g:242:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:242:16: expr ( ',' expr )*
				{
				DebugLocation(242, 16);
				PushFollow(Follow._expr_in_global_alloc929);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(242, 21);
				// SugarCpp.g:242:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==93))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:22: ',' expr
						{
						DebugLocation(242, 22);
						char_literal47=(IToken)Match(input,93,Follow._93_in_global_alloc932);  
						stream_93.Add(char_literal47);

						DebugLocation(242, 26);
						PushFollow(Follow._expr_in_global_alloc934);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: 105, ident_list, attribute, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(242, 37);
					// SugarCpp.g:242:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_105.NextNode(), root_1);

					DebugLocation(242, 44);
					// SugarCpp.g:242:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(242, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(242, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(242, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(242, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:246:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(246, 1);
		try
		{
			// SugarCpp.g:247:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(247, 4);
			// SugarCpp.g:247:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==122))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:4: attribute
				{
				DebugLocation(247, 4);
				PushFollow(Follow._attribute_in_global_using971);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(247, 15);
			string_literal50=(IToken)Match(input,159,Follow._159_in_global_using974);  
			stream_159.Add(string_literal50);

			DebugLocation(247, 23);
			// SugarCpp.g:247:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==145))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:247:23: stmt_using_item
					{
					DebugLocation(247, 23);
					PushFollow(Follow._stmt_using_item_in_global_using976);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(247, 43);
				// SugarCpp.g:247:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(247, 56);
				// SugarCpp.g:247:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(247, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(247, 67);
				// SugarCpp.g:247:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(247, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:250:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(250, 1);
		try
		{
			// SugarCpp.g:251:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:251:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(251, 4);
			// SugarCpp.g:251:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==122))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:251:4: attribute
				{
				DebugLocation(251, 4);
				PushFollow(Follow._attribute_in_global_typedef1000);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(251, 15);
			string_literal53=(IToken)Match(input,155,Follow._155_in_global_typedef1003);  
			stream_155.Add(string_literal53);

			DebugLocation(251, 25);
			PushFollow(Follow._ident_in_global_typedef1005);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(251, 31);
			char_literal55=(IToken)Match(input,112,Follow._112_in_global_typedef1007);  
			stream_112.Add(char_literal55);

			DebugLocation(251, 35);
			PushFollow(Follow._type_name_in_global_typedef1009);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: type_name, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 251:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(251, 48);
				// SugarCpp.g:251:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(251, 63);
				// SugarCpp.g:251:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(251, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(251, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(251, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:254:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(254, 1);
		try
		{
			// SugarCpp.g:255:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:255:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(255, 4);
			// SugarCpp.g:255:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==122))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:4: attribute
				{
				DebugLocation(255, 4);
				PushFollow(Follow._attribute_in_import_def1033);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(255, 15);
			string_literal58=(IToken)Match(input,140,Follow._140_in_import_def1036);  
			stream_140.Add(string_literal58);

			DebugLocation(255, 24);
			// SugarCpp.g:255:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:24: STRING
				{
				DebugLocation(255, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1038);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(255, 32);
			// SugarCpp.g:255:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(255, 33);
				// SugarCpp.g:255:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:33: NEWLINE
						{
						DebugLocation(255, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1042);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(255, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1045);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(255, 49);
				// SugarCpp.g:255:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:49: NEWLINE
						{
						DebugLocation(255, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1047);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(255, 59);
				// SugarCpp.g:255:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:60: STRING ( NEWLINE )+
						{
						DebugLocation(255, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1052);  
						stream_STRING.Add(STRING63);

						DebugLocation(255, 67);
						// SugarCpp.g:255:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:255:67: NEWLINE
								{
								DebugLocation(255, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1054);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(255, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1059);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(255, 90);
				// SugarCpp.g:255:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(255, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(255, 99);
				// SugarCpp.g:255:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(255, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(255, 110);
				// SugarCpp.g:255:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(255, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:258:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(259, 4);
			// SugarCpp.g:259:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==122))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:4: attribute
				{
				DebugLocation(259, 4);
				PushFollow(Follow._attribute_in_enum_def1084);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(259, 15);
			string_literal67=(IToken)Match(input,136,Follow._136_in_enum_def1087);  
			stream_136.Add(string_literal67);

			DebugLocation(259, 22);
			PushFollow(Follow._ident_in_enum_def1089);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(259, 28);
			char_literal69=(IToken)Match(input,112,Follow._112_in_enum_def1091);  
			stream_112.Add(char_literal69);

			DebugLocation(259, 32);
			// SugarCpp.g:259:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:33: ident ( '|' ident )*
				{
				DebugLocation(259, 33);
				PushFollow(Follow._ident_in_enum_def1094);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(259, 39);
				// SugarCpp.g:259:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==163))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:40: '|' ident
						{
						DebugLocation(259, 40);
						char_literal71=(IToken)Match(input,163,Follow._163_in_enum_def1097);  
						stream_163.Add(char_literal71);

						DebugLocation(259, 44);
						PushFollow(Follow._ident_in_enum_def1099);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(259, 57);
				// SugarCpp.g:259:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(259, 64);
				// SugarCpp.g:259:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(259, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(259, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(259, 81);
				// SugarCpp.g:259:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(259, 94);
				// SugarCpp.g:259:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(259, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:262:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(262, 1);
		try
		{
			// SugarCpp.g:263:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:263:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(263, 4);
			// SugarCpp.g:263:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==122))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:4: attribute
				{
				DebugLocation(263, 4);
				PushFollow(Follow._attribute_in_namespace_def1132);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(263, 15);
			string_literal74=(IToken)Match(input,145,Follow._145_in_namespace_def1135);  
			stream_145.Add(string_literal74);

			DebugLocation(263, 27);
			PushFollow(Follow._ident_in_namespace_def1137);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(263, 33);
			// SugarCpp.g:263:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(263, 34);
				// SugarCpp.g:263:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:34: NEWLINE
						{
						DebugLocation(263, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1140);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(263, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1143);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(263, 50);
				// SugarCpp.g:263:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:50: NEWLINE
						{
						DebugLocation(263, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1145);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(263, 59);
				PushFollow(Follow._global_block_in_namespace_def1148);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(263, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1150);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(263, 84);
				// SugarCpp.g:263:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(263, 96);
				// SugarCpp.g:263:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(263, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(263, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(263, 113);
				// SugarCpp.g:263:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(263, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:266:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(266, 1);
		try
		{
			// SugarCpp.g:267:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:267:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(267, 5);
			// SugarCpp.g:267:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==122))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:5: attribute
				{
				DebugLocation(267, 5);
				PushFollow(Follow._attribute_in_class_def1178);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(267, 16);
			string_literal82=(IToken)Match(input,131,Follow._131_in_class_def1181);  
			stream_131.Add(string_literal82);

			DebugLocation(267, 24);
			PushFollow(Follow._ident_in_class_def1183);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(267, 30);
			// SugarCpp.g:267:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==107))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:31: generic_parameter
				{
				DebugLocation(267, 31);
				PushFollow(Follow._generic_parameter_in_class_def1186);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(267, 51);
			// SugarCpp.g:267:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==86))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:52: '(' func_args ')'
				{
				DebugLocation(267, 52);
				char_literal85=(IToken)Match(input,86,Follow._86_in_class_def1191);  
				stream_86.Add(char_literal85);

				DebugLocation(267, 56);
				PushFollow(Follow._func_args_in_class_def1193);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(267, 66);
				char_literal87=(IToken)Match(input,87,Follow._87_in_class_def1195);  
				stream_87.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(267, 72);
			// SugarCpp.g:267:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==103))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:73: ':' ident ( ',' ident )*
				{
				DebugLocation(267, 73);
				char_literal88=(IToken)Match(input,103,Follow._103_in_class_def1200);  
				stream_103.Add(char_literal88);

				DebugLocation(267, 77);
				PushFollow(Follow._ident_in_class_def1202);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(267, 83);
				// SugarCpp.g:267:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==93))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:84: ',' ident
						{
						DebugLocation(267, 84);
						char_literal90=(IToken)Match(input,93,Follow._93_in_class_def1205);  
						stream_93.Add(char_literal90);

						DebugLocation(267, 88);
						PushFollow(Follow._ident_in_class_def1207);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(267, 98);
			// SugarCpp.g:267:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(267, 99);
				// SugarCpp.g:267:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:99: NEWLINE
						{
						DebugLocation(267, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1214);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(267, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1217);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(267, 115);
				// SugarCpp.g:267:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:115: NEWLINE
						{
						DebugLocation(267, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1219);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(267, 124);
				PushFollow(Follow._global_block_in_class_def1222);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(267, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1224);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: func_args, global_block, attribute, ident, ident, generic_parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(267, 149);
				// SugarCpp.g:267:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(267, 157);
				// SugarCpp.g:267:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(267, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(267, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(267, 174);
				// SugarCpp.g:267:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(267, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(267, 193);
				// SugarCpp.g:267:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(267, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(267, 204);
				// SugarCpp.g:267:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(267, 205);
					// SugarCpp.g:267:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(267, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(267, 218);
					// SugarCpp.g:267:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(267, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(267, 228);
				// SugarCpp.g:267:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(267, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:270:1: type_name : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(270, 1);
		try
		{
			// SugarCpp.g:271:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(271, 4);
			PushFollow(Follow._type_star_in_type_name1267);
			type_star97=type_star();
			PopFollow();

			stream_type_star.Add(type_star97.Tree);
			DebugLocation(271, 14);
			// SugarCpp.g:271:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt46=3;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 84:
				{
				alt46 = 1;
				}
				break;
			case 122:
				{
				alt46 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 86:
			case 87:
			case 93:
			case 105:
			case 106:
			case 112:
			case 115:
			case 138:
			case 139:
			case 156:
			case 158:
			case 162:
			case 166:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:16: '&'
				{
				DebugLocation(271, 16);
				char_literal98=(IToken)Match(input,84,Follow._84_in_type_name1271);  
				stream_84.Add(char_literal98);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 271:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(271, 23);
					// SugarCpp.g:271:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(271, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(271, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:272:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(272, 7);
				char_literal99=(IToken)Match(input,122,Follow._122_in_type_name1287);  
				stream_122.Add(char_literal99);

				DebugLocation(272, 11);
				PushFollow(Follow._expr_in_type_name1289);
				expr100=expr();
				PopFollow();

				stream_expr.Add(expr100.Tree);
				DebugLocation(272, 16);
				// SugarCpp.g:272:16: ( ',' expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==93))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:272:17: ',' expr
						{
						DebugLocation(272, 17);
						char_literal101=(IToken)Match(input,93,Follow._93_in_type_name1292);  
						stream_93.Add(char_literal101);

						DebugLocation(272, 21);
						PushFollow(Follow._expr_in_type_name1294);
						expr102=expr();
						PopFollow();

						stream_expr.Add(expr102.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(272, 28);
				char_literal103=(IToken)Match(input,123,Follow._123_in_type_name1298);  
				stream_123.Add(char_literal103);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 272:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(272, 35);
					// SugarCpp.g:272:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(272, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(272, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(272, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(272, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:273:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 273:7: -> type_star
				{
					DebugLocation(273, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:277:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 15);
		TraceIn("type_star", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(277, 1);
		try
		{
			// SugarCpp.g:278:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:278:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(278, 4);
			PushFollow(Follow._type_template_type_in_type_star1336);
			type_template_type104=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type104.Tree);
			DebugLocation(278, 23);
			// SugarCpp.g:278:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==88))
			{
				alt48 = 1;
			}
			else if ((LA48_0==DEDENT||LA48_0==IDENT||LA48_0==NEWLINE||LA48_0==84||(LA48_0>=86 && LA48_0<=87)||LA48_0==93||(LA48_0>=105 && LA48_0<=106)||LA48_0==112||LA48_0==115||LA48_0==122||(LA48_0>=138 && LA48_0<=139)||LA48_0==156||LA48_0==158||LA48_0==162||LA48_0==166))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:278:25: ( '*' )+
				{
				DebugLocation(278, 25);
				// SugarCpp.g:278:25: ( '*' )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==88))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:278:25: '*'
						{
						DebugLocation(278, 25);
						char_literal105=(IToken)Match(input,88,Follow._88_in_type_star1340);  
						stream_88.Add(char_literal105);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: type_template_type, 88
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 278:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(278, 33);
					// SugarCpp.g:278:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(278, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(278, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(278, 64);
					if (!(stream_88.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_88.HasNext )
					{
						DebugLocation(278, 64);
						adaptor.AddChild(root_1, stream_88.NextNode());

					}
					stream_88.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:279:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:10: -> type_template_type
				{
					DebugLocation(279, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 15);
			LeaveRule("type_star", 15);
			LeaveRule_type_star();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:283:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 16);
		TraceIn("type_template_type", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(283, 1);
		try
		{
			// SugarCpp.g:284:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(284, 4);
			PushFollow(Follow._type_ident_in_type_template_type1386);
			type_ident106=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident106.Tree);
			DebugLocation(284, 15);
			// SugarCpp.g:284:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==107))
			{
				alt51 = 1;
			}
			else if ((LA51_0==DEDENT||LA51_0==IDENT||LA51_0==NEWLINE||LA51_0==84||(LA51_0>=86 && LA51_0<=88)||LA51_0==93||(LA51_0>=105 && LA51_0<=106)||LA51_0==112||LA51_0==115||LA51_0==122||(LA51_0>=138 && LA51_0<=139)||LA51_0==156||LA51_0==158||LA51_0==162||LA51_0==166))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:284:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(284, 17);
				char_literal107=(IToken)Match(input,107,Follow._107_in_type_template_type1390);  
				stream_107.Add(char_literal107);

				DebugLocation(284, 21);
				// SugarCpp.g:284:21: ( type_name ( ',' type_name )* )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==IDENT||LA50_0==132||LA50_0==150||LA50_0==157))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:284:22: type_name ( ',' type_name )*
					{
					DebugLocation(284, 22);
					PushFollow(Follow._type_name_in_type_template_type1393);
					type_name108=type_name();
					PopFollow();

					stream_type_name.Add(type_name108.Tree);
					DebugLocation(284, 32);
					// SugarCpp.g:284:32: ( ',' type_name )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==93))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:284:33: ',' type_name
							{
							DebugLocation(284, 33);
							char_literal109=(IToken)Match(input,93,Follow._93_in_type_template_type1396);  
							stream_93.Add(char_literal109);

							DebugLocation(284, 37);
							PushFollow(Follow._type_name_in_type_template_type1398);
							type_name110=type_name();
							PopFollow();

							stream_type_name.Add(type_name110.Tree);

							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(284, 51);
				char_literal111=(IToken)Match(input,115,Follow._115_in_type_template_type1404);  
				stream_115.Add(char_literal111);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(284, 58);
					// SugarCpp.g:284:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(284, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(284, 85);
					// SugarCpp.g:284:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(284, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:285:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:8: -> type_ident
				{
					DebugLocation(285, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 16);
			LeaveRule("type_template_type", 16);
			LeaveRule_type_template_type();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:289:1: type_ident : ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 17);
		TraceIn("type_ident", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		IToken string_literal114 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal113_tree = default(CommonTree);
		CommonTree string_literal114_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(289, 1);
		try
		{
			// SugarCpp.g:290:2: ( ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:290:4: ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident
			{
			DebugLocation(290, 4);
			// SugarCpp.g:290:4: ( 'const' )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==132))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:4: 'const'
				{
				DebugLocation(290, 4);
				string_literal112=(IToken)Match(input,132,Follow._132_in_type_ident1444);  
				stream_132.Add(string_literal112);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(290, 13);
			// SugarCpp.g:290:13: ( 'unsigned' )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==157))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:13: 'unsigned'
				{
				DebugLocation(290, 13);
				string_literal113=(IToken)Match(input,157,Follow._157_in_type_ident1447);  
				stream_157.Add(string_literal113);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(290, 25);
			// SugarCpp.g:290:25: ( 'struct' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==150))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:25: 'struct'
				{
				DebugLocation(290, 25);
				string_literal114=(IToken)Match(input,150,Follow._150_in_type_ident1450);  
				stream_150.Add(string_literal114);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(290, 35);
			PushFollow(Follow._ident_in_type_ident1453);
			ident115=ident();
			PopFollow();

			stream_ident.Add(ident115.Tree);


			{
			// AST REWRITE
			// elements: 150, 132, ident, 157
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 290:41: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
			{
				DebugLocation(290, 44);
				// SugarCpp.g:290:44: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(290, 57);
				// SugarCpp.g:290:57: ( 'const' )?
				if (stream_132.HasNext)
				{
					DebugLocation(290, 57);
					adaptor.AddChild(root_1, stream_132.NextNode());

				}
				stream_132.Reset();
				DebugLocation(290, 66);
				// SugarCpp.g:290:66: ( 'unsigned' )?
				if (stream_157.HasNext)
				{
					DebugLocation(290, 66);
					adaptor.AddChild(root_1, stream_157.NextNode());

				}
				stream_157.Reset();
				DebugLocation(290, 78);
				// SugarCpp.g:290:78: ( 'struct' )?
				if (stream_150.HasNext)
				{
					DebugLocation(290, 78);
					adaptor.AddChild(root_1, stream_150.NextNode());

				}
				stream_150.Reset();
				DebugLocation(290, 88);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 17);
			LeaveRule("type_ident", 17);
			LeaveRule_type_ident();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:293:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 18);
		TraceIn("generic_parameter_inside", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(293, 1);
		try
		{
			// SugarCpp.g:294:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:294:4: ident ( ',' ident )*
			{
			DebugLocation(294, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1481);
			ident116=ident();
			PopFollow();

			stream_ident.Add(ident116.Tree);
			DebugLocation(294, 10);
			// SugarCpp.g:294:10: ( ',' ident )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==93))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:294:11: ',' ident
					{
					DebugLocation(294, 11);
					char_literal117=(IToken)Match(input,93,Follow._93_in_generic_parameter_inside1484);  
					stream_93.Add(char_literal117);

					DebugLocation(294, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1486);
					ident118=ident();
					PopFollow();

					stream_ident.Add(ident118.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 294:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(294, 26);
				// SugarCpp.g:294:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(294, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(294, 47);
				// SugarCpp.g:294:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(294, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 18);
			LeaveRule("generic_parameter_inside", 18);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:297:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 19);
		TraceIn("generic_parameter", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(297, 1);
		try
		{
			// SugarCpp.g:298:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:298:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(298, 4);
			char_literal119=(IToken)Match(input,107,Follow._107_in_generic_parameter1508);  
			stream_107.Add(char_literal119);

			DebugLocation(298, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1510);
			generic_parameter_inside120=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside120.Tree);
			DebugLocation(298, 33);
			char_literal121=(IToken)Match(input,115,Follow._115_in_generic_parameter1512);  
			stream_115.Add(char_literal121);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 298:37: -> generic_parameter_inside
			{
				DebugLocation(298, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 19);
			LeaveRule("generic_parameter", 19);
			LeaveRule_generic_parameter();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:301:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(302, 4);
			PushFollow(Follow._func_args_item_in_func_args1527);
			func_args_item122=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item122.Tree);
			DebugLocation(302, 19);
			// SugarCpp.g:302:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==93))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:302:20: ',' func_args_item
					{
					DebugLocation(302, 20);
					char_literal123=(IToken)Match(input,93,Follow._93_in_func_args1530);  
					stream_93.Add(char_literal123);

					DebugLocation(302, 24);
					PushFollow(Follow._func_args_item_in_func_args1532);
					func_args_item124=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item124.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(302, 44);
				// SugarCpp.g:302:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(302, 56);
				// SugarCpp.g:302:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(302, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:305:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 21);
		TraceIn("func_args_item", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken string_literal129 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken string_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree string_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(305, 1);
		try
		{
			// SugarCpp.g:306:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt60=2;
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==IDENT))
			{
				alt60 = 1;
			}
			else if ((LA60_0==105))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:306:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(306, 4);
				PushFollow(Follow._ident_list_in_func_args_item1554);
				ident_list125=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list125.Tree);
				DebugLocation(306, 15);
				char_literal126=(IToken)Match(input,103,Follow._103_in_func_args_item1556);  
				stream_103.Add(char_literal126);

				DebugLocation(306, 19);
				PushFollow(Follow._type_name_in_func_args_item1558);
				type_name127=type_name();
				PopFollow();

				stream_type_name.Add(type_name127.Tree);
				DebugLocation(306, 29);
				// SugarCpp.g:306:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt59=3;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				switch (input.LA(1))
				{
				case 105:
				case 112:
					{
					alt59 = 1;
					}
					break;
				case 86:
					{
					alt59 = 2;
					}
					break;
				case 87:
				case 93:
					{
					alt59 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:306:31: ( '=' | ':=' ) expr
					{
					DebugLocation(306, 31);
					// SugarCpp.g:306:31: ( '=' | ':=' )
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==112))
					{
						alt57 = 1;
					}
					else if ((LA57_0==105))
					{
						alt57 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:306:32: '='
						{
						DebugLocation(306, 32);
						char_literal128=(IToken)Match(input,112,Follow._112_in_func_args_item1563);  
						stream_112.Add(char_literal128);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:306:38: ':='
						{
						DebugLocation(306, 38);
						string_literal129=(IToken)Match(input,105,Follow._105_in_func_args_item1567);  
						stream_105.Add(string_literal129);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(306, 44);
					PushFollow(Follow._expr_in_func_args_item1570);
					expr130=expr();
					PopFollow();

					stream_expr.Add(expr130.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 306:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(306, 53);
						// SugarCpp.g:306:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(306, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(306, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(306, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(306, 93);
						// SugarCpp.g:306:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(306, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:307:33: '(' ( expr_list )? ')'
					{
					DebugLocation(307, 33);
					char_literal131=(IToken)Match(input,86,Follow._86_in_func_args_item1618);  
					stream_86.Add(char_literal131);

					DebugLocation(307, 37);
					// SugarCpp.g:307:37: ( expr_list )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==IDENT||LA58_0==NUMBER||LA58_0==STRING||LA58_0==79||LA58_0==84||LA58_0==86||LA58_0==88||(LA58_0>=90 && LA58_0<=91)||(LA58_0>=94 && LA58_0<=95)||(LA58_0>=121 && LA58_0<=122)||LA58_0==144||(LA58_0>=146 && LA58_0<=147)||LA58_0==166))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:307:37: expr_list
						{
						DebugLocation(307, 37);
						PushFollow(Follow._expr_list_in_func_args_item1620);
						expr_list132=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list132.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(307, 48);
					char_literal133=(IToken)Match(input,87,Follow._87_in_func_args_item1623);  
					stream_87.Add(char_literal133);



					{
					// AST REWRITE
					// elements: ident_list, expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 307:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(307, 56);
						// SugarCpp.g:307:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(307, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(307, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(307, 98);
						// SugarCpp.g:307:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(307, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:308:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 308:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(308, 18);
						// SugarCpp.g:308:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(308, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(308, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:310:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(310, 8);
				string_literal134=(IToken)Match(input,105,Follow._105_in_func_args_item1680); 
				string_literal134_tree = (CommonTree)adaptor.Create(string_literal134);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal134_tree, root_0);
				DebugLocation(310, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1684);
				modify_expr135=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr135.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 21);
			LeaveRule("func_args_item", 21);
			LeaveRule_func_args_item();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:313:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 22);
		TraceIn("func_def", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal138 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		IToken NEWLINE144 = default(IToken);
		IToken char_literal146 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree NEWLINE144_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(313, 4);
		try
		{
			// SugarCpp.g:314:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:314:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(314, 4);
			// SugarCpp.g:314:4: ( attribute )?
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==122))
			{
				alt61 = 1;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:4: attribute
				{
				DebugLocation(314, 4);
				PushFollow(Follow._attribute_in_func_def1695);
				attribute136=attribute();
				PopFollow();

				stream_attribute.Add(attribute136.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(61); }

			DebugLocation(314, 15);
			// SugarCpp.g:314:15: ( type_name )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			try
			{
				alt62 = dfa62.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:15: type_name
				{
				DebugLocation(314, 15);
				PushFollow(Follow._type_name_in_func_def1698);
				type_name137=type_name();
				PopFollow();

				stream_type_name.Add(type_name137.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(314, 26);
			// SugarCpp.g:314:26: ( '~' )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==166))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:26: '~'
				{
				DebugLocation(314, 26);
				char_literal138=(IToken)Match(input,166,Follow._166_in_func_def1701);  
				stream_166.Add(char_literal138);


				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(314, 31);
			PushFollow(Follow._ident_in_func_def1704);
			ident139=ident();
			PopFollow();

			stream_ident.Add(ident139.Tree);
			DebugLocation(314, 37);
			// SugarCpp.g:314:37: ( generic_parameter )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==107))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:37: generic_parameter
				{
				DebugLocation(314, 37);
				PushFollow(Follow._generic_parameter_in_func_def1706);
				generic_parameter140=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter140.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(314, 56);
			char_literal141=(IToken)Match(input,86,Follow._86_in_func_def1709);  
			stream_86.Add(char_literal141);

			DebugLocation(314, 60);
			// SugarCpp.g:314:60: ( func_args )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==IDENT||LA65_0==105))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:60: func_args
				{
				DebugLocation(314, 60);
				PushFollow(Follow._func_args_in_func_def1711);
				func_args142=func_args();
				PopFollow();

				stream_func_args.Add(func_args142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(314, 71);
			char_literal143=(IToken)Match(input,87,Follow._87_in_func_def1714);  
			stream_87.Add(char_literal143);

			DebugLocation(314, 75);
			// SugarCpp.g:314:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr ) )
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==NEWLINE))
			{
				alt67 = 1;
			}
			else if ((LA67_0==112))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(314, 76);
				// SugarCpp.g:314:76: ( NEWLINE )+
				int cnt66=0;
				try { DebugEnterSubRule(66);
				while (true)
				{
					int alt66=2;
					try { DebugEnterDecision(66, false);
					int LA66_0 = input.LA(1);

					if ((LA66_0==NEWLINE))
					{
						alt66 = 1;
					}


					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:314:76: NEWLINE
						{
						DebugLocation(314, 76);
						NEWLINE144=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1717);  
						stream_NEWLINE.Add(NEWLINE144);


						}
						break;

					default:
						if (cnt66 >= 1)
							goto loop66;

						EarlyExitException eee66 = new EarlyExitException( 66, input );
						DebugRecognitionException(eee66);
						throw eee66;
					}
					cnt66++;
				}
				loop66:
					;

				} finally { DebugExitSubRule(66); }

				DebugLocation(314, 85);
				PushFollow(Follow._stmt_block_in_func_def1720);
				stmt_block145=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block145.Tree);


				{
				// AST REWRITE
				// elements: func_args, generic_parameter, stmt_block, attribute, ident, 166, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(314, 99);
					// SugarCpp.g:314:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(314, 110);
					// SugarCpp.g:314:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(314, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(314, 121);
					// SugarCpp.g:314:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(314, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(314, 132);
					// SugarCpp.g:314:132: ( '~' )?
					if (stream_166.HasNext)
					{
						DebugLocation(314, 132);
						adaptor.AddChild(root_1, stream_166.NextNode());

					}
					stream_166.Reset();
					DebugLocation(314, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(314, 143);
					// SugarCpp.g:314:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(314, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(314, 162);
					// SugarCpp.g:314:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(314, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(314, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:315:23: '=' where_expr
				{
				DebugLocation(315, 23);
				char_literal146=(IToken)Match(input,112,Follow._112_in_func_def1769);  
				stream_112.Add(char_literal146);

				DebugLocation(315, 27);
				PushFollow(Follow._where_expr_in_func_def1771);
				where_expr147=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr147.Tree);


				{
				// AST REWRITE
				// elements: type_name, attribute, where_expr, generic_parameter, ident, 166, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:39: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(315, 42);
					// SugarCpp.g:315:42: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(315, 53);
					// SugarCpp.g:315:53: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(315, 53);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(315, 64);
					// SugarCpp.g:315:64: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(315, 64);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(315, 75);
					// SugarCpp.g:315:75: ( '~' )?
					if (stream_166.HasNext)
					{
						DebugLocation(315, 75);
						adaptor.AddChild(root_1, stream_166.NextNode());

					}
					stream_166.Reset();
					DebugLocation(315, 80);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(315, 86);
					// SugarCpp.g:315:86: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(315, 86);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(315, 105);
					// SugarCpp.g:315:105: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(315, 105);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(315, 116);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 22);
			LeaveRule("func_def", 22);
			LeaveRule_func_def();
		}
		DebugLocation(316, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:318:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 23);
		TraceIn("stmt_block_item", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE149 = default(IToken);
		IToken NEWLINE151 = default(IToken);
		IToken char_literal152 = default(IToken);
		IToken NEWLINE153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE149_tree = default(CommonTree);
		CommonTree NEWLINE151_tree = default(CommonTree);
		CommonTree char_literal152_tree = default(CommonTree);
		CommonTree NEWLINE153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(318, 1);
		try
		{
			// SugarCpp.g:319:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==133||(LA72_0>=137 && LA72_0<=139)||LA72_0==143||LA72_0==151||LA72_0==154||LA72_0==156||LA72_0==158||LA72_0==162))
			{
				alt72 = 1;
			}
			else if ((LA72_0==IDENT||LA72_0==79||LA72_0==84||LA72_0==86||LA72_0==88||(LA72_0>=90 && LA72_0<=91)||(LA72_0>=94 && LA72_0<=95)||LA72_0==121||LA72_0==147||LA72_0==149||LA72_0==155||LA72_0==159||LA72_0==166))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:319:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(319, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item1812);
				stmt_complex148=stmt_complex();
				PopFollow();

				stream_stmt_complex.Add(stmt_complex148.Tree);
				DebugLocation(319, 17);
				// SugarCpp.g:319:17: ( NEWLINE )+
				int cnt68=0;
				try { DebugEnterSubRule(68);
				while (true)
				{
					int alt68=2;
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==NEWLINE))
					{
						alt68 = 1;
					}


					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:319:17: NEWLINE
						{
						DebugLocation(319, 17);
						NEWLINE149=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1814);  
						stream_NEWLINE.Add(NEWLINE149);


						}
						break;

					default:
						if (cnt68 >= 1)
							goto loop68;

						EarlyExitException eee68 = new EarlyExitException( 68, input );
						DebugRecognitionException(eee68);
						throw eee68;
					}
					cnt68++;
				}
				loop68:
					;

				} finally { DebugExitSubRule(68); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 319:26: -> stmt_complex
				{
					DebugLocation(319, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:320:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(320, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item1824);
				stmt_simple150=stmt_simple();
				PopFollow();

				stream_stmt_simple.Add(stmt_simple150.Tree);
				DebugLocation(320, 16);
				// SugarCpp.g:320:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==NEWLINE))
				{
					alt71 = 1;
				}
				else if ((LA71_0==106))
				{
					alt71 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:320:17: ( NEWLINE )+
					{
					DebugLocation(320, 17);
					// SugarCpp.g:320:17: ( NEWLINE )+
					int cnt69=0;
					try { DebugEnterSubRule(69);
					while (true)
					{
						int alt69=2;
						try { DebugEnterDecision(69, false);
						int LA69_0 = input.LA(1);

						if ((LA69_0==NEWLINE))
						{
							alt69 = 1;
						}


						} finally { DebugExitDecision(69); }
						switch (alt69)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:320:17: NEWLINE
							{
							DebugLocation(320, 17);
							NEWLINE151=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1827);  
							stream_NEWLINE.Add(NEWLINE151);


							}
							break;

						default:
							if (cnt69 >= 1)
								goto loop69;

							EarlyExitException eee69 = new EarlyExitException( 69, input );
							DebugRecognitionException(eee69);
							throw eee69;
						}
						cnt69++;
					}
					loop69:
						;

					} finally { DebugExitSubRule(69); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:320:28: ';' ( NEWLINE )*
					{
					DebugLocation(320, 28);
					char_literal152=(IToken)Match(input,106,Follow._106_in_stmt_block_item1832);  
					stream_106.Add(char_literal152);

					DebugLocation(320, 32);
					// SugarCpp.g:320:32: ( NEWLINE )*
					try { DebugEnterSubRule(70);
					while (true)
					{
						int alt70=2;
						try { DebugEnterDecision(70, false);
						int LA70_0 = input.LA(1);

						if ((LA70_0==NEWLINE))
						{
							alt70 = 1;
						}


						} finally { DebugExitDecision(70); }
						switch ( alt70 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:320:32: NEWLINE
							{
							DebugLocation(320, 32);
							NEWLINE153=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1834);  
							stream_NEWLINE.Add(NEWLINE153);


							}
							break;

						default:
							goto loop70;
						}
					}

					loop70:
						;

					} finally { DebugExitSubRule(70); }


					}
					break;

				}
				} finally { DebugExitSubRule(71); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 320:42: -> stmt_simple
				{
					DebugLocation(320, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 23);
			LeaveRule("stmt_block_item", 23);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:323:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 24);
		TraceIn("stmt_block", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT154 = default(IToken);
		IToken NEWLINE155 = default(IToken);
		IToken DEDENT157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT154_tree = default(CommonTree);
		CommonTree NEWLINE155_tree = default(CommonTree);
		CommonTree DEDENT157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(323, 1);
		try
		{
			// SugarCpp.g:324:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:324:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(324, 4);
			INDENT154=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1851);  
			stream_INDENT.Add(INDENT154);

			DebugLocation(324, 11);
			// SugarCpp.g:324:11: ( NEWLINE )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==NEWLINE))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:324:11: NEWLINE
					{
					DebugLocation(324, 11);
					NEWLINE155=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1853);  
					stream_NEWLINE.Add(NEWLINE155);


					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }

			DebugLocation(324, 20);
			// SugarCpp.g:324:20: ( stmt_block_item )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==IDENT||LA74_0==79||LA74_0==84||LA74_0==86||LA74_0==88||(LA74_0>=90 && LA74_0<=91)||(LA74_0>=94 && LA74_0<=95)||LA74_0==121||LA74_0==133||(LA74_0>=137 && LA74_0<=139)||LA74_0==143||LA74_0==147||LA74_0==149||LA74_0==151||(LA74_0>=154 && LA74_0<=156)||(LA74_0>=158 && LA74_0<=159)||LA74_0==162||LA74_0==166))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:324:20: stmt_block_item
					{
					DebugLocation(324, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block1856);
					stmt_block_item156=stmt_block_item();
					PopFollow();

					stream_stmt_block_item.Add(stmt_block_item156.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(324, 37);
			DEDENT157=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1859);  
			stream_DEDENT.Add(DEDENT157);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 324:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(324, 47);
				// SugarCpp.g:324:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(324, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(324, 60);
				// SugarCpp.g:324:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(324, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 24);
			LeaveRule("stmt_block", 24);
			LeaveRule_stmt_block();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:327:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 25);
		TraceIn("stmt", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(327, 1);
		try
		{
			// SugarCpp.g:328:2: ( stmt_simple | stmt_complex )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT||LA75_0==79||LA75_0==84||LA75_0==86||LA75_0==88||(LA75_0>=90 && LA75_0<=91)||(LA75_0>=94 && LA75_0<=95)||LA75_0==121||LA75_0==147||LA75_0==149||LA75_0==155||LA75_0==159||LA75_0==166))
			{
				alt75 = 1;
			}
			else if ((LA75_0==133||(LA75_0>=137 && LA75_0<=139)||LA75_0==143||LA75_0==151||LA75_0==154||LA75_0==156||LA75_0==158||LA75_0==162))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:328:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(328, 4);
				PushFollow(Follow._stmt_simple_in_stmt1879);
				stmt_simple158=stmt_simple();
				PopFollow();

				adaptor.AddChild(root_0, stmt_simple158.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:329:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(329, 4);
				PushFollow(Follow._stmt_complex_in_stmt1884);
				stmt_complex159=stmt_complex();
				PopFollow();

				adaptor.AddChild(root_0, stmt_complex159.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 25);
			LeaveRule("stmt", 25);
			LeaveRule_stmt();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:332:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 26);
		TraceIn("stmt_simple", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(333, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple1895);
			stmt_expr160=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr160.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 26);
			LeaveRule("stmt_simple", 26);
			LeaveRule_stmt_simple();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:336:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 27);
		TraceIn("stmt_complex", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt76=6;
			try { DebugEnterDecision(76, false);
			switch (input.LA(1))
			{
			case 139:
			case 156:
				{
				alt76 = 1;
				}
				break;
			case 138:
				{
				alt76 = 2;
				}
				break;
			case 143:
			case 158:
			case 162:
				{
				alt76 = 3;
				}
				break;
			case 154:
				{
				alt76 = 4;
				}
				break;
			case 151:
				{
				alt76 = 5;
				}
				break;
			case 133:
			case 137:
				{
				alt76 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex1906);
				stmt_if161=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if161.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:338:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex1911);
				stmt_for162=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for162.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:339:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(339, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex1916);
				stmt_while163=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while163.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:340:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(340, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex1921);
				stmt_try164=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try164.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:341:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(341, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex1926);
				stmt_switch165=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch165.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:342:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(342, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex1931);
				stmt_defer166=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer166.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 27);
			LeaveRule("stmt_complex", 27);
			LeaveRule_stmt_complex();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:345:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 28);
		TraceIn("stmt_expr", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		IToken string_literal169 = default(IToken);
		IToken string_literal171 = default(IToken);
		IToken string_literal173 = default(IToken);
		IToken string_literal175 = default(IToken);
		IToken char_literal177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree string_literal171_tree = default(CommonTree);
		CommonTree string_literal173_tree = default(CommonTree);
		CommonTree string_literal175_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(345, 1);
		try
		{
			// SugarCpp.g:346:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:346:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(346, 4);
			// SugarCpp.g:346:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:346:5: a= stmt_expr_item
			{
			DebugLocation(346, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1945);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 346:22: -> $a
			{
				DebugLocation(346, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(346, 29);
			// SugarCpp.g:346:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(78);
			while (true)
			{
				int alt78=6;
				try { DebugEnterDecision(78, false);
				switch (input.LA(1))
				{
				case 139:
					{
					alt78 = 1;
					}
					break;
				case 156:
					{
					alt78 = 2;
					}
					break;
				case 162:
					{
					alt78 = 3;
					}
					break;
				case 158:
					{
					alt78 = 4;
					}
					break;
				case 138:
					{
					alt78 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(78); }
				switch ( alt78 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:346:31: 'if' expr
					{
					DebugLocation(346, 31);
					string_literal167=(IToken)Match(input,139,Follow._139_in_stmt_expr1955);  
					stream_139.Add(string_literal167);

					DebugLocation(346, 36);
					PushFollow(Follow._expr_in_stmt_expr1957);
					expr168=expr();
					PopFollow();

					stream_expr.Add(expr168.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 346:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(346, 44);
						// SugarCpp.g:346:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(346, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(346, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(346, 59);
						// SugarCpp.g:346:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(346, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(346, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:347:13: 'unless' expr
					{
					DebugLocation(347, 13);
					string_literal169=(IToken)Match(input,156,Follow._156_in_stmt_expr1986);  
					stream_156.Add(string_literal169);

					DebugLocation(347, 22);
					PushFollow(Follow._expr_in_stmt_expr1988);
					expr170=expr();
					PopFollow();

					stream_expr.Add(expr170.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 347:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(347, 30);
						// SugarCpp.g:347:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(347, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(347, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(347, 49);
						// SugarCpp.g:347:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(347, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(347, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:348:13: 'while' expr
					{
					DebugLocation(348, 13);
					string_literal171=(IToken)Match(input,162,Follow._162_in_stmt_expr2017);  
					stream_162.Add(string_literal171);

					DebugLocation(348, 21);
					PushFollow(Follow._expr_in_stmt_expr2019);
					expr172=expr();
					PopFollow();

					stream_expr.Add(expr172.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 348:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(348, 29);
						// SugarCpp.g:348:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(348, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(348, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(348, 47);
						// SugarCpp.g:348:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(348, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(348, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:349:13: 'until' expr
					{
					DebugLocation(349, 13);
					string_literal173=(IToken)Match(input,158,Follow._158_in_stmt_expr2048);  
					stream_158.Add(string_literal173);

					DebugLocation(349, 21);
					PushFollow(Follow._expr_in_stmt_expr2050);
					expr174=expr();
					PopFollow();

					stream_expr.Add(expr174.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 349:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(349, 29);
						// SugarCpp.g:349:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(349, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(349, 47);
						// SugarCpp.g:349:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(349, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:350:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(350, 13);
					string_literal175=(IToken)Match(input,138,Follow._138_in_stmt_expr2079);  
					stream_138.Add(string_literal175);

					DebugLocation(350, 19);
					PushFollow(Follow._for_item_in_stmt_expr2081);
					for_item176=for_item();
					PopFollow();

					stream_for_item.Add(for_item176.Tree);
					DebugLocation(350, 28);
					// SugarCpp.g:350:28: ( ',' for_item )*
					try { DebugEnterSubRule(77);
					while (true)
					{
						int alt77=2;
						try { DebugEnterDecision(77, false);
						int LA77_0 = input.LA(1);

						if ((LA77_0==93))
						{
							alt77 = 1;
						}


						} finally { DebugExitDecision(77); }
						switch ( alt77 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:350:29: ',' for_item
							{
							DebugLocation(350, 29);
							char_literal177=(IToken)Match(input,93,Follow._93_in_stmt_expr2084);  
							stream_93.Add(char_literal177);

							DebugLocation(350, 33);
							PushFollow(Follow._for_item_in_stmt_expr2086);
							for_item178=for_item();
							PopFollow();

							stream_for_item.Add(for_item178.Tree);

							}
							break;

						default:
							goto loop77;
						}
					}

					loop77:
						;

					} finally { DebugExitSubRule(77); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 350:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(350, 47);
						// SugarCpp.g:350:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(350, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(350, 58);
						// SugarCpp.g:350:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(350, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(350, 68);
						// SugarCpp.g:350:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(350, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(350, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop78;
				}
			}

			loop78:
				;

			} finally { DebugExitSubRule(78); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 28);
			LeaveRule("stmt_expr", 28);
			LeaveRule_stmt_expr();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:354:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 29);
		TraceIn("stmt_expr_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(354, 1);
		try
		{
			// SugarCpp.g:355:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt79=5;
			try { DebugEnterDecision(79, false);
			try
			{
				alt79 = dfa79.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:355:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(355, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2128);
				stmt_alloc179=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc179.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:356:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(356, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2133);
				stmt_return180=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return180.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:357:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(357, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2138);
				stmt_using181=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using181.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:358:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(358, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2143);
				stmt_typedef182=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef182.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:359:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(359, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2148);
				stmt_modify183=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify183.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 29);
			LeaveRule("stmt_expr_item", 29);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:362:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 30);
		TraceIn("stmt_defer", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal184 = default(IToken);
		IToken string_literal186 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree string_literal186_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(362, 1);
		try
		{
			// SugarCpp.g:363:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt80=2;
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==133))
			{
				alt80 = 1;
			}
			else if ((LA80_0==137))
			{
				alt80 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 80, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:363:4: 'defer' stmt
				{
				DebugLocation(363, 4);
				string_literal184=(IToken)Match(input,133,Follow._133_in_stmt_defer2159);  
				stream_133.Add(string_literal184);

				DebugLocation(363, 12);
				PushFollow(Follow._stmt_in_stmt_defer2161);
				stmt185=stmt();
				PopFollow();

				stream_stmt.Add(stmt185.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 363:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(363, 20);
					// SugarCpp.g:363:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(363, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(363, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:364:4: 'finally' stmt
				{
				DebugLocation(364, 4);
				string_literal186=(IToken)Match(input,137,Follow._137_in_stmt_defer2174);  
				stream_137.Add(string_literal186);

				DebugLocation(364, 14);
				PushFollow(Follow._stmt_in_stmt_defer2176);
				stmt187=stmt();
				PopFollow();

				stream_stmt.Add(stmt187.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 364:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(364, 22);
					// SugarCpp.g:364:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(364, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(364, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 30);
			LeaveRule("stmt_defer", 30);
			LeaveRule_stmt_defer();
		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:367:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 31);
		TraceIn("stmt_typedef", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal188 = default(IToken);
		IToken char_literal190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name191 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal188_tree = default(CommonTree);
		CommonTree char_literal190_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(367, 1);
		try
		{
			// SugarCpp.g:368:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:368:4: 'typedef' ident '=' type_name
			{
			DebugLocation(368, 4);
			string_literal188=(IToken)Match(input,155,Follow._155_in_stmt_typedef2195);  
			stream_155.Add(string_literal188);

			DebugLocation(368, 14);
			PushFollow(Follow._ident_in_stmt_typedef2197);
			ident189=ident();
			PopFollow();

			stream_ident.Add(ident189.Tree);
			DebugLocation(368, 20);
			char_literal190=(IToken)Match(input,112,Follow._112_in_stmt_typedef2199);  
			stream_112.Add(char_literal190);

			DebugLocation(368, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2201);
			type_name191=type_name();
			PopFollow();

			stream_type_name.Add(type_name191.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 368:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(368, 37);
				// SugarCpp.g:368:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(368, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(368, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(368, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 31);
			LeaveRule("stmt_typedef", 31);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:371:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 32);
		TraceIn("stmt_using_item", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal193 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal193_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(371, 36);
		try
		{
			// SugarCpp.g:371:16: ( ident | 'namespace' )
			int alt81=2;
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==IDENT))
			{
				alt81 = 1;
			}
			else if ((LA81_0==145))
			{
				alt81 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:371:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(371, 18);
				PushFollow(Follow._ident_in_stmt_using_item2220);
				ident192=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident192.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:371:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(371, 26);
				string_literal193=(IToken)Match(input,145,Follow._145_in_stmt_using_item2224); 
				string_literal193_tree = (CommonTree)adaptor.Create(string_literal193);
				adaptor.AddChild(root_0, string_literal193_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 32);
			LeaveRule("stmt_using_item", 32);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(371, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:372:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 33);
		TraceIn("stmt_using", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal194 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item195 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal194_tree = default(CommonTree);
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(372, 1);
		try
		{
			// SugarCpp.g:373:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:373:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(373, 4);
			string_literal194=(IToken)Match(input,159,Follow._159_in_stmt_using2232);  
			stream_159.Add(string_literal194);

			DebugLocation(373, 12);
			// SugarCpp.g:373:12: ( stmt_using_item )*
			try { DebugEnterSubRule(82);
			while (true)
			{
				int alt82=2;
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==IDENT||LA82_0==145))
				{
					alt82 = 1;
				}


				} finally { DebugExitDecision(82); }
				switch ( alt82 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:373:12: stmt_using_item
					{
					DebugLocation(373, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2234);
					stmt_using_item195=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item195.Tree);

					}
					break;

				default:
					goto loop82;
				}
			}

			loop82:
				;

			} finally { DebugExitSubRule(82); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 373:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(373, 32);
				// SugarCpp.g:373:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(373, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(373, 45);
				// SugarCpp.g:373:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(373, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 33);
			LeaveRule("stmt_using", 33);
			LeaveRule_stmt_using();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:376:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 34);
		TraceIn("stmt_return", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal196 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal196_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:377:4: 'return' ( expr )?
			{
			DebugLocation(377, 4);
			string_literal196=(IToken)Match(input,149,Follow._149_in_stmt_return2255);  
			stream_149.Add(string_literal196);

			DebugLocation(377, 13);
			// SugarCpp.g:377:13: ( expr )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==IDENT||LA83_0==NUMBER||LA83_0==STRING||LA83_0==79||LA83_0==84||LA83_0==86||LA83_0==88||(LA83_0>=90 && LA83_0<=91)||(LA83_0>=94 && LA83_0<=95)||(LA83_0>=121 && LA83_0<=122)||LA83_0==144||(LA83_0>=146 && LA83_0<=147)||LA83_0==166))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:377:13: expr
				{
				DebugLocation(377, 13);
				PushFollow(Follow._expr_in_stmt_return2257);
				expr197=expr();
				PopFollow();

				stream_expr.Add(expr197.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 377:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(377, 22);
				// SugarCpp.g:377:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(377, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(377, 36);
				// SugarCpp.g:377:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(377, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 34);
			LeaveRule("stmt_return", 34);
			LeaveRule_stmt_return();
		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:380:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 35);
		TraceIn("inline_stmt_block", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(380, 1);
		try
		{
			// SugarCpp.g:381:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:381:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(381, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2278);
			stmt_simple198=stmt_simple();
			PopFollow();

			stream_stmt_simple.Add(stmt_simple198.Tree);
			DebugLocation(381, 16);
			// SugarCpp.g:381:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(84);
			while (true)
			{
				int alt84=2;
				try { DebugEnterDecision(84, false);
				int LA84_0 = input.LA(1);

				if ((LA84_0==106))
				{
					alt84 = 1;
				}


				} finally { DebugExitDecision(84); }
				switch ( alt84 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:381:17: ';' stmt_simple
					{
					DebugLocation(381, 17);
					char_literal199=(IToken)Match(input,106,Follow._106_in_inline_stmt_block2281);  
					stream_106.Add(char_literal199);

					DebugLocation(381, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2283);
					stmt_simple200=stmt_simple();
					PopFollow();

					stream_stmt_simple.Add(stmt_simple200.Tree);

					}
					break;

				default:
					goto loop84;
				}
			}

			loop84:
				;

			} finally { DebugExitSubRule(84); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 381:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(381, 38);
				// SugarCpp.g:381:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(381, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(381, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(381, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 35);
			LeaveRule("inline_stmt_block", 35);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(382, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:384:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 36);
		TraceIn("stmt_if", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal201 = default(IToken);
		IToken NEWLINE203 = default(IToken);
		IToken NEWLINE205 = default(IToken);
		IToken string_literal206 = default(IToken);
		IToken NEWLINE207 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken NEWLINE213 = default(IToken);
		IToken NEWLINE215 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken NEWLINE217 = default(IToken);
		IToken string_literal219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal201_tree = default(CommonTree);
		CommonTree NEWLINE203_tree = default(CommonTree);
		CommonTree NEWLINE205_tree = default(CommonTree);
		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree NEWLINE207_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree NEWLINE213_tree = default(CommonTree);
		CommonTree NEWLINE215_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree NEWLINE217_tree = default(CommonTree);
		CommonTree string_literal219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(384, 1);
		try
		{
			// SugarCpp.g:385:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==139))
			{
				alt95 = 1;
			}
			else if ((LA95_0==156))
			{
				alt95 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:385:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(385, 4);
				string_literal201=(IToken)Match(input,139,Follow._139_in_stmt_if2305);  
				stream_139.Add(string_literal201);

				DebugLocation(385, 9);
				PushFollow(Follow._expr_in_stmt_if2307);
				expr202=expr();
				PopFollow();

				stream_expr.Add(expr202.Tree);
				DebugLocation(385, 14);
				// SugarCpp.g:385:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==NEWLINE))
				{
					alt89 = 1;
				}
				else if ((LA89_0==152))
				{
					alt89 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:385:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(385, 15);
					// SugarCpp.g:385:15: ( NEWLINE )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:385:15: NEWLINE
							{
							DebugLocation(385, 15);
							NEWLINE203=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2310);  
							stream_NEWLINE.Add(NEWLINE203);


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(385, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2313);
					stmt_block204=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block204.Tree);
					DebugLocation(385, 35);
					// SugarCpp.g:385:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt88=2;
					try { DebugEnterSubRule(88);
					try { DebugEnterDecision(88, false);
					try
					{
						alt88 = dfa88.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:385:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(385, 36);
						// SugarCpp.g:385:36: ( NEWLINE )*
						try { DebugEnterSubRule(86);
						while (true)
						{
							int alt86=2;
							try { DebugEnterDecision(86, false);
							int LA86_0 = input.LA(1);

							if ((LA86_0==NEWLINE))
							{
								alt86 = 1;
							}


							} finally { DebugExitDecision(86); }
							switch ( alt86 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:385:36: NEWLINE
								{
								DebugLocation(385, 36);
								NEWLINE205=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2316);  
								stream_NEWLINE.Add(NEWLINE205);


								}
								break;

							default:
								goto loop86;
							}
						}

						loop86:
							;

						} finally { DebugExitSubRule(86); }

						DebugLocation(385, 45);
						string_literal206=(IToken)Match(input,135,Follow._135_in_stmt_if2319);  
						stream_135.Add(string_literal206);

						DebugLocation(385, 52);
						// SugarCpp.g:385:52: ( NEWLINE )+
						int cnt87=0;
						try { DebugEnterSubRule(87);
						while (true)
						{
							int alt87=2;
							try { DebugEnterDecision(87, false);
							int LA87_0 = input.LA(1);

							if ((LA87_0==NEWLINE))
							{
								alt87 = 1;
							}


							} finally { DebugExitDecision(87); }
							switch (alt87)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:385:52: NEWLINE
								{
								DebugLocation(385, 52);
								NEWLINE207=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2321);  
								stream_NEWLINE.Add(NEWLINE207);


								}
								break;

							default:
								if (cnt87 >= 1)
									goto loop87;

								EarlyExitException eee87 = new EarlyExitException( 87, input );
								DebugRecognitionException(eee87);
								throw eee87;
							}
							cnt87++;
						}
						loop87:
							;

						} finally { DebugExitSubRule(87); }

						DebugLocation(385, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2324);
						stmt_block208=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block208.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(88); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 385:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(385, 77);
						// SugarCpp.g:385:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(385, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(385, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(385, 103);
						// SugarCpp.g:385:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(385, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:386:16: 'then' inline_stmt_block
					{
					DebugLocation(386, 16);
					string_literal209=(IToken)Match(input,152,Follow._152_in_stmt_if2356);  
					stream_152.Add(string_literal209);

					DebugLocation(386, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2358);
					inline_stmt_block210=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block210.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 386:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(386, 44);
						// SugarCpp.g:386:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(386, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(386, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(386, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:388:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(388, 4);
				string_literal211=(IToken)Match(input,156,Follow._156_in_stmt_if2379);  
				stream_156.Add(string_literal211);

				DebugLocation(388, 13);
				PushFollow(Follow._expr_in_stmt_if2381);
				expr212=expr();
				PopFollow();

				stream_expr.Add(expr212.Tree);
				DebugLocation(388, 18);
				// SugarCpp.g:388:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==NEWLINE))
				{
					alt94 = 1;
				}
				else if ((LA94_0==152))
				{
					alt94 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:388:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(388, 19);
					// SugarCpp.g:388:19: ( NEWLINE )+
					int cnt90=0;
					try { DebugEnterSubRule(90);
					while (true)
					{
						int alt90=2;
						try { DebugEnterDecision(90, false);
						int LA90_0 = input.LA(1);

						if ((LA90_0==NEWLINE))
						{
							alt90 = 1;
						}


						} finally { DebugExitDecision(90); }
						switch (alt90)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:388:19: NEWLINE
							{
							DebugLocation(388, 19);
							NEWLINE213=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2384);  
							stream_NEWLINE.Add(NEWLINE213);


							}
							break;

						default:
							if (cnt90 >= 1)
								goto loop90;

							EarlyExitException eee90 = new EarlyExitException( 90, input );
							DebugRecognitionException(eee90);
							throw eee90;
						}
						cnt90++;
					}
					loop90:
						;

					} finally { DebugExitSubRule(90); }

					DebugLocation(388, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2387);
					stmt_block214=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block214.Tree);
					DebugLocation(388, 39);
					// SugarCpp.g:388:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					try
					{
						alt93 = dfa93.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:388:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(388, 40);
						// SugarCpp.g:388:40: ( NEWLINE )*
						try { DebugEnterSubRule(91);
						while (true)
						{
							int alt91=2;
							try { DebugEnterDecision(91, false);
							int LA91_0 = input.LA(1);

							if ((LA91_0==NEWLINE))
							{
								alt91 = 1;
							}


							} finally { DebugExitDecision(91); }
							switch ( alt91 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:388:40: NEWLINE
								{
								DebugLocation(388, 40);
								NEWLINE215=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2390);  
								stream_NEWLINE.Add(NEWLINE215);


								}
								break;

							default:
								goto loop91;
							}
						}

						loop91:
							;

						} finally { DebugExitSubRule(91); }

						DebugLocation(388, 49);
						string_literal216=(IToken)Match(input,135,Follow._135_in_stmt_if2393);  
						stream_135.Add(string_literal216);

						DebugLocation(388, 56);
						// SugarCpp.g:388:56: ( NEWLINE )+
						int cnt92=0;
						try { DebugEnterSubRule(92);
						while (true)
						{
							int alt92=2;
							try { DebugEnterDecision(92, false);
							int LA92_0 = input.LA(1);

							if ((LA92_0==NEWLINE))
							{
								alt92 = 1;
							}


							} finally { DebugExitDecision(92); }
							switch (alt92)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:388:56: NEWLINE
								{
								DebugLocation(388, 56);
								NEWLINE217=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2395);  
								stream_NEWLINE.Add(NEWLINE217);


								}
								break;

							default:
								if (cnt92 >= 1)
									goto loop92;

								EarlyExitException eee92 = new EarlyExitException( 92, input );
								DebugRecognitionException(eee92);
								throw eee92;
							}
							cnt92++;
						}
						loop92:
							;

						} finally { DebugExitSubRule(92); }

						DebugLocation(388, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2398);
						stmt_block218=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block218.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(93); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 388:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(388, 81);
						// SugarCpp.g:388:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(388, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(388, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(388, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(388, 111);
						// SugarCpp.g:388:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(388, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:389:20: 'then' inline_stmt_block
					{
					DebugLocation(389, 20);
					string_literal219=(IToken)Match(input,152,Follow._152_in_stmt_if2434);  
					stream_152.Add(string_literal219);

					DebugLocation(389, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2436);
					inline_stmt_block220=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block220.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(389, 48);
						// SugarCpp.g:389:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(389, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(389, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(94); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 36);
			LeaveRule("stmt_if", 36);
			LeaveRule_stmt_if();
		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:393:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 37);
		TraceIn("stmt_while", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal221 = default(IToken);
		IToken NEWLINE223 = default(IToken);
		IToken string_literal225 = default(IToken);
		IToken string_literal227 = default(IToken);
		IToken NEWLINE229 = default(IToken);
		IToken string_literal231 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken NEWLINE235 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree NEWLINE223_tree = default(CommonTree);
		CommonTree string_literal225_tree = default(CommonTree);
		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree NEWLINE229_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree NEWLINE235_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(393, 1);
		try
		{
			// SugarCpp.g:394:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt102=3;
			try { DebugEnterDecision(102, false);
			switch (input.LA(1))
			{
			case 162:
				{
				alt102 = 1;
				}
				break;
			case 158:
				{
				alt102 = 2;
				}
				break;
			case 143:
				{
				alt102 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:394:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(394, 4);
				string_literal221=(IToken)Match(input,162,Follow._162_in_stmt_while2467);  
				stream_162.Add(string_literal221);

				DebugLocation(394, 12);
				PushFollow(Follow._expr_in_stmt_while2469);
				expr222=expr();
				PopFollow();

				stream_expr.Add(expr222.Tree);
				DebugLocation(394, 17);
				// SugarCpp.g:394:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==NEWLINE))
				{
					alt97 = 1;
				}
				else if ((LA97_0==152))
				{
					alt97 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:394:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(394, 19);
					// SugarCpp.g:394:19: ( NEWLINE )+
					int cnt96=0;
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, false);
						int LA96_0 = input.LA(1);

						if ((LA96_0==NEWLINE))
						{
							alt96 = 1;
						}


						} finally { DebugExitDecision(96); }
						switch (alt96)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:394:19: NEWLINE
							{
							DebugLocation(394, 19);
							NEWLINE223=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2473);  
							stream_NEWLINE.Add(NEWLINE223);


							}
							break;

						default:
							if (cnt96 >= 1)
								goto loop96;

							EarlyExitException eee96 = new EarlyExitException( 96, input );
							DebugRecognitionException(eee96);
							throw eee96;
						}
						cnt96++;
					}
					loop96:
						;

					} finally { DebugExitSubRule(96); }

					DebugLocation(394, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2476);
					stmt_block224=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block224.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(394, 42);
						// SugarCpp.g:394:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(394, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(394, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:395:13: 'then' inline_stmt_block
					{
					DebugLocation(395, 13);
					string_literal225=(IToken)Match(input,152,Follow._152_in_stmt_while2500);  
					stream_152.Add(string_literal225);

					DebugLocation(395, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2502);
					inline_stmt_block226=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block226.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(395, 41);
						// SugarCpp.g:395:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(395, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(395, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(97); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:397:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(397, 4);
				string_literal227=(IToken)Match(input,158,Follow._158_in_stmt_while2526);  
				stream_158.Add(string_literal227);

				DebugLocation(397, 12);
				PushFollow(Follow._expr_in_stmt_while2528);
				expr228=expr();
				PopFollow();

				stream_expr.Add(expr228.Tree);
				DebugLocation(397, 17);
				// SugarCpp.g:397:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt99=2;
				try { DebugEnterSubRule(99);
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==NEWLINE))
				{
					alt99 = 1;
				}
				else if ((LA99_0==152))
				{
					alt99 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(99); }
				switch (alt99)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:397:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(397, 19);
					// SugarCpp.g:397:19: ( NEWLINE )+
					int cnt98=0;
					try { DebugEnterSubRule(98);
					while (true)
					{
						int alt98=2;
						try { DebugEnterDecision(98, false);
						int LA98_0 = input.LA(1);

						if ((LA98_0==NEWLINE))
						{
							alt98 = 1;
						}


						} finally { DebugExitDecision(98); }
						switch (alt98)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:397:19: NEWLINE
							{
							DebugLocation(397, 19);
							NEWLINE229=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2532);  
							stream_NEWLINE.Add(NEWLINE229);


							}
							break;

						default:
							if (cnt98 >= 1)
								goto loop98;

							EarlyExitException eee98 = new EarlyExitException( 98, input );
							DebugRecognitionException(eee98);
							throw eee98;
						}
						cnt98++;
					}
					loop98:
						;

					} finally { DebugExitSubRule(98); }

					DebugLocation(397, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2535);
					stmt_block230=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block230.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(397, 42);
						// SugarCpp.g:397:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(397, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(397, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:398:13: 'then' inline_stmt_block
					{
					DebugLocation(398, 13);
					string_literal231=(IToken)Match(input,152,Follow._152_in_stmt_while2559);  
					stream_152.Add(string_literal231);

					DebugLocation(398, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2561);
					inline_stmt_block232=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block232.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 398:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(398, 41);
						// SugarCpp.g:398:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(398, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(398, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(99); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:400:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(400, 4);
				string_literal233=(IToken)Match(input,143,Follow._143_in_stmt_while2585);  
				stream_143.Add(string_literal233);

				DebugLocation(400, 11);
				// SugarCpp.g:400:11: ( expr )?
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==IDENT||LA100_0==NUMBER||LA100_0==STRING||LA100_0==79||LA100_0==84||LA100_0==86||LA100_0==88||(LA100_0>=90 && LA100_0<=91)||(LA100_0>=94 && LA100_0<=95)||(LA100_0>=121 && LA100_0<=122)||LA100_0==144||(LA100_0>=146 && LA100_0<=147)||LA100_0==166))
				{
					alt100 = 1;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:400:11: expr
					{
					DebugLocation(400, 11);
					PushFollow(Follow._expr_in_stmt_while2587);
					expr234=expr();
					PopFollow();

					stream_expr.Add(expr234.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(100); }

				DebugLocation(400, 17);
				// SugarCpp.g:400:17: ( NEWLINE )+
				int cnt101=0;
				try { DebugEnterSubRule(101);
				while (true)
				{
					int alt101=2;
					try { DebugEnterDecision(101, false);
					int LA101_0 = input.LA(1);

					if ((LA101_0==NEWLINE))
					{
						alt101 = 1;
					}


					} finally { DebugExitDecision(101); }
					switch (alt101)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:400:17: NEWLINE
						{
						DebugLocation(400, 17);
						NEWLINE235=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2590);  
						stream_NEWLINE.Add(NEWLINE235);


						}
						break;

					default:
						if (cnt101 >= 1)
							goto loop101;

						EarlyExitException eee101 = new EarlyExitException( 101, input );
						DebugRecognitionException(eee101);
						throw eee101;
					}
					cnt101++;
				}
				loop101:
					;

				} finally { DebugExitSubRule(101); }

				DebugLocation(400, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2593);
				stmt_block236=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block236.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 400:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(400, 40);
					// SugarCpp.g:400:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(400, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(400, 52);
					// SugarCpp.g:400:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(400, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(400, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 37);
			LeaveRule("stmt_while", 37);
			LeaveRule_stmt_while();
		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:403:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 38);
		TraceIn("for_range", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal238 = default(IToken);
		IToken string_literal239 = default(IToken);
		IToken string_literal240 = default(IToken);
		IToken string_literal241 = default(IToken);
		IToken string_literal242 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree string_literal239_tree = default(CommonTree);
		CommonTree string_literal240_tree = default(CommonTree);
		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree string_literal242_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(403, 1);
		try
		{
			// SugarCpp.g:404:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:404:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(404, 4);
			PushFollow(Follow._ident_in_for_range2615);
			ident237=ident();
			PopFollow();

			stream_ident.Add(ident237.Tree);
			DebugLocation(404, 10);
			string_literal238=(IToken)Match(input,108,Follow._108_in_for_range2617);  
			stream_108.Add(string_literal238);

			DebugLocation(404, 16);
			PushFollow(Follow._expr_in_for_range2621);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(404, 22);
			// SugarCpp.g:404:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt105=3;
			try { DebugEnterSubRule(105);
			try { DebugEnterDecision(105, false);
			switch (input.LA(1))
			{
			case 153:
				{
				alt105 = 1;
				}
				break;
			case 134:
				{
				alt105 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 93:
			case 106:
			case 138:
			case 139:
			case 156:
			case 158:
			case 162:
				{
				alt105 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:404:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(404, 23);
				string_literal239=(IToken)Match(input,153,Follow._153_in_for_range2624);  
				stream_153.Add(string_literal239);

				DebugLocation(404, 29);
				PushFollow(Follow._expr_in_for_range2628);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(404, 35);
				// SugarCpp.g:404:35: ( 'by' c= expr )?
				int alt103=2;
				try { DebugEnterSubRule(103);
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==129))
				{
					alt103 = 1;
				}
				} finally { DebugExitDecision(103); }
				switch (alt103)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:404:36: 'by' c= expr
					{
					DebugLocation(404, 36);
					string_literal240=(IToken)Match(input,129,Follow._129_in_for_range2631);  
					stream_129.Add(string_literal240);

					DebugLocation(404, 42);
					PushFollow(Follow._expr_in_for_range2635);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(103); }



				{
				// AST REWRITE
				// elements: b, ident, c, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 404:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(404, 53);
					// SugarCpp.g:404:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(404, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(404, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(404, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(404, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(404, 80);
					// SugarCpp.g:404:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(404, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:405:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(405, 8);
				string_literal241=(IToken)Match(input,134,Follow._134_in_for_range2664);  
				stream_134.Add(string_literal241);

				DebugLocation(405, 18);
				PushFollow(Follow._expr_in_for_range2668);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(405, 24);
				// SugarCpp.g:405:24: ( 'by' c= expr )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==129))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:405:25: 'by' c= expr
					{
					DebugLocation(405, 25);
					string_literal242=(IToken)Match(input,129,Follow._129_in_for_range2671);  
					stream_129.Add(string_literal242);

					DebugLocation(405, 31);
					PushFollow(Follow._expr_in_for_range2675);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(104); }



				{
				// AST REWRITE
				// elements: a, ident, b, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 405:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(405, 42);
					// SugarCpp.g:405:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(405, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(405, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(405, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(405, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(405, 74);
					// SugarCpp.g:405:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(405, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:406:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 406:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(406, 12);
					// SugarCpp.g:406:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(406, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(406, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(406, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 38);
			LeaveRule("for_range", 38);
			LeaveRule_for_range();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:410:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 39);
		TraceIn("for_when", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr243 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(410, 1);
		try
		{
			// SugarCpp.g:411:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:411:4: expr
			{
			DebugLocation(411, 4);
			PushFollow(Follow._expr_in_for_when2733);
			expr243=expr();
			PopFollow();

			stream_expr.Add(expr243.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 411:9: -> ^( For_Item_When expr )
			{
				DebugLocation(411, 12);
				// SugarCpp.g:411:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(411, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(411, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 39);
			LeaveRule("for_when", 39);
			LeaveRule_for_when();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:414:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 40);
		TraceIn("for_item", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when245 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(414, 1);
		try
		{
			// SugarCpp.g:415:2: ( for_range | for_when )
			int alt106=2;
			try { DebugEnterDecision(106, false);
			try
			{
				alt106 = dfa106.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:415:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(415, 4);
				PushFollow(Follow._for_range_in_for_item2752);
				for_range244=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range244.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:416:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(416, 4);
				PushFollow(Follow._for_when_in_for_item2757);
				for_when245=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when245.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 40);
			LeaveRule("for_item", 40);
			LeaveRule_for_item();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:419:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 41);
		TraceIn("stmt_for", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal246 = default(IToken);
		IToken char_literal248 = default(IToken);
		IToken NEWLINE250 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item247 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block251 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree NEWLINE250_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(419, 1);
		try
		{
			// SugarCpp.g:420:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:420:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(420, 4);
			string_literal246=(IToken)Match(input,138,Follow._138_in_stmt_for2768);  
			stream_138.Add(string_literal246);

			DebugLocation(420, 10);
			// SugarCpp.g:420:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:420:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(420, 12);
			PushFollow(Follow._for_item_in_stmt_for2772);
			for_item247=for_item();
			PopFollow();

			stream_for_item.Add(for_item247.Tree);
			DebugLocation(420, 21);
			// SugarCpp.g:420:21: ( ',' for_item )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==93))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:420:22: ',' for_item
					{
					DebugLocation(420, 22);
					char_literal248=(IToken)Match(input,93,Follow._93_in_stmt_for2775);  
					stream_93.Add(char_literal248);

					DebugLocation(420, 26);
					PushFollow(Follow._for_item_in_stmt_for2777);
					for_item249=for_item();
					PopFollow();

					stream_for_item.Add(for_item249.Tree);

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }

			DebugLocation(420, 37);
			// SugarCpp.g:420:37: ( NEWLINE )+
			int cnt108=0;
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==NEWLINE))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:420:37: NEWLINE
					{
					DebugLocation(420, 37);
					NEWLINE250=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2781);  
					stream_NEWLINE.Add(NEWLINE250);


					}
					break;

				default:
					if (cnt108 >= 1)
						goto loop108;

					EarlyExitException eee108 = new EarlyExitException( 108, input );
					DebugRecognitionException(eee108);
					throw eee108;
				}
				cnt108++;
			}
			loop108:
				;

			} finally { DebugExitSubRule(108); }

			DebugLocation(420, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2784);
			stmt_block251=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block251.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 420:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(420, 60);
				// SugarCpp.g:420:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(420, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(420, 71);
				// SugarCpp.g:420:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(420, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(420, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 41);
			LeaveRule("stmt_for", 41);
			LeaveRule_stmt_for();
		}
		DebugLocation(423, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:425:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 42);
		TraceIn("stmt_try", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal252 = default(IToken);
		IToken NEWLINE253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken NEWLINE258 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block259 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal252_tree = default(CommonTree);
		CommonTree NEWLINE253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree NEWLINE258_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(425, 1);
		try
		{
			// SugarCpp.g:426:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:426:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(426, 4);
			string_literal252=(IToken)Match(input,154,Follow._154_in_stmt_try2815);  
			stream_154.Add(string_literal252);

			DebugLocation(426, 10);
			// SugarCpp.g:426:10: ( NEWLINE )+
			int cnt109=0;
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:426:10: NEWLINE
					{
					DebugLocation(426, 10);
					NEWLINE253=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2817);  
					stream_NEWLINE.Add(NEWLINE253);


					}
					break;

				default:
					if (cnt109 >= 1)
						goto loop109;

					EarlyExitException eee109 = new EarlyExitException( 109, input );
					DebugRecognitionException(eee109);
					throw eee109;
				}
				cnt109++;
			}
			loop109:
				;

			} finally { DebugExitSubRule(109); }

			DebugLocation(426, 19);
			PushFollow(Follow._stmt_block_in_stmt_try2820);
			stmt_block254=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block254.Tree);
			DebugLocation(426, 30);
			// SugarCpp.g:426:30: ( NEWLINE )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==NEWLINE))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:426:30: NEWLINE
					{
					DebugLocation(426, 30);
					NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2822);  
					stream_NEWLINE.Add(NEWLINE255);


					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }

			DebugLocation(426, 39);
			string_literal256=(IToken)Match(input,130,Follow._130_in_stmt_try2825);  
			stream_130.Add(string_literal256);

			DebugLocation(426, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try2827);
			stmt_alloc257=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc257.Tree);
			DebugLocation(426, 58);
			// SugarCpp.g:426:58: ( NEWLINE )+
			int cnt111=0;
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==NEWLINE))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch (alt111)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:426:58: NEWLINE
					{
					DebugLocation(426, 58);
					NEWLINE258=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2829);  
					stream_NEWLINE.Add(NEWLINE258);


					}
					break;

				default:
					if (cnt111 >= 1)
						goto loop111;

					EarlyExitException eee111 = new EarlyExitException( 111, input );
					DebugRecognitionException(eee111);
					throw eee111;
				}
				cnt111++;
			}
			loop111:
				;

			} finally { DebugExitSubRule(111); }

			DebugLocation(426, 67);
			PushFollow(Follow._stmt_block_in_stmt_try2832);
			stmt_block259=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block259.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 426:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(426, 81);
				// SugarCpp.g:426:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(426, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(426, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(426, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(426, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 42);
			LeaveRule("stmt_try", 42);
			LeaveRule_stmt_try();
		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:429:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 43);
		TraceIn("switch_item", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal260 = default(IToken);
		IToken char_literal262 = default(IToken);
		IToken NEWLINE264 = default(IToken);
		IToken string_literal266 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree char_literal262_tree = default(CommonTree);
		CommonTree NEWLINE264_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(429, 1);
		try
		{
			// SugarCpp.g:430:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:430:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(430, 4);
			string_literal260=(IToken)Match(input,160,Follow._160_in_switch_item2855);  
			stream_160.Add(string_literal260);

			DebugLocation(430, 11);
			PushFollow(Follow._expr_in_switch_item2857);
			expr261=expr();
			PopFollow();

			stream_expr.Add(expr261.Tree);
			DebugLocation(430, 16);
			// SugarCpp.g:430:16: ( ',' expr )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==93))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:430:17: ',' expr
					{
					DebugLocation(430, 17);
					char_literal262=(IToken)Match(input,93,Follow._93_in_switch_item2860);  
					stream_93.Add(char_literal262);

					DebugLocation(430, 21);
					PushFollow(Follow._expr_in_switch_item2862);
					expr263=expr();
					PopFollow();

					stream_expr.Add(expr263.Tree);

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }

			DebugLocation(430, 28);
			// SugarCpp.g:430:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==NEWLINE))
			{
				alt114 = 1;
			}
			else if ((LA114_0==152))
			{
				alt114 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:430:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(430, 30);
				// SugarCpp.g:430:30: ( NEWLINE )+
				int cnt113=0;
				try { DebugEnterSubRule(113);
				while (true)
				{
					int alt113=2;
					try { DebugEnterDecision(113, false);
					int LA113_0 = input.LA(1);

					if ((LA113_0==NEWLINE))
					{
						alt113 = 1;
					}


					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:430:30: NEWLINE
						{
						DebugLocation(430, 30);
						NEWLINE264=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item2868);  
						stream_NEWLINE.Add(NEWLINE264);


						}
						break;

					default:
						if (cnt113 >= 1)
							goto loop113;

						EarlyExitException eee113 = new EarlyExitException( 113, input );
						DebugRecognitionException(eee113);
						throw eee113;
					}
					cnt113++;
				}
				loop113:
					;

				} finally { DebugExitSubRule(113); }

				DebugLocation(430, 39);
				PushFollow(Follow._stmt_block_in_switch_item2871);
				stmt_block265=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block265.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 430:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(430, 53);
					// SugarCpp.g:430:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(430, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(430, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(430, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(430, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:431:30: 'then' inline_stmt_block
				{
				DebugLocation(431, 30);
				string_literal266=(IToken)Match(input,152,Follow._152_in_switch_item2913);  
				stream_152.Add(string_literal266);

				DebugLocation(431, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item2915);
				inline_stmt_block267=inline_stmt_block();
				PopFollow();

				stream_inline_stmt_block.Add(inline_stmt_block267.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 431:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(431, 58);
					// SugarCpp.g:431:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(431, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(431, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(431, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(431, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 43);
			LeaveRule("switch_item", 43);
			LeaveRule_switch_item();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:435:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 44);
		TraceIn("stmt_switch", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal268 = default(IToken);
		IToken NEWLINE270 = default(IToken);
		IToken INDENT271 = default(IToken);
		IToken NEWLINE272 = default(IToken);
		IToken NEWLINE274 = default(IToken);
		IToken string_literal275 = default(IToken);
		IToken NEWLINE276 = default(IToken);
		IToken NEWLINE278 = default(IToken);
		IToken DEDENT279 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree NEWLINE270_tree = default(CommonTree);
		CommonTree INDENT271_tree = default(CommonTree);
		CommonTree NEWLINE272_tree = default(CommonTree);
		CommonTree NEWLINE274_tree = default(CommonTree);
		CommonTree string_literal275_tree = default(CommonTree);
		CommonTree NEWLINE276_tree = default(CommonTree);
		CommonTree NEWLINE278_tree = default(CommonTree);
		CommonTree DEDENT279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(435, 1);
		try
		{
			// SugarCpp.g:436:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:436:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(436, 4);
			string_literal268=(IToken)Match(input,151,Follow._151_in_stmt_switch2951);  
			stream_151.Add(string_literal268);

			DebugLocation(436, 13);
			// SugarCpp.g:436:13: ( expr )?
			int alt115=2;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==IDENT||LA115_0==NUMBER||LA115_0==STRING||LA115_0==79||LA115_0==84||LA115_0==86||LA115_0==88||(LA115_0>=90 && LA115_0<=91)||(LA115_0>=94 && LA115_0<=95)||(LA115_0>=121 && LA115_0<=122)||LA115_0==144||(LA115_0>=146 && LA115_0<=147)||LA115_0==166))
			{
				alt115 = 1;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:436:13: expr
				{
				DebugLocation(436, 13);
				PushFollow(Follow._expr_in_stmt_switch2953);
				expr269=expr();
				PopFollow();

				stream_expr.Add(expr269.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(115); }

			DebugLocation(436, 19);
			// SugarCpp.g:436:19: ( NEWLINE )+
			int cnt116=0;
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=2;
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==NEWLINE))
				{
					alt116 = 1;
				}


				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:436:19: NEWLINE
					{
					DebugLocation(436, 19);
					NEWLINE270=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2956);  
					stream_NEWLINE.Add(NEWLINE270);


					}
					break;

				default:
					if (cnt116 >= 1)
						goto loop116;

					EarlyExitException eee116 = new EarlyExitException( 116, input );
					DebugRecognitionException(eee116);
					throw eee116;
				}
				cnt116++;
			}
			loop116:
				;

			} finally { DebugExitSubRule(116); }

			DebugLocation(436, 28);
			INDENT271=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch2959);  
			stream_INDENT.Add(INDENT271);

			DebugLocation(436, 35);
			// SugarCpp.g:436:35: ( NEWLINE )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:436:35: NEWLINE
					{
					DebugLocation(436, 35);
					NEWLINE272=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2961);  
					stream_NEWLINE.Add(NEWLINE272);


					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }

			DebugLocation(436, 44);
			// SugarCpp.g:436:44: ( switch_item ( NEWLINE )+ )+
			int cnt119=0;
			try { DebugEnterSubRule(119);
			while (true)
			{
				int alt119=2;
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==160))
				{
					alt119 = 1;
				}


				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:436:45: switch_item ( NEWLINE )+
					{
					DebugLocation(436, 45);
					PushFollow(Follow._switch_item_in_stmt_switch2965);
					switch_item273=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item273.Tree);
					DebugLocation(436, 57);
					// SugarCpp.g:436:57: ( NEWLINE )+
					int cnt118=0;
					try { DebugEnterSubRule(118);
					while (true)
					{
						int alt118=2;
						try { DebugEnterDecision(118, false);
						int LA118_0 = input.LA(1);

						if ((LA118_0==NEWLINE))
						{
							alt118 = 1;
						}


						} finally { DebugExitDecision(118); }
						switch (alt118)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:436:57: NEWLINE
							{
							DebugLocation(436, 57);
							NEWLINE274=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2967);  
							stream_NEWLINE.Add(NEWLINE274);


							}
							break;

						default:
							if (cnt118 >= 1)
								goto loop118;

							EarlyExitException eee118 = new EarlyExitException( 118, input );
							DebugRecognitionException(eee118);
							throw eee118;
						}
						cnt118++;
					}
					loop118:
						;

					} finally { DebugExitSubRule(118); }


					}
					break;

				default:
					if (cnt119 >= 1)
						goto loop119;

					EarlyExitException eee119 = new EarlyExitException( 119, input );
					DebugRecognitionException(eee119);
					throw eee119;
				}
				cnt119++;
			}
			loop119:
				;

			} finally { DebugExitSubRule(119); }

			DebugLocation(436, 68);
			// SugarCpp.g:436:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_0 = input.LA(1);

			if ((LA122_0==135))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:436:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(436, 69);
				string_literal275=(IToken)Match(input,135,Follow._135_in_stmt_switch2973);  
				stream_135.Add(string_literal275);

				DebugLocation(436, 76);
				// SugarCpp.g:436:76: ( NEWLINE )+
				int cnt120=0;
				try { DebugEnterSubRule(120);
				while (true)
				{
					int alt120=2;
					try { DebugEnterDecision(120, false);
					int LA120_0 = input.LA(1);

					if ((LA120_0==NEWLINE))
					{
						alt120 = 1;
					}


					} finally { DebugExitDecision(120); }
					switch (alt120)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:436:76: NEWLINE
						{
						DebugLocation(436, 76);
						NEWLINE276=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2975);  
						stream_NEWLINE.Add(NEWLINE276);


						}
						break;

					default:
						if (cnt120 >= 1)
							goto loop120;

						EarlyExitException eee120 = new EarlyExitException( 120, input );
						DebugRecognitionException(eee120);
						throw eee120;
					}
					cnt120++;
				}
				loop120:
					;

				} finally { DebugExitSubRule(120); }

				DebugLocation(436, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch2978);
				stmt_block277=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block277.Tree);
				DebugLocation(436, 96);
				// SugarCpp.g:436:96: ( NEWLINE )*
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==NEWLINE))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch ( alt121 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:436:96: NEWLINE
						{
						DebugLocation(436, 96);
						NEWLINE278=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch2980);  
						stream_NEWLINE.Add(NEWLINE278);


						}
						break;

					default:
						goto loop121;
					}
				}

				loop121:
					;

				} finally { DebugExitSubRule(121); }


				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(436, 107);
			DEDENT279=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch2985);  
			stream_DEDENT.Add(DEDENT279);



			{
			// AST REWRITE
			// elements: stmt_block, switch_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 436:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(436, 117);
				// SugarCpp.g:436:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(436, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(436, 131);
				// SugarCpp.g:436:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(436, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(436, 137);
				// SugarCpp.g:436:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(436, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(436, 150);
				// SugarCpp.g:436:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(436, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 44);
			LeaveRule("stmt_switch", 44);
			LeaveRule_stmt_switch();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:439:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 45);
		TraceIn("ident_list", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal281 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident282 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal281_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(439, 1);
		try
		{
			// SugarCpp.g:440:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:440:4: ident ( ',' ident )*
			{
			DebugLocation(440, 4);
			PushFollow(Follow._ident_in_ident_list3011);
			ident280=ident();
			PopFollow();

			stream_ident.Add(ident280.Tree);
			DebugLocation(440, 10);
			// SugarCpp.g:440:10: ( ',' ident )*
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==93))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch ( alt123 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:440:11: ',' ident
					{
					DebugLocation(440, 11);
					char_literal281=(IToken)Match(input,93,Follow._93_in_ident_list3014);  
					stream_93.Add(char_literal281);

					DebugLocation(440, 15);
					PushFollow(Follow._ident_in_ident_list3016);
					ident282=ident();
					PopFollow();

					stream_ident.Add(ident282.Tree);

					}
					break;

				default:
					goto loop123;
				}
			}

			loop123:
				;

			} finally { DebugExitSubRule(123); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 440:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(440, 26);
				// SugarCpp.g:440:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(440, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(440, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(440, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 45);
			LeaveRule("ident_list", 45);
			LeaveRule_ident_list();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:443:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 46);
		TraceIn("stmt_alloc", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal284 = default(IToken);
		IToken char_literal286 = default(IToken);
		IToken string_literal287 = default(IToken);
		IToken char_literal289 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken char_literal294 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list290 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal284_tree = default(CommonTree);
		CommonTree char_literal286_tree = default(CommonTree);
		CommonTree string_literal287_tree = default(CommonTree);
		CommonTree char_literal289_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree char_literal294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(443, 1);
		try
		{
			// SugarCpp.g:444:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:444:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			{
			DebugLocation(444, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3038);
			ident_list283=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list283.Tree);
			DebugLocation(444, 15);
			// SugarCpp.g:444:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			int alt128=2;
			try { DebugEnterSubRule(128);
			try { DebugEnterDecision(128, false);
			int LA128_0 = input.LA(1);

			if ((LA128_0==103))
			{
				alt128 = 1;
			}
			else if ((LA128_0==105))
			{
				alt128 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:444:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(444, 17);
				char_literal284=(IToken)Match(input,103,Follow._103_in_stmt_alloc3042);  
				stream_103.Add(char_literal284);

				DebugLocation(444, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3044);
				type_name285=type_name();
				PopFollow();

				stream_type_name.Add(type_name285.Tree);
				DebugLocation(444, 31);
				// SugarCpp.g:444:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt126=3;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				switch (input.LA(1))
				{
				case 105:
				case 112:
					{
					alt126 = 1;
					}
					break;
				case 86:
					{
					alt126 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 106:
				case 138:
				case 139:
				case 156:
				case 158:
				case 162:
					{
					alt126 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(444, 33);
					// SugarCpp.g:444:33: ( '=' | ':=' )
					int alt124=2;
					try { DebugEnterSubRule(124);
					try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0==112))
					{
						alt124 = 1;
					}
					else if ((LA124_0==105))
					{
						alt124 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:444:34: '='
						{
						DebugLocation(444, 34);
						char_literal286=(IToken)Match(input,112,Follow._112_in_stmt_alloc3049);  
						stream_112.Add(char_literal286);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:444:40: ':='
						{
						DebugLocation(444, 40);
						string_literal287=(IToken)Match(input,105,Follow._105_in_stmt_alloc3053);  
						stream_105.Add(string_literal287);


						}
						break;

					}
					} finally { DebugExitSubRule(124); }

					DebugLocation(444, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3056);
					where_expr288=where_expr();
					PopFollow();

					stream_where_expr.Add(where_expr288.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:58: -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
					{
						DebugLocation(444, 61);
						// SugarCpp.g:444:61: ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(444, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(444, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(444, 101);
						// SugarCpp.g:444:101: ( where_expr )?
						if (stream_where_expr.HasNext)
						{
							DebugLocation(444, 101);
							adaptor.AddChild(root_1, stream_where_expr.NextTree());

						}
						stream_where_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:445:33: '(' ( expr_list )? ')'
					{
					DebugLocation(445, 33);
					char_literal289=(IToken)Match(input,86,Follow._86_in_stmt_alloc3104);  
					stream_86.Add(char_literal289);

					DebugLocation(445, 37);
					// SugarCpp.g:445:37: ( expr_list )?
					int alt125=2;
					try { DebugEnterSubRule(125);
					try { DebugEnterDecision(125, false);
					int LA125_0 = input.LA(1);

					if ((LA125_0==IDENT||LA125_0==NUMBER||LA125_0==STRING||LA125_0==79||LA125_0==84||LA125_0==86||LA125_0==88||(LA125_0>=90 && LA125_0<=91)||(LA125_0>=94 && LA125_0<=95)||(LA125_0>=121 && LA125_0<=122)||LA125_0==144||(LA125_0>=146 && LA125_0<=147)||LA125_0==166))
					{
						alt125 = 1;
					}
					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:445:37: expr_list
						{
						DebugLocation(445, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3106);
						expr_list290=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list290.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(125); }

					DebugLocation(445, 48);
					char_literal291=(IToken)Match(input,87,Follow._87_in_stmt_alloc3109);  
					stream_87.Add(char_literal291);



					{
					// AST REWRITE
					// elements: type_name, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(445, 56);
						// SugarCpp.g:445:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(445, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(445, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(445, 98);
						// SugarCpp.g:445:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(445, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:446:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 446:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(446, 18);
						// SugarCpp.g:446:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(446, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(446, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(446, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(126); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:448:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(448, 8);
				string_literal292=(IToken)Match(input,105,Follow._105_in_stmt_alloc3170);  
				stream_105.Add(string_literal292);

				DebugLocation(448, 14);
				// SugarCpp.g:448:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:448:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(448, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3174);
				where_expr293=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr293.Tree);
				DebugLocation(448, 26);
				// SugarCpp.g:448:26: ( ',' where_expr )*
				try { DebugEnterSubRule(127);
				while (true)
				{
					int alt127=2;
					try { DebugEnterDecision(127, false);
					int LA127_0 = input.LA(1);

					if ((LA127_0==93))
					{
						alt127 = 1;
					}


					} finally { DebugExitDecision(127); }
					switch ( alt127 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:448:27: ',' where_expr
						{
						DebugLocation(448, 27);
						char_literal294=(IToken)Match(input,93,Follow._93_in_stmt_alloc3177);  
						stream_93.Add(char_literal294);

						DebugLocation(448, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3179);
						where_expr295=where_expr();
						PopFollow();

						stream_where_expr.Add(where_expr295.Tree);

						}
						break;

					default:
						goto loop127;
					}
				}

				loop127:
					;

				} finally { DebugExitSubRule(127); }


				}



				{
				// AST REWRITE
				// elements: where_expr, ident_list, 105
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 448:45: -> ^( ':=' ident_list ( where_expr )* )
				{
					DebugLocation(448, 48);
					// SugarCpp.g:448:48: ^( ':=' ident_list ( where_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(448, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_105.NextNode(), root_1);

					DebugLocation(448, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(448, 66);
					// SugarCpp.g:448:66: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(448, 66);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 46);
			LeaveRule("stmt_alloc", 46);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:451:1: stmt_modify : lvalue ( modify_expr_op ^ where_expr | '?=' ^ where_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 47);
		TraceIn("stmt_modify", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal299 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue296 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal299_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(451, 1);
		try
		{
			// SugarCpp.g:452:2: ( lvalue ( modify_expr_op ^ where_expr | '?=' ^ where_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:452:4: lvalue ( modify_expr_op ^ where_expr | '?=' ^ where_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(452, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3205);
			lvalue296=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue296.Tree);
			DebugLocation(452, 11);
			// SugarCpp.g:452:11: ( modify_expr_op ^ where_expr | '?=' ^ where_expr )?
			int alt129=3;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==82||LA129_0==85||LA129_0==89||LA129_0==92||LA129_0==96||LA129_0==102||LA129_0==110||LA129_0==112||LA129_0==118||LA129_0==125||LA129_0==164))
			{
				alt129 = 1;
			}
			else if ((LA129_0==120))
			{
				alt129 = 2;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:452:13: modify_expr_op ^ where_expr
				{
				DebugLocation(452, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3209);
				modify_expr_op297=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op297.Tree, root_0);
				DebugLocation(452, 29);
				PushFollow(Follow._where_expr_in_stmt_modify3212);
				where_expr298=where_expr();
				PopFollow();

				adaptor.AddChild(root_0, where_expr298.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:453:13: '?=' ^ where_expr
				{
				DebugLocation(453, 17);
				string_literal299=(IToken)Match(input,120,Follow._120_in_stmt_modify3226); 
				string_literal299_tree = (CommonTree)adaptor.Create(string_literal299);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal299_tree, root_0);
				DebugLocation(453, 19);
				PushFollow(Follow._where_expr_in_stmt_modify3229);
				where_expr300=where_expr();
				PopFollow();

				adaptor.AddChild(root_0, where_expr300.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 47);
			LeaveRule("stmt_modify", 47);
			LeaveRule_stmt_modify();
		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:456:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 48);
		TraceIn("match_item", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal301 = default(IToken);
		IToken string_literal303 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr304 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal301_tree = default(CommonTree);
		CommonTree string_literal303_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: '|' expr '=>' where_expr
			{
			DebugLocation(457, 4);
			char_literal301=(IToken)Match(input,163,Follow._163_in_match_item3242);  
			stream_163.Add(char_literal301);

			DebugLocation(457, 8);
			PushFollow(Follow._expr_in_match_item3244);
			expr302=expr();
			PopFollow();

			stream_expr.Add(expr302.Tree);
			DebugLocation(457, 13);
			string_literal303=(IToken)Match(input,114,Follow._114_in_match_item3246);  
			stream_114.Add(string_literal303);

			DebugLocation(457, 18);
			PushFollow(Follow._where_expr_in_match_item3248);
			where_expr304=where_expr();
			PopFollow();

			stream_where_expr.Add(where_expr304.Tree);


			{
			// AST REWRITE
			// elements: expr, where_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 457:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(457, 32);
				// SugarCpp.g:457:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(457, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(457, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(457, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 48);
			LeaveRule("match_item", 48);
			LeaveRule_match_item();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:460:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 49);
		TraceIn("match_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal305 = default(IToken);
		IToken NEWLINE307 = default(IToken);
		IToken INDENT308 = default(IToken);
		IToken NEWLINE309 = default(IToken);
		IToken NEWLINE311 = default(IToken);
		IToken DEDENT312 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr306 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item310 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal305_tree = default(CommonTree);
		CommonTree NEWLINE307_tree = default(CommonTree);
		CommonTree INDENT308_tree = default(CommonTree);
		CommonTree NEWLINE309_tree = default(CommonTree);
		CommonTree NEWLINE311_tree = default(CommonTree);
		CommonTree DEDENT312_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(460, 1);
		try
		{
			// SugarCpp.g:461:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:461:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(461, 4);
			string_literal305=(IToken)Match(input,144,Follow._144_in_match_expr3269);  
			stream_144.Add(string_literal305);

			DebugLocation(461, 12);
			// SugarCpp.g:461:12: ( expr )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==IDENT||LA130_0==NUMBER||LA130_0==STRING||LA130_0==79||LA130_0==84||LA130_0==86||LA130_0==88||(LA130_0>=90 && LA130_0<=91)||(LA130_0>=94 && LA130_0<=95)||(LA130_0>=121 && LA130_0<=122)||LA130_0==144||(LA130_0>=146 && LA130_0<=147)||LA130_0==166))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:461:12: expr
				{
				DebugLocation(461, 12);
				PushFollow(Follow._expr_in_match_expr3271);
				expr306=expr();
				PopFollow();

				stream_expr.Add(expr306.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(461, 18);
			// SugarCpp.g:461:18: ( NEWLINE )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==NEWLINE))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:461:18: NEWLINE
					{
					DebugLocation(461, 18);
					NEWLINE307=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr3274);  
					stream_NEWLINE.Add(NEWLINE307);


					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(461, 27);
			INDENT308=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr3277);  
			stream_INDENT.Add(INDENT308);

			DebugLocation(461, 34);
			// SugarCpp.g:461:34: ( NEWLINE )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==NEWLINE))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:461:34: NEWLINE
					{
					DebugLocation(461, 34);
					NEWLINE309=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr3279);  
					stream_NEWLINE.Add(NEWLINE309);


					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(461, 43);
			// SugarCpp.g:461:43: ( match_item ( NEWLINE )+ )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==163))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:461:44: match_item ( NEWLINE )+
					{
					DebugLocation(461, 44);
					PushFollow(Follow._match_item_in_match_expr3283);
					match_item310=match_item();
					PopFollow();

					stream_match_item.Add(match_item310.Tree);
					DebugLocation(461, 55);
					// SugarCpp.g:461:55: ( NEWLINE )+
					int cnt133=0;
					try { DebugEnterSubRule(133);
					while (true)
					{
						int alt133=2;
						try { DebugEnterDecision(133, false);
						int LA133_0 = input.LA(1);

						if ((LA133_0==NEWLINE))
						{
							alt133 = 1;
						}


						} finally { DebugExitDecision(133); }
						switch (alt133)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:461:55: NEWLINE
							{
							DebugLocation(461, 55);
							NEWLINE311=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr3285);  
							stream_NEWLINE.Add(NEWLINE311);


							}
							break;

						default:
							if (cnt133 >= 1)
								goto loop133;

							EarlyExitException eee133 = new EarlyExitException( 133, input );
							DebugRecognitionException(eee133);
							throw eee133;
						}
						cnt133++;
					}
					loop133:
						;

					} finally { DebugExitSubRule(133); }


					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(461, 66);
			DEDENT312=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr3290);  
			stream_DEDENT.Add(DEDENT312);



			{
			// AST REWRITE
			// elements: match_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 461:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(461, 76);
				// SugarCpp.g:461:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(461, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(461, 89);
				// SugarCpp.g:461:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(461, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(461, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(461, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 49);
			LeaveRule("match_expr", 49);
			LeaveRule_match_expr();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:464:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 50);
		TraceIn("where_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt313 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(464, 1);
		try
		{
			// SugarCpp.g:465:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:465:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(465, 4);
			PushFollow(Follow._stmt_in_where_item3313);
			stmt313=stmt();
			PopFollow();

			adaptor.AddChild(root_0, stmt313.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 50);
			LeaveRule("where_item", 50);
			LeaveRule_where_item();
		}
		DebugLocation(466, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:468:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 51);
		TraceIn("where_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE314 = default(IToken);
		IToken INDENT315 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken string_literal317 = default(IToken);
		IToken NEWLINE319 = default(IToken);
		IToken DEDENT320 = default(IToken);
		IToken NEWLINE321 = default(IToken);
		IToken INDENT322 = default(IToken);
		IToken NEWLINE323 = default(IToken);
		IToken NEWLINE325 = default(IToken);
		IToken DEDENT326 = default(IToken);
		IToken NEWLINE327 = default(IToken);
		IToken DEDENT328 = default(IToken);
		IToken NEWLINE329 = default(IToken);
		IToken INDENT330 = default(IToken);
		IToken NEWLINE331 = default(IToken);
		IToken NEWLINE333 = default(IToken);
		IToken DEDENT334 = default(IToken);
		IToken NEWLINE335 = default(IToken);
		IToken DEDENT336 = default(IToken);
		IToken string_literal337 = default(IToken);
		IToken NEWLINE338 = default(IToken);
		IToken INDENT339 = default(IToken);
		IToken NEWLINE340 = default(IToken);
		IToken NEWLINE342 = default(IToken);
		IToken DEDENT343 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE314_tree = default(CommonTree);
		CommonTree INDENT315_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree string_literal317_tree = default(CommonTree);
		CommonTree NEWLINE319_tree = default(CommonTree);
		CommonTree DEDENT320_tree = default(CommonTree);
		CommonTree NEWLINE321_tree = default(CommonTree);
		CommonTree INDENT322_tree = default(CommonTree);
		CommonTree NEWLINE323_tree = default(CommonTree);
		CommonTree NEWLINE325_tree = default(CommonTree);
		CommonTree DEDENT326_tree = default(CommonTree);
		CommonTree NEWLINE327_tree = default(CommonTree);
		CommonTree DEDENT328_tree = default(CommonTree);
		CommonTree NEWLINE329_tree = default(CommonTree);
		CommonTree INDENT330_tree = default(CommonTree);
		CommonTree NEWLINE331_tree = default(CommonTree);
		CommonTree NEWLINE333_tree = default(CommonTree);
		CommonTree DEDENT334_tree = default(CommonTree);
		CommonTree NEWLINE335_tree = default(CommonTree);
		CommonTree DEDENT336_tree = default(CommonTree);
		CommonTree string_literal337_tree = default(CommonTree);
		CommonTree NEWLINE338_tree = default(CommonTree);
		CommonTree INDENT339_tree = default(CommonTree);
		CommonTree NEWLINE340_tree = default(CommonTree);
		CommonTree NEWLINE342_tree = default(CommonTree);
		CommonTree DEDENT343_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(468, 1);
		try
		{
			// SugarCpp.g:469:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:469:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(469, 4);
			// SugarCpp.g:469:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:469:5: a= expr
			{
			DebugLocation(469, 6);
			PushFollow(Follow._expr_in_where_expr3327);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 469:12: -> $a
			{
				DebugLocation(469, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(469, 19);
			// SugarCpp.g:469:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt154=3;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			try
			{
				alt154 = dfa154.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:469:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(469, 21);
				// SugarCpp.g:469:21: ( NEWLINE )+
				int cnt135=0;
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, false);
					int LA135_0 = input.LA(1);

					if ((LA135_0==NEWLINE))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:469:21: NEWLINE
						{
						DebugLocation(469, 21);
						NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3337);  
						stream_NEWLINE.Add(NEWLINE314);


						}
						break;

					default:
						if (cnt135 >= 1)
							goto loop135;

						EarlyExitException eee135 = new EarlyExitException( 135, input );
						DebugRecognitionException(eee135);
						throw eee135;
					}
					cnt135++;
				}
				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(469, 30);
				INDENT315=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3340);  
				stream_INDENT.Add(INDENT315);

				DebugLocation(469, 37);
				// SugarCpp.g:469:37: ( NEWLINE )*
				try { DebugEnterSubRule(136);
				while (true)
				{
					int alt136=2;
					try { DebugEnterDecision(136, false);
					int LA136_0 = input.LA(1);

					if ((LA136_0==NEWLINE))
					{
						alt136 = 1;
					}


					} finally { DebugExitDecision(136); }
					switch ( alt136 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:469:37: NEWLINE
						{
						DebugLocation(469, 37);
						NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3342);  
						stream_NEWLINE.Add(NEWLINE316);


						}
						break;

					default:
						goto loop136;
					}
				}

				loop136:
					;

				} finally { DebugExitSubRule(136); }

				DebugLocation(469, 46);
				string_literal317=(IToken)Match(input,161,Follow._161_in_where_expr3345);  
				stream_161.Add(string_literal317);

				DebugLocation(469, 54);
				// SugarCpp.g:469:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==IDENT||LA149_0==79||LA149_0==84||LA149_0==86||LA149_0==88||(LA149_0>=90 && LA149_0<=91)||(LA149_0>=94 && LA149_0<=95)||LA149_0==121||LA149_0==133||(LA149_0>=137 && LA149_0<=139)||LA149_0==143||LA149_0==147||LA149_0==149||LA149_0==151||(LA149_0>=154 && LA149_0<=156)||(LA149_0>=158 && LA149_0<=159)||LA149_0==162||LA149_0==166))
				{
					alt149 = 1;
				}
				else if ((LA149_0==NEWLINE))
				{
					alt149 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 149, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:469:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(469, 56);
					PushFollow(Follow._where_item_in_where_expr3349);
					where_item318=where_item();
					PopFollow();

					stream_where_item.Add(where_item318.Tree);
					DebugLocation(469, 67);
					// SugarCpp.g:469:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt143=2;
					try { DebugEnterSubRule(143);
					try { DebugEnterDecision(143, false);
					try
					{
						alt143 = dfa143.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(143); }
					switch (alt143)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:469:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(469, 69);
						// SugarCpp.g:469:69: ( NEWLINE )*
						try { DebugEnterSubRule(137);
						while (true)
						{
							int alt137=2;
							try { DebugEnterDecision(137, false);
							int LA137_0 = input.LA(1);

							if ((LA137_0==NEWLINE))
							{
								alt137 = 1;
							}


							} finally { DebugExitDecision(137); }
							switch ( alt137 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:469:69: NEWLINE
								{
								DebugLocation(469, 69);
								NEWLINE319=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3353);  
								stream_NEWLINE.Add(NEWLINE319);


								}
								break;

							default:
								goto loop137;
							}
						}

						loop137:
							;

						} finally { DebugExitSubRule(137); }

						DebugLocation(469, 78);
						DEDENT320=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3356);  
						stream_DEDENT.Add(DEDENT320);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 469:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(469, 88);
							// SugarCpp.g:469:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(469, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(469, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(469, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:470:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(470, 21);
						// SugarCpp.g:470:21: ( NEWLINE )+
						int cnt138=0;
						try { DebugEnterSubRule(138);
						while (true)
						{
							int alt138=2;
							try { DebugEnterDecision(138, false);
							int LA138_0 = input.LA(1);

							if ((LA138_0==NEWLINE))
							{
								alt138 = 1;
							}


							} finally { DebugExitDecision(138); }
							switch (alt138)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:470:21: NEWLINE
								{
								DebugLocation(470, 21);
								NEWLINE321=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3389);  
								stream_NEWLINE.Add(NEWLINE321);


								}
								break;

							default:
								if (cnt138 >= 1)
									goto loop138;

								EarlyExitException eee138 = new EarlyExitException( 138, input );
								DebugRecognitionException(eee138);
								throw eee138;
							}
							cnt138++;
						}
						loop138:
							;

						} finally { DebugExitSubRule(138); }

						DebugLocation(470, 30);
						INDENT322=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3392);  
						stream_INDENT.Add(INDENT322);

						DebugLocation(470, 37);
						// SugarCpp.g:470:37: ( NEWLINE )*
						try { DebugEnterSubRule(139);
						while (true)
						{
							int alt139=2;
							try { DebugEnterDecision(139, false);
							int LA139_0 = input.LA(1);

							if ((LA139_0==NEWLINE))
							{
								alt139 = 1;
							}


							} finally { DebugExitDecision(139); }
							switch ( alt139 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:470:37: NEWLINE
								{
								DebugLocation(470, 37);
								NEWLINE323=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3394);  
								stream_NEWLINE.Add(NEWLINE323);


								}
								break;

							default:
								goto loop139;
							}
						}

						loop139:
							;

						} finally { DebugExitSubRule(139); }

						DebugLocation(470, 46);
						// SugarCpp.g:470:46: ( where_item ( NEWLINE )+ )+
						int cnt141=0;
						try { DebugEnterSubRule(141);
						while (true)
						{
							int alt141=2;
							try { DebugEnterDecision(141, false);
							int LA141_0 = input.LA(1);

							if ((LA141_0==IDENT||LA141_0==79||LA141_0==84||LA141_0==86||LA141_0==88||(LA141_0>=90 && LA141_0<=91)||(LA141_0>=94 && LA141_0<=95)||LA141_0==121||LA141_0==133||(LA141_0>=137 && LA141_0<=139)||LA141_0==143||LA141_0==147||LA141_0==149||LA141_0==151||(LA141_0>=154 && LA141_0<=156)||(LA141_0>=158 && LA141_0<=159)||LA141_0==162||LA141_0==166))
							{
								alt141 = 1;
							}


							} finally { DebugExitDecision(141); }
							switch (alt141)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:470:47: where_item ( NEWLINE )+
								{
								DebugLocation(470, 47);
								PushFollow(Follow._where_item_in_where_expr3398);
								where_item324=where_item();
								PopFollow();

								stream_where_item.Add(where_item324.Tree);
								DebugLocation(470, 58);
								// SugarCpp.g:470:58: ( NEWLINE )+
								int cnt140=0;
								try { DebugEnterSubRule(140);
								while (true)
								{
									int alt140=2;
									try { DebugEnterDecision(140, false);
									int LA140_0 = input.LA(1);

									if ((LA140_0==NEWLINE))
									{
										alt140 = 1;
									}


									} finally { DebugExitDecision(140); }
									switch (alt140)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:470:58: NEWLINE
										{
										DebugLocation(470, 58);
										NEWLINE325=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3400);  
										stream_NEWLINE.Add(NEWLINE325);


										}
										break;

									default:
										if (cnt140 >= 1)
											goto loop140;

										EarlyExitException eee140 = new EarlyExitException( 140, input );
										DebugRecognitionException(eee140);
										throw eee140;
									}
									cnt140++;
								}
								loop140:
									;

								} finally { DebugExitSubRule(140); }


								}
								break;

							default:
								if (cnt141 >= 1)
									goto loop141;

								EarlyExitException eee141 = new EarlyExitException( 141, input );
								DebugRecognitionException(eee141);
								throw eee141;
							}
							cnt141++;
						}
						loop141:
							;

						} finally { DebugExitSubRule(141); }

						DebugLocation(470, 69);
						DEDENT326=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3405);  
						stream_DEDENT.Add(DEDENT326);

						DebugLocation(470, 76);
						// SugarCpp.g:470:76: ( NEWLINE )*
						try { DebugEnterSubRule(142);
						while (true)
						{
							int alt142=2;
							try { DebugEnterDecision(142, false);
							int LA142_0 = input.LA(1);

							if ((LA142_0==NEWLINE))
							{
								alt142 = 1;
							}


							} finally { DebugExitDecision(142); }
							switch ( alt142 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:470:76: NEWLINE
								{
								DebugLocation(470, 76);
								NEWLINE327=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3407);  
								stream_NEWLINE.Add(NEWLINE327);


								}
								break;

							default:
								goto loop142;
							}
						}

						loop142:
							;

						} finally { DebugExitSubRule(142); }

						DebugLocation(470, 85);
						DEDENT328=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3410);  
						stream_DEDENT.Add(DEDENT328);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 470:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(470, 95);
							// SugarCpp.g:470:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(470, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(470, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(470, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(470, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(143); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:472:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(472, 17);
					// SugarCpp.g:472:17: ( NEWLINE )+
					int cnt144=0;
					try { DebugEnterSubRule(144);
					while (true)
					{
						int alt144=2;
						try { DebugEnterDecision(144, false);
						int LA144_0 = input.LA(1);

						if ((LA144_0==NEWLINE))
						{
							alt144 = 1;
						}


						} finally { DebugExitDecision(144); }
						switch (alt144)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:472:17: NEWLINE
							{
							DebugLocation(472, 17);
							NEWLINE329=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3460);  
							stream_NEWLINE.Add(NEWLINE329);


							}
							break;

						default:
							if (cnt144 >= 1)
								goto loop144;

							EarlyExitException eee144 = new EarlyExitException( 144, input );
							DebugRecognitionException(eee144);
							throw eee144;
						}
						cnt144++;
					}
					loop144:
						;

					} finally { DebugExitSubRule(144); }

					DebugLocation(472, 26);
					INDENT330=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3463);  
					stream_INDENT.Add(INDENT330);

					DebugLocation(472, 33);
					// SugarCpp.g:472:33: ( NEWLINE )*
					try { DebugEnterSubRule(145);
					while (true)
					{
						int alt145=2;
						try { DebugEnterDecision(145, false);
						int LA145_0 = input.LA(1);

						if ((LA145_0==NEWLINE))
						{
							alt145 = 1;
						}


						} finally { DebugExitDecision(145); }
						switch ( alt145 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:472:33: NEWLINE
							{
							DebugLocation(472, 33);
							NEWLINE331=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3465);  
							stream_NEWLINE.Add(NEWLINE331);


							}
							break;

						default:
							goto loop145;
						}
					}

					loop145:
						;

					} finally { DebugExitSubRule(145); }

					DebugLocation(472, 42);
					// SugarCpp.g:472:42: ( where_item ( NEWLINE )+ )+
					int cnt147=0;
					try { DebugEnterSubRule(147);
					while (true)
					{
						int alt147=2;
						try { DebugEnterDecision(147, false);
						int LA147_0 = input.LA(1);

						if ((LA147_0==IDENT||LA147_0==79||LA147_0==84||LA147_0==86||LA147_0==88||(LA147_0>=90 && LA147_0<=91)||(LA147_0>=94 && LA147_0<=95)||LA147_0==121||LA147_0==133||(LA147_0>=137 && LA147_0<=139)||LA147_0==143||LA147_0==147||LA147_0==149||LA147_0==151||(LA147_0>=154 && LA147_0<=156)||(LA147_0>=158 && LA147_0<=159)||LA147_0==162||LA147_0==166))
						{
							alt147 = 1;
						}


						} finally { DebugExitDecision(147); }
						switch (alt147)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:472:43: where_item ( NEWLINE )+
							{
							DebugLocation(472, 43);
							PushFollow(Follow._where_item_in_where_expr3469);
							where_item332=where_item();
							PopFollow();

							stream_where_item.Add(where_item332.Tree);
							DebugLocation(472, 54);
							// SugarCpp.g:472:54: ( NEWLINE )+
							int cnt146=0;
							try { DebugEnterSubRule(146);
							while (true)
							{
								int alt146=2;
								try { DebugEnterDecision(146, false);
								int LA146_0 = input.LA(1);

								if ((LA146_0==NEWLINE))
								{
									alt146 = 1;
								}


								} finally { DebugExitDecision(146); }
								switch (alt146)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:472:54: NEWLINE
									{
									DebugLocation(472, 54);
									NEWLINE333=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3471);  
									stream_NEWLINE.Add(NEWLINE333);


									}
									break;

								default:
									if (cnt146 >= 1)
										goto loop146;

									EarlyExitException eee146 = new EarlyExitException( 146, input );
									DebugRecognitionException(eee146);
									throw eee146;
								}
								cnt146++;
							}
							loop146:
								;

							} finally { DebugExitSubRule(146); }


							}
							break;

						default:
							if (cnt147 >= 1)
								goto loop147;

							EarlyExitException eee147 = new EarlyExitException( 147, input );
							DebugRecognitionException(eee147);
							throw eee147;
						}
						cnt147++;
					}
					loop147:
						;

					} finally { DebugExitSubRule(147); }

					DebugLocation(472, 65);
					DEDENT334=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3476);  
					stream_DEDENT.Add(DEDENT334);

					DebugLocation(472, 72);
					// SugarCpp.g:472:72: ( NEWLINE )*
					try { DebugEnterSubRule(148);
					while (true)
					{
						int alt148=2;
						try { DebugEnterDecision(148, false);
						int LA148_0 = input.LA(1);

						if ((LA148_0==NEWLINE))
						{
							alt148 = 1;
						}


						} finally { DebugExitDecision(148); }
						switch ( alt148 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:472:72: NEWLINE
							{
							DebugLocation(472, 72);
							NEWLINE335=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3478);  
							stream_NEWLINE.Add(NEWLINE335);


							}
							break;

						default:
							goto loop148;
						}
					}

					loop148:
						;

					} finally { DebugExitSubRule(148); }

					DebugLocation(472, 81);
					DEDENT336=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3481);  
					stream_DEDENT.Add(DEDENT336);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 472:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(472, 91);
						// SugarCpp.g:472:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(472, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(472, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(472, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(472, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(149); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:474:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(474, 9);
				string_literal337=(IToken)Match(input,161,Follow._161_in_where_expr3519);  
				stream_161.Add(string_literal337);

				DebugLocation(474, 17);
				// SugarCpp.g:474:17: ( NEWLINE )+
				int cnt150=0;
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, false);
					int LA150_0 = input.LA(1);

					if ((LA150_0==NEWLINE))
					{
						alt150 = 1;
					}


					} finally { DebugExitDecision(150); }
					switch (alt150)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:474:17: NEWLINE
						{
						DebugLocation(474, 17);
						NEWLINE338=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3521);  
						stream_NEWLINE.Add(NEWLINE338);


						}
						break;

					default:
						if (cnt150 >= 1)
							goto loop150;

						EarlyExitException eee150 = new EarlyExitException( 150, input );
						DebugRecognitionException(eee150);
						throw eee150;
					}
					cnt150++;
				}
				loop150:
					;

				} finally { DebugExitSubRule(150); }

				DebugLocation(474, 26);
				INDENT339=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3524);  
				stream_INDENT.Add(INDENT339);

				DebugLocation(474, 33);
				// SugarCpp.g:474:33: ( NEWLINE )*
				try { DebugEnterSubRule(151);
				while (true)
				{
					int alt151=2;
					try { DebugEnterDecision(151, false);
					int LA151_0 = input.LA(1);

					if ((LA151_0==NEWLINE))
					{
						alt151 = 1;
					}


					} finally { DebugExitDecision(151); }
					switch ( alt151 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:474:33: NEWLINE
						{
						DebugLocation(474, 33);
						NEWLINE340=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3526);  
						stream_NEWLINE.Add(NEWLINE340);


						}
						break;

					default:
						goto loop151;
					}
				}

				loop151:
					;

				} finally { DebugExitSubRule(151); }

				DebugLocation(474, 42);
				// SugarCpp.g:474:42: ( where_item ( NEWLINE )+ )+
				int cnt153=0;
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==IDENT||LA153_0==79||LA153_0==84||LA153_0==86||LA153_0==88||(LA153_0>=90 && LA153_0<=91)||(LA153_0>=94 && LA153_0<=95)||LA153_0==121||LA153_0==133||(LA153_0>=137 && LA153_0<=139)||LA153_0==143||LA153_0==147||LA153_0==149||LA153_0==151||(LA153_0>=154 && LA153_0<=156)||(LA153_0>=158 && LA153_0<=159)||LA153_0==162||LA153_0==166))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:474:43: where_item ( NEWLINE )+
						{
						DebugLocation(474, 43);
						PushFollow(Follow._where_item_in_where_expr3530);
						where_item341=where_item();
						PopFollow();

						stream_where_item.Add(where_item341.Tree);
						DebugLocation(474, 54);
						// SugarCpp.g:474:54: ( NEWLINE )+
						int cnt152=0;
						try { DebugEnterSubRule(152);
						while (true)
						{
							int alt152=2;
							try { DebugEnterDecision(152, false);
							int LA152_0 = input.LA(1);

							if ((LA152_0==NEWLINE))
							{
								alt152 = 1;
							}


							} finally { DebugExitDecision(152); }
							switch (alt152)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:474:54: NEWLINE
								{
								DebugLocation(474, 54);
								NEWLINE342=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3532);  
								stream_NEWLINE.Add(NEWLINE342);


								}
								break;

							default:
								if (cnt152 >= 1)
									goto loop152;

								EarlyExitException eee152 = new EarlyExitException( 152, input );
								DebugRecognitionException(eee152);
								throw eee152;
							}
							cnt152++;
						}
						loop152:
							;

						} finally { DebugExitSubRule(152); }


						}
						break;

					default:
						if (cnt153 >= 1)
							goto loop153;

						EarlyExitException eee153 = new EarlyExitException( 153, input );
						DebugRecognitionException(eee153);
						throw eee153;
					}
					cnt153++;
				}
				loop153:
					;

				} finally { DebugExitSubRule(153); }

				DebugLocation(474, 65);
				DEDENT343=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3537);  
				stream_DEDENT.Add(DEDENT343);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 474:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(474, 75);
					// SugarCpp.g:474:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(474, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(474, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(474, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(474, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:475:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 475:15: -> expr
				{
					DebugLocation(475, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(154); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 51);
			LeaveRule("where_expr", 51);
			LeaveRule_where_expr();
		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:479:1: expr : ( list_expr | match_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 52);
		TraceIn("expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr345 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(479, 1);
		try
		{
			// SugarCpp.g:480:2: ( list_expr | match_expr )
			int alt155=2;
			try { DebugEnterDecision(155, false);
			int LA155_0 = input.LA(1);

			if ((LA155_0==IDENT||LA155_0==NUMBER||LA155_0==STRING||LA155_0==79||LA155_0==84||LA155_0==86||LA155_0==88||(LA155_0>=90 && LA155_0<=91)||(LA155_0>=94 && LA155_0<=95)||(LA155_0>=121 && LA155_0<=122)||(LA155_0>=146 && LA155_0<=147)||LA155_0==166))
			{
				alt155 = 1;
			}
			else if ((LA155_0==144))
			{
				alt155 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 155, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:480:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(480, 4);
				PushFollow(Follow._list_expr_in_expr3595);
				list_expr344=list_expr();
				PopFollow();

				adaptor.AddChild(root_0, list_expr344.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:481:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(481, 4);
				PushFollow(Follow._match_expr_in_expr3600);
				match_expr345=match_expr();
				PopFollow();

				adaptor.AddChild(root_0, match_expr345.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 52);
			LeaveRule("expr", 52);
			LeaveRule_expr();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:484:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 53);
		TraceIn("list_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal346 = default(IToken);
		IToken char_literal347 = default(IToken);
		IToken NEWLINE348 = default(IToken);
		IToken INDENT349 = default(IToken);
		IToken DEDENT350 = default(IToken);
		IToken char_literal352 = default(IToken);
		IToken NEWLINE353 = default(IToken);
		IToken INDENT354 = default(IToken);
		IToken DEDENT355 = default(IToken);
		IToken char_literal357 = default(IToken);
		IToken NEWLINE358 = default(IToken);
		IToken INDENT359 = default(IToken);
		IToken DEDENT360 = default(IToken);
		IToken char_literal361 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr356 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal346_tree = default(CommonTree);
		CommonTree char_literal347_tree = default(CommonTree);
		CommonTree NEWLINE348_tree = default(CommonTree);
		CommonTree INDENT349_tree = default(CommonTree);
		CommonTree DEDENT350_tree = default(CommonTree);
		CommonTree char_literal352_tree = default(CommonTree);
		CommonTree NEWLINE353_tree = default(CommonTree);
		CommonTree INDENT354_tree = default(CommonTree);
		CommonTree DEDENT355_tree = default(CommonTree);
		CommonTree char_literal357_tree = default(CommonTree);
		CommonTree NEWLINE358_tree = default(CommonTree);
		CommonTree INDENT359_tree = default(CommonTree);
		CommonTree DEDENT360_tree = default(CommonTree);
		CommonTree char_literal361_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(484, 1);
		try
		{
			// SugarCpp.g:485:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt161=2;
			try { DebugEnterDecision(161, false);
			int LA161_0 = input.LA(1);

			if ((LA161_0==122))
			{
				alt161 = 1;
			}
			else if ((LA161_0==IDENT||LA161_0==NUMBER||LA161_0==STRING||LA161_0==79||LA161_0==84||LA161_0==86||LA161_0==88||(LA161_0>=90 && LA161_0<=91)||(LA161_0>=94 && LA161_0<=95)||LA161_0==121||(LA161_0>=146 && LA161_0<=147)||LA161_0==166))
			{
				alt161 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 161, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:485:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(485, 4);
				char_literal346=(IToken)Match(input,122,Follow._122_in_list_expr3611);  
				stream_122.Add(char_literal346);

				DebugLocation(485, 8);
				// SugarCpp.g:485:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, false);
				try
				{
					alt159 = dfa159.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:485:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(485, 9);
					// SugarCpp.g:485:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(156);
					while (true)
					{
						int alt156=5;
						try { DebugEnterDecision(156, false);
						switch (input.LA(1))
						{
						case 93:
							{
							alt156 = 1;
							}
							break;
						case NEWLINE:
							{
							alt156 = 2;
							}
							break;
						case INDENT:
							{
							alt156 = 3;
							}
							break;
						case DEDENT:
							{
							alt156 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(156); }
						switch ( alt156 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:485:10: ','
							{
							DebugLocation(485, 10);
							char_literal347=(IToken)Match(input,93,Follow._93_in_list_expr3615);  
							stream_93.Add(char_literal347);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:485:16: NEWLINE
							{
							DebugLocation(485, 16);
							NEWLINE348=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3619);  
							stream_NEWLINE.Add(NEWLINE348);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:485:26: INDENT
							{
							DebugLocation(485, 26);
							INDENT349=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3623);  
							stream_INDENT.Add(INDENT349);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:485:35: DEDENT
							{
							DebugLocation(485, 35);
							DEDENT350=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3627);  
							stream_DEDENT.Add(DEDENT350);


							}
							break;

						default:
							goto loop156;
						}
					}

					loop156:
						;

					} finally { DebugExitSubRule(156); }

					DebugLocation(485, 44);
					PushFollow(Follow._list_expr_in_list_expr3631);
					list_expr351=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr351.Tree);
					DebugLocation(485, 54);
					// SugarCpp.g:485:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(158);
					while (true)
					{
						int alt158=2;
						try { DebugEnterDecision(158, false);
						try
						{
							alt158 = dfa158.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(158); }
						switch ( alt158 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:485:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(485, 55);
							// SugarCpp.g:485:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt157=0;
							try { DebugEnterSubRule(157);
							while (true)
							{
								int alt157=5;
								try { DebugEnterDecision(157, false);
								switch (input.LA(1))
								{
								case 93:
									{
									alt157 = 1;
									}
									break;
								case NEWLINE:
									{
									alt157 = 2;
									}
									break;
								case INDENT:
									{
									alt157 = 3;
									}
									break;
								case DEDENT:
									{
									alt157 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(157); }
								switch (alt157)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:485:56: ','
									{
									DebugLocation(485, 56);
									char_literal352=(IToken)Match(input,93,Follow._93_in_list_expr3635);  
									stream_93.Add(char_literal352);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:485:62: NEWLINE
									{
									DebugLocation(485, 62);
									NEWLINE353=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3639);  
									stream_NEWLINE.Add(NEWLINE353);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:485:72: INDENT
									{
									DebugLocation(485, 72);
									INDENT354=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3643);  
									stream_INDENT.Add(INDENT354);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:485:81: DEDENT
									{
									DebugLocation(485, 81);
									DEDENT355=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3647);  
									stream_DEDENT.Add(DEDENT355);


									}
									break;

								default:
									if (cnt157 >= 1)
										goto loop157;

									EarlyExitException eee157 = new EarlyExitException( 157, input );
									DebugRecognitionException(eee157);
									throw eee157;
								}
								cnt157++;
							}
							loop157:
								;

							} finally { DebugExitSubRule(157); }

							DebugLocation(485, 90);
							PushFollow(Follow._list_expr_in_list_expr3651);
							list_expr356=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr356.Tree);

							}
							break;

						default:
							goto loop158;
						}
					}

					loop158:
						;

					} finally { DebugExitSubRule(158); }


					}
					break;

				}
				} finally { DebugExitSubRule(159); }

				DebugLocation(485, 104);
				// SugarCpp.g:485:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(160);
				while (true)
				{
					int alt160=5;
					try { DebugEnterDecision(160, false);
					switch (input.LA(1))
					{
					case 93:
						{
						alt160 = 1;
						}
						break;
					case NEWLINE:
						{
						alt160 = 2;
						}
						break;
					case INDENT:
						{
						alt160 = 3;
						}
						break;
					case DEDENT:
						{
						alt160 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(160); }
					switch ( alt160 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:485:105: ','
						{
						DebugLocation(485, 105);
						char_literal357=(IToken)Match(input,93,Follow._93_in_list_expr3658);  
						stream_93.Add(char_literal357);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:485:111: NEWLINE
						{
						DebugLocation(485, 111);
						NEWLINE358=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3662);  
						stream_NEWLINE.Add(NEWLINE358);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:485:121: INDENT
						{
						DebugLocation(485, 121);
						INDENT359=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3666);  
						stream_INDENT.Add(INDENT359);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:485:130: DEDENT
						{
						DebugLocation(485, 130);
						DEDENT360=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3670);  
						stream_DEDENT.Add(DEDENT360);


						}
						break;

					default:
						goto loop160;
					}
				}

				loop160:
					;

				} finally { DebugExitSubRule(160); }

				DebugLocation(485, 139);
				char_literal361=(IToken)Match(input,123,Follow._123_in_list_expr3674);  
				stream_123.Add(char_literal361);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 485:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(485, 146);
					// SugarCpp.g:485:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(485, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(485, 158);
					// SugarCpp.g:485:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(485, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:486:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(486, 4);
				PushFollow(Follow._lambda_expr_in_list_expr3688);
				lambda_expr362=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr362.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 53);
			LeaveRule("list_expr", 53);
			LeaveRule_list_expr();
		}
		DebugLocation(487, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:489:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 54);
		TraceIn("lambda_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal363 = default(IToken);
		IToken char_literal365 = default(IToken);
		IToken string_literal366 = default(IToken);
		IToken string_literal368 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr367 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr369 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr370 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal363_tree = default(CommonTree);
		CommonTree char_literal365_tree = default(CommonTree);
		CommonTree string_literal366_tree = default(CommonTree);
		CommonTree string_literal368_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(489, 1);
		try
		{
			// SugarCpp.g:490:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt164=2;
			try { DebugEnterDecision(164, false);
			try
			{
				alt164 = dfa164.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:490:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(490, 4);
				char_literal363=(IToken)Match(input,86,Follow._86_in_lambda_expr3699);  
				stream_86.Add(char_literal363);

				DebugLocation(490, 8);
				// SugarCpp.g:490:8: ( func_args )?
				int alt162=2;
				try { DebugEnterSubRule(162);
				try { DebugEnterDecision(162, false);
				int LA162_0 = input.LA(1);

				if ((LA162_0==IDENT||LA162_0==105))
				{
					alt162 = 1;
				}
				} finally { DebugExitDecision(162); }
				switch (alt162)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:490:8: func_args
					{
					DebugLocation(490, 8);
					PushFollow(Follow._func_args_in_lambda_expr3701);
					func_args364=func_args();
					PopFollow();

					stream_func_args.Add(func_args364.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(162); }

				DebugLocation(490, 19);
				char_literal365=(IToken)Match(input,87,Follow._87_in_lambda_expr3704);  
				stream_87.Add(char_literal365);

				DebugLocation(490, 23);
				// SugarCpp.g:490:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt163=2;
				try { DebugEnterSubRule(163);
				try { DebugEnterDecision(163, false);
				int LA163_0 = input.LA(1);

				if ((LA163_0==97))
				{
					alt163 = 1;
				}
				else if ((LA163_0==114))
				{
					alt163 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 163, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:490:25: '->' expr
					{
					DebugLocation(490, 25);
					string_literal366=(IToken)Match(input,97,Follow._97_in_lambda_expr3708);  
					stream_97.Add(string_literal366);

					DebugLocation(490, 30);
					PushFollow(Follow._expr_in_lambda_expr3710);
					expr367=expr();
					PopFollow();

					stream_expr.Add(expr367.Tree);


					{
					// AST REWRITE
					// elements: func_args, 97, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 490:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(490, 39);
						// SugarCpp.g:490:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(490, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(490, 53);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(490, 58);
						// SugarCpp.g:490:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(490, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(490, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:491:25: '=>' expr
					{
					DebugLocation(491, 25);
					string_literal368=(IToken)Match(input,114,Follow._114_in_lambda_expr3750);  
					stream_114.Add(string_literal368);

					DebugLocation(491, 30);
					PushFollow(Follow._expr_in_lambda_expr3752);
					expr369=expr();
					PopFollow();

					stream_expr.Add(expr369.Tree);


					{
					// AST REWRITE
					// elements: 114, func_args, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 491:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(491, 39);
						// SugarCpp.g:491:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(491, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(491, 53);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(491, 58);
						// SugarCpp.g:491:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(491, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(491, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(163); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:492:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(492, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr3772);
				modify_expr370=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr370.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 54);
			LeaveRule("lambda_expr", 54);
			LeaveRule_lambda_expr();
		}
		DebugLocation(493, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:495:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 55);
		TraceIn("modify_expr_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set371 = default(IToken);

		CommonTree set371_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(495, 91);
		try
		{
			// SugarCpp.g:495:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(495, 15);

			set371=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==102||input.LA(1)==110||input.LA(1)==112||input.LA(1)==118||input.LA(1)==125||input.LA(1)==164)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set371));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 55);
			LeaveRule("modify_expr_op", 55);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(495, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:496:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 56);
		TraceIn("modify_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set373 = default(IToken);
		IToken char_literal375 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr374 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr376 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set373_tree = default(CommonTree);
		CommonTree char_literal375_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(496, 1);
		try
		{
			// SugarCpp.g:497:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:497:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(497, 4);
			PushFollow(Follow._cond_expr_in_modify_expr3829);
			cond_expr372=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr372.Tree);
			DebugLocation(497, 14);
			// SugarCpp.g:497:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt166=3;
			try { DebugEnterSubRule(166);
			try { DebugEnterDecision(166, false);
			int LA166_0 = input.LA(1);

			if ((LA166_0==82||LA166_0==85||LA166_0==89||LA166_0==92||LA166_0==96||LA166_0==102||LA166_0==105||LA166_0==110||LA166_0==118||LA166_0==125||LA166_0==164))
			{
				alt166 = 1;
			}
			else if ((LA166_0==112))
			{
				alt166 = 2;
			}
			} finally { DebugExitDecision(166); }
			switch (alt166)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:497:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(497, 94);

				set373=(IToken)input.LT(1);
				set373=(IToken)input.LT(1);
				if (input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==102||input.LA(1)==105||input.LA(1)==110||input.LA(1)==118||input.LA(1)==125||input.LA(1)==164)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set373), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(497, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3878);
				cond_expr374=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr374.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:498:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(498, 7);
				// SugarCpp.g:498:7: ( '=' ^ cond_expr )+
				int cnt165=0;
				try { DebugEnterSubRule(165);
				while (true)
				{
					int alt165=2;
					try { DebugEnterDecision(165, false);
					int LA165_0 = input.LA(1);

					if ((LA165_0==112))
					{
						alt165 = 1;
					}


					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:498:8: '=' ^ cond_expr
						{
						DebugLocation(498, 11);
						char_literal375=(IToken)Match(input,112,Follow._112_in_modify_expr3887); 
						char_literal375_tree = (CommonTree)adaptor.Create(char_literal375);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal375_tree, root_0);
						DebugLocation(498, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3890);
						cond_expr376=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr376.Tree);

						}
						break;

					default:
						if (cnt165 >= 1)
							goto loop165;

						EarlyExitException eee165 = new EarlyExitException( 165, input );
						DebugRecognitionException(eee165);
						throw eee165;
					}
					cnt165++;
				}
				loop165:
					;

				} finally { DebugExitSubRule(165); }


				}
				break;

			}
			} finally { DebugExitSubRule(166); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 56);
			LeaveRule("modify_expr", 56);
			LeaveRule_modify_expr();
		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:501:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 57);
		TraceIn("cond_expr_item", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr377 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(501, 24);
		try
		{
			// SugarCpp.g:501:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:501:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(501, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3903);
			or_expr377=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr377.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 57);
			LeaveRule("cond_expr_item", 57);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(501, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:502:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 58);
		TraceIn("cond_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal378 = default(IToken);
		IToken char_literal379 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal378_tree = default(CommonTree);
		CommonTree char_literal379_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(502, 1);
		try
		{
			// SugarCpp.g:503:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:503:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(503, 4);
			// SugarCpp.g:503:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:503:5: a= or_expr
			{
			DebugLocation(503, 6);
			PushFollow(Follow._or_expr_in_cond_expr3915);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 503:15: -> $a
			{
				DebugLocation(503, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(503, 22);
			// SugarCpp.g:503:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt169=2;
			try { DebugEnterSubRule(169);
			try { DebugEnterDecision(169, false);
			int LA169_0 = input.LA(1);

			if ((LA169_0==119))
			{
				alt169 = 1;
			}
			} finally { DebugExitDecision(169); }
			switch (alt169)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:503:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(503, 23);
				char_literal378=(IToken)Match(input,119,Follow._119_in_cond_expr3924);  
				stream_119.Add(char_literal378);

				DebugLocation(503, 27);
				// SugarCpp.g:503:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				int LA168_0 = input.LA(1);

				if ((LA168_0==IDENT||LA168_0==NUMBER||LA168_0==STRING||LA168_0==79||LA168_0==84||LA168_0==86||LA168_0==88||(LA168_0>=90 && LA168_0<=91)||(LA168_0>=94 && LA168_0<=95)||LA168_0==121||(LA168_0>=146 && LA168_0<=147)||LA168_0==166))
				{
					alt168 = 1;
				}
				else if ((LA168_0==DEDENT||LA168_0==INDENT||LA168_0==NEWLINE||LA168_0==82||LA168_0==85||LA168_0==87||LA168_0==89||(LA168_0>=92 && LA168_0<=93)||LA168_0==96||LA168_0==102||(LA168_0>=105 && LA168_0<=106)||LA168_0==110||LA168_0==112||LA168_0==114||LA168_0==118||LA168_0==123||LA168_0==125||LA168_0==129||LA168_0==134||(LA168_0>=138 && LA168_0<=139)||(LA168_0>=152 && LA168_0<=153)||LA168_0==156||LA168_0==158||(LA168_0>=161 && LA168_0<=162)||LA168_0==164))
				{
					alt168 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:503:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(503, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3930);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(503, 46);
					// SugarCpp.g:503:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt167=2;
					try { DebugEnterSubRule(167);
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==103))
					{
						alt167 = 1;
					}
					else if ((LA167_0==DEDENT||LA167_0==INDENT||LA167_0==NEWLINE||LA167_0==82||LA167_0==85||LA167_0==87||LA167_0==89||(LA167_0>=92 && LA167_0<=93)||LA167_0==96||LA167_0==102||(LA167_0>=105 && LA167_0<=106)||LA167_0==110||LA167_0==112||LA167_0==114||LA167_0==118||LA167_0==123||LA167_0==125||LA167_0==129||LA167_0==134||(LA167_0>=138 && LA167_0<=139)||(LA167_0>=152 && LA167_0<=153)||LA167_0==156||LA167_0==158||(LA167_0>=161 && LA167_0<=162)||LA167_0==164))
					{
						alt167 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 167, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:48: ':' b= cond_expr_item
						{
						DebugLocation(503, 48);
						char_literal379=(IToken)Match(input,103,Follow._103_in_cond_expr3934);  
						stream_103.Add(char_literal379);

						DebugLocation(503, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3938);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, b, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 503:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(503, 72);
							// SugarCpp.g:503:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(503, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(503, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(503, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(503, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:504:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 504:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(504, 20);
							// SugarCpp.g:504:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(504, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(504, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(504, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(167); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:506:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 506:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(506, 14);
						// SugarCpp.g:506:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(506, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(506, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(168); }


				}
				break;

			}
			} finally { DebugExitSubRule(169); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 58);
			LeaveRule("cond_expr", 58);
			LeaveRule_cond_expr();
		}
		DebugLocation(508, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:510:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 59);
		TraceIn("or_op", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set380 = default(IToken);

		CommonTree set380_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(510, 19);
		try
		{
			// SugarCpp.g:510:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(510, 6);

			set380=(IToken)input.LT(1);
			if (input.LA(1)==148||input.LA(1)==165)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set380));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 59);
			LeaveRule("or_op", 59);
			LeaveRule_or_op();
		}
		DebugLocation(510, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:511:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 60);
		TraceIn("or_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(512, 4);
			// SugarCpp.g:512:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:512:5: a= and_expr
			{
			DebugLocation(512, 6);
			PushFollow(Follow._and_expr_in_or_expr4052);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 512:16: -> $a
			{
				DebugLocation(512, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(512, 23);
			// SugarCpp.g:512:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(170);
			while (true)
			{
				int alt170=2;
				try { DebugEnterDecision(170, false);
				int LA170_0 = input.LA(1);

				if ((LA170_0==148||LA170_0==165))
				{
					alt170 = 1;
				}


				} finally { DebugExitDecision(170); }
				switch ( alt170 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:24: op= or_op b= and_expr
					{
					DebugLocation(512, 26);
					PushFollow(Follow._or_op_in_or_expr4063);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(512, 34);
					PushFollow(Follow._and_expr_in_or_expr4067);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 512:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(512, 47);
						// SugarCpp.g:512:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(512, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(512, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(512, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(512, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop170;
				}
			}

			loop170:
				;

			} finally { DebugExitSubRule(170); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 60);
			LeaveRule("or_expr", 60);
			LeaveRule_or_expr();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:515:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 61);
		TraceIn("and_op", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set381 = default(IToken);

		CommonTree set381_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(515, 21);
		try
		{
			// SugarCpp.g:515:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(515, 7);

			set381=(IToken)input.LT(1);
			if (input.LA(1)==83||input.LA(1)==127)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set381));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 61);
			LeaveRule("and_op", 61);
			LeaveRule_and_op();
		}
		DebugLocation(515, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:516:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 62);
		TraceIn("and_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(516, 1);
		try
		{
			// SugarCpp.g:517:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:517:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(517, 4);
			// SugarCpp.g:517:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:517:5: a= bit_or
			{
			DebugLocation(517, 6);
			PushFollow(Follow._bit_or_in_and_expr4109);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 517:14: -> $a
			{
				DebugLocation(517, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(517, 21);
			// SugarCpp.g:517:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(171);
			while (true)
			{
				int alt171=2;
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==83||LA171_0==127))
				{
					alt171 = 1;
				}


				} finally { DebugExitDecision(171); }
				switch ( alt171 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:517:22: op= and_op b= bit_or
					{
					DebugLocation(517, 24);
					PushFollow(Follow._and_op_in_and_expr4120);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(517, 33);
					PushFollow(Follow._bit_or_in_and_expr4124);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, and_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(517, 44);
						// SugarCpp.g:517:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(517, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(517, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(517, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop171;
				}
			}

			loop171:
				;

			} finally { DebugExitSubRule(171); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 62);
			LeaveRule("and_expr", 62);
			LeaveRule_and_expr();
		}
		DebugLocation(518, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:520:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 63);
		TraceIn("bit_or", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal382 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal382_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(520, 1);
		try
		{
			// SugarCpp.g:521:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:521:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(521, 4);
			// SugarCpp.g:521:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:521:5: a= bit_xor
			{
			DebugLocation(521, 6);
			PushFollow(Follow._bit_xor_in_bit_or4155);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 521:15: -> $a
			{
				DebugLocation(521, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(521, 22);
			// SugarCpp.g:521:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(172);
			while (true)
			{
				int alt172=2;
				try { DebugEnterDecision(172, false);
				int LA172_0 = input.LA(1);

				if ((LA172_0==163))
				{
					alt172 = 1;
				}


				} finally { DebugExitDecision(172); }
				switch ( alt172 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:521:23: '|' b= bit_xor
					{
					DebugLocation(521, 23);
					char_literal382=(IToken)Match(input,163,Follow._163_in_bit_or4164);  
					stream_163.Add(char_literal382);

					DebugLocation(521, 28);
					PushFollow(Follow._bit_xor_in_bit_or4168);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 163, bit_or, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 521:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(521, 40);
						// SugarCpp.g:521:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(521, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(521, 51);
						adaptor.AddChild(root_1, stream_163.NextNode());
						DebugLocation(521, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(521, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop172;
				}
			}

			loop172:
				;

			} finally { DebugExitSubRule(172); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 63);
			LeaveRule("bit_or", 63);
			LeaveRule_bit_or();
		}
		DebugLocation(522, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:524:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 64);
		TraceIn("bit_xor", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal383 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal383_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(524, 1);
		try
		{
			// SugarCpp.g:525:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:525:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(525, 4);
			// SugarCpp.g:525:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:525:5: a= bit_and
			{
			DebugLocation(525, 6);
			PushFollow(Follow._bit_and_in_bit_xor4198);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 525:15: -> $a
			{
				DebugLocation(525, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(525, 22);
			// SugarCpp.g:525:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(173);
			while (true)
			{
				int alt173=2;
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==124))
				{
					alt173 = 1;
				}


				} finally { DebugExitDecision(173); }
				switch ( alt173 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:525:23: '^' b= bit_and
					{
					DebugLocation(525, 23);
					char_literal383=(IToken)Match(input,124,Follow._124_in_bit_xor4207);  
					stream_124.Add(char_literal383);

					DebugLocation(525, 28);
					PushFollow(Follow._bit_and_in_bit_xor4211);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, 124, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 525:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(525, 40);
						// SugarCpp.g:525:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(525, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(525, 51);
						adaptor.AddChild(root_1, stream_124.NextNode());
						DebugLocation(525, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(525, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop173;
				}
			}

			loop173:
				;

			} finally { DebugExitSubRule(173); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 64);
			LeaveRule("bit_xor", 64);
			LeaveRule_bit_xor();
		}
		DebugLocation(526, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:528:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 65);
		TraceIn("bit_and", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal384 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal384_tree = default(CommonTree);
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(528, 1);
		try
		{
			// SugarCpp.g:529:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:529:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(529, 4);
			// SugarCpp.g:529:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:529:5: a= cmp_expr
			{
			DebugLocation(529, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4241);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 529:16: -> $a
			{
				DebugLocation(529, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(529, 23);
			// SugarCpp.g:529:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(174);
			while (true)
			{
				int alt174=2;
				try { DebugEnterDecision(174, false);
				int LA174_0 = input.LA(1);

				if ((LA174_0==84))
				{
					alt174 = 1;
				}


				} finally { DebugExitDecision(174); }
				switch ( alt174 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:529:24: '&' b= cmp_expr
					{
					DebugLocation(529, 24);
					char_literal384=(IToken)Match(input,84,Follow._84_in_bit_and4250);  
					stream_84.Add(char_literal384);

					DebugLocation(529, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4254);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 84
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 529:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(529, 42);
						// SugarCpp.g:529:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(529, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(529, 53);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(529, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(529, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop174;
				}
			}

			loop174:
				;

			} finally { DebugExitSubRule(174); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 65);
			LeaveRule("bit_and", 65);
			LeaveRule_bit_and();
		}
		DebugLocation(530, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:532:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 66);
		TraceIn("chain_op", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set385 = default(IToken);

		CommonTree set385_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(532, 64);
		try
		{
			// SugarCpp.g:532:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(532, 9);

			set385=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==107||input.LA(1)==111||input.LA(1)==113||(input.LA(1)>=115 && input.LA(1)<=116)||(input.LA(1)>=141 && input.LA(1)<=142))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set385));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 66);
			LeaveRule("chain_op", 66);
			LeaveRule_chain_op();
		}
		DebugLocation(532, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:533:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 67);
		TraceIn("no_less_op", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set386 = default(IToken);

		CommonTree set386_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(533, 60);
		try
		{
			// SugarCpp.g:533:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(533, 11);

			set386=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==111||input.LA(1)==113||(input.LA(1)>=115 && input.LA(1)<=116)||(input.LA(1)>=141 && input.LA(1)<=142))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set386));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 67);
			LeaveRule("no_less_op", 67);
			LeaveRule_no_less_op();
		}
		DebugLocation(533, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:534:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 68);
		TraceIn("chain_list", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op387 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr388 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(534, 35);
		try
		{
			// SugarCpp.g:534:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:534:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(534, 13);
			// SugarCpp.g:534:13: ( chain_op infix_expr )+
			int cnt175=0;
			try { DebugEnterSubRule(175);
			while (true)
			{
				int alt175=2;
				try { DebugEnterDecision(175, false);
				int LA175_0 = input.LA(1);

				if ((LA175_0==80||LA175_0==107||LA175_0==111||LA175_0==113||(LA175_0>=115 && LA175_0<=116)||(LA175_0>=141 && LA175_0<=142)))
				{
					alt175 = 1;
				}


				} finally { DebugExitDecision(175); }
				switch (alt175)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:14: chain_op infix_expr
					{
					DebugLocation(534, 14);
					PushFollow(Follow._chain_op_in_chain_list4346);
					chain_op387=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op387.Tree);
					DebugLocation(534, 23);
					PushFollow(Follow._infix_expr_in_chain_list4348);
					infix_expr388=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr388.Tree);

					}
					break;

				default:
					if (cnt175 >= 1)
						goto loop175;

					EarlyExitException eee175 = new EarlyExitException( 175, input );
					DebugRecognitionException(eee175);
					throw eee175;
				}
				cnt175++;
			}
			loop175:
				;

			} finally { DebugExitSubRule(175); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 68);
			LeaveRule("chain_list", 68);
			LeaveRule_chain_list();
		}
		DebugLocation(534, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:535:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 69);
		TraceIn("cmp_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal389 = default(IToken);
		IToken char_literal391 = default(IToken);
		IToken char_literal392 = default(IToken);
		IToken char_literal394 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident390 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list393 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list395 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list396 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal389_tree = default(CommonTree);
		CommonTree char_literal391_tree = default(CommonTree);
		CommonTree char_literal392_tree = default(CommonTree);
		CommonTree char_literal394_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(535, 1);
		try
		{
			// SugarCpp.g:536:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:536:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(536, 4);
			// SugarCpp.g:536:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:536:5: a= infix_expr
			{
			DebugLocation(536, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr4362);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 536:18: -> $a
			{
				DebugLocation(536, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(536, 25);
			// SugarCpp.g:536:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt180=3;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_0 = input.LA(1);

			if ((LA180_0==107))
			{
				alt180 = 1;
			}
			else if ((LA180_0==80||LA180_0==111||LA180_0==113||(LA180_0>=115 && LA180_0<=116)||(LA180_0>=141 && LA180_0<=142)))
			{
				alt180 = 2;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:536:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(536, 27);
				char_literal389=(IToken)Match(input,107,Follow._107_in_cmp_expr4372);  
				stream_107.Add(char_literal389);

				DebugLocation(536, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr4376);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(536, 44);
				// SugarCpp.g:536:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt178=3;
				try { DebugEnterSubRule(178);
				try { DebugEnterDecision(178, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt178 = 1;
					}
					break;
				case 115:
					{
					int LA178_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt178 = 1;
					}
					else if ((true))
					{
						alt178 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 178, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 80:
				case 107:
				case 111:
				case 113:
				case 116:
				case 141:
				case 142:
					{
					alt178 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 82:
				case 83:
				case 84:
				case 85:
				case 87:
				case 89:
				case 92:
				case 93:
				case 96:
				case 102:
				case 103:
				case 105:
				case 106:
				case 110:
				case 112:
				case 114:
				case 118:
				case 119:
				case 123:
				case 124:
				case 125:
				case 127:
				case 129:
				case 134:
				case 138:
				case 139:
				case 148:
				case 152:
				case 153:
				case 156:
				case 158:
				case 161:
				case 162:
				case 163:
				case 164:
				case 165:
					{
					alt178 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 178, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(178); }
				switch (alt178)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:536:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(536, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(536, 76);
					// SugarCpp.g:536:76: ( ident )*
					try { DebugEnterSubRule(176);
					while (true)
					{
						int alt176=2;
						try { DebugEnterDecision(176, false);
						int LA176_0 = input.LA(1);

						if ((LA176_0==IDENT))
						{
							alt176 = 1;
						}


						} finally { DebugExitDecision(176); }
						switch ( alt176 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:536:76: ident
							{
							DebugLocation(536, 76);
							PushFollow(Follow._ident_in_cmp_expr4382);
							ident390=ident();
							PopFollow();

							stream_ident.Add(ident390.Tree);

							}
							break;

						default:
							goto loop176;
						}
					}

					loop176:
						;

					} finally { DebugExitSubRule(176); }

					DebugLocation(536, 83);
					char_literal391=(IToken)Match(input,115,Follow._115_in_cmp_expr4385);  
					stream_115.Add(char_literal391);

					DebugLocation(536, 87);
					char_literal392=(IToken)Match(input,86,Follow._86_in_cmp_expr4387);  
					stream_86.Add(char_literal392);

					DebugLocation(536, 91);
					// SugarCpp.g:536:91: ( expr_list )?
					int alt177=2;
					try { DebugEnterSubRule(177);
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==IDENT||LA177_0==NUMBER||LA177_0==STRING||LA177_0==79||LA177_0==84||LA177_0==86||LA177_0==88||(LA177_0>=90 && LA177_0<=91)||(LA177_0>=94 && LA177_0<=95)||(LA177_0>=121 && LA177_0<=122)||LA177_0==144||(LA177_0>=146 && LA177_0<=147)||LA177_0==166))
					{
						alt177 = 1;
					}
					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:536:91: expr_list
						{
						DebugLocation(536, 91);
						PushFollow(Follow._expr_list_in_cmp_expr4389);
						expr_list393=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list393.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(177); }

					DebugLocation(536, 102);
					char_literal394=(IToken)Match(input,87,Follow._87_in_cmp_expr4392);  
					stream_87.Add(char_literal394);



					{
					// AST REWRITE
					// elements: expr_list, ident, b, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 536:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(536, 109);
						// SugarCpp.g:536:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(536, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(536, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(536, 131);
						// SugarCpp.g:536:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(536, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(536, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(536, 155);
						// SugarCpp.g:536:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(536, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(536, 163);
						// SugarCpp.g:536:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(536, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:537:46: chain_list
					{
					DebugLocation(537, 46);
					PushFollow(Follow._chain_list_in_cmp_expr4461);
					chain_list395=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list395.Tree);


					{
					// AST REWRITE
					// elements: b, chain_list, cmp_expr, 107
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 537:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(537, 60);
						// SugarCpp.g:537:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(537, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(537, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(537, 84);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(537, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(537, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:538:16: 
					{

					{
					// AST REWRITE
					// elements: b, cmp_expr, 107
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 538:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(538, 19);
						// SugarCpp.g:538:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(538, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(538, 30);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(538, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(538, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(178); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:539:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(539, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr4538);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(539, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr4542);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(539, 54);
				// SugarCpp.g:539:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt179=2;
				try { DebugEnterSubRule(179);
				try { DebugEnterDecision(179, false);
				int LA179_0 = input.LA(1);

				if ((LA179_0==80||LA179_0==107||LA179_0==111||LA179_0==113||(LA179_0>=115 && LA179_0<=116)||(LA179_0>=141 && LA179_0<=142)))
				{
					alt179 = 1;
				}
				else if ((LA179_0==DEDENT||LA179_0==INDENT||LA179_0==NEWLINE||(LA179_0>=82 && LA179_0<=85)||LA179_0==87||LA179_0==89||(LA179_0>=92 && LA179_0<=93)||LA179_0==96||(LA179_0>=102 && LA179_0<=103)||(LA179_0>=105 && LA179_0<=106)||LA179_0==110||LA179_0==112||LA179_0==114||(LA179_0>=118 && LA179_0<=119)||(LA179_0>=123 && LA179_0<=125)||LA179_0==127||LA179_0==129||LA179_0==134||(LA179_0>=138 && LA179_0<=139)||LA179_0==148||(LA179_0>=152 && LA179_0<=153)||LA179_0==156||LA179_0==158||(LA179_0>=161 && LA179_0<=165)))
				{
					alt179 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:539:56: chain_list
					{
					DebugLocation(539, 56);
					PushFollow(Follow._chain_list_in_cmp_expr4546);
					chain_list396=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list396.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, chain_list, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 539:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(539, 70);
						// SugarCpp.g:539:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(539, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(539, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(539, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(539, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(539, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:540:17: 
					{

					{
					// AST REWRITE
					// elements: b, op, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 540:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(540, 20);
						// SugarCpp.g:540:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(540, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(540, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(540, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(540, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(179); }


				}
				break;

			}
			} finally { DebugExitSubRule(180); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 69);
			LeaveRule("cmp_expr", 69);
			LeaveRule_cmp_expr();
		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:545:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 70);
		TraceIn("infix_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func397 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(545, 1);
		try
		{
			// SugarCpp.g:546:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:546:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(546, 4);
			// SugarCpp.g:546:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:546:5: a= shift_expr
			{
			DebugLocation(546, 6);
			PushFollow(Follow._shift_expr_in_infix_expr4637);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 546:18: -> $a
			{
				DebugLocation(546, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(546, 25);
			// SugarCpp.g:546:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=2;
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==126))
				{
					alt181 = 1;
				}


				} finally { DebugExitDecision(181); }
				switch ( alt181 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:546:27: infix_func b= shift_expr
					{
					DebugLocation(546, 27);
					PushFollow(Follow._infix_func_in_infix_expr4647);
					infix_func397=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func397.Tree);
					DebugLocation(546, 39);
					PushFollow(Follow._shift_expr_in_infix_expr4651);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, infix_func, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 546:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(546, 55);
						// SugarCpp.g:546:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(546, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(546, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(546, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(546, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop181;
				}
			}

			loop181:
				;

			} finally { DebugExitSubRule(181); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 70);
			LeaveRule("infix_expr", 70);
			LeaveRule_infix_expr();
		}
		DebugLocation(547, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:549:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 71);
		TraceIn("shift_expr_op", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set398 = default(IToken);

		CommonTree set398_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(549, 27);
		try
		{
			// SugarCpp.g:549:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(549, 14);

			set398=(IToken)input.LT(1);
			if (input.LA(1)==109||input.LA(1)==117)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set398));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 71);
			LeaveRule("shift_expr_op", 71);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(549, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:550:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 72);
		TraceIn("shift_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op399 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(550, 1);
		try
		{
			// SugarCpp.g:551:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:551:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(551, 4);
			// SugarCpp.g:551:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:551:5: a= add_expr
			{
			DebugLocation(551, 6);
			PushFollow(Follow._add_expr_in_shift_expr4694);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 551:16: -> $a
			{
				DebugLocation(551, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(551, 23);
			// SugarCpp.g:551:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==109||LA182_0==117))
				{
					alt182 = 1;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:551:24: shift_expr_op b= add_expr
					{
					DebugLocation(551, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr4703);
					shift_expr_op399=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op399.Tree);
					DebugLocation(551, 39);
					PushFollow(Follow._add_expr_in_shift_expr4707);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 551:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(551, 52);
						// SugarCpp.g:551:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(551, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(551, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(551, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(551, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 72);
			LeaveRule("shift_expr", 72);
			LeaveRule_shift_expr();
		}
		DebugLocation(552, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:554:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 73);
		TraceIn("add_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal400 = default(IToken);
		IToken char_literal401 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal400_tree = default(CommonTree);
		CommonTree char_literal401_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(554, 1);
		try
		{
			// SugarCpp.g:555:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:555:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(555, 4);
			// SugarCpp.g:555:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:555:5: a= mul_expr
			{
			DebugLocation(555, 6);
			PushFollow(Follow._mul_expr_in_add_expr4737);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 555:16: -> $a
			{
				DebugLocation(555, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(555, 23);
			// SugarCpp.g:555:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(183);
			while (true)
			{
				int alt183=3;
				try { DebugEnterDecision(183, false);
				int LA183_0 = input.LA(1);

				if ((LA183_0==90))
				{
					alt183 = 1;
				}
				else if ((LA183_0==94))
				{
					alt183 = 2;
				}


				} finally { DebugExitDecision(183); }
				switch ( alt183 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:555:25: '+' b= mul_expr
					{
					DebugLocation(555, 25);
					char_literal400=(IToken)Match(input,90,Follow._90_in_add_expr4747);  
					stream_90.Add(char_literal400);

					DebugLocation(555, 30);
					PushFollow(Follow._mul_expr_in_add_expr4751);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 90, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 555:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(555, 43);
						// SugarCpp.g:555:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(555, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(555, 54);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(555, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(555, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:556:10: '-' b= mul_expr
					{
					DebugLocation(556, 10);
					char_literal401=(IToken)Match(input,94,Follow._94_in_add_expr4776);  
					stream_94.Add(char_literal401);

					DebugLocation(556, 15);
					PushFollow(Follow._mul_expr_in_add_expr4780);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 94
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 556:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(556, 28);
						// SugarCpp.g:556:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(556, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(556, 39);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(556, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(556, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop183;
				}
			}

			loop183:
				;

			} finally { DebugExitSubRule(183); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 73);
			LeaveRule("add_expr", 73);
			LeaveRule_add_expr();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:560:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 74);
		TraceIn("mul_expr", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal402 = default(IToken);
		IToken char_literal403 = default(IToken);
		IToken char_literal404 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal402_tree = default(CommonTree);
		CommonTree char_literal403_tree = default(CommonTree);
		CommonTree char_literal404_tree = default(CommonTree);
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(560, 1);
		try
		{
			// SugarCpp.g:561:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:561:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(561, 4);
			// SugarCpp.g:561:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:561:5: a= selector_expr
			{
			DebugLocation(561, 6);
			PushFollow(Follow._selector_expr_in_mul_expr4818);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 561:21: -> $a
			{
				DebugLocation(561, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(561, 28);
			// SugarCpp.g:561:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=4;
				try { DebugEnterDecision(184, false);
				switch (input.LA(1))
				{
				case 88:
					{
					alt184 = 1;
					}
					break;
				case 101:
					{
					alt184 = 2;
					}
					break;
				case 81:
					{
					alt184 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(184); }
				switch ( alt184 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:30: '*' b= selector_expr
					{
					DebugLocation(561, 30);
					char_literal402=(IToken)Match(input,88,Follow._88_in_mul_expr4828);  
					stream_88.Add(char_literal402);

					DebugLocation(561, 35);
					PushFollow(Follow._selector_expr_in_mul_expr4832);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 88
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 561:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(561, 53);
						// SugarCpp.g:561:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(561, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(561, 64);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(561, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(561, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:562:15: '/' b= selector_expr
					{
					DebugLocation(562, 15);
					char_literal403=(IToken)Match(input,101,Follow._101_in_mul_expr4862);  
					stream_101.Add(char_literal403);

					DebugLocation(562, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4866);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 101, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 562:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(562, 38);
						// SugarCpp.g:562:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(562, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(562, 49);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(562, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(562, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:563:15: '%' b= selector_expr
					{
					DebugLocation(563, 15);
					char_literal404=(IToken)Match(input,81,Follow._81_in_mul_expr4896);  
					stream_81.Add(char_literal404);

					DebugLocation(563, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4900);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 81, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 563:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(563, 38);
						// SugarCpp.g:563:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(563, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(563, 49);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(563, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(563, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop184;
				}
			}

			loop184:
				;

			} finally { DebugExitSubRule(184); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 74);
			LeaveRule("mul_expr", 74);
			LeaveRule_mul_expr();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:567:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 75);
		TraceIn("selector_expr", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal405 = default(IToken);
		IToken string_literal406 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal405_tree = default(CommonTree);
		CommonTree string_literal406_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(568, 4);
			// SugarCpp.g:568:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:568:5: a= cast_expr
			{
			DebugLocation(568, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4943);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 568:17: -> $a
			{
				DebugLocation(568, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(568, 24);
			// SugarCpp.g:568:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=3;
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==98))
				{
					alt185 = 1;
				}
				else if ((LA185_0==100))
				{
					alt185 = 2;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:568:26: '->*' b= ident
					{
					DebugLocation(568, 26);
					string_literal405=(IToken)Match(input,98,Follow._98_in_selector_expr4953);  
					stream_98.Add(string_literal405);

					DebugLocation(568, 33);
					PushFollow(Follow._ident_in_selector_expr4957);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 98
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 568:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(568, 43);
						// SugarCpp.g:568:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(568, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(568, 57);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(568, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(568, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:569:11: '.*' b= ident
					{
					DebugLocation(569, 11);
					string_literal406=(IToken)Match(input,100,Follow._100_in_selector_expr4983);  
					stream_100.Add(string_literal406);

					DebugLocation(569, 18);
					PushFollow(Follow._ident_in_selector_expr4988);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 100, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 569:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(569, 28);
						// SugarCpp.g:569:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(569, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(569, 42);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(569, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(569, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 75);
			LeaveRule("selector_expr", 75);
			LeaveRule_selector_expr();
		}
		DebugLocation(571, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:573:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 76);
		TraceIn("cast_expr", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal407 = default(IToken);
		IToken char_literal408 = default(IToken);
		IToken char_literal410 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name409 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal407_tree = default(CommonTree);
		CommonTree char_literal408_tree = default(CommonTree);
		CommonTree char_literal410_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(573, 1);
		try
		{
			// SugarCpp.g:574:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:574:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(574, 4);
			// SugarCpp.g:574:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:574:5: a= prefix_expr
			{
			DebugLocation(574, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5028);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 574:19: -> $a
			{
				DebugLocation(574, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(574, 26);
			// SugarCpp.g:574:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt186=2;
			try { DebugEnterSubRule(186);
			try { DebugEnterDecision(186, false);
			int LA186_0 = input.LA(1);

			if ((LA186_0==128))
			{
				alt186 = 1;
			}
			} finally { DebugExitDecision(186); }
			switch (alt186)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:574:27: 'as' '(' type_name ')'
				{
				DebugLocation(574, 27);
				string_literal407=(IToken)Match(input,128,Follow._128_in_cast_expr5037);  
				stream_128.Add(string_literal407);

				DebugLocation(574, 32);
				char_literal408=(IToken)Match(input,86,Follow._86_in_cast_expr5039);  
				stream_86.Add(char_literal408);

				DebugLocation(574, 36);
				PushFollow(Follow._type_name_in_cast_expr5041);
				type_name409=type_name();
				PopFollow();

				stream_type_name.Add(type_name409.Tree);
				DebugLocation(574, 46);
				char_literal410=(IToken)Match(input,87,Follow._87_in_cast_expr5043);  
				stream_87.Add(char_literal410);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 574:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(574, 53);
					// SugarCpp.g:574:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(574, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(574, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(574, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(186); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 76);
			LeaveRule("cast_expr", 76);
			LeaveRule_cast_expr();
		}
		DebugLocation(575, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:577:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 77);
		TraceIn("prefix_expr_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set411 = default(IToken);

		CommonTree set411_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(577, 71);
		try
		{
			// SugarCpp.g:577:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(577, 15);

			set411=(IToken)input.LT(1);
			if (input.LA(1)==79||input.LA(1)==84||input.LA(1)==88||(input.LA(1)>=90 && input.LA(1)<=91)||(input.LA(1)>=94 && input.LA(1)<=95)||input.LA(1)==147||input.LA(1)==166)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set411));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 77);
			LeaveRule("prefix_expr_op", 77);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(577, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:578:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 78);
		TraceIn("prefix_expr", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal414 = default(IToken);
		IToken char_literal416 = default(IToken);
		IToken char_literal418 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op412 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name415 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr419 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal414_tree = default(CommonTree);
		CommonTree char_literal416_tree = default(CommonTree);
		CommonTree char_literal418_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(578, 1);
		try
		{
			// SugarCpp.g:579:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr )
			int alt188=3;
			try { DebugEnterDecision(188, false);
			switch (input.LA(1))
			{
			case 79:
			case 84:
			case 88:
			case 90:
			case 91:
			case 94:
			case 95:
			case 147:
			case 166:
				{
				alt188 = 1;
				}
				break;
			case 146:
				{
				alt188 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 86:
			case 121:
				{
				alt188 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 188, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:579:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(579, 4);
				// SugarCpp.g:579:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:579:5: prefix_expr_op prefix_expr
				{
				DebugLocation(579, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5105);
				prefix_expr_op412=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op412.Tree);
				DebugLocation(579, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5107);
				prefix_expr413=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr413.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 579:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(579, 36);
					// SugarCpp.g:579:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(579, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(579, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(579, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:580:4: 'new' type_name '(' ( expr_list )? ')'
				{
				DebugLocation(580, 4);
				string_literal414=(IToken)Match(input,146,Follow._146_in_prefix_expr5123);  
				stream_146.Add(string_literal414);

				DebugLocation(580, 10);
				PushFollow(Follow._type_name_in_prefix_expr5125);
				type_name415=type_name();
				PopFollow();

				stream_type_name.Add(type_name415.Tree);
				DebugLocation(580, 20);
				char_literal416=(IToken)Match(input,86,Follow._86_in_prefix_expr5127);  
				stream_86.Add(char_literal416);

				DebugLocation(580, 24);
				// SugarCpp.g:580:24: ( expr_list )?
				int alt187=2;
				try { DebugEnterSubRule(187);
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==IDENT||LA187_0==NUMBER||LA187_0==STRING||LA187_0==79||LA187_0==84||LA187_0==86||LA187_0==88||(LA187_0>=90 && LA187_0<=91)||(LA187_0>=94 && LA187_0<=95)||(LA187_0>=121 && LA187_0<=122)||LA187_0==144||(LA187_0>=146 && LA187_0<=147)||LA187_0==166))
				{
					alt187 = 1;
				}
				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:580:24: expr_list
					{
					DebugLocation(580, 24);
					PushFollow(Follow._expr_list_in_prefix_expr5129);
					expr_list417=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list417.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(187); }

				DebugLocation(580, 35);
				char_literal418=(IToken)Match(input,87,Follow._87_in_prefix_expr5132);  
				stream_87.Add(char_literal418);



				{
				// AST REWRITE
				// elements: expr_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 580:39: -> ^( Expr_New_Type type_name ( expr_list )? )
				{
					DebugLocation(580, 42);
					// SugarCpp.g:580:42: ^( Expr_New_Type type_name ( expr_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(580, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

					DebugLocation(580, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(580, 68);
					// SugarCpp.g:580:68: ( expr_list )?
					if (stream_expr_list.HasNext)
					{
						DebugLocation(580, 68);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

					}
					stream_expr_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:581:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(581, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5148);
				suffix_expr419=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr419.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 78);
			LeaveRule("prefix_expr", 78);
			LeaveRule_prefix_expr();
		}
		DebugLocation(582, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:584:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 79);
		TraceIn("expr_list", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal421 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr422 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal421_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(584, 1);
		try
		{
			// SugarCpp.g:585:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:585:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(585, 4);
			PushFollow(Follow._expr_in_expr_list5160);
			expr420=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr420.Tree);
			DebugLocation(585, 9);
			// SugarCpp.g:585:9: ( ',' ! expr )*
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==93))
				{
					alt189 = 1;
				}


				} finally { DebugExitDecision(189); }
				switch ( alt189 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:585:10: ',' ! expr
					{
					DebugLocation(585, 13);
					char_literal421=(IToken)Match(input,93,Follow._93_in_expr_list5163); 
					DebugLocation(585, 15);
					PushFollow(Follow._expr_in_expr_list5166);
					expr422=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr422.Tree);

					}
					break;

				default:
					goto loop189;
				}
			}

			loop189:
				;

			} finally { DebugExitSubRule(189); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 79);
			LeaveRule("expr_list", 79);
			LeaveRule_expr_list();
		}
		DebugLocation(586, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:588:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 80);
		TraceIn("suffix_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal423 = default(IToken);
		IToken string_literal424 = default(IToken);
		IToken char_literal425 = default(IToken);
		IToken string_literal427 = default(IToken);
		IToken char_literal429 = default(IToken);
		IToken char_literal431 = default(IToken);
		IToken char_literal432 = default(IToken);
		IToken char_literal433 = default(IToken);
		IToken char_literal435 = default(IToken);
		IToken char_literal436 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident428 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list434 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal423_tree = default(CommonTree);
		CommonTree string_literal424_tree = default(CommonTree);
		CommonTree char_literal425_tree = default(CommonTree);
		CommonTree string_literal427_tree = default(CommonTree);
		CommonTree char_literal429_tree = default(CommonTree);
		CommonTree char_literal431_tree = default(CommonTree);
		CommonTree char_literal432_tree = default(CommonTree);
		CommonTree char_literal433_tree = default(CommonTree);
		CommonTree char_literal435_tree = default(CommonTree);
		CommonTree char_literal436_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(588, 1);
		try
		{
			// SugarCpp.g:589:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:589:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			{
			DebugLocation(589, 4);
			// SugarCpp.g:589:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:589:5: a= atom_expr
			{
			DebugLocation(589, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr5182);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 589:17: -> $a
			{
				DebugLocation(589, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(589, 24);
			// SugarCpp.g:589:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			try { DebugEnterSubRule(192);
			while (true)
			{
				int alt192=7;
				try { DebugEnterDecision(192, false);
				switch (input.LA(1))
				{
				case 91:
					{
					alt192 = 1;
					}
					break;
				case 95:
					{
					alt192 = 2;
					}
					break;
				case 99:
					{
					alt192 = 3;
					}
					break;
				case 97:
					{
					alt192 = 4;
					}
					break;
				case 86:
					{
					alt192 = 5;
					}
					break;
				case 122:
					{
					alt192 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(192); }
				switch ( alt192 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:589:26: '++'
					{
					DebugLocation(589, 26);
					string_literal423=(IToken)Match(input,91,Follow._91_in_suffix_expr5192);  
					stream_91.Add(string_literal423);



					{
					// AST REWRITE
					// elements: 91, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 589:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(589, 34);
						// SugarCpp.g:589:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(589, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(589, 48);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(589, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:590:14: '--'
					{
					DebugLocation(590, 14);
					string_literal424=(IToken)Match(input,95,Follow._95_in_suffix_expr5218);  
					stream_95.Add(string_literal424);



					{
					// AST REWRITE
					// elements: suffix_expr, 95
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 590:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(590, 22);
						// SugarCpp.g:590:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(590, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(590, 36);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(590, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:591:11: '.' ident
					{
					DebugLocation(591, 11);
					char_literal425=(IToken)Match(input,99,Follow._99_in_suffix_expr5241);  
					stream_99.Add(char_literal425);

					DebugLocation(591, 15);
					PushFollow(Follow._ident_in_suffix_expr5243);
					ident426=ident();
					PopFollow();

					stream_ident.Add(ident426.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 99
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 591:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(591, 24);
						// SugarCpp.g:591:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(591, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(591, 38);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(591, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(591, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:592:11: '->' ident
					{
					DebugLocation(592, 11);
					string_literal427=(IToken)Match(input,97,Follow._97_in_suffix_expr5268);  
					stream_97.Add(string_literal427);

					DebugLocation(592, 16);
					PushFollow(Follow._ident_in_suffix_expr5270);
					ident428=ident();
					PopFollow();

					stream_ident.Add(ident428.Tree);


					{
					// AST REWRITE
					// elements: ident, 97, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 592:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(592, 25);
						// SugarCpp.g:592:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(592, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(592, 39);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(592, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(592, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:593:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(593, 11);
					char_literal429=(IToken)Match(input,86,Follow._86_in_suffix_expr5295);  
					stream_86.Add(char_literal429);

					DebugLocation(593, 15);
					// SugarCpp.g:593:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt190=2;
					try { DebugEnterSubRule(190);
					try { DebugEnterDecision(190, false);
					int LA190_0 = input.LA(1);

					if ((LA190_0==IDENT||LA190_0==NUMBER||LA190_0==STRING||LA190_0==79||LA190_0==84||LA190_0==86||LA190_0==88||(LA190_0>=90 && LA190_0<=91)||(LA190_0>=94 && LA190_0<=95)||(LA190_0>=121 && LA190_0<=122)||LA190_0==144||(LA190_0>=146 && LA190_0<=147)||LA190_0==166))
					{
						alt190 = 1;
					}
					else if ((LA190_0==87))
					{
						alt190 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 190, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(190); }
					switch (alt190)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:593:17: expr_list ')'
						{
						DebugLocation(593, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5299);
						expr_list430=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list430.Tree);
						DebugLocation(593, 27);
						char_literal431=(IToken)Match(input,87,Follow._87_in_suffix_expr5301);  
						stream_87.Add(char_literal431);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 593:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(593, 34);
							// SugarCpp.g:593:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(593, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(593, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(593, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:594:17: ')'
						{
						DebugLocation(594, 17);
						char_literal432=(IToken)Match(input,87,Follow._87_in_suffix_expr5330);  
						stream_87.Add(char_literal432);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 594:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(594, 24);
							// SugarCpp.g:594:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(594, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(594, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(190); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:596:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(596, 11);
					char_literal433=(IToken)Match(input,122,Follow._122_in_suffix_expr5361);  
					stream_122.Add(char_literal433);

					DebugLocation(596, 15);
					// SugarCpp.g:596:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt191=2;
					try { DebugEnterSubRule(191);
					try { DebugEnterDecision(191, false);
					int LA191_0 = input.LA(1);

					if ((LA191_0==IDENT||LA191_0==NUMBER||LA191_0==STRING||LA191_0==79||LA191_0==84||LA191_0==86||LA191_0==88||(LA191_0>=90 && LA191_0<=91)||(LA191_0>=94 && LA191_0<=95)||(LA191_0>=121 && LA191_0<=122)||LA191_0==144||(LA191_0>=146 && LA191_0<=147)||LA191_0==166))
					{
						alt191 = 1;
					}
					else if ((LA191_0==123))
					{
						alt191 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(191); }
					switch (alt191)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:596:17: expr_list ']'
						{
						DebugLocation(596, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5365);
						expr_list434=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list434.Tree);
						DebugLocation(596, 27);
						char_literal435=(IToken)Match(input,123,Follow._123_in_suffix_expr5367);  
						stream_123.Add(char_literal435);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 596:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(596, 34);
							// SugarCpp.g:596:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(596, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(596, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(596, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:597:17: ']'
						{
						DebugLocation(597, 17);
						char_literal436=(IToken)Match(input,123,Follow._123_in_suffix_expr5396);  
						stream_123.Add(char_literal436);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 597:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(597, 24);
							// SugarCpp.g:597:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(597, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(597, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(191); }


					}
					break;

				default:
					goto loop192;
				}
			}

			loop192:
				;

			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 80);
			LeaveRule("suffix_expr", 80);
			LeaveRule_suffix_expr();
		}
		DebugLocation(601, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:603:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 81);
		TraceIn("atom_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER437 = default(IToken);
		IToken STRING439 = default(IToken);
		IToken char_literal440 = default(IToken);
		IToken char_literal442 = default(IToken);
		IToken char_literal443 = default(IToken);
		IToken char_literal445 = default(IToken);
		IToken char_literal446 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident438 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr444 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER437_tree = default(CommonTree);
		CommonTree STRING439_tree = default(CommonTree);
		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree char_literal442_tree = default(CommonTree);
		CommonTree char_literal443_tree = default(CommonTree);
		CommonTree char_literal445_tree = default(CommonTree);
		CommonTree char_literal446_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(603, 1);
		try
		{
			// SugarCpp.g:604:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt195=5;
			try { DebugEnterDecision(195, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt195 = 1;
				}
				break;
			case IDENT:
				{
				alt195 = 2;
				}
				break;
			case STRING:
				{
				alt195 = 3;
				}
				break;
			case 121:
				{
				alt195 = 4;
				}
				break;
			case 86:
				{
				alt195 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 195, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(195); }
			switch (alt195)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:604:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(604, 4);
				NUMBER437=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr5449); 
				NUMBER437_tree = (CommonTree)adaptor.Create(NUMBER437);
				adaptor.AddChild(root_0, NUMBER437_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:605:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(605, 4);
				PushFollow(Follow._ident_in_atom_expr5454);
				ident438=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident438.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:606:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(606, 4);
				STRING439=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr5459); 
				STRING439_tree = (CommonTree)adaptor.Create(STRING439);
				adaptor.AddChild(root_0, STRING439_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:607:4: '@' ident
				{
				DebugLocation(607, 4);
				char_literal440=(IToken)Match(input,121,Follow._121_in_atom_expr5464);  
				stream_121.Add(char_literal440);

				DebugLocation(607, 8);
				PushFollow(Follow._ident_in_atom_expr5466);
				ident441=ident();
				PopFollow();

				stream_ident.Add(ident441.Tree);


				{
				// AST REWRITE
				// elements: ident, 121
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 607:14: -> ^( '@' ident )
				{
					DebugLocation(607, 17);
					// SugarCpp.g:607:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(607, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_121.NextNode(), root_1);

					DebugLocation(607, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:608:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(608, 4);
				char_literal442=(IToken)Match(input,86,Follow._86_in_atom_expr5479);  
				stream_86.Add(char_literal442);

				DebugLocation(608, 9);
				PushFollow(Follow._expr_in_atom_expr5483);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(608, 15);
				// SugarCpp.g:608:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt194=2;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==93))
				{
					alt194 = 1;
				}
				else if ((LA194_0==87))
				{
					alt194 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:608:17: ( ',' expr )+ ')'
					{
					DebugLocation(608, 17);
					// SugarCpp.g:608:17: ( ',' expr )+
					int cnt193=0;
					try { DebugEnterSubRule(193);
					while (true)
					{
						int alt193=2;
						try { DebugEnterDecision(193, false);
						int LA193_0 = input.LA(1);

						if ((LA193_0==93))
						{
							alt193 = 1;
						}


						} finally { DebugExitDecision(193); }
						switch (alt193)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:608:18: ',' expr
							{
							DebugLocation(608, 18);
							char_literal443=(IToken)Match(input,93,Follow._93_in_atom_expr5488);  
							stream_93.Add(char_literal443);

							DebugLocation(608, 22);
							PushFollow(Follow._expr_in_atom_expr5490);
							expr444=expr();
							PopFollow();

							stream_expr.Add(expr444.Tree);

							}
							break;

						default:
							if (cnt193 >= 1)
								goto loop193;

							EarlyExitException eee193 = new EarlyExitException( 193, input );
							DebugRecognitionException(eee193);
							throw eee193;
						}
						cnt193++;
					}
					loop193:
						;

					} finally { DebugExitSubRule(193); }

					DebugLocation(608, 29);
					char_literal445=(IToken)Match(input,87,Follow._87_in_atom_expr5494);  
					stream_87.Add(char_literal445);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(608, 36);
						// SugarCpp.g:608:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(608, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(608, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:609:17: ')' {...}?
					{
					DebugLocation(609, 17);
					char_literal446=(IToken)Match(input,87,Follow._87_in_atom_expr5521);  
					stream_87.Add(char_literal446);

					DebugLocation(609, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 609:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(609, 40);
						// SugarCpp.g:609:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(609, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(609, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(194); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 81);
			LeaveRule("atom_expr", 81);
			LeaveRule_atom_expr();
		}
		DebugLocation(611, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:613:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 82);
		TraceIn("lvalue_item", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix447 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(613, 1);
		try
		{
			// SugarCpp.g:614:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:614:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(614, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item5552);
			lvalue_prefix447=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix447.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 82);
			LeaveRule("lvalue_item", 82);
			LeaveRule_lvalue_item();
		}
		DebugLocation(615, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:617:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 83);
		TraceIn("lvalue_prefix", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix449 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix450 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(617, 1);
		try
		{
			// SugarCpp.g:618:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt196=2;
			try { DebugEnterDecision(196, false);
			int LA196_0 = input.LA(1);

			if ((LA196_0==79||LA196_0==84||LA196_0==88||(LA196_0>=90 && LA196_0<=91)||(LA196_0>=94 && LA196_0<=95)||LA196_0==147||LA196_0==166))
			{
				alt196 = 1;
			}
			else if ((LA196_0==IDENT||LA196_0==121))
			{
				alt196 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(196); }
			switch (alt196)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:618:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(618, 4);
				// SugarCpp.g:618:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:618:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(618, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix5564);
				prefix_expr_op448=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op448.Tree);
				DebugLocation(618, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix5566);
				lvalue_prefix449=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix449.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 618:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(618, 38);
					// SugarCpp.g:618:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(618, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(618, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(618, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:619:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(619, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix5582);
				lvalue_suffix450=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix450.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 83);
			LeaveRule("lvalue_prefix", 83);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(620, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:622:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 84);
		TraceIn("lvalue_suffix", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal451 = default(IToken);
		IToken string_literal452 = default(IToken);
		IToken char_literal453 = default(IToken);
		IToken string_literal455 = default(IToken);
		IToken char_literal458 = default(IToken);
		IToken char_literal460 = default(IToken);
		IToken char_literal461 = default(IToken);
		IToken char_literal463 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident454 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident456 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list459 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list462 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal451_tree = default(CommonTree);
		CommonTree string_literal452_tree = default(CommonTree);
		CommonTree char_literal453_tree = default(CommonTree);
		CommonTree string_literal455_tree = default(CommonTree);
		CommonTree char_literal458_tree = default(CommonTree);
		CommonTree char_literal460_tree = default(CommonTree);
		CommonTree char_literal461_tree = default(CommonTree);
		CommonTree char_literal463_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(622, 1);
		try
		{
			// SugarCpp.g:623:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:623:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(623, 4);
			// SugarCpp.g:623:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:623:5: a= lvalue_atom
			{
			DebugLocation(623, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix5596);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 623:19: -> $a
			{
				DebugLocation(623, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(623, 26);
			// SugarCpp.g:623:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=7;
				try { DebugEnterDecision(200, false);
				switch (input.LA(1))
				{
				case 91:
					{
					alt200 = 1;
					}
					break;
				case 95:
					{
					alt200 = 2;
					}
					break;
				case 99:
					{
					alt200 = 3;
					}
					break;
				case 97:
					{
					alt200 = 4;
					}
					break;
				case 86:
				case 107:
					{
					alt200 = 5;
					}
					break;
				case 122:
					{
					alt200 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:623:28: '++'
					{
					DebugLocation(623, 28);
					string_literal451=(IToken)Match(input,91,Follow._91_in_lvalue_suffix5606);  
					stream_91.Add(string_literal451);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 91
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 623:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(623, 36);
						// SugarCpp.g:623:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(623, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(623, 50);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(623, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:624:16: '--'
					{
					DebugLocation(624, 16);
					string_literal452=(IToken)Match(input,95,Follow._95_in_lvalue_suffix5634);  
					stream_95.Add(string_literal452);



					{
					// AST REWRITE
					// elements: 95, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 624:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(624, 24);
						// SugarCpp.g:624:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(624, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(624, 38);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(624, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:625:13: '.' ident
					{
					DebugLocation(625, 13);
					char_literal453=(IToken)Match(input,99,Follow._99_in_lvalue_suffix5659);  
					stream_99.Add(char_literal453);

					DebugLocation(625, 17);
					PushFollow(Follow._ident_in_lvalue_suffix5661);
					ident454=ident();
					PopFollow();

					stream_ident.Add(ident454.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 99, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 625:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(625, 26);
						// SugarCpp.g:625:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(625, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(625, 40);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(625, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(625, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:626:13: '->' ident
					{
					DebugLocation(626, 13);
					string_literal455=(IToken)Match(input,97,Follow._97_in_lvalue_suffix5688);  
					stream_97.Add(string_literal455);

					DebugLocation(626, 18);
					PushFollow(Follow._ident_in_lvalue_suffix5690);
					ident456=ident();
					PopFollow();

					stream_ident.Add(ident456.Tree);


					{
					// AST REWRITE
					// elements: 97, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 626:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(626, 27);
						// SugarCpp.g:626:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(626, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(626, 41);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(626, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(626, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:627:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(627, 13);
					// SugarCpp.g:627:13: ( generic_parameter )?
					int alt197=2;
					try { DebugEnterSubRule(197);
					try { DebugEnterDecision(197, false);
					int LA197_0 = input.LA(1);

					if ((LA197_0==107))
					{
						alt197 = 1;
					}
					} finally { DebugExitDecision(197); }
					switch (alt197)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:627:13: generic_parameter
						{
						DebugLocation(627, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix5717);
						generic_parameter457=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter457.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(197); }

					DebugLocation(627, 32);
					char_literal458=(IToken)Match(input,86,Follow._86_in_lvalue_suffix5720);  
					stream_86.Add(char_literal458);

					DebugLocation(627, 36);
					// SugarCpp.g:627:36: ( expr_list )?
					int alt198=2;
					try { DebugEnterSubRule(198);
					try { DebugEnterDecision(198, false);
					int LA198_0 = input.LA(1);

					if ((LA198_0==IDENT||LA198_0==NUMBER||LA198_0==STRING||LA198_0==79||LA198_0==84||LA198_0==86||LA198_0==88||(LA198_0>=90 && LA198_0<=91)||(LA198_0>=94 && LA198_0<=95)||(LA198_0>=121 && LA198_0<=122)||LA198_0==144||(LA198_0>=146 && LA198_0<=147)||LA198_0==166))
					{
						alt198 = 1;
					}
					} finally { DebugExitDecision(198); }
					switch (alt198)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:627:36: expr_list
						{
						DebugLocation(627, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix5722);
						expr_list459=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list459.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(198); }

					DebugLocation(627, 47);
					char_literal460=(IToken)Match(input,87,Follow._87_in_lvalue_suffix5725);  
					stream_87.Add(char_literal460);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 627:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(627, 54);
						// SugarCpp.g:627:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(627, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(627, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(627, 81);
						// SugarCpp.g:627:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(627, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(627, 100);
						// SugarCpp.g:627:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(627, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:628:13: '[' ( expr_list )? ']'
					{
					DebugLocation(628, 13);
					char_literal461=(IToken)Match(input,122,Follow._122_in_lvalue_suffix5754);  
					stream_122.Add(char_literal461);

					DebugLocation(628, 17);
					// SugarCpp.g:628:17: ( expr_list )?
					int alt199=2;
					try { DebugEnterSubRule(199);
					try { DebugEnterDecision(199, false);
					int LA199_0 = input.LA(1);

					if ((LA199_0==IDENT||LA199_0==NUMBER||LA199_0==STRING||LA199_0==79||LA199_0==84||LA199_0==86||LA199_0==88||(LA199_0>=90 && LA199_0<=91)||(LA199_0>=94 && LA199_0<=95)||(LA199_0>=121 && LA199_0<=122)||LA199_0==144||(LA199_0>=146 && LA199_0<=147)||LA199_0==166))
					{
						alt199 = 1;
					}
					} finally { DebugExitDecision(199); }
					switch (alt199)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:628:17: expr_list
						{
						DebugLocation(628, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix5756);
						expr_list462=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list462.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(199); }

					DebugLocation(628, 28);
					char_literal463=(IToken)Match(input,123,Follow._123_in_lvalue_suffix5759);  
					stream_123.Add(char_literal463);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 628:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(628, 35);
						// SugarCpp.g:628:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(628, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(628, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(628, 62);
						// SugarCpp.g:628:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(628, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 84);
			LeaveRule("lvalue_suffix", 84);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(630, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:632:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 85);
		TraceIn("lvalue_atom", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal465 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident466 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal465_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(632, 1);
		try
		{
			// SugarCpp.g:633:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt201=2;
			try { DebugEnterDecision(201, false);
			int LA201_0 = input.LA(1);

			if ((LA201_0==IDENT))
			{
				alt201 = 1;
			}
			else if ((LA201_0==121))
			{
				alt201 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 201, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(201); }
			switch (alt201)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:633:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(633, 4);
				PushFollow(Follow._ident_in_lvalue_atom5798);
				ident464=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident464.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:634:4: '@' ident
				{
				DebugLocation(634, 4);
				char_literal465=(IToken)Match(input,121,Follow._121_in_lvalue_atom5803);  
				stream_121.Add(char_literal465);

				DebugLocation(634, 8);
				PushFollow(Follow._ident_in_lvalue_atom5805);
				ident466=ident();
				PopFollow();

				stream_ident.Add(ident466.Tree);


				{
				// AST REWRITE
				// elements: ident, 121
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 634:14: -> ^( '@' ident )
				{
					DebugLocation(634, 17);
					// SugarCpp.g:634:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(634, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_121.NextNode(), root_1);

					DebugLocation(634, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 85);
			LeaveRule("lvalue_atom", 85);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(635, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:637:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 86);
		TraceIn("lvalue", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal467 = default(IToken);
		IToken char_literal469 = default(IToken);
		IToken char_literal471 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item468 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item470 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item472 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal467_tree = default(CommonTree);
		CommonTree char_literal469_tree = default(CommonTree);
		CommonTree char_literal471_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(637, 1);
		try
		{
			// SugarCpp.g:638:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt203=2;
			try { DebugEnterDecision(203, false);
			int LA203_0 = input.LA(1);

			if ((LA203_0==86))
			{
				alt203 = 1;
			}
			else if ((LA203_0==IDENT||LA203_0==79||LA203_0==84||LA203_0==88||(LA203_0>=90 && LA203_0<=91)||(LA203_0>=94 && LA203_0<=95)||LA203_0==121||LA203_0==147||LA203_0==166))
			{
				alt203 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 203, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(203); }
			switch (alt203)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:638:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(638, 4);
				char_literal467=(IToken)Match(input,86,Follow._86_in_lvalue5824);  
				stream_86.Add(char_literal467);

				DebugLocation(638, 8);
				PushFollow(Follow._lvalue_item_in_lvalue5826);
				lvalue_item468=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item468.Tree);
				DebugLocation(638, 20);
				// SugarCpp.g:638:20: ( ',' lvalue_item )+
				int cnt202=0;
				try { DebugEnterSubRule(202);
				while (true)
				{
					int alt202=2;
					try { DebugEnterDecision(202, false);
					int LA202_0 = input.LA(1);

					if ((LA202_0==93))
					{
						alt202 = 1;
					}


					} finally { DebugExitDecision(202); }
					switch (alt202)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:638:21: ',' lvalue_item
						{
						DebugLocation(638, 21);
						char_literal469=(IToken)Match(input,93,Follow._93_in_lvalue5829);  
						stream_93.Add(char_literal469);

						DebugLocation(638, 25);
						PushFollow(Follow._lvalue_item_in_lvalue5831);
						lvalue_item470=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item470.Tree);

						}
						break;

					default:
						if (cnt202 >= 1)
							goto loop202;

						EarlyExitException eee202 = new EarlyExitException( 202, input );
						DebugRecognitionException(eee202);
						throw eee202;
					}
					cnt202++;
				}
				loop202:
					;

				} finally { DebugExitSubRule(202); }

				DebugLocation(638, 39);
				char_literal471=(IToken)Match(input,87,Follow._87_in_lvalue5835);  
				stream_87.Add(char_literal471);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 638:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(638, 46);
					// SugarCpp.g:638:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(638, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(638, 60);
					// SugarCpp.g:638:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(638, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:639:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(639, 4);
				PushFollow(Follow._lvalue_item_in_lvalue5849);
				lvalue_item472=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item472.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 86);
			LeaveRule("lvalue", 86);
			LeaveRule_lvalue();
		}
		DebugLocation(640, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:642:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 87);
		TraceIn("ident", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT473 = default(IToken);
		IToken string_literal474 = default(IToken);
		IToken IDENT475 = default(IToken);

		CommonTree IDENT473_tree = default(CommonTree);
		CommonTree string_literal474_tree = default(CommonTree);
		CommonTree IDENT475_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(642, 1);
		try
		{
			// SugarCpp.g:643:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:643:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(643, 4);
			IDENT473=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5860); 
			IDENT473_tree = (CommonTree)adaptor.Create(IDENT473);
			adaptor.AddChild(root_0, IDENT473_tree);
			DebugLocation(643, 10);
			// SugarCpp.g:643:10: ( '::' IDENT )*
			try { DebugEnterSubRule(204);
			while (true)
			{
				int alt204=2;
				try { DebugEnterDecision(204, false);
				int LA204_0 = input.LA(1);

				if ((LA204_0==104))
				{
					alt204 = 1;
				}


				} finally { DebugExitDecision(204); }
				switch ( alt204 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:643:11: '::' IDENT
					{
					DebugLocation(643, 11);
					string_literal474=(IToken)Match(input,104,Follow._104_in_ident5863); 
					string_literal474_tree = (CommonTree)adaptor.Create(string_literal474);
					adaptor.AddChild(root_0, string_literal474_tree);
					DebugLocation(643, 16);
					IDENT475=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5865); 
					IDENT475_tree = (CommonTree)adaptor.Create(IDENT475);
					adaptor.AddChild(root_0, IDENT475_tree);

					}
					break;

				default:
					goto loop204;
				}
			}

			loop204:
				;

			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 87);
			LeaveRule("ident", 87);
			LeaveRule_ident();
		}
		DebugLocation(644, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:646:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 88);
		TraceIn("infix_func", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal476 = default(IToken);
		IToken char_literal478 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident477 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal476_tree = default(CommonTree);
		CommonTree char_literal478_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(646, 1);
		try
		{
			// SugarCpp.g:647:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:647:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(647, 7);
			char_literal476=(IToken)Match(input,126,Follow._126_in_infix_func5878); 
			DebugLocation(647, 9);
			PushFollow(Follow._ident_in_infix_func5881);
			ident477=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident477.Tree);
			DebugLocation(647, 18);
			char_literal478=(IToken)Match(input,126,Follow._126_in_infix_func5883); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 88);
			LeaveRule("infix_func", 88);
			LeaveRule_infix_func();
		}
		DebugLocation(648, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA62 dfa62;
	private DFA79 dfa79;
	private DFA88 dfa88;
	private DFA93 dfa93;
	private DFA106 dfa106;
	private DFA154 dfa154;
	private DFA143 dfa143;
	private DFA159 dfa159;
	private DFA158 dfa158;
	private DFA164 dfa164;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa62 = new DFA62( this );
		dfa79 = new DFA79( this );
		dfa88 = new DFA88( this );
		dfa93 = new DFA93( this );
		dfa106 = new DFA106( this );
		dfa154 = new DFA154( this );
		dfa143 = new DFA143( this );
		dfa159 = new DFA159( this );
		dfa158 = new DFA158( this );
		dfa164 = new DFA164( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2A\x1\xFFFF\x1\x2A\x6\xFFFF\x2\x56\x1\x2A\x1\xFFFF\x3\x2A\x1\x33"+
			"\x2\x2A\x1\x56\x3\x57\x2\x56\x1\x2A\x3\x57\x1\x2A\x1\x5D\x5\x2A\x1\x5D"+
			"\x1\x2A\x4\x57\x1\x56\xA\x57\x2\x2A\x1\x5D\x2\x2A\x1\x5D\x2\x2A\xA\x57"+
			"\x2\x2A\x2\x57";
		private const string DFA4_maxS =
			"\x1\xA6\x1\x84\x1\xFFFF\x1\xA6\x6\xFFFF\x2\x7B\x1\x2A\x1\xFFFF\x1\x2A"+
			"\x1\x39\x1\x84\x1\x33\x1\x39\x1\xA6\x1\x7B\x2\x5D\x1\x68\x2\x7B\x1\xA6"+
			"\x2\x5D\x1\x68\x1\x39\x1\x7B\x2\x2A\x3\x39\x1\x7B\x1\x2A\x2\x5D\x2\x68"+
			"\x1\x7B\x2\x5D\x1\x68\x2\x5D\x1\x68\x2\x5D\x2\x68\x1\x2A\x1\x39\x1\x7B"+
			"\x1\x2A\x1\x39\x1\x7B\x2\x2A\x1\x68\x2\x5D\x2\x68\x2\x5D\x3\x68\x2\x2A"+
			"\x2\x68";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4F\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF"+
				"\x1\x8\x4\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\xA\x59\xFFFF\x1\xB",
				"",
				"\x1\x2\x29\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x2B\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x59\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x29\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x2B\xFFFF"+
				"\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x46\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "211:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x33\x1\xA6\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "255:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x33\x1\xA6\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "263:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x33\x1\xA6\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x46\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "267:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA62 : DFA
	{
		private const string DFA62_eotS =
			"\xF\xFFFF";
		private const string DFA62_eofS =
			"\xF\xFFFF";
		private const string DFA62_minS =
			"\x1\x2A\x1\xFFFF\x1\x2A\x1\xFFFF\x3\x2A\x1\x54\x3\x2A\x2\x54\x1\x2A\x1"+
			"\x54";
		private const string DFA62_maxS =
			"\x1\xA6\x1\xFFFF\x1\xA6\x1\xFFFF\x1\x2A\x1\x9D\x1\xA6\x1\x7A\x1\x2A\x1"+
			"\x9D\x1\xA6\x2\x7A\x1\x2A\x1\x7A";
		private const string DFA62_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA62_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA62_transitionS =
			{
				"\x1\x2\x59\xFFFF\x1\x1\x11\xFFFF\x1\x1\x6\xFFFF\x1\x1\x8\xFFFF\x1\x3",
				"",
				"\x1\x1\x29\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x2B\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x48\xFFFF\x1\x1\x10\xFFFF\x1\x1\x11\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x1",
				"\x1\x1\x29\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x2B\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x59\xFFFF\x1\x1\x11\xFFFF\x1\x1\x6\xFFFF\x1\x1",
				"\x1\x1\x29\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x21\xFFFF\x1\x1"+
				"\x2B\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA62_eot = DFA.UnpackEncodedString(DFA62_eotS);
		private static readonly short[] DFA62_eof = DFA.UnpackEncodedString(DFA62_eofS);
		private static readonly char[] DFA62_min = DFA.UnpackEncodedStringToUnsignedChars(DFA62_minS);
		private static readonly char[] DFA62_max = DFA.UnpackEncodedStringToUnsignedChars(DFA62_maxS);
		private static readonly short[] DFA62_accept = DFA.UnpackEncodedString(DFA62_acceptS);
		private static readonly short[] DFA62_special = DFA.UnpackEncodedString(DFA62_specialS);
		private static readonly short[][] DFA62_transition;

		static DFA62()
		{
			int numStates = DFA62_transitionS.Length;
			DFA62_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA62_transition[i] = DFA.UnpackEncodedString(DFA62_transitionS[i]);
			}
		}

		public DFA62( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 62;
			this.eot = DFA62_eot;
			this.eof = DFA62_eof;
			this.min = DFA62_min;
			this.max = DFA62_max;
			this.accept = DFA62_accept;
			this.special = DFA62_special;
			this.transition = DFA62_transition;
		}

		public override string Description { get { return "314:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA79 : DFA
	{
		private const string DFA79_eotS =
			"\x9\xFFFF";
		private const string DFA79_eofS =
			"\x9\xFFFF";
		private const string DFA79_minS =
			"\x1\x2A\x1\x8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA79_maxS =
			"\x1\xA6\x1\xA4\x4\xFFFF\x1\x2A\x1\xFFFF\x1\xA4";
		private const string DFA79_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA79_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA79_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x19\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x3\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2A\xFFFF\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x10\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2A\xFFFF\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x10\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA79_eot = DFA.UnpackEncodedString(DFA79_eotS);
		private static readonly short[] DFA79_eof = DFA.UnpackEncodedString(DFA79_eofS);
		private static readonly char[] DFA79_min = DFA.UnpackEncodedStringToUnsignedChars(DFA79_minS);
		private static readonly char[] DFA79_max = DFA.UnpackEncodedStringToUnsignedChars(DFA79_maxS);
		private static readonly short[] DFA79_accept = DFA.UnpackEncodedString(DFA79_acceptS);
		private static readonly short[] DFA79_special = DFA.UnpackEncodedString(DFA79_specialS);
		private static readonly short[][] DFA79_transition;

		static DFA79()
		{
			int numStates = DFA79_transitionS.Length;
			DFA79_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA79_transition[i] = DFA.UnpackEncodedString(DFA79_transitionS[i]);
			}
		}

		public DFA79( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 79;
			this.eot = DFA79_eot;
			this.eof = DFA79_eof;
			this.min = DFA79_min;
			this.max = DFA79_max;
			this.accept = DFA79_accept;
			this.special = DFA79_special;
			this.transition = DFA79_transition;
		}

		public override string Description { get { return "354:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA88 : DFA
	{
		private const string DFA88_eotS =
			"\x4\xFFFF";
		private const string DFA88_eofS =
			"\x4\xFFFF";
		private const string DFA88_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA88_maxS =
			"\x1\x87\x1\xA6\x2\xFFFF";
		private const string DFA88_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA88_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA88_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x53\xFFFF\x1\x2",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA88_eot = DFA.UnpackEncodedString(DFA88_eotS);
		private static readonly short[] DFA88_eof = DFA.UnpackEncodedString(DFA88_eofS);
		private static readonly char[] DFA88_min = DFA.UnpackEncodedStringToUnsignedChars(DFA88_minS);
		private static readonly char[] DFA88_max = DFA.UnpackEncodedStringToUnsignedChars(DFA88_maxS);
		private static readonly short[] DFA88_accept = DFA.UnpackEncodedString(DFA88_acceptS);
		private static readonly short[] DFA88_special = DFA.UnpackEncodedString(DFA88_specialS);
		private static readonly short[][] DFA88_transition;

		static DFA88()
		{
			int numStates = DFA88_transitionS.Length;
			DFA88_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA88_transition[i] = DFA.UnpackEncodedString(DFA88_transitionS[i]);
			}
		}

		public DFA88( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 88;
			this.eot = DFA88_eot;
			this.eof = DFA88_eof;
			this.min = DFA88_min;
			this.max = DFA88_max;
			this.accept = DFA88_accept;
			this.special = DFA88_special;
			this.transition = DFA88_transition;
		}

		public override string Description { get { return "385:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA93 : DFA
	{
		private const string DFA93_eotS =
			"\x4\xFFFF";
		private const string DFA93_eofS =
			"\x4\xFFFF";
		private const string DFA93_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA93_maxS =
			"\x1\x87\x1\xA6\x2\xFFFF";
		private const string DFA93_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA93_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA93_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x53\xFFFF\x1\x2",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA93_eot = DFA.UnpackEncodedString(DFA93_eotS);
		private static readonly short[] DFA93_eof = DFA.UnpackEncodedString(DFA93_eofS);
		private static readonly char[] DFA93_min = DFA.UnpackEncodedStringToUnsignedChars(DFA93_minS);
		private static readonly char[] DFA93_max = DFA.UnpackEncodedStringToUnsignedChars(DFA93_maxS);
		private static readonly short[] DFA93_accept = DFA.UnpackEncodedString(DFA93_acceptS);
		private static readonly short[] DFA93_special = DFA.UnpackEncodedString(DFA93_specialS);
		private static readonly short[][] DFA93_transition;

		static DFA93()
		{
			int numStates = DFA93_transitionS.Length;
			DFA93_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA93_transition[i] = DFA.UnpackEncodedString(DFA93_transitionS[i]);
			}
		}

		public DFA93( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 93;
			this.eot = DFA93_eot;
			this.eof = DFA93_eof;
			this.min = DFA93_min;
			this.max = DFA93_max;
			this.accept = DFA93_accept;
			this.special = DFA93_special;
			this.transition = DFA93_transition;
		}

		public override string Description { get { return "388:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA106 : DFA
	{
		private const string DFA106_eotS =
			"\x6\xFFFF";
		private const string DFA106_eofS =
			"\x6\xFFFF";
		private const string DFA106_minS =
			"\x1\x2A\x1\x8\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA106_maxS =
			"\x1\xA6\x1\xA5\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xA5";
		private const string DFA106_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA106_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA106_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x2\x2A\xFFFF\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x2A\xFFFF\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x2\x2\x5\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2"
			};

		private static readonly short[] DFA106_eot = DFA.UnpackEncodedString(DFA106_eotS);
		private static readonly short[] DFA106_eof = DFA.UnpackEncodedString(DFA106_eofS);
		private static readonly char[] DFA106_min = DFA.UnpackEncodedStringToUnsignedChars(DFA106_minS);
		private static readonly char[] DFA106_max = DFA.UnpackEncodedStringToUnsignedChars(DFA106_maxS);
		private static readonly short[] DFA106_accept = DFA.UnpackEncodedString(DFA106_acceptS);
		private static readonly short[] DFA106_special = DFA.UnpackEncodedString(DFA106_specialS);
		private static readonly short[][] DFA106_transition;

		static DFA106()
		{
			int numStates = DFA106_transitionS.Length;
			DFA106_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA106_transition[i] = DFA.UnpackEncodedString(DFA106_transitionS[i]);
			}
		}

		public DFA106( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 106;
			this.eot = DFA106_eot;
			this.eof = DFA106_eof;
			this.min = DFA106_min;
			this.max = DFA106_max;
			this.accept = DFA106_accept;
			this.special = DFA106_special;
			this.transition = DFA106_transition;
		}

		public override string Description { get { return "414:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA154 : DFA
	{
		private const string DFA154_eotS =
			"\x7\xFFFF";
		private const string DFA154_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA154_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA154_maxS =
			"\x1\xA2\x1\xA6\x2\xFFFF\x2\xA6\x1\xFFFF";
		private const string DFA154_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA154_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA154_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x29\xFFFF\x1\x3\xC\xFFFF\x1\x3\x1F\xFFFF\x2\x3"+
				"\x10\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x8\xFFFF\x3\x3\x1\xFFFF\x6\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x7\x3\x1\xFFFF\x2\x3\x2\xFFFF"+
				"\x1\x3",
				"",
				"",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA154_eot = DFA.UnpackEncodedString(DFA154_eotS);
		private static readonly short[] DFA154_eof = DFA.UnpackEncodedString(DFA154_eofS);
		private static readonly char[] DFA154_min = DFA.UnpackEncodedStringToUnsignedChars(DFA154_minS);
		private static readonly char[] DFA154_max = DFA.UnpackEncodedStringToUnsignedChars(DFA154_maxS);
		private static readonly short[] DFA154_accept = DFA.UnpackEncodedString(DFA154_acceptS);
		private static readonly short[] DFA154_special = DFA.UnpackEncodedString(DFA154_specialS);
		private static readonly short[][] DFA154_transition;

		static DFA154()
		{
			int numStates = DFA154_transitionS.Length;
			DFA154_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA154_transition[i] = DFA.UnpackEncodedString(DFA154_transitionS[i]);
			}
		}

		public DFA154( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 154;
			this.eot = DFA154_eot;
			this.eof = DFA154_eof;
			this.min = DFA154_min;
			this.max = DFA154_max;
			this.accept = DFA154_accept;
			this.special = DFA154_special;
			this.transition = DFA154_transition;
		}

		public override string Description { get { return "469:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA143 : DFA
	{
		private const string DFA143_eotS =
			"\x4\xFFFF";
		private const string DFA143_eofS =
			"\x4\xFFFF";
		private const string DFA143_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA143_maxS =
			"\x2\x33\x2\xFFFF";
		private const string DFA143_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA143_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA143_transitionS =
			{
				"\x1\x2\x2A\xFFFF\x1\x1",
				"\x1\x2\x22\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA143_eot = DFA.UnpackEncodedString(DFA143_eotS);
		private static readonly short[] DFA143_eof = DFA.UnpackEncodedString(DFA143_eofS);
		private static readonly char[] DFA143_min = DFA.UnpackEncodedStringToUnsignedChars(DFA143_minS);
		private static readonly char[] DFA143_max = DFA.UnpackEncodedStringToUnsignedChars(DFA143_maxS);
		private static readonly short[] DFA143_accept = DFA.UnpackEncodedString(DFA143_acceptS);
		private static readonly short[] DFA143_special = DFA.UnpackEncodedString(DFA143_specialS);
		private static readonly short[][] DFA143_transition;

		static DFA143()
		{
			int numStates = DFA143_transitionS.Length;
			DFA143_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA143_transition[i] = DFA.UnpackEncodedString(DFA143_transitionS[i]);
			}
		}

		public DFA143( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 143;
			this.eot = DFA143_eot;
			this.eof = DFA143_eof;
			this.min = DFA143_min;
			this.max = DFA143_max;
			this.accept = DFA143_accept;
			this.special = DFA143_special;
			this.transition = DFA143_transition;
		}

		public override string Description { get { return "469:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA159 : DFA
	{
		private const string DFA159_eotS =
			"\x7\xFFFF";
		private const string DFA159_eofS =
			"\x7\xFFFF";
		private const string DFA159_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA159_maxS =
			"\x5\xA6\x2\xFFFF";
		private const string DFA159_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA159_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA159_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x16\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x16\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x16\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x16\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x16\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA159_eot = DFA.UnpackEncodedString(DFA159_eotS);
		private static readonly short[] DFA159_eof = DFA.UnpackEncodedString(DFA159_eofS);
		private static readonly char[] DFA159_min = DFA.UnpackEncodedStringToUnsignedChars(DFA159_minS);
		private static readonly char[] DFA159_max = DFA.UnpackEncodedStringToUnsignedChars(DFA159_maxS);
		private static readonly short[] DFA159_accept = DFA.UnpackEncodedString(DFA159_acceptS);
		private static readonly short[] DFA159_special = DFA.UnpackEncodedString(DFA159_specialS);
		private static readonly short[][] DFA159_transition;

		static DFA159()
		{
			int numStates = DFA159_transitionS.Length;
			DFA159_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA159_transition[i] = DFA.UnpackEncodedString(DFA159_transitionS[i]);
			}
		}

		public DFA159( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 159;
			this.eot = DFA159_eot;
			this.eof = DFA159_eof;
			this.min = DFA159_min;
			this.max = DFA159_max;
			this.accept = DFA159_accept;
			this.special = DFA159_special;
			this.transition = DFA159_transition;
		}

		public override string Description { get { return "485:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA158 : DFA
	{
		private const string DFA158_eotS =
			"\x7\xFFFF";
		private const string DFA158_eofS =
			"\x7\xFFFF";
		private const string DFA158_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA158_maxS =
			"\x1\x7B\x4\xA6\x2\xFFFF";
		private const string DFA158_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA158_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA158_transitionS =
			{
				"\x1\x4\x22\xFFFF\x1\x3\x7\xFFFF\x1\x2\x29\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x16\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x16\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x16\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x16\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA158_eot = DFA.UnpackEncodedString(DFA158_eotS);
		private static readonly short[] DFA158_eof = DFA.UnpackEncodedString(DFA158_eofS);
		private static readonly char[] DFA158_min = DFA.UnpackEncodedStringToUnsignedChars(DFA158_minS);
		private static readonly char[] DFA158_max = DFA.UnpackEncodedStringToUnsignedChars(DFA158_maxS);
		private static readonly short[] DFA158_accept = DFA.UnpackEncodedString(DFA158_acceptS);
		private static readonly short[] DFA158_special = DFA.UnpackEncodedString(DFA158_specialS);
		private static readonly short[][] DFA158_transition;

		static DFA158()
		{
			int numStates = DFA158_transitionS.Length;
			DFA158_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA158_transition[i] = DFA.UnpackEncodedString(DFA158_transitionS[i]);
			}
		}

		public DFA158( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 158;
			this.eot = DFA158_eot;
			this.eof = DFA158_eof;
			this.min = DFA158_min;
			this.max = DFA158_max;
			this.accept = DFA158_accept;
			this.special = DFA158_special;
			this.transition = DFA158_transition;
		}

		public override string Description { get { return "()* loopback of 485:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA164 : DFA
	{
		private const string DFA164_eotS =
			"\xB\xFFFF";
		private const string DFA164_eofS =
			"\xB\xFFFF";
		private const string DFA164_minS =
			"\x2\x2A\x1\xFFFF\x1\x50\x1\xFFFF\x2\x2A\x2\x50\x1\x2A\x1\x50";
		private const string DFA164_maxS =
			"\x2\xA6\x1\xFFFF\x1\xA5\x1\xFFFF\x1\x2A\x1\xA6\x2\xA5\x1\x2A\x1\xA5";
		private const string DFA164_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA164_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA164_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x18\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x5\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x5\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x5\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xC\xFFFF\x2\x2\x5\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2"
			};

		private static readonly short[] DFA164_eot = DFA.UnpackEncodedString(DFA164_eotS);
		private static readonly short[] DFA164_eof = DFA.UnpackEncodedString(DFA164_eofS);
		private static readonly char[] DFA164_min = DFA.UnpackEncodedStringToUnsignedChars(DFA164_minS);
		private static readonly char[] DFA164_max = DFA.UnpackEncodedStringToUnsignedChars(DFA164_maxS);
		private static readonly short[] DFA164_accept = DFA.UnpackEncodedString(DFA164_acceptS);
		private static readonly short[] DFA164_special = DFA.UnpackEncodedString(DFA164_specialS);
		private static readonly short[][] DFA164_transition;

		static DFA164()
		{
			int numStates = DFA164_transitionS.Length;
			DFA164_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA164_transition[i] = DFA.UnpackEncodedString(DFA164_transitionS[i]);
			}
		}

		public DFA164( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 164;
			this.eot = DFA164_eot;
			this.eof = DFA164_eof;
			this.min = DFA164_min;
			this.max = DFA164_max;
			this.accept = DFA164_accept;
			this.special = DFA164_special;
			this.transition = DFA164_transition;
		}

		public override string Description { get { return "489:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root546 = new BitSet(new ulong[]{0x8040000000000UL,0x400000000000000UL,0x40A8421118UL});
		public static readonly BitSet _global_block_in_root549 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block571 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block573 = new BitSet(new ulong[]{0x8040000000002UL,0x400000000000000UL,0x40A8421118UL});
		public static readonly BitSet _func_def_in_node596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item664 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_attribute_item667 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item669 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _93_in_attribute_item672 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item674 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_attribute_item678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_attribute_item696 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_attribute_item699 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item701 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _93_in_attribute_item704 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item706 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_attribute_item710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_attribute735 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _attribute_item_in_attribute737 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _93_in_attribute740 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _attribute_item_in_attribute742 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _123_in_attribute746 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute748 = new BitSet(new ulong[]{0x8000000000002UL,0x400000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc767 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc770 = new BitSet(new ulong[]{0x0UL,0x28000000000UL});
		public static readonly BitSet _103_in_global_alloc774 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_global_alloc776 = new BitSet(new ulong[]{0x2UL,0x1020000400000UL});
		public static readonly BitSet _112_in_global_alloc781 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _105_in_global_alloc785 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_global_alloc788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_global_alloc848 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_global_alloc850 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_global_alloc853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_global_alloc926 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_global_alloc929 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_global_alloc932 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_global_alloc934 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _attribute_in_global_using971 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000000UL});
		public static readonly BitSet _159_in_global_using974 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x20000UL});
		public static readonly BitSet _stmt_using_item_in_global_using976 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x20000UL});
		public static readonly BitSet _attribute_in_global_typedef1000 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_global_typedef1003 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef1005 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_global_typedef1007 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_global_typedef1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1033 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_import_def1036 = new BitSet(new ulong[]{0x208000000000002UL});
		public static readonly BitSet _STRING_in_import_def1038 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1042 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_import_def1045 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1047 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _STRING_in_import_def1052 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1054 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1084 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_enum_def1087 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1089 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_enum_def1091 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _ident_in_enum_def1094 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_enum_def1097 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1099 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _attribute_in_namespace_def1132 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_namespace_def1135 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_namespace_def1137 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1140 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1143 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000000000UL,0x40A8421118UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1145 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000000000UL,0x40A8421118UL});
		public static readonly BitSet _global_block_in_namespace_def1148 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1178 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_class_def1181 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1183 = new BitSet(new ulong[]{0x8000000000002UL,0x88000400000UL});
		public static readonly BitSet _generic_parameter_in_class_def1186 = new BitSet(new ulong[]{0x8000000000002UL,0x8000400000UL});
		public static readonly BitSet _86_in_class_def1191 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000UL});
		public static readonly BitSet _func_args_in_class_def1193 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_class_def1195 = new BitSet(new ulong[]{0x8000000000002UL,0x8000000000UL});
		public static readonly BitSet _103_in_class_def1200 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1202 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000UL});
		public static readonly BitSet _93_in_class_def1205 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1207 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1214 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1217 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000000000UL,0x40A8421118UL});
		public static readonly BitSet _NEWLINE_in_class_def1219 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000000000UL,0x40A8421118UL});
		public static readonly BitSet _global_block_in_class_def1222 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1267 = new BitSet(new ulong[]{0x2UL,0x400000000100000UL});
		public static readonly BitSet _84_in_type_name1271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_type_name1287 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_type_name1289 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _93_in_type_name1292 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_type_name1294 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _123_in_type_name1298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1336 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_type_star1340 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1386 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _107_in_type_template_type1390 = new BitSet(new ulong[]{0x40000000000UL,0x8000000000000UL,0x20400010UL});
		public static readonly BitSet _type_name_in_type_template_type1393 = new BitSet(new ulong[]{0x0UL,0x8000020000000UL});
		public static readonly BitSet _93_in_type_template_type1396 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_type_template_type1398 = new BitSet(new ulong[]{0x0UL,0x8000020000000UL});
		public static readonly BitSet _115_in_type_template_type1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_type_ident1444 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400000UL});
		public static readonly BitSet _157_in_type_ident1447 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_type_ident1450 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident1453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1481 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_generic_parameter_inside1484 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1486 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _107_in_generic_parameter1508 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1510 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_generic_parameter1512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1527 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_func_args1530 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1532 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1554 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _103_in_func_args_item1556 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_func_args_item1558 = new BitSet(new ulong[]{0x2UL,0x1020000400000UL});
		public static readonly BitSet _112_in_func_args_item1563 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _105_in_func_args_item1567 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_func_args_item1570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_func_args_item1618 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_func_args_item1620 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_func_args_item1623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_func_args_item1680 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1695 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4020400010UL});
		public static readonly BitSet _type_name_in_func_def1698 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_func_def1701 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_func_def1704 = new BitSet(new ulong[]{0x0UL,0x80000400000UL});
		public static readonly BitSet _generic_parameter_in_func_def1706 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_func_def1709 = new BitSet(new ulong[]{0x40000000000UL,0x20000800000UL});
		public static readonly BitSet _func_args_in_func_def1711 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_func_def1714 = new BitSet(new ulong[]{0x8000000000000UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1717 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1720 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_func_def1769 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _where_expr_in_func_def1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item1812 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1814 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item1824 = new BitSet(new ulong[]{0x8000000000000UL,0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1827 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _106_in_stmt_block_item1832 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1834 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block1851 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1853 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block1856 = new BitSet(new ulong[]{0x40000000100UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _DEDENT_in_stmt_block1859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt1879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt1884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple1895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex1906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex1911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex1916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex1921 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex1926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex1931 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1945 = new BitSet(new ulong[]{0x2UL,0x0UL,0x450000C00UL});
		public static readonly BitSet _139_in_stmt_expr1955 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_expr1957 = new BitSet(new ulong[]{0x2UL,0x0UL,0x450000C00UL});
		public static readonly BitSet _156_in_stmt_expr1986 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_expr1988 = new BitSet(new ulong[]{0x2UL,0x0UL,0x450000C00UL});
		public static readonly BitSet _162_in_stmt_expr2017 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_expr2019 = new BitSet(new ulong[]{0x2UL,0x0UL,0x450000C00UL});
		public static readonly BitSet _158_in_stmt_expr2048 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_expr2050 = new BitSet(new ulong[]{0x2UL,0x0UL,0x450000C00UL});
		public static readonly BitSet _138_in_stmt_expr2079 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _for_item_in_stmt_expr2081 = new BitSet(new ulong[]{0x2UL,0x20000000UL,0x450000C00UL});
		public static readonly BitSet _93_in_stmt_expr2084 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _for_item_in_stmt_expr2086 = new BitSet(new ulong[]{0x2UL,0x20000000UL,0x450000C00UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_defer2159 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _stmt_in_stmt_defer2161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_stmt_defer2174 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _stmt_in_stmt_defer2176 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_stmt_typedef2195 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2197 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_stmt_typedef2199 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_stmt_typedef2201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_using_item2224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_using2232 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x20000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2234 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x20000UL});
		public static readonly BitSet _149_in_stmt_return2255 = new BitSet(new ulong[]{0x210040000000002UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_return2257 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2278 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_inline_stmt_block2281 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x4088280000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2283 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _139_in_stmt_if2305 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_if2307 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2310 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2313 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x80UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2316 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_stmt_if2319 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2321 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_stmt_if2356 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x4088280000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2358 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_if2379 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_if2381 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2384 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2387 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x80UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2390 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_stmt_if2393 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2395 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_stmt_if2434 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x4088280000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_while2467 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_while2469 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2473 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_stmt_while2500 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x4088280000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_stmt_while2526 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_while2528 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2532 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_stmt_while2559 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x4088280000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_while2585 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_while2587 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2590 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2615 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_for_range2617 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_for_range2621 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000040UL});
		public static readonly BitSet _153_in_for_range2624 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_for_range2628 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_for_range2631 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_for_range2635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_for_range2664 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_for_range2668 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_for_range2671 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_for_range2675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_for2768 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _for_item_in_stmt_for2772 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL});
		public static readonly BitSet _93_in_stmt_for2775 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _for_item_in_stmt_for2777 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2781 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2784 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_try2815 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2817 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2820 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2822 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_stmt_try2825 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2827 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2829 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_switch_item2855 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_switch_item2857 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL,0x1000000UL});
		public static readonly BitSet _93_in_switch_item2860 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_switch_item2862 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item2868 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item2871 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_switch_item2913 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x4088280000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item2915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_switch2951 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_stmt_switch2953 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2956 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch2959 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2961 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch2965 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2967 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x100000080UL});
		public static readonly BitSet _135_in_stmt_switch2973 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2975 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch2978 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch2980 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch2985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3011 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_ident_list3014 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_ident_list3016 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3038 = new BitSet(new ulong[]{0x0UL,0x28000000000UL});
		public static readonly BitSet _103_in_stmt_alloc3042 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_stmt_alloc3044 = new BitSet(new ulong[]{0x2UL,0x1020000400000UL});
		public static readonly BitSet _112_in_stmt_alloc3049 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _105_in_stmt_alloc3053 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3056 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_stmt_alloc3104 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3106 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_stmt_alloc3109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_stmt_alloc3170 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3174 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_stmt_alloc3177 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3179 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3205 = new BitSet(new ulong[]{0x2UL,0x2141404112240000UL,0x1000000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3209 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_stmt_modify3226 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_match_item3242 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_match_item3244 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_match_item3246 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _where_expr_in_match_item3248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_match_expr3269 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_match_expr3271 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr3274 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_match_expr3277 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr3279 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _match_item_in_match_expr3283 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr3285 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x800000000UL});
		public static readonly BitSet _DEDENT_in_match_expr3290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3327 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3337 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3340 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3342 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x200000000UL});
		public static readonly BitSet _161_in_where_expr3345 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _where_item_in_where_expr3349 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3353 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3356 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3389 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3392 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _NEWLINE_in_where_expr3394 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _where_item_in_where_expr3398 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3400 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _DEDENT_in_where_expr3405 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3407 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3460 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3463 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _NEWLINE_in_where_expr3465 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _where_item_in_where_expr3469 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3471 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _DEDENT_in_where_expr3476 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3478 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_where_expr3519 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3521 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3524 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _NEWLINE_in_where_expr3526 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _where_item_in_where_expr3530 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3532 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x44DCA88E20UL});
		public static readonly BitSet _DEDENT_in_where_expr3537 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3595 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr3600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_list_expr3611 = new BitSet(new ulong[]{0x2180C0000000100UL,0xE000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _93_in_list_expr3615 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3619 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _INDENT_in_list_expr3623 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _DEDENT_in_list_expr3627 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _list_expr_in_list_expr3631 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _93_in_list_expr3635 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3639 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _INDENT_in_list_expr3643 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _DEDENT_in_list_expr3647 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x40000C0000UL});
		public static readonly BitSet _list_expr_in_list_expr3651 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _93_in_list_expr3658 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3662 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _INDENT_in_list_expr3666 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _DEDENT_in_list_expr3670 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _123_in_list_expr3674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr3688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_lambda_expr3699 = new BitSet(new ulong[]{0x40000000000UL,0x20000800000UL});
		public static readonly BitSet _func_args_in_lambda_expr3701 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lambda_expr3704 = new BitSet(new ulong[]{0x0UL,0x4000200000000UL});
		public static readonly BitSet _97_in_lambda_expr3708 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_lambda_expr3710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_lambda_expr3750 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_lambda_expr3752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr3772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr3829 = new BitSet(new ulong[]{0x2UL,0x2041424112240000UL,0x1000000000UL});
		public static readonly BitSet _set_in_modify_expr3833 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_modify_expr3887 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3890 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3903 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3915 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _119_in_cond_expr3924 = new BitSet(new ulong[]{0x210040000000002UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3930 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_cond_expr3934 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4052 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000100000UL});
		public static readonly BitSet _or_op_in_or_expr4063 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _and_expr_in_or_expr4067 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000100000UL});
		public static readonly BitSet _bit_or_in_and_expr4109 = new BitSet(new ulong[]{0x2UL,0x8000000000080000UL});
		public static readonly BitSet _and_op_in_and_expr4120 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _bit_or_in_and_expr4124 = new BitSet(new ulong[]{0x2UL,0x8000000000080000UL});
		public static readonly BitSet _bit_xor_in_bit_or4155 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_bit_or4164 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _bit_xor_in_bit_or4168 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4198 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_bit_xor4207 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _bit_and_in_bit_xor4211 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4241 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_bit_and4250 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4254 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _chain_op_in_chain_list4346 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _infix_expr_in_chain_list4348 = new BitSet(new ulong[]{0x2UL,0x1A880000010000UL,0x6000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4362 = new BitSet(new ulong[]{0x2UL,0x1A880000010000UL,0x6000UL});
		public static readonly BitSet _107_in_cmp_expr4372 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4376 = new BitSet(new ulong[]{0x40000000002UL,0x1A880000010000UL,0x6000UL});
		public static readonly BitSet _ident_in_cmp_expr4382 = new BitSet(new ulong[]{0x40000000000UL,0x8000000000000UL});
		public static readonly BitSet _115_in_cmp_expr4385 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_cmp_expr4387 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_cmp_expr4389 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_cmp_expr4392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr4461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr4538 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4542 = new BitSet(new ulong[]{0x2UL,0x1A880000010000UL,0x6000UL});
		public static readonly BitSet _chain_list_in_cmp_expr4546 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr4637 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr4647 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _shift_expr_in_infix_expr4651 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr4694 = new BitSet(new ulong[]{0x2UL,0x20200000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr4703 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _add_expr_in_shift_expr4707 = new BitSet(new ulong[]{0x2UL,0x20200000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr4737 = new BitSet(new ulong[]{0x2UL,0x44000000UL});
		public static readonly BitSet _90_in_add_expr4747 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _mul_expr_in_add_expr4751 = new BitSet(new ulong[]{0x2UL,0x44000000UL});
		public static readonly BitSet _94_in_add_expr4776 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _mul_expr_in_add_expr4780 = new BitSet(new ulong[]{0x2UL,0x44000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4818 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _88_in_mul_expr4828 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4832 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _101_in_mul_expr4862 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4866 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _81_in_mul_expr4896 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4900 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _cast_expr_in_selector_expr4943 = new BitSet(new ulong[]{0x2UL,0x1400000000UL});
		public static readonly BitSet _98_in_selector_expr4953 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr4957 = new BitSet(new ulong[]{0x2UL,0x1400000000UL});
		public static readonly BitSet _100_in_selector_expr4983 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr4988 = new BitSet(new ulong[]{0x2UL,0x1400000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5028 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_cast_expr5037 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_cast_expr5039 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_cast_expr5041 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_cast_expr5043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5105 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x40000C0000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_prefix_expr5123 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x20400010UL});
		public static readonly BitSet _type_name_in_prefix_expr5125 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_prefix_expr5127 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5129 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_prefix_expr5132 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list5160 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_expr_list5163 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_expr_list5166 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr5182 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _91_in_suffix_expr5192 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _95_in_suffix_expr5218 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _99_in_suffix_expr5241 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5243 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _97_in_suffix_expr5268 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5270 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _86_in_suffix_expr5295 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5299 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_suffix_expr5301 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _87_in_suffix_expr5330 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _122_in_suffix_expr5361 = new BitSet(new ulong[]{0x210040000000000UL,0xE000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5365 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_suffix_expr5367 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _123_in_suffix_expr5396 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _NUMBER_in_atom_expr5449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr5454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr5459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_atom_expr5464 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_atom_expr5466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_atom_expr5479 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_atom_expr5483 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _93_in_atom_expr5488 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_in_atom_expr5490 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_atom_expr5494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_atom_expr5521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item5552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix5564 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD108000UL,0x4000080000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix5566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix5582 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix5596 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _91_in_lvalue_suffix5606 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _95_in_lvalue_suffix5634 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _99_in_lvalue_suffix5659 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5661 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _97_in_lvalue_suffix5688 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5690 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix5717 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_lvalue_suffix5720 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5722 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lvalue_suffix5725 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _122_in_lvalue_suffix5754 = new BitSet(new ulong[]{0x210040000000000UL,0xE000000CD508000UL,0x40000D0000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5756 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_lvalue_suffix5759 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _ident_in_lvalue_atom5798 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_lvalue_atom5803 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom5805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_lvalue5824 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD108000UL,0x4000080000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5826 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lvalue5829 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD108000UL,0x4000080000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5831 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_lvalue5835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue5849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident5860 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _104_in_ident5863 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident5865 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _126_in_infix_func5878 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_infix_func5881 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_infix_func5883 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
