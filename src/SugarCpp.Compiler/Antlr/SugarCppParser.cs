//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-08-11 17:37:43

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Declare", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'extern'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'returns'", "'static'", "'struct'", "'switch'", "'then'", "'til'", "'to'", "'try'", "'typedef'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Declare=43;
	public const int Func_Def=44;
	public const int Generic_Patameters=45;
	public const int Global_Block=46;
	public const int IDENT=47;
	public const int INDENT=48;
	public const int Ident_List=49;
	public const int Import=50;
	public const int Left_Bracket=51;
	public const int LineComment=52;
	public const int Match_Expr=53;
	public const int Match_Expr_Item=54;
	public const int Match_Tuple=55;
	public const int NEWLINE=56;
	public const int NUMBER=57;
	public const int Namespace=58;
	public const int Right_Bracket=59;
	public const int Root=60;
	public const int SP=61;
	public const int STRING=62;
	public const int Stmt_Block=63;
	public const int Stmt_Defer=64;
	public const int Stmt_Finally=65;
	public const int Stmt_For=66;
	public const int Stmt_If=67;
	public const int Stmt_Loop=68;
	public const int Stmt_Return=69;
	public const int Stmt_Switch=70;
	public const int Stmt_Try=71;
	public const int Stmt_Typedef=72;
	public const int Stmt_Unless=73;
	public const int Stmt_Until=74;
	public const int Stmt_Using=75;
	public const int Stmt_While=76;
	public const int Switch_Item=77;
	public const int Type_Array=78;
	public const int Type_Func=79;
	public const int Type_Ident=80;
	public const int Type_List=81;
	public const int Type_Ref=82;
	public const int Type_Star=83;
	public const int Type_Template=84;
	public const int White_Space=85;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:214:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(215, 4);
			// SugarCpp.g:215:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:215:4: NEWLINE
					{
					DebugLocation(215, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(215, 13);
			PushFollow(Follow._global_block_in_root597);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(215, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root599); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 215:30: -> ^( Root global_block )
			{
				DebugLocation(215, 33);
				// SugarCpp.g:215:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(215, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(215, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:218:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(219, 4);
			// SugarCpp.g:219:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==93||LA3_0==132||(LA3_0>=140 && LA3_0<=141)||(LA3_0>=145 && LA3_0<=146)||LA3_0==150||LA3_0==155||LA3_0==158||LA3_0==162||(LA3_0>=165 && LA3_0<=166)||LA3_0==172||(LA3_0>=175 && LA3_0<=176)||LA3_0==184))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:219:5: node ( NEWLINE )+
					{
					DebugLocation(219, 5);
					PushFollow(Follow._node_in_global_block619);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(219, 10);
					// SugarCpp.g:219:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:219:10: NEWLINE
							{
							DebugLocation(219, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block621); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(219, 24);
				// SugarCpp.g:219:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(219, 39);
				// SugarCpp.g:219:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(219, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:222:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._func_def_in_node644);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._class_def_in_node649);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:225:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._enum_def_in_node654);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:226:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._global_alloc_in_node659);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:227:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._global_using_in_node664);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:228:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._global_typedef_in_node669);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:229:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._import_def_in_node674);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:230:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 4);
				PushFollow(Follow._namespace_def_in_node679);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:233:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(233, 1);
		try
		{
			// SugarCpp.g:234:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:234:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args691); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:235:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args696); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:236:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._ident_in_attribute_args701);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:239:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken char_literal30 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken string_literal41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		CommonTree string_literal35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) )
			int alt16=5;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt16 = 1;
				}
				break;
			case 141:
				{
				alt16 = 2;
				}
				break;
			case 165:
				{
				alt16 = 3;
				}
				break;
			case 162:
				{
				alt16 = 4;
				}
				break;
			case 176:
				{
				alt16 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(240, 4);
				PushFollow(Follow._ident_in_attribute_item712);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(240, 10);
				// SugarCpp.g:240:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==93))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(240, 11);
					char_literal18=(IToken)Match(input,93,Follow._93_in_attribute_item715); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal18);

					DebugLocation(240, 15);
					PushFollow(Follow._attribute_args_in_attribute_item717);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(240, 30);
					// SugarCpp.g:240:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==100))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:31: ',' attribute_args
							{
							DebugLocation(240, 31);
							char_literal20=(IToken)Match(input,100,Follow._100_in_attribute_item720); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal20);

							DebugLocation(240, 35);
							PushFollow(Follow._attribute_args_in_attribute_item722);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(240, 52);
					char_literal22=(IToken)Match(input,94,Follow._94_in_attribute_item726); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(240, 61);
					// SugarCpp.g:240:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(240, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(240, 79);
					// SugarCpp.g:240:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(240, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:241:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(241, 4);
				string_literal23=(IToken)Match(input,141,Follow._141_in_attribute_item744); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal23);

				DebugLocation(241, 12);
				// SugarCpp.g:241:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==93))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(241, 13);
					char_literal24=(IToken)Match(input,93,Follow._93_in_attribute_item747); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal24);

					DebugLocation(241, 17);
					PushFollow(Follow._attribute_args_in_attribute_item749);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(241, 32);
					// SugarCpp.g:241:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==100))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:241:33: ',' attribute_args
							{
							DebugLocation(241, 33);
							char_literal26=(IToken)Match(input,100,Follow._100_in_attribute_item752); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal26);

							DebugLocation(241, 37);
							PushFollow(Follow._attribute_args_in_attribute_item754);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(241, 54);
					char_literal28=(IToken)Match(input,94,Follow._94_in_attribute_item758); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 141
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(241, 63);
					// SugarCpp.g:241:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(241, 75);
					adaptor.AddChild(root_1, stream_141.NextNode());
					DebugLocation(241, 83);
					// SugarCpp.g:241:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(241, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:242:4: 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(242, 4);
				string_literal29=(IToken)Match(input,165,Follow._165_in_attribute_item776); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal29);

				DebugLocation(242, 13);
				// SugarCpp.g:242:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==93))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:242:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(242, 14);
					char_literal30=(IToken)Match(input,93,Follow._93_in_attribute_item779); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal30);

					DebugLocation(242, 18);
					PushFollow(Follow._attribute_args_in_attribute_item781);
					attribute_args31=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args31.Tree);
					DebugLocation(242, 33);
					// SugarCpp.g:242:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==100))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:242:34: ',' attribute_args
							{
							DebugLocation(242, 34);
							char_literal32=(IToken)Match(input,100,Follow._100_in_attribute_item784); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal32);

							DebugLocation(242, 38);
							PushFollow(Follow._attribute_args_in_attribute_item786);
							attribute_args33=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args33.Tree);

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(242, 55);
					char_literal34=(IToken)Match(input,94,Follow._94_in_attribute_item790); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal34);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: attribute_args, 165
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:61: -> ^( Attribute 'static' ( attribute_args )* )
				{
					DebugLocation(242, 64);
					// SugarCpp.g:242:64: ^( Attribute 'static' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(242, 76);
					adaptor.AddChild(root_1, stream_165.NextNode());
					DebugLocation(242, 85);
					// SugarCpp.g:242:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(242, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:243:4: 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(243, 4);
				string_literal35=(IToken)Match(input,162,Follow._162_in_attribute_item808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal35);

				DebugLocation(243, 13);
				// SugarCpp.g:243:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==93))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:243:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(243, 14);
					char_literal36=(IToken)Match(input,93,Follow._93_in_attribute_item811); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal36);

					DebugLocation(243, 18);
					PushFollow(Follow._attribute_args_in_attribute_item813);
					attribute_args37=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args37.Tree);
					DebugLocation(243, 33);
					// SugarCpp.g:243:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==100))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:243:34: ',' attribute_args
							{
							DebugLocation(243, 34);
							char_literal38=(IToken)Match(input,100,Follow._100_in_attribute_item816); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal38);

							DebugLocation(243, 38);
							PushFollow(Follow._attribute_args_in_attribute_item818);
							attribute_args39=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args39.Tree);

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }

					DebugLocation(243, 55);
					char_literal40=(IToken)Match(input,94,Follow._94_in_attribute_item822); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal40);


					}
					break;

				}
				} finally { DebugExitSubRule(13); }



				{
				// AST REWRITE
				// elements: attribute_args, 162
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 243:61: -> ^( Attribute 'public' ( attribute_args )* )
				{
					DebugLocation(243, 64);
					// SugarCpp.g:243:64: ^( Attribute 'public' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(243, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(243, 76);
					adaptor.AddChild(root_1, stream_162.NextNode());
					DebugLocation(243, 85);
					// SugarCpp.g:243:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(243, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:244:4: 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(244, 4);
				string_literal41=(IToken)Match(input,176,Follow._176_in_attribute_item840); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal41);

				DebugLocation(244, 14);
				// SugarCpp.g:244:14: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==93))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:15: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(244, 15);
					char_literal42=(IToken)Match(input,93,Follow._93_in_attribute_item843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal42);

					DebugLocation(244, 19);
					PushFollow(Follow._attribute_args_in_attribute_item845);
					attribute_args43=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args43.Tree);
					DebugLocation(244, 34);
					// SugarCpp.g:244:34: ( ',' attribute_args )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==100))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:244:35: ',' attribute_args
							{
							DebugLocation(244, 35);
							char_literal44=(IToken)Match(input,100,Follow._100_in_attribute_item848); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal44);

							DebugLocation(244, 39);
							PushFollow(Follow._attribute_args_in_attribute_item850);
							attribute_args45=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args45.Tree);

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(244, 56);
					char_literal46=(IToken)Match(input,94,Follow._94_in_attribute_item854); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal46);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }



				{
				// AST REWRITE
				// elements: attribute_args, 176
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 244:62: -> ^( Attribute 'virtual' ( attribute_args )* )
				{
					DebugLocation(244, 65);
					// SugarCpp.g:244:65: ^( Attribute 'virtual' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(244, 67);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(244, 77);
					adaptor.AddChild(root_1, stream_176.NextNode());
					DebugLocation(244, 87);
					// SugarCpp.g:244:87: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(244, 87);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:247:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal47 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		IToken NEWLINE52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree NEWLINE52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(248, 4);
			// SugarCpp.g:248:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==132))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:248:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(248, 5);
					char_literal47=(IToken)Match(input,132,Follow._132_in_attribute879); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal47);

					DebugLocation(248, 9);
					PushFollow(Follow._attribute_item_in_attribute881);
					attribute_item48=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item48.Tree);
					DebugLocation(248, 24);
					// SugarCpp.g:248:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(17);
					while (true)
					{
						int alt17=2;
						try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0==100))
						{
							alt17 = 1;
						}


						} finally { DebugExitDecision(17); }
						switch ( alt17 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:248:25: ',' attribute_item
							{
							DebugLocation(248, 25);
							char_literal49=(IToken)Match(input,100,Follow._100_in_attribute884); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal49);

							DebugLocation(248, 29);
							PushFollow(Follow._attribute_item_in_attribute886);
							attribute_item50=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item50.Tree);

							}
							break;

						default:
							goto loop17;
						}
					}

					loop17:
						;

					} finally { DebugExitSubRule(17); }

					DebugLocation(248, 46);
					char_literal51=(IToken)Match(input,133,Follow._133_in_attribute890); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal51);

					DebugLocation(248, 50);
					// SugarCpp.g:248:50: ( NEWLINE )+
					int cnt18=0;
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_0 = input.LA(1);

						if ((LA18_0==NEWLINE))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch (alt18)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:248:50: NEWLINE
							{
							DebugLocation(248, 50);
							NEWLINE52=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute892); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE52);


							}
							break;

						default:
							if (cnt18 >= 1)
								goto loop18;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee18 = new EarlyExitException( 18, input );
							DebugRecognitionException(eee18);
							throw eee18;
						}
						cnt18++;
					}
					loop18:
						;

					} finally { DebugExitSubRule(18); }


					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:61: -> ( attribute_item )+
			{
				DebugLocation(248, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(248, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:251:1: global_alloc : ( attribute )? ( 'extern' )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken string_literal59 = default(IToken);
		IToken string_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree string_literal59_tree = default(CommonTree);
		CommonTree string_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( ( attribute )? ( 'extern' )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: ( attribute )? ( 'extern' )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(252, 4);
			// SugarCpp.g:252:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==132))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:4: attribute
				{
				DebugLocation(252, 4);
				PushFollow(Follow._attribute_in_global_alloc911);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(252, 15);
			// SugarCpp.g:252:15: ( 'extern' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==146))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:15: 'extern'
				{
				DebugLocation(252, 15);
				string_literal54=(IToken)Match(input,146,Follow._146_in_global_alloc914); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal54);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(252, 25);
			PushFollow(Follow._ident_list_in_global_alloc917);
			ident_list55=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list55.Tree);
			DebugLocation(252, 36);
			// SugarCpp.g:252:36: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==111))
			{
				alt25 = 1;
			}
			else if ((LA25_0==113))
			{
				alt25 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:38: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(252, 38);
				char_literal56=(IToken)Match(input,111,Follow._111_in_global_alloc921); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal56);

				DebugLocation(252, 42);
				PushFollow(Follow._type_name_in_global_alloc923);
				type_name57=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name57.Tree);
				DebugLocation(252, 52);
				// SugarCpp.g:252:52: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) )
				int alt23=3;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				switch (input.LA(1))
				{
				case 113:
				case 121:
					{
					alt23 = 1;
					}
					break;
				case 93:
					{
					alt23 = 2;
					}
					break;
				case NEWLINE:
					{
					alt23 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:252:54: ( '=' | ':=' ) expr
					{
					DebugLocation(252, 54);
					// SugarCpp.g:252:54: ( '=' | ':=' )
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==121))
					{
						alt22 = 1;
					}
					else if ((LA22_0==113))
					{
						alt22 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:55: '='
						{
						DebugLocation(252, 55);
						char_literal58=(IToken)Match(input,121,Follow._121_in_global_alloc928); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal58);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:252:61: ':='
						{
						DebugLocation(252, 61);
						string_literal59=(IToken)Match(input,113,Follow._113_in_global_alloc932); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal59);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(252, 67);
					PushFollow(Follow._expr_in_global_alloc935);
					expr60=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr60.Tree);


					{
					// AST REWRITE
					// elements: ident_list, 146, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 252:72: -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(252, 75);
						// SugarCpp.g:252:75: ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 77);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(252, 94);
						// SugarCpp.g:252:94: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(252, 94);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(252, 105);
						// SugarCpp.g:252:105: ( 'extern' )?
						if (stream_146.HasNext)
						{
							DebugLocation(252, 105);
							adaptor.AddChild(root_1, stream_146.NextNode());

						}
						stream_146.Reset();
						DebugLocation(252, 115);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(252, 125);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(252, 136);
						// SugarCpp.g:252:136: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 138);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(252, 148);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:253:18: bracket_expr_list
					{
					DebugLocation(253, 18);
					PushFollow(Follow._bracket_expr_list_in_global_alloc976);
					bracket_expr_list61=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list61.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_name, 146, ident_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 253:36: -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(253, 39);
						// SugarCpp.g:253:39: ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(253, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(253, 60);
						// SugarCpp.g:253:60: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(253, 60);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(253, 71);
						// SugarCpp.g:253:71: ( 'extern' )?
						if (stream_146.HasNext)
						{
							DebugLocation(253, 71);
							adaptor.AddChild(root_1, stream_146.NextNode());

						}
						stream_146.Reset();
						DebugLocation(253, 81);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(253, 91);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(253, 102);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:254:19: 
					{

					{
					// AST REWRITE
					// elements: attribute, type_name, 146, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 254:19: -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(254, 22);
						// SugarCpp.g:254:22: ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(254, 41);
						// SugarCpp.g:254:41: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(254, 41);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(254, 52);
						// SugarCpp.g:254:52: ( 'extern' )?
						if (stream_146.HasNext)
						{
							DebugLocation(254, 52);
							adaptor.AddChild(root_1, stream_146.NextNode());

						}
						stream_146.Reset();
						DebugLocation(254, 62);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(254, 72);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(254, 83);
						// SugarCpp.g:254:83: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 85);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:256:14: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(256, 14);
				string_literal62=(IToken)Match(input,113,Follow._113_in_global_alloc1066); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal62);

				DebugLocation(256, 19);
				// SugarCpp.g:256:19: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:256:20: expr ( ',' expr )*
				{
				DebugLocation(256, 20);
				PushFollow(Follow._expr_in_global_alloc1069);
				expr63=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr63.Tree);
				DebugLocation(256, 25);
				// SugarCpp.g:256:25: ( ',' expr )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==100))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:26: ',' expr
						{
						DebugLocation(256, 26);
						char_literal64=(IToken)Match(input,100,Follow._100_in_global_alloc1072); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal64);

						DebugLocation(256, 30);
						PushFollow(Follow._expr_in_global_alloc1074);
						expr65=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr65.Tree);

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				}



				{
				// AST REWRITE
				// elements: attribute, expr, ident_list, 146, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 256:38: -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(256, 41);
					// SugarCpp.g:256:41: ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(256, 48);
					// SugarCpp.g:256:48: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(256, 48);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(256, 59);
					// SugarCpp.g:256:59: ( 'extern' )?
					if (stream_146.HasNext)
					{
						DebugLocation(256, 59);
						adaptor.AddChild(root_1, stream_146.NextNode());

					}
					stream_146.Reset();
					DebugLocation(256, 69);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(256, 80);
					// SugarCpp.g:256:80: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 82);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(256, 92);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(256, 92);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:260:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item68 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(260, 1);
		try
		{
			// SugarCpp.g:261:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(261, 4);
			// SugarCpp.g:261:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==132))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:4: attribute
				{
				DebugLocation(261, 4);
				PushFollow(Follow._attribute_in_global_using1122);
				attribute66=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(261, 15);
			string_literal67=(IToken)Match(input,175,Follow._175_in_global_using1125); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_175.Add(string_literal67);

			DebugLocation(261, 23);
			// SugarCpp.g:261:23: ( stmt_using_item )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==IDENT||LA27_0==158))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:261:23: stmt_using_item
					{
					DebugLocation(261, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1127);
					stmt_using_item68=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item68.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(261, 43);
				// SugarCpp.g:261:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(261, 56);
				// SugarCpp.g:261:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(261, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(261, 67);
				// SugarCpp.g:261:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(261, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:264:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal70 = default(IToken);
		IToken char_literal72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(265, 4);
			// SugarCpp.g:265:4: ( attribute )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==132))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:4: attribute
				{
				DebugLocation(265, 4);
				PushFollow(Follow._attribute_in_global_typedef1151);
				attribute69=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(265, 15);
			string_literal70=(IToken)Match(input,172,Follow._172_in_global_typedef1154); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal70);

			DebugLocation(265, 25);
			PushFollow(Follow._ident_in_global_typedef1156);
			ident71=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident71.Tree);
			DebugLocation(265, 31);
			char_literal72=(IToken)Match(input,121,Follow._121_in_global_typedef1158); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal72);

			DebugLocation(265, 35);
			PushFollow(Follow._type_name_in_global_typedef1160);
			type_name73=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name73.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(265, 48);
				// SugarCpp.g:265:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(265, 63);
				// SugarCpp.g:265:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(265, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(265, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(265, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:268:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal75 = default(IToken);
		IToken STRING76 = default(IToken);
		IToken NEWLINE77 = default(IToken);
		IToken INDENT78 = default(IToken);
		IToken NEWLINE79 = default(IToken);
		IToken STRING80 = default(IToken);
		IToken NEWLINE81 = default(IToken);
		IToken DEDENT82 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute74 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal75_tree = default(CommonTree);
		CommonTree STRING76_tree = default(CommonTree);
		CommonTree NEWLINE77_tree = default(CommonTree);
		CommonTree INDENT78_tree = default(CommonTree);
		CommonTree NEWLINE79_tree = default(CommonTree);
		CommonTree STRING80_tree = default(CommonTree);
		CommonTree NEWLINE81_tree = default(CommonTree);
		CommonTree DEDENT82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(269, 4);
			// SugarCpp.g:269:4: ( attribute )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==132))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:4: attribute
				{
				DebugLocation(269, 4);
				PushFollow(Follow._attribute_in_import_def1184);
				attribute74=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute74.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(269, 15);
			string_literal75=(IToken)Match(input,150,Follow._150_in_import_def1187); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_150.Add(string_literal75);

			DebugLocation(269, 24);
			// SugarCpp.g:269:24: ( STRING )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==STRING))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:24: STRING
				{
				DebugLocation(269, 24);
				STRING76=(IToken)Match(input,STRING,Follow._STRING_in_import_def1189); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING76);


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(269, 32);
			// SugarCpp.g:269:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			try
			{
				alt35 = dfa35.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(269, 33);
				// SugarCpp.g:269:33: ( NEWLINE )+
				int cnt31=0;
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==NEWLINE))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:33: NEWLINE
						{
						DebugLocation(269, 33);
						NEWLINE77=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1193); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE77);


						}
						break;

					default:
						if (cnt31 >= 1)
							goto loop31;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee31 = new EarlyExitException( 31, input );
						DebugRecognitionException(eee31);
						throw eee31;
					}
					cnt31++;
				}
				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(269, 42);
				INDENT78=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1196); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT78);

				DebugLocation(269, 49);
				// SugarCpp.g:269:49: ( NEWLINE )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==NEWLINE))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:49: NEWLINE
						{
						DebugLocation(269, 49);
						NEWLINE79=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1198); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE79);


						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(269, 59);
				// SugarCpp.g:269:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==STRING))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:60: STRING ( NEWLINE )+
						{
						DebugLocation(269, 60);
						STRING80=(IToken)Match(input,STRING,Follow._STRING_in_import_def1203); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING80);

						DebugLocation(269, 67);
						// SugarCpp.g:269:67: ( NEWLINE )+
						int cnt33=0;
						try { DebugEnterSubRule(33);
						while (true)
						{
							int alt33=2;
							try { DebugEnterDecision(33, false);
							int LA33_0 = input.LA(1);

							if ((LA33_0==NEWLINE))
							{
								alt33 = 1;
							}


							} finally { DebugExitDecision(33); }
							switch (alt33)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:269:67: NEWLINE
								{
								DebugLocation(269, 67);
								NEWLINE81=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1205); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE81);


								}
								break;

							default:
								if (cnt33 >= 1)
									goto loop33;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee33 = new EarlyExitException( 33, input );
								DebugRecognitionException(eee33);
								throw eee33;
							}
							cnt33++;
						}
						loop33:
							;

						} finally { DebugExitSubRule(33); }


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(269, 78);
				DEDENT82=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1210); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT82);


				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(269, 90);
				// SugarCpp.g:269:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(269, 99);
				// SugarCpp.g:269:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(269, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(269, 110);
				// SugarCpp.g:269:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(269, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:272:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal84 = default(IToken);
		IToken char_literal86 = default(IToken);
		IToken char_literal88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal84_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(272, 1);
		try
		{
			// SugarCpp.g:273:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:273:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(273, 4);
			// SugarCpp.g:273:4: ( attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==132))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:4: attribute
				{
				DebugLocation(273, 4);
				PushFollow(Follow._attribute_in_enum_def1235);
				attribute83=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute83.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(273, 15);
			string_literal84=(IToken)Match(input,145,Follow._145_in_enum_def1238); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_145.Add(string_literal84);

			DebugLocation(273, 22);
			PushFollow(Follow._ident_in_enum_def1240);
			ident85=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident85.Tree);
			DebugLocation(273, 28);
			char_literal86=(IToken)Match(input,121,Follow._121_in_enum_def1242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal86);

			DebugLocation(273, 32);
			// SugarCpp.g:273:32: ( ident ( '|' ident )* )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==IDENT))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:33: ident ( '|' ident )*
				{
				DebugLocation(273, 33);
				PushFollow(Follow._ident_in_enum_def1245);
				ident87=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident87.Tree);
				DebugLocation(273, 39);
				// SugarCpp.g:273:39: ( '|' ident )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==180))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:40: '|' ident
						{
						DebugLocation(273, 40);
						char_literal88=(IToken)Match(input,180,Follow._180_in_enum_def1248); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_180.Add(char_literal88);

						DebugLocation(273, 44);
						PushFollow(Follow._ident_in_enum_def1250);
						ident89=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident89.Tree);

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 273:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(273, 57);
				// SugarCpp.g:273:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(273, 64);
				// SugarCpp.g:273:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(273, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(273, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(273, 81);
				// SugarCpp.g:273:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(273, 94);
				// SugarCpp.g:273:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(273, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:276:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal91 = default(IToken);
		IToken NEWLINE93 = default(IToken);
		IToken INDENT94 = default(IToken);
		IToken NEWLINE95 = default(IToken);
		IToken DEDENT97 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal91_tree = default(CommonTree);
		CommonTree NEWLINE93_tree = default(CommonTree);
		CommonTree INDENT94_tree = default(CommonTree);
		CommonTree NEWLINE95_tree = default(CommonTree);
		CommonTree DEDENT97_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(276, 1);
		try
		{
			// SugarCpp.g:277:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:277:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(277, 4);
			// SugarCpp.g:277:4: ( attribute )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==132))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:4: attribute
				{
				DebugLocation(277, 4);
				PushFollow(Follow._attribute_in_namespace_def1283);
				attribute90=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(277, 15);
			string_literal91=(IToken)Match(input,158,Follow._158_in_namespace_def1286); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_158.Add(string_literal91);

			DebugLocation(277, 27);
			PushFollow(Follow._ident_in_namespace_def1288);
			ident92=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident92.Tree);
			DebugLocation(277, 33);
			// SugarCpp.g:277:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			try
			{
				alt42 = dfa42.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(277, 34);
				// SugarCpp.g:277:34: ( NEWLINE )+
				int cnt40=0;
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==NEWLINE))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:277:34: NEWLINE
						{
						DebugLocation(277, 34);
						NEWLINE93=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1291); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE93);


						}
						break;

					default:
						if (cnt40 >= 1)
							goto loop40;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee40 = new EarlyExitException( 40, input );
						DebugRecognitionException(eee40);
						throw eee40;
					}
					cnt40++;
				}
				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(277, 43);
				INDENT94=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1294); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT94);

				DebugLocation(277, 50);
				// SugarCpp.g:277:50: ( NEWLINE )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if ((LA41_0==NEWLINE))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:277:50: NEWLINE
						{
						DebugLocation(277, 50);
						NEWLINE95=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1296); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE95);


						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(277, 59);
				PushFollow(Follow._global_block_in_namespace_def1299);
				global_block96=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block96.Tree);
				DebugLocation(277, 72);
				DEDENT97=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1301); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT97);


				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: global_block, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 277:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(277, 84);
				// SugarCpp.g:277:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(277, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(277, 96);
				// SugarCpp.g:277:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(277, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(277, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(277, 113);
				// SugarCpp.g:277:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(277, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_args();
	partial void LeaveRule_class_args();

	// $ANTLR start "class_args"
	// SugarCpp.g:280:1: class_args : '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) ) ;
	[GrammarRule("class_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_args()
	{
		EnterRule_class_args();
		EnterRule("class_args", 13);
		TraceIn("class_args", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal101 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args99 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "class_args");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) )
			{
			DebugLocation(281, 4);
			char_literal98=(IToken)Match(input,93,Follow._93_in_class_args1328); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal98);

			DebugLocation(281, 8);
			// SugarCpp.g:281:8: ( func_args ')' -> func_args | ')' -> ^( Func_Args ) )
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==IDENT||LA43_0==113))
			{
				alt43 = 1;
			}
			else if ((LA43_0==94))
			{
				alt43 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:10: func_args ')'
				{
				DebugLocation(281, 10);
				PushFollow(Follow._func_args_in_class_args1332);
				func_args99=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args99.Tree);
				DebugLocation(281, 20);
				char_literal100=(IToken)Match(input,94,Follow._94_in_class_args1334); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal100);



				{
				// AST REWRITE
				// elements: func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:24: -> func_args
				{
					DebugLocation(281, 27);
					adaptor.AddChild(root_0, stream_func_args.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:282:7: ')'
				{
				DebugLocation(282, 7);
				char_literal101=(IToken)Match(input,94,Follow._94_in_class_args1346); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal101);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:11: -> ^( Func_Args )
				{
					DebugLocation(282, 14);
					// SugarCpp.g:282:14: ^( Func_Args )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(282, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_args", 13);
			LeaveRule("class_args", 13);
			LeaveRule_class_args();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "class_args"); }
		return retval;

	}
	// $ANTLR end "class_args"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:286:1: class_def : ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 14);
		TraceIn("class_def", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal103 = default(IToken);
		IToken string_literal104 = default(IToken);
		IToken char_literal108 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken NEWLINE112 = default(IToken);
		IToken INDENT113 = default(IToken);
		IToken NEWLINE114 = default(IToken);
		IToken DEDENT116 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_args107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal103_tree = default(CommonTree);
		CommonTree string_literal104_tree = default(CommonTree);
		CommonTree char_literal108_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree NEWLINE112_tree = default(CommonTree);
		CommonTree INDENT113_tree = default(CommonTree);
		CommonTree NEWLINE114_tree = default(CommonTree);
		CommonTree DEDENT116_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_class_args=new RewriteRuleSubtreeStream(adaptor,"rule class_args");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:5: ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(287, 5);
			// SugarCpp.g:287:5: ( attribute )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==132))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:5: attribute
				{
				DebugLocation(287, 5);
				PushFollow(Follow._attribute_in_class_def1370);
				attribute102=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute102.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(287, 16);
			// SugarCpp.g:287:16: ( 'public' )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==162))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:16: 'public'
				{
				DebugLocation(287, 16);
				string_literal103=(IToken)Match(input,162,Follow._162_in_class_def1373); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal103);


				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(287, 26);
			string_literal104=(IToken)Match(input,140,Follow._140_in_class_def1376); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_140.Add(string_literal104);

			DebugLocation(287, 34);
			PushFollow(Follow._ident_in_class_def1378);
			ident105=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident105.Tree);
			DebugLocation(287, 40);
			// SugarCpp.g:287:40: ( generic_parameter )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==115))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:41: generic_parameter
				{
				DebugLocation(287, 41);
				PushFollow(Follow._generic_parameter_in_class_def1381);
				generic_parameter106=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter106.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(287, 61);
			// SugarCpp.g:287:61: ( class_args )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==93))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:61: class_args
				{
				DebugLocation(287, 61);
				PushFollow(Follow._class_args_in_class_def1385);
				class_args107=class_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_class_args.Add(class_args107.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(287, 73);
			// SugarCpp.g:287:73: ( ':' ident ( ',' ident )* )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==111))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:74: ':' ident ( ',' ident )*
				{
				DebugLocation(287, 74);
				char_literal108=(IToken)Match(input,111,Follow._111_in_class_def1389); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal108);

				DebugLocation(287, 78);
				PushFollow(Follow._ident_in_class_def1391);
				ident109=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident109.Tree);
				DebugLocation(287, 84);
				// SugarCpp.g:287:84: ( ',' ident )*
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=2;
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==100))
					{
						alt48 = 1;
					}


					} finally { DebugExitDecision(48); }
					switch ( alt48 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:287:85: ',' ident
						{
						DebugLocation(287, 85);
						char_literal110=(IToken)Match(input,100,Follow._100_in_class_def1394); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal110);

						DebugLocation(287, 89);
						PushFollow(Follow._ident_in_class_def1396);
						ident111=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident111.Tree);

						}
						break;

					default:
						goto loop48;
					}
				}

				loop48:
					;

				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(287, 99);
			// SugarCpp.g:287:99: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			try
			{
				alt52 = dfa52.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:100: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(287, 100);
				// SugarCpp.g:287:100: ( NEWLINE )+
				int cnt50=0;
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_0 = input.LA(1);

					if ((LA50_0==NEWLINE))
					{
						alt50 = 1;
					}


					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:287:100: NEWLINE
						{
						DebugLocation(287, 100);
						NEWLINE112=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1403); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE112);


						}
						break;

					default:
						if (cnt50 >= 1)
							goto loop50;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee50 = new EarlyExitException( 50, input );
						DebugRecognitionException(eee50);
						throw eee50;
					}
					cnt50++;
				}
				loop50:
					;

				} finally { DebugExitSubRule(50); }

				DebugLocation(287, 109);
				INDENT113=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1406); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT113);

				DebugLocation(287, 116);
				// SugarCpp.g:287:116: ( NEWLINE )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==NEWLINE))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:287:116: NEWLINE
						{
						DebugLocation(287, 116);
						NEWLINE114=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1408); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE114);


						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(287, 125);
				PushFollow(Follow._global_block_in_class_def1411);
				global_block115=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block115.Tree);
				DebugLocation(287, 138);
				DEDENT116=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1413); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT116);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: attribute, ident, class_args, 162, ident, global_block, generic_parameter
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:147: -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(287, 150);
				// SugarCpp.g:287:150: ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 152);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(287, 158);
				// SugarCpp.g:287:158: ( 'public' )?
				if (stream_162.HasNext)
				{
					DebugLocation(287, 158);
					adaptor.AddChild(root_1, stream_162.NextNode());

				}
				stream_162.Reset();
				DebugLocation(287, 168);
				// SugarCpp.g:287:168: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(287, 168);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(287, 179);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(287, 185);
				// SugarCpp.g:287:185: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(287, 185);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(287, 204);
				// SugarCpp.g:287:204: ( class_args )?
				if (stream_class_args.HasNext)
				{
					DebugLocation(287, 204);
					adaptor.AddChild(root_1, stream_class_args.NextTree());

				}
				stream_class_args.Reset();
				DebugLocation(287, 216);
				// SugarCpp.g:287:216: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(287, 217);
					// SugarCpp.g:287:217: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(287, 219);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(287, 230);
					// SugarCpp.g:287:230: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(287, 230);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(287, 240);
				// SugarCpp.g:287:240: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(287, 240);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 14);
			LeaveRule("class_def", 14);
			LeaveRule_class_def();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:290:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 15);
		TraceIn("type_list", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: type_name ( ',' type_name )*
			{
			DebugLocation(291, 4);
			PushFollow(Follow._type_name_in_type_list1459);
			type_name117=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name117.Tree);
			DebugLocation(291, 14);
			// SugarCpp.g:291:14: ( ',' type_name )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==100))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:15: ',' type_name
					{
					DebugLocation(291, 15);
					char_literal118=(IToken)Match(input,100,Follow._100_in_type_list1462); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal118);

					DebugLocation(291, 19);
					PushFollow(Follow._type_name_in_type_list1464);
					type_name119=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name119.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(291, 34);
				// SugarCpp.g:291:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(291, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(291, 46);
				// SugarCpp.g:291:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(291, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 15);
			LeaveRule("type_list", 15);
			LeaveRule_type_list();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:294:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 16);
		TraceIn("type_name", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal121 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken char_literal124 = default(IToken);
		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken string_literal128 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal121_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree string_literal128_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(294, 1);
		try
		{
			// SugarCpp.g:295:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==IDENT||LA58_0==141||LA58_0==155||(LA58_0>=165 && LA58_0<=166)))
			{
				alt58 = 1;
			}
			else if ((LA58_0==93))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:295:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(295, 4);
				PushFollow(Follow._type_single_in_type_name1486);
				type_single120=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single120.Tree);
				DebugLocation(295, 16);
				// SugarCpp.g:295:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==105))
				{
					alt55 = 1;
				}
				else if ((LA55_0==DEDENT||(LA55_0>=IDENT && LA55_0<=INDENT)||LA55_0==NEWLINE||(LA55_0>=93 && LA55_0<=94)||LA55_0==100||(LA55_0>=113 && LA55_0<=114)||LA55_0==121||(LA55_0>=124 && LA55_0<=125)||LA55_0==133||LA55_0==138||LA55_0==143||(LA55_0>=148 && LA55_0<=149)||LA55_0==151||LA55_0==164||(LA55_0>=168 && LA55_0<=170)||(LA55_0>=173 && LA55_0<=174)||(LA55_0>=178 && LA55_0<=179)||LA55_0==184))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:295:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(295, 18);
					string_literal121=(IToken)Match(input,105,Follow._105_in_type_name1490); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal121);

					DebugLocation(295, 23);
					// SugarCpp.g:295:23: ( type_name | '(' ')' )
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==IDENT||LA54_0==141||LA54_0==155||(LA54_0>=165 && LA54_0<=166)))
					{
						alt54 = 1;
					}
					else if ((LA54_0==93))
					{
						int LA54_2 = input.LA(2);

						if ((LA54_2==94))
						{
							int LA54_3 = input.LA(3);

							if ((LA54_3==105))
							{
								alt54 = 1;
							}
							else if ((LA54_3==DEDENT||(LA54_3>=IDENT && LA54_3<=INDENT)||LA54_3==NEWLINE||(LA54_3>=93 && LA54_3<=94)||LA54_3==100||(LA54_3>=113 && LA54_3<=114)||LA54_3==121||(LA54_3>=124 && LA54_3<=125)||LA54_3==133||LA54_3==138||LA54_3==143||(LA54_3>=148 && LA54_3<=149)||LA54_3==151||LA54_3==164||(LA54_3>=168 && LA54_3<=170)||(LA54_3>=173 && LA54_3<=174)||(LA54_3>=178 && LA54_3<=179)||LA54_3==184))
							{
								alt54 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 54, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA54_2==IDENT||LA54_2==93||LA54_2==141||LA54_2==155||(LA54_2>=165 && LA54_2<=166)))
						{
							alt54 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 54, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:295:24: type_name
						{
						DebugLocation(295, 24);
						PushFollow(Follow._type_name_in_type_name1493);
						type_name122=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name122.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:295:36: '(' ')'
						{
						DebugLocation(295, 36);
						char_literal123=(IToken)Match(input,93,Follow._93_in_type_name1497); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal123);

						DebugLocation(295, 40);
						char_literal124=(IToken)Match(input,94,Follow._94_in_type_name1499); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal124);


						}
						break;

					}
					} finally { DebugExitSubRule(54); }



					{
					// AST REWRITE
					// elements: type_name, type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 295:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(295, 48);
						// SugarCpp.g:295:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(295, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(295, 60);
						// SugarCpp.g:295:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(295, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(295, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(295, 85);
						// SugarCpp.g:295:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(295, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:296:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 296:9: -> type_single
					{
						DebugLocation(296, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:298:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(298, 4);
				char_literal125=(IToken)Match(input,93,Follow._93_in_type_name1540); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal125);

				DebugLocation(298, 8);
				// SugarCpp.g:298:8: ( type_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==93||LA56_0==141||LA56_0==155||(LA56_0>=165 && LA56_0<=166)))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:298:8: type_list
					{
					DebugLocation(298, 8);
					PushFollow(Follow._type_list_in_type_name1542);
					type_list126=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list126.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(298, 19);
				char_literal127=(IToken)Match(input,94,Follow._94_in_type_name1545); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal127);

				DebugLocation(298, 23);
				string_literal128=(IToken)Match(input,105,Follow._105_in_type_name1547); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(string_literal128);

				DebugLocation(298, 28);
				// SugarCpp.g:298:28: ( type_name | '(' ')' )
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT||LA57_0==141||LA57_0==155||(LA57_0>=165 && LA57_0<=166)))
				{
					alt57 = 1;
				}
				else if ((LA57_0==93))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==94))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==105))
						{
							alt57 = 1;
						}
						else if ((LA57_3==DEDENT||(LA57_3>=IDENT && LA57_3<=INDENT)||LA57_3==NEWLINE||(LA57_3>=93 && LA57_3<=94)||LA57_3==100||(LA57_3>=113 && LA57_3<=114)||LA57_3==121||(LA57_3>=124 && LA57_3<=125)||LA57_3==133||LA57_3==138||LA57_3==143||(LA57_3>=148 && LA57_3<=149)||LA57_3==151||LA57_3==164||(LA57_3>=168 && LA57_3<=170)||(LA57_3>=173 && LA57_3<=174)||(LA57_3>=178 && LA57_3<=179)||LA57_3==184))
						{
							alt57 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 57, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA57_2==IDENT||LA57_2==93||LA57_2==141||LA57_2==155||(LA57_2>=165 && LA57_2<=166)))
					{
						alt57 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:298:29: type_name
					{
					DebugLocation(298, 29);
					PushFollow(Follow._type_name_in_type_name1550);
					type_name129=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name129.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:298:41: '(' ')'
					{
					DebugLocation(298, 41);
					char_literal130=(IToken)Match(input,93,Follow._93_in_type_name1554); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal130);

					DebugLocation(298, 45);
					char_literal131=(IToken)Match(input,94,Follow._94_in_type_name1556); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal131);


					}
					break;

				}
				} finally { DebugExitSubRule(57); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(298, 53);
					// SugarCpp.g:298:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(298, 65);
					// SugarCpp.g:298:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(298, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(298, 76);
					// SugarCpp.g:298:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(298, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 16);
			LeaveRule("type_name", 16);
			LeaveRule_type_name();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:301:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 17);
		TraceIn("type_single", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal133 = default(IToken);
		IToken char_literal134 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree char_literal134_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(302, 4);
			PushFollow(Follow._type_star_in_type_single1580);
			type_star132=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star132.Tree);
			DebugLocation(302, 14);
			// SugarCpp.g:302:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt62=3;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case 91:
				{
				alt62 = 1;
				}
				break;
			case 132:
				{
				alt62 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case INDENT:
			case NEWLINE:
			case 93:
			case 94:
			case 100:
			case 105:
			case 113:
			case 114:
			case 121:
			case 124:
			case 125:
			case 133:
			case 138:
			case 143:
			case 148:
			case 149:
			case 151:
			case 164:
			case 168:
			case 169:
			case 170:
			case 173:
			case 174:
			case 178:
			case 179:
			case 184:
				{
				alt62 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:302:16: '&'
				{
				DebugLocation(302, 16);
				char_literal133=(IToken)Match(input,91,Follow._91_in_type_single1584); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal133);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(302, 23);
					// SugarCpp.g:302:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(302, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:303:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(303, 7);
				char_literal134=(IToken)Match(input,132,Follow._132_in_type_single1600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal134);

				DebugLocation(303, 11);
				// SugarCpp.g:303:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==NUMBER||LA61_0==STRING||LA61_0==86||LA61_0==91||LA61_0==93||LA61_0==95||(LA61_0>=97 && LA61_0<=98)||(LA61_0>=101 && LA61_0<=102)||(LA61_0>=131 && LA61_0<=132)||LA61_0==154||LA61_0==157||(LA61_0>=159 && LA61_0<=160)||LA61_0==184))
				{
					alt61 = 1;
				}
				else if ((LA61_0==100||LA61_0==133))
				{
					alt61 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:303:13: expr ( ',' expr )* ']'
					{
					DebugLocation(303, 13);
					PushFollow(Follow._expr_in_type_single1604);
					expr135=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr135.Tree);
					DebugLocation(303, 18);
					// SugarCpp.g:303:18: ( ',' expr )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==100))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:303:19: ',' expr
							{
							DebugLocation(303, 19);
							char_literal136=(IToken)Match(input,100,Follow._100_in_type_single1607); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal136);

							DebugLocation(303, 23);
							PushFollow(Follow._expr_in_type_single1609);
							expr137=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr137.Tree);

							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(303, 30);
					char_literal138=(IToken)Match(input,133,Follow._133_in_type_single1613); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal138);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 303:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(303, 37);
						// SugarCpp.g:303:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(303, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(303, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(303, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(303, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:304:13: ( ',' )* ']'
					{
					DebugLocation(304, 13);
					// SugarCpp.g:304:13: ( ',' )*
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==100))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch ( alt60 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:304:13: ','
							{
							DebugLocation(304, 13);
							char_literal139=(IToken)Match(input,100,Follow._100_in_type_single1638); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal139);


							}
							break;

						default:
							goto loop60;
						}
					}

					loop60:
						;

					} finally { DebugExitSubRule(60); }

					DebugLocation(304, 18);
					char_literal140=(IToken)Match(input,133,Follow._133_in_type_single1641); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal140);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 304:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(304, 25);
						// SugarCpp.g:304:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(304, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(304, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(304, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(304, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:306:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:7: -> type_star
				{
					DebugLocation(306, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 17);
			LeaveRule("type_single", 17);
			LeaveRule_type_single();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:310:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 18);
		TraceIn("type_no_array", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal142 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(311, 4);
			PushFollow(Follow._type_star_in_type_no_array1688);
			type_star141=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star141.Tree);
			DebugLocation(311, 14);
			// SugarCpp.g:311:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==91))
			{
				alt63 = 1;
			}
			else if ((LA63_0==93||LA63_0==132))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:16: '&'
				{
				DebugLocation(311, 16);
				char_literal142=(IToken)Match(input,91,Follow._91_in_type_no_array1692); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal142);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(311, 23);
					// SugarCpp.g:311:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(311, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:7: -> type_star
				{
					DebugLocation(312, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 18);
			LeaveRule("type_no_array", 18);
			LeaveRule_type_no_array();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:316:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 19);
		TraceIn("type_star", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type143 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(317, 4);
			PushFollow(Follow._type_template_type_in_type_star1727);
			type_template_type143=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type143.Tree);
			DebugLocation(317, 23);
			// SugarCpp.g:317:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==95))
			{
				alt65 = 1;
			}
			else if ((LA65_0==DEDENT||(LA65_0>=IDENT && LA65_0<=INDENT)||LA65_0==NEWLINE||LA65_0==91||(LA65_0>=93 && LA65_0<=94)||LA65_0==100||LA65_0==105||(LA65_0>=113 && LA65_0<=114)||LA65_0==121||(LA65_0>=124 && LA65_0<=125)||(LA65_0>=132 && LA65_0<=133)||LA65_0==138||LA65_0==143||(LA65_0>=148 && LA65_0<=149)||LA65_0==151||LA65_0==164||(LA65_0>=168 && LA65_0<=170)||(LA65_0>=173 && LA65_0<=174)||(LA65_0>=178 && LA65_0<=179)||LA65_0==184))
			{
				alt65 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:25: ( '*' )+
				{
				DebugLocation(317, 25);
				// SugarCpp.g:317:25: ( '*' )+
				int cnt64=0;
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==95))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:317:25: '*'
						{
						DebugLocation(317, 25);
						char_literal144=(IToken)Match(input,95,Follow._95_in_type_star1731); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_95.Add(char_literal144);


						}
						break;

					default:
						if (cnt64 >= 1)
							goto loop64;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee64 = new EarlyExitException( 64, input );
						DebugRecognitionException(eee64);
						throw eee64;
					}
					cnt64++;
				}
				loop64:
					;

				} finally { DebugExitSubRule(64); }



				{
				// AST REWRITE
				// elements: type_template_type, 95
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(317, 33);
					// SugarCpp.g:317:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(317, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(317, 64);
					if (!(stream_95.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_95.HasNext )
					{
						DebugLocation(317, 64);
						adaptor.AddChild(root_1, stream_95.NextNode());

					}
					stream_95.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:318:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 318:10: -> type_template_type
				{
					DebugLocation(318, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 19);
			LeaveRule("type_star", 19);
			LeaveRule_type_star();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:322:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 20);
		TraceIn("type_template_type", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken char_literal150 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		CommonTree char_literal150_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(322, 1);
		try
		{
			// SugarCpp.g:323:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(323, 4);
			PushFollow(Follow._type_ident_in_type_template_type1777);
			type_ident145=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident145.Tree);
			DebugLocation(323, 15);
			// SugarCpp.g:323:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==115))
			{
				alt68 = 1;
			}
			else if ((LA68_0==DEDENT||(LA68_0>=IDENT && LA68_0<=INDENT)||LA68_0==NEWLINE||LA68_0==91||(LA68_0>=93 && LA68_0<=95)||LA68_0==100||LA68_0==105||(LA68_0>=113 && LA68_0<=114)||LA68_0==121||(LA68_0>=124 && LA68_0<=125)||(LA68_0>=132 && LA68_0<=133)||LA68_0==138||LA68_0==143||(LA68_0>=148 && LA68_0<=149)||LA68_0==151||LA68_0==164||(LA68_0>=168 && LA68_0<=170)||(LA68_0>=173 && LA68_0<=174)||(LA68_0>=178 && LA68_0<=179)||LA68_0==184))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(323, 17);
				char_literal146=(IToken)Match(input,115,Follow._115_in_type_template_type1781); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(char_literal146);

				DebugLocation(323, 21);
				// SugarCpp.g:323:21: ( type_name ( ',' type_name )* )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==93||LA67_0==141||LA67_0==155||(LA67_0>=165 && LA67_0<=166)))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:323:22: type_name ( ',' type_name )*
					{
					DebugLocation(323, 22);
					PushFollow(Follow._type_name_in_type_template_type1784);
					type_name147=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name147.Tree);
					DebugLocation(323, 32);
					// SugarCpp.g:323:32: ( ',' type_name )*
					try { DebugEnterSubRule(66);
					while (true)
					{
						int alt66=2;
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==100))
						{
							alt66 = 1;
						}


						} finally { DebugExitDecision(66); }
						switch ( alt66 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:323:33: ',' type_name
							{
							DebugLocation(323, 33);
							char_literal148=(IToken)Match(input,100,Follow._100_in_type_template_type1787); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal148);

							DebugLocation(323, 37);
							PushFollow(Follow._type_name_in_type_template_type1789);
							type_name149=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name149.Tree);

							}
							break;

						default:
							goto loop66;
						}
					}

					loop66:
						;

					} finally { DebugExitSubRule(66); }


					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(323, 51);
				char_literal150=(IToken)Match(input,125,Follow._125_in_type_template_type1795); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal150);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 323:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(323, 58);
					// SugarCpp.g:323:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(323, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(323, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(323, 85);
					// SugarCpp.g:323:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(323, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:324:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:8: -> type_ident
				{
					DebugLocation(324, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 20);
			LeaveRule("type_template_type", 20);
			LeaveRule_type_template_type();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:328:1: type_ident : ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 21);
		TraceIn("type_ident", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal151 = default(IToken);
		IToken string_literal152 = default(IToken);
		IToken string_literal153 = default(IToken);
		IToken string_literal154 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident155 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal151_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree string_literal153_tree = default(CommonTree);
		CommonTree string_literal154_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(329, 4);
			// SugarCpp.g:329:4: ( 'static' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==165))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:4: 'static'
				{
				DebugLocation(329, 4);
				string_literal151=(IToken)Match(input,165,Follow._165_in_type_ident1835); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal151);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(329, 14);
			// SugarCpp.g:329:14: ( 'const' )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==141))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:14: 'const'
				{
				DebugLocation(329, 14);
				string_literal152=(IToken)Match(input,141,Follow._141_in_type_ident1838); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal152);


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(329, 23);
			// SugarCpp.g:329:23: ( 'struct' )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==166))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:23: 'struct'
				{
				DebugLocation(329, 23);
				string_literal153=(IToken)Match(input,166,Follow._166_in_type_ident1841); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal153);


				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(329, 33);
			// SugarCpp.g:329:33: ( 'long' )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==155))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:33: 'long'
				{
				DebugLocation(329, 33);
				string_literal154=(IToken)Match(input,155,Follow._155_in_type_ident1844); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_155.Add(string_literal154);


				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(329, 41);
			PushFollow(Follow._ident_in_type_ident1847);
			ident155=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident155.Tree);


			{
			// AST REWRITE
			// elements: ident, 141, 165, 155, 166
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:47: -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(329, 50);
				// SugarCpp.g:329:50: ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 52);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(329, 63);
				// SugarCpp.g:329:63: ( 'static' )?
				if (stream_165.HasNext)
				{
					DebugLocation(329, 63);
					adaptor.AddChild(root_1, stream_165.NextNode());

				}
				stream_165.Reset();
				DebugLocation(329, 73);
				// SugarCpp.g:329:73: ( 'const' )?
				if (stream_141.HasNext)
				{
					DebugLocation(329, 73);
					adaptor.AddChild(root_1, stream_141.NextNode());

				}
				stream_141.Reset();
				DebugLocation(329, 82);
				// SugarCpp.g:329:82: ( 'struct' )?
				if (stream_166.HasNext)
				{
					DebugLocation(329, 82);
					adaptor.AddChild(root_1, stream_166.NextNode());

				}
				stream_166.Reset();
				DebugLocation(329, 92);
				// SugarCpp.g:329:92: ( 'long' )?
				if (stream_155.HasNext)
				{
					DebugLocation(329, 92);
					adaptor.AddChild(root_1, stream_155.NextNode());

				}
				stream_155.Reset();
				DebugLocation(329, 100);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 21);
			LeaveRule("type_ident", 21);
			LeaveRule_type_ident();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:332:1: generic_parameter_inside : type_name ( ',' type_name )* -> ^( Generic_Patameters ( type_name )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 22);
		TraceIn("generic_parameter_inside", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name158 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( type_name ( ',' type_name )* -> ^( Generic_Patameters ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: type_name ( ',' type_name )*
			{
			DebugLocation(333, 4);
			PushFollow(Follow._type_name_in_generic_parameter_inside1878);
			type_name156=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name156.Tree);
			DebugLocation(333, 14);
			// SugarCpp.g:333:14: ( ',' type_name )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==100))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:15: ',' type_name
					{
					DebugLocation(333, 15);
					char_literal157=(IToken)Match(input,100,Follow._100_in_generic_parameter_inside1881); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal157);

					DebugLocation(333, 19);
					PushFollow(Follow._type_name_in_generic_parameter_inside1883);
					type_name158=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name158.Tree);

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:31: -> ^( Generic_Patameters ( type_name )* )
			{
				DebugLocation(333, 34);
				// SugarCpp.g:333:34: ^( Generic_Patameters ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(333, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(333, 55);
				// SugarCpp.g:333:55: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(333, 55);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 22);
			LeaveRule("generic_parameter_inside", 22);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:336:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:337:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(337, 4);
			char_literal159=(IToken)Match(input,115,Follow._115_in_generic_parameter1905); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(char_literal159);

			DebugLocation(337, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1907);
			generic_parameter_inside160=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside160.Tree);
			DebugLocation(337, 33);
			char_literal161=(IToken)Match(input,125,Follow._125_in_generic_parameter1909); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(char_literal161);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 337:37: -> generic_parameter_inside
			{
				DebugLocation(337, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_generic_parameter_ident();
	partial void LeaveRule_generic_parameter_ident();

	// $ANTLR start "generic_parameter_ident"
	// SugarCpp.g:340:1: generic_parameter_ident : '<' type_ident ( ',' type_ident )* '>' -> ^( Generic_Patameters ( type_ident )* ) ;
	[GrammarRule("generic_parameter_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_ident()
	{
		EnterRule_generic_parameter_ident();
		EnterRule("generic_parameter_ident", 24);
		TraceIn("generic_parameter_ident", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal162 = default(IToken);
		IToken char_literal164 = default(IToken);
		IToken char_literal166 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal162_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		CommonTree char_literal166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_ident");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( '<' type_ident ( ',' type_ident )* '>' -> ^( Generic_Patameters ( type_ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:341:4: '<' type_ident ( ',' type_ident )* '>'
			{
			DebugLocation(341, 4);
			char_literal162=(IToken)Match(input,115,Follow._115_in_generic_parameter_ident1924); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(char_literal162);

			DebugLocation(341, 8);
			PushFollow(Follow._type_ident_in_generic_parameter_ident1926);
			type_ident163=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident163.Tree);
			DebugLocation(341, 19);
			// SugarCpp.g:341:19: ( ',' type_ident )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==100))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:341:20: ',' type_ident
					{
					DebugLocation(341, 20);
					char_literal164=(IToken)Match(input,100,Follow._100_in_generic_parameter_ident1929); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal164);

					DebugLocation(341, 24);
					PushFollow(Follow._type_ident_in_generic_parameter_ident1931);
					type_ident165=type_ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_ident.Add(type_ident165.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(341, 37);
			char_literal166=(IToken)Match(input,125,Follow._125_in_generic_parameter_ident1935); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(char_literal166);



			{
			// AST REWRITE
			// elements: type_ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:41: -> ^( Generic_Patameters ( type_ident )* )
			{
				DebugLocation(341, 44);
				// SugarCpp.g:341:44: ^( Generic_Patameters ( type_ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(341, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(341, 65);
				// SugarCpp.g:341:65: ( type_ident )*
				while ( stream_type_ident.HasNext )
				{
					DebugLocation(341, 65);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());

				}
				stream_type_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_ident", 24);
			LeaveRule("generic_parameter_ident", 24);
			LeaveRule_generic_parameter_ident();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_ident"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_ident"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:344:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 25);
		TraceIn("func_args", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:345:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(345, 4);
			PushFollow(Follow._func_args_item_in_func_args1955);
			func_args_item167=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item167.Tree);
			DebugLocation(345, 19);
			// SugarCpp.g:345:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==100))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:345:20: ',' func_args_item
					{
					DebugLocation(345, 20);
					char_literal168=(IToken)Match(input,100,Follow._100_in_func_args1958); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal168);

					DebugLocation(345, 24);
					PushFollow(Follow._func_args_item_in_func_args1960);
					func_args_item169=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item169.Tree);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 345:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(345, 44);
				// SugarCpp.g:345:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(345, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(345, 56);
				// SugarCpp.g:345:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(345, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 25);
			LeaveRule("func_args", 25);
			LeaveRule_func_args();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:348:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 26);
		TraceIn("func_args_item", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal171 = default(IToken);
		IToken char_literal173 = default(IToken);
		IToken string_literal174 = default(IToken);
		IToken string_literal177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal171_tree = default(CommonTree);
		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(348, 1);
		try
		{
			// SugarCpp.g:349:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENT))
			{
				alt78 = 1;
			}
			else if ((LA78_0==113))
			{
				alt78 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:349:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(349, 4);
				PushFollow(Follow._ident_list_in_func_args_item1982);
				ident_list170=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list170.Tree);
				DebugLocation(349, 15);
				char_literal171=(IToken)Match(input,111,Follow._111_in_func_args_item1984); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal171);

				DebugLocation(349, 19);
				PushFollow(Follow._type_name_in_func_args_item1986);
				type_name172=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name172.Tree);
				DebugLocation(349, 29);
				// SugarCpp.g:349:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt77=3;
				try { DebugEnterSubRule(77);
				try { DebugEnterDecision(77, false);
				switch (input.LA(1))
				{
				case 113:
				case 121:
					{
					alt77 = 1;
					}
					break;
				case 93:
					{
					alt77 = 2;
					}
					break;
				case 94:
				case 100:
					{
					alt77 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(77); }
				switch (alt77)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:349:31: ( '=' | ':=' ) expr
					{
					DebugLocation(349, 31);
					// SugarCpp.g:349:31: ( '=' | ':=' )
					int alt76=2;
					try { DebugEnterSubRule(76);
					try { DebugEnterDecision(76, false);
					int LA76_0 = input.LA(1);

					if ((LA76_0==121))
					{
						alt76 = 1;
					}
					else if ((LA76_0==113))
					{
						alt76 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(76); }
					switch (alt76)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:349:32: '='
						{
						DebugLocation(349, 32);
						char_literal173=(IToken)Match(input,121,Follow._121_in_func_args_item1991); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal173);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:349:38: ':='
						{
						DebugLocation(349, 38);
						string_literal174=(IToken)Match(input,113,Follow._113_in_func_args_item1995); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal174);


						}
						break;

					}
					} finally { DebugExitSubRule(76); }

					DebugLocation(349, 44);
					PushFollow(Follow._expr_in_func_args_item1998);
					expr175=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr175.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 349:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(349, 53);
						// SugarCpp.g:349:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(349, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(349, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(349, 93);
						// SugarCpp.g:349:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(349, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:350:33: bracket_expr_list
					{
					DebugLocation(350, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item2049);
					bracket_expr_list176=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list176.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 350:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(350, 55);
						// SugarCpp.g:350:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(350, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(350, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(350, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(350, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:351:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 351:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(351, 18);
						// SugarCpp.g:351:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(351, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(351, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(351, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(351, 58);
						// SugarCpp.g:351:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(351, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(77); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:353:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(353, 8);
				string_literal177=(IToken)Match(input,113,Follow._113_in_func_args_item2109); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal177_tree = (CommonTree)adaptor.Create(string_literal177);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal177_tree, root_0);
				}
				DebugLocation(353, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2113);
				modify_expr178=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr178.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 26);
			LeaveRule("func_args_item", 26);
			LeaveRule_func_args_item();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:356:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 27);
		TraceIn("operator", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set179 = default(IToken);

		CommonTree set179_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(357, 2);

			set179=(IToken)input.LT(1);
			if (input.LA(1)==95||input.LA(1)==97||input.LA(1)==101||input.LA(1)==109)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set179));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 27);
			LeaveRule("operator", 27);
			LeaveRule_operator();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:360:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 28);
		TraceIn("func_name", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt79=2;
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==IDENT))
			{
				alt79 = 1;
			}
			else if ((LA79_0==93))
			{
				alt79 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 79, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:4: ident
				{
				DebugLocation(361, 4);
				PushFollow(Follow._ident_in_func_name2147);
				ident180=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident180.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 361:10: -> ident
				{
					DebugLocation(361, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:362:4: '(' operator ')'
				{
				DebugLocation(362, 4);
				char_literal181=(IToken)Match(input,93,Follow._93_in_func_name2156); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal181);

				DebugLocation(362, 8);
				PushFollow(Follow._operator_in_func_name2158);
				operator182=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator182.Tree);
				DebugLocation(362, 17);
				char_literal183=(IToken)Match(input,94,Follow._94_in_func_name2160); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal183);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 362:21: -> operator
				{
					DebugLocation(362, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 28);
			LeaveRule("func_name", 28);
			LeaveRule_func_name();
		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:365:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 29);
		TraceIn("func_type", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(365, 1);
		try
		{
			// SugarCpp.g:366:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:366:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(366, 4);
			PushFollow(Follow._type_name_in_func_type2175);
			type_name184=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name184.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 29);
			LeaveRule("func_type", 29);
			LeaveRule_func_type();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:369:1: func_def : ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 30);
		TraceIn("func_def", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal186 = default(IToken);
		IToken string_literal187 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken char_literal192 = default(IToken);
		IToken char_literal194 = default(IToken);
		IToken NEWLINE195 = default(IToken);
		IToken char_literal197 = default(IToken);
		IToken NEWLINE199 = default(IToken);
		IToken INDENT200 = default(IToken);
		IToken NEWLINE201 = default(IToken);
		IToken NEWLINE203 = default(IToken);
		IToken DEDENT204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_ident191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item202 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal186_tree = default(CommonTree);
		CommonTree string_literal187_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		CommonTree char_literal194_tree = default(CommonTree);
		CommonTree NEWLINE195_tree = default(CommonTree);
		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree NEWLINE199_tree = default(CommonTree);
		CommonTree INDENT200_tree = default(CommonTree);
		CommonTree NEWLINE201_tree = default(CommonTree);
		CommonTree NEWLINE203_tree = default(CommonTree);
		CommonTree DEDENT204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter_ident=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_ident");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(369, 4);
		try
		{
			// SugarCpp.g:370:2: ( ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:370:4: ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) )
			{
			DebugLocation(370, 4);
			// SugarCpp.g:370:4: ( attribute )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==132))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:4: attribute
				{
				DebugLocation(370, 4);
				PushFollow(Follow._attribute_in_func_def2186);
				attribute185=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(370, 15);
			// SugarCpp.g:370:15: ( 'public' )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==162))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:15: 'public'
				{
				DebugLocation(370, 15);
				string_literal186=(IToken)Match(input,162,Follow._162_in_func_def2189); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal186);


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(370, 25);
			// SugarCpp.g:370:25: ( 'virtual' )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==176))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:25: 'virtual'
				{
				DebugLocation(370, 25);
				string_literal187=(IToken)Match(input,176,Follow._176_in_func_def2192); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal187);


				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(370, 36);
			// SugarCpp.g:370:36: ( func_type )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			try
			{
				alt83 = dfa83.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:36: func_type
				{
				DebugLocation(370, 36);
				PushFollow(Follow._func_type_in_func_def2195);
				func_type188=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type188.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(370, 47);
			// SugarCpp.g:370:47: ( '~' )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==184))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:47: '~'
				{
				DebugLocation(370, 47);
				char_literal189=(IToken)Match(input,184,Follow._184_in_func_def2198); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal189);


				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(370, 52);
			PushFollow(Follow._func_name_in_func_def2201);
			func_name190=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name190.Tree);
			DebugLocation(370, 62);
			// SugarCpp.g:370:62: ( generic_parameter_ident )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==115))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:62: generic_parameter_ident
				{
				DebugLocation(370, 62);
				PushFollow(Follow._generic_parameter_ident_in_func_def2203);
				generic_parameter_ident191=generic_parameter_ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter_ident.Add(generic_parameter_ident191.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(370, 87);
			char_literal192=(IToken)Match(input,93,Follow._93_in_func_def2206); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal192);

			DebugLocation(370, 91);
			// SugarCpp.g:370:91: ( func_args )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_0 = input.LA(1);

			if ((LA86_0==IDENT||LA86_0==113))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:91: func_args
				{
				DebugLocation(370, 91);
				PushFollow(Follow._func_args_in_func_def2208);
				func_args193=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args193.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(370, 102);
			char_literal194=(IToken)Match(input,94,Follow._94_in_func_def2211); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(char_literal194);

			DebugLocation(370, 106);
			// SugarCpp.g:370:106: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) )
			int alt93=3;
			try { DebugEnterSubRule(93);
			try { DebugEnterDecision(93, false);
			try
			{
				alt93 = dfa93.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:370:108: ( NEWLINE )+ stmt_block
				{
				DebugLocation(370, 108);
				// SugarCpp.g:370:108: ( NEWLINE )+
				int cnt87=0;
				try { DebugEnterSubRule(87);
				while (true)
				{
					int alt87=2;
					try { DebugEnterDecision(87, false);
					int LA87_0 = input.LA(1);

					if ((LA87_0==NEWLINE))
					{
						alt87 = 1;
					}


					} finally { DebugExitDecision(87); }
					switch (alt87)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:370:108: NEWLINE
						{
						DebugLocation(370, 108);
						NEWLINE195=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2215); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE195);


						}
						break;

					default:
						if (cnt87 >= 1)
							goto loop87;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee87 = new EarlyExitException( 87, input );
						DebugRecognitionException(eee87);
						throw eee87;
					}
					cnt87++;
				}
				loop87:
					;

				} finally { DebugExitSubRule(87); }

				DebugLocation(370, 117);
				PushFollow(Follow._stmt_block_in_func_def2218);
				stmt_block196=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block196.Tree);


				{
				// AST REWRITE
				// elements: func_type, 176, stmt_block, generic_parameter_ident, func_name, 184, func_args, 162, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 370:128: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block )
				{
					DebugLocation(370, 131);
					// SugarCpp.g:370:131: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(370, 133);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(370, 142);
					// SugarCpp.g:370:142: ( 'public' )?
					if (stream_162.HasNext)
					{
						DebugLocation(370, 142);
						adaptor.AddChild(root_1, stream_162.NextNode());

					}
					stream_162.Reset();
					DebugLocation(370, 152);
					// SugarCpp.g:370:152: ( 'virtual' )?
					if (stream_176.HasNext)
					{
						DebugLocation(370, 152);
						adaptor.AddChild(root_1, stream_176.NextNode());

					}
					stream_176.Reset();
					DebugLocation(370, 163);
					// SugarCpp.g:370:163: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(370, 163);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(370, 174);
					// SugarCpp.g:370:174: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(370, 174);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(370, 185);
					// SugarCpp.g:370:185: ( '~' )?
					if (stream_184.HasNext)
					{
						DebugLocation(370, 185);
						adaptor.AddChild(root_1, stream_184.NextNode());

					}
					stream_184.Reset();
					DebugLocation(370, 190);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(370, 200);
					// SugarCpp.g:370:200: ( generic_parameter_ident )?
					if (stream_generic_parameter_ident.HasNext)
					{
						DebugLocation(370, 200);
						adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

					}
					stream_generic_parameter_ident.Reset();
					DebugLocation(370, 225);
					// SugarCpp.g:370:225: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(370, 225);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(370, 236);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:371:36: '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(371, 36);
				char_literal197=(IToken)Match(input,121,Follow._121_in_func_def2286); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_121.Add(char_literal197);

				DebugLocation(371, 40);
				// SugarCpp.g:371:40: ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, false);
				int LA92_0 = input.LA(1);

				if ((LA92_0==IDENT||LA92_0==NUMBER||LA92_0==STRING||LA92_0==86||LA92_0==91||LA92_0==93||LA92_0==95||(LA92_0>=97 && LA92_0<=98)||(LA92_0>=101 && LA92_0<=102)||(LA92_0>=131 && LA92_0<=132)||LA92_0==154||LA92_0==157||(LA92_0>=159 && LA92_0<=160)||LA92_0==184))
				{
					alt92 = 1;
				}
				else if ((LA92_0==NEWLINE))
				{
					alt92 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:371:42: where_expr
					{
					DebugLocation(371, 42);
					PushFollow(Follow._where_expr_in_func_def2290);
					where_expr198=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr198.Tree);


					{
					// AST REWRITE
					// elements: func_type, 176, where_expr, 162, attribute, generic_parameter_ident, func_args, 184, func_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:54: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr )
					{
						DebugLocation(371, 57);
						// SugarCpp.g:371:57: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 59);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(371, 68);
						// SugarCpp.g:371:68: ( 'public' )?
						if (stream_162.HasNext)
						{
							DebugLocation(371, 68);
							adaptor.AddChild(root_1, stream_162.NextNode());

						}
						stream_162.Reset();
						DebugLocation(371, 78);
						// SugarCpp.g:371:78: ( 'virtual' )?
						if (stream_176.HasNext)
						{
							DebugLocation(371, 78);
							adaptor.AddChild(root_1, stream_176.NextNode());

						}
						stream_176.Reset();
						DebugLocation(371, 89);
						// SugarCpp.g:371:89: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(371, 89);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(371, 100);
						// SugarCpp.g:371:100: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(371, 100);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(371, 111);
						// SugarCpp.g:371:111: ( '~' )?
						if (stream_184.HasNext)
						{
							DebugLocation(371, 111);
							adaptor.AddChild(root_1, stream_184.NextNode());

						}
						stream_184.Reset();
						DebugLocation(371, 116);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(371, 126);
						// SugarCpp.g:371:126: ( generic_parameter_ident )?
						if (stream_generic_parameter_ident.HasNext)
						{
							DebugLocation(371, 126);
							adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

						}
						stream_generic_parameter_ident.Reset();
						DebugLocation(371, 151);
						// SugarCpp.g:371:151: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(371, 151);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(371, 162);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:372:36: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(372, 36);
					// SugarCpp.g:372:36: ( NEWLINE )+
					int cnt88=0;
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==NEWLINE))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch (alt88)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:372:36: NEWLINE
							{
							DebugLocation(372, 36);
							NEWLINE199=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2359); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE199);


							}
							break;

						default:
							if (cnt88 >= 1)
								goto loop88;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee88 = new EarlyExitException( 88, input );
							DebugRecognitionException(eee88);
							throw eee88;
						}
						cnt88++;
					}
					loop88:
						;

					} finally { DebugExitSubRule(88); }

					DebugLocation(372, 45);
					INDENT200=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2362); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT200);

					DebugLocation(372, 52);
					// SugarCpp.g:372:52: ( NEWLINE )*
					try { DebugEnterSubRule(89);
					while (true)
					{
						int alt89=2;
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==NEWLINE))
						{
							alt89 = 1;
						}


						} finally { DebugExitDecision(89); }
						switch ( alt89 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:372:52: NEWLINE
							{
							DebugLocation(372, 52);
							NEWLINE201=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2364); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE201);


							}
							break;

						default:
							goto loop89;
						}
					}

					loop89:
						;

					} finally { DebugExitSubRule(89); }

					DebugLocation(372, 61);
					// SugarCpp.g:372:61: ( match_item ( NEWLINE )+ )+
					int cnt91=0;
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						int LA91_0 = input.LA(1);

						if ((LA91_0==180))
						{
							alt91 = 1;
						}


						} finally { DebugExitDecision(91); }
						switch (alt91)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:372:62: match_item ( NEWLINE )+
							{
							DebugLocation(372, 62);
							PushFollow(Follow._match_item_in_func_def2368);
							match_item202=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item202.Tree);
							DebugLocation(372, 73);
							// SugarCpp.g:372:73: ( NEWLINE )+
							int cnt90=0;
							try { DebugEnterSubRule(90);
							while (true)
							{
								int alt90=2;
								try { DebugEnterDecision(90, false);
								int LA90_0 = input.LA(1);

								if ((LA90_0==NEWLINE))
								{
									alt90 = 1;
								}


								} finally { DebugExitDecision(90); }
								switch (alt90)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:372:73: NEWLINE
									{
									DebugLocation(372, 73);
									NEWLINE203=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2370); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE203);


									}
									break;

								default:
									if (cnt90 >= 1)
										goto loop90;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee90 = new EarlyExitException( 90, input );
									DebugRecognitionException(eee90);
									throw eee90;
								}
								cnt90++;
							}
							loop90:
								;

							} finally { DebugExitSubRule(90); }


							}
							break;

						default:
							if (cnt91 >= 1)
								goto loop91;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee91 = new EarlyExitException( 91, input );
							DebugRecognitionException(eee91);
							throw eee91;
						}
						cnt91++;
					}
					loop91:
						;

					} finally { DebugExitSubRule(91); }

					DebugLocation(372, 84);
					DEDENT204=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2375); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT204);



					{
					// AST REWRITE
					// elements: attribute, 176, match_item, generic_parameter_ident, func_type, func_name, 162, func_args, 184
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 372:91: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(372, 94);
						// SugarCpp.g:372:94: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(372, 96);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(372, 105);
						// SugarCpp.g:372:105: ( 'public' )?
						if (stream_162.HasNext)
						{
							DebugLocation(372, 105);
							adaptor.AddChild(root_1, stream_162.NextNode());

						}
						stream_162.Reset();
						DebugLocation(372, 115);
						// SugarCpp.g:372:115: ( 'virtual' )?
						if (stream_176.HasNext)
						{
							DebugLocation(372, 115);
							adaptor.AddChild(root_1, stream_176.NextNode());

						}
						stream_176.Reset();
						DebugLocation(372, 126);
						// SugarCpp.g:372:126: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(372, 126);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(372, 137);
						// SugarCpp.g:372:137: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(372, 137);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(372, 148);
						// SugarCpp.g:372:148: ( '~' )?
						if (stream_184.HasNext)
						{
							DebugLocation(372, 148);
							adaptor.AddChild(root_1, stream_184.NextNode());

						}
						stream_184.Reset();
						DebugLocation(372, 153);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(372, 163);
						// SugarCpp.g:372:163: ( generic_parameter_ident )?
						if (stream_generic_parameter_ident.HasNext)
						{
							DebugLocation(372, 163);
							adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

						}
						stream_generic_parameter_ident.Reset();
						DebugLocation(372, 188);
						// SugarCpp.g:372:188: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(372, 188);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(372, 199);
						// SugarCpp.g:372:199: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(372, 201);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(372, 212);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(372, 212);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(92); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:374:36: 
				{

				{
				// AST REWRITE
				// elements: 184, 176, generic_parameter_ident, 162, func_args, func_name, func_type, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 374:36: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare )
				{
					DebugLocation(374, 39);
					// SugarCpp.g:374:39: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(374, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(374, 50);
					// SugarCpp.g:374:50: ( 'public' )?
					if (stream_162.HasNext)
					{
						DebugLocation(374, 50);
						adaptor.AddChild(root_1, stream_162.NextNode());

					}
					stream_162.Reset();
					DebugLocation(374, 60);
					// SugarCpp.g:374:60: ( 'virtual' )?
					if (stream_176.HasNext)
					{
						DebugLocation(374, 60);
						adaptor.AddChild(root_1, stream_176.NextNode());

					}
					stream_176.Reset();
					DebugLocation(374, 71);
					// SugarCpp.g:374:71: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(374, 71);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(374, 82);
					// SugarCpp.g:374:82: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(374, 82);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(374, 93);
					// SugarCpp.g:374:93: ( '~' )?
					if (stream_184.HasNext)
					{
						DebugLocation(374, 93);
						adaptor.AddChild(root_1, stream_184.NextNode());

					}
					stream_184.Reset();
					DebugLocation(374, 98);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(374, 108);
					// SugarCpp.g:374:108: ( generic_parameter_ident )?
					if (stream_generic_parameter_ident.HasNext)
					{
						DebugLocation(374, 108);
						adaptor.AddChild(root_1, stream_generic_parameter_ident.NextTree());

					}
					stream_generic_parameter_ident.Reset();
					DebugLocation(374, 133);
					// SugarCpp.g:374:133: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(374, 133);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(374, 144);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(Func_Declare, "Func_Declare"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 30);
			LeaveRule("func_def", 30);
			LeaveRule_func_def();
		}
		DebugLocation(376, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:378:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 31);
		TraceIn("stmt_block_item", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE206 = default(IToken);
		IToken NEWLINE208 = default(IToken);
		IToken char_literal209 = default(IToken);
		IToken NEWLINE210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE206_tree = default(CommonTree);
		CommonTree NEWLINE208_tree = default(CommonTree);
		CommonTree char_literal209_tree = default(CommonTree);
		CommonTree NEWLINE210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(378, 1);
		try
		{
			// SugarCpp.g:379:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt98=2;
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==142||(LA98_0>=147 && LA98_0<=149)||LA98_0==154||LA98_0==156||LA98_0==167||LA98_0==171||(LA98_0>=173 && LA98_0<=174)||LA98_0==179))
			{
				alt98 = 1;
			}
			else if ((LA98_0==IDENT||LA98_0==86||LA98_0==91||LA98_0==93||LA98_0==95||(LA98_0>=97 && LA98_0<=98)||(LA98_0>=101 && LA98_0<=102)||LA98_0==131||LA98_0==160||LA98_0==163||LA98_0==172||LA98_0==175||LA98_0==184))
			{
				alt98 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:379:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(379, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2561);
				stmt_complex205=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex205.Tree);
				DebugLocation(379, 17);
				// SugarCpp.g:379:17: ( NEWLINE )+
				int cnt94=0;
				try { DebugEnterSubRule(94);
				while (true)
				{
					int alt94=2;
					try { DebugEnterDecision(94, false);
					int LA94_0 = input.LA(1);

					if ((LA94_0==NEWLINE))
					{
						alt94 = 1;
					}


					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:379:17: NEWLINE
						{
						DebugLocation(379, 17);
						NEWLINE206=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2563); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE206);


						}
						break;

					default:
						if (cnt94 >= 1)
							goto loop94;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee94 = new EarlyExitException( 94, input );
						DebugRecognitionException(eee94);
						throw eee94;
					}
					cnt94++;
				}
				loop94:
					;

				} finally { DebugExitSubRule(94); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 379:26: -> stmt_complex
				{
					DebugLocation(379, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:380:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(380, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2573);
				stmt_simple207=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple207.Tree);
				DebugLocation(380, 16);
				// SugarCpp.g:380:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==NEWLINE))
				{
					alt97 = 1;
				}
				else if ((LA97_0==114))
				{
					alt97 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:17: ( NEWLINE )+
					{
					DebugLocation(380, 17);
					// SugarCpp.g:380:17: ( NEWLINE )+
					int cnt95=0;
					try { DebugEnterSubRule(95);
					while (true)
					{
						int alt95=2;
						try { DebugEnterDecision(95, false);
						int LA95_0 = input.LA(1);

						if ((LA95_0==NEWLINE))
						{
							alt95 = 1;
						}


						} finally { DebugExitDecision(95); }
						switch (alt95)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:380:17: NEWLINE
							{
							DebugLocation(380, 17);
							NEWLINE208=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2576); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE208);


							}
							break;

						default:
							if (cnt95 >= 1)
								goto loop95;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee95 = new EarlyExitException( 95, input );
							DebugRecognitionException(eee95);
							throw eee95;
						}
						cnt95++;
					}
					loop95:
						;

					} finally { DebugExitSubRule(95); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:380:28: ';' ( NEWLINE )*
					{
					DebugLocation(380, 28);
					char_literal209=(IToken)Match(input,114,Follow._114_in_stmt_block_item2581); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_114.Add(char_literal209);

					DebugLocation(380, 32);
					// SugarCpp.g:380:32: ( NEWLINE )*
					try { DebugEnterSubRule(96);
					while (true)
					{
						int alt96=2;
						try { DebugEnterDecision(96, false);
						int LA96_0 = input.LA(1);

						if ((LA96_0==NEWLINE))
						{
							alt96 = 1;
						}


						} finally { DebugExitDecision(96); }
						switch ( alt96 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:380:32: NEWLINE
							{
							DebugLocation(380, 32);
							NEWLINE210=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2583); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE210);


							}
							break;

						default:
							goto loop96;
						}
					}

					loop96:
						;

					} finally { DebugExitSubRule(96); }


					}
					break;

				}
				} finally { DebugExitSubRule(97); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 380:42: -> stmt_simple
				{
					DebugLocation(380, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 31);
			LeaveRule("stmt_block_item", 31);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:383:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 32);
		TraceIn("stmt_block", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT211 = default(IToken);
		IToken NEWLINE212 = default(IToken);
		IToken DEDENT214 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT211_tree = default(CommonTree);
		CommonTree NEWLINE212_tree = default(CommonTree);
		CommonTree DEDENT214_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:384:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(384, 4);
			INDENT211=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2600); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT211);

			DebugLocation(384, 11);
			// SugarCpp.g:384:11: ( NEWLINE )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==NEWLINE))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:384:11: NEWLINE
					{
					DebugLocation(384, 11);
					NEWLINE212=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2602); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE212);


					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }

			DebugLocation(384, 20);
			// SugarCpp.g:384:20: ( stmt_block_item )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==IDENT||LA100_0==86||LA100_0==91||LA100_0==93||LA100_0==95||(LA100_0>=97 && LA100_0<=98)||(LA100_0>=101 && LA100_0<=102)||LA100_0==131||LA100_0==142||(LA100_0>=147 && LA100_0<=149)||LA100_0==154||LA100_0==156||LA100_0==160||LA100_0==163||LA100_0==167||(LA100_0>=171 && LA100_0<=175)||LA100_0==179||LA100_0==184))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:384:20: stmt_block_item
					{
					DebugLocation(384, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2605);
					stmt_block_item213=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item213.Tree);

					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }

			DebugLocation(384, 37);
			DEDENT214=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2608); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT214);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 384:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(384, 47);
				// SugarCpp.g:384:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(384, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(384, 60);
				// SugarCpp.g:384:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(384, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 32);
			LeaveRule("stmt_block", 32);
			LeaveRule_stmt_block();
		}
		DebugLocation(385, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:387:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 33);
		TraceIn("stmt", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex216 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(387, 1);
		try
		{
			// SugarCpp.g:388:2: ( stmt_simple | stmt_complex )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==IDENT||LA101_0==86||LA101_0==91||LA101_0==93||LA101_0==95||(LA101_0>=97 && LA101_0<=98)||(LA101_0>=101 && LA101_0<=102)||LA101_0==131||LA101_0==160||LA101_0==163||LA101_0==172||LA101_0==175||LA101_0==184))
			{
				alt101 = 1;
			}
			else if ((LA101_0==142||(LA101_0>=147 && LA101_0<=149)||LA101_0==154||LA101_0==156||LA101_0==167||LA101_0==171||(LA101_0>=173 && LA101_0<=174)||LA101_0==179))
			{
				alt101 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:388:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(388, 4);
				PushFollow(Follow._stmt_simple_in_stmt2628);
				stmt_simple215=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple215.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:389:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(389, 4);
				PushFollow(Follow._stmt_complex_in_stmt2633);
				stmt_complex216=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex216.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 33);
			LeaveRule("stmt", 33);
			LeaveRule_stmt();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:392:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 34);
		TraceIn("stmt_simple", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(392, 1);
		try
		{
			// SugarCpp.g:393:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:393:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(393, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2644);
			stmt_expr217=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr217.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 34);
			LeaveRule("stmt_simple", 34);
			LeaveRule_stmt_simple();
		}
		DebugLocation(394, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:396:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 35);
		TraceIn("stmt_complex", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer223 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(396, 1);
		try
		{
			// SugarCpp.g:397:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt102=6;
			try { DebugEnterDecision(102, false);
			switch (input.LA(1))
			{
			case 149:
			case 173:
				{
				alt102 = 1;
				}
				break;
			case 148:
			case 154:
				{
				alt102 = 2;
				}
				break;
			case 156:
			case 174:
			case 179:
				{
				alt102 = 3;
				}
				break;
			case 171:
				{
				alt102 = 4;
				}
				break;
			case 167:
				{
				alt102 = 5;
				}
				break;
			case 142:
			case 147:
				{
				alt102 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 102, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:397:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2655);
				stmt_if218=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if218.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:398:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2660);
				stmt_for219=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for219.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:399:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(399, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2665);
				stmt_while220=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while220.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:400:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2670);
				stmt_try221=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try221.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:401:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2675);
				stmt_switch222=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch222.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:402:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2680);
				stmt_defer223=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer223.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 35);
			LeaveRule("stmt_complex", 35);
			LeaveRule_stmt_complex();
		}
		DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:405:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 36);
		TraceIn("stmt_expr", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal224 = default(IToken);
		IToken string_literal226 = default(IToken);
		IToken string_literal228 = default(IToken);
		IToken string_literal230 = default(IToken);
		IToken string_literal232 = default(IToken);
		IToken char_literal234 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal224_tree = default(CommonTree);
		CommonTree string_literal226_tree = default(CommonTree);
		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree string_literal232_tree = default(CommonTree);
		CommonTree char_literal234_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(405, 1);
		try
		{
			// SugarCpp.g:406:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:406:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(406, 4);
			// SugarCpp.g:406:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:406:5: a= stmt_expr_item
			{
			DebugLocation(406, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2694);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 406:22: -> $a
			{
				DebugLocation(406, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(406, 29);
			// SugarCpp.g:406:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=6;
				try { DebugEnterDecision(104, false);
				switch (input.LA(1))
				{
				case 149:
					{
					alt104 = 1;
					}
					break;
				case 173:
					{
					alt104 = 2;
					}
					break;
				case 179:
					{
					alt104 = 3;
					}
					break;
				case 174:
					{
					alt104 = 4;
					}
					break;
				case 148:
					{
					alt104 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:31: 'if' expr
					{
					DebugLocation(406, 31);
					string_literal224=(IToken)Match(input,149,Follow._149_in_stmt_expr2704); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_149.Add(string_literal224);

					DebugLocation(406, 36);
					PushFollow(Follow._expr_in_stmt_expr2706);
					expr225=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr225.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 406:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(406, 44);
						// SugarCpp.g:406:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(406, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(406, 59);
						// SugarCpp.g:406:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(406, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:407:13: 'unless' expr
					{
					DebugLocation(407, 13);
					string_literal226=(IToken)Match(input,173,Follow._173_in_stmt_expr2735); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(string_literal226);

					DebugLocation(407, 22);
					PushFollow(Follow._expr_in_stmt_expr2737);
					expr227=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr227.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 407:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(407, 30);
						// SugarCpp.g:407:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(407, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(407, 49);
						// SugarCpp.g:407:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(407, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:408:13: 'while' expr
					{
					DebugLocation(408, 13);
					string_literal228=(IToken)Match(input,179,Follow._179_in_stmt_expr2766); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_179.Add(string_literal228);

					DebugLocation(408, 21);
					PushFollow(Follow._expr_in_stmt_expr2768);
					expr229=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr229.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 408:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(408, 29);
						// SugarCpp.g:408:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(408, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(408, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(408, 47);
						// SugarCpp.g:408:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(408, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(408, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:409:13: 'until' expr
					{
					DebugLocation(409, 13);
					string_literal230=(IToken)Match(input,174,Follow._174_in_stmt_expr2797); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(string_literal230);

					DebugLocation(409, 21);
					PushFollow(Follow._expr_in_stmt_expr2799);
					expr231=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr231.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 409:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(409, 29);
						// SugarCpp.g:409:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(409, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(409, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(409, 47);
						// SugarCpp.g:409:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(409, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(409, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:410:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(410, 13);
					string_literal232=(IToken)Match(input,148,Follow._148_in_stmt_expr2828); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_148.Add(string_literal232);

					DebugLocation(410, 19);
					PushFollow(Follow._for_item_in_stmt_expr2830);
					for_item233=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item233.Tree);
					DebugLocation(410, 28);
					// SugarCpp.g:410:28: ( ',' for_item )*
					try { DebugEnterSubRule(103);
					while (true)
					{
						int alt103=2;
						try { DebugEnterDecision(103, false);
						int LA103_0 = input.LA(1);

						if ((LA103_0==100))
						{
							alt103 = 1;
						}


						} finally { DebugExitDecision(103); }
						switch ( alt103 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:410:29: ',' for_item
							{
							DebugLocation(410, 29);
							char_literal234=(IToken)Match(input,100,Follow._100_in_stmt_expr2833); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal234);

							DebugLocation(410, 33);
							PushFollow(Follow._for_item_in_stmt_expr2835);
							for_item235=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item235.Tree);

							}
							break;

						default:
							goto loop103;
						}
					}

					loop103:
						;

					} finally { DebugExitSubRule(103); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 410:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(410, 47);
						// SugarCpp.g:410:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(410, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(410, 58);
						// SugarCpp.g:410:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(410, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(410, 68);
						// SugarCpp.g:410:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(410, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(410, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 36);
			LeaveRule("stmt_expr", 36);
			LeaveRule_stmt_expr();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:414:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 37);
		TraceIn("stmt_expr_item", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(414, 1);
		try
		{
			// SugarCpp.g:415:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt105=5;
			try { DebugEnterDecision(105, false);
			try
			{
				alt105 = dfa105.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:415:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(415, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2877);
				stmt_alloc236=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc236.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:416:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(416, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2882);
				stmt_return237=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return237.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:417:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(417, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2887);
				stmt_using238=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using238.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:418:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(418, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2892);
				stmt_typedef239=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef239.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:419:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(419, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2897);
				stmt_modify240=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify240.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 37);
			LeaveRule("stmt_expr_item", 37);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:422:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 38);
		TraceIn("stmt_defer", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		IToken string_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree string_literal243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt106=2;
			try { DebugEnterDecision(106, false);
			int LA106_0 = input.LA(1);

			if ((LA106_0==142))
			{
				alt106 = 1;
			}
			else if ((LA106_0==147))
			{
				alt106 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:423:4: 'defer' stmt
				{
				DebugLocation(423, 4);
				string_literal241=(IToken)Match(input,142,Follow._142_in_stmt_defer2908); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal241);

				DebugLocation(423, 12);
				PushFollow(Follow._stmt_in_stmt_defer2910);
				stmt242=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt242.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 423:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(423, 20);
					// SugarCpp.g:423:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(423, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(423, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:424:4: 'finally' stmt
				{
				DebugLocation(424, 4);
				string_literal243=(IToken)Match(input,147,Follow._147_in_stmt_defer2923); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal243);

				DebugLocation(424, 14);
				PushFollow(Follow._stmt_in_stmt_defer2925);
				stmt244=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt244.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 424:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(424, 22);
					// SugarCpp.g:424:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(424, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(424, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 38);
			LeaveRule("stmt_defer", 38);
			LeaveRule_stmt_defer();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:427:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 39);
		TraceIn("stmt_typedef", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal245 = default(IToken);
		IToken char_literal247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name248 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree char_literal247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(427, 1);
		try
		{
			// SugarCpp.g:428:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:428:4: 'typedef' ident '=' type_name
			{
			DebugLocation(428, 4);
			string_literal245=(IToken)Match(input,172,Follow._172_in_stmt_typedef2944); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal245);

			DebugLocation(428, 14);
			PushFollow(Follow._ident_in_stmt_typedef2946);
			ident246=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident246.Tree);
			DebugLocation(428, 20);
			char_literal247=(IToken)Match(input,121,Follow._121_in_stmt_typedef2948); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal247);

			DebugLocation(428, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2950);
			type_name248=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name248.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 428:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(428, 37);
				// SugarCpp.g:428:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(428, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(428, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(428, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 39);
			LeaveRule("stmt_typedef", 39);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:431:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 40);
		TraceIn("stmt_using_item", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal250 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal250_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(431, 36);
		try
		{
			// SugarCpp.g:431:16: ( ident | 'namespace' )
			int alt107=2;
			try { DebugEnterDecision(107, false);
			int LA107_0 = input.LA(1);

			if ((LA107_0==IDENT))
			{
				alt107 = 1;
			}
			else if ((LA107_0==158))
			{
				alt107 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 107, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:431:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(431, 18);
				PushFollow(Follow._ident_in_stmt_using_item2969);
				ident249=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident249.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:431:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(431, 26);
				string_literal250=(IToken)Match(input,158,Follow._158_in_stmt_using_item2973); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal250_tree = (CommonTree)adaptor.Create(string_literal250);
				adaptor.AddChild(root_0, string_literal250_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 40);
			LeaveRule("stmt_using_item", 40);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(431, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:432:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 41);
		TraceIn("stmt_using", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal251 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item252 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal251_tree = default(CommonTree);
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(432, 1);
		try
		{
			// SugarCpp.g:433:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:433:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(433, 4);
			string_literal251=(IToken)Match(input,175,Follow._175_in_stmt_using2981); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_175.Add(string_literal251);

			DebugLocation(433, 12);
			// SugarCpp.g:433:12: ( stmt_using_item )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==IDENT||LA108_0==158))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:12: stmt_using_item
					{
					DebugLocation(433, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2983);
					stmt_using_item252=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item252.Tree);

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 433:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(433, 32);
				// SugarCpp.g:433:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(433, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(433, 45);
				// SugarCpp.g:433:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(433, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 41);
			LeaveRule("stmt_using", 41);
			LeaveRule_stmt_using();
		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:436:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 42);
		TraceIn("stmt_return", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal253 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr254 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal253_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(436, 1);
		try
		{
			// SugarCpp.g:437:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:437:4: 'return' ( expr )?
			{
			DebugLocation(437, 4);
			string_literal253=(IToken)Match(input,163,Follow._163_in_stmt_return3004); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_163.Add(string_literal253);

			DebugLocation(437, 13);
			// SugarCpp.g:437:13: ( expr )?
			int alt109=2;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_0 = input.LA(1);

			if ((LA109_0==IDENT||LA109_0==NUMBER||LA109_0==STRING||LA109_0==86||LA109_0==91||LA109_0==93||LA109_0==95||(LA109_0>=97 && LA109_0<=98)||(LA109_0>=101 && LA109_0<=102)||(LA109_0>=131 && LA109_0<=132)||LA109_0==154||LA109_0==157||(LA109_0>=159 && LA109_0<=160)||LA109_0==184))
			{
				alt109 = 1;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:437:13: expr
				{
				DebugLocation(437, 13);
				PushFollow(Follow._expr_in_stmt_return3006);
				expr254=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr254.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(109); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 437:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(437, 22);
				// SugarCpp.g:437:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(437, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(437, 36);
				// SugarCpp.g:437:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(437, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 42);
			LeaveRule("stmt_return", 42);
			LeaveRule_stmt_return();
		}
		DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:440:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 43);
		TraceIn("inline_stmt_block", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal256 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal256_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(440, 1);
		try
		{
			// SugarCpp.g:441:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:441:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(441, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block3027);
			stmt_simple255=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple255.Tree);
			DebugLocation(441, 16);
			// SugarCpp.g:441:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==114))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch ( alt110 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:441:17: ';' stmt_simple
					{
					DebugLocation(441, 17);
					char_literal256=(IToken)Match(input,114,Follow._114_in_inline_stmt_block3030); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_114.Add(char_literal256);

					DebugLocation(441, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block3032);
					stmt_simple257=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple257.Tree);

					}
					break;

				default:
					goto loop110;
				}
			}

			loop110:
				;

			} finally { DebugExitSubRule(110); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 441:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(441, 38);
				// SugarCpp.g:441:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(441, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(441, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(441, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 43);
			LeaveRule("inline_stmt_block", 43);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:444:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 44);
		TraceIn("stmt_if", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal258 = default(IToken);
		IToken NEWLINE260 = default(IToken);
		IToken NEWLINE262 = default(IToken);
		IToken string_literal263 = default(IToken);
		IToken NEWLINE264 = default(IToken);
		IToken string_literal266 = default(IToken);
		IToken string_literal268 = default(IToken);
		IToken NEWLINE270 = default(IToken);
		IToken NEWLINE272 = default(IToken);
		IToken string_literal273 = default(IToken);
		IToken NEWLINE274 = default(IToken);
		IToken string_literal276 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree NEWLINE260_tree = default(CommonTree);
		CommonTree NEWLINE262_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree NEWLINE264_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree NEWLINE270_tree = default(CommonTree);
		CommonTree NEWLINE272_tree = default(CommonTree);
		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree NEWLINE274_tree = default(CommonTree);
		CommonTree string_literal276_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(444, 1);
		try
		{
			// SugarCpp.g:445:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt121=2;
			try { DebugEnterDecision(121, false);
			int LA121_0 = input.LA(1);

			if ((LA121_0==149))
			{
				alt121 = 1;
			}
			else if ((LA121_0==173))
			{
				alt121 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:445:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(445, 4);
				string_literal258=(IToken)Match(input,149,Follow._149_in_stmt_if3054); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal258);

				DebugLocation(445, 9);
				PushFollow(Follow._expr_in_stmt_if3056);
				expr259=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr259.Tree);
				DebugLocation(445, 14);
				// SugarCpp.g:445:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==NEWLINE))
				{
					alt115 = 1;
				}
				else if ((LA115_0==168))
				{
					alt115 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(445, 15);
					// SugarCpp.g:445:15: ( NEWLINE )+
					int cnt111=0;
					try { DebugEnterSubRule(111);
					while (true)
					{
						int alt111=2;
						try { DebugEnterDecision(111, false);
						int LA111_0 = input.LA(1);

						if ((LA111_0==NEWLINE))
						{
							alt111 = 1;
						}


						} finally { DebugExitDecision(111); }
						switch (alt111)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:445:15: NEWLINE
							{
							DebugLocation(445, 15);
							NEWLINE260=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3059); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE260);


							}
							break;

						default:
							if (cnt111 >= 1)
								goto loop111;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee111 = new EarlyExitException( 111, input );
							DebugRecognitionException(eee111);
							throw eee111;
						}
						cnt111++;
					}
					loop111:
						;

					} finally { DebugExitSubRule(111); }

					DebugLocation(445, 24);
					PushFollow(Follow._stmt_block_in_stmt_if3062);
					stmt_block261=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block261.Tree);
					DebugLocation(445, 35);
					// SugarCpp.g:445:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt114=2;
					try { DebugEnterSubRule(114);
					try { DebugEnterDecision(114, false);
					try
					{
						alt114 = dfa114.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(114); }
					switch (alt114)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:445:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(445, 36);
						// SugarCpp.g:445:36: ( NEWLINE )*
						try { DebugEnterSubRule(112);
						while (true)
						{
							int alt112=2;
							try { DebugEnterDecision(112, false);
							int LA112_0 = input.LA(1);

							if ((LA112_0==NEWLINE))
							{
								alt112 = 1;
							}


							} finally { DebugExitDecision(112); }
							switch ( alt112 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:445:36: NEWLINE
								{
								DebugLocation(445, 36);
								NEWLINE262=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3065); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE262);


								}
								break;

							default:
								goto loop112;
							}
						}

						loop112:
							;

						} finally { DebugExitSubRule(112); }

						DebugLocation(445, 45);
						string_literal263=(IToken)Match(input,144,Follow._144_in_stmt_if3068); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal263);

						DebugLocation(445, 52);
						// SugarCpp.g:445:52: ( NEWLINE )+
						int cnt113=0;
						try { DebugEnterSubRule(113);
						while (true)
						{
							int alt113=2;
							try { DebugEnterDecision(113, false);
							int LA113_0 = input.LA(1);

							if ((LA113_0==NEWLINE))
							{
								alt113 = 1;
							}


							} finally { DebugExitDecision(113); }
							switch (alt113)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:445:52: NEWLINE
								{
								DebugLocation(445, 52);
								NEWLINE264=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3070); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE264);


								}
								break;

							default:
								if (cnt113 >= 1)
									goto loop113;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee113 = new EarlyExitException( 113, input );
								DebugRecognitionException(eee113);
								throw eee113;
							}
							cnt113++;
						}
						loop113:
							;

						} finally { DebugExitSubRule(113); }

						DebugLocation(445, 61);
						PushFollow(Follow._stmt_block_in_stmt_if3073);
						stmt_block265=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block265.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(114); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(445, 77);
						// SugarCpp.g:445:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(445, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(445, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(445, 103);
						// SugarCpp.g:445:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(445, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:446:16: 'then' inline_stmt_block
					{
					DebugLocation(446, 16);
					string_literal266=(IToken)Match(input,168,Follow._168_in_stmt_if3105); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal266);

					DebugLocation(446, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3107);
					inline_stmt_block267=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block267.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 446:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(446, 44);
						// SugarCpp.g:446:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(446, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(446, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(446, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(115); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:448:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(448, 4);
				string_literal268=(IToken)Match(input,173,Follow._173_in_stmt_if3128); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(string_literal268);

				DebugLocation(448, 13);
				PushFollow(Follow._expr_in_stmt_if3130);
				expr269=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr269.Tree);
				DebugLocation(448, 18);
				// SugarCpp.g:448:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==NEWLINE))
				{
					alt120 = 1;
				}
				else if ((LA120_0==168))
				{
					alt120 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:448:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(448, 19);
					// SugarCpp.g:448:19: ( NEWLINE )+
					int cnt116=0;
					try { DebugEnterSubRule(116);
					while (true)
					{
						int alt116=2;
						try { DebugEnterDecision(116, false);
						int LA116_0 = input.LA(1);

						if ((LA116_0==NEWLINE))
						{
							alt116 = 1;
						}


						} finally { DebugExitDecision(116); }
						switch (alt116)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:448:19: NEWLINE
							{
							DebugLocation(448, 19);
							NEWLINE270=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3133); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE270);


							}
							break;

						default:
							if (cnt116 >= 1)
								goto loop116;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee116 = new EarlyExitException( 116, input );
							DebugRecognitionException(eee116);
							throw eee116;
						}
						cnt116++;
					}
					loop116:
						;

					} finally { DebugExitSubRule(116); }

					DebugLocation(448, 28);
					PushFollow(Follow._stmt_block_in_stmt_if3136);
					stmt_block271=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block271.Tree);
					DebugLocation(448, 39);
					// SugarCpp.g:448:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt119=2;
					try { DebugEnterSubRule(119);
					try { DebugEnterDecision(119, false);
					try
					{
						alt119 = dfa119.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(119); }
					switch (alt119)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:448:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(448, 40);
						// SugarCpp.g:448:40: ( NEWLINE )*
						try { DebugEnterSubRule(117);
						while (true)
						{
							int alt117=2;
							try { DebugEnterDecision(117, false);
							int LA117_0 = input.LA(1);

							if ((LA117_0==NEWLINE))
							{
								alt117 = 1;
							}


							} finally { DebugExitDecision(117); }
							switch ( alt117 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:448:40: NEWLINE
								{
								DebugLocation(448, 40);
								NEWLINE272=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3139); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE272);


								}
								break;

							default:
								goto loop117;
							}
						}

						loop117:
							;

						} finally { DebugExitSubRule(117); }

						DebugLocation(448, 49);
						string_literal273=(IToken)Match(input,144,Follow._144_in_stmt_if3142); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal273);

						DebugLocation(448, 56);
						// SugarCpp.g:448:56: ( NEWLINE )+
						int cnt118=0;
						try { DebugEnterSubRule(118);
						while (true)
						{
							int alt118=2;
							try { DebugEnterDecision(118, false);
							int LA118_0 = input.LA(1);

							if ((LA118_0==NEWLINE))
							{
								alt118 = 1;
							}


							} finally { DebugExitDecision(118); }
							switch (alt118)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:448:56: NEWLINE
								{
								DebugLocation(448, 56);
								NEWLINE274=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3144); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE274);


								}
								break;

							default:
								if (cnt118 >= 1)
									goto loop118;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee118 = new EarlyExitException( 118, input );
								DebugRecognitionException(eee118);
								throw eee118;
							}
							cnt118++;
						}
						loop118:
							;

						} finally { DebugExitSubRule(118); }

						DebugLocation(448, 65);
						PushFollow(Follow._stmt_block_in_stmt_if3147);
						stmt_block275=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block275.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(119); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 448:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(448, 81);
						// SugarCpp.g:448:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(448, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(448, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(448, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(448, 111);
						// SugarCpp.g:448:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(448, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:449:20: 'then' inline_stmt_block
					{
					DebugLocation(449, 20);
					string_literal276=(IToken)Match(input,168,Follow._168_in_stmt_if3183); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal276);

					DebugLocation(449, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3185);
					inline_stmt_block277=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block277.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 449:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(449, 48);
						// SugarCpp.g:449:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(449, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(449, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(449, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(120); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 44);
			LeaveRule("stmt_if", 44);
			LeaveRule_stmt_if();
		}
		DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:453:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 45);
		TraceIn("stmt_while", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal278 = default(IToken);
		IToken NEWLINE280 = default(IToken);
		IToken string_literal282 = default(IToken);
		IToken string_literal284 = default(IToken);
		IToken NEWLINE286 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken NEWLINE292 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block293 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree NEWLINE280_tree = default(CommonTree);
		CommonTree string_literal282_tree = default(CommonTree);
		CommonTree string_literal284_tree = default(CommonTree);
		CommonTree NEWLINE286_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree NEWLINE292_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(453, 1);
		try
		{
			// SugarCpp.g:454:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt128=3;
			try { DebugEnterDecision(128, false);
			switch (input.LA(1))
			{
			case 179:
				{
				alt128 = 1;
				}
				break;
			case 174:
				{
				alt128 = 2;
				}
				break;
			case 156:
				{
				alt128 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:454:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(454, 4);
				string_literal278=(IToken)Match(input,179,Follow._179_in_stmt_while3216); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(string_literal278);

				DebugLocation(454, 12);
				PushFollow(Follow._expr_in_stmt_while3218);
				expr279=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr279.Tree);
				DebugLocation(454, 17);
				// SugarCpp.g:454:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==NEWLINE))
				{
					alt123 = 1;
				}
				else if ((LA123_0==168))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:454:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(454, 19);
					// SugarCpp.g:454:19: ( NEWLINE )+
					int cnt122=0;
					try { DebugEnterSubRule(122);
					while (true)
					{
						int alt122=2;
						try { DebugEnterDecision(122, false);
						int LA122_0 = input.LA(1);

						if ((LA122_0==NEWLINE))
						{
							alt122 = 1;
						}


						} finally { DebugExitDecision(122); }
						switch (alt122)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:454:19: NEWLINE
							{
							DebugLocation(454, 19);
							NEWLINE280=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3222); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE280);


							}
							break;

						default:
							if (cnt122 >= 1)
								goto loop122;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee122 = new EarlyExitException( 122, input );
							DebugRecognitionException(eee122);
							throw eee122;
						}
						cnt122++;
					}
					loop122:
						;

					} finally { DebugExitSubRule(122); }

					DebugLocation(454, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3225);
					stmt_block281=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block281.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(454, 42);
						// SugarCpp.g:454:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(454, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(454, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:455:13: 'then' inline_stmt_block
					{
					DebugLocation(455, 13);
					string_literal282=(IToken)Match(input,168,Follow._168_in_stmt_while3249); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal282);

					DebugLocation(455, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3251);
					inline_stmt_block283=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block283.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(455, 41);
						// SugarCpp.g:455:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(455, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(455, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(123); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:457:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(457, 4);
				string_literal284=(IToken)Match(input,174,Follow._174_in_stmt_while3275); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(string_literal284);

				DebugLocation(457, 12);
				PushFollow(Follow._expr_in_stmt_while3277);
				expr285=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr285.Tree);
				DebugLocation(457, 17);
				// SugarCpp.g:457:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==NEWLINE))
				{
					alt125 = 1;
				}
				else if ((LA125_0==168))
				{
					alt125 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:457:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(457, 19);
					// SugarCpp.g:457:19: ( NEWLINE )+
					int cnt124=0;
					try { DebugEnterSubRule(124);
					while (true)
					{
						int alt124=2;
						try { DebugEnterDecision(124, false);
						int LA124_0 = input.LA(1);

						if ((LA124_0==NEWLINE))
						{
							alt124 = 1;
						}


						} finally { DebugExitDecision(124); }
						switch (alt124)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:457:19: NEWLINE
							{
							DebugLocation(457, 19);
							NEWLINE286=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3281); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE286);


							}
							break;

						default:
							if (cnt124 >= 1)
								goto loop124;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee124 = new EarlyExitException( 124, input );
							DebugRecognitionException(eee124);
							throw eee124;
						}
						cnt124++;
					}
					loop124:
						;

					} finally { DebugExitSubRule(124); }

					DebugLocation(457, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3284);
					stmt_block287=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block287.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 457:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(457, 42);
						// SugarCpp.g:457:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(457, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(457, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(457, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:458:13: 'then' inline_stmt_block
					{
					DebugLocation(458, 13);
					string_literal288=(IToken)Match(input,168,Follow._168_in_stmt_while3308); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal288);

					DebugLocation(458, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3310);
					inline_stmt_block289=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block289.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 458:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(458, 41);
						// SugarCpp.g:458:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(458, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(458, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(458, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(125); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:460:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(460, 4);
				string_literal290=(IToken)Match(input,156,Follow._156_in_stmt_while3334); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_156.Add(string_literal290);

				DebugLocation(460, 11);
				// SugarCpp.g:460:11: ( expr )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==IDENT||LA126_0==NUMBER||LA126_0==STRING||LA126_0==86||LA126_0==91||LA126_0==93||LA126_0==95||(LA126_0>=97 && LA126_0<=98)||(LA126_0>=101 && LA126_0<=102)||(LA126_0>=131 && LA126_0<=132)||LA126_0==154||LA126_0==157||(LA126_0>=159 && LA126_0<=160)||LA126_0==184))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:460:11: expr
					{
					DebugLocation(460, 11);
					PushFollow(Follow._expr_in_stmt_while3336);
					expr291=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr291.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(126); }

				DebugLocation(460, 17);
				// SugarCpp.g:460:17: ( NEWLINE )+
				int cnt127=0;
				try { DebugEnterSubRule(127);
				while (true)
				{
					int alt127=2;
					try { DebugEnterDecision(127, false);
					int LA127_0 = input.LA(1);

					if ((LA127_0==NEWLINE))
					{
						alt127 = 1;
					}


					} finally { DebugExitDecision(127); }
					switch (alt127)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:460:17: NEWLINE
						{
						DebugLocation(460, 17);
						NEWLINE292=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3339); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE292);


						}
						break;

					default:
						if (cnt127 >= 1)
							goto loop127;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee127 = new EarlyExitException( 127, input );
						DebugRecognitionException(eee127);
						throw eee127;
					}
					cnt127++;
				}
				loop127:
					;

				} finally { DebugExitSubRule(127); }

				DebugLocation(460, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3342);
				stmt_block293=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block293.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 460:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(460, 40);
					// SugarCpp.g:460:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(460, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(460, 52);
					// SugarCpp.g:460:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(460, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(460, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 45);
			LeaveRule("stmt_while", 45);
			LeaveRule_stmt_while();
		}
		DebugLocation(461, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:463:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 46);
		TraceIn("for_range", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal295 = default(IToken);
		IToken string_literal296 = default(IToken);
		IToken string_literal297 = default(IToken);
		IToken string_literal298 = default(IToken);
		IToken string_literal299 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken string_literal301 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident294 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal295_tree = default(CommonTree);
		CommonTree string_literal296_tree = default(CommonTree);
		CommonTree string_literal297_tree = default(CommonTree);
		CommonTree string_literal298_tree = default(CommonTree);
		CommonTree string_literal299_tree = default(CommonTree);
		CommonTree string_literal300_tree = default(CommonTree);
		CommonTree string_literal301_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(463, 1);
		try
		{
			// SugarCpp.g:464:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:464:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(464, 4);
			PushFollow(Follow._ident_in_for_range3364);
			ident294=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident294.Tree);
			DebugLocation(464, 10);
			string_literal295=(IToken)Match(input,116,Follow._116_in_for_range3366); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(string_literal295);

			DebugLocation(464, 16);
			PushFollow(Follow._expr_in_for_range3370);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(464, 22);
			// SugarCpp.g:464:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt132=4;
			try { DebugEnterSubRule(132);
			try { DebugEnterDecision(132, false);
			switch (input.LA(1))
			{
			case 170:
				{
				alt132 = 1;
				}
				break;
			case 169:
				{
				alt132 = 2;
				}
				break;
			case 143:
				{
				alt132 = 3;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 100:
			case 114:
			case 133:
			case 148:
			case 149:
			case 151:
			case 173:
			case 174:
			case 179:
				{
				alt132 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 132, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:464:24: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(464, 24);
				string_literal296=(IToken)Match(input,170,Follow._170_in_for_range3374); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(string_literal296);

				DebugLocation(464, 30);
				PushFollow(Follow._expr_in_for_range3378);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(464, 36);
				// SugarCpp.g:464:36: ( 'by' c= expr )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==138))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:464:37: 'by' c= expr
					{
					DebugLocation(464, 37);
					string_literal297=(IToken)Match(input,138,Follow._138_in_for_range3381); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal297);

					DebugLocation(464, 43);
					PushFollow(Follow._expr_in_for_range3385);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(129); }



				{
				// AST REWRITE
				// elements: b, c, a, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 464:51: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(464, 54);
					// SugarCpp.g:464:54: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(464, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(464, 68);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(464, 75);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(464, 78);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(464, 81);
					// SugarCpp.g:464:81: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(464, 81);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:465:9: 'til' b= expr ( 'by' c= expr )?
				{
				DebugLocation(465, 9);
				string_literal298=(IToken)Match(input,169,Follow._169_in_for_range3415); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal298);

				DebugLocation(465, 16);
				PushFollow(Follow._expr_in_for_range3419);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(465, 22);
				// SugarCpp.g:465:22: ( 'by' c= expr )?
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==138))
				{
					alt130 = 1;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:465:23: 'by' c= expr
					{
					DebugLocation(465, 23);
					string_literal299=(IToken)Match(input,138,Follow._138_in_for_range3422); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal299);

					DebugLocation(465, 29);
					PushFollow(Follow._expr_in_for_range3426);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(130); }



				{
				// AST REWRITE
				// elements: b, a, c, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 465:37: -> ^( For_Item_Til ident $a $b ( $c)? )
				{
					DebugLocation(465, 40);
					// SugarCpp.g:465:40: ^( For_Item_Til ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(465, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Til, "For_Item_Til"), root_1);

					DebugLocation(465, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(465, 62);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(465, 65);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(465, 68);
					// SugarCpp.g:465:68: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(465, 68);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:466:9: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(466, 9);
				string_literal300=(IToken)Match(input,143,Follow._143_in_for_range3456); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal300);

				DebugLocation(466, 19);
				PushFollow(Follow._expr_in_for_range3460);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(466, 25);
				// SugarCpp.g:466:25: ( 'by' c= expr )?
				int alt131=2;
				try { DebugEnterSubRule(131);
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==138))
				{
					alt131 = 1;
				}
				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:466:26: 'by' c= expr
					{
					DebugLocation(466, 26);
					string_literal301=(IToken)Match(input,138,Follow._138_in_for_range3463); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal301);

					DebugLocation(466, 32);
					PushFollow(Follow._expr_in_for_range3467);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(131); }



				{
				// AST REWRITE
				// elements: a, b, ident, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 466:40: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(466, 43);
					// SugarCpp.g:466:43: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(466, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(466, 62);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(466, 69);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(466, 72);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(466, 75);
					// SugarCpp.g:466:75: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(466, 75);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:467:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 467:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(467, 12);
					// SugarCpp.g:467:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(467, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(467, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(467, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 46);
			LeaveRule("for_range", 46);
			LeaveRule_for_range();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:471:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 47);
		TraceIn("for_when", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr302 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(471, 1);
		try
		{
			// SugarCpp.g:472:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:472:4: expr
			{
			DebugLocation(472, 4);
			PushFollow(Follow._expr_in_for_when3525);
			expr302=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr302.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 472:9: -> ^( For_Item_When expr )
			{
				DebugLocation(472, 12);
				// SugarCpp.g:472:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(472, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(472, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 47);
			LeaveRule("for_when", 47);
			LeaveRule_for_when();
		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:475:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 48);
		TraceIn("for_map", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal304 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr305 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal304_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(475, 1);
		try
		{
			// SugarCpp.g:476:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:476:4: ident '=>' expr
			{
			DebugLocation(476, 4);
			PushFollow(Follow._ident_in_for_map3544);
			ident303=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident303.Tree);
			DebugLocation(476, 10);
			string_literal304=(IToken)Match(input,124,Follow._124_in_for_map3546); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal304);

			DebugLocation(476, 15);
			PushFollow(Follow._expr_in_for_map3548);
			expr305=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr305.Tree);


			{
			// AST REWRITE
			// elements: ident, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 476:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(476, 23);
				// SugarCpp.g:476:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(476, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(476, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(476, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 48);
			LeaveRule("for_map", 48);
			LeaveRule_for_map();
		}
		DebugLocation(477, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:479:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 49);
		TraceIn("for_item", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range306 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map308 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(479, 1);
		try
		{
			// SugarCpp.g:480:2: ( for_range | for_when | for_map )
			int alt133=3;
			try { DebugEnterDecision(133, false);
			try
			{
				alt133 = dfa133.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:480:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(480, 4);
				PushFollow(Follow._for_range_in_for_item3569);
				for_range306=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range306.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:481:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(481, 4);
				PushFollow(Follow._for_when_in_for_item3574);
				for_when307=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when307.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:482:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(482, 4);
				PushFollow(Follow._for_map_in_for_item3579);
				for_map308=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map308.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 49);
			LeaveRule("for_item", 49);
			LeaveRule_for_item();
		}
		DebugLocation(483, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:485:1: stmt_for : ( 'for' | 'let' ) ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 50);
		TraceIn("stmt_for", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal309 = default(IToken);
		IToken string_literal310 = default(IToken);
		IToken char_literal312 = default(IToken);
		IToken NEWLINE314 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block315 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal309_tree = default(CommonTree);
		CommonTree string_literal310_tree = default(CommonTree);
		CommonTree char_literal312_tree = default(CommonTree);
		CommonTree NEWLINE314_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(485, 1);
		try
		{
			// SugarCpp.g:486:2: ( ( 'for' | 'let' ) ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:486:4: ( 'for' | 'let' ) ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(486, 4);
			// SugarCpp.g:486:4: ( 'for' | 'let' )
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_0 = input.LA(1);

			if ((LA134_0==148))
			{
				alt134 = 1;
			}
			else if ((LA134_0==154))
			{
				alt134 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:486:5: 'for'
				{
				DebugLocation(486, 5);
				string_literal309=(IToken)Match(input,148,Follow._148_in_stmt_for3591); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_148.Add(string_literal309);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:486:13: 'let'
				{
				DebugLocation(486, 13);
				string_literal310=(IToken)Match(input,154,Follow._154_in_stmt_for3595); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal310);


				}
				break;

			}
			} finally { DebugExitSubRule(134); }

			DebugLocation(486, 20);
			// SugarCpp.g:486:20: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:486:22: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(486, 22);
			PushFollow(Follow._for_item_in_stmt_for3600);
			for_item311=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item311.Tree);
			DebugLocation(486, 31);
			// SugarCpp.g:486:31: ( ',' for_item )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==100))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:486:32: ',' for_item
					{
					DebugLocation(486, 32);
					char_literal312=(IToken)Match(input,100,Follow._100_in_stmt_for3603); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal312);

					DebugLocation(486, 36);
					PushFollow(Follow._for_item_in_stmt_for3605);
					for_item313=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item313.Tree);

					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }

			DebugLocation(486, 47);
			// SugarCpp.g:486:47: ( NEWLINE )+
			int cnt136=0;
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==NEWLINE))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:486:47: NEWLINE
					{
					DebugLocation(486, 47);
					NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3609); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE314);


					}
					break;

				default:
					if (cnt136 >= 1)
						goto loop136;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee136 = new EarlyExitException( 136, input );
					DebugRecognitionException(eee136);
					throw eee136;
				}
				cnt136++;
			}
			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(486, 56);
			PushFollow(Follow._stmt_block_in_stmt_for3612);
			stmt_block315=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block315.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 486:67: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(486, 70);
				// SugarCpp.g:486:70: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(486, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(486, 81);
				// SugarCpp.g:486:81: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(486, 81);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(486, 91);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 50);
			LeaveRule("stmt_for", 50);
			LeaveRule_stmt_for();
		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:491:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 51);
		TraceIn("stmt_try", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal316 = default(IToken);
		IToken NEWLINE317 = default(IToken);
		IToken NEWLINE319 = default(IToken);
		IToken string_literal320 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block323 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal316_tree = default(CommonTree);
		CommonTree NEWLINE317_tree = default(CommonTree);
		CommonTree NEWLINE319_tree = default(CommonTree);
		CommonTree string_literal320_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(491, 1);
		try
		{
			// SugarCpp.g:492:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:492:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(492, 4);
			string_literal316=(IToken)Match(input,171,Follow._171_in_stmt_try3643); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_171.Add(string_literal316);

			DebugLocation(492, 10);
			// SugarCpp.g:492:10: ( NEWLINE )+
			int cnt137=0;
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==NEWLINE))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:10: NEWLINE
					{
					DebugLocation(492, 10);
					NEWLINE317=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3645); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE317);


					}
					break;

				default:
					if (cnt137 >= 1)
						goto loop137;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee137 = new EarlyExitException( 137, input );
					DebugRecognitionException(eee137);
					throw eee137;
				}
				cnt137++;
			}
			loop137:
				;

			} finally { DebugExitSubRule(137); }

			DebugLocation(492, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3648);
			stmt_block318=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block318.Tree);
			DebugLocation(492, 30);
			// SugarCpp.g:492:30: ( NEWLINE )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==NEWLINE))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:30: NEWLINE
					{
					DebugLocation(492, 30);
					NEWLINE319=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3650); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE319);


					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }

			DebugLocation(492, 39);
			string_literal320=(IToken)Match(input,139,Follow._139_in_stmt_try3653); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_139.Add(string_literal320);

			DebugLocation(492, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3655);
			stmt_alloc321=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc321.Tree);
			DebugLocation(492, 58);
			// SugarCpp.g:492:58: ( NEWLINE )+
			int cnt139=0;
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==NEWLINE))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:58: NEWLINE
					{
					DebugLocation(492, 58);
					NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3657); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE322);


					}
					break;

				default:
					if (cnt139 >= 1)
						goto loop139;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee139 = new EarlyExitException( 139, input );
					DebugRecognitionException(eee139);
					throw eee139;
				}
				cnt139++;
			}
			loop139:
				;

			} finally { DebugExitSubRule(139); }

			DebugLocation(492, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3660);
			stmt_block323=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block323.Tree);


			{
			// AST REWRITE
			// elements: stmt_alloc, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 492:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(492, 81);
				// SugarCpp.g:492:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(492, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(492, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(492, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(492, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 51);
			LeaveRule("stmt_try", 51);
			LeaveRule_stmt_try();
		}
		DebugLocation(493, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:495:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 52);
		TraceIn("switch_item", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal324 = default(IToken);
		IToken char_literal326 = default(IToken);
		IToken NEWLINE328 = default(IToken);
		IToken string_literal330 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block331 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal324_tree = default(CommonTree);
		CommonTree char_literal326_tree = default(CommonTree);
		CommonTree NEWLINE328_tree = default(CommonTree);
		CommonTree string_literal330_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(495, 1);
		try
		{
			// SugarCpp.g:496:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:496:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(496, 4);
			string_literal324=(IToken)Match(input,177,Follow._177_in_switch_item3683); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_177.Add(string_literal324);

			DebugLocation(496, 11);
			PushFollow(Follow._expr_in_switch_item3685);
			expr325=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr325.Tree);
			DebugLocation(496, 16);
			// SugarCpp.g:496:16: ( ',' expr )*
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, false);
				int LA140_0 = input.LA(1);

				if ((LA140_0==100))
				{
					alt140 = 1;
				}


				} finally { DebugExitDecision(140); }
				switch ( alt140 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:496:17: ',' expr
					{
					DebugLocation(496, 17);
					char_literal326=(IToken)Match(input,100,Follow._100_in_switch_item3688); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal326);

					DebugLocation(496, 21);
					PushFollow(Follow._expr_in_switch_item3690);
					expr327=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr327.Tree);

					}
					break;

				default:
					goto loop140;
				}
			}

			loop140:
				;

			} finally { DebugExitSubRule(140); }

			DebugLocation(496, 28);
			// SugarCpp.g:496:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_0 = input.LA(1);

			if ((LA142_0==NEWLINE))
			{
				alt142 = 1;
			}
			else if ((LA142_0==168))
			{
				alt142 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 142, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:496:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(496, 30);
				// SugarCpp.g:496:30: ( NEWLINE )+
				int cnt141=0;
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=2;
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==NEWLINE))
					{
						alt141 = 1;
					}


					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:496:30: NEWLINE
						{
						DebugLocation(496, 30);
						NEWLINE328=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3696); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE328);


						}
						break;

					default:
						if (cnt141 >= 1)
							goto loop141;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee141 = new EarlyExitException( 141, input );
						DebugRecognitionException(eee141);
						throw eee141;
					}
					cnt141++;
				}
				loop141:
					;

				} finally { DebugExitSubRule(141); }

				DebugLocation(496, 39);
				PushFollow(Follow._stmt_block_in_switch_item3699);
				stmt_block329=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block329.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 496:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(496, 53);
					// SugarCpp.g:496:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(496, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(496, 67);
					// SugarCpp.g:496:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(496, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(496, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(496, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(496, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:497:30: 'then' inline_stmt_block
				{
				DebugLocation(497, 30);
				string_literal330=(IToken)Match(input,168,Follow._168_in_switch_item3745); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal330);

				DebugLocation(497, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3747);
				inline_stmt_block331=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block331.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 497:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(497, 58);
					// SugarCpp.g:497:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(497, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(497, 72);
					// SugarCpp.g:497:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(497, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(497, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(497, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(497, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 52);
			LeaveRule("switch_item", 52);
			LeaveRule_switch_item();
		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:501:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 53);
		TraceIn("stmt_switch", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal332 = default(IToken);
		IToken NEWLINE334 = default(IToken);
		IToken INDENT335 = default(IToken);
		IToken NEWLINE336 = default(IToken);
		IToken NEWLINE338 = default(IToken);
		IToken string_literal339 = default(IToken);
		IToken NEWLINE340 = default(IToken);
		IToken NEWLINE342 = default(IToken);
		IToken DEDENT343 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal332_tree = default(CommonTree);
		CommonTree NEWLINE334_tree = default(CommonTree);
		CommonTree INDENT335_tree = default(CommonTree);
		CommonTree NEWLINE336_tree = default(CommonTree);
		CommonTree NEWLINE338_tree = default(CommonTree);
		CommonTree string_literal339_tree = default(CommonTree);
		CommonTree NEWLINE340_tree = default(CommonTree);
		CommonTree NEWLINE342_tree = default(CommonTree);
		CommonTree DEDENT343_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(501, 1);
		try
		{
			// SugarCpp.g:502:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:502:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(502, 4);
			string_literal332=(IToken)Match(input,167,Follow._167_in_stmt_switch3787); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(string_literal332);

			DebugLocation(502, 13);
			// SugarCpp.g:502:13: ( expr )?
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_0 = input.LA(1);

			if ((LA143_0==IDENT||LA143_0==NUMBER||LA143_0==STRING||LA143_0==86||LA143_0==91||LA143_0==93||LA143_0==95||(LA143_0>=97 && LA143_0<=98)||(LA143_0>=101 && LA143_0<=102)||(LA143_0>=131 && LA143_0<=132)||LA143_0==154||LA143_0==157||(LA143_0>=159 && LA143_0<=160)||LA143_0==184))
			{
				alt143 = 1;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:502:13: expr
				{
				DebugLocation(502, 13);
				PushFollow(Follow._expr_in_stmt_switch3789);
				expr333=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr333.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(143); }

			DebugLocation(502, 19);
			// SugarCpp.g:502:19: ( NEWLINE )+
			int cnt144=0;
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==NEWLINE))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:502:19: NEWLINE
					{
					DebugLocation(502, 19);
					NEWLINE334=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3792); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE334);


					}
					break;

				default:
					if (cnt144 >= 1)
						goto loop144;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee144 = new EarlyExitException( 144, input );
					DebugRecognitionException(eee144);
					throw eee144;
				}
				cnt144++;
			}
			loop144:
				;

			} finally { DebugExitSubRule(144); }

			DebugLocation(502, 28);
			INDENT335=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3795); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT335);

			DebugLocation(502, 35);
			// SugarCpp.g:502:35: ( NEWLINE )*
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==NEWLINE))
				{
					alt145 = 1;
				}


				} finally { DebugExitDecision(145); }
				switch ( alt145 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:502:35: NEWLINE
					{
					DebugLocation(502, 35);
					NEWLINE336=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3797); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE336);


					}
					break;

				default:
					goto loop145;
				}
			}

			loop145:
				;

			} finally { DebugExitSubRule(145); }

			DebugLocation(502, 44);
			// SugarCpp.g:502:44: ( switch_item ( NEWLINE )+ )+
			int cnt147=0;
			try { DebugEnterSubRule(147);
			while (true)
			{
				int alt147=2;
				try { DebugEnterDecision(147, false);
				int LA147_0 = input.LA(1);

				if ((LA147_0==177))
				{
					alt147 = 1;
				}


				} finally { DebugExitDecision(147); }
				switch (alt147)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:502:45: switch_item ( NEWLINE )+
					{
					DebugLocation(502, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3801);
					switch_item337=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item337.Tree);
					DebugLocation(502, 57);
					// SugarCpp.g:502:57: ( NEWLINE )+
					int cnt146=0;
					try { DebugEnterSubRule(146);
					while (true)
					{
						int alt146=2;
						try { DebugEnterDecision(146, false);
						int LA146_0 = input.LA(1);

						if ((LA146_0==NEWLINE))
						{
							alt146 = 1;
						}


						} finally { DebugExitDecision(146); }
						switch (alt146)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:502:57: NEWLINE
							{
							DebugLocation(502, 57);
							NEWLINE338=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3803); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE338);


							}
							break;

						default:
							if (cnt146 >= 1)
								goto loop146;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee146 = new EarlyExitException( 146, input );
							DebugRecognitionException(eee146);
							throw eee146;
						}
						cnt146++;
					}
					loop146:
						;

					} finally { DebugExitSubRule(146); }


					}
					break;

				default:
					if (cnt147 >= 1)
						goto loop147;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee147 = new EarlyExitException( 147, input );
					DebugRecognitionException(eee147);
					throw eee147;
				}
				cnt147++;
			}
			loop147:
				;

			} finally { DebugExitSubRule(147); }

			DebugLocation(502, 68);
			// SugarCpp.g:502:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt150=2;
			try { DebugEnterSubRule(150);
			try { DebugEnterDecision(150, false);
			int LA150_0 = input.LA(1);

			if ((LA150_0==144))
			{
				alt150 = 1;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:502:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(502, 69);
				string_literal339=(IToken)Match(input,144,Follow._144_in_stmt_switch3809); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal339);

				DebugLocation(502, 76);
				// SugarCpp.g:502:76: ( NEWLINE )+
				int cnt148=0;
				try { DebugEnterSubRule(148);
				while (true)
				{
					int alt148=2;
					try { DebugEnterDecision(148, false);
					int LA148_0 = input.LA(1);

					if ((LA148_0==NEWLINE))
					{
						alt148 = 1;
					}


					} finally { DebugExitDecision(148); }
					switch (alt148)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:502:76: NEWLINE
						{
						DebugLocation(502, 76);
						NEWLINE340=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3811); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE340);


						}
						break;

					default:
						if (cnt148 >= 1)
							goto loop148;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee148 = new EarlyExitException( 148, input );
						DebugRecognitionException(eee148);
						throw eee148;
					}
					cnt148++;
				}
				loop148:
					;

				} finally { DebugExitSubRule(148); }

				DebugLocation(502, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3814);
				stmt_block341=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block341.Tree);
				DebugLocation(502, 96);
				// SugarCpp.g:502:96: ( NEWLINE )*
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==NEWLINE))
					{
						alt149 = 1;
					}


					} finally { DebugExitDecision(149); }
					switch ( alt149 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:502:96: NEWLINE
						{
						DebugLocation(502, 96);
						NEWLINE342=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3816); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE342);


						}
						break;

					default:
						goto loop149;
					}
				}

				loop149:
					;

				} finally { DebugExitSubRule(149); }


				}
				break;

			}
			} finally { DebugExitSubRule(150); }

			DebugLocation(502, 107);
			DEDENT343=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3821); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT343);



			{
			// AST REWRITE
			// elements: stmt_block, expr, switch_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 502:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(502, 117);
				// SugarCpp.g:502:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(502, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(502, 131);
				// SugarCpp.g:502:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(502, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(502, 137);
				// SugarCpp.g:502:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(502, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(502, 150);
				// SugarCpp.g:502:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(502, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 53);
			LeaveRule("stmt_switch", 53);
			LeaveRule_stmt_switch();
		}
		DebugLocation(503, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:505:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 54);
		TraceIn("ident_list", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal345 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident346 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal345_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(505, 1);
		try
		{
			// SugarCpp.g:506:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:506:4: ident ( ',' ident )*
			{
			DebugLocation(506, 4);
			PushFollow(Follow._ident_in_ident_list3847);
			ident344=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident344.Tree);
			DebugLocation(506, 10);
			// SugarCpp.g:506:10: ( ',' ident )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_0 = input.LA(1);

				if ((LA151_0==100))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:506:11: ',' ident
					{
					DebugLocation(506, 11);
					char_literal345=(IToken)Match(input,100,Follow._100_in_ident_list3850); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal345);

					DebugLocation(506, 15);
					PushFollow(Follow._ident_in_ident_list3852);
					ident346=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident346.Tree);

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 506:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(506, 26);
				// SugarCpp.g:506:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(506, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(506, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(506, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 54);
			LeaveRule("ident_list", 54);
			LeaveRule_ident_list();
		}
		DebugLocation(507, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:509:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 55);
		TraceIn("stmt_alloc", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal348 = default(IToken);
		IToken char_literal350 = default(IToken);
		IToken string_literal351 = default(IToken);
		IToken string_literal354 = default(IToken);
		IToken char_literal356 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name349 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr355 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr357 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal348_tree = default(CommonTree);
		CommonTree char_literal350_tree = default(CommonTree);
		CommonTree string_literal351_tree = default(CommonTree);
		CommonTree string_literal354_tree = default(CommonTree);
		CommonTree char_literal356_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(509, 1);
		try
		{
			// SugarCpp.g:510:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:510:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(510, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3874);
			ident_list347=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list347.Tree);
			DebugLocation(510, 15);
			// SugarCpp.g:510:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, false);
			int LA155_0 = input.LA(1);

			if ((LA155_0==111))
			{
				alt155 = 1;
			}
			else if ((LA155_0==113))
			{
				alt155 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 155, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:510:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(510, 17);
				char_literal348=(IToken)Match(input,111,Follow._111_in_stmt_alloc3878); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal348);

				DebugLocation(510, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3880);
				type_name349=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name349.Tree);
				DebugLocation(510, 31);
				// SugarCpp.g:510:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt153=3;
				try { DebugEnterSubRule(153);
				try { DebugEnterDecision(153, false);
				switch (input.LA(1))
				{
				case 113:
				case 121:
					{
					alt153 = 1;
					}
					break;
				case 93:
					{
					alt153 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 114:
				case 148:
				case 149:
				case 151:
				case 173:
				case 174:
				case 179:
					{
					alt153 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 153, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(153); }
				switch (alt153)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:510:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(510, 33);
					// SugarCpp.g:510:33: ( '=' | ':=' )
					int alt152=2;
					try { DebugEnterSubRule(152);
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==121))
					{
						alt152 = 1;
					}
					else if ((LA152_0==113))
					{
						alt152 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:510:34: '='
						{
						DebugLocation(510, 34);
						char_literal350=(IToken)Match(input,121,Follow._121_in_stmt_alloc3885); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal350);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:510:40: ':='
						{
						DebugLocation(510, 40);
						string_literal351=(IToken)Match(input,113,Follow._113_in_stmt_alloc3889); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal351);


						}
						break;

					}
					} finally { DebugExitSubRule(152); }

					DebugLocation(510, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3892);
					where_expr352=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr352.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 510:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(510, 61);
						// SugarCpp.g:510:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(510, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(510, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(510, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(510, 101);
						// SugarCpp.g:510:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(510, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(510, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:511:33: bracket_expr_list
					{
					DebugLocation(511, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3943);
					bracket_expr_list353=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list353.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 511:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(511, 55);
						// SugarCpp.g:511:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(511, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(511, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(511, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(511, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:512:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 512:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(512, 18);
						// SugarCpp.g:512:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(512, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(512, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(512, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(512, 58);
						// SugarCpp.g:512:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(512, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(153); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:514:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(514, 8);
				string_literal354=(IToken)Match(input,113,Follow._113_in_stmt_alloc4007); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal354);

				DebugLocation(514, 14);
				// SugarCpp.g:514:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:514:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(514, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc4011);
				where_expr355=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr355.Tree);
				DebugLocation(514, 26);
				// SugarCpp.g:514:26: ( ',' where_expr )*
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==100))
					{
						alt154 = 1;
					}


					} finally { DebugExitDecision(154); }
					switch ( alt154 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:514:27: ',' where_expr
						{
						DebugLocation(514, 27);
						char_literal356=(IToken)Match(input,100,Follow._100_in_stmt_alloc4014); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal356);

						DebugLocation(514, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc4016);
						where_expr357=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr357.Tree);

						}
						break;

					default:
						goto loop154;
					}
				}

				loop154:
					;

				} finally { DebugExitSubRule(154); }


				}



				{
				// AST REWRITE
				// elements: where_expr, ident_list, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 514:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(514, 48);
					// SugarCpp.g:514:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(514, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(514, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(514, 66);
					// SugarCpp.g:514:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(514, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(514, 78);
					// SugarCpp.g:514:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(514, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(155); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 55);
			LeaveRule("stmt_alloc", 55);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(515, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:517:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 56);
		TraceIn("stmt_modify", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal361 = default(IToken);
		IToken string_literal363 = default(IToken);
		IToken string_literal365 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op359 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr360 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr362 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr366 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal361_tree = default(CommonTree);
		CommonTree string_literal363_tree = default(CommonTree);
		CommonTree string_literal365_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(517, 1);
		try
		{
			// SugarCpp.g:518:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:518:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(518, 4);
			PushFollow(Follow._lvalue_in_stmt_modify4046);
			lvalue358=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue358.Tree);
			DebugLocation(518, 11);
			// SugarCpp.g:518:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt156=5;
			try { DebugEnterSubRule(156);
			try { DebugEnterDecision(156, false);
			switch (input.LA(1))
			{
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 118:
			case 121:
			case 128:
			case 135:
			case 181:
				{
				alt156 = 1;
				}
				break;
			case 130:
				{
				alt156 = 2;
				}
				break;
			case 117:
				{
				alt156 = 3;
				}
				break;
			case 127:
				{
				alt156 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 114:
			case 148:
			case 149:
			case 151:
			case 173:
			case 174:
			case 179:
				{
				alt156 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 156, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(156); }
			switch (alt156)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:518:13: modify_expr_op where_expr
				{
				DebugLocation(518, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify4050);
				modify_expr_op359=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op359.Tree);
				DebugLocation(518, 28);
				PushFollow(Follow._where_expr_in_stmt_modify4052);
				where_expr360=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr360.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, modify_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 518:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(518, 42);
					// SugarCpp.g:518:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(518, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(518, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(518, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:519:13: '?=' where_expr
				{
				DebugLocation(519, 13);
				string_literal361=(IToken)Match(input,130,Follow._130_in_stmt_modify4076); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(string_literal361);

				DebugLocation(519, 18);
				PushFollow(Follow._where_expr_in_stmt_modify4078);
				where_expr362=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr362.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 519:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(519, 32);
					// SugarCpp.g:519:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(519, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(519, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(519, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:520:16: '<<' where_expr
				{
				DebugLocation(520, 16);
				string_literal363=(IToken)Match(input,117,Follow._117_in_stmt_modify4105); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_117.Add(string_literal363);

				DebugLocation(520, 21);
				PushFollow(Follow._where_expr_in_stmt_modify4107);
				where_expr364=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr364.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 117
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 520:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(520, 35);
					// SugarCpp.g:520:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(520, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(520, 46);
					adaptor.AddChild(root_1, stream_117.NextNode());
					DebugLocation(520, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(520, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:521:16: '>>' where_expr
				{
				DebugLocation(521, 16);
				string_literal365=(IToken)Match(input,127,Follow._127_in_stmt_modify4136); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(string_literal365);

				DebugLocation(521, 21);
				PushFollow(Follow._where_expr_in_stmt_modify4138);
				where_expr366=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr366.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 127
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 521:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(521, 35);
					// SugarCpp.g:521:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(521, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(521, 46);
					adaptor.AddChild(root_1, stream_127.NextNode());
					DebugLocation(521, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(521, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:522:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 522:7: -> lvalue
				{
					DebugLocation(522, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(156); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 56);
			LeaveRule("stmt_modify", 56);
			LeaveRule_stmt_modify();
		}
		DebugLocation(523, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:525:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 57);
		TraceIn("where_item", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt367 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(525, 1);
		try
		{
			// SugarCpp.g:526:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:526:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(526, 4);
			PushFollow(Follow._stmt_in_where_item4172);
			stmt367=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt367.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 57);
			LeaveRule("where_item", 57);
			LeaveRule_where_item();
		}
		DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:529:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 58);
		TraceIn("where_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE368 = default(IToken);
		IToken INDENT369 = default(IToken);
		IToken NEWLINE370 = default(IToken);
		IToken string_literal371 = default(IToken);
		IToken NEWLINE373 = default(IToken);
		IToken DEDENT374 = default(IToken);
		IToken NEWLINE375 = default(IToken);
		IToken INDENT376 = default(IToken);
		IToken NEWLINE377 = default(IToken);
		IToken NEWLINE379 = default(IToken);
		IToken DEDENT380 = default(IToken);
		IToken NEWLINE381 = default(IToken);
		IToken DEDENT382 = default(IToken);
		IToken NEWLINE383 = default(IToken);
		IToken INDENT384 = default(IToken);
		IToken NEWLINE385 = default(IToken);
		IToken NEWLINE387 = default(IToken);
		IToken DEDENT388 = default(IToken);
		IToken NEWLINE389 = default(IToken);
		IToken DEDENT390 = default(IToken);
		IToken string_literal391 = default(IToken);
		IToken NEWLINE392 = default(IToken);
		IToken INDENT393 = default(IToken);
		IToken NEWLINE394 = default(IToken);
		IToken NEWLINE396 = default(IToken);
		IToken DEDENT397 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item378 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item386 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE368_tree = default(CommonTree);
		CommonTree INDENT369_tree = default(CommonTree);
		CommonTree NEWLINE370_tree = default(CommonTree);
		CommonTree string_literal371_tree = default(CommonTree);
		CommonTree NEWLINE373_tree = default(CommonTree);
		CommonTree DEDENT374_tree = default(CommonTree);
		CommonTree NEWLINE375_tree = default(CommonTree);
		CommonTree INDENT376_tree = default(CommonTree);
		CommonTree NEWLINE377_tree = default(CommonTree);
		CommonTree NEWLINE379_tree = default(CommonTree);
		CommonTree DEDENT380_tree = default(CommonTree);
		CommonTree NEWLINE381_tree = default(CommonTree);
		CommonTree DEDENT382_tree = default(CommonTree);
		CommonTree NEWLINE383_tree = default(CommonTree);
		CommonTree INDENT384_tree = default(CommonTree);
		CommonTree NEWLINE385_tree = default(CommonTree);
		CommonTree NEWLINE387_tree = default(CommonTree);
		CommonTree DEDENT388_tree = default(CommonTree);
		CommonTree NEWLINE389_tree = default(CommonTree);
		CommonTree DEDENT390_tree = default(CommonTree);
		CommonTree string_literal391_tree = default(CommonTree);
		CommonTree NEWLINE392_tree = default(CommonTree);
		CommonTree INDENT393_tree = default(CommonTree);
		CommonTree NEWLINE394_tree = default(CommonTree);
		CommonTree NEWLINE396_tree = default(CommonTree);
		CommonTree DEDENT397_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(529, 1);
		try
		{
			// SugarCpp.g:530:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:530:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(530, 4);
			// SugarCpp.g:530:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:530:5: a= expr
			{
			DebugLocation(530, 6);
			PushFollow(Follow._expr_in_where_expr4186);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 530:12: -> $a
			{
				DebugLocation(530, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(530, 19);
			// SugarCpp.g:530:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt176=3;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			try
			{
				alt176 = dfa176.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:530:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(530, 21);
				// SugarCpp.g:530:21: ( NEWLINE )+
				int cnt157=0;
				try { DebugEnterSubRule(157);
				while (true)
				{
					int alt157=2;
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==NEWLINE))
					{
						alt157 = 1;
					}


					} finally { DebugExitDecision(157); }
					switch (alt157)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:530:21: NEWLINE
						{
						DebugLocation(530, 21);
						NEWLINE368=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4196); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE368);


						}
						break;

					default:
						if (cnt157 >= 1)
							goto loop157;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee157 = new EarlyExitException( 157, input );
						DebugRecognitionException(eee157);
						throw eee157;
					}
					cnt157++;
				}
				loop157:
					;

				} finally { DebugExitSubRule(157); }

				DebugLocation(530, 30);
				INDENT369=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4199); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT369);

				DebugLocation(530, 37);
				// SugarCpp.g:530:37: ( NEWLINE )*
				try { DebugEnterSubRule(158);
				while (true)
				{
					int alt158=2;
					try { DebugEnterDecision(158, false);
					int LA158_0 = input.LA(1);

					if ((LA158_0==NEWLINE))
					{
						alt158 = 1;
					}


					} finally { DebugExitDecision(158); }
					switch ( alt158 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:530:37: NEWLINE
						{
						DebugLocation(530, 37);
						NEWLINE370=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4201); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE370);


						}
						break;

					default:
						goto loop158;
					}
				}

				loop158:
					;

				} finally { DebugExitSubRule(158); }

				DebugLocation(530, 46);
				string_literal371=(IToken)Match(input,178,Follow._178_in_where_expr4204); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(string_literal371);

				DebugLocation(530, 54);
				// SugarCpp.g:530:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt171=2;
				try { DebugEnterSubRule(171);
				try { DebugEnterDecision(171, false);
				int LA171_0 = input.LA(1);

				if ((LA171_0==IDENT||LA171_0==86||LA171_0==91||LA171_0==93||LA171_0==95||(LA171_0>=97 && LA171_0<=98)||(LA171_0>=101 && LA171_0<=102)||LA171_0==131||LA171_0==142||(LA171_0>=147 && LA171_0<=149)||LA171_0==154||LA171_0==156||LA171_0==160||LA171_0==163||LA171_0==167||(LA171_0>=171 && LA171_0<=175)||LA171_0==179||LA171_0==184))
				{
					alt171 = 1;
				}
				else if ((LA171_0==NEWLINE))
				{
					alt171 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 171, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(171); }
				switch (alt171)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:530:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(530, 56);
					PushFollow(Follow._where_item_in_where_expr4208);
					where_item372=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item372.Tree);
					DebugLocation(530, 67);
					// SugarCpp.g:530:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt165=2;
					try { DebugEnterSubRule(165);
					try { DebugEnterDecision(165, false);
					try
					{
						alt165 = dfa165.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(165); }
					switch (alt165)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:530:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(530, 69);
						// SugarCpp.g:530:69: ( NEWLINE )*
						try { DebugEnterSubRule(159);
						while (true)
						{
							int alt159=2;
							try { DebugEnterDecision(159, false);
							int LA159_0 = input.LA(1);

							if ((LA159_0==NEWLINE))
							{
								alt159 = 1;
							}


							} finally { DebugExitDecision(159); }
							switch ( alt159 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:530:69: NEWLINE
								{
								DebugLocation(530, 69);
								NEWLINE373=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4212); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE373);


								}
								break;

							default:
								goto loop159;
							}
						}

						loop159:
							;

						} finally { DebugExitSubRule(159); }

						DebugLocation(530, 78);
						DEDENT374=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4215); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT374);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 530:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(530, 88);
							// SugarCpp.g:530:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(530, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(530, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(530, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:531:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(531, 21);
						// SugarCpp.g:531:21: ( NEWLINE )+
						int cnt160=0;
						try { DebugEnterSubRule(160);
						while (true)
						{
							int alt160=2;
							try { DebugEnterDecision(160, false);
							int LA160_0 = input.LA(1);

							if ((LA160_0==NEWLINE))
							{
								alt160 = 1;
							}


							} finally { DebugExitDecision(160); }
							switch (alt160)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:21: NEWLINE
								{
								DebugLocation(531, 21);
								NEWLINE375=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4248); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE375);


								}
								break;

							default:
								if (cnt160 >= 1)
									goto loop160;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee160 = new EarlyExitException( 160, input );
								DebugRecognitionException(eee160);
								throw eee160;
							}
							cnt160++;
						}
						loop160:
							;

						} finally { DebugExitSubRule(160); }

						DebugLocation(531, 30);
						INDENT376=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4251); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT376);

						DebugLocation(531, 37);
						// SugarCpp.g:531:37: ( NEWLINE )*
						try { DebugEnterSubRule(161);
						while (true)
						{
							int alt161=2;
							try { DebugEnterDecision(161, false);
							int LA161_0 = input.LA(1);

							if ((LA161_0==NEWLINE))
							{
								alt161 = 1;
							}


							} finally { DebugExitDecision(161); }
							switch ( alt161 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:37: NEWLINE
								{
								DebugLocation(531, 37);
								NEWLINE377=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4253); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE377);


								}
								break;

							default:
								goto loop161;
							}
						}

						loop161:
							;

						} finally { DebugExitSubRule(161); }

						DebugLocation(531, 46);
						// SugarCpp.g:531:46: ( where_item ( NEWLINE )+ )+
						int cnt163=0;
						try { DebugEnterSubRule(163);
						while (true)
						{
							int alt163=2;
							try { DebugEnterDecision(163, false);
							int LA163_0 = input.LA(1);

							if ((LA163_0==IDENT||LA163_0==86||LA163_0==91||LA163_0==93||LA163_0==95||(LA163_0>=97 && LA163_0<=98)||(LA163_0>=101 && LA163_0<=102)||LA163_0==131||LA163_0==142||(LA163_0>=147 && LA163_0<=149)||LA163_0==154||LA163_0==156||LA163_0==160||LA163_0==163||LA163_0==167||(LA163_0>=171 && LA163_0<=175)||LA163_0==179||LA163_0==184))
							{
								alt163 = 1;
							}


							} finally { DebugExitDecision(163); }
							switch (alt163)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:47: where_item ( NEWLINE )+
								{
								DebugLocation(531, 47);
								PushFollow(Follow._where_item_in_where_expr4257);
								where_item378=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item378.Tree);
								DebugLocation(531, 58);
								// SugarCpp.g:531:58: ( NEWLINE )+
								int cnt162=0;
								try { DebugEnterSubRule(162);
								while (true)
								{
									int alt162=2;
									try { DebugEnterDecision(162, false);
									int LA162_0 = input.LA(1);

									if ((LA162_0==NEWLINE))
									{
										alt162 = 1;
									}


									} finally { DebugExitDecision(162); }
									switch (alt162)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:531:58: NEWLINE
										{
										DebugLocation(531, 58);
										NEWLINE379=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4259); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE379);


										}
										break;

									default:
										if (cnt162 >= 1)
											goto loop162;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee162 = new EarlyExitException( 162, input );
										DebugRecognitionException(eee162);
										throw eee162;
									}
									cnt162++;
								}
								loop162:
									;

								} finally { DebugExitSubRule(162); }


								}
								break;

							default:
								if (cnt163 >= 1)
									goto loop163;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee163 = new EarlyExitException( 163, input );
								DebugRecognitionException(eee163);
								throw eee163;
							}
							cnt163++;
						}
						loop163:
							;

						} finally { DebugExitSubRule(163); }

						DebugLocation(531, 69);
						DEDENT380=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4264); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT380);

						DebugLocation(531, 76);
						// SugarCpp.g:531:76: ( NEWLINE )*
						try { DebugEnterSubRule(164);
						while (true)
						{
							int alt164=2;
							try { DebugEnterDecision(164, false);
							int LA164_0 = input.LA(1);

							if ((LA164_0==NEWLINE))
							{
								alt164 = 1;
							}


							} finally { DebugExitDecision(164); }
							switch ( alt164 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:76: NEWLINE
								{
								DebugLocation(531, 76);
								NEWLINE381=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4266); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE381);


								}
								break;

							default:
								goto loop164;
							}
						}

						loop164:
							;

						} finally { DebugExitSubRule(164); }

						DebugLocation(531, 85);
						DEDENT382=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4269); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT382);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 531:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(531, 95);
							// SugarCpp.g:531:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(531, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(531, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(531, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(531, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(165); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:533:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(533, 17);
					// SugarCpp.g:533:17: ( NEWLINE )+
					int cnt166=0;
					try { DebugEnterSubRule(166);
					while (true)
					{
						int alt166=2;
						try { DebugEnterDecision(166, false);
						int LA166_0 = input.LA(1);

						if ((LA166_0==NEWLINE))
						{
							alt166 = 1;
						}


						} finally { DebugExitDecision(166); }
						switch (alt166)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:533:17: NEWLINE
							{
							DebugLocation(533, 17);
							NEWLINE383=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4319); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE383);


							}
							break;

						default:
							if (cnt166 >= 1)
								goto loop166;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee166 = new EarlyExitException( 166, input );
							DebugRecognitionException(eee166);
							throw eee166;
						}
						cnt166++;
					}
					loop166:
						;

					} finally { DebugExitSubRule(166); }

					DebugLocation(533, 26);
					INDENT384=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4322); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT384);

					DebugLocation(533, 33);
					// SugarCpp.g:533:33: ( NEWLINE )*
					try { DebugEnterSubRule(167);
					while (true)
					{
						int alt167=2;
						try { DebugEnterDecision(167, false);
						int LA167_0 = input.LA(1);

						if ((LA167_0==NEWLINE))
						{
							alt167 = 1;
						}


						} finally { DebugExitDecision(167); }
						switch ( alt167 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:533:33: NEWLINE
							{
							DebugLocation(533, 33);
							NEWLINE385=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4324); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE385);


							}
							break;

						default:
							goto loop167;
						}
					}

					loop167:
						;

					} finally { DebugExitSubRule(167); }

					DebugLocation(533, 42);
					// SugarCpp.g:533:42: ( where_item ( NEWLINE )+ )+
					int cnt169=0;
					try { DebugEnterSubRule(169);
					while (true)
					{
						int alt169=2;
						try { DebugEnterDecision(169, false);
						int LA169_0 = input.LA(1);

						if ((LA169_0==IDENT||LA169_0==86||LA169_0==91||LA169_0==93||LA169_0==95||(LA169_0>=97 && LA169_0<=98)||(LA169_0>=101 && LA169_0<=102)||LA169_0==131||LA169_0==142||(LA169_0>=147 && LA169_0<=149)||LA169_0==154||LA169_0==156||LA169_0==160||LA169_0==163||LA169_0==167||(LA169_0>=171 && LA169_0<=175)||LA169_0==179||LA169_0==184))
						{
							alt169 = 1;
						}


						} finally { DebugExitDecision(169); }
						switch (alt169)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:533:43: where_item ( NEWLINE )+
							{
							DebugLocation(533, 43);
							PushFollow(Follow._where_item_in_where_expr4328);
							where_item386=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item386.Tree);
							DebugLocation(533, 54);
							// SugarCpp.g:533:54: ( NEWLINE )+
							int cnt168=0;
							try { DebugEnterSubRule(168);
							while (true)
							{
								int alt168=2;
								try { DebugEnterDecision(168, false);
								int LA168_0 = input.LA(1);

								if ((LA168_0==NEWLINE))
								{
									alt168 = 1;
								}


								} finally { DebugExitDecision(168); }
								switch (alt168)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:533:54: NEWLINE
									{
									DebugLocation(533, 54);
									NEWLINE387=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4330); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE387);


									}
									break;

								default:
									if (cnt168 >= 1)
										goto loop168;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee168 = new EarlyExitException( 168, input );
									DebugRecognitionException(eee168);
									throw eee168;
								}
								cnt168++;
							}
							loop168:
								;

							} finally { DebugExitSubRule(168); }


							}
							break;

						default:
							if (cnt169 >= 1)
								goto loop169;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee169 = new EarlyExitException( 169, input );
							DebugRecognitionException(eee169);
							throw eee169;
						}
						cnt169++;
					}
					loop169:
						;

					} finally { DebugExitSubRule(169); }

					DebugLocation(533, 65);
					DEDENT388=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4335); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT388);

					DebugLocation(533, 72);
					// SugarCpp.g:533:72: ( NEWLINE )*
					try { DebugEnterSubRule(170);
					while (true)
					{
						int alt170=2;
						try { DebugEnterDecision(170, false);
						int LA170_0 = input.LA(1);

						if ((LA170_0==NEWLINE))
						{
							alt170 = 1;
						}


						} finally { DebugExitDecision(170); }
						switch ( alt170 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:533:72: NEWLINE
							{
							DebugLocation(533, 72);
							NEWLINE389=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4337); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE389);


							}
							break;

						default:
							goto loop170;
						}
					}

					loop170:
						;

					} finally { DebugExitSubRule(170); }

					DebugLocation(533, 81);
					DEDENT390=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4340); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT390);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 533:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(533, 91);
						// SugarCpp.g:533:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(533, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(533, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(533, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(533, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(171); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:535:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(535, 9);
				string_literal391=(IToken)Match(input,178,Follow._178_in_where_expr4378); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(string_literal391);

				DebugLocation(535, 17);
				// SugarCpp.g:535:17: ( NEWLINE )+
				int cnt172=0;
				try { DebugEnterSubRule(172);
				while (true)
				{
					int alt172=2;
					try { DebugEnterDecision(172, false);
					int LA172_0 = input.LA(1);

					if ((LA172_0==NEWLINE))
					{
						alt172 = 1;
					}


					} finally { DebugExitDecision(172); }
					switch (alt172)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:17: NEWLINE
						{
						DebugLocation(535, 17);
						NEWLINE392=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4380); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE392);


						}
						break;

					default:
						if (cnt172 >= 1)
							goto loop172;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee172 = new EarlyExitException( 172, input );
						DebugRecognitionException(eee172);
						throw eee172;
					}
					cnt172++;
				}
				loop172:
					;

				} finally { DebugExitSubRule(172); }

				DebugLocation(535, 26);
				INDENT393=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4383); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT393);

				DebugLocation(535, 33);
				// SugarCpp.g:535:33: ( NEWLINE )*
				try { DebugEnterSubRule(173);
				while (true)
				{
					int alt173=2;
					try { DebugEnterDecision(173, false);
					int LA173_0 = input.LA(1);

					if ((LA173_0==NEWLINE))
					{
						alt173 = 1;
					}


					} finally { DebugExitDecision(173); }
					switch ( alt173 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:33: NEWLINE
						{
						DebugLocation(535, 33);
						NEWLINE394=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4385); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE394);


						}
						break;

					default:
						goto loop173;
					}
				}

				loop173:
					;

				} finally { DebugExitSubRule(173); }

				DebugLocation(535, 42);
				// SugarCpp.g:535:42: ( where_item ( NEWLINE )+ )+
				int cnt175=0;
				try { DebugEnterSubRule(175);
				while (true)
				{
					int alt175=2;
					try { DebugEnterDecision(175, false);
					int LA175_0 = input.LA(1);

					if ((LA175_0==IDENT||LA175_0==86||LA175_0==91||LA175_0==93||LA175_0==95||(LA175_0>=97 && LA175_0<=98)||(LA175_0>=101 && LA175_0<=102)||LA175_0==131||LA175_0==142||(LA175_0>=147 && LA175_0<=149)||LA175_0==154||LA175_0==156||LA175_0==160||LA175_0==163||LA175_0==167||(LA175_0>=171 && LA175_0<=175)||LA175_0==179||LA175_0==184))
					{
						alt175 = 1;
					}


					} finally { DebugExitDecision(175); }
					switch (alt175)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:43: where_item ( NEWLINE )+
						{
						DebugLocation(535, 43);
						PushFollow(Follow._where_item_in_where_expr4389);
						where_item395=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item395.Tree);
						DebugLocation(535, 54);
						// SugarCpp.g:535:54: ( NEWLINE )+
						int cnt174=0;
						try { DebugEnterSubRule(174);
						while (true)
						{
							int alt174=2;
							try { DebugEnterDecision(174, false);
							int LA174_0 = input.LA(1);

							if ((LA174_0==NEWLINE))
							{
								alt174 = 1;
							}


							} finally { DebugExitDecision(174); }
							switch (alt174)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:535:54: NEWLINE
								{
								DebugLocation(535, 54);
								NEWLINE396=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4391); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE396);


								}
								break;

							default:
								if (cnt174 >= 1)
									goto loop174;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee174 = new EarlyExitException( 174, input );
								DebugRecognitionException(eee174);
								throw eee174;
							}
							cnt174++;
						}
						loop174:
							;

						} finally { DebugExitSubRule(174); }


						}
						break;

					default:
						if (cnt175 >= 1)
							goto loop175;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee175 = new EarlyExitException( 175, input );
						DebugRecognitionException(eee175);
						throw eee175;
					}
					cnt175++;
				}
				loop175:
					;

				} finally { DebugExitSubRule(175); }

				DebugLocation(535, 65);
				DEDENT397=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4396); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT397);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 535:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(535, 75);
					// SugarCpp.g:535:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(535, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(535, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(535, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(535, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:536:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 536:15: -> expr
				{
					DebugLocation(536, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(176); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 58);
			LeaveRule("where_expr", 58);
			LeaveRule_where_expr();
		}
		DebugLocation(538, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:540:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 59);
		TraceIn("let_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal398 = default(IToken);
		IToken string_literal400 = default(IToken);
		IToken NEWLINE402 = default(IToken);
		IToken INDENT403 = default(IToken);
		IToken NEWLINE404 = default(IToken);
		IToken NEWLINE406 = default(IToken);
		IToken DEDENT407 = default(IToken);
		IToken NEWLINE409 = default(IToken);
		IToken INDENT410 = default(IToken);
		IToken NEWLINE411 = default(IToken);
		IToken NEWLINE413 = default(IToken);
		IToken string_literal414 = default(IToken);
		IToken NEWLINE416 = default(IToken);
		IToken DEDENT417 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr405 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr408 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item412 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr415 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal398_tree = default(CommonTree);
		CommonTree string_literal400_tree = default(CommonTree);
		CommonTree NEWLINE402_tree = default(CommonTree);
		CommonTree INDENT403_tree = default(CommonTree);
		CommonTree NEWLINE404_tree = default(CommonTree);
		CommonTree NEWLINE406_tree = default(CommonTree);
		CommonTree DEDENT407_tree = default(CommonTree);
		CommonTree NEWLINE409_tree = default(CommonTree);
		CommonTree INDENT410_tree = default(CommonTree);
		CommonTree NEWLINE411_tree = default(CommonTree);
		CommonTree NEWLINE413_tree = default(CommonTree);
		CommonTree string_literal414_tree = default(CommonTree);
		CommonTree NEWLINE416_tree = default(CommonTree);
		CommonTree DEDENT417_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(540, 1);
		try
		{
			// SugarCpp.g:541:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:541:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(541, 4);
			string_literal398=(IToken)Match(input,154,Follow._154_in_let_expr4454); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_154.Add(string_literal398);

			DebugLocation(541, 10);
			PushFollow(Follow._where_item_in_let_expr4456);
			where_item399=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item399.Tree);
			DebugLocation(541, 21);
			// SugarCpp.g:541:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			int LA187_0 = input.LA(1);

			if ((LA187_0==151))
			{
				alt187 = 1;
			}
			else if ((LA187_0==NEWLINE))
			{
				alt187 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 187, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:541:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(541, 23);
				string_literal400=(IToken)Match(input,151,Follow._151_in_let_expr4460); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_151.Add(string_literal400);

				DebugLocation(541, 28);
				// SugarCpp.g:541:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt181=2;
				try { DebugEnterSubRule(181);
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==IDENT||LA181_0==NUMBER||LA181_0==STRING||LA181_0==86||LA181_0==91||LA181_0==93||LA181_0==95||(LA181_0>=97 && LA181_0<=98)||(LA181_0>=101 && LA181_0<=102)||(LA181_0>=131 && LA181_0<=132)||LA181_0==154||LA181_0==157||(LA181_0>=159 && LA181_0<=160)||LA181_0==184))
				{
					alt181 = 1;
				}
				else if ((LA181_0==NEWLINE))
				{
					alt181 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 181, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:541:30: expr
					{
					DebugLocation(541, 30);
					PushFollow(Follow._expr_in_let_expr4464);
					expr401=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr401.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 541:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(541, 38);
						// SugarCpp.g:541:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(541, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(541, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(541, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(541, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:542:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(542, 12);
					// SugarCpp.g:542:12: ( NEWLINE )+
					int cnt177=0;
					try { DebugEnterSubRule(177);
					while (true)
					{
						int alt177=2;
						try { DebugEnterDecision(177, false);
						int LA177_0 = input.LA(1);

						if ((LA177_0==NEWLINE))
						{
							alt177 = 1;
						}


						} finally { DebugExitDecision(177); }
						switch (alt177)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:542:12: NEWLINE
							{
							DebugLocation(542, 12);
							NEWLINE402=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4488); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE402);


							}
							break;

						default:
							if (cnt177 >= 1)
								goto loop177;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee177 = new EarlyExitException( 177, input );
							DebugRecognitionException(eee177);
							throw eee177;
						}
						cnt177++;
					}
					loop177:
						;

					} finally { DebugExitSubRule(177); }

					DebugLocation(542, 21);
					// SugarCpp.g:542:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt180=2;
					try { DebugEnterSubRule(180);
					try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0==INDENT))
					{
						alt180 = 1;
					}
					else if ((LA180_0==IDENT||LA180_0==NUMBER||LA180_0==STRING||LA180_0==86||LA180_0==91||LA180_0==93||LA180_0==95||(LA180_0>=97 && LA180_0<=98)||(LA180_0>=101 && LA180_0<=102)||(LA180_0>=131 && LA180_0<=132)||LA180_0==154||LA180_0==157||(LA180_0>=159 && LA180_0<=160)||LA180_0==184))
					{
						alt180 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 180, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(180); }
					switch (alt180)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:542:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(542, 23);
						INDENT403=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4493); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT403);

						DebugLocation(542, 30);
						// SugarCpp.g:542:30: ( NEWLINE )*
						try { DebugEnterSubRule(178);
						while (true)
						{
							int alt178=2;
							try { DebugEnterDecision(178, false);
							int LA178_0 = input.LA(1);

							if ((LA178_0==NEWLINE))
							{
								alt178 = 1;
							}


							} finally { DebugExitDecision(178); }
							switch ( alt178 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:542:30: NEWLINE
								{
								DebugLocation(542, 30);
								NEWLINE404=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4495); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE404);


								}
								break;

							default:
								goto loop178;
							}
						}

						loop178:
							;

						} finally { DebugExitSubRule(178); }

						DebugLocation(542, 39);
						PushFollow(Follow._expr_in_let_expr4498);
						expr405=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr405.Tree);
						DebugLocation(542, 44);
						// SugarCpp.g:542:44: ( NEWLINE )+
						int cnt179=0;
						try { DebugEnterSubRule(179);
						while (true)
						{
							int alt179=2;
							try { DebugEnterDecision(179, false);
							int LA179_0 = input.LA(1);

							if ((LA179_0==NEWLINE))
							{
								alt179 = 1;
							}


							} finally { DebugExitDecision(179); }
							switch (alt179)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:542:44: NEWLINE
								{
								DebugLocation(542, 44);
								NEWLINE406=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4500); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE406);


								}
								break;

							default:
								if (cnt179 >= 1)
									goto loop179;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee179 = new EarlyExitException( 179, input );
								DebugRecognitionException(eee179);
								throw eee179;
							}
							cnt179++;
						}
						loop179:
							;

						} finally { DebugExitSubRule(179); }

						DebugLocation(542, 53);
						DEDENT407=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4503); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT407);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 542:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(542, 63);
							// SugarCpp.g:542:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(542, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(542, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(542, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(542, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:543:14: expr
						{
						DebugLocation(543, 14);
						PushFollow(Follow._expr_in_let_expr4529);
						expr408=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr408.Tree);


						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 543:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(543, 22);
							// SugarCpp.g:543:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(543, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(543, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(543, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(543, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(180); }


					}
					break;

				}
				} finally { DebugExitSubRule(181); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:546:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(546, 11);
				// SugarCpp.g:546:11: ( NEWLINE )+
				int cnt182=0;
				try { DebugEnterSubRule(182);
				while (true)
				{
					int alt182=2;
					try { DebugEnterDecision(182, false);
					int LA182_0 = input.LA(1);

					if ((LA182_0==NEWLINE))
					{
						alt182 = 1;
					}


					} finally { DebugExitDecision(182); }
					switch (alt182)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:546:11: NEWLINE
						{
						DebugLocation(546, 11);
						NEWLINE409=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4576); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE409);


						}
						break;

					default:
						if (cnt182 >= 1)
							goto loop182;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee182 = new EarlyExitException( 182, input );
						DebugRecognitionException(eee182);
						throw eee182;
					}
					cnt182++;
				}
				loop182:
					;

				} finally { DebugExitSubRule(182); }

				DebugLocation(546, 20);
				INDENT410=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4579); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT410);

				DebugLocation(546, 27);
				// SugarCpp.g:546:27: ( NEWLINE )*
				try { DebugEnterSubRule(183);
				while (true)
				{
					int alt183=2;
					try { DebugEnterDecision(183, false);
					int LA183_0 = input.LA(1);

					if ((LA183_0==NEWLINE))
					{
						alt183 = 1;
					}


					} finally { DebugExitDecision(183); }
					switch ( alt183 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:546:27: NEWLINE
						{
						DebugLocation(546, 27);
						NEWLINE411=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4581); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE411);


						}
						break;

					default:
						goto loop183;
					}
				}

				loop183:
					;

				} finally { DebugExitSubRule(183); }

				DebugLocation(546, 36);
				// SugarCpp.g:546:36: ( where_item ( NEWLINE )+ )+
				int cnt185=0;
				try { DebugEnterSubRule(185);
				while (true)
				{
					int alt185=2;
					try { DebugEnterDecision(185, false);
					int LA185_0 = input.LA(1);

					if ((LA185_0==IDENT||LA185_0==86||LA185_0==91||LA185_0==93||LA185_0==95||(LA185_0>=97 && LA185_0<=98)||(LA185_0>=101 && LA185_0<=102)||LA185_0==131||LA185_0==142||(LA185_0>=147 && LA185_0<=149)||LA185_0==154||LA185_0==156||LA185_0==160||LA185_0==163||LA185_0==167||(LA185_0>=171 && LA185_0<=175)||LA185_0==179||LA185_0==184))
					{
						alt185 = 1;
					}


					} finally { DebugExitDecision(185); }
					switch (alt185)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:546:37: where_item ( NEWLINE )+
						{
						DebugLocation(546, 37);
						PushFollow(Follow._where_item_in_let_expr4585);
						where_item412=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item412.Tree);
						DebugLocation(546, 48);
						// SugarCpp.g:546:48: ( NEWLINE )+
						int cnt184=0;
						try { DebugEnterSubRule(184);
						while (true)
						{
							int alt184=2;
							try { DebugEnterDecision(184, false);
							int LA184_0 = input.LA(1);

							if ((LA184_0==NEWLINE))
							{
								alt184 = 1;
							}


							} finally { DebugExitDecision(184); }
							switch (alt184)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:546:48: NEWLINE
								{
								DebugLocation(546, 48);
								NEWLINE413=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4587); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE413);


								}
								break;

							default:
								if (cnt184 >= 1)
									goto loop184;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee184 = new EarlyExitException( 184, input );
								DebugRecognitionException(eee184);
								throw eee184;
							}
							cnt184++;
						}
						loop184:
							;

						} finally { DebugExitSubRule(184); }


						}
						break;

					default:
						if (cnt185 >= 1)
							goto loop185;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee185 = new EarlyExitException( 185, input );
						DebugRecognitionException(eee185);
						throw eee185;
					}
					cnt185++;
				}
				loop185:
					;

				} finally { DebugExitSubRule(185); }

				DebugLocation(546, 59);
				string_literal414=(IToken)Match(input,151,Follow._151_in_let_expr4592); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_151.Add(string_literal414);

				DebugLocation(546, 64);
				PushFollow(Follow._expr_in_let_expr4594);
				expr415=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr415.Tree);
				DebugLocation(546, 69);
				// SugarCpp.g:546:69: ( NEWLINE )+
				int cnt186=0;
				try { DebugEnterSubRule(186);
				while (true)
				{
					int alt186=2;
					try { DebugEnterDecision(186, false);
					int LA186_0 = input.LA(1);

					if ((LA186_0==NEWLINE))
					{
						alt186 = 1;
					}


					} finally { DebugExitDecision(186); }
					switch (alt186)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:546:69: NEWLINE
						{
						DebugLocation(546, 69);
						NEWLINE416=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4596); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE416);


						}
						break;

					default:
						if (cnt186 >= 1)
							goto loop186;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee186 = new EarlyExitException( 186, input );
						DebugRecognitionException(eee186);
						throw eee186;
					}
					cnt186++;
				}
				loop186:
					;

				} finally { DebugExitSubRule(186); }

				DebugLocation(546, 78);
				DEDENT417=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4599); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT417);



				{
				// AST REWRITE
				// elements: expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 546:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(546, 88);
					// SugarCpp.g:546:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(546, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(546, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(546, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(546, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(187); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 59);
			LeaveRule("let_expr", 59);
			LeaveRule_let_expr();
		}
		DebugLocation(548, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:550:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 60);
		TraceIn("match_item", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal418 = default(IToken);
		IToken string_literal420 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr419 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr421 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal418_tree = default(CommonTree);
		CommonTree string_literal420_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(550, 1);
		try
		{
			// SugarCpp.g:551:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:551:4: '|' expr '=>' where_expr
			{
			DebugLocation(551, 4);
			char_literal418=(IToken)Match(input,180,Follow._180_in_match_item4631); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_180.Add(char_literal418);

			DebugLocation(551, 8);
			PushFollow(Follow._expr_in_match_item4633);
			expr419=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr419.Tree);
			DebugLocation(551, 13);
			string_literal420=(IToken)Match(input,124,Follow._124_in_match_item4635); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal420);

			DebugLocation(551, 18);
			PushFollow(Follow._where_expr_in_match_item4637);
			where_expr421=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr421.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 551:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(551, 32);
				// SugarCpp.g:551:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(551, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(551, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(551, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 60);
			LeaveRule("match_item", 60);
			LeaveRule_match_item();
		}
		DebugLocation(552, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:554:1: match_expr : 'match' ( expr )? ( 'returns' type_name )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 61);
		TraceIn("match_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal422 = default(IToken);
		IToken string_literal424 = default(IToken);
		IToken NEWLINE426 = default(IToken);
		IToken INDENT427 = default(IToken);
		IToken NEWLINE428 = default(IToken);
		IToken NEWLINE430 = default(IToken);
		IToken DEDENT431 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name425 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item429 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal422_tree = default(CommonTree);
		CommonTree string_literal424_tree = default(CommonTree);
		CommonTree NEWLINE426_tree = default(CommonTree);
		CommonTree INDENT427_tree = default(CommonTree);
		CommonTree NEWLINE428_tree = default(CommonTree);
		CommonTree NEWLINE430_tree = default(CommonTree);
		CommonTree DEDENT431_tree = default(CommonTree);
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(554, 1);
		try
		{
			// SugarCpp.g:555:2: ( 'match' ( expr )? ( 'returns' type_name )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:555:4: 'match' ( expr )? ( 'returns' type_name )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(555, 4);
			string_literal422=(IToken)Match(input,157,Follow._157_in_match_expr4658); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_157.Add(string_literal422);

			DebugLocation(555, 12);
			// SugarCpp.g:555:12: ( expr )?
			int alt188=2;
			try { DebugEnterSubRule(188);
			try { DebugEnterDecision(188, false);
			int LA188_0 = input.LA(1);

			if ((LA188_0==IDENT||LA188_0==NUMBER||LA188_0==STRING||LA188_0==86||LA188_0==91||LA188_0==93||LA188_0==95||(LA188_0>=97 && LA188_0<=98)||(LA188_0>=101 && LA188_0<=102)||(LA188_0>=131 && LA188_0<=132)||LA188_0==154||LA188_0==157||(LA188_0>=159 && LA188_0<=160)||LA188_0==184))
			{
				alt188 = 1;
			}
			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:555:12: expr
				{
				DebugLocation(555, 12);
				PushFollow(Follow._expr_in_match_expr4660);
				expr423=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr423.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(188); }

			DebugLocation(555, 18);
			// SugarCpp.g:555:18: ( 'returns' type_name )?
			int alt189=2;
			try { DebugEnterSubRule(189);
			try { DebugEnterDecision(189, false);
			int LA189_0 = input.LA(1);

			if ((LA189_0==164))
			{
				alt189 = 1;
			}
			} finally { DebugExitDecision(189); }
			switch (alt189)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:555:19: 'returns' type_name
				{
				DebugLocation(555, 19);
				string_literal424=(IToken)Match(input,164,Follow._164_in_match_expr4664); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal424);

				DebugLocation(555, 29);
				PushFollow(Follow._type_name_in_match_expr4666);
				type_name425=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name425.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(189); }

			DebugLocation(555, 41);
			// SugarCpp.g:555:41: ( NEWLINE )+
			int cnt190=0;
			try { DebugEnterSubRule(190);
			while (true)
			{
				int alt190=2;
				try { DebugEnterDecision(190, false);
				int LA190_0 = input.LA(1);

				if ((LA190_0==NEWLINE))
				{
					alt190 = 1;
				}


				} finally { DebugExitDecision(190); }
				switch (alt190)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:555:41: NEWLINE
					{
					DebugLocation(555, 41);
					NEWLINE426=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4670); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE426);


					}
					break;

				default:
					if (cnt190 >= 1)
						goto loop190;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee190 = new EarlyExitException( 190, input );
					DebugRecognitionException(eee190);
					throw eee190;
				}
				cnt190++;
			}
			loop190:
				;

			} finally { DebugExitSubRule(190); }

			DebugLocation(555, 50);
			INDENT427=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4673); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT427);

			DebugLocation(555, 57);
			// SugarCpp.g:555:57: ( NEWLINE )*
			try { DebugEnterSubRule(191);
			while (true)
			{
				int alt191=2;
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==NEWLINE))
				{
					alt191 = 1;
				}


				} finally { DebugExitDecision(191); }
				switch ( alt191 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:555:57: NEWLINE
					{
					DebugLocation(555, 57);
					NEWLINE428=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4675); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE428);


					}
					break;

				default:
					goto loop191;
				}
			}

			loop191:
				;

			} finally { DebugExitSubRule(191); }

			DebugLocation(555, 66);
			// SugarCpp.g:555:66: ( match_item ( NEWLINE )+ )+
			int cnt193=0;
			try { DebugEnterSubRule(193);
			while (true)
			{
				int alt193=2;
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==180))
				{
					alt193 = 1;
				}


				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:555:67: match_item ( NEWLINE )+
					{
					DebugLocation(555, 67);
					PushFollow(Follow._match_item_in_match_expr4679);
					match_item429=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item429.Tree);
					DebugLocation(555, 78);
					// SugarCpp.g:555:78: ( NEWLINE )+
					int cnt192=0;
					try { DebugEnterSubRule(192);
					while (true)
					{
						int alt192=2;
						try { DebugEnterDecision(192, false);
						int LA192_0 = input.LA(1);

						if ((LA192_0==NEWLINE))
						{
							alt192 = 1;
						}


						} finally { DebugExitDecision(192); }
						switch (alt192)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:555:78: NEWLINE
							{
							DebugLocation(555, 78);
							NEWLINE430=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4681); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE430);


							}
							break;

						default:
							if (cnt192 >= 1)
								goto loop192;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee192 = new EarlyExitException( 192, input );
							DebugRecognitionException(eee192);
							throw eee192;
						}
						cnt192++;
					}
					loop192:
						;

					} finally { DebugExitSubRule(192); }


					}
					break;

				default:
					if (cnt193 >= 1)
						goto loop193;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee193 = new EarlyExitException( 193, input );
					DebugRecognitionException(eee193);
					throw eee193;
				}
				cnt193++;
			}
			loop193:
				;

			} finally { DebugExitSubRule(193); }

			DebugLocation(555, 89);
			DEDENT431=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4686); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT431);



			{
			// AST REWRITE
			// elements: expr, type_name, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 555:96: -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ )
			{
				DebugLocation(555, 99);
				// SugarCpp.g:555:99: ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(555, 101);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(555, 112);
				// SugarCpp.g:555:112: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(555, 112);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(555, 118);
				// SugarCpp.g:555:118: ( type_name )?
				if (stream_type_name.HasNext)
				{
					DebugLocation(555, 118);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();
				DebugLocation(555, 129);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(555, 129);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 61);
			LeaveRule("match_expr", 61);
			LeaveRule_match_expr();
		}
		DebugLocation(556, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:558:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 62);
		TraceIn("expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr433 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr434 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(558, 1);
		try
		{
			// SugarCpp.g:559:2: ( feed_expr | match_expr | let_expr )
			int alt194=3;
			try { DebugEnterDecision(194, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 86:
			case 91:
			case 93:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 131:
			case 132:
			case 159:
			case 160:
			case 184:
				{
				alt194 = 1;
				}
				break;
			case 157:
				{
				alt194 = 2;
				}
				break;
			case 154:
				{
				alt194 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:559:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(559, 4);
				PushFollow(Follow._feed_expr_in_expr4712);
				feed_expr432=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr432.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:560:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(560, 4);
				PushFollow(Follow._match_expr_in_expr4717);
				match_expr433=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr433.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:561:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(561, 4);
				PushFollow(Follow._let_expr_in_expr4722);
				let_expr434=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr434.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 62);
			LeaveRule("expr", 62);
			LeaveRule_expr();
		}
		DebugLocation(562, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:564:1: feed_expr : ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 63);
		TraceIn("feed_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal435 = default(IToken);
		IToken string_literal437 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr436 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr438 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr439 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal435_tree = default(CommonTree);
		CommonTree string_literal437_tree = default(CommonTree);
		RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(564, 1);
		try
		{
			// SugarCpp.g:565:2: ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt196=2;
			try { DebugEnterDecision(196, false);
			switch (input.LA(1))
			{
			case 93:
				{
				int LA196_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 86:
			case 91:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 160:
			case 184:
				{
				int LA196_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 159:
				{
				int LA196_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA196_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA196_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA196_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA196_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt196 = 1;
				}
				else if ((true))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				alt196 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(196); }
			switch (alt196)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:565:4: ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(565, 36);
				// SugarCpp.g:565:36: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:565:37: a= modify_expr
				{
				DebugLocation(565, 38);
				PushFollow(Follow._modify_expr_in_feed_expr4751);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 565:51: -> $a
				{
					DebugLocation(565, 55);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(565, 58);
				// SugarCpp.g:565:58: ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt195=2;
				try { DebugEnterSubRule(195);
				try { DebugEnterDecision(195, false);
				int LA195_0 = input.LA(1);

				if ((LA195_0==120))
				{
					alt195 = 1;
				}
				else if ((LA195_0==182))
				{
					alt195 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 195, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(195); }
				switch (alt195)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:565:60: '<|' list_expr
					{
					DebugLocation(565, 60);
					string_literal435=(IToken)Match(input,120,Follow._120_in_feed_expr4761); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_120.Add(string_literal435);

					DebugLocation(565, 65);
					PushFollow(Follow._list_expr_in_feed_expr4763);
					list_expr436=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr436.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 565:75: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(565, 78);
						// SugarCpp.g:565:78: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(565, 80);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(565, 91);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(565, 101);
						// SugarCpp.g:565:101: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(565, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(565, 113);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:566:18: '|>' list_expr
					{
					DebugLocation(566, 18);
					string_literal437=(IToken)Match(input,182,Follow._182_in_feed_expr4797); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_182.Add(string_literal437);

					DebugLocation(566, 23);
					PushFollow(Follow._list_expr_in_feed_expr4799);
					list_expr438=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr438.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 566:33: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(566, 36);
						// SugarCpp.g:566:36: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(566, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(566, 48);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(566, 58);
						// SugarCpp.g:566:58: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(566, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(566, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(195); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:568:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(568, 4);
				PushFollow(Follow._list_expr_in_feed_expr4836);
				list_expr439=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr439.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 63);
			LeaveRule("feed_expr", 63);
			LeaveRule_feed_expr();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:571:1: list_expr : ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 64);
		TraceIn("list_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal440 = default(IToken);
		IToken string_literal442 = default(IToken);
		IToken char_literal444 = default(IToken);
		IToken char_literal446 = default(IToken);
		IToken char_literal447 = default(IToken);
		IToken char_literal449 = default(IToken);
		IToken char_literal450 = default(IToken);
		IToken NEWLINE451 = default(IToken);
		IToken INDENT452 = default(IToken);
		IToken DEDENT453 = default(IToken);
		IToken char_literal455 = default(IToken);
		IToken NEWLINE456 = default(IToken);
		IToken INDENT457 = default(IToken);
		IToken DEDENT458 = default(IToken);
		IToken char_literal460 = default(IToken);
		IToken NEWLINE461 = default(IToken);
		IToken INDENT462 = default(IToken);
		IToken DEDENT463 = default(IToken);
		IToken char_literal464 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item443 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item445 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr454 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr459 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr465 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree string_literal442_tree = default(CommonTree);
		CommonTree char_literal444_tree = default(CommonTree);
		CommonTree char_literal446_tree = default(CommonTree);
		CommonTree char_literal447_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		CommonTree char_literal450_tree = default(CommonTree);
		CommonTree NEWLINE451_tree = default(CommonTree);
		CommonTree INDENT452_tree = default(CommonTree);
		CommonTree DEDENT453_tree = default(CommonTree);
		CommonTree char_literal455_tree = default(CommonTree);
		CommonTree NEWLINE456_tree = default(CommonTree);
		CommonTree INDENT457_tree = default(CommonTree);
		CommonTree DEDENT458_tree = default(CommonTree);
		CommonTree char_literal460_tree = default(CommonTree);
		CommonTree NEWLINE461_tree = default(CommonTree);
		CommonTree INDENT462_tree = default(CommonTree);
		CommonTree DEDENT463_tree = default(CommonTree);
		CommonTree char_literal464_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt203=3;
			try { DebugEnterDecision(203, false);
			int LA203_0 = input.LA(1);

			if ((LA203_0==132))
			{
				int LA203_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt203 = 1;
				}
				else if ((true))
				{
					alt203 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 203, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA203_0==IDENT||LA203_0==NUMBER||LA203_0==STRING||LA203_0==86||LA203_0==91||LA203_0==93||LA203_0==95||(LA203_0>=97 && LA203_0<=98)||(LA203_0>=101 && LA203_0<=102)||LA203_0==131||(LA203_0>=159 && LA203_0<=160)||LA203_0==184))
			{
				alt203 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 203, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(203); }
			switch (alt203)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:572:4: ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name
				{
				DebugLocation(572, 29);
				char_literal440=(IToken)Match(input,132,Follow._132_in_list_expr4857); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal440);

				DebugLocation(572, 33);
				PushFollow(Follow._feed_expr_in_list_expr4859);
				feed_expr441=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr441.Tree);
				DebugLocation(572, 43);
				string_literal442=(IToken)Match(input,148,Follow._148_in_list_expr4861); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_148.Add(string_literal442);

				DebugLocation(572, 49);
				PushFollow(Follow._for_item_in_list_expr4863);
				for_item443=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item443.Tree);
				DebugLocation(572, 58);
				// SugarCpp.g:572:58: ( ',' for_item )*
				try { DebugEnterSubRule(197);
				while (true)
				{
					int alt197=2;
					try { DebugEnterDecision(197, false);
					int LA197_0 = input.LA(1);

					if ((LA197_0==100))
					{
						alt197 = 1;
					}


					} finally { DebugExitDecision(197); }
					switch ( alt197 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:572:59: ',' for_item
						{
						DebugLocation(572, 59);
						char_literal444=(IToken)Match(input,100,Follow._100_in_list_expr4866); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal444);

						DebugLocation(572, 63);
						PushFollow(Follow._for_item_in_list_expr4868);
						for_item445=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item445.Tree);

						}
						break;

					default:
						goto loop197;
					}
				}

				loop197:
					;

				} finally { DebugExitSubRule(197); }

				DebugLocation(572, 74);
				char_literal446=(IToken)Match(input,133,Follow._133_in_list_expr4872); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(char_literal446);

				DebugLocation(572, 78);
				char_literal447=(IToken)Match(input,111,Follow._111_in_list_expr4874); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal447);

				DebugLocation(572, 82);
				PushFollow(Follow._type_name_in_list_expr4876);
				type_name448=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name448.Tree);


				{
				// AST REWRITE
				// elements: for_item, type_name, feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 572:93: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(572, 96);
					// SugarCpp.g:572:96: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(572, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(572, 119);
					// SugarCpp.g:572:119: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(572, 119);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(572, 130);
					// SugarCpp.g:572:130: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(572, 132);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(572, 141);
					// SugarCpp.g:572:141: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(572, 141);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(572, 151);
					// SugarCpp.g:572:151: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(572, 153);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(572, 166);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:573:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(573, 4);
				char_literal449=(IToken)Match(input,132,Follow._132_in_list_expr4904); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal449);

				DebugLocation(573, 8);
				// SugarCpp.g:573:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?
				int alt201=2;
				try { DebugEnterSubRule(201);
				try { DebugEnterDecision(201, false);
				try
				{
					alt201 = dfa201.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:573:9: ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					{
					DebugLocation(573, 9);
					// SugarCpp.g:573:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(198);
					while (true)
					{
						int alt198=5;
						try { DebugEnterDecision(198, false);
						switch (input.LA(1))
						{
						case 100:
							{
							alt198 = 1;
							}
							break;
						case NEWLINE:
							{
							alt198 = 2;
							}
							break;
						case INDENT:
							{
							alt198 = 3;
							}
							break;
						case DEDENT:
							{
							alt198 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(198); }
						switch ( alt198 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:573:10: ','
							{
							DebugLocation(573, 10);
							char_literal450=(IToken)Match(input,100,Follow._100_in_list_expr4908); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal450);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:573:16: NEWLINE
							{
							DebugLocation(573, 16);
							NEWLINE451=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4912); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE451);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:573:26: INDENT
							{
							DebugLocation(573, 26);
							INDENT452=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4916); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT452);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:573:35: DEDENT
							{
							DebugLocation(573, 35);
							DEDENT453=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4920); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT453);


							}
							break;

						default:
							goto loop198;
						}
					}

					loop198:
						;

					} finally { DebugExitSubRule(198); }

					DebugLocation(573, 44);
					PushFollow(Follow._feed_expr_in_list_expr4924);
					feed_expr454=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr454.Tree);
					DebugLocation(573, 54);
					// SugarCpp.g:573:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					try { DebugEnterSubRule(200);
					while (true)
					{
						int alt200=2;
						try { DebugEnterDecision(200, false);
						try
						{
							alt200 = dfa200.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(200); }
						switch ( alt200 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:573:55: ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr
							{
							DebugLocation(573, 55);
							// SugarCpp.g:573:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt199=0;
							try { DebugEnterSubRule(199);
							while (true)
							{
								int alt199=5;
								try { DebugEnterDecision(199, false);
								switch (input.LA(1))
								{
								case 100:
									{
									alt199 = 1;
									}
									break;
								case NEWLINE:
									{
									alt199 = 2;
									}
									break;
								case INDENT:
									{
									alt199 = 3;
									}
									break;
								case DEDENT:
									{
									alt199 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(199); }
								switch (alt199)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:573:56: ','
									{
									DebugLocation(573, 56);
									char_literal455=(IToken)Match(input,100,Follow._100_in_list_expr4928); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_100.Add(char_literal455);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:573:62: NEWLINE
									{
									DebugLocation(573, 62);
									NEWLINE456=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4932); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE456);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:573:72: INDENT
									{
									DebugLocation(573, 72);
									INDENT457=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4936); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT457);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:573:81: DEDENT
									{
									DebugLocation(573, 81);
									DEDENT458=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4940); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT458);


									}
									break;

								default:
									if (cnt199 >= 1)
										goto loop199;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee199 = new EarlyExitException( 199, input );
									DebugRecognitionException(eee199);
									throw eee199;
								}
								cnt199++;
							}
							loop199:
								;

							} finally { DebugExitSubRule(199); }

							DebugLocation(573, 90);
							PushFollow(Follow._feed_expr_in_list_expr4944);
							feed_expr459=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr459.Tree);

							}
							break;

						default:
							goto loop200;
						}
					}

					loop200:
						;

					} finally { DebugExitSubRule(200); }


					}
					break;

				}
				} finally { DebugExitSubRule(201); }

				DebugLocation(573, 104);
				// SugarCpp.g:573:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(202);
				while (true)
				{
					int alt202=5;
					try { DebugEnterDecision(202, false);
					switch (input.LA(1))
					{
					case 100:
						{
						alt202 = 1;
						}
						break;
					case NEWLINE:
						{
						alt202 = 2;
						}
						break;
					case INDENT:
						{
						alt202 = 3;
						}
						break;
					case DEDENT:
						{
						alt202 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(202); }
					switch ( alt202 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:573:105: ','
						{
						DebugLocation(573, 105);
						char_literal460=(IToken)Match(input,100,Follow._100_in_list_expr4951); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal460);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:573:111: NEWLINE
						{
						DebugLocation(573, 111);
						NEWLINE461=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4955); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE461);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:573:121: INDENT
						{
						DebugLocation(573, 121);
						INDENT462=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4959); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT462);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:573:130: DEDENT
						{
						DebugLocation(573, 130);
						DEDENT463=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4963); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT463);


						}
						break;

					default:
						goto loop202;
					}
				}

				loop202:
					;

				} finally { DebugExitSubRule(202); }

				DebugLocation(573, 139);
				char_literal464=(IToken)Match(input,133,Follow._133_in_list_expr4967); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(char_literal464);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 573:143: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(573, 146);
					// SugarCpp.g:573:146: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(573, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(573, 158);
					// SugarCpp.g:573:158: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(573, 158);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:574:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(574, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4981);
				lambda_expr465=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr465.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 64);
			LeaveRule("list_expr", 64);
			LeaveRule_list_expr();
		}
		DebugLocation(575, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:577:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 65);
		TraceIn("lambda_value", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE467 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block468 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE467_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(577, 1);
		try
		{
			// SugarCpp.g:578:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt205=2;
			try { DebugEnterDecision(205, false);
			int LA205_0 = input.LA(1);

			if ((LA205_0==IDENT||LA205_0==NUMBER||LA205_0==STRING||LA205_0==86||LA205_0==91||LA205_0==93||LA205_0==95||(LA205_0>=97 && LA205_0<=98)||(LA205_0>=101 && LA205_0<=102)||(LA205_0>=131 && LA205_0<=132)||LA205_0==154||LA205_0==157||(LA205_0>=159 && LA205_0<=160)||LA205_0==184))
			{
				alt205 = 1;
			}
			else if ((LA205_0==NEWLINE))
			{
				alt205 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 205, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:578:4: expr
				{
				DebugLocation(578, 4);
				PushFollow(Follow._expr_in_lambda_value4992);
				expr466=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr466.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 578:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(578, 12);
					// SugarCpp.g:578:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(578, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(578, 25);
					// SugarCpp.g:578:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(578, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(578, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:579:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(579, 4);
				// SugarCpp.g:579:4: ( NEWLINE )+
				int cnt204=0;
				try { DebugEnterSubRule(204);
				while (true)
				{
					int alt204=2;
					try { DebugEnterDecision(204, false);
					int LA204_0 = input.LA(1);

					if ((LA204_0==NEWLINE))
					{
						alt204 = 1;
					}


					} finally { DebugExitDecision(204); }
					switch (alt204)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:579:4: NEWLINE
						{
						DebugLocation(579, 4);
						NEWLINE467=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value5009); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE467);


						}
						break;

					default:
						if (cnt204 >= 1)
							goto loop204;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee204 = new EarlyExitException( 204, input );
						DebugRecognitionException(eee204);
						throw eee204;
					}
					cnt204++;
				}
				loop204:
					;

				} finally { DebugExitSubRule(204); }

				DebugLocation(579, 13);
				PushFollow(Follow._stmt_block_in_lambda_value5012);
				stmt_block468=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block468.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 579:24: -> stmt_block
				{
					DebugLocation(579, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 65);
			LeaveRule("lambda_value", 65);
			LeaveRule_lambda_value();
		}
		DebugLocation(580, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:582:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 66);
		TraceIn("lambda_type", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal469 = default(IToken);
		IToken char_literal471 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name470 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal469_tree = default(CommonTree);
		CommonTree char_literal471_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(582, 1);
		try
		{
			// SugarCpp.g:583:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:583:4: '(' type_name ')'
			{
			DebugLocation(583, 4);
			char_literal469=(IToken)Match(input,93,Follow._93_in_lambda_type5027); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal469);

			DebugLocation(583, 8);
			PushFollow(Follow._type_name_in_lambda_type5029);
			type_name470=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name470.Tree);
			DebugLocation(583, 18);
			char_literal471=(IToken)Match(input,94,Follow._94_in_lambda_type5031); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(char_literal471);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 583:22: -> type_name
			{
				DebugLocation(583, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 66);
			LeaveRule("lambda_type", 66);
			LeaveRule_lambda_type();
		}
		DebugLocation(584, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:586:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 67);
		TraceIn("lambda_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal472 = default(IToken);
		IToken char_literal474 = default(IToken);
		IToken string_literal476 = default(IToken);
		IToken string_literal478 = default(IToken);
		IToken string_literal480 = default(IToken);
		IToken string_literal482 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args473 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value477 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value481 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value483 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr484 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal472_tree = default(CommonTree);
		CommonTree char_literal474_tree = default(CommonTree);
		CommonTree string_literal476_tree = default(CommonTree);
		CommonTree string_literal478_tree = default(CommonTree);
		CommonTree string_literal480_tree = default(CommonTree);
		CommonTree string_literal482_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(586, 1);
		try
		{
			// SugarCpp.g:587:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt209=2;
			try { DebugEnterDecision(209, false);
			try
			{
				alt209 = dfa209.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:587:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(587, 4);
				char_literal472=(IToken)Match(input,93,Follow._93_in_lambda_expr5046); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal472);

				DebugLocation(587, 8);
				// SugarCpp.g:587:8: ( func_args )?
				int alt206=2;
				try { DebugEnterSubRule(206);
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==IDENT||LA206_0==113))
				{
					alt206 = 1;
				}
				} finally { DebugExitDecision(206); }
				switch (alt206)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:587:8: func_args
					{
					DebugLocation(587, 8);
					PushFollow(Follow._func_args_in_lambda_expr5048);
					func_args473=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args473.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(206); }

				DebugLocation(587, 19);
				char_literal474=(IToken)Match(input,94,Follow._94_in_lambda_expr5051); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal474);

				DebugLocation(587, 23);
				// SugarCpp.g:587:23: ( lambda_type )?
				int alt207=2;
				try { DebugEnterSubRule(207);
				try { DebugEnterDecision(207, false);
				int LA207_0 = input.LA(1);

				if ((LA207_0==93))
				{
					alt207 = 1;
				}
				} finally { DebugExitDecision(207); }
				switch (alt207)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:587:23: lambda_type
					{
					DebugLocation(587, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr5053);
					lambda_type475=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type475.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(207); }

				DebugLocation(587, 36);
				// SugarCpp.g:587:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt208=4;
				try { DebugEnterSubRule(208);
				try { DebugEnterDecision(208, false);
				switch (input.LA(1))
				{
				case 105:
					{
					alt208 = 1;
					}
					break;
				case 124:
					{
					alt208 = 2;
					}
					break;
				case 103:
					{
					alt208 = 3;
					}
					break;
				case 123:
					{
					alt208 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(208); }
				switch (alt208)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:587:38: '->' lambda_value
					{
					DebugLocation(587, 38);
					string_literal476=(IToken)Match(input,105,Follow._105_in_lambda_expr5058); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal476);

					DebugLocation(587, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr5060);
					lambda_value477=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value477.Tree);


					{
					// AST REWRITE
					// elements: 105, func_args, lambda_value, lambda_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 587:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(587, 60);
						// SugarCpp.g:587:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(587, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(587, 74);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(587, 79);
						// SugarCpp.g:587:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(587, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(587, 90);
						// SugarCpp.g:587:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(587, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(587, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:588:17: '=>' lambda_value
					{
					DebugLocation(588, 17);
					string_literal478=(IToken)Match(input,124,Follow._124_in_lambda_expr5095); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(string_literal478);

					DebugLocation(588, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr5097);
					lambda_value479=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value479.Tree);


					{
					// AST REWRITE
					// elements: 124, lambda_type, lambda_value, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 588:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(588, 39);
						// SugarCpp.g:588:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(588, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(588, 53);
						adaptor.AddChild(root_1, stream_124.NextNode());
						DebugLocation(588, 58);
						// SugarCpp.g:588:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(588, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(588, 69);
						// SugarCpp.g:588:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(588, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(588, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:589:14: '-->' lambda_value
					{
					DebugLocation(589, 14);
					string_literal480=(IToken)Match(input,103,Follow._103_in_lambda_expr5129); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal480);

					DebugLocation(589, 20);
					PushFollow(Follow._lambda_value_in_lambda_expr5131);
					lambda_value481=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value481.Tree);


					{
					// AST REWRITE
					// elements: 103, lambda_value, lambda_type, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 589:34: -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(589, 37);
						// SugarCpp.g:589:37: ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(589, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(589, 51);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(589, 57);
						// SugarCpp.g:589:57: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(589, 57);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(589, 68);
						// SugarCpp.g:589:68: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(589, 68);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(589, 81);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:590:17: '==>' lambda_value
					{
					DebugLocation(590, 17);
					string_literal482=(IToken)Match(input,123,Follow._123_in_lambda_expr5166); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_123.Add(string_literal482);

					DebugLocation(590, 23);
					PushFollow(Follow._lambda_value_in_lambda_expr5168);
					lambda_value483=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value483.Tree);


					{
					// AST REWRITE
					// elements: func_args, 123, lambda_type, lambda_value
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 590:37: -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(590, 40);
						// SugarCpp.g:590:40: ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(590, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(590, 54);
						adaptor.AddChild(root_1, stream_123.NextNode());
						DebugLocation(590, 60);
						// SugarCpp.g:590:60: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(590, 60);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(590, 71);
						// SugarCpp.g:590:71: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(590, 71);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(590, 84);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(208); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:592:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(592, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr5203);
				modify_expr484=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr484.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 67);
			LeaveRule("lambda_expr", 67);
			LeaveRule_lambda_expr();
		}
		DebugLocation(593, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:595:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 68);
		TraceIn("modify_expr_op", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set485 = default(IToken);

		CommonTree set485_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(595, 91);
		try
		{
			// SugarCpp.g:595:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(595, 15);

			set485=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==118||input.LA(1)==121||input.LA(1)==128||input.LA(1)==135||input.LA(1)==181)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set485));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 68);
			LeaveRule("modify_expr_op", 68);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(595, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:596:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 69);
		TraceIn("modify_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set487 = default(IToken);
		IToken char_literal489 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr490 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set487_tree = default(CommonTree);
		CommonTree char_literal489_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(596, 1);
		try
		{
			// SugarCpp.g:597:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:597:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(597, 4);
			PushFollow(Follow._cond_expr_in_modify_expr5260);
			cond_expr486=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr486.Tree);
			DebugLocation(597, 14);
			// SugarCpp.g:597:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt211=3;
			try { DebugEnterSubRule(211);
			try { DebugEnterDecision(211, false);
			int LA211_0 = input.LA(1);

			if ((LA211_0==89||LA211_0==92||LA211_0==96||LA211_0==99||LA211_0==104||LA211_0==110||LA211_0==113||LA211_0==118||LA211_0==128||LA211_0==135||LA211_0==181))
			{
				alt211 = 1;
			}
			else if ((LA211_0==121))
			{
				alt211 = 2;
			}
			} finally { DebugExitDecision(211); }
			switch (alt211)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:597:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(597, 94);

				set487=(IToken)input.LT(1);
				set487=(IToken)input.LT(1);
				if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==113||input.LA(1)==118||input.LA(1)==128||input.LA(1)==135||input.LA(1)==181)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set487), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(597, 96);
				PushFollow(Follow._cond_expr_in_modify_expr5309);
				cond_expr488=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr488.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:598:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(598, 7);
				// SugarCpp.g:598:7: ( '=' ^ cond_expr )+
				int cnt210=0;
				try { DebugEnterSubRule(210);
				while (true)
				{
					int alt210=2;
					try { DebugEnterDecision(210, false);
					int LA210_0 = input.LA(1);

					if ((LA210_0==121))
					{
						alt210 = 1;
					}


					} finally { DebugExitDecision(210); }
					switch (alt210)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:598:8: '=' ^ cond_expr
						{
						DebugLocation(598, 11);
						char_literal489=(IToken)Match(input,121,Follow._121_in_modify_expr5318); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal489_tree = (CommonTree)adaptor.Create(char_literal489);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal489_tree, root_0);
						}
						DebugLocation(598, 13);
						PushFollow(Follow._cond_expr_in_modify_expr5321);
						cond_expr490=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr490.Tree);

						}
						break;

					default:
						if (cnt210 >= 1)
							goto loop210;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee210 = new EarlyExitException( 210, input );
						DebugRecognitionException(eee210);
						throw eee210;
					}
					cnt210++;
				}
				loop210:
					;

				} finally { DebugExitSubRule(210); }


				}
				break;

			}
			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 69);
			LeaveRule("modify_expr", 69);
			LeaveRule_modify_expr();
		}
		DebugLocation(599, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:601:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 70);
		TraceIn("cond_expr_item", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr491 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(601, 24);
		try
		{
			// SugarCpp.g:601:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:601:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(601, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item5334);
			or_expr491=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr491.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 70);
			LeaveRule("cond_expr_item", 70);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(601, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:602:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 71);
		TraceIn("cond_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal492 = default(IToken);
		IToken char_literal493 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal492_tree = default(CommonTree);
		CommonTree char_literal493_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(602, 1);
		try
		{
			// SugarCpp.g:603:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:603:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(603, 4);
			// SugarCpp.g:603:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:603:5: a= or_expr
			{
			DebugLocation(603, 6);
			PushFollow(Follow._or_expr_in_cond_expr5346);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 603:15: -> $a
			{
				DebugLocation(603, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(603, 22);
			// SugarCpp.g:603:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt214=2;
			try { DebugEnterSubRule(214);
			try { DebugEnterDecision(214, false);
			int LA214_0 = input.LA(1);

			if ((LA214_0==129))
			{
				alt214 = 1;
			}
			} finally { DebugExitDecision(214); }
			switch (alt214)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:603:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(603, 23);
				char_literal492=(IToken)Match(input,129,Follow._129_in_cond_expr5355); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(char_literal492);

				DebugLocation(603, 27);
				// SugarCpp.g:603:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt213=2;
				try { DebugEnterSubRule(213);
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==IDENT||LA213_0==NUMBER||LA213_0==STRING||LA213_0==86||LA213_0==91||LA213_0==93||LA213_0==95||(LA213_0>=97 && LA213_0<=98)||(LA213_0>=101 && LA213_0<=102)||LA213_0==131||(LA213_0>=159 && LA213_0<=160)||LA213_0==184))
				{
					alt213 = 1;
				}
				else if ((LA213_0==DEDENT||LA213_0==INDENT||LA213_0==NEWLINE||LA213_0==89||LA213_0==92||LA213_0==94||LA213_0==96||(LA213_0>=99 && LA213_0<=100)||LA213_0==104||LA213_0==110||(LA213_0>=113 && LA213_0<=114)||LA213_0==118||(LA213_0>=120 && LA213_0<=121)||LA213_0==124||LA213_0==128||LA213_0==133||LA213_0==135||LA213_0==138||LA213_0==143||(LA213_0>=148 && LA213_0<=149)||LA213_0==151||LA213_0==164||(LA213_0>=168 && LA213_0<=170)||(LA213_0>=173 && LA213_0<=174)||(LA213_0>=178 && LA213_0<=179)||(LA213_0>=181 && LA213_0<=182)))
				{
					alt213 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 213, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(213); }
				switch (alt213)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:603:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(603, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr5361);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(603, 46);
					// SugarCpp.g:603:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt212=2;
					try { DebugEnterSubRule(212);
					try { DebugEnterDecision(212, false);
					int LA212_0 = input.LA(1);

					if ((LA212_0==111))
					{
						alt212 = 1;
					}
					else if ((LA212_0==DEDENT||LA212_0==INDENT||LA212_0==NEWLINE||LA212_0==89||LA212_0==92||LA212_0==94||LA212_0==96||(LA212_0>=99 && LA212_0<=100)||LA212_0==104||LA212_0==110||(LA212_0>=113 && LA212_0<=114)||LA212_0==118||(LA212_0>=120 && LA212_0<=121)||LA212_0==124||LA212_0==128||LA212_0==133||LA212_0==135||LA212_0==138||LA212_0==143||(LA212_0>=148 && LA212_0<=149)||LA212_0==151||LA212_0==164||(LA212_0>=168 && LA212_0<=170)||(LA212_0>=173 && LA212_0<=174)||(LA212_0>=178 && LA212_0<=179)||(LA212_0>=181 && LA212_0<=182)))
					{
						alt212 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 212, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(212); }
					switch (alt212)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:603:48: ':' b= cond_expr_item
						{
						DebugLocation(603, 48);
						char_literal493=(IToken)Match(input,111,Follow._111_in_cond_expr5365); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(char_literal493);

						DebugLocation(603, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr5369);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, a, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 603:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(603, 72);
							// SugarCpp.g:603:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(603, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(603, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(603, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(603, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:604:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 604:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(604, 20);
							// SugarCpp.g:604:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(604, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(604, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(604, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(212); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:606:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 606:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(606, 14);
						// SugarCpp.g:606:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(606, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(606, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(213); }


				}
				break;

			}
			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 71);
			LeaveRule("cond_expr", 71);
			LeaveRule_cond_expr();
		}
		DebugLocation(608, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:610:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 72);
		TraceIn("or_op", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set494 = default(IToken);

		CommonTree set494_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(610, 19);
		try
		{
			// SugarCpp.g:610:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(610, 6);

			set494=(IToken)input.LT(1);
			if (input.LA(1)==161||input.LA(1)==183)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set494));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 72);
			LeaveRule("or_op", 72);
			LeaveRule_or_op();
		}
		DebugLocation(610, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:611:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 73);
		TraceIn("or_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(611, 1);
		try
		{
			// SugarCpp.g:612:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:612:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(612, 4);
			// SugarCpp.g:612:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:612:5: a= and_expr
			{
			DebugLocation(612, 6);
			PushFollow(Follow._and_expr_in_or_expr5483);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 612:16: -> $a
			{
				DebugLocation(612, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(612, 23);
			// SugarCpp.g:612:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(215);
			while (true)
			{
				int alt215=2;
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==161||LA215_0==183))
				{
					alt215 = 1;
				}


				} finally { DebugExitDecision(215); }
				switch ( alt215 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:612:24: op= or_op b= and_expr
					{
					DebugLocation(612, 26);
					PushFollow(Follow._or_op_in_or_expr5494);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(612, 34);
					PushFollow(Follow._and_expr_in_or_expr5498);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 612:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(612, 47);
						// SugarCpp.g:612:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(612, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(612, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(612, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(612, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop215;
				}
			}

			loop215:
				;

			} finally { DebugExitSubRule(215); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 73);
			LeaveRule("or_expr", 73);
			LeaveRule_or_expr();
		}
		DebugLocation(613, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:615:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 74);
		TraceIn("and_op", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set495 = default(IToken);

		CommonTree set495_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(615, 21);
		try
		{
			// SugarCpp.g:615:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(615, 7);

			set495=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==137)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set495));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 74);
			LeaveRule("and_op", 74);
			LeaveRule_and_op();
		}
		DebugLocation(615, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:616:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 75);
		TraceIn("and_expr", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(616, 1);
		try
		{
			// SugarCpp.g:617:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:617:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(617, 4);
			// SugarCpp.g:617:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:617:5: a= bit_or
			{
			DebugLocation(617, 6);
			PushFollow(Follow._bit_or_in_and_expr5540);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 617:14: -> $a
			{
				DebugLocation(617, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(617, 21);
			// SugarCpp.g:617:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==90||LA216_0==137))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:617:22: op= and_op b= bit_or
					{
					DebugLocation(617, 24);
					PushFollow(Follow._and_op_in_and_expr5551);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(617, 33);
					PushFollow(Follow._bit_or_in_and_expr5555);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, and_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 617:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(617, 44);
						// SugarCpp.g:617:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(617, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(617, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(617, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(617, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 75);
			LeaveRule("and_expr", 75);
			LeaveRule_and_expr();
		}
		DebugLocation(618, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:620:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 76);
		TraceIn("bit_or", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal496 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal496_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(620, 1);
		try
		{
			// SugarCpp.g:621:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:621:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(621, 4);
			// SugarCpp.g:621:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:621:5: a= bit_xor
			{
			DebugLocation(621, 6);
			PushFollow(Follow._bit_xor_in_bit_or5586);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 621:15: -> $a
			{
				DebugLocation(621, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(621, 22);
			// SugarCpp.g:621:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=2;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==180))
				{
					alt217 = 1;
				}


				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:621:23: '|' b= bit_xor
					{
					DebugLocation(621, 23);
					char_literal496=(IToken)Match(input,180,Follow._180_in_bit_or5595); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_180.Add(char_literal496);

					DebugLocation(621, 28);
					PushFollow(Follow._bit_xor_in_bit_or5599);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, 180, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 621:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(621, 40);
						// SugarCpp.g:621:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(621, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(621, 51);
						adaptor.AddChild(root_1, stream_180.NextNode());
						DebugLocation(621, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(621, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 76);
			LeaveRule("bit_or", 76);
			LeaveRule_bit_or();
		}
		DebugLocation(622, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:624:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 77);
		TraceIn("bit_xor", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal497 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal497_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(624, 1);
		try
		{
			// SugarCpp.g:625:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:625:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(625, 4);
			// SugarCpp.g:625:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:625:5: a= bit_and
			{
			DebugLocation(625, 6);
			PushFollow(Follow._bit_and_in_bit_xor5629);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 625:15: -> $a
			{
				DebugLocation(625, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(625, 22);
			// SugarCpp.g:625:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=2;
				try { DebugEnterDecision(218, false);
				int LA218_0 = input.LA(1);

				if ((LA218_0==134))
				{
					alt218 = 1;
				}


				} finally { DebugExitDecision(218); }
				switch ( alt218 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:625:23: '^' b= bit_and
					{
					DebugLocation(625, 23);
					char_literal497=(IToken)Match(input,134,Follow._134_in_bit_xor5638); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_134.Add(char_literal497);

					DebugLocation(625, 28);
					PushFollow(Follow._bit_and_in_bit_xor5642);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 134
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 625:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(625, 40);
						// SugarCpp.g:625:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(625, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(625, 51);
						adaptor.AddChild(root_1, stream_134.NextNode());
						DebugLocation(625, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(625, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop218;
				}
			}

			loop218:
				;

			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 77);
			LeaveRule("bit_xor", 77);
			LeaveRule_bit_xor();
		}
		DebugLocation(626, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:628:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 78);
		TraceIn("bit_and", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal498 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal498_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(628, 1);
		try
		{
			// SugarCpp.g:629:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:629:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(629, 4);
			// SugarCpp.g:629:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:629:5: a= cmp_expr
			{
			DebugLocation(629, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5672);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 629:16: -> $a
			{
				DebugLocation(629, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(629, 23);
			// SugarCpp.g:629:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==91))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch ( alt219 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:629:24: '&' b= cmp_expr
					{
					DebugLocation(629, 24);
					char_literal498=(IToken)Match(input,91,Follow._91_in_bit_and5681); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal498);

					DebugLocation(629, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5685);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, b, 91
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 629:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(629, 42);
						// SugarCpp.g:629:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(629, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(629, 53);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(629, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(629, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop219;
				}
			}

			loop219:
				;

			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 78);
			LeaveRule("bit_and", 78);
			LeaveRule_bit_and();
		}
		DebugLocation(630, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:632:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 79);
		TraceIn("chain_op", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set499 = default(IToken);

		CommonTree set499_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(632, 64);
		try
		{
			// SugarCpp.g:632:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(632, 9);

			set499=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=152 && input.LA(1)<=153))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set499));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 79);
			LeaveRule("chain_op", 79);
			LeaveRule_chain_op();
		}
		DebugLocation(632, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:633:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 80);
		TraceIn("no_less_op", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set500 = default(IToken);

		CommonTree set500_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(633, 60);
		try
		{
			// SugarCpp.g:633:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(633, 11);

			set500=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=152 && input.LA(1)<=153))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set500));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 80);
			LeaveRule("no_less_op", 80);
			LeaveRule_no_less_op();
		}
		DebugLocation(633, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:634:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 81);
		TraceIn("chain_list", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr502 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(634, 35);
		try
		{
			// SugarCpp.g:634:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:634:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(634, 13);
			// SugarCpp.g:634:13: ( chain_op shift_expr )+
			int cnt220=0;
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=2;
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==87||LA220_0==115||LA220_0==119||LA220_0==122||(LA220_0>=125 && LA220_0<=126)||(LA220_0>=152 && LA220_0<=153)))
				{
					alt220 = 1;
				}


				} finally { DebugExitDecision(220); }
				switch (alt220)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:634:14: chain_op shift_expr
					{
					DebugLocation(634, 14);
					PushFollow(Follow._chain_op_in_chain_list5777);
					chain_op501=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op501.Tree);
					DebugLocation(634, 23);
					PushFollow(Follow._shift_expr_in_chain_list5779);
					shift_expr502=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr502.Tree);

					}
					break;

				default:
					if (cnt220 >= 1)
						goto loop220;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee220 = new EarlyExitException( 220, input );
					DebugRecognitionException(eee220);
					throw eee220;
				}
				cnt220++;
			}
			loop220:
				;

			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 81);
			LeaveRule("chain_list", 81);
			LeaveRule_chain_list();
		}
		DebugLocation(634, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:635:1: cmp_expr : (a= shift_expr -> $a) (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 82);
		TraceIn("cmp_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list503 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_chain_op=new RewriteRuleSubtreeStream(adaptor,"rule chain_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(635, 1);
		try
		{
			// SugarCpp.g:636:2: ( (a= shift_expr -> $a) (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:636:4: (a= shift_expr -> $a) (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(636, 4);
			// SugarCpp.g:636:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:636:5: a= shift_expr
			{
			DebugLocation(636, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5793);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 636:18: -> $a
			{
				DebugLocation(636, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(636, 25);
			// SugarCpp.g:636:25: (op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt222=2;
			try { DebugEnterSubRule(222);
			try { DebugEnterDecision(222, false);
			int LA222_0 = input.LA(1);

			if ((LA222_0==87||LA222_0==115||LA222_0==119||LA222_0==122||(LA222_0>=125 && LA222_0<=126)||(LA222_0>=152 && LA222_0<=153)))
			{
				alt222 = 1;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:636:27: op= chain_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(636, 29);
				PushFollow(Follow._chain_op_in_cmp_expr5805);
				op=chain_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_chain_op.Add(op.Tree);
				DebugLocation(636, 40);
				PushFollow(Follow._shift_expr_in_cmp_expr5809);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(636, 52);
				// SugarCpp.g:636:52: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt221=2;
				try { DebugEnterSubRule(221);
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==87||LA221_0==115||LA221_0==119||LA221_0==122||(LA221_0>=125 && LA221_0<=126)||(LA221_0>=152 && LA221_0<=153)))
				{
					alt221 = 1;
				}
				else if ((LA221_0==DEDENT||LA221_0==INDENT||LA221_0==NEWLINE||(LA221_0>=89 && LA221_0<=92)||LA221_0==94||LA221_0==96||(LA221_0>=99 && LA221_0<=100)||LA221_0==104||(LA221_0>=110 && LA221_0<=111)||(LA221_0>=113 && LA221_0<=114)||LA221_0==118||(LA221_0>=120 && LA221_0<=121)||LA221_0==124||(LA221_0>=128 && LA221_0<=129)||(LA221_0>=133 && LA221_0<=135)||(LA221_0>=137 && LA221_0<=138)||LA221_0==143||(LA221_0>=148 && LA221_0<=149)||LA221_0==151||LA221_0==161||LA221_0==164||(LA221_0>=168 && LA221_0<=170)||(LA221_0>=173 && LA221_0<=174)||(LA221_0>=178 && LA221_0<=183)))
				{
					alt221 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 221, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(221); }
				switch (alt221)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:636:54: chain_list
					{
					DebugLocation(636, 54);
					PushFollow(Follow._chain_list_in_cmp_expr5813);
					chain_list503=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list503.Tree);


					{
					// AST REWRITE
					// elements: op, cmp_expr, chain_list, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:65: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(636, 68);
						// SugarCpp.g:636:68: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 70);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(636, 83);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(636, 93);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(636, 97);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(636, 99);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:637:18: 
					{

					{
					// AST REWRITE
					// elements: b, cmp_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 637:18: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(637, 21);
						// SugarCpp.g:637:21: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(637, 23);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(637, 33);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(637, 37);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(637, 47);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(221); }


				}
				break;

			}
			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 82);
			LeaveRule("cmp_expr", 82);
			LeaveRule_cmp_expr();
		}
		DebugLocation(640, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:642:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 83);
		TraceIn("shift_expr_op", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set504 = default(IToken);

		CommonTree set504_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(642, 27);
		try
		{
			// SugarCpp.g:642:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(642, 14);

			set504=(IToken)input.LT(1);
			if (input.LA(1)==117||input.LA(1)==127)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set504));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 83);
			LeaveRule("shift_expr_op", 83);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(642, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:643:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 84);
		TraceIn("shift_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op505 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(643, 1);
		try
		{
			// SugarCpp.g:644:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:644:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(644, 4);
			// SugarCpp.g:644:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:644:5: a= add_expr
			{
			DebugLocation(644, 6);
			PushFollow(Follow._add_expr_in_shift_expr5917);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 644:16: -> $a
			{
				DebugLocation(644, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(644, 23);
			// SugarCpp.g:644:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==117||LA223_0==127))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch ( alt223 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:644:24: shift_expr_op b= add_expr
					{
					DebugLocation(644, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5926);
					shift_expr_op505=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op505.Tree);
					DebugLocation(644, 39);
					PushFollow(Follow._add_expr_in_shift_expr5930);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 644:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(644, 52);
						// SugarCpp.g:644:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(644, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(644, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(644, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(644, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop223;
				}
			}

			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 84);
			LeaveRule("shift_expr", 84);
			LeaveRule_shift_expr();
		}
		DebugLocation(645, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:647:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 85);
		TraceIn("add_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal506 = default(IToken);
		IToken char_literal507 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal506_tree = default(CommonTree);
		CommonTree char_literal507_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(647, 1);
		try
		{
			// SugarCpp.g:648:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:648:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(648, 4);
			// SugarCpp.g:648:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:648:5: a= mul_expr
			{
			DebugLocation(648, 6);
			PushFollow(Follow._mul_expr_in_add_expr5960);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 648:16: -> $a
			{
				DebugLocation(648, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(648, 23);
			// SugarCpp.g:648:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=3;
				try { DebugEnterDecision(224, false);
				int LA224_0 = input.LA(1);

				if ((LA224_0==97))
				{
					alt224 = 1;
				}
				else if ((LA224_0==101))
				{
					alt224 = 2;
				}


				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:648:25: '+' b= mul_expr
					{
					DebugLocation(648, 25);
					char_literal506=(IToken)Match(input,97,Follow._97_in_add_expr5970); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal506);

					DebugLocation(648, 30);
					PushFollow(Follow._mul_expr_in_add_expr5974);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 97
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 648:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(648, 43);
						// SugarCpp.g:648:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(648, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(648, 54);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(648, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(648, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:649:10: '-' b= mul_expr
					{
					DebugLocation(649, 10);
					char_literal507=(IToken)Match(input,101,Follow._101_in_add_expr5999); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(char_literal507);

					DebugLocation(649, 15);
					PushFollow(Follow._mul_expr_in_add_expr6003);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 101, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 649:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(649, 28);
						// SugarCpp.g:649:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(649, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(649, 39);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(649, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(649, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 85);
			LeaveRule("add_expr", 85);
			LeaveRule_add_expr();
		}
		DebugLocation(651, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:653:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 86);
		TraceIn("mul_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal508 = default(IToken);
		IToken char_literal509 = default(IToken);
		IToken char_literal510 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree char_literal509_tree = default(CommonTree);
		CommonTree char_literal510_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(653, 1);
		try
		{
			// SugarCpp.g:654:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:654:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(654, 4);
			// SugarCpp.g:654:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:654:5: a= infix_expr
			{
			DebugLocation(654, 6);
			PushFollow(Follow._infix_expr_in_mul_expr6041);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 654:18: -> $a
			{
				DebugLocation(654, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(654, 25);
			// SugarCpp.g:654:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(225);
			while (true)
			{
				int alt225=4;
				try { DebugEnterDecision(225, false);
				switch (input.LA(1))
				{
				case 95:
					{
					alt225 = 1;
					}
					break;
				case 109:
					{
					alt225 = 2;
					}
					break;
				case 88:
					{
					alt225 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(225); }
				switch ( alt225 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:654:27: '*' b= infix_expr
					{
					DebugLocation(654, 27);
					char_literal508=(IToken)Match(input,95,Follow._95_in_mul_expr6051); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal508);

					DebugLocation(654, 32);
					PushFollow(Follow._infix_expr_in_mul_expr6055);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 95
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 654:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(654, 47);
						// SugarCpp.g:654:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(654, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(654, 58);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(654, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(654, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:655:12: '/' b= infix_expr
					{
					DebugLocation(655, 12);
					char_literal509=(IToken)Match(input,109,Follow._109_in_mul_expr6082); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(char_literal509);

					DebugLocation(655, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6086);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 109, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 655:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(655, 32);
						// SugarCpp.g:655:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(655, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(655, 43);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(655, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(655, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:656:12: '%' b= infix_expr
					{
					DebugLocation(656, 12);
					char_literal510=(IToken)Match(input,88,Follow._88_in_mul_expr6113); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal510);

					DebugLocation(656, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6117);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 88, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 656:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(656, 32);
						// SugarCpp.g:656:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(656, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(656, 43);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(656, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(656, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop225;
				}
			}

			loop225:
				;

			} finally { DebugExitSubRule(225); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 86);
			LeaveRule("mul_expr", 86);
			LeaveRule_mul_expr();
		}
		DebugLocation(658, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:660:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 87);
		TraceIn("infix_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func511 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(660, 1);
		try
		{
			// SugarCpp.g:661:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:661:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(661, 4);
			// SugarCpp.g:661:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:661:5: a= selector_expr
			{
			DebugLocation(661, 6);
			PushFollow(Follow._selector_expr_in_infix_expr6157);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 661:21: -> $a
			{
				DebugLocation(661, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(661, 28);
			// SugarCpp.g:661:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(226);
			while (true)
			{
				int alt226=2;
				try { DebugEnterDecision(226, false);
				int LA226_0 = input.LA(1);

				if ((LA226_0==136))
				{
					alt226 = 1;
				}


				} finally { DebugExitDecision(226); }
				switch ( alt226 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:661:30: infix_func b= selector_expr
					{
					DebugLocation(661, 30);
					PushFollow(Follow._infix_func_in_infix_expr6167);
					infix_func511=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func511.Tree);
					DebugLocation(661, 42);
					PushFollow(Follow._selector_expr_in_infix_expr6171);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, infix_func, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 661:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(661, 61);
						// SugarCpp.g:661:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(661, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(661, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(661, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(661, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop226;
				}
			}

			loop226:
				;

			} finally { DebugExitSubRule(226); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 87);
			LeaveRule("infix_expr", 87);
			LeaveRule_infix_expr();
		}
		DebugLocation(662, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:664:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 88);
		TraceIn("selector_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal512 = default(IToken);
		IToken string_literal513 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal512_tree = default(CommonTree);
		CommonTree string_literal513_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(664, 1);
		try
		{
			// SugarCpp.g:665:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:665:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(665, 4);
			// SugarCpp.g:665:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:665:5: a= cast_expr
			{
			DebugLocation(665, 6);
			PushFollow(Follow._cast_expr_in_selector_expr6203);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 665:17: -> $a
			{
				DebugLocation(665, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(665, 24);
			// SugarCpp.g:665:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(227);
			while (true)
			{
				int alt227=3;
				try { DebugEnterDecision(227, false);
				int LA227_0 = input.LA(1);

				if ((LA227_0==106))
				{
					alt227 = 1;
				}
				else if ((LA227_0==108))
				{
					alt227 = 2;
				}


				} finally { DebugExitDecision(227); }
				switch ( alt227 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:665:26: '->*' b= ident
					{
					DebugLocation(665, 26);
					string_literal512=(IToken)Match(input,106,Follow._106_in_selector_expr6213); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(string_literal512);

					DebugLocation(665, 33);
					PushFollow(Follow._ident_in_selector_expr6217);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 106, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 665:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(665, 43);
						// SugarCpp.g:665:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(665, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(665, 57);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(665, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(665, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:666:11: '.*' b= ident
					{
					DebugLocation(666, 11);
					string_literal513=(IToken)Match(input,108,Follow._108_in_selector_expr6243); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(string_literal513);

					DebugLocation(666, 18);
					PushFollow(Follow._ident_in_selector_expr6248);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 108, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 666:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(666, 28);
						// SugarCpp.g:666:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(666, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(666, 42);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(666, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(666, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop227;
				}
			}

			loop227:
				;

			} finally { DebugExitSubRule(227); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 88);
			LeaveRule("selector_expr", 88);
			LeaveRule_selector_expr();
		}
		DebugLocation(668, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:670:1: cast_expr : ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 89);
		TraceIn("cast_expr", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal514 = default(IToken);
		IToken char_literal516 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name515 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr517 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr518 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal514_tree = default(CommonTree);
		CommonTree char_literal516_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(670, 1);
		try
		{
			// SugarCpp.g:671:2: ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt228=2;
			try { DebugEnterDecision(228, false);
			int LA228_0 = input.LA(1);

			if ((LA228_0==93))
			{
				int LA228_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA228_0==IDENT||LA228_0==NUMBER||LA228_0==STRING||LA228_0==86||LA228_0==91||LA228_0==95||(LA228_0>=97 && LA228_0<=98)||(LA228_0>=101 && LA228_0<=102)||LA228_0==131||(LA228_0>=159 && LA228_0<=160)||LA228_0==184))
			{
				alt228 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 228, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(228); }
			switch (alt228)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:671:4: ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr
				{
				DebugLocation(671, 39);
				char_literal514=(IToken)Match(input,93,Follow._93_in_cast_expr6297); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal514);

				DebugLocation(671, 43);
				PushFollow(Follow._type_name_in_cast_expr6299);
				type_name515=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name515.Tree);
				DebugLocation(671, 53);
				char_literal516=(IToken)Match(input,94,Follow._94_in_cast_expr6301); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal516);

				DebugLocation(671, 57);
				PushFollow(Follow._prefix_expr_in_cast_expr6303);
				prefix_expr517=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr517.Tree);


				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 671:69: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(671, 72);
					// SugarCpp.g:671:72: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(671, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(671, 84);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(671, 94);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:672:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(672, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr6318);
				prefix_expr518=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr518.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 89);
			LeaveRule("cast_expr", 89);
			LeaveRule_cast_expr();
		}
		DebugLocation(673, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:675:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 90);
		TraceIn("prefix_expr_op", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set519 = default(IToken);

		CommonTree set519_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(675, 71);
		try
		{
			// SugarCpp.g:675:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(675, 15);

			set519=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==91||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=101 && input.LA(1)<=102)||input.LA(1)==160||input.LA(1)==184)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set519));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 90);
			LeaveRule("prefix_expr_op", 90);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(675, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:676:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 91);
		TraceIn("prefix_expr", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal522 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list524 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list525 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr526 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal522_tree = default(CommonTree);
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(676, 1);
		try
		{
			// SugarCpp.g:677:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt230=3;
			try { DebugEnterDecision(230, false);
			switch (input.LA(1))
			{
			case 86:
			case 91:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 160:
			case 184:
				{
				alt230 = 1;
				}
				break;
			case 159:
				{
				alt230 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 93:
			case 131:
				{
				alt230 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:677:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(677, 4);
				// SugarCpp.g:677:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:677:5: prefix_expr_op prefix_expr
				{
				DebugLocation(677, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr6368);
				prefix_expr_op520=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op520.Tree);
				DebugLocation(677, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr6370);
				prefix_expr521=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr521.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 677:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(677, 36);
					// SugarCpp.g:677:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(677, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(677, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(677, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:678:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(678, 4);
				string_literal522=(IToken)Match(input,159,Follow._159_in_prefix_expr6386); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_159.Add(string_literal522);

				DebugLocation(678, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr6388);
				type_no_array523=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array523.Tree);
				DebugLocation(678, 24);
				// SugarCpp.g:678:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt229=2;
				try { DebugEnterSubRule(229);
				try { DebugEnterDecision(229, false);
				int LA229_0 = input.LA(1);

				if ((LA229_0==93))
				{
					alt229 = 1;
				}
				else if ((LA229_0==132))
				{
					alt229 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 229, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(229); }
				switch (alt229)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:678:26: bracket_expr_list
					{
					DebugLocation(678, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr6392);
					bracket_expr_list524=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list524.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 678:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(678, 47);
						// SugarCpp.g:678:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(678, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(678, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(678, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:679:11: square_expr_list
					{
					DebugLocation(679, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6414);
					square_expr_list525=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list525.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 679:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(679, 31);
						// SugarCpp.g:679:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(679, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(679, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(679, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(229); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:681:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(681, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6439);
				suffix_expr526=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr526.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 91);
			LeaveRule("prefix_expr", 91);
			LeaveRule_prefix_expr();
		}
		DebugLocation(682, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:684:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 92);
		TraceIn("square_expr_list", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal527 = default(IToken);
		IToken char_literal529 = default(IToken);
		IToken char_literal531 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr530 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal527_tree = default(CommonTree);
		CommonTree char_literal529_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(684, 1);
		try
		{
			// SugarCpp.g:685:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:685:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(685, 4);
			char_literal527=(IToken)Match(input,132,Follow._132_in_square_expr_list6451); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(char_literal527);

			DebugLocation(685, 8);
			PushFollow(Follow._expr_in_square_expr_list6453);
			expr528=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr528.Tree);
			DebugLocation(685, 13);
			// SugarCpp.g:685:13: ( ',' expr )*
			try { DebugEnterSubRule(231);
			while (true)
			{
				int alt231=2;
				try { DebugEnterDecision(231, false);
				int LA231_0 = input.LA(1);

				if ((LA231_0==100))
				{
					alt231 = 1;
				}


				} finally { DebugExitDecision(231); }
				switch ( alt231 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:685:14: ',' expr
					{
					DebugLocation(685, 14);
					char_literal529=(IToken)Match(input,100,Follow._100_in_square_expr_list6456); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal529);

					DebugLocation(685, 18);
					PushFollow(Follow._expr_in_square_expr_list6458);
					expr530=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr530.Tree);

					}
					break;

				default:
					goto loop231;
				}
			}

			loop231:
				;

			} finally { DebugExitSubRule(231); }

			DebugLocation(685, 25);
			char_literal531=(IToken)Match(input,133,Follow._133_in_square_expr_list6462); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_133.Add(char_literal531);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 685:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(685, 32);
				// SugarCpp.g:685:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(685, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(685, 44);
				// SugarCpp.g:685:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(685, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 92);
			LeaveRule("square_expr_list", 92);
			LeaveRule_square_expr_list();
		}
		DebugLocation(686, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:688:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 93);
		TraceIn("bracket_expr_list", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal532 = default(IToken);
		IToken char_literal534 = default(IToken);
		IToken char_literal536 = default(IToken);
		IToken NEWLINE537 = default(IToken);
		IToken INDENT538 = default(IToken);
		IToken NEWLINE539 = default(IToken);
		IToken char_literal541 = default(IToken);
		IToken NEWLINE542 = default(IToken);
		IToken NEWLINE544 = default(IToken);
		IToken char_literal545 = default(IToken);
		IToken NEWLINE546 = default(IToken);
		IToken DEDENT547 = default(IToken);
		IToken DEDENT548 = default(IToken);
		IToken NEWLINE549 = default(IToken);
		IToken char_literal550 = default(IToken);
		IToken char_literal552 = default(IToken);
		IToken NEWLINE553 = default(IToken);
		IToken char_literal555 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr533 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr540 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr543 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr551 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr554 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal532_tree = default(CommonTree);
		CommonTree char_literal534_tree = default(CommonTree);
		CommonTree char_literal536_tree = default(CommonTree);
		CommonTree NEWLINE537_tree = default(CommonTree);
		CommonTree INDENT538_tree = default(CommonTree);
		CommonTree NEWLINE539_tree = default(CommonTree);
		CommonTree char_literal541_tree = default(CommonTree);
		CommonTree NEWLINE542_tree = default(CommonTree);
		CommonTree NEWLINE544_tree = default(CommonTree);
		CommonTree char_literal545_tree = default(CommonTree);
		CommonTree NEWLINE546_tree = default(CommonTree);
		CommonTree DEDENT547_tree = default(CommonTree);
		CommonTree DEDENT548_tree = default(CommonTree);
		CommonTree NEWLINE549_tree = default(CommonTree);
		CommonTree char_literal550_tree = default(CommonTree);
		CommonTree char_literal552_tree = default(CommonTree);
		CommonTree NEWLINE553_tree = default(CommonTree);
		CommonTree char_literal555_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(688, 1);
		try
		{
			// SugarCpp.g:689:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:689:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(689, 4);
			char_literal532=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6482); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal532);

			DebugLocation(689, 8);
			// SugarCpp.g:689:8: ( expr ( ',' expr )* )?
			int alt233=2;
			try { DebugEnterSubRule(233);
			try { DebugEnterDecision(233, false);
			int LA233_0 = input.LA(1);

			if ((LA233_0==IDENT||LA233_0==NUMBER||LA233_0==STRING||LA233_0==86||LA233_0==91||LA233_0==93||LA233_0==95||(LA233_0>=97 && LA233_0<=98)||(LA233_0>=101 && LA233_0<=102)||(LA233_0>=131 && LA233_0<=132)||LA233_0==154||LA233_0==157||(LA233_0>=159 && LA233_0<=160)||LA233_0==184))
			{
				alt233 = 1;
			}
			} finally { DebugExitDecision(233); }
			switch (alt233)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:689:9: expr ( ',' expr )*
				{
				DebugLocation(689, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6485);
				expr533=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr533.Tree);
				DebugLocation(689, 14);
				// SugarCpp.g:689:14: ( ',' expr )*
				try { DebugEnterSubRule(232);
				while (true)
				{
					int alt232=2;
					try { DebugEnterDecision(232, false);
					int LA232_0 = input.LA(1);

					if ((LA232_0==100))
					{
						alt232 = 1;
					}


					} finally { DebugExitDecision(232); }
					switch ( alt232 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:689:15: ',' expr
						{
						DebugLocation(689, 15);
						char_literal534=(IToken)Match(input,100,Follow._100_in_bracket_expr_list6488); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal534);

						DebugLocation(689, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6490);
						expr535=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr535.Tree);

						}
						break;

					default:
						goto loop232;
					}
				}

				loop232:
					;

				} finally { DebugExitSubRule(232); }


				}
				break;

			}
			} finally { DebugExitSubRule(233); }

			DebugLocation(689, 28);
			// SugarCpp.g:689:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt246=2;
			try { DebugEnterSubRule(246);
			try { DebugEnterDecision(246, false);
			int LA246_0 = input.LA(1);

			if ((LA246_0==94))
			{
				alt246 = 1;
			}
			else if ((LA246_0==NEWLINE))
			{
				alt246 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 246, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(246); }
			switch (alt246)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:689:30: ')'
				{
				DebugLocation(689, 30);
				char_literal536=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6498); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal536);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 689:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(689, 37);
					// SugarCpp.g:689:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(689, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(689, 49);
					// SugarCpp.g:689:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(689, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:690:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(690, 12);
				// SugarCpp.g:690:12: ( NEWLINE )+
				int cnt234=0;
				try { DebugEnterSubRule(234);
				while (true)
				{
					int alt234=2;
					try { DebugEnterDecision(234, false);
					int LA234_0 = input.LA(1);

					if ((LA234_0==NEWLINE))
					{
						alt234 = 1;
					}


					} finally { DebugExitDecision(234); }
					switch (alt234)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:690:12: NEWLINE
						{
						DebugLocation(690, 12);
						NEWLINE537=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6520); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE537);


						}
						break;

					default:
						if (cnt234 >= 1)
							goto loop234;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee234 = new EarlyExitException( 234, input );
						DebugRecognitionException(eee234);
						throw eee234;
					}
					cnt234++;
				}
				loop234:
					;

				} finally { DebugExitSubRule(234); }

				DebugLocation(690, 21);
				// SugarCpp.g:690:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt245=2;
				try { DebugEnterSubRule(245);
				try { DebugEnterDecision(245, false);
				int LA245_0 = input.LA(1);

				if ((LA245_0==INDENT))
				{
					alt245 = 1;
				}
				else if ((LA245_0==IDENT||LA245_0==NUMBER||LA245_0==STRING||LA245_0==86||LA245_0==91||(LA245_0>=93 && LA245_0<=95)||(LA245_0>=97 && LA245_0<=98)||(LA245_0>=101 && LA245_0<=102)||(LA245_0>=131 && LA245_0<=132)||LA245_0==154||LA245_0==157||(LA245_0>=159 && LA245_0<=160)||LA245_0==184))
				{
					alt245 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(245); }
				switch (alt245)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:690:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(690, 23);
					INDENT538=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6525); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT538);

					DebugLocation(690, 30);
					// SugarCpp.g:690:30: ( NEWLINE )*
					try { DebugEnterSubRule(235);
					while (true)
					{
						int alt235=2;
						try { DebugEnterDecision(235, false);
						int LA235_0 = input.LA(1);

						if ((LA235_0==NEWLINE))
						{
							alt235 = 1;
						}


						} finally { DebugExitDecision(235); }
						switch ( alt235 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:690:30: NEWLINE
							{
							DebugLocation(690, 30);
							NEWLINE539=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6527); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE539);


							}
							break;

						default:
							goto loop235;
						}
					}

					loop235:
						;

					} finally { DebugExitSubRule(235); }

					DebugLocation(690, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6530);
					expr540=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr540.Tree);
					DebugLocation(690, 44);
					// SugarCpp.g:690:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(237);
					while (true)
					{
						int alt237=2;
						try { DebugEnterDecision(237, false);
						try
						{
							alt237 = dfa237.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(237); }
						switch ( alt237 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:690:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(690, 45);
							// SugarCpp.g:690:45: ( ',' | NEWLINE )+
							int cnt236=0;
							try { DebugEnterSubRule(236);
							while (true)
							{
								int alt236=3;
								try { DebugEnterDecision(236, false);
								int LA236_0 = input.LA(1);

								if ((LA236_0==100))
								{
									alt236 = 1;
								}
								else if ((LA236_0==NEWLINE))
								{
									alt236 = 2;
								}


								} finally { DebugExitDecision(236); }
								switch (alt236)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:690:46: ','
									{
									DebugLocation(690, 46);
									char_literal541=(IToken)Match(input,100,Follow._100_in_bracket_expr_list6534); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_100.Add(char_literal541);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:690:52: NEWLINE
									{
									DebugLocation(690, 52);
									NEWLINE542=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6538); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE542);


									}
									break;

								default:
									if (cnt236 >= 1)
										goto loop236;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee236 = new EarlyExitException( 236, input );
									DebugRecognitionException(eee236);
									throw eee236;
								}
								cnt236++;
							}
							loop236:
								;

							} finally { DebugExitSubRule(236); }

							DebugLocation(690, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6542);
							expr543=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr543.Tree);

							}
							break;

						default:
							goto loop237;
						}
					}

					loop237:
						;

					} finally { DebugExitSubRule(237); }

					DebugLocation(690, 69);
					// SugarCpp.g:690:69: ( NEWLINE )*
					try { DebugEnterSubRule(238);
					while (true)
					{
						int alt238=2;
						try { DebugEnterDecision(238, false);
						int LA238_0 = input.LA(1);

						if ((LA238_0==NEWLINE))
						{
							alt238 = 1;
						}


						} finally { DebugExitDecision(238); }
						switch ( alt238 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:690:69: NEWLINE
							{
							DebugLocation(690, 69);
							NEWLINE544=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6546); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE544);


							}
							break;

						default:
							goto loop238;
						}
					}

					loop238:
						;

					} finally { DebugExitSubRule(238); }

					DebugLocation(690, 78);
					// SugarCpp.g:690:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt241=2;
					try { DebugEnterSubRule(241);
					try { DebugEnterDecision(241, false);
					int LA241_0 = input.LA(1);

					if ((LA241_0==94))
					{
						alt241 = 1;
					}
					else if ((LA241_0==DEDENT))
					{
						alt241 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(241); }
					switch (alt241)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:690:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(690, 80);
						char_literal545=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6551); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal545);

						DebugLocation(690, 84);
						// SugarCpp.g:690:84: ( NEWLINE )*
						try { DebugEnterSubRule(239);
						while (true)
						{
							int alt239=2;
							try { DebugEnterDecision(239, false);
							int LA239_0 = input.LA(1);

							if ((LA239_0==NEWLINE))
							{
								alt239 = 1;
							}


							} finally { DebugExitDecision(239); }
							switch ( alt239 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:690:84: NEWLINE
								{
								DebugLocation(690, 84);
								NEWLINE546=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6553); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE546);


								}
								break;

							default:
								goto loop239;
							}
						}

						loop239:
							;

						} finally { DebugExitSubRule(239); }

						DebugLocation(690, 93);
						DEDENT547=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6556); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT547);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:690:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(690, 102);
						DEDENT548=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6560); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT548);

						DebugLocation(690, 109);
						// SugarCpp.g:690:109: ( NEWLINE )*
						try { DebugEnterSubRule(240);
						while (true)
						{
							int alt240=2;
							try { DebugEnterDecision(240, false);
							int LA240_0 = input.LA(1);

							if ((LA240_0==NEWLINE))
							{
								alt240 = 1;
							}


							} finally { DebugExitDecision(240); }
							switch ( alt240 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:690:109: NEWLINE
								{
								DebugLocation(690, 109);
								NEWLINE549=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6562); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE549);


								}
								break;

							default:
								goto loop240;
							}
						}

						loop240:
							;

						} finally { DebugExitSubRule(240); }

						DebugLocation(690, 118);
						char_literal550=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6565); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal550);


						}
						break;

					}
					} finally { DebugExitSubRule(241); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 690:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(690, 127);
						// SugarCpp.g:690:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(690, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(690, 139);
						// SugarCpp.g:690:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(690, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:691:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(691, 14);
					// SugarCpp.g:691:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt244=2;
					try { DebugEnterSubRule(244);
					try { DebugEnterDecision(244, false);
					int LA244_0 = input.LA(1);

					if ((LA244_0==IDENT||LA244_0==NUMBER||LA244_0==STRING||LA244_0==86||LA244_0==91||LA244_0==93||LA244_0==95||(LA244_0>=97 && LA244_0<=98)||(LA244_0>=101 && LA244_0<=102)||(LA244_0>=131 && LA244_0<=132)||LA244_0==154||LA244_0==157||(LA244_0>=159 && LA244_0<=160)||LA244_0==184))
					{
						alt244 = 1;
					}
					} finally { DebugExitDecision(244); }
					switch (alt244)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:691:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(691, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6592);
						expr551=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr551.Tree);
						DebugLocation(691, 20);
						// SugarCpp.g:691:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(243);
						while (true)
						{
							int alt243=2;
							try { DebugEnterDecision(243, false);
							int LA243_0 = input.LA(1);

							if ((LA243_0==NEWLINE||LA243_0==100))
							{
								alt243 = 1;
							}


							} finally { DebugExitDecision(243); }
							switch ( alt243 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:691:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(691, 21);
								// SugarCpp.g:691:21: ( ',' | NEWLINE )+
								int cnt242=0;
								try { DebugEnterSubRule(242);
								while (true)
								{
									int alt242=3;
									try { DebugEnterDecision(242, false);
									int LA242_0 = input.LA(1);

									if ((LA242_0==100))
									{
										alt242 = 1;
									}
									else if ((LA242_0==NEWLINE))
									{
										alt242 = 2;
									}


									} finally { DebugExitDecision(242); }
									switch (alt242)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:691:22: ','
										{
										DebugLocation(691, 22);
										char_literal552=(IToken)Match(input,100,Follow._100_in_bracket_expr_list6596); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_100.Add(char_literal552);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:691:28: NEWLINE
										{
										DebugLocation(691, 28);
										NEWLINE553=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6600); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE553);


										}
										break;

									default:
										if (cnt242 >= 1)
											goto loop242;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee242 = new EarlyExitException( 242, input );
										DebugRecognitionException(eee242);
										throw eee242;
									}
									cnt242++;
								}
								loop242:
									;

								} finally { DebugExitSubRule(242); }

								DebugLocation(691, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6604);
								expr554=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr554.Tree);

								}
								break;

							default:
								goto loop243;
							}
						}

						loop243:
							;

						} finally { DebugExitSubRule(243); }


						}
						break;

					}
					} finally { DebugExitSubRule(244); }

					DebugLocation(691, 47);
					char_literal555=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6610); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal555);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 691:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(691, 54);
						// SugarCpp.g:691:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(691, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(691, 66);
						// SugarCpp.g:691:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(691, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(245); }


				}
				break;

			}
			} finally { DebugExitSubRule(246); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 93);
			LeaveRule("bracket_expr_list", 93);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(694, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:696:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $suffix_expr ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 94);
		TraceIn("suffix_expr", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal556 = default(IToken);
		IToken string_literal557 = default(IToken);
		IToken char_literal558 = default(IToken);
		IToken string_literal560 = default(IToken);
		IToken char_literal562 = default(IToken);
		IToken char_literal563 = default(IToken);
		IToken char_literal565 = default(IToken);
		IToken char_literal568 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident559 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside564 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list566 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list567 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident569 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list570 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal556_tree = default(CommonTree);
		CommonTree string_literal557_tree = default(CommonTree);
		CommonTree char_literal558_tree = default(CommonTree);
		CommonTree string_literal560_tree = default(CommonTree);
		CommonTree char_literal562_tree = default(CommonTree);
		CommonTree char_literal563_tree = default(CommonTree);
		CommonTree char_literal565_tree = default(CommonTree);
		CommonTree char_literal568_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(696, 1);
		try
		{
			// SugarCpp.g:697:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $suffix_expr ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:697:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $suffix_expr ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(697, 4);
			// SugarCpp.g:697:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:697:5: a= atom_expr
			{
			DebugLocation(697, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6657);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 697:17: -> $a
			{
				DebugLocation(697, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(697, 24);
			// SugarCpp.g:697:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $suffix_expr ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(248);
			while (true)
			{
				int alt248=8;
				try { DebugEnterDecision(248, false);
				switch (input.LA(1))
				{
				case 98:
					{
					alt248 = 1;
					}
					break;
				case 102:
					{
					alt248 = 2;
					}
					break;
				case 107:
					{
					alt248 = 3;
					}
					break;
				case 105:
					{
					alt248 = 4;
					}
					break;
				case 86:
				case 93:
					{
					alt248 = 5;
					}
					break;
				case 132:
					{
					alt248 = 6;
					}
					break;
				case 131:
					{
					alt248 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(248); }
				switch ( alt248 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:697:26: '++'
					{
					DebugLocation(697, 26);
					string_literal556=(IToken)Match(input,98,Follow._98_in_suffix_expr6667); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(string_literal556);



					{
					// AST REWRITE
					// elements: 98, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 697:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(697, 34);
						// SugarCpp.g:697:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(697, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(697, 48);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(697, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:698:14: '--'
					{
					DebugLocation(698, 14);
					string_literal557=(IToken)Match(input,102,Follow._102_in_suffix_expr6693); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal557);



					{
					// AST REWRITE
					// elements: suffix_expr, 102
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 698:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(698, 22);
						// SugarCpp.g:698:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(698, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(698, 36);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(698, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:699:11: '.' ident
					{
					DebugLocation(699, 11);
					char_literal558=(IToken)Match(input,107,Follow._107_in_suffix_expr6716); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal558);

					DebugLocation(699, 15);
					PushFollow(Follow._ident_in_suffix_expr6718);
					ident559=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident559.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 107, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 699:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(699, 24);
						// SugarCpp.g:699:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(699, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(699, 38);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(699, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(699, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:700:11: '->' ident
					{
					DebugLocation(700, 11);
					string_literal560=(IToken)Match(input,105,Follow._105_in_suffix_expr6743); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal560);

					DebugLocation(700, 16);
					PushFollow(Follow._ident_in_suffix_expr6745);
					ident561=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident561.Tree);


					{
					// AST REWRITE
					// elements: 105, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 700:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(700, 25);
						// SugarCpp.g:700:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(700, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(700, 39);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(700, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(700, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:701:11: ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list
					{
					DebugLocation(701, 11);
					// SugarCpp.g:701:11: ( '!' '(' generic_parameter_inside ')' )?
					int alt247=2;
					try { DebugEnterSubRule(247);
					try { DebugEnterDecision(247, false);
					int LA247_0 = input.LA(1);

					if ((LA247_0==86))
					{
						alt247 = 1;
					}
					} finally { DebugExitDecision(247); }
					switch (alt247)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:701:12: '!' '(' generic_parameter_inside ')'
						{
						DebugLocation(701, 12);
						char_literal562=(IToken)Match(input,86,Follow._86_in_suffix_expr6771); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_86.Add(char_literal562);

						DebugLocation(701, 16);
						char_literal563=(IToken)Match(input,93,Follow._93_in_suffix_expr6773); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal563);

						DebugLocation(701, 20);
						PushFollow(Follow._generic_parameter_inside_in_suffix_expr6775);
						generic_parameter_inside564=generic_parameter_inside();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside564.Tree);
						DebugLocation(701, 45);
						char_literal565=(IToken)Match(input,94,Follow._94_in_suffix_expr6777); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal565);


						}
						break;

					}
					} finally { DebugExitSubRule(247); }

					DebugLocation(701, 51);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6781);
					bracket_expr_list566=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list566.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter_inside, bracket_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 701:69: -> ^( Expr_Call $suffix_expr ( generic_parameter_inside )? bracket_expr_list )
					{
						DebugLocation(701, 72);
						// SugarCpp.g:701:72: ^( Expr_Call $suffix_expr ( generic_parameter_inside )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(701, 74);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(701, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(701, 97);
						// SugarCpp.g:701:97: ( generic_parameter_inside )?
						if (stream_generic_parameter_inside.HasNext)
						{
							DebugLocation(701, 97);
							adaptor.AddChild(root_1, stream_generic_parameter_inside.NextTree());

						}
						stream_generic_parameter_inside.Reset();
						DebugLocation(701, 123);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:702:11: square_expr_list
					{
					DebugLocation(702, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6807);
					square_expr_list567=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list567.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 702:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(702, 31);
						// SugarCpp.g:702:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(702, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(702, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(702, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:703:11: '@' ident bracket_expr_list
					{
					DebugLocation(703, 11);
					char_literal568=(IToken)Match(input,131,Follow._131_in_suffix_expr6830); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal568);

					DebugLocation(703, 15);
					PushFollow(Follow._ident_in_suffix_expr6832);
					ident569=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident569.Tree);
					DebugLocation(703, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6834);
					bracket_expr_list570=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list570.Tree);


					{
					// AST REWRITE
					// elements: ident, bracket_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 703:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(703, 42);
						// SugarCpp.g:703:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(703, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(703, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(703, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(703, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop248;
				}
			}

			loop248:
				;

			} finally { DebugExitSubRule(248); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 94);
			LeaveRule("suffix_expr", 94);
			LeaveRule_suffix_expr();
		}
		DebugLocation(705, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:707:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 95);
		TraceIn("atom_expr", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER571 = default(IToken);
		IToken STRING573 = default(IToken);
		IToken char_literal574 = default(IToken);
		IToken char_literal576 = default(IToken);
		IToken char_literal577 = default(IToken);
		IToken char_literal579 = default(IToken);
		IToken char_literal580 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident572 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident575 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr578 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER571_tree = default(CommonTree);
		CommonTree STRING573_tree = default(CommonTree);
		CommonTree char_literal574_tree = default(CommonTree);
		CommonTree char_literal576_tree = default(CommonTree);
		CommonTree char_literal577_tree = default(CommonTree);
		CommonTree char_literal579_tree = default(CommonTree);
		CommonTree char_literal580_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(707, 1);
		try
		{
			// SugarCpp.g:708:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt251=5;
			try { DebugEnterDecision(251, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt251 = 1;
				}
				break;
			case IDENT:
				{
				alt251 = 2;
				}
				break;
			case STRING:
				{
				alt251 = 3;
				}
				break;
			case 131:
				{
				alt251 = 4;
				}
				break;
			case 93:
				{
				alt251 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 251, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(251); }
			switch (alt251)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:708:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(708, 4);
				NUMBER571=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6872); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER571_tree = (CommonTree)adaptor.Create(NUMBER571);
				adaptor.AddChild(root_0, NUMBER571_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:709:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(709, 4);
				PushFollow(Follow._ident_in_atom_expr6877);
				ident572=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident572.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:710:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(710, 4);
				STRING573=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6882); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING573_tree = (CommonTree)adaptor.Create(STRING573);
				adaptor.AddChild(root_0, STRING573_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:711:4: '@' ident
				{
				DebugLocation(711, 4);
				char_literal574=(IToken)Match(input,131,Follow._131_in_atom_expr6887); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal574);

				DebugLocation(711, 8);
				PushFollow(Follow._ident_in_atom_expr6889);
				ident575=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident575.Tree);


				{
				// AST REWRITE
				// elements: 131, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 711:14: -> ^( '@' ident )
				{
					DebugLocation(711, 17);
					// SugarCpp.g:711:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(711, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

					DebugLocation(711, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:712:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(712, 4);
				char_literal576=(IToken)Match(input,93,Follow._93_in_atom_expr6902); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal576);

				DebugLocation(712, 9);
				PushFollow(Follow._expr_in_atom_expr6906);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(712, 15);
				// SugarCpp.g:712:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt250=2;
				try { DebugEnterSubRule(250);
				try { DebugEnterDecision(250, false);
				int LA250_0 = input.LA(1);

				if ((LA250_0==100))
				{
					alt250 = 1;
				}
				else if ((LA250_0==94))
				{
					alt250 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 250, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(250); }
				switch (alt250)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:712:17: ( ',' expr )+ ')'
					{
					DebugLocation(712, 17);
					// SugarCpp.g:712:17: ( ',' expr )+
					int cnt249=0;
					try { DebugEnterSubRule(249);
					while (true)
					{
						int alt249=2;
						try { DebugEnterDecision(249, false);
						int LA249_0 = input.LA(1);

						if ((LA249_0==100))
						{
							alt249 = 1;
						}


						} finally { DebugExitDecision(249); }
						switch (alt249)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:712:18: ',' expr
							{
							DebugLocation(712, 18);
							char_literal577=(IToken)Match(input,100,Follow._100_in_atom_expr6911); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal577);

							DebugLocation(712, 22);
							PushFollow(Follow._expr_in_atom_expr6913);
							expr578=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr578.Tree);

							}
							break;

						default:
							if (cnt249 >= 1)
								goto loop249;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee249 = new EarlyExitException( 249, input );
							DebugRecognitionException(eee249);
							throw eee249;
						}
						cnt249++;
					}
					loop249:
						;

					} finally { DebugExitSubRule(249); }

					DebugLocation(712, 29);
					char_literal579=(IToken)Match(input,94,Follow._94_in_atom_expr6917); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal579);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 712:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(712, 36);
						// SugarCpp.g:712:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(712, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(712, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(712, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:713:17: ')' {...}?
					{
					DebugLocation(713, 17);
					char_literal580=(IToken)Match(input,94,Follow._94_in_atom_expr6944); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal580);

					DebugLocation(713, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 713:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(713, 40);
						// SugarCpp.g:713:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(713, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(713, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(250); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 95);
			LeaveRule("atom_expr", 95);
			LeaveRule_atom_expr();
		}
		DebugLocation(715, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:717:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 96);
		TraceIn("lvalue_item", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix581 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(717, 1);
		try
		{
			// SugarCpp.g:718:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:718:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(718, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6975);
			lvalue_prefix581=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix581.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 96);
			LeaveRule("lvalue_item", 96);
			LeaveRule_lvalue_item();
		}
		DebugLocation(719, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:721:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 97);
		TraceIn("lvalue_prefix", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op582 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix583 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix584 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(721, 1);
		try
		{
			// SugarCpp.g:722:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt252=2;
			try { DebugEnterDecision(252, false);
			int LA252_0 = input.LA(1);

			if ((LA252_0==86||LA252_0==91||LA252_0==95||(LA252_0>=97 && LA252_0<=98)||(LA252_0>=101 && LA252_0<=102)||LA252_0==160||LA252_0==184))
			{
				alt252 = 1;
			}
			else if ((LA252_0==IDENT||LA252_0==131))
			{
				alt252 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 252, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(252); }
			switch (alt252)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:722:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(722, 4);
				// SugarCpp.g:722:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:722:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(722, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6987);
				prefix_expr_op582=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op582.Tree);
				DebugLocation(722, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6989);
				lvalue_prefix583=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix583.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 722:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(722, 38);
					// SugarCpp.g:722:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(722, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(722, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(722, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:723:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(723, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix7005);
				lvalue_suffix584=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix584.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 97);
			LeaveRule("lvalue_prefix", 97);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(724, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:726:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 98);
		TraceIn("lvalue_suffix", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal585 = default(IToken);
		IToken string_literal586 = default(IToken);
		IToken char_literal587 = default(IToken);
		IToken string_literal589 = default(IToken);
		IToken char_literal591 = default(IToken);
		IToken char_literal592 = default(IToken);
		IToken char_literal594 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident588 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident590 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside593 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list595 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list596 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal585_tree = default(CommonTree);
		CommonTree string_literal586_tree = default(CommonTree);
		CommonTree char_literal587_tree = default(CommonTree);
		CommonTree string_literal589_tree = default(CommonTree);
		CommonTree char_literal591_tree = default(CommonTree);
		CommonTree char_literal592_tree = default(CommonTree);
		CommonTree char_literal594_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(726, 1);
		try
		{
			// SugarCpp.g:727:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:727:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(727, 4);
			// SugarCpp.g:727:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:727:5: a= lvalue_atom
			{
			DebugLocation(727, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix7019);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 727:19: -> $a
			{
				DebugLocation(727, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(727, 26);
			// SugarCpp.g:727:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter_inside )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(254);
			while (true)
			{
				int alt254=7;
				try { DebugEnterDecision(254, false);
				switch (input.LA(1))
				{
				case 98:
					{
					alt254 = 1;
					}
					break;
				case 102:
					{
					alt254 = 2;
					}
					break;
				case 107:
					{
					alt254 = 3;
					}
					break;
				case 105:
					{
					alt254 = 4;
					}
					break;
				case 86:
				case 93:
					{
					alt254 = 5;
					}
					break;
				case 132:
					{
					alt254 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(254); }
				switch ( alt254 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:727:28: '++'
					{
					DebugLocation(727, 28);
					string_literal585=(IToken)Match(input,98,Follow._98_in_lvalue_suffix7029); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(string_literal585);



					{
					// AST REWRITE
					// elements: 98, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 727:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(727, 36);
						// SugarCpp.g:727:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(727, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(727, 50);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(727, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:728:16: '--'
					{
					DebugLocation(728, 16);
					string_literal586=(IToken)Match(input,102,Follow._102_in_lvalue_suffix7057); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal586);



					{
					// AST REWRITE
					// elements: 102, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 728:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(728, 24);
						// SugarCpp.g:728:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(728, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(728, 38);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(728, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:729:13: '.' ident
					{
					DebugLocation(729, 13);
					char_literal587=(IToken)Match(input,107,Follow._107_in_lvalue_suffix7082); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal587);

					DebugLocation(729, 17);
					PushFollow(Follow._ident_in_lvalue_suffix7084);
					ident588=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident588.Tree);


					{
					// AST REWRITE
					// elements: 107, lvalue_suffix, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 729:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(729, 26);
						// SugarCpp.g:729:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(729, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(729, 40);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(729, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(729, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:730:13: '->' ident
					{
					DebugLocation(730, 13);
					string_literal589=(IToken)Match(input,105,Follow._105_in_lvalue_suffix7111); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal589);

					DebugLocation(730, 18);
					PushFollow(Follow._ident_in_lvalue_suffix7113);
					ident590=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident590.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 105, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 730:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(730, 27);
						// SugarCpp.g:730:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(730, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(730, 41);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(730, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(730, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:731:13: ( '!' '(' generic_parameter_inside ')' )? bracket_expr_list
					{
					DebugLocation(731, 13);
					// SugarCpp.g:731:13: ( '!' '(' generic_parameter_inside ')' )?
					int alt253=2;
					try { DebugEnterSubRule(253);
					try { DebugEnterDecision(253, false);
					int LA253_0 = input.LA(1);

					if ((LA253_0==86))
					{
						alt253 = 1;
					}
					} finally { DebugExitDecision(253); }
					switch (alt253)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:731:14: '!' '(' generic_parameter_inside ')'
						{
						DebugLocation(731, 14);
						char_literal591=(IToken)Match(input,86,Follow._86_in_lvalue_suffix7141); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_86.Add(char_literal591);

						DebugLocation(731, 18);
						char_literal592=(IToken)Match(input,93,Follow._93_in_lvalue_suffix7143); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal592);

						DebugLocation(731, 22);
						PushFollow(Follow._generic_parameter_inside_in_lvalue_suffix7145);
						generic_parameter_inside593=generic_parameter_inside();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside593.Tree);
						DebugLocation(731, 47);
						char_literal594=(IToken)Match(input,94,Follow._94_in_lvalue_suffix7147); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal594);


						}
						break;

					}
					} finally { DebugExitSubRule(253); }

					DebugLocation(731, 53);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix7151);
					bracket_expr_list595=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list595.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter_inside, bracket_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 731:71: -> ^( Expr_Call $lvalue_suffix ( generic_parameter_inside )? bracket_expr_list )
					{
						DebugLocation(731, 74);
						// SugarCpp.g:731:74: ^( Expr_Call $lvalue_suffix ( generic_parameter_inside )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(731, 76);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(731, 87);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(731, 101);
						// SugarCpp.g:731:101: ( generic_parameter_inside )?
						if (stream_generic_parameter_inside.HasNext)
						{
							DebugLocation(731, 101);
							adaptor.AddChild(root_1, stream_generic_parameter_inside.NextTree());

						}
						stream_generic_parameter_inside.Reset();
						DebugLocation(731, 127);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:732:13: square_expr_list
					{
					DebugLocation(732, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix7179);
					square_expr_list596=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list596.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 732:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(732, 33);
						// SugarCpp.g:732:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(732, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(732, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(732, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop254;
				}
			}

			loop254:
				;

			} finally { DebugExitSubRule(254); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 98);
			LeaveRule("lvalue_suffix", 98);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(734, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:736:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 99);
		TraceIn("lvalue_atom", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal598 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident597 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident599 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal598_tree = default(CommonTree);
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(736, 1);
		try
		{
			// SugarCpp.g:737:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt255=2;
			try { DebugEnterDecision(255, false);
			int LA255_0 = input.LA(1);

			if ((LA255_0==IDENT))
			{
				alt255 = 1;
			}
			else if ((LA255_0==131))
			{
				alt255 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 255, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(255); }
			switch (alt255)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:737:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(737, 4);
				PushFollow(Follow._ident_in_lvalue_atom7217);
				ident597=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident597.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:738:4: '@' ident
				{
				DebugLocation(738, 4);
				char_literal598=(IToken)Match(input,131,Follow._131_in_lvalue_atom7222); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal598);

				DebugLocation(738, 8);
				PushFollow(Follow._ident_in_lvalue_atom7224);
				ident599=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident599.Tree);


				{
				// AST REWRITE
				// elements: 131, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 738:14: -> ^( '@' ident )
				{
					DebugLocation(738, 17);
					// SugarCpp.g:738:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(738, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

					DebugLocation(738, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 99);
			LeaveRule("lvalue_atom", 99);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(739, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:741:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 100);
		TraceIn("lvalue", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal600 = default(IToken);
		IToken char_literal602 = default(IToken);
		IToken char_literal604 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item601 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item603 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item605 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal600_tree = default(CommonTree);
		CommonTree char_literal602_tree = default(CommonTree);
		CommonTree char_literal604_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(741, 1);
		try
		{
			// SugarCpp.g:742:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt257=2;
			try { DebugEnterDecision(257, false);
			int LA257_0 = input.LA(1);

			if ((LA257_0==93))
			{
				alt257 = 1;
			}
			else if ((LA257_0==IDENT||LA257_0==86||LA257_0==91||LA257_0==95||(LA257_0>=97 && LA257_0<=98)||(LA257_0>=101 && LA257_0<=102)||LA257_0==131||LA257_0==160||LA257_0==184))
			{
				alt257 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 257, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(257); }
			switch (alt257)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:742:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(742, 4);
				char_literal600=(IToken)Match(input,93,Follow._93_in_lvalue7243); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal600);

				DebugLocation(742, 8);
				PushFollow(Follow._lvalue_item_in_lvalue7245);
				lvalue_item601=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item601.Tree);
				DebugLocation(742, 20);
				// SugarCpp.g:742:20: ( ',' lvalue_item )+
				int cnt256=0;
				try { DebugEnterSubRule(256);
				while (true)
				{
					int alt256=2;
					try { DebugEnterDecision(256, false);
					int LA256_0 = input.LA(1);

					if ((LA256_0==100))
					{
						alt256 = 1;
					}


					} finally { DebugExitDecision(256); }
					switch (alt256)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:742:21: ',' lvalue_item
						{
						DebugLocation(742, 21);
						char_literal602=(IToken)Match(input,100,Follow._100_in_lvalue7248); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal602);

						DebugLocation(742, 25);
						PushFollow(Follow._lvalue_item_in_lvalue7250);
						lvalue_item603=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item603.Tree);

						}
						break;

					default:
						if (cnt256 >= 1)
							goto loop256;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee256 = new EarlyExitException( 256, input );
						DebugRecognitionException(eee256);
						throw eee256;
					}
					cnt256++;
				}
				loop256:
					;

				} finally { DebugExitSubRule(256); }

				DebugLocation(742, 39);
				char_literal604=(IToken)Match(input,94,Follow._94_in_lvalue7254); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal604);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 742:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(742, 46);
					// SugarCpp.g:742:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(742, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(742, 60);
					// SugarCpp.g:742:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(742, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:743:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(743, 4);
				PushFollow(Follow._lvalue_item_in_lvalue7268);
				lvalue_item605=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item605.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 100);
			LeaveRule("lvalue", 100);
			LeaveRule_lvalue();
		}
		DebugLocation(744, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:746:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 101);
		TraceIn("ident", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT606 = default(IToken);
		IToken string_literal607 = default(IToken);
		IToken IDENT608 = default(IToken);

		CommonTree IDENT606_tree = default(CommonTree);
		CommonTree string_literal607_tree = default(CommonTree);
		CommonTree IDENT608_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(746, 1);
		try
		{
			// SugarCpp.g:747:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:747:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(747, 4);
			IDENT606=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7279); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT606_tree = (CommonTree)adaptor.Create(IDENT606);
			adaptor.AddChild(root_0, IDENT606_tree);
			}
			DebugLocation(747, 10);
			// SugarCpp.g:747:10: ( '::' IDENT )*
			try { DebugEnterSubRule(258);
			while (true)
			{
				int alt258=2;
				try { DebugEnterDecision(258, false);
				int LA258_0 = input.LA(1);

				if ((LA258_0==112))
				{
					alt258 = 1;
				}


				} finally { DebugExitDecision(258); }
				switch ( alt258 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:747:11: '::' IDENT
					{
					DebugLocation(747, 11);
					string_literal607=(IToken)Match(input,112,Follow._112_in_ident7282); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal607_tree = (CommonTree)adaptor.Create(string_literal607);
					adaptor.AddChild(root_0, string_literal607_tree);
					}
					DebugLocation(747, 16);
					IDENT608=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7284); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT608_tree = (CommonTree)adaptor.Create(IDENT608);
					adaptor.AddChild(root_0, IDENT608_tree);
					}

					}
					break;

				default:
					goto loop258;
				}
			}

			loop258:
				;

			} finally { DebugExitSubRule(258); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 101);
			LeaveRule("ident", 101);
			LeaveRule_ident();
		}
		DebugLocation(748, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:750:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 102);
		TraceIn("infix_func", 102);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal609 = default(IToken);
		IToken char_literal611 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident610 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal609_tree = default(CommonTree);
		CommonTree char_literal611_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(750, 1);
		try
		{
			// SugarCpp.g:751:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:751:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(751, 7);
			char_literal609=(IToken)Match(input,136,Follow._136_in_infix_func7297); if (state.failed) return retval;
			DebugLocation(751, 9);
			PushFollow(Follow._ident_in_infix_func7300);
			ident610=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident610.Tree);
			DebugLocation(751, 18);
			char_literal611=(IToken)Match(input,136,Follow._136_in_infix_func7302); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 102);
			LeaveRule("infix_func", 102);
			LeaveRule_infix_func();
		}
		DebugLocation(752, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 103);
		TraceIn("synpred1_SugarCpp_fragment", 103);
		try
		{
			// SugarCpp.g:565:4: ( modify_expr ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:565:5: modify_expr ( '<|' | '|>' )
			{
			DebugLocation(565, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp4734);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(565, 17);
			if (input.LA(1)==120||input.LA(1)==182)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 103);
			LeaveRule("synpred1_SugarCpp_fragment", 103);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 104);
		TraceIn("synpred2_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:572:4: ( '[' feed_expr 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:572:5: '[' feed_expr 'for'
			{
			DebugLocation(572, 5);
			Match(input,132,Follow._132_in_synpred2_SugarCpp4848); if (state.failed) return;
			DebugLocation(572, 9);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp4850);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(572, 19);
			Match(input,148,Follow._148_in_synpred2_SugarCpp4852); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 104);
			LeaveRule("synpred2_SugarCpp_fragment", 104);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 105);
		TraceIn("synpred3_SugarCpp_fragment", 105);
		try
		{
			// SugarCpp.g:671:4: ( '(' type_name ')' prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:671:5: '(' type_name ')' prefix_expr
			{
			DebugLocation(671, 5);
			Match(input,93,Follow._93_in_synpred3_SugarCpp6286); if (state.failed) return;
			DebugLocation(671, 9);
			PushFollow(Follow._type_name_in_synpred3_SugarCpp6288);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(671, 19);
			Match(input,94,Follow._94_in_synpred3_SugarCpp6290); if (state.failed) return;
			DebugLocation(671, 23);
			PushFollow(Follow._prefix_expr_in_synpred3_SugarCpp6292);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 105);
			LeaveRule("synpred3_SugarCpp_fragment", 105);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA35 dfa35;
	private DFA42 dfa42;
	private DFA52 dfa52;
	private DFA83 dfa83;
	private DFA93 dfa93;
	private DFA105 dfa105;
	private DFA114 dfa114;
	private DFA119 dfa119;
	private DFA133 dfa133;
	private DFA176 dfa176;
	private DFA165 dfa165;
	private DFA201 dfa201;
	private DFA200 dfa200;
	private DFA209 dfa209;
	private DFA237 dfa237;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa35 = new DFA35( this );
		dfa42 = new DFA42( this );
		dfa52 = new DFA52( this );
		dfa83 = new DFA83( this );
		dfa93 = new DFA93( this );
		dfa105 = new DFA105( this );
		dfa114 = new DFA114( this );
		dfa119 = new DFA119( this );
		dfa133 = new DFA133( this );
		dfa176 = new DFA176( this );
		dfa165 = new DFA165( this );
		dfa201 = new DFA201( this );
		dfa200 = new DFA200( this );
		dfa209 = new DFA209( this );
		dfa237 = new DFA237( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xA1\xFFFF";
		private const string DFA4_eofS =
			"\xA1\xFFFF";
		private const string DFA4_minS =
			"\x3\x2F\x1\xFFFF\x1\x2F\x7\xFFFF\x5\x5D\x4\x2F\x1\x38\x5\x2F\x1\x5D\x3"+
			"\x5E\x5\x5D\x1\x2F\xC\x5E\x1\x2F\x1\x64\x8\x2F\x1\x64\x2\x2F\x1\x64\x2"+
			"\x2F\x1\x64\x2\x2F\x1\x64\x1\x2F\x4\x5E\x1\x5D\x1F\x5E\x2\x2F\x1\x64"+
			"\x2\x2F\x1\x64\x2\x2F\x1\x64\x2\x2F\x1\x64\x2\x2F\x1\x64\x5\x2F\x19\x5E"+
			"\x5\x2F\x5\x5E";
		private const string DFA4_maxS =
			"\x1\xB8\x1\xB0\x1\xB8\x1\xFFFF\x1\xB8\x7\xFFFF\x5\x85\x2\x2F\x1\x3E\x1"+
			"\xB0\x1\x38\x4\x3E\x1\xB8\x1\x85\x2\x64\x1\x70\x5\x85\x1\xB8\x2\x64\x1"+
			"\x70\x2\x64\x1\x70\x2\x64\x1\x70\x2\x64\x1\x70\x1\x3E\x1\x85\x2\x2F\x6"+
			"\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1"+
			"\x85\x1\x2F\x2\x64\x2\x70\x1\x85\x2\x64\x1\x70\x2\x64\x1\x70\x2\x64\x1"+
			"\x70\x2\x64\x1\x70\x2\x64\x1\x70\x2\x64\x2\x70\x2\x64\x2\x70\x2\x64\x2"+
			"\x70\x2\x64\x2\x70\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1"+
			"\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x5\x2F\x1\x70\x2"+
			"\x64\x2\x70\x2\x64\x2\x70\x2\x64\x2\x70\x2\x64\x2\x70\x2\x64\x6\x70\x5"+
			"\x2F\x5\x70";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x95"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\xA1\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x4\x2D\xFFFF\x1\x3\x26\xFFFF\x1\x1\x7\xFFFF\x1\x5\x1\x3\x3\xFFFF"+
				"\x1\x6\x1\x7\x3\xFFFF\x1\xA\x4\xFFFF\x1\x3\x2\xFFFF\x1\xB\x3\xFFFF\x1"+
				"\x2\x2\xFFFF\x2\x3\x5\xFFFF\x1\x9\x2\xFFFF\x1\x8\x1\x3\x7\xFFFF\x1\x3",
				"\x1\xC\x5D\xFFFF\x1\xD\x14\xFFFF\x1\xF\x2\xFFFF\x1\xE\xA\xFFFF\x1\x10",
				"\x1\x3\x2D\xFFFF\x1\x3\x2E\xFFFF\x1\x5\x1\x3\xD\xFFFF\x1\x3\x9\xFFFF"+
				"\x2\x3\x9\xFFFF\x1\x3\x7\xFFFF\x1\x3",
				"",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x7"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x7\x1\x11\x1\x7\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x33\xFFFF\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x16\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x17\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x18\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x19\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1E\x9\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x1F\x5D\xFFFF\x1\x20\x14\xFFFF\x1\x22\x2\xFFFF\x1\x21\xA\xFFFF"+
				"\x1\x23",
				"\x1\x24",
				"\x1\x27\x9\xFFFF\x1\x25\x4\xFFFF\x1\x26",
				"\x1\x2A\x9\xFFFF\x1\x28\x4\xFFFF\x1\x29",
				"\x1\x2D\x9\xFFFF\x1\x2B\x4\xFFFF\x1\x2C",
				"\x1\x30\x9\xFFFF\x1\x2E\x4\xFFFF\x1\x2F",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x7"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x7\x1\x11\x1\x7\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x33\xFFFF\x1\x3",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x36\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x37\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x38\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x39\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x4\x8\xFFFF\x1\x24\x24\xFFFF\x1\x3\x26\xFFFF\x1\x1\x7\xFFFF\x1"+
				"\x5\x1\x3\x3\xFFFF\x1\x6\x1\x7\x3\xFFFF\x1\xA\x4\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\xB\x3\xFFFF\x1\x2\x2\xFFFF\x2\x3\x5\xFFFF\x1\x9\x2\xFFFF\x1\x8\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x48\x9\xFFFF\x1\x46\x4\xFFFF\x1\x47",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4D\x9\xFFFF\x1\x4B\x4\xFFFF\x1\x4C",
				"\x1\x50\x9\xFFFF\x1\x4E\x4\xFFFF\x1\x4F",
				"\x1\x53\x9\xFFFF\x1\x51\x4\xFFFF\x1\x52",
				"\x1\x56\x9\xFFFF\x1\x54\x4\xFFFF\x1\x55",
				"\x1\x59\x9\xFFFF\x1\x57\x4\xFFFF\x1\x58",
				"\x1\x5C\x9\xFFFF\x1\x5A\x4\xFFFF\x1\x5B",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x5D",
				"\x1\x60\x9\xFFFF\x1\x5E\x4\xFFFF\x1\x5F",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x61",
				"\x1\x64\x9\xFFFF\x1\x62\x4\xFFFF\x1\x63",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x65",
				"\x1\x68\x9\xFFFF\x1\x66\x4\xFFFF\x1\x67",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x69",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x7E",
				"\x1\x81\x9\xFFFF\x1\x7F\x4\xFFFF\x1\x80",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x82",
				"\x1\x85\x9\xFFFF\x1\x83\x4\xFFFF\x1\x84",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x86",
				"\x1\x89\x9\xFFFF\x1\x87\x4\xFFFF\x1\x88",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8A",
				"\x1\x8D\x9\xFFFF\x1\x8B\x4\xFFFF\x1\x8C",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8E",
				"\x1\x91\x9\xFFFF\x1\x8F\x4\xFFFF\x1\x90",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x92",
				"\x1\x93",
				"\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "222:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA35 : DFA
	{
		private const string DFA35_eotS =
			"\x4\xFFFF";
		private const string DFA35_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA35_minS =
			"\x1\x38\x1\x8\x2\xFFFF";
		private const string DFA35_maxS =
			"\x1\x38\x1\xB8\x2\xFFFF";
		private const string DFA35_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA35_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA35_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
		private static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
		private static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
		private static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
		private static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
		private static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
		private static readonly short[][] DFA35_transition;

		static DFA35()
		{
			int numStates = DFA35_transitionS.Length;
			DFA35_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA35_transition[i] = DFA.UnpackEncodedString(DFA35_transitionS[i]);
			}
		}

		public DFA35( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 35;
			this.eot = DFA35_eot;
			this.eof = DFA35_eof;
			this.min = DFA35_min;
			this.max = DFA35_max;
			this.accept = DFA35_accept;
			this.special = DFA35_special;
			this.transition = DFA35_transition;
		}

		public override string Description { get { return "269:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x4\xFFFF";
		private const string DFA42_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA42_minS =
			"\x1\x38\x1\x8\x2\xFFFF";
		private const string DFA42_maxS =
			"\x1\x38\x1\xB8\x2\xFFFF";
		private const string DFA42_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA42_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "277:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA52 : DFA
	{
		private const string DFA52_eotS =
			"\x4\xFFFF";
		private const string DFA52_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA52_minS =
			"\x1\x38\x1\x8\x2\xFFFF";
		private const string DFA52_maxS =
			"\x1\x38\x1\xB8\x2\xFFFF";
		private const string DFA52_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA52_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA52_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA52_eot = DFA.UnpackEncodedString(DFA52_eotS);
		private static readonly short[] DFA52_eof = DFA.UnpackEncodedString(DFA52_eofS);
		private static readonly char[] DFA52_min = DFA.UnpackEncodedStringToUnsignedChars(DFA52_minS);
		private static readonly char[] DFA52_max = DFA.UnpackEncodedStringToUnsignedChars(DFA52_maxS);
		private static readonly short[] DFA52_accept = DFA.UnpackEncodedString(DFA52_acceptS);
		private static readonly short[] DFA52_special = DFA.UnpackEncodedString(DFA52_specialS);
		private static readonly short[][] DFA52_transition;

		static DFA52()
		{
			int numStates = DFA52_transitionS.Length;
			DFA52_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA52_transition[i] = DFA.UnpackEncodedString(DFA52_transitionS[i]);
			}
		}

		public DFA52( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 52;
			this.eot = DFA52_eot;
			this.eof = DFA52_eof;
			this.min = DFA52_min;
			this.max = DFA52_max;
			this.accept = DFA52_accept;
			this.special = DFA52_special;
			this.transition = DFA52_transition;
		}

		public override string Description { get { return "287:99: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA83 : DFA
	{
		private const string DFA83_eotS =
			"\x19\xFFFF";
		private const string DFA83_eofS =
			"\x19\xFFFF";
		private const string DFA83_minS =
			"\x1\x2F\x1\xFFFF\x2\x2F\x1\xFFFF\x8\x2F\x1\x5B\x3\x2F\x1\x5B\x4\x2F\x1"+
			"\x5B\x1\x2F\x1\x5B";
		private const string DFA83_maxS =
			"\x1\xB8\x1\xFFFF\x1\xB8\x1\xA6\x1\xFFFF\x1\x2F\x1\xA6\x1\x71\x1\xB8\x2"+
			"\xA6\x1\x9B\x1\x2F\x1\x84\x1\x2F\x1\xA6\x1\xB8\x1\x84\x2\xA6\x1\x9B\x1"+
			"\x2F\x1\x84\x1\x2F\x1\x84";
		private const string DFA83_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\x14\xFFFF";
		private const string DFA83_specialS =
			"\x19\xFFFF}>";
		private static readonly string[] DFA83_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2F\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1"+
				"\x11\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x33\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x1F\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1",
				"",
				"\x1\x8",
				"\x1\xD\x2D\xFFFF\x1\x1\x1F\xFFFF\x1\x1\xF\xFFFF\x1\xA\xD\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\x9\x1\xB",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x7\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x33\xFFFF\x1\x1",
				"\x1\xD\x5D\xFFFF\x1\xA\xD\xFFFF\x1\xC\xA\xFFFF\x1\xB",
				"\x1\xD\x6B\xFFFF\x1\xC\xA\xFFFF\x1\xB",
				"\x1\xD\x6B\xFFFF\x1\xC",
				"\x1\xD",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xF\x4\xFFFF\x1\x1\x6\xFFFF\x1\xE"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\x10\x6\xFFFF\x1\x1",
				"\x1\x11",
				"\x1\x16\x2D\xFFFF\x1\x1\x2F\xFFFF\x1\x13\xD\xFFFF\x1\x15\x9\xFFFF\x1"+
				"\x12\x1\x14",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x1A\xFFFF\x1\x1\x33\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xF\x4\xFFFF\x1\x1\x6\xFFFF\x1\xE"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\x10\x6\xFFFF\x1\x1",
				"\x1\x16\x5D\xFFFF\x1\x13\xD\xFFFF\x1\x15\xA\xFFFF\x1\x14",
				"\x1\x16\x6B\xFFFF\x1\x15\xA\xFFFF\x1\x14",
				"\x1\x16\x6B\xFFFF\x1\x15",
				"\x1\x16",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xF\x4\xFFFF\x1\x1\x6\xFFFF\x1\x17"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\x10\x6\xFFFF\x1\x1",
				"\x1\x18",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xF\x4\xFFFF\x1\x1\x6\xFFFF\x1\x17"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\x10\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA83_eot = DFA.UnpackEncodedString(DFA83_eotS);
		private static readonly short[] DFA83_eof = DFA.UnpackEncodedString(DFA83_eofS);
		private static readonly char[] DFA83_min = DFA.UnpackEncodedStringToUnsignedChars(DFA83_minS);
		private static readonly char[] DFA83_max = DFA.UnpackEncodedStringToUnsignedChars(DFA83_maxS);
		private static readonly short[] DFA83_accept = DFA.UnpackEncodedString(DFA83_acceptS);
		private static readonly short[] DFA83_special = DFA.UnpackEncodedString(DFA83_specialS);
		private static readonly short[][] DFA83_transition;

		static DFA83()
		{
			int numStates = DFA83_transitionS.Length;
			DFA83_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA83_transition[i] = DFA.UnpackEncodedString(DFA83_transitionS[i]);
			}
		}

		public DFA83( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 83;
			this.eot = DFA83_eot;
			this.eof = DFA83_eof;
			this.min = DFA83_min;
			this.max = DFA83_max;
			this.accept = DFA83_accept;
			this.special = DFA83_special;
			this.transition = DFA83_transition;
		}

		public override string Description { get { return "370:36: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA93 : DFA
	{
		private const string DFA93_eotS =
			"\x5\xFFFF";
		private const string DFA93_eofS =
			"\x1\xFFFF\x1\x4\x3\xFFFF";
		private const string DFA93_minS =
			"\x1\x38\x1\x8\x3\xFFFF";
		private const string DFA93_maxS =
			"\x1\x79\x1\xB8\x3\xFFFF";
		private const string DFA93_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA93_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA93_transitionS =
			{
				"\x1\x1\x40\xFFFF\x1\x2",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x3\x7\xFFFF\x1\x1\x24\xFFFF\x1\x4\x26\xFFFF"+
				"\x1\x4\x7\xFFFF\x2\x4\x3\xFFFF\x2\x4\x3\xFFFF\x1\x4\x4\xFFFF\x1\x4\x2"+
				"\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x5\xFFFF\x1\x4\x2\xFFFF\x2"+
				"\x4\x7\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA93_eot = DFA.UnpackEncodedString(DFA93_eotS);
		private static readonly short[] DFA93_eof = DFA.UnpackEncodedString(DFA93_eofS);
		private static readonly char[] DFA93_min = DFA.UnpackEncodedStringToUnsignedChars(DFA93_minS);
		private static readonly char[] DFA93_max = DFA.UnpackEncodedStringToUnsignedChars(DFA93_maxS);
		private static readonly short[] DFA93_accept = DFA.UnpackEncodedString(DFA93_acceptS);
		private static readonly short[] DFA93_special = DFA.UnpackEncodedString(DFA93_specialS);
		private static readonly short[][] DFA93_transition;

		static DFA93()
		{
			int numStates = DFA93_transitionS.Length;
			DFA93_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA93_transition[i] = DFA.UnpackEncodedString(DFA93_transitionS[i]);
			}
		}

		public DFA93( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 93;
			this.eot = DFA93_eot;
			this.eof = DFA93_eof;
			this.min = DFA93_min;
			this.max = DFA93_max;
			this.accept = DFA93_accept;
			this.special = DFA93_special;
			this.transition = DFA93_transition;
		}

		public override string Description { get { return "370:106: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter_ident )? ( func_args )? Func_Declare ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA105 : DFA
	{
		private const string DFA105_eotS =
			"\x9\xFFFF";
		private const string DFA105_eofS =
			"\x9\xFFFF";
		private const string DFA105_minS =
			"\x1\x2F\x1\x8\x4\xFFFF\x1\x2F\x1\xFFFF\x1\x8";
		private const string DFA105_maxS =
			"\x1\xB8\x1\xB5\x4\xFFFF\x1\x2F\x1\xFFFF\x1\xB5";
		private const string DFA105_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA105_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA105_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1C\xFFFF\x1\x5\x2\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x4\x2\xFFFF\x1\x3\x8\xFFFF\x1\x5",
				"\x1\x5\x2F\xFFFF\x1\x5\x1D\xFFFF\x1\x5\x2\xFFFF\x1\x5\x2\xFFFF\x2\x5"+
				"\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x1\x5\x2\xFFFF\x2\x5\x2"+
				"\xFFFF\x1\x5\x5\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1"+
				"\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1\x5\x15\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2F\xFFFF\x1\x5\x1D\xFFFF\x1\x5\x2\xFFFF\x1\x5\x2\xFFFF\x2\x5"+
				"\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x1\x5\x2\xFFFF\x2\x5\x2"+
				"\xFFFF\x1\x5\x5\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1"+
				"\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1\x5\x15\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5"
			};

		private static readonly short[] DFA105_eot = DFA.UnpackEncodedString(DFA105_eotS);
		private static readonly short[] DFA105_eof = DFA.UnpackEncodedString(DFA105_eofS);
		private static readonly char[] DFA105_min = DFA.UnpackEncodedStringToUnsignedChars(DFA105_minS);
		private static readonly char[] DFA105_max = DFA.UnpackEncodedStringToUnsignedChars(DFA105_maxS);
		private static readonly short[] DFA105_accept = DFA.UnpackEncodedString(DFA105_acceptS);
		private static readonly short[] DFA105_special = DFA.UnpackEncodedString(DFA105_specialS);
		private static readonly short[][] DFA105_transition;

		static DFA105()
		{
			int numStates = DFA105_transitionS.Length;
			DFA105_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA105_transition[i] = DFA.UnpackEncodedString(DFA105_transitionS[i]);
			}
		}

		public DFA105( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 105;
			this.eot = DFA105_eot;
			this.eof = DFA105_eof;
			this.min = DFA105_min;
			this.max = DFA105_max;
			this.accept = DFA105_accept;
			this.special = DFA105_special;
			this.transition = DFA105_transition;
		}

		public override string Description { get { return "414:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA114 : DFA
	{
		private const string DFA114_eotS =
			"\x4\xFFFF";
		private const string DFA114_eofS =
			"\x4\xFFFF";
		private const string DFA114_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA114_maxS =
			"\x1\x97\x1\xB8\x2\xFFFF";
		private const string DFA114_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA114_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA114_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x57\xFFFF\x1\x2\x6\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x3\xFFFF\x5\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA114_eot = DFA.UnpackEncodedString(DFA114_eotS);
		private static readonly short[] DFA114_eof = DFA.UnpackEncodedString(DFA114_eofS);
		private static readonly char[] DFA114_min = DFA.UnpackEncodedStringToUnsignedChars(DFA114_minS);
		private static readonly char[] DFA114_max = DFA.UnpackEncodedStringToUnsignedChars(DFA114_maxS);
		private static readonly short[] DFA114_accept = DFA.UnpackEncodedString(DFA114_acceptS);
		private static readonly short[] DFA114_special = DFA.UnpackEncodedString(DFA114_specialS);
		private static readonly short[][] DFA114_transition;

		static DFA114()
		{
			int numStates = DFA114_transitionS.Length;
			DFA114_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA114_transition[i] = DFA.UnpackEncodedString(DFA114_transitionS[i]);
			}
		}

		public DFA114( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 114;
			this.eot = DFA114_eot;
			this.eof = DFA114_eof;
			this.min = DFA114_min;
			this.max = DFA114_max;
			this.accept = DFA114_accept;
			this.special = DFA114_special;
			this.transition = DFA114_transition;
		}

		public override string Description { get { return "445:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA119 : DFA
	{
		private const string DFA119_eotS =
			"\x4\xFFFF";
		private const string DFA119_eofS =
			"\x4\xFFFF";
		private const string DFA119_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA119_maxS =
			"\x1\x97\x1\xB8\x2\xFFFF";
		private const string DFA119_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA119_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA119_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x57\xFFFF\x1\x2\x6\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1"+
				"\x3\x3\xFFFF\x5\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA119_eot = DFA.UnpackEncodedString(DFA119_eotS);
		private static readonly short[] DFA119_eof = DFA.UnpackEncodedString(DFA119_eofS);
		private static readonly char[] DFA119_min = DFA.UnpackEncodedStringToUnsignedChars(DFA119_minS);
		private static readonly char[] DFA119_max = DFA.UnpackEncodedStringToUnsignedChars(DFA119_maxS);
		private static readonly short[] DFA119_accept = DFA.UnpackEncodedString(DFA119_acceptS);
		private static readonly short[] DFA119_special = DFA.UnpackEncodedString(DFA119_specialS);
		private static readonly short[][] DFA119_transition;

		static DFA119()
		{
			int numStates = DFA119_transitionS.Length;
			DFA119_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA119_transition[i] = DFA.UnpackEncodedString(DFA119_transitionS[i]);
			}
		}

		public DFA119( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 119;
			this.eot = DFA119_eot;
			this.eof = DFA119_eof;
			this.min = DFA119_min;
			this.max = DFA119_max;
			this.accept = DFA119_accept;
			this.special = DFA119_special;
			this.transition = DFA119_transition;
		}

		public override string Description { get { return "448:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA133 : DFA
	{
		private const string DFA133_eotS =
			"\x7\xFFFF";
		private const string DFA133_eofS =
			"\x7\xFFFF";
		private const string DFA133_minS =
			"\x1\x2F\x1\x8\x1\xFFFF\x1\x2F\x2\xFFFF\x1\x8";
		private const string DFA133_maxS =
			"\x1\xB8\x1\xB7\x1\xFFFF\x1\x2F\x2\xFFFF\x1\xB7";
		private const string DFA133_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA133_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA133_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x17\xFFFF\x1\x2",
				"\x1\x2\x2F\xFFFF\x1\x2\x1D\xFFFF\x8\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xB\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2F\xFFFF\x1\x2\x1D\xFFFF\x8\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xB\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2"
			};

		private static readonly short[] DFA133_eot = DFA.UnpackEncodedString(DFA133_eotS);
		private static readonly short[] DFA133_eof = DFA.UnpackEncodedString(DFA133_eofS);
		private static readonly char[] DFA133_min = DFA.UnpackEncodedStringToUnsignedChars(DFA133_minS);
		private static readonly char[] DFA133_max = DFA.UnpackEncodedStringToUnsignedChars(DFA133_maxS);
		private static readonly short[] DFA133_accept = DFA.UnpackEncodedString(DFA133_acceptS);
		private static readonly short[] DFA133_special = DFA.UnpackEncodedString(DFA133_specialS);
		private static readonly short[][] DFA133_transition;

		static DFA133()
		{
			int numStates = DFA133_transitionS.Length;
			DFA133_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA133_transition[i] = DFA.UnpackEncodedString(DFA133_transitionS[i]);
			}
		}

		public DFA133( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 133;
			this.eot = DFA133_eot;
			this.eof = DFA133_eof;
			this.min = DFA133_min;
			this.max = DFA133_max;
			this.accept = DFA133_accept;
			this.special = DFA133_special;
			this.transition = DFA133_transition;
		}

		public override string Description { get { return "479:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA176 : DFA
	{
		private const string DFA176_eotS =
			"\x7\xFFFF";
		private const string DFA176_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA176_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA176_maxS =
			"\x1\xB3\x1\xB8\x2\xFFFF\x2\xB8\x1\xFFFF";
		private const string DFA176_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA176_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA176_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xD\xFFFF\x1\x3\x21\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x15\xFFFF\x2\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C"+
				"\xFFFF\x2\x3\x7\xFFFF\x3\x3\x1\xFFFF\x8\x3\x2\xFFFF\x3\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x3\x3\x3\xFFFF\x7\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x26\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x4\xFFFF\x3\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1"+
				"\x6\x1\x3\x4\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x4\xFFFF\x3\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1"+
				"\x6\x1\x3\x4\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA176_eot = DFA.UnpackEncodedString(DFA176_eotS);
		private static readonly short[] DFA176_eof = DFA.UnpackEncodedString(DFA176_eofS);
		private static readonly char[] DFA176_min = DFA.UnpackEncodedStringToUnsignedChars(DFA176_minS);
		private static readonly char[] DFA176_max = DFA.UnpackEncodedStringToUnsignedChars(DFA176_maxS);
		private static readonly short[] DFA176_accept = DFA.UnpackEncodedString(DFA176_acceptS);
		private static readonly short[] DFA176_special = DFA.UnpackEncodedString(DFA176_specialS);
		private static readonly short[][] DFA176_transition;

		static DFA176()
		{
			int numStates = DFA176_transitionS.Length;
			DFA176_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA176_transition[i] = DFA.UnpackEncodedString(DFA176_transitionS[i]);
			}
		}

		public DFA176( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 176;
			this.eot = DFA176_eot;
			this.eof = DFA176_eof;
			this.min = DFA176_min;
			this.max = DFA176_max;
			this.accept = DFA176_accept;
			this.special = DFA176_special;
			this.transition = DFA176_transition;
		}

		public override string Description { get { return "530:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA165 : DFA
	{
		private const string DFA165_eotS =
			"\x4\xFFFF";
		private const string DFA165_eofS =
			"\x4\xFFFF";
		private const string DFA165_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA165_maxS =
			"\x2\x38\x2\xFFFF";
		private const string DFA165_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA165_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA165_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x1",
				"\x1\x2\x27\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA165_eot = DFA.UnpackEncodedString(DFA165_eotS);
		private static readonly short[] DFA165_eof = DFA.UnpackEncodedString(DFA165_eofS);
		private static readonly char[] DFA165_min = DFA.UnpackEncodedStringToUnsignedChars(DFA165_minS);
		private static readonly char[] DFA165_max = DFA.UnpackEncodedStringToUnsignedChars(DFA165_maxS);
		private static readonly short[] DFA165_accept = DFA.UnpackEncodedString(DFA165_acceptS);
		private static readonly short[] DFA165_special = DFA.UnpackEncodedString(DFA165_specialS);
		private static readonly short[][] DFA165_transition;

		static DFA165()
		{
			int numStates = DFA165_transitionS.Length;
			DFA165_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA165_transition[i] = DFA.UnpackEncodedString(DFA165_transitionS[i]);
			}
		}

		public DFA165( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 165;
			this.eot = DFA165_eot;
			this.eof = DFA165_eof;
			this.min = DFA165_min;
			this.max = DFA165_max;
			this.accept = DFA165_accept;
			this.special = DFA165_special;
			this.transition = DFA165_transition;
		}

		public override string Description { get { return "530:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA201 : DFA
	{
		private const string DFA201_eotS =
			"\x7\xFFFF";
		private const string DFA201_eofS =
			"\x7\xFFFF";
		private const string DFA201_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA201_maxS =
			"\x5\xB8\x2\xFFFF";
		private const string DFA201_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA201_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA201_transitionS =
			{
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA201_eot = DFA.UnpackEncodedString(DFA201_eotS);
		private static readonly short[] DFA201_eof = DFA.UnpackEncodedString(DFA201_eofS);
		private static readonly char[] DFA201_min = DFA.UnpackEncodedStringToUnsignedChars(DFA201_minS);
		private static readonly char[] DFA201_max = DFA.UnpackEncodedStringToUnsignedChars(DFA201_maxS);
		private static readonly short[] DFA201_accept = DFA.UnpackEncodedString(DFA201_acceptS);
		private static readonly short[] DFA201_special = DFA.UnpackEncodedString(DFA201_specialS);
		private static readonly short[][] DFA201_transition;

		static DFA201()
		{
			int numStates = DFA201_transitionS.Length;
			DFA201_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA201_transition[i] = DFA.UnpackEncodedString(DFA201_transitionS[i]);
			}
		}

		public DFA201( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 201;
			this.eot = DFA201_eot;
			this.eof = DFA201_eof;
			this.min = DFA201_min;
			this.max = DFA201_max;
			this.accept = DFA201_accept;
			this.special = DFA201_special;
			this.transition = DFA201_transition;
		}

		public override string Description { get { return "573:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA200 : DFA
	{
		private const string DFA200_eotS =
			"\x7\xFFFF";
		private const string DFA200_eofS =
			"\x7\xFFFF";
		private const string DFA200_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA200_maxS =
			"\x1\x85\x4\xB8\x2\xFFFF";
		private const string DFA200_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA200_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA200_transitionS =
			{
				"\x1\x4\x27\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x20\xFFFF\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA200_eot = DFA.UnpackEncodedString(DFA200_eotS);
		private static readonly short[] DFA200_eof = DFA.UnpackEncodedString(DFA200_eofS);
		private static readonly char[] DFA200_min = DFA.UnpackEncodedStringToUnsignedChars(DFA200_minS);
		private static readonly char[] DFA200_max = DFA.UnpackEncodedStringToUnsignedChars(DFA200_maxS);
		private static readonly short[] DFA200_accept = DFA.UnpackEncodedString(DFA200_acceptS);
		private static readonly short[] DFA200_special = DFA.UnpackEncodedString(DFA200_specialS);
		private static readonly short[][] DFA200_transition;

		static DFA200()
		{
			int numStates = DFA200_transitionS.Length;
			DFA200_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA200_transition[i] = DFA.UnpackEncodedString(DFA200_transitionS[i]);
			}
		}

		public DFA200( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 200;
			this.eot = DFA200_eot;
			this.eof = DFA200_eof;
			this.min = DFA200_min;
			this.max = DFA200_max;
			this.accept = DFA200_accept;
			this.special = DFA200_special;
			this.transition = DFA200_transition;
		}

		public override string Description { get { return "()* loopback of 573:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA209 : DFA
	{
		private const string DFA209_eotS =
			"\xB\xFFFF";
		private const string DFA209_eofS =
			"\xB\xFFFF";
		private const string DFA209_minS =
			"\x2\x2F\x1\xFFFF\x1\x56\x1\xFFFF\x2\x2F\x2\x56\x1\x2F\x1\x56";
		private const string DFA209_maxS =
			"\x2\xB8\x1\xFFFF\x1\xB7\x1\xFFFF\x1\x2F\x1\xB8\x2\xB7\x1\x2F\x1\xB7";
		private const string DFA209_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA209_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA209_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x2\x17\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\xA\xFFFF\x1"+
				"\x4\x11\xFFFF\x2\x2\x8\xFFFF\x1\x2\xC\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x4\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"",
				"\xE\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x17\xFFFF\x1\x2",
				"\xE\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2",
				"\xE\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2",
				"\x1\xA",
				"\xE\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2"
			};

		private static readonly short[] DFA209_eot = DFA.UnpackEncodedString(DFA209_eotS);
		private static readonly short[] DFA209_eof = DFA.UnpackEncodedString(DFA209_eofS);
		private static readonly char[] DFA209_min = DFA.UnpackEncodedStringToUnsignedChars(DFA209_minS);
		private static readonly char[] DFA209_max = DFA.UnpackEncodedStringToUnsignedChars(DFA209_maxS);
		private static readonly short[] DFA209_accept = DFA.UnpackEncodedString(DFA209_acceptS);
		private static readonly short[] DFA209_special = DFA.UnpackEncodedString(DFA209_specialS);
		private static readonly short[][] DFA209_transition;

		static DFA209()
		{
			int numStates = DFA209_transitionS.Length;
			DFA209_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA209_transition[i] = DFA.UnpackEncodedString(DFA209_transitionS[i]);
			}
		}

		public DFA209( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 209;
			this.eot = DFA209_eot;
			this.eof = DFA209_eof;
			this.min = DFA209_min;
			this.max = DFA209_max;
			this.accept = DFA209_accept;
			this.special = DFA209_special;
			this.transition = DFA209_transition;
		}

		public override string Description { get { return "586:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA237 : DFA
	{
		private const string DFA237_eotS =
			"\x4\xFFFF";
		private const string DFA237_eofS =
			"\x4\xFFFF";
		private const string DFA237_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA237_maxS =
			"\x1\x64\x1\xB8\x2\xFFFF";
		private const string DFA237_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA237_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA237_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x26\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x1C\xFFFF\x2\x3\x15\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x17\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA237_eot = DFA.UnpackEncodedString(DFA237_eotS);
		private static readonly short[] DFA237_eof = DFA.UnpackEncodedString(DFA237_eofS);
		private static readonly char[] DFA237_min = DFA.UnpackEncodedStringToUnsignedChars(DFA237_minS);
		private static readonly char[] DFA237_max = DFA.UnpackEncodedStringToUnsignedChars(DFA237_maxS);
		private static readonly short[] DFA237_accept = DFA.UnpackEncodedString(DFA237_acceptS);
		private static readonly short[] DFA237_special = DFA.UnpackEncodedString(DFA237_specialS);
		private static readonly short[][] DFA237_transition;

		static DFA237()
		{
			int numStates = DFA237_transitionS.Length;
			DFA237_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA237_transition[i] = DFA.UnpackEncodedString(DFA237_transitionS[i]);
			}
		}

		public DFA237( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 237;
			this.eot = DFA237_eot;
			this.eof = DFA237_eof;
			this.min = DFA237_min;
			this.max = DFA237_max;
			this.accept = DFA237_accept;
			this.special = DFA237_special;
			this.transition = DFA237_transition;
		}

		public override string Description { get { return "()* loopback of 690:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root594 = new BitSet(new ulong[]{0x100800000000000UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _global_block_in_root597 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block619 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block621 = new BitSet(new ulong[]{0x100800000000002UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _func_def_in_node644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item712 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item715 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item717 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item720 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item722 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_attribute_item744 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item747 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item749 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item752 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item754 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_attribute_item776 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item779 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item781 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item784 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item786 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_attribute_item808 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item811 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item813 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item816 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item818 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_attribute_item840 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item843 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item845 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item848 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item850 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_attribute879 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x1002400002000UL});
		public static readonly BitSet _attribute_item_in_attribute881 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_attribute884 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x1002400002000UL});
		public static readonly BitSet _attribute_item_in_attribute886 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_attribute890 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute892 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x10UL});
		public static readonly BitSet _attribute_in_global_alloc911 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_global_alloc914 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc917 = new BitSet(new ulong[]{0x0UL,0x2800000000000UL});
		public static readonly BitSet _111_in_global_alloc921 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_global_alloc923 = new BitSet(new ulong[]{0x2UL,0x202000020000000UL});
		public static readonly BitSet _121_in_global_alloc928 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _113_in_global_alloc932 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_global_alloc935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_global_alloc1066 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_global_alloc1069 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_global_alloc1072 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_global_alloc1074 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _attribute_in_global_using1122 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_global_using1125 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1127 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _attribute_in_global_typedef1151 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_global_typedef1154 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_global_typedef1156 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_global_typedef1158 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_global_typedef1160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1184 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_import_def1187 = new BitSet(new ulong[]{0x4100000000000002UL});
		public static readonly BitSet _STRING_in_import_def1189 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1193 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_import_def1196 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1198 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _STRING_in_import_def1203 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1205 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1235 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_enum_def1238 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_enum_def1240 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_enum_def1242 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _ident_in_enum_def1245 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_enum_def1248 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_enum_def1250 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1283 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_namespace_def1286 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_namespace_def1288 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1291 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1294 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1296 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _global_block_in_namespace_def1299 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_class_args1328 = new BitSet(new ulong[]{0x800000000000UL,0x2000040000000UL});
		public static readonly BitSet _func_args_in_class_args1332 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_class_args1334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_class_args1346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400001000UL});
		public static readonly BitSet _162_in_class_def1373 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_class_def1376 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def1378 = new BitSet(new ulong[]{0x100000000000002UL,0x8800020000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1381 = new BitSet(new ulong[]{0x100000000000002UL,0x800020000000UL});
		public static readonly BitSet _class_args_in_class_def1385 = new BitSet(new ulong[]{0x100000000000002UL,0x800000000000UL});
		public static readonly BitSet _111_in_class_def1389 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def1391 = new BitSet(new ulong[]{0x100000000000002UL,0x1000000000UL});
		public static readonly BitSet _100_in_class_def1394 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def1396 = new BitSet(new ulong[]{0x100000000000002UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1403 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_class_def1406 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _NEWLINE_in_class_def1408 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _global_block_in_class_def1411 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1459 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_type_list1462 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_list1464 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _type_single_in_type_name1486 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_type_name1490 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_name1493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1497 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name1499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1540 = new BitSet(new ulong[]{0x800000000000UL,0x60000000UL,0x6008002000UL});
		public static readonly BitSet _type_list_in_type_name1542 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name1545 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_type_name1547 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_name1550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1554 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1580 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x10UL});
		public static readonly BitSet _91_in_type_single1584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_type_single1600 = new BitSet(new ulong[]{0x4200800000000000UL,0x76A8400000UL,0x1000001A4000038UL});
		public static readonly BitSet _expr_in_type_single1604 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_type_single1607 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_type_single1609 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_type_single1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_type_single1638 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_type_single1641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1688 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_type_no_array1692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1727 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_type_star1731 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1777 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_type_template_type1781 = new BitSet(new ulong[]{0x800000000000UL,0x2000000020000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_template_type1784 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _100_in_type_template_type1787 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_template_type1789 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _125_in_type_template_type1795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_type_ident1835 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x4008002000UL});
		public static readonly BitSet _141_in_type_ident1838 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x4008000000UL});
		public static readonly BitSet _166_in_type_ident1841 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_type_ident1844 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_type_ident1847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_generic_parameter_inside1878 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_generic_parameter_inside1881 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_generic_parameter_inside1883 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _115_in_generic_parameter1905 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1907 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_generic_parameter1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_generic_parameter_ident1924 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _type_ident_in_generic_parameter_ident1926 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _100_in_generic_parameter_ident1929 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _type_ident_in_generic_parameter_ident1931 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _125_in_generic_parameter_ident1935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1955 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_func_args1958 = new BitSet(new ulong[]{0x800000000000UL,0x2000000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1960 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1982 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_func_args_item1984 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_func_args_item1986 = new BitSet(new ulong[]{0x2UL,0x202000020000000UL});
		public static readonly BitSet _121_in_func_args_item1991 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _113_in_func_args_item1995 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_func_args_item1998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item2049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_func_args_item2109 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _modify_expr_in_func_args_item2113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_func_name2156 = new BitSet(new ulong[]{0x0UL,0x202280000000UL});
		public static readonly BitSet _operator_in_func_name2158 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_func_name2160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2186 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x101006408002000UL});
		public static readonly BitSet _162_in_func_def2189 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x101006008002000UL});
		public static readonly BitSet _176_in_func_def2192 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x100006008002000UL});
		public static readonly BitSet _func_type_in_func_def2195 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x100000000000000UL});
		public static readonly BitSet _184_in_func_def2198 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL});
		public static readonly BitSet _func_name_in_func_def2201 = new BitSet(new ulong[]{0x0UL,0x8000020000000UL});
		public static readonly BitSet _generic_parameter_ident_in_func_def2203 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_def2206 = new BitSet(new ulong[]{0x800000000000UL,0x2000040000000UL});
		public static readonly BitSet _func_args_in_func_def2208 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_func_def2211 = new BitSet(new ulong[]{0x100000000000002UL,0x200000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2215 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_func_def2286 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_func_def2290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2359 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_func_def2362 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2364 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _match_item_in_func_def2368 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2370 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2561 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2563 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2573 = new BitSet(new ulong[]{0x100000000000000UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2576 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _114_in_stmt_block_item2581 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2583 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2600 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2602 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2605 = new BitSet(new ulong[]{0x800000000100UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _DEDENT_in_stmt_block2608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2665 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2694 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _149_in_stmt_expr2704 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2706 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _173_in_stmt_expr2735 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2737 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _179_in_stmt_expr2766 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2768 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _174_in_stmt_expr2797 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2799 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _148_in_stmt_expr2828 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_expr2830 = new BitSet(new ulong[]{0x2UL,0x1000000000UL,0x8600000300000UL});
		public static readonly BitSet _100_in_stmt_expr2833 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_expr2835 = new BitSet(new ulong[]{0x2UL,0x1000000000UL,0x8600000300000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_defer2908 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _stmt_in_stmt_defer2910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_defer2923 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _stmt_in_stmt_defer2925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_stmt_typedef2944 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2946 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_stmt_typedef2948 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_stmt_using_item2973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_stmt_using2981 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2983 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _163_in_stmt_return3004 = new BitSet(new ulong[]{0x4200800000000002UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_return3006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block3027 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _114_in_inline_stmt_block3030 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block3032 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _149_in_stmt_if3054 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_if3056 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3059 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3062 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3065 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if3068 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3070 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_if3105 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_stmt_if3128 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_if3130 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3133 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3136 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3139 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if3142 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3144 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_if3183 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_stmt_while3216 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_while3218 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3222 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3225 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_while3249 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_stmt_while3275 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_while3277 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3281 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_while3308 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3310 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_while3334 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_while3336 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3339 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3364 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_for_range3366 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3370 = new BitSet(new ulong[]{0x2UL,0x0UL,0x60000008000UL});
		public static readonly BitSet _170_in_for_range3374 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3378 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_for_range3381 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_for_range3415 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3419 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_for_range3422 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3426 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_for_range3456 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3460 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_for_range3463 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3544 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_for_map3546 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_map3548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3574 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_for3591 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _154_in_stmt_for3595 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_for3600 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_for3603 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_for3605 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3609 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3612 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_stmt_try3643 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3645 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3648 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3650 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_stmt_try3653 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3655 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3657 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_switch_item3683 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_switch_item3685 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL,0x10000000000UL});
		public static readonly BitSet _100_in_switch_item3688 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_switch_item3690 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3696 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_switch_item3745 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_stmt_switch3787 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_switch3789 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3792 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3795 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3797 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3801 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3803 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x2000000010000UL});
		public static readonly BitSet _144_in_stmt_switch3809 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3811 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3814 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3816 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3847 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_ident_list3850 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_ident_list3852 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3874 = new BitSet(new ulong[]{0x0UL,0x2800000000000UL});
		public static readonly BitSet _111_in_stmt_alloc3878 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_stmt_alloc3880 = new BitSet(new ulong[]{0x2UL,0x202000020000000UL});
		public static readonly BitSet _121_in_stmt_alloc3885 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _113_in_stmt_alloc3889 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_stmt_alloc4007 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc4011 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_alloc4014 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc4016 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify4046 = new BitSet(new ulong[]{0x2UL,0x8260410912000000UL,0x20000000000085UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify4050 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify4052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_modify4076 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify4078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_stmt_modify4105 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify4107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_modify4136 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify4138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item4172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr4186 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4196 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4199 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4201 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_where_expr4204 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _where_item_in_where_expr4208 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4212 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4248 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4251 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _NEWLINE_in_where_expr4253 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _where_item_in_where_expr4257 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4259 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _DEDENT_in_where_expr4264 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4266 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4319 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4322 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _NEWLINE_in_where_expr4324 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _where_item_in_where_expr4328 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4330 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _DEDENT_in_where_expr4335 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4337 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_where_expr4378 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4380 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4383 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _NEWLINE_in_where_expr4385 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _where_item_in_where_expr4389 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4391 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _DEDENT_in_where_expr4396 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_let_expr4454 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _where_item_in_let_expr4456 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_let_expr4460 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_let_expr4464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4488 = new BitSet(new ulong[]{0x4301800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _INDENT_in_let_expr4493 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_let_expr4495 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_let_expr4498 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4500 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4576 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4579 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _NEWLINE_in_let_expr4581 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914384008UL});
		public static readonly BitSet _where_item_in_let_expr4585 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4587 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88914B84008UL});
		public static readonly BitSet _151_in_let_expr4592 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_let_expr4594 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4596 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_match_item4631 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_match_item4633 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_match_item4635 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_match_item4637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_match_expr4658 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000011A4000018UL});
		public static readonly BitSet _expr_in_match_expr4660 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_match_expr4664 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_match_expr4666 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4670 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4673 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4675 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _match_item_in_match_expr4679 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4681 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr4712 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr4751 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL,0x40000000000000UL});
		public static readonly BitSet _120_in_feed_expr4761 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _list_expr_in_feed_expr4763 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_feed_expr4797 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _list_expr_in_feed_expr4799 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr4836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_list_expr4857 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_list_expr4859 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_list_expr4861 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_list_expr4863 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_list_expr4866 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_list_expr4868 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_list_expr4872 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_list_expr4874 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_list_expr4876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_list_expr4904 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000038UL});
		public static readonly BitSet _100_in_list_expr4908 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _NEWLINE_in_list_expr4912 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _INDENT_in_list_expr4916 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _DEDENT_in_list_expr4920 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_list_expr4924 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_list_expr4928 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _NEWLINE_in_list_expr4932 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _INDENT_in_list_expr4936 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _DEDENT_in_list_expr4940 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_list_expr4944 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_list_expr4951 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_list_expr4955 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _INDENT_in_list_expr4959 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _DEDENT_in_list_expr4963 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_list_expr4967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value5009 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value5012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lambda_type5027 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_lambda_type5029 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_lambda_type5031 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lambda_expr5046 = new BitSet(new ulong[]{0x800000000000UL,0x2000040000000UL});
		public static readonly BitSet _func_args_in_lambda_expr5048 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_lambda_expr5051 = new BitSet(new ulong[]{0x0UL,0x1800028020000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr5053 = new BitSet(new ulong[]{0x0UL,0x1800028000000000UL});
		public static readonly BitSet _105_in_lambda_expr5058 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr5060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_lambda_expr5095 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr5097 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_lambda_expr5129 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr5131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lambda_expr5166 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr5168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr5203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr5260 = new BitSet(new ulong[]{0x2UL,0x242410912000000UL,0x20000000000081UL});
		public static readonly BitSet _set_in_modify_expr5264 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_in_modify_expr5309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_modify_expr5318 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_in_modify_expr5321 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item5334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr5346 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_cond_expr5355 = new BitSet(new ulong[]{0x4200800000000002UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5361 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_cond_expr5365 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5369 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr5483 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000200000000UL});
		public static readonly BitSet _or_op_in_or_expr5494 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _and_expr_in_or_expr5498 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000200000000UL});
		public static readonly BitSet _bit_or_in_and_expr5540 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x200UL});
		public static readonly BitSet _and_op_in_and_expr5551 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _bit_or_in_and_expr5555 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x200UL});
		public static readonly BitSet _bit_xor_in_bit_or5586 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_bit_or5595 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _bit_xor_in_bit_or5599 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5629 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_bit_xor5638 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _bit_and_in_bit_xor5642 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _cmp_expr_in_bit_and5672 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_bit_and5681 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cmp_expr_in_bit_and5685 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _chain_op_in_chain_list5777 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _shift_expr_in_chain_list5779 = new BitSet(new ulong[]{0x2UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5793 = new BitSet(new ulong[]{0x2UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _chain_op_in_cmp_expr5805 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5809 = new BitSet(new ulong[]{0x2UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5917 = new BitSet(new ulong[]{0x2UL,0x8020000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5926 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _add_expr_in_shift_expr5930 = new BitSet(new ulong[]{0x2UL,0x8020000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5960 = new BitSet(new ulong[]{0x2UL,0x2200000000UL});
		public static readonly BitSet _97_in_add_expr5970 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _mul_expr_in_add_expr5974 = new BitSet(new ulong[]{0x2UL,0x2200000000UL});
		public static readonly BitSet _101_in_add_expr5999 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _mul_expr_in_add_expr6003 = new BitSet(new ulong[]{0x2UL,0x2200000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr6041 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _95_in_mul_expr6051 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr6055 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _109_in_mul_expr6082 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr6086 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _88_in_mul_expr6113 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr6117 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _selector_expr_in_infix_expr6157 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _infix_func_in_infix_expr6167 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _selector_expr_in_infix_expr6171 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _cast_expr_in_selector_expr6203 = new BitSet(new ulong[]{0x2UL,0x140000000000UL});
		public static readonly BitSet _106_in_selector_expr6213 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_selector_expr6217 = new BitSet(new ulong[]{0x2UL,0x140000000000UL});
		public static readonly BitSet _108_in_selector_expr6243 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_selector_expr6248 = new BitSet(new ulong[]{0x2UL,0x140000000000UL});
		public static readonly BitSet _93_in_cast_expr6297 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_cast_expr6299 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_cast_expr6301 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6303 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr6368 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr6370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_prefix_expr6386 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr6388 = new BitSet(new ulong[]{0x0UL,0x20000000UL,0x10UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr6392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_square_expr_list6451 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_square_expr_list6453 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_square_expr_list6456 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_square_expr_list6458 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_square_expr_list6462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_bracket_expr_list6482 = new BitSet(new ulong[]{0x4300800000000000UL,0x66E8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6485 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _100_in_bracket_expr_list6488 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6490 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6520 = new BitSet(new ulong[]{0x4301800000000000UL,0x66E8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6525 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6527 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6530 = new BitSet(new ulong[]{0x100000000000100UL,0x1040000000UL});
		public static readonly BitSet _100_in_bracket_expr_list6534 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6538 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6542 = new BitSet(new ulong[]{0x100000000000100UL,0x1040000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6546 = new BitSet(new ulong[]{0x100000000000100UL,0x40000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6551 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6553 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6560 = new BitSet(new ulong[]{0x100000000000000UL,0x40000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6562 = new BitSet(new ulong[]{0x100000000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6592 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _100_in_bracket_expr_list6596 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6600 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6604 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6657 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _98_in_suffix_expr6667 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _102_in_suffix_expr6693 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _107_in_suffix_expr6716 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6718 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _105_in_suffix_expr6743 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6745 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _86_in_suffix_expr6771 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_suffix_expr6773 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _generic_parameter_inside_in_suffix_expr6775 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_suffix_expr6777 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6781 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6807 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _131_in_suffix_expr6830 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6832 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6834 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x18UL});
		public static readonly BitSet _NUMBER_in_atom_expr6872 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6877 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_atom_expr6887 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_atom_expr6889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_atom_expr6902 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_atom_expr6906 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_atom_expr6911 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_atom_expr6913 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_atom_expr6917 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_atom_expr6944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6975 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6987 = new BitSet(new ulong[]{0x800000000000UL,0x6688400000UL,0x100000100000008UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix7005 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix7019 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x10UL});
		public static readonly BitSet _98_in_lvalue_suffix7029 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x10UL});
		public static readonly BitSet _102_in_lvalue_suffix7057 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x10UL});
		public static readonly BitSet _107_in_lvalue_suffix7082 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7084 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x10UL});
		public static readonly BitSet _105_in_lvalue_suffix7111 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7113 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x10UL});
		public static readonly BitSet _86_in_lvalue_suffix7141 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lvalue_suffix7143 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _generic_parameter_inside_in_lvalue_suffix7145 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_lvalue_suffix7147 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix7151 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x10UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix7179 = new BitSet(new ulong[]{0x2UL,0xA4420400000UL,0x10UL});
		public static readonly BitSet _ident_in_lvalue_atom7217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_lvalue_atom7222 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom7224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lvalue7243 = new BitSet(new ulong[]{0x800000000000UL,0x6688400000UL,0x100000100000008UL});
		public static readonly BitSet _lvalue_item_in_lvalue7245 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_lvalue7248 = new BitSet(new ulong[]{0x800000000000UL,0x6688400000UL,0x100000100000008UL});
		public static readonly BitSet _lvalue_item_in_lvalue7250 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_lvalue7254 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue7268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident7279 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_ident7282 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _IDENT_in_ident7284 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _136_in_infix_func7297 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_infix_func7300 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_infix_func7302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp4734 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL,0x40000000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp4736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_synpred2_SugarCpp4848 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp4850 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_synpred2_SugarCpp4852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_synpred3_SugarCpp6286 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_synpred3_SugarCpp6288 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_synpred3_SugarCpp6290 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _prefix_expr_in_synpred3_SugarCpp6292 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
