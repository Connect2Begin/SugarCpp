//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-25 14:14:52

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Expr=48;
	public const int Match_Expr_Item=49;
	public const int Match_Tuple=50;
	public const int NEWLINE=51;
	public const int NUMBER=52;
	public const int Namespace=53;
	public const int Right_Bracket=54;
	public const int Root=55;
	public const int SP=56;
	public const int STRING=57;
	public const int Stmt_Block=58;
	public const int Stmt_Defer=59;
	public const int Stmt_Finally=60;
	public const int Stmt_For=61;
	public const int Stmt_If=62;
	public const int Stmt_Loop=63;
	public const int Stmt_Return=64;
	public const int Stmt_Switch=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Switch_Item=72;
	public const int Type_Array=73;
	public const int Type_Func=74;
	public const int Type_Ident=75;
	public const int Type_List=76;
	public const int Type_Ref=77;
	public const int Type_Star=78;
	public const int Type_Template=79;
	public const int White_Space=80;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:206:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(206, 1);
		try
		{
			// SugarCpp.g:207:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(207, 4);
			// SugarCpp.g:207:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:207:4: NEWLINE
					{
					DebugLocation(207, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root559);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(207, 13);
			PushFollow(Follow._global_block_in_root562);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(207, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root564);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 207:30: -> ^( Root global_block )
			{
				DebugLocation(207, 33);
				// SugarCpp.g:207:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(207, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(207, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(208, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:210:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(210, 1);
		try
		{
			// SugarCpp.g:211:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(211, 4);
			// SugarCpp.g:211:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==88||LA3_0==124||LA3_0==132||(LA3_0>=134 && LA3_0<=135)||LA3_0==139||LA3_0==143||LA3_0==150||LA3_0==155||LA3_0==160||LA3_0==163))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:211:5: node ( NEWLINE )+
					{
					DebugLocation(211, 5);
					PushFollow(Follow._node_in_global_block584);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(211, 10);
					// SugarCpp.g:211:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:211:10: NEWLINE
							{
							DebugLocation(211, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block586);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 211:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(211, 24);
				// SugarCpp.g:211:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(211, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(211, 39);
				// SugarCpp.g:211:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(211, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._func_def_in_node609);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:216:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._class_def_in_node614);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._enum_def_in_node619);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:218:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._global_alloc_in_node624);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:219:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._global_using_in_node629);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:220:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._global_typedef_in_node634);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:221:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._import_def_in_node639);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:222:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._namespace_def_in_node644);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:225:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:226:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args656); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:227:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args661); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:228:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._ident_in_attribute_args666);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:231:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==135))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(232, 4);
				PushFollow(Follow._ident_in_attribute_item677);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(232, 10);
				// SugarCpp.g:232:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==88))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:232:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(232, 11);
					char_literal18=(IToken)Match(input,88,Follow._88_in_attribute_item680);  
					stream_88.Add(char_literal18);

					DebugLocation(232, 15);
					PushFollow(Follow._attribute_args_in_attribute_item682);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(232, 30);
					// SugarCpp.g:232:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==95))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:232:31: ',' attribute_args
							{
							DebugLocation(232, 31);
							char_literal20=(IToken)Match(input,95,Follow._95_in_attribute_item685);  
							stream_95.Add(char_literal20);

							DebugLocation(232, 35);
							PushFollow(Follow._attribute_args_in_attribute_item687);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(232, 52);
					char_literal22=(IToken)Match(input,89,Follow._89_in_attribute_item691);  
					stream_89.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(232, 61);
					// SugarCpp.g:232:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(232, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(232, 79);
					// SugarCpp.g:232:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(232, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:233:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(233, 4);
				string_literal23=(IToken)Match(input,135,Follow._135_in_attribute_item709);  
				stream_135.Add(string_literal23);

				DebugLocation(233, 12);
				// SugarCpp.g:233:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==88))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:233:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(233, 13);
					char_literal24=(IToken)Match(input,88,Follow._88_in_attribute_item712);  
					stream_88.Add(char_literal24);

					DebugLocation(233, 17);
					PushFollow(Follow._attribute_args_in_attribute_item714);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(233, 32);
					// SugarCpp.g:233:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==95))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:233:33: ',' attribute_args
							{
							DebugLocation(233, 33);
							char_literal26=(IToken)Match(input,95,Follow._95_in_attribute_item717);  
							stream_95.Add(char_literal26);

							DebugLocation(233, 37);
							PushFollow(Follow._attribute_args_in_attribute_item719);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(233, 54);
					char_literal28=(IToken)Match(input,89,Follow._89_in_attribute_item723);  
					stream_89.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 135
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 233:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(233, 63);
					// SugarCpp.g:233:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(233, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(233, 75);
					adaptor.AddChild(root_1, stream_135.NextNode());
					DebugLocation(233, 83);
					// SugarCpp.g:233:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(233, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:236:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(237, 4);
			// SugarCpp.g:237:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==124))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(237, 5);
					char_literal29=(IToken)Match(input,124,Follow._124_in_attribute748);  
					stream_124.Add(char_literal29);

					DebugLocation(237, 9);
					PushFollow(Follow._attribute_item_in_attribute750);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(237, 24);
					// SugarCpp.g:237:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==95))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:25: ',' attribute_item
							{
							DebugLocation(237, 25);
							char_literal31=(IToken)Match(input,95,Follow._95_in_attribute753);  
							stream_95.Add(char_literal31);

							DebugLocation(237, 29);
							PushFollow(Follow._attribute_item_in_attribute755);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(237, 46);
					char_literal33=(IToken)Match(input,125,Follow._125_in_attribute759);  
					stream_125.Add(char_literal33);

					DebugLocation(237, 50);
					// SugarCpp.g:237:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:50: NEWLINE
							{
							DebugLocation(237, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute761);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 237:61: -> ( attribute_item )+
			{
				DebugLocation(237, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(237, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(238, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:240:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(240, 1);
		try
		{
			// SugarCpp.g:241:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:241:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(241, 4);
			// SugarCpp.g:241:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==124))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:4: attribute
				{
				DebugLocation(241, 4);
				PushFollow(Follow._attribute_in_global_alloc780);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(241, 15);
			PushFollow(Follow._ident_list_in_global_alloc783);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(241, 26);
			// SugarCpp.g:241:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==105))
			{
				alt19 = 1;
			}
			else if ((LA19_0==107))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:241:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(241, 28);
				char_literal37=(IToken)Match(input,105,Follow._105_in_global_alloc787);  
				stream_105.Add(char_literal37);

				DebugLocation(241, 32);
				PushFollow(Follow._type_name_in_global_alloc789);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(241, 42);
				// SugarCpp.g:241:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt17 = 1;
					}
					break;
				case 88:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:44: ( '=' | ':=' ) expr
					{
					DebugLocation(241, 44);
					// SugarCpp.g:241:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==114))
					{
						alt15 = 1;
					}
					else if ((LA15_0==107))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:241:45: '='
						{
						DebugLocation(241, 45);
						char_literal39=(IToken)Match(input,114,Follow._114_in_global_alloc794);  
						stream_114.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:241:51: ':='
						{
						DebugLocation(241, 51);
						string_literal40=(IToken)Match(input,107,Follow._107_in_global_alloc798);  
						stream_107.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(241, 57);
					PushFollow(Follow._expr_in_global_alloc801);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 241:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(241, 65);
						// SugarCpp.g:241:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(241, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(241, 84);
						// SugarCpp.g:241:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(241, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(241, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(241, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(241, 116);
						// SugarCpp.g:241:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(241, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:242:43: '(' ( expr_list )? ')'
					{
					DebugLocation(242, 43);
					char_literal42=(IToken)Match(input,88,Follow._88_in_global_alloc861);  
					stream_88.Add(char_literal42);

					DebugLocation(242, 47);
					// SugarCpp.g:242:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==81||LA16_0==86||LA16_0==88||LA16_0==90||(LA16_0>=92 && LA16_0<=93)||(LA16_0>=96 && LA16_0<=97)||(LA16_0>=123 && LA16_0<=124)||LA16_0==147||LA16_0==149||(LA16_0>=151 && LA16_0<=152)||LA16_0==170))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:47: expr_list
						{
						DebugLocation(242, 47);
						PushFollow(Follow._expr_list_in_global_alloc863);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(242, 58);
					char_literal44=(IToken)Match(input,89,Follow._89_in_global_alloc866);  
					stream_89.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 242:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(242, 65);
						// SugarCpp.g:242:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(242, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(242, 86);
						// SugarCpp.g:242:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(242, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(242, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(242, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(242, 118);
						// SugarCpp.g:242:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(242, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:243:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 243:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(243, 20);
						// SugarCpp.g:243:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(243, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(243, 39);
						// SugarCpp.g:243:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(243, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(243, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(243, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:245:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(245, 10);
				string_literal45=(IToken)Match(input,107,Follow._107_in_global_alloc939);  
				stream_107.Add(string_literal45);

				DebugLocation(245, 15);
				// SugarCpp.g:245:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:245:16: expr ( ',' expr )*
				{
				DebugLocation(245, 16);
				PushFollow(Follow._expr_in_global_alloc942);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(245, 21);
				// SugarCpp.g:245:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==95))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:245:22: ',' expr
						{
						DebugLocation(245, 22);
						char_literal47=(IToken)Match(input,95,Follow._95_in_global_alloc945);  
						stream_95.Add(char_literal47);

						DebugLocation(245, 26);
						PushFollow(Follow._expr_in_global_alloc947);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 107, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 245:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(245, 37);
					// SugarCpp.g:245:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(245, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(245, 44);
					// SugarCpp.g:245:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(245, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(245, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(245, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(245, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:249:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(249, 1);
		try
		{
			// SugarCpp.g:250:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(250, 4);
			// SugarCpp.g:250:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==124))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:4: attribute
				{
				DebugLocation(250, 4);
				PushFollow(Follow._attribute_in_global_using984);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(250, 15);
			string_literal50=(IToken)Match(input,163,Follow._163_in_global_using987);  
			stream_163.Add(string_literal50);

			DebugLocation(250, 23);
			// SugarCpp.g:250:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==150))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:250:23: stmt_using_item
					{
					DebugLocation(250, 23);
					PushFollow(Follow._stmt_using_item_in_global_using989);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 250:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(250, 43);
				// SugarCpp.g:250:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(250, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(250, 56);
				// SugarCpp.g:250:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(250, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(250, 67);
				// SugarCpp.g:250:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(250, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:253:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(253, 1);
		try
		{
			// SugarCpp.g:254:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:254:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(254, 4);
			// SugarCpp.g:254:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==124))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:254:4: attribute
				{
				DebugLocation(254, 4);
				PushFollow(Follow._attribute_in_global_typedef1013);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(254, 15);
			string_literal53=(IToken)Match(input,160,Follow._160_in_global_typedef1016);  
			stream_160.Add(string_literal53);

			DebugLocation(254, 22);
			PushFollow(Follow._ident_in_global_typedef1018);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(254, 28);
			char_literal55=(IToken)Match(input,114,Follow._114_in_global_typedef1020);  
			stream_114.Add(char_literal55);

			DebugLocation(254, 32);
			PushFollow(Follow._type_name_in_global_typedef1022);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 254:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(254, 45);
				// SugarCpp.g:254:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(254, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(254, 60);
				// SugarCpp.g:254:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(254, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(254, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(254, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:257:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(257, 1);
		try
		{
			// SugarCpp.g:258:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:258:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(258, 4);
			// SugarCpp.g:258:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==124))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:4: attribute
				{
				DebugLocation(258, 4);
				PushFollow(Follow._attribute_in_import_def1046);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(258, 15);
			string_literal58=(IToken)Match(input,143,Follow._143_in_import_def1049);  
			stream_143.Add(string_literal58);

			DebugLocation(258, 24);
			// SugarCpp.g:258:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:24: STRING
				{
				DebugLocation(258, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1051);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(258, 32);
			// SugarCpp.g:258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:258:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(258, 33);
				// SugarCpp.g:258:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:33: NEWLINE
						{
						DebugLocation(258, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1055);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(258, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1058);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(258, 49);
				// SugarCpp.g:258:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:49: NEWLINE
						{
						DebugLocation(258, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1060);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(258, 59);
				// SugarCpp.g:258:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:258:60: STRING ( NEWLINE )+
						{
						DebugLocation(258, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1065);  
						stream_STRING.Add(STRING63);

						DebugLocation(258, 67);
						// SugarCpp.g:258:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:258:67: NEWLINE
								{
								DebugLocation(258, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1067);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(258, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1072);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 258:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(258, 90);
				// SugarCpp.g:258:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(258, 99);
				// SugarCpp.g:258:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(258, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(258, 110);
				// SugarCpp.g:258:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(258, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:261:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(261, 1);
		try
		{
			// SugarCpp.g:262:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(262, 4);
			// SugarCpp.g:262:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==124))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:4: attribute
				{
				DebugLocation(262, 4);
				PushFollow(Follow._attribute_in_enum_def1097);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(262, 15);
			string_literal67=(IToken)Match(input,139,Follow._139_in_enum_def1100);  
			stream_139.Add(string_literal67);

			DebugLocation(262, 22);
			PushFollow(Follow._ident_in_enum_def1102);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(262, 28);
			char_literal69=(IToken)Match(input,114,Follow._114_in_enum_def1104);  
			stream_114.Add(char_literal69);

			DebugLocation(262, 32);
			// SugarCpp.g:262:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:262:33: ident ( '|' ident )*
				{
				DebugLocation(262, 33);
				PushFollow(Follow._ident_in_enum_def1107);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(262, 39);
				// SugarCpp.g:262:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==167))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:262:40: '|' ident
						{
						DebugLocation(262, 40);
						char_literal71=(IToken)Match(input,167,Follow._167_in_enum_def1110);  
						stream_167.Add(char_literal71);

						DebugLocation(262, 44);
						PushFollow(Follow._ident_in_enum_def1112);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(262, 57);
				// SugarCpp.g:262:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(262, 64);
				// SugarCpp.g:262:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(262, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(262, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(262, 81);
				// SugarCpp.g:262:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(262, 94);
				// SugarCpp.g:262:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(262, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:265:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(265, 1);
		try
		{
			// SugarCpp.g:266:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(266, 4);
			// SugarCpp.g:266:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==124))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:4: attribute
				{
				DebugLocation(266, 4);
				PushFollow(Follow._attribute_in_namespace_def1145);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(266, 15);
			string_literal74=(IToken)Match(input,150,Follow._150_in_namespace_def1148);  
			stream_150.Add(string_literal74);

			DebugLocation(266, 27);
			PushFollow(Follow._ident_in_namespace_def1150);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(266, 33);
			// SugarCpp.g:266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:266:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(266, 34);
				// SugarCpp.g:266:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:34: NEWLINE
						{
						DebugLocation(266, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1153);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(266, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1156);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(266, 50);
				// SugarCpp.g:266:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:266:50: NEWLINE
						{
						DebugLocation(266, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1158);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(266, 59);
				PushFollow(Follow._global_block_in_namespace_def1161);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(266, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1163);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(266, 84);
				// SugarCpp.g:266:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(266, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(266, 96);
				// SugarCpp.g:266:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(266, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(266, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(266, 113);
				// SugarCpp.g:266:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(266, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:269:1: class_def : ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken NEWLINE89 = default(IToken);
		IToken INDENT90 = default(IToken);
		IToken NEWLINE91 = default(IToken);
		IToken DEDENT93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken string_literal95 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken NEWLINE105 = default(IToken);
		IToken INDENT106 = default(IToken);
		IToken NEWLINE107 = default(IToken);
		IToken DEDENT109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block108 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree NEWLINE89_tree = default(CommonTree);
		CommonTree INDENT90_tree = default(CommonTree);
		CommonTree NEWLINE91_tree = default(CommonTree);
		CommonTree DEDENT93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree string_literal95_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree NEWLINE105_tree = default(CommonTree);
		CommonTree INDENT106_tree = default(CommonTree);
		CommonTree NEWLINE107_tree = default(CommonTree);
		CommonTree DEDENT109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(269, 1);
		try
		{
			// SugarCpp.g:270:2: ( ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:270:5: ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(270, 5);
			// SugarCpp.g:270:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==124))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:5: attribute
				{
				DebugLocation(270, 5);
				PushFollow(Follow._attribute_in_class_def1191);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(270, 16);
			// SugarCpp.g:270:16: ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==134))
			{
				alt51 = 1;
			}
			else if ((LA51_0==132))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:18: 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(270, 18);
				string_literal82=(IToken)Match(input,134,Follow._134_in_class_def1196);  
				stream_134.Add(string_literal82);

				DebugLocation(270, 26);
				PushFollow(Follow._ident_in_class_def1198);
				ident83=ident();
				PopFollow();

				stream_ident.Add(ident83.Tree);
				DebugLocation(270, 32);
				// SugarCpp.g:270:32: ( generic_parameter )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==109))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:33: generic_parameter
					{
					DebugLocation(270, 33);
					PushFollow(Follow._generic_parameter_in_class_def1201);
					generic_parameter84=generic_parameter();
					PopFollow();

					stream_generic_parameter.Add(generic_parameter84.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(38); }

				DebugLocation(270, 53);
				// SugarCpp.g:270:53: ( ':' ident ( ',' ident )* )?
				int alt40=2;
				try { DebugEnterSubRule(40);
				try { DebugEnterDecision(40, false);
				int LA40_0 = input.LA(1);

				if ((LA40_0==105))
				{
					alt40 = 1;
				}
				} finally { DebugExitDecision(40); }
				switch (alt40)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:54: ':' ident ( ',' ident )*
					{
					DebugLocation(270, 54);
					char_literal85=(IToken)Match(input,105,Follow._105_in_class_def1206);  
					stream_105.Add(char_literal85);

					DebugLocation(270, 58);
					PushFollow(Follow._ident_in_class_def1208);
					ident86=ident();
					PopFollow();

					stream_ident.Add(ident86.Tree);
					DebugLocation(270, 64);
					// SugarCpp.g:270:64: ( ',' ident )*
					try { DebugEnterSubRule(39);
					while (true)
					{
						int alt39=2;
						try { DebugEnterDecision(39, false);
						int LA39_0 = input.LA(1);

						if ((LA39_0==95))
						{
							alt39 = 1;
						}


						} finally { DebugExitDecision(39); }
						switch ( alt39 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:270:65: ',' ident
							{
							DebugLocation(270, 65);
							char_literal87=(IToken)Match(input,95,Follow._95_in_class_def1211);  
							stream_95.Add(char_literal87);

							DebugLocation(270, 69);
							PushFollow(Follow._ident_in_class_def1213);
							ident88=ident();
							PopFollow();

							stream_ident.Add(ident88.Tree);

							}
							break;

						default:
							goto loop39;
						}
					}

					loop39:
						;

					} finally { DebugExitSubRule(39); }


					}
					break;

				}
				} finally { DebugExitSubRule(40); }

				DebugLocation(270, 79);
				// SugarCpp.g:270:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				try
				{
					alt43 = dfa43.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:270:80: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(270, 80);
					// SugarCpp.g:270:80: ( NEWLINE )+
					int cnt41=0;
					try { DebugEnterSubRule(41);
					while (true)
					{
						int alt41=2;
						try { DebugEnterDecision(41, false);
						int LA41_0 = input.LA(1);

						if ((LA41_0==NEWLINE))
						{
							alt41 = 1;
						}


						} finally { DebugExitDecision(41); }
						switch (alt41)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:270:80: NEWLINE
							{
							DebugLocation(270, 80);
							NEWLINE89=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1220);  
							stream_NEWLINE.Add(NEWLINE89);


							}
							break;

						default:
							if (cnt41 >= 1)
								goto loop41;

							EarlyExitException eee41 = new EarlyExitException( 41, input );
							DebugRecognitionException(eee41);
							throw eee41;
						}
						cnt41++;
					}
					loop41:
						;

					} finally { DebugExitSubRule(41); }

					DebugLocation(270, 89);
					INDENT90=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1223);  
					stream_INDENT.Add(INDENT90);

					DebugLocation(270, 96);
					// SugarCpp.g:270:96: ( NEWLINE )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==NEWLINE))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:270:96: NEWLINE
							{
							DebugLocation(270, 96);
							NEWLINE91=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1225);  
							stream_NEWLINE.Add(NEWLINE91);


							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }

					DebugLocation(270, 105);
					PushFollow(Follow._global_block_in_class_def1228);
					global_block92=global_block();
					PopFollow();

					stream_global_block.Add(global_block92.Tree);
					DebugLocation(270, 118);
					DEDENT93=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1230);  
					stream_DEDENT.Add(DEDENT93);


					}
					break;

				}
				} finally { DebugExitSubRule(43); }



				{
				// AST REWRITE
				// elements: ident, attribute, ident, global_block, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 270:127: -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(270, 130);
					// SugarCpp.g:270:130: ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(270, 132);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(270, 138);
					// SugarCpp.g:270:138: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(270, 138);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(270, 149);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(270, 155);
					// SugarCpp.g:270:155: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(270, 155);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(270, 174);
					// SugarCpp.g:270:174: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(270, 175);
						// SugarCpp.g:270:175: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(270, 177);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(270, 188);
						// SugarCpp.g:270:188: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(270, 188);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(270, 198);
					// SugarCpp.g:270:198: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(270, 198);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:271:12: 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(271, 12);
				string_literal94=(IToken)Match(input,132,Follow._132_in_class_def1272);  
				stream_132.Add(string_literal94);

				DebugLocation(271, 19);
				string_literal95=(IToken)Match(input,134,Follow._134_in_class_def1274);  
				stream_134.Add(string_literal95);

				DebugLocation(271, 27);
				PushFollow(Follow._ident_in_class_def1276);
				ident96=ident();
				PopFollow();

				stream_ident.Add(ident96.Tree);
				DebugLocation(271, 33);
				// SugarCpp.g:271:33: ( generic_parameter )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==109))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:34: generic_parameter
					{
					DebugLocation(271, 34);
					PushFollow(Follow._generic_parameter_in_class_def1279);
					generic_parameter97=generic_parameter();
					PopFollow();

					stream_generic_parameter.Add(generic_parameter97.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(271, 54);
				// SugarCpp.g:271:54: ( '(' func_args ')' )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==88))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:55: '(' func_args ')'
					{
					DebugLocation(271, 55);
					char_literal98=(IToken)Match(input,88,Follow._88_in_class_def1284);  
					stream_88.Add(char_literal98);

					DebugLocation(271, 59);
					PushFollow(Follow._func_args_in_class_def1286);
					func_args99=func_args();
					PopFollow();

					stream_func_args.Add(func_args99.Tree);
					DebugLocation(271, 69);
					char_literal100=(IToken)Match(input,89,Follow._89_in_class_def1288);  
					stream_89.Add(char_literal100);


					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(271, 75);
				// SugarCpp.g:271:75: ( ':' ident ( ',' ident )* )?
				int alt47=2;
				try { DebugEnterSubRule(47);
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==105))
				{
					alt47 = 1;
				}
				} finally { DebugExitDecision(47); }
				switch (alt47)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:76: ':' ident ( ',' ident )*
					{
					DebugLocation(271, 76);
					char_literal101=(IToken)Match(input,105,Follow._105_in_class_def1293);  
					stream_105.Add(char_literal101);

					DebugLocation(271, 80);
					PushFollow(Follow._ident_in_class_def1295);
					ident102=ident();
					PopFollow();

					stream_ident.Add(ident102.Tree);
					DebugLocation(271, 86);
					// SugarCpp.g:271:86: ( ',' ident )*
					try { DebugEnterSubRule(46);
					while (true)
					{
						int alt46=2;
						try { DebugEnterDecision(46, false);
						int LA46_0 = input.LA(1);

						if ((LA46_0==95))
						{
							alt46 = 1;
						}


						} finally { DebugExitDecision(46); }
						switch ( alt46 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:271:87: ',' ident
							{
							DebugLocation(271, 87);
							char_literal103=(IToken)Match(input,95,Follow._95_in_class_def1298);  
							stream_95.Add(char_literal103);

							DebugLocation(271, 91);
							PushFollow(Follow._ident_in_class_def1300);
							ident104=ident();
							PopFollow();

							stream_ident.Add(ident104.Tree);

							}
							break;

						default:
							goto loop46;
						}
					}

					loop46:
						;

					} finally { DebugExitSubRule(46); }


					}
					break;

				}
				} finally { DebugExitSubRule(47); }

				DebugLocation(271, 101);
				// SugarCpp.g:271:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				try
				{
					alt50 = dfa50.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:271:102: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(271, 102);
					// SugarCpp.g:271:102: ( NEWLINE )+
					int cnt48=0;
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==NEWLINE))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:271:102: NEWLINE
							{
							DebugLocation(271, 102);
							NEWLINE105=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1307);  
							stream_NEWLINE.Add(NEWLINE105);


							}
							break;

						default:
							if (cnt48 >= 1)
								goto loop48;

							EarlyExitException eee48 = new EarlyExitException( 48, input );
							DebugRecognitionException(eee48);
							throw eee48;
						}
						cnt48++;
					}
					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(271, 111);
					INDENT106=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1310);  
					stream_INDENT.Add(INDENT106);

					DebugLocation(271, 118);
					// SugarCpp.g:271:118: ( NEWLINE )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==NEWLINE))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:271:118: NEWLINE
							{
							DebugLocation(271, 118);
							NEWLINE107=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1312);  
							stream_NEWLINE.Add(NEWLINE107);


							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }

					DebugLocation(271, 127);
					PushFollow(Follow._global_block_in_class_def1315);
					global_block108=global_block();
					PopFollow();

					stream_global_block.Add(global_block108.Tree);
					DebugLocation(271, 140);
					DEDENT109=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1317);  
					stream_DEDENT.Add(DEDENT109);


					}
					break;

				}
				} finally { DebugExitSubRule(50); }



				{
				// AST REWRITE
				// elements: ident, ident, attribute, func_args, generic_parameter, global_block, 132
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 271:149: -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(271, 152);
					// SugarCpp.g:271:152: ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(271, 154);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(271, 160);
					adaptor.AddChild(root_1, stream_132.NextNode());
					DebugLocation(271, 167);
					// SugarCpp.g:271:167: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(271, 167);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(271, 178);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(271, 184);
					// SugarCpp.g:271:184: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(271, 184);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(271, 203);
					// SugarCpp.g:271:203: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(271, 203);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(271, 214);
					// SugarCpp.g:271:214: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(271, 215);
						// SugarCpp.g:271:215: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(271, 217);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(271, 228);
						// SugarCpp.g:271:228: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(271, 228);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(271, 238);
					// SugarCpp.g:271:238: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(271, 238);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:275:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: type_name ( ',' type_name )*
			{
			DebugLocation(276, 4);
			PushFollow(Follow._type_name_in_type_list1370);
			type_name110=type_name();
			PopFollow();

			stream_type_name.Add(type_name110.Tree);
			DebugLocation(276, 14);
			// SugarCpp.g:276:14: ( ',' type_name )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==95))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:15: ',' type_name
					{
					DebugLocation(276, 15);
					char_literal111=(IToken)Match(input,95,Follow._95_in_type_list1373);  
					stream_95.Add(char_literal111);

					DebugLocation(276, 19);
					PushFollow(Follow._type_name_in_type_list1375);
					type_name112=type_name();
					PopFollow();

					stream_type_name.Add(type_name112.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(276, 34);
				// SugarCpp.g:276:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(276, 46);
				// SugarCpp.g:276:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(276, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:279:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal114 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken string_literal121 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken char_literal124 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name122 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal114_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree string_literal121_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(279, 1);
		try
		{
			// SugarCpp.g:280:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==IDENT||LA57_0==135||LA57_0==155))
			{
				alt57 = 1;
			}
			else if ((LA57_0==88))
			{
				alt57 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(280, 4);
				PushFollow(Follow._type_single_in_type_name1397);
				type_single113=type_single();
				PopFollow();

				stream_type_single.Add(type_single113.Tree);
				DebugLocation(280, 16);
				// SugarCpp.g:280:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==99))
				{
					alt54 = 1;
				}
				else if ((LA54_0==DEDENT||LA54_0==IDENT||LA54_0==NEWLINE||(LA54_0>=88 && LA54_0<=89)||LA54_0==95||(LA54_0>=107 && LA54_0<=108)||LA54_0==114||LA54_0==117||(LA54_0>=141 && LA54_0<=142)||LA54_0==144||(LA54_0>=161 && LA54_0<=162)||LA54_0==166||LA54_0==170))
				{
					alt54 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:280:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(280, 18);
					string_literal114=(IToken)Match(input,99,Follow._99_in_type_name1401);  
					stream_99.Add(string_literal114);

					DebugLocation(280, 23);
					// SugarCpp.g:280:23: ( type_name | '(' ')' )
					int alt53=2;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==IDENT||LA53_0==135||LA53_0==155))
					{
						alt53 = 1;
					}
					else if ((LA53_0==88))
					{
						int LA53_2 = input.LA(2);

						if ((LA53_2==89))
						{
							int LA53_3 = input.LA(3);

							if ((LA53_3==99))
							{
								alt53 = 1;
							}
							else if ((LA53_3==DEDENT||LA53_3==IDENT||LA53_3==NEWLINE||(LA53_3>=88 && LA53_3<=89)||LA53_3==95||(LA53_3>=107 && LA53_3<=108)||LA53_3==114||LA53_3==117||(LA53_3>=141 && LA53_3<=142)||LA53_3==144||(LA53_3>=161 && LA53_3<=162)||LA53_3==166||LA53_3==170))
							{
								alt53 = 2;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 53, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA53_2==IDENT||LA53_2==88||LA53_2==135||LA53_2==155))
						{
							alt53 = 1;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 53, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:280:24: type_name
						{
						DebugLocation(280, 24);
						PushFollow(Follow._type_name_in_type_name1404);
						type_name115=type_name();
						PopFollow();

						stream_type_name.Add(type_name115.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:280:36: '(' ')'
						{
						DebugLocation(280, 36);
						char_literal116=(IToken)Match(input,88,Follow._88_in_type_name1408);  
						stream_88.Add(char_literal116);

						DebugLocation(280, 40);
						char_literal117=(IToken)Match(input,89,Follow._89_in_type_name1410);  
						stream_89.Add(char_literal117);


						}
						break;

					}
					} finally { DebugExitSubRule(53); }



					{
					// AST REWRITE
					// elements: type_name, type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 280:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(280, 48);
						// SugarCpp.g:280:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(280, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(280, 60);
						// SugarCpp.g:280:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(280, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(280, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(280, 85);
						// SugarCpp.g:280:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(280, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:281:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 281:9: -> type_single
					{
						DebugLocation(281, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:283:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(283, 4);
				char_literal118=(IToken)Match(input,88,Follow._88_in_type_name1451);  
				stream_88.Add(char_literal118);

				DebugLocation(283, 8);
				// SugarCpp.g:283:8: ( type_list )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==88||LA55_0==135||LA55_0==155))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:8: type_list
					{
					DebugLocation(283, 8);
					PushFollow(Follow._type_list_in_type_name1453);
					type_list119=type_list();
					PopFollow();

					stream_type_list.Add(type_list119.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(283, 19);
				char_literal120=(IToken)Match(input,89,Follow._89_in_type_name1456);  
				stream_89.Add(char_literal120);

				DebugLocation(283, 23);
				string_literal121=(IToken)Match(input,99,Follow._99_in_type_name1458);  
				stream_99.Add(string_literal121);

				DebugLocation(283, 28);
				// SugarCpp.g:283:28: ( type_name | '(' ')' )
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==135||LA56_0==155))
				{
					alt56 = 1;
				}
				else if ((LA56_0==88))
				{
					int LA56_2 = input.LA(2);

					if ((LA56_2==89))
					{
						int LA56_3 = input.LA(3);

						if ((LA56_3==99))
						{
							alt56 = 1;
						}
						else if ((LA56_3==DEDENT||LA56_3==IDENT||LA56_3==NEWLINE||(LA56_3>=88 && LA56_3<=89)||LA56_3==95||(LA56_3>=107 && LA56_3<=108)||LA56_3==114||LA56_3==117||(LA56_3>=141 && LA56_3<=142)||LA56_3==144||(LA56_3>=161 && LA56_3<=162)||LA56_3==166||LA56_3==170))
						{
							alt56 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 56, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA56_2==IDENT||LA56_2==88||LA56_2==135||LA56_2==155))
					{
						alt56 = 1;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 56, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:29: type_name
					{
					DebugLocation(283, 29);
					PushFollow(Follow._type_name_in_type_name1461);
					type_name122=type_name();
					PopFollow();

					stream_type_name.Add(type_name122.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:283:41: '(' ')'
					{
					DebugLocation(283, 41);
					char_literal123=(IToken)Match(input,88,Follow._88_in_type_name1465);  
					stream_88.Add(char_literal123);

					DebugLocation(283, 45);
					char_literal124=(IToken)Match(input,89,Follow._89_in_type_name1467);  
					stream_89.Add(char_literal124);


					}
					break;

				}
				} finally { DebugExitSubRule(56); }



				{
				// AST REWRITE
				// elements: type_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 283:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(283, 53);
					// SugarCpp.g:283:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(283, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(283, 65);
					// SugarCpp.g:283:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(283, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(283, 76);
					// SugarCpp.g:283:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(283, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:286:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal126 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal132 = default(IToken);
		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr130 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(287, 4);
			PushFollow(Follow._type_star_in_type_single1491);
			type_star125=type_star();
			PopFollow();

			stream_type_star.Add(type_star125.Tree);
			DebugLocation(287, 14);
			// SugarCpp.g:287:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt61=3;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			switch (input.LA(1))
			{
			case 86:
				{
				alt61 = 1;
				}
				break;
			case 124:
				{
				alt61 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 88:
			case 89:
			case 95:
			case 99:
			case 107:
			case 108:
			case 114:
			case 117:
			case 141:
			case 142:
			case 144:
			case 161:
			case 162:
			case 166:
			case 170:
				{
				alt61 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:16: '&'
				{
				DebugLocation(287, 16);
				char_literal126=(IToken)Match(input,86,Follow._86_in_type_single1495);  
				stream_86.Add(char_literal126);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 287:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(287, 23);
					// SugarCpp.g:287:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(287, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(287, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:288:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(288, 7);
				char_literal127=(IToken)Match(input,124,Follow._124_in_type_single1511);  
				stream_124.Add(char_literal127);

				DebugLocation(288, 11);
				// SugarCpp.g:288:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==IDENT||LA60_0==NUMBER||LA60_0==STRING||LA60_0==81||LA60_0==86||LA60_0==88||LA60_0==90||(LA60_0>=92 && LA60_0<=93)||(LA60_0>=96 && LA60_0<=97)||(LA60_0>=123 && LA60_0<=124)||LA60_0==147||LA60_0==149||(LA60_0>=151 && LA60_0<=152)||LA60_0==170))
				{
					alt60 = 1;
				}
				else if ((LA60_0==95||LA60_0==125))
				{
					alt60 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:288:13: expr ( ',' expr )* ']'
					{
					DebugLocation(288, 13);
					PushFollow(Follow._expr_in_type_single1515);
					expr128=expr();
					PopFollow();

					stream_expr.Add(expr128.Tree);
					DebugLocation(288, 18);
					// SugarCpp.g:288:18: ( ',' expr )*
					try { DebugEnterSubRule(58);
					while (true)
					{
						int alt58=2;
						try { DebugEnterDecision(58, false);
						int LA58_0 = input.LA(1);

						if ((LA58_0==95))
						{
							alt58 = 1;
						}


						} finally { DebugExitDecision(58); }
						switch ( alt58 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:288:19: ',' expr
							{
							DebugLocation(288, 19);
							char_literal129=(IToken)Match(input,95,Follow._95_in_type_single1518);  
							stream_95.Add(char_literal129);

							DebugLocation(288, 23);
							PushFollow(Follow._expr_in_type_single1520);
							expr130=expr();
							PopFollow();

							stream_expr.Add(expr130.Tree);

							}
							break;

						default:
							goto loop58;
						}
					}

					loop58:
						;

					} finally { DebugExitSubRule(58); }

					DebugLocation(288, 30);
					char_literal131=(IToken)Match(input,125,Follow._125_in_type_single1524);  
					stream_125.Add(char_literal131);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 288:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(288, 37);
						// SugarCpp.g:288:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(288, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(288, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(288, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(288, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:289:13: ( ',' )* ']'
					{
					DebugLocation(289, 13);
					// SugarCpp.g:289:13: ( ',' )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==95))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:289:13: ','
							{
							DebugLocation(289, 13);
							char_literal132=(IToken)Match(input,95,Follow._95_in_type_single1549);  
							stream_95.Add(char_literal132);


							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(289, 18);
					char_literal133=(IToken)Match(input,125,Follow._125_in_type_single1552);  
					stream_125.Add(char_literal133);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 289:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(289, 25);
						// SugarCpp.g:289:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(289, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(289, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(289, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(289, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:291:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 291:7: -> type_star
				{
					DebugLocation(291, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(293, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:295:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(295, 1);
		try
		{
			// SugarCpp.g:296:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:296:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(296, 4);
			PushFollow(Follow._type_star_in_type_no_array1599);
			type_star134=type_star();
			PopFollow();

			stream_type_star.Add(type_star134.Tree);
			DebugLocation(296, 14);
			// SugarCpp.g:296:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==86))
			{
				alt62 = 1;
			}
			else if ((LA62_0==88||LA62_0==124))
			{
				alt62 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:296:16: '&'
				{
				DebugLocation(296, 16);
				char_literal135=(IToken)Match(input,86,Follow._86_in_type_no_array1603);  
				stream_86.Add(char_literal135);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(296, 23);
					// SugarCpp.g:296:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(296, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(296, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:297:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:7: -> type_star
				{
					DebugLocation(297, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:301:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal137_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(302, 4);
			PushFollow(Follow._type_template_type_in_type_star1638);
			type_template_type136=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type136.Tree);
			DebugLocation(302, 23);
			// SugarCpp.g:302:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==90))
			{
				alt64 = 1;
			}
			else if ((LA64_0==DEDENT||LA64_0==IDENT||LA64_0==NEWLINE||LA64_0==86||(LA64_0>=88 && LA64_0<=89)||LA64_0==95||LA64_0==99||(LA64_0>=107 && LA64_0<=108)||LA64_0==114||LA64_0==117||LA64_0==124||(LA64_0>=141 && LA64_0<=142)||LA64_0==144||(LA64_0>=161 && LA64_0<=162)||LA64_0==166||LA64_0==170))
			{
				alt64 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:302:25: ( '*' )+
				{
				DebugLocation(302, 25);
				// SugarCpp.g:302:25: ( '*' )+
				int cnt63=0;
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==90))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:302:25: '*'
						{
						DebugLocation(302, 25);
						char_literal137=(IToken)Match(input,90,Follow._90_in_type_star1642);  
						stream_90.Add(char_literal137);


						}
						break;

					default:
						if (cnt63 >= 1)
							goto loop63;

						EarlyExitException eee63 = new EarlyExitException( 63, input );
						DebugRecognitionException(eee63);
						throw eee63;
					}
					cnt63++;
				}
				loop63:
					;

				} finally { DebugExitSubRule(63); }



				{
				// AST REWRITE
				// elements: type_template_type, 90
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(302, 33);
					// SugarCpp.g:302:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(302, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(302, 64);
					if (!(stream_90.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_90.HasNext )
					{
						DebugLocation(302, 64);
						adaptor.AddChild(root_1, stream_90.NextNode());

					}
					stream_90.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:303:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 303:10: -> type_template_type
				{
					DebugLocation(303, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:307:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		IToken char_literal143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		CommonTree char_literal143_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(307, 1);
		try
		{
			// SugarCpp.g:308:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(308, 4);
			PushFollow(Follow._type_ident_in_type_template_type1688);
			type_ident138=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident138.Tree);
			DebugLocation(308, 15);
			// SugarCpp.g:308:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==109))
			{
				alt67 = 1;
			}
			else if ((LA67_0==DEDENT||LA67_0==IDENT||LA67_0==NEWLINE||LA67_0==86||(LA67_0>=88 && LA67_0<=90)||LA67_0==95||LA67_0==99||(LA67_0>=107 && LA67_0<=108)||LA67_0==114||LA67_0==117||LA67_0==124||(LA67_0>=141 && LA67_0<=142)||LA67_0==144||(LA67_0>=161 && LA67_0<=162)||LA67_0==166||LA67_0==170))
			{
				alt67 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(308, 17);
				char_literal139=(IToken)Match(input,109,Follow._109_in_type_template_type1692);  
				stream_109.Add(char_literal139);

				DebugLocation(308, 21);
				// SugarCpp.g:308:21: ( type_name ( ',' type_name )* )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==IDENT||LA66_0==88||LA66_0==135||LA66_0==155))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:308:22: type_name ( ',' type_name )*
					{
					DebugLocation(308, 22);
					PushFollow(Follow._type_name_in_type_template_type1695);
					type_name140=type_name();
					PopFollow();

					stream_type_name.Add(type_name140.Tree);
					DebugLocation(308, 32);
					// SugarCpp.g:308:32: ( ',' type_name )*
					try { DebugEnterSubRule(65);
					while (true)
					{
						int alt65=2;
						try { DebugEnterDecision(65, false);
						int LA65_0 = input.LA(1);

						if ((LA65_0==95))
						{
							alt65 = 1;
						}


						} finally { DebugExitDecision(65); }
						switch ( alt65 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:308:33: ',' type_name
							{
							DebugLocation(308, 33);
							char_literal141=(IToken)Match(input,95,Follow._95_in_type_template_type1698);  
							stream_95.Add(char_literal141);

							DebugLocation(308, 37);
							PushFollow(Follow._type_name_in_type_template_type1700);
							type_name142=type_name();
							PopFollow();

							stream_type_name.Add(type_name142.Tree);

							}
							break;

						default:
							goto loop65;
						}
					}

					loop65:
						;

					} finally { DebugExitSubRule(65); }


					}
					break;

				}
				} finally { DebugExitSubRule(66); }

				DebugLocation(308, 51);
				char_literal143=(IToken)Match(input,117,Follow._117_in_type_template_type1706);  
				stream_117.Add(char_literal143);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 308:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(308, 58);
					// SugarCpp.g:308:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(308, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(308, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(308, 85);
					// SugarCpp.g:308:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(308, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:309:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 309:8: -> type_ident
				{
					DebugLocation(309, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:313:1: type_ident : ( 'const' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal144 = default(IToken);
		IToken string_literal145 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal144_tree = default(CommonTree);
		CommonTree string_literal145_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(313, 1);
		try
		{
			// SugarCpp.g:314:2: ( ( 'const' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:314:4: ( 'const' )? ( 'struct' )? ident
			{
			DebugLocation(314, 4);
			// SugarCpp.g:314:4: ( 'const' )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==135))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:4: 'const'
				{
				DebugLocation(314, 4);
				string_literal144=(IToken)Match(input,135,Follow._135_in_type_ident1746);  
				stream_135.Add(string_literal144);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(314, 13);
			// SugarCpp.g:314:13: ( 'struct' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==155))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:13: 'struct'
				{
				DebugLocation(314, 13);
				string_literal145=(IToken)Match(input,155,Follow._155_in_type_ident1749);  
				stream_155.Add(string_literal145);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(314, 23);
			PushFollow(Follow._ident_in_type_ident1752);
			ident146=ident();
			PopFollow();

			stream_ident.Add(ident146.Tree);


			{
			// AST REWRITE
			// elements: ident, 155, 135
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 314:29: -> ^( Type_Ident ( 'const' )? ( 'struct' )? ident )
			{
				DebugLocation(314, 32);
				// SugarCpp.g:314:32: ^( Type_Ident ( 'const' )? ( 'struct' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(314, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(314, 45);
				// SugarCpp.g:314:45: ( 'const' )?
				if (stream_135.HasNext)
				{
					DebugLocation(314, 45);
					adaptor.AddChild(root_1, stream_135.NextNode());

				}
				stream_135.Reset();
				DebugLocation(314, 54);
				// SugarCpp.g:314:54: ( 'struct' )?
				if (stream_155.HasNext)
				{
					DebugLocation(314, 54);
					adaptor.AddChild(root_1, stream_155.NextNode());

				}
				stream_155.Reset();
				DebugLocation(314, 64);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:317:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(317, 1);
		try
		{
			// SugarCpp.g:318:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:318:4: ident ( ',' ident )*
			{
			DebugLocation(318, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1777);
			ident147=ident();
			PopFollow();

			stream_ident.Add(ident147.Tree);
			DebugLocation(318, 10);
			// SugarCpp.g:318:10: ( ',' ident )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==95))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:318:11: ',' ident
					{
					DebugLocation(318, 11);
					char_literal148=(IToken)Match(input,95,Follow._95_in_generic_parameter_inside1780);  
					stream_95.Add(char_literal148);

					DebugLocation(318, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1782);
					ident149=ident();
					PopFollow();

					stream_ident.Add(ident149.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 318:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(318, 26);
				// SugarCpp.g:318:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(318, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(318, 47);
				// SugarCpp.g:318:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(318, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:321:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal150 = default(IToken);
		IToken char_literal152 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside151 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal150_tree = default(CommonTree);
		CommonTree char_literal152_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(321, 1);
		try
		{
			// SugarCpp.g:322:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:322:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(322, 4);
			char_literal150=(IToken)Match(input,109,Follow._109_in_generic_parameter1804);  
			stream_109.Add(char_literal150);

			DebugLocation(322, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1806);
			generic_parameter_inside151=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside151.Tree);
			DebugLocation(322, 33);
			char_literal152=(IToken)Match(input,117,Follow._117_in_generic_parameter1808);  
			stream_117.Add(char_literal152);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 322:37: -> generic_parameter_inside
			{
				DebugLocation(322, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(323, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:325:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal154 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item155 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal154_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(325, 1);
		try
		{
			// SugarCpp.g:326:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:326:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(326, 4);
			PushFollow(Follow._func_args_item_in_func_args1823);
			func_args_item153=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item153.Tree);
			DebugLocation(326, 19);
			// SugarCpp.g:326:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==95))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:326:20: ',' func_args_item
					{
					DebugLocation(326, 20);
					char_literal154=(IToken)Match(input,95,Follow._95_in_func_args1826);  
					stream_95.Add(char_literal154);

					DebugLocation(326, 24);
					PushFollow(Follow._func_args_item_in_func_args1828);
					func_args_item155=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item155.Tree);

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 326:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(326, 44);
				// SugarCpp.g:326:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(326, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(326, 56);
				// SugarCpp.g:326:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(326, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:329:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal157 = default(IToken);
		IToken char_literal159 = default(IToken);
		IToken string_literal160 = default(IToken);
		IToken char_literal162 = default(IToken);
		IToken char_literal164 = default(IToken);
		IToken string_literal165 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal157_tree = default(CommonTree);
		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree string_literal160_tree = default(CommonTree);
		CommonTree char_literal162_tree = default(CommonTree);
		CommonTree char_literal164_tree = default(CommonTree);
		CommonTree string_literal165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(329, 1);
		try
		{
			// SugarCpp.g:330:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT))
			{
				alt75 = 1;
			}
			else if ((LA75_0==107))
			{
				alt75 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:330:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(330, 4);
				PushFollow(Follow._ident_list_in_func_args_item1850);
				ident_list156=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list156.Tree);
				DebugLocation(330, 15);
				char_literal157=(IToken)Match(input,105,Follow._105_in_func_args_item1852);  
				stream_105.Add(char_literal157);

				DebugLocation(330, 19);
				PushFollow(Follow._type_name_in_func_args_item1854);
				type_name158=type_name();
				PopFollow();

				stream_type_name.Add(type_name158.Tree);
				DebugLocation(330, 29);
				// SugarCpp.g:330:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt74=3;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt74 = 1;
					}
					break;
				case 88:
					{
					alt74 = 2;
					}
					break;
				case 89:
				case 95:
					{
					alt74 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:330:31: ( '=' | ':=' ) expr
					{
					DebugLocation(330, 31);
					// SugarCpp.g:330:31: ( '=' | ':=' )
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if ((LA72_0==114))
					{
						alt72 = 1;
					}
					else if ((LA72_0==107))
					{
						alt72 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:330:32: '='
						{
						DebugLocation(330, 32);
						char_literal159=(IToken)Match(input,114,Follow._114_in_func_args_item1859);  
						stream_114.Add(char_literal159);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:330:38: ':='
						{
						DebugLocation(330, 38);
						string_literal160=(IToken)Match(input,107,Follow._107_in_func_args_item1863);  
						stream_107.Add(string_literal160);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(330, 44);
					PushFollow(Follow._expr_in_func_args_item1866);
					expr161=expr();
					PopFollow();

					stream_expr.Add(expr161.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 330:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(330, 53);
						// SugarCpp.g:330:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(330, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(330, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(330, 93);
						// SugarCpp.g:330:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(330, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:331:33: '(' ( expr_list )? ')'
					{
					DebugLocation(331, 33);
					char_literal162=(IToken)Match(input,88,Follow._88_in_func_args_item1914);  
					stream_88.Add(char_literal162);

					DebugLocation(331, 37);
					// SugarCpp.g:331:37: ( expr_list )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, false);
					int LA73_0 = input.LA(1);

					if ((LA73_0==IDENT||LA73_0==NUMBER||LA73_0==STRING||LA73_0==81||LA73_0==86||LA73_0==88||LA73_0==90||(LA73_0>=92 && LA73_0<=93)||(LA73_0>=96 && LA73_0<=97)||(LA73_0>=123 && LA73_0<=124)||LA73_0==147||LA73_0==149||(LA73_0>=151 && LA73_0<=152)||LA73_0==170))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:331:37: expr_list
						{
						DebugLocation(331, 37);
						PushFollow(Follow._expr_list_in_func_args_item1916);
						expr_list163=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list163.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(331, 48);
					char_literal164=(IToken)Match(input,89,Follow._89_in_func_args_item1919);  
					stream_89.Add(char_literal164);



					{
					// AST REWRITE
					// elements: type_name, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 331:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(331, 56);
						// SugarCpp.g:331:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(331, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(331, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(331, 98);
						// SugarCpp.g:331:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(331, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:332:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 332:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(332, 18);
						// SugarCpp.g:332:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(332, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(332, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:334:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(334, 8);
				string_literal165=(IToken)Match(input,107,Follow._107_in_func_args_item1976); 
				string_literal165_tree = (CommonTree)adaptor.Create(string_literal165);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal165_tree, root_0);
				DebugLocation(334, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1980);
				modify_expr166=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr166.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:337:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set167 = default(IToken);

		CommonTree set167_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(337, 1);
		try
		{
			// SugarCpp.g:338:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(338, 2);

			set167=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==92||input.LA(1)==96||input.LA(1)==103)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set167));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:341:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal169 = default(IToken);
		IToken char_literal171 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal169_tree = default(CommonTree);
		CommonTree char_literal171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(341, 1);
		try
		{
			// SugarCpp.g:342:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==IDENT))
			{
				alt76 = 1;
			}
			else if ((LA76_0==88))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:342:4: ident
				{
				DebugLocation(342, 4);
				PushFollow(Follow._ident_in_func_name2014);
				ident168=ident();
				PopFollow();

				stream_ident.Add(ident168.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 342:10: -> ident
				{
					DebugLocation(342, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:343:4: '(' operator ')'
				{
				DebugLocation(343, 4);
				char_literal169=(IToken)Match(input,88,Follow._88_in_func_name2023);  
				stream_88.Add(char_literal169);

				DebugLocation(343, 8);
				PushFollow(Follow._operator_in_func_name2025);
				operator170=@operator();
				PopFollow();

				stream_operator.Add(operator170.Tree);
				DebugLocation(343, 17);
				char_literal171=(IToken)Match(input,89,Follow._89_in_func_name2027);  
				stream_89.Add(char_literal171);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 343:21: -> operator
				{
					DebugLocation(343, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(344, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:346:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 27);
		TraceIn("func_type", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name172 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(346, 1);
		try
		{
			// SugarCpp.g:347:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:347:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(347, 4);
			PushFollow(Follow._type_name_in_func_type2042);
			type_name172=type_name();
			PopFollow();

			adaptor.AddChild(root_0, type_name172.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 27);
			LeaveRule("func_type", 27);
			LeaveRule_func_type();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:350:1: func_def : ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 28);
		TraceIn("func_def", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal175 = default(IToken);
		IToken char_literal178 = default(IToken);
		IToken char_literal180 = default(IToken);
		IToken NEWLINE181 = default(IToken);
		IToken char_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree NEWLINE181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(350, 4);
		try
		{
			// SugarCpp.g:351:2: ( ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:351:4: ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(351, 4);
			// SugarCpp.g:351:4: ( attribute )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==124))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:4: attribute
				{
				DebugLocation(351, 4);
				PushFollow(Follow._attribute_in_func_def2053);
				attribute173=attribute();
				PopFollow();

				stream_attribute.Add(attribute173.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(351, 15);
			PushFollow(Follow._func_type_in_func_def2056);
			func_type174=func_type();
			PopFollow();

			stream_func_type.Add(func_type174.Tree);
			DebugLocation(351, 25);
			// SugarCpp.g:351:25: ( '~' )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==170))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:25: '~'
				{
				DebugLocation(351, 25);
				char_literal175=(IToken)Match(input,170,Follow._170_in_func_def2058);  
				stream_170.Add(char_literal175);


				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(351, 30);
			PushFollow(Follow._func_name_in_func_def2061);
			func_name176=func_name();
			PopFollow();

			stream_func_name.Add(func_name176.Tree);
			DebugLocation(351, 40);
			// SugarCpp.g:351:40: ( generic_parameter )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==109))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:40: generic_parameter
				{
				DebugLocation(351, 40);
				PushFollow(Follow._generic_parameter_in_func_def2063);
				generic_parameter177=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter177.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(351, 59);
			char_literal178=(IToken)Match(input,88,Follow._88_in_func_def2066);  
			stream_88.Add(char_literal178);

			DebugLocation(351, 63);
			// SugarCpp.g:351:63: ( func_args )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==IDENT||LA80_0==107))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:63: func_args
				{
				DebugLocation(351, 63);
				PushFollow(Follow._func_args_in_func_def2068);
				func_args179=func_args();
				PopFollow();

				stream_func_args.Add(func_args179.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(351, 74);
			char_literal180=(IToken)Match(input,89,Follow._89_in_func_def2071);  
			stream_89.Add(char_literal180);

			DebugLocation(351, 78);
			// SugarCpp.g:351:78: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==NEWLINE))
			{
				alt82 = 1;
			}
			else if ((LA82_0==114))
			{
				alt82 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:351:80: ( NEWLINE )+ stmt_block
				{
				DebugLocation(351, 80);
				// SugarCpp.g:351:80: ( NEWLINE )+
				int cnt81=0;
				try { DebugEnterSubRule(81);
				while (true)
				{
					int alt81=2;
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==NEWLINE))
					{
						alt81 = 1;
					}


					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:351:80: NEWLINE
						{
						DebugLocation(351, 80);
						NEWLINE181=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2075);  
						stream_NEWLINE.Add(NEWLINE181);


						}
						break;

					default:
						if (cnt81 >= 1)
							goto loop81;

						EarlyExitException eee81 = new EarlyExitException( 81, input );
						DebugRecognitionException(eee81);
						throw eee81;
					}
					cnt81++;
				}
				loop81:
					;

				} finally { DebugExitSubRule(81); }

				DebugLocation(351, 89);
				PushFollow(Follow._stmt_block_in_func_def2078);
				stmt_block182=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block182.Tree);


				{
				// AST REWRITE
				// elements: 170, func_type, func_name, func_args, generic_parameter, stmt_block, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 351:100: -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(351, 103);
					// SugarCpp.g:351:103: ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(351, 105);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(351, 114);
					// SugarCpp.g:351:114: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(351, 114);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(351, 125);
					adaptor.AddChild(root_1, stream_func_type.NextTree());
					DebugLocation(351, 135);
					// SugarCpp.g:351:135: ( '~' )?
					if (stream_170.HasNext)
					{
						DebugLocation(351, 135);
						adaptor.AddChild(root_1, stream_170.NextNode());

					}
					stream_170.Reset();
					DebugLocation(351, 140);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(351, 150);
					// SugarCpp.g:351:150: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(351, 150);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(351, 169);
					// SugarCpp.g:351:169: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(351, 169);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(351, 180);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:352:24: '=' where_expr
				{
				DebugLocation(352, 24);
				char_literal183=(IToken)Match(input,114,Follow._114_in_func_def2127);  
				stream_114.Add(char_literal183);

				DebugLocation(352, 28);
				PushFollow(Follow._where_expr_in_func_def2129);
				where_expr184=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr184.Tree);


				{
				// AST REWRITE
				// elements: func_name, func_type, func_args, attribute, where_expr, generic_parameter, 170
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 352:40: -> ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(352, 43);
					// SugarCpp.g:352:43: ^( Func_Def ( attribute )? func_type ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(352, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(352, 54);
					// SugarCpp.g:352:54: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(352, 54);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(352, 65);
					adaptor.AddChild(root_1, stream_func_type.NextTree());
					DebugLocation(352, 75);
					// SugarCpp.g:352:75: ( '~' )?
					if (stream_170.HasNext)
					{
						DebugLocation(352, 75);
						adaptor.AddChild(root_1, stream_170.NextNode());

					}
					stream_170.Reset();
					DebugLocation(352, 80);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(352, 90);
					// SugarCpp.g:352:90: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(352, 90);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(352, 109);
					// SugarCpp.g:352:109: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(352, 109);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(352, 120);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 28);
			LeaveRule("func_def", 28);
			LeaveRule_func_def();
		}
		DebugLocation(353, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:355:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 29);
		TraceIn("stmt_block_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE186 = default(IToken);
		IToken NEWLINE188 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken NEWLINE190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE186_tree = default(CommonTree);
		CommonTree NEWLINE188_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree NEWLINE190_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(355, 1);
		try
		{
			// SugarCpp.g:356:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt87=2;
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==136||(LA87_0>=140 && LA87_0<=142)||LA87_0==148||LA87_0==156||LA87_0==159||(LA87_0>=161 && LA87_0<=162)||LA87_0==166))
			{
				alt87 = 1;
			}
			else if ((LA87_0==IDENT||LA87_0==81||LA87_0==86||LA87_0==88||LA87_0==90||(LA87_0>=92 && LA87_0<=93)||(LA87_0>=96 && LA87_0<=97)||LA87_0==123||LA87_0==152||LA87_0==154||LA87_0==160||LA87_0==163||LA87_0==170))
			{
				alt87 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(356, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2169);
				stmt_complex185=stmt_complex();
				PopFollow();

				stream_stmt_complex.Add(stmt_complex185.Tree);
				DebugLocation(356, 17);
				// SugarCpp.g:356:17: ( NEWLINE )+
				int cnt83=0;
				try { DebugEnterSubRule(83);
				while (true)
				{
					int alt83=2;
					try { DebugEnterDecision(83, false);
					int LA83_0 = input.LA(1);

					if ((LA83_0==NEWLINE))
					{
						alt83 = 1;
					}


					} finally { DebugExitDecision(83); }
					switch (alt83)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:356:17: NEWLINE
						{
						DebugLocation(356, 17);
						NEWLINE186=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2171);  
						stream_NEWLINE.Add(NEWLINE186);


						}
						break;

					default:
						if (cnt83 >= 1)
							goto loop83;

						EarlyExitException eee83 = new EarlyExitException( 83, input );
						DebugRecognitionException(eee83);
						throw eee83;
					}
					cnt83++;
				}
				loop83:
					;

				} finally { DebugExitSubRule(83); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:26: -> stmt_complex
				{
					DebugLocation(356, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:357:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(357, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2181);
				stmt_simple187=stmt_simple();
				PopFollow();

				stream_stmt_simple.Add(stmt_simple187.Tree);
				DebugLocation(357, 16);
				// SugarCpp.g:357:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==NEWLINE))
				{
					alt86 = 1;
				}
				else if ((LA86_0==108))
				{
					alt86 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:357:17: ( NEWLINE )+
					{
					DebugLocation(357, 17);
					// SugarCpp.g:357:17: ( NEWLINE )+
					int cnt84=0;
					try { DebugEnterSubRule(84);
					while (true)
					{
						int alt84=2;
						try { DebugEnterDecision(84, false);
						int LA84_0 = input.LA(1);

						if ((LA84_0==NEWLINE))
						{
							alt84 = 1;
						}


						} finally { DebugExitDecision(84); }
						switch (alt84)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:357:17: NEWLINE
							{
							DebugLocation(357, 17);
							NEWLINE188=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2184);  
							stream_NEWLINE.Add(NEWLINE188);


							}
							break;

						default:
							if (cnt84 >= 1)
								goto loop84;

							EarlyExitException eee84 = new EarlyExitException( 84, input );
							DebugRecognitionException(eee84);
							throw eee84;
						}
						cnt84++;
					}
					loop84:
						;

					} finally { DebugExitSubRule(84); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:357:28: ';' ( NEWLINE )*
					{
					DebugLocation(357, 28);
					char_literal189=(IToken)Match(input,108,Follow._108_in_stmt_block_item2189);  
					stream_108.Add(char_literal189);

					DebugLocation(357, 32);
					// SugarCpp.g:357:32: ( NEWLINE )*
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch ( alt85 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:357:32: NEWLINE
							{
							DebugLocation(357, 32);
							NEWLINE190=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2191);  
							stream_NEWLINE.Add(NEWLINE190);


							}
							break;

						default:
							goto loop85;
						}
					}

					loop85:
						;

					} finally { DebugExitSubRule(85); }


					}
					break;

				}
				} finally { DebugExitSubRule(86); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:42: -> stmt_simple
				{
					DebugLocation(357, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 29);
			LeaveRule("stmt_block_item", 29);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:360:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 30);
		TraceIn("stmt_block", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT191 = default(IToken);
		IToken NEWLINE192 = default(IToken);
		IToken DEDENT194 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item193 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT191_tree = default(CommonTree);
		CommonTree NEWLINE192_tree = default(CommonTree);
		CommonTree DEDENT194_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:361:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(361, 4);
			INDENT191=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2208);  
			stream_INDENT.Add(INDENT191);

			DebugLocation(361, 11);
			// SugarCpp.g:361:11: ( NEWLINE )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==NEWLINE))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:361:11: NEWLINE
					{
					DebugLocation(361, 11);
					NEWLINE192=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2210);  
					stream_NEWLINE.Add(NEWLINE192);


					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }

			DebugLocation(361, 20);
			// SugarCpp.g:361:20: ( stmt_block_item )*
			try { DebugEnterSubRule(89);
			while (true)
			{
				int alt89=2;
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==81||LA89_0==86||LA89_0==88||LA89_0==90||(LA89_0>=92 && LA89_0<=93)||(LA89_0>=96 && LA89_0<=97)||LA89_0==123||LA89_0==136||(LA89_0>=140 && LA89_0<=142)||LA89_0==148||LA89_0==152||LA89_0==154||LA89_0==156||(LA89_0>=159 && LA89_0<=163)||LA89_0==166||LA89_0==170))
				{
					alt89 = 1;
				}


				} finally { DebugExitDecision(89); }
				switch ( alt89 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:361:20: stmt_block_item
					{
					DebugLocation(361, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2213);
					stmt_block_item193=stmt_block_item();
					PopFollow();

					stream_stmt_block_item.Add(stmt_block_item193.Tree);

					}
					break;

				default:
					goto loop89;
				}
			}

			loop89:
				;

			} finally { DebugExitSubRule(89); }

			DebugLocation(361, 37);
			DEDENT194=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2216);  
			stream_DEDENT.Add(DEDENT194);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 361:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(361, 47);
				// SugarCpp.g:361:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(361, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(361, 60);
				// SugarCpp.g:361:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(361, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 30);
			LeaveRule("stmt_block", 30);
			LeaveRule_stmt_block();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:364:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 31);
		TraceIn("stmt", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( stmt_simple | stmt_complex )
			int alt90=2;
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==IDENT||LA90_0==81||LA90_0==86||LA90_0==88||LA90_0==90||(LA90_0>=92 && LA90_0<=93)||(LA90_0>=96 && LA90_0<=97)||LA90_0==123||LA90_0==152||LA90_0==154||LA90_0==160||LA90_0==163||LA90_0==170))
			{
				alt90 = 1;
			}
			else if ((LA90_0==136||(LA90_0>=140 && LA90_0<=142)||LA90_0==148||LA90_0==156||LA90_0==159||(LA90_0>=161 && LA90_0<=162)||LA90_0==166))
			{
				alt90 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:365:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(365, 4);
				PushFollow(Follow._stmt_simple_in_stmt2236);
				stmt_simple195=stmt_simple();
				PopFollow();

				adaptor.AddChild(root_0, stmt_simple195.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:366:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(366, 4);
				PushFollow(Follow._stmt_complex_in_stmt2241);
				stmt_complex196=stmt_complex();
				PopFollow();

				adaptor.AddChild(root_0, stmt_complex196.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 31);
			LeaveRule("stmt", 31);
			LeaveRule_stmt();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:369:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 32);
		TraceIn("stmt_simple", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(369, 1);
		try
		{
			// SugarCpp.g:370:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:370:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(370, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2252);
			stmt_expr197=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr197.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 32);
			LeaveRule("stmt_simple", 32);
			LeaveRule_stmt_simple();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:373:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 33);
		TraceIn("stmt_complex", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(373, 1);
		try
		{
			// SugarCpp.g:374:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt91=6;
			try { DebugEnterDecision(91, false);
			switch (input.LA(1))
			{
			case 142:
			case 161:
				{
				alt91 = 1;
				}
				break;
			case 141:
				{
				alt91 = 2;
				}
				break;
			case 148:
			case 162:
			case 166:
				{
				alt91 = 3;
				}
				break;
			case 159:
				{
				alt91 = 4;
				}
				break;
			case 156:
				{
				alt91 = 5;
				}
				break;
			case 136:
			case 140:
				{
				alt91 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:374:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(374, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2263);
				stmt_if198=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if198.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:375:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2268);
				stmt_for199=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for199.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:376:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2273);
				stmt_while200=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while200.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:377:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(377, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2278);
				stmt_try201=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try201.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:378:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(378, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2283);
				stmt_switch202=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch202.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:379:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(379, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2288);
				stmt_defer203=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer203.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 33);
			LeaveRule("stmt_complex", 33);
			LeaveRule_stmt_complex();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:382:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 34);
		TraceIn("stmt_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal204 = default(IToken);
		IToken string_literal206 = default(IToken);
		IToken string_literal208 = default(IToken);
		IToken string_literal210 = default(IToken);
		IToken string_literal212 = default(IToken);
		IToken char_literal214 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item215 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal204_tree = default(CommonTree);
		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		CommonTree string_literal210_tree = default(CommonTree);
		CommonTree string_literal212_tree = default(CommonTree);
		CommonTree char_literal214_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(382, 1);
		try
		{
			// SugarCpp.g:383:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:383:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(383, 4);
			// SugarCpp.g:383:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:383:5: a= stmt_expr_item
			{
			DebugLocation(383, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2302);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 383:22: -> $a
			{
				DebugLocation(383, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(383, 29);
			// SugarCpp.g:383:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=6;
				try { DebugEnterDecision(93, false);
				switch (input.LA(1))
				{
				case 142:
					{
					alt93 = 1;
					}
					break;
				case 161:
					{
					alt93 = 2;
					}
					break;
				case 166:
					{
					alt93 = 3;
					}
					break;
				case 162:
					{
					alt93 = 4;
					}
					break;
				case 141:
					{
					alt93 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:383:31: 'if' expr
					{
					DebugLocation(383, 31);
					string_literal204=(IToken)Match(input,142,Follow._142_in_stmt_expr2312);  
					stream_142.Add(string_literal204);

					DebugLocation(383, 36);
					PushFollow(Follow._expr_in_stmt_expr2314);
					expr205=expr();
					PopFollow();

					stream_expr.Add(expr205.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 383:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(383, 44);
						// SugarCpp.g:383:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(383, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(383, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(383, 59);
						// SugarCpp.g:383:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(383, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(383, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:384:13: 'unless' expr
					{
					DebugLocation(384, 13);
					string_literal206=(IToken)Match(input,161,Follow._161_in_stmt_expr2343);  
					stream_161.Add(string_literal206);

					DebugLocation(384, 22);
					PushFollow(Follow._expr_in_stmt_expr2345);
					expr207=expr();
					PopFollow();

					stream_expr.Add(expr207.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 384:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(384, 30);
						// SugarCpp.g:384:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(384, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(384, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(384, 49);
						// SugarCpp.g:384:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(384, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(384, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:385:13: 'while' expr
					{
					DebugLocation(385, 13);
					string_literal208=(IToken)Match(input,166,Follow._166_in_stmt_expr2374);  
					stream_166.Add(string_literal208);

					DebugLocation(385, 21);
					PushFollow(Follow._expr_in_stmt_expr2376);
					expr209=expr();
					PopFollow();

					stream_expr.Add(expr209.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 385:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(385, 29);
						// SugarCpp.g:385:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(385, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(385, 47);
						// SugarCpp.g:385:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(385, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(385, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:386:13: 'until' expr
					{
					DebugLocation(386, 13);
					string_literal210=(IToken)Match(input,162,Follow._162_in_stmt_expr2405);  
					stream_162.Add(string_literal210);

					DebugLocation(386, 21);
					PushFollow(Follow._expr_in_stmt_expr2407);
					expr211=expr();
					PopFollow();

					stream_expr.Add(expr211.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 386:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(386, 29);
						// SugarCpp.g:386:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(386, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(386, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(386, 47);
						// SugarCpp.g:386:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(386, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(386, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:387:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(387, 13);
					string_literal212=(IToken)Match(input,141,Follow._141_in_stmt_expr2436);  
					stream_141.Add(string_literal212);

					DebugLocation(387, 19);
					PushFollow(Follow._for_item_in_stmt_expr2438);
					for_item213=for_item();
					PopFollow();

					stream_for_item.Add(for_item213.Tree);
					DebugLocation(387, 28);
					// SugarCpp.g:387:28: ( ',' for_item )*
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==95))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch ( alt92 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:387:29: ',' for_item
							{
							DebugLocation(387, 29);
							char_literal214=(IToken)Match(input,95,Follow._95_in_stmt_expr2441);  
							stream_95.Add(char_literal214);

							DebugLocation(387, 33);
							PushFollow(Follow._for_item_in_stmt_expr2443);
							for_item215=for_item();
							PopFollow();

							stream_for_item.Add(for_item215.Tree);

							}
							break;

						default:
							goto loop92;
						}
					}

					loop92:
						;

					} finally { DebugExitSubRule(92); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 387:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(387, 47);
						// SugarCpp.g:387:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(387, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(387, 58);
						// SugarCpp.g:387:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(387, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(387, 68);
						// SugarCpp.g:387:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(387, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(387, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 34);
			LeaveRule("stmt_expr", 34);
			LeaveRule_stmt_expr();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:391:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 35);
		TraceIn("stmt_expr_item", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(391, 1);
		try
		{
			// SugarCpp.g:392:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt94=5;
			try { DebugEnterDecision(94, false);
			try
			{
				alt94 = dfa94.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:392:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(392, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2485);
				stmt_alloc216=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc216.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:393:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(393, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2490);
				stmt_return217=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return217.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:394:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2495);
				stmt_using218=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using218.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:395:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2500);
				stmt_typedef219=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef219.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:396:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2505);
				stmt_modify220=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify220.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 35);
			LeaveRule("stmt_expr_item", 35);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:399:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 36);
		TraceIn("stmt_defer", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal221 = default(IToken);
		IToken string_literal223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt224 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(399, 1);
		try
		{
			// SugarCpp.g:400:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==136))
			{
				alt95 = 1;
			}
			else if ((LA95_0==140))
			{
				alt95 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:400:4: 'defer' stmt
				{
				DebugLocation(400, 4);
				string_literal221=(IToken)Match(input,136,Follow._136_in_stmt_defer2516);  
				stream_136.Add(string_literal221);

				DebugLocation(400, 12);
				PushFollow(Follow._stmt_in_stmt_defer2518);
				stmt222=stmt();
				PopFollow();

				stream_stmt.Add(stmt222.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 400:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(400, 20);
					// SugarCpp.g:400:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(400, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(400, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:401:4: 'finally' stmt
				{
				DebugLocation(401, 4);
				string_literal223=(IToken)Match(input,140,Follow._140_in_stmt_defer2531);  
				stream_140.Add(string_literal223);

				DebugLocation(401, 14);
				PushFollow(Follow._stmt_in_stmt_defer2533);
				stmt224=stmt();
				PopFollow();

				stream_stmt.Add(stmt224.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 401:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(401, 22);
					// SugarCpp.g:401:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(401, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(401, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 36);
			LeaveRule("stmt_defer", 36);
			LeaveRule_stmt_defer();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:404:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 37);
		TraceIn("stmt_typedef", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal225 = default(IToken);
		IToken char_literal227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name228 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal225_tree = default(CommonTree);
		CommonTree char_literal227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(404, 1);
		try
		{
			// SugarCpp.g:405:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:405:4: 'type' ident '=' type_name
			{
			DebugLocation(405, 4);
			string_literal225=(IToken)Match(input,160,Follow._160_in_stmt_typedef2552);  
			stream_160.Add(string_literal225);

			DebugLocation(405, 11);
			PushFollow(Follow._ident_in_stmt_typedef2554);
			ident226=ident();
			PopFollow();

			stream_ident.Add(ident226.Tree);
			DebugLocation(405, 17);
			char_literal227=(IToken)Match(input,114,Follow._114_in_stmt_typedef2556);  
			stream_114.Add(char_literal227);

			DebugLocation(405, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2558);
			type_name228=type_name();
			PopFollow();

			stream_type_name.Add(type_name228.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 405:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(405, 34);
				// SugarCpp.g:405:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(405, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(405, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(405, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 37);
			LeaveRule("stmt_typedef", 37);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:408:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 38);
		TraceIn("stmt_using_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal230_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(408, 36);
		try
		{
			// SugarCpp.g:408:16: ( ident | 'namespace' )
			int alt96=2;
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==IDENT))
			{
				alt96 = 1;
			}
			else if ((LA96_0==150))
			{
				alt96 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:408:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 18);
				PushFollow(Follow._ident_in_stmt_using_item2577);
				ident229=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident229.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:408:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 26);
				string_literal230=(IToken)Match(input,150,Follow._150_in_stmt_using_item2581); 
				string_literal230_tree = (CommonTree)adaptor.Create(string_literal230);
				adaptor.AddChild(root_0, string_literal230_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 38);
			LeaveRule("stmt_using_item", 38);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(408, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:409:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 39);
		TraceIn("stmt_using", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal231 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal231_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(409, 1);
		try
		{
			// SugarCpp.g:410:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:410:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(410, 4);
			string_literal231=(IToken)Match(input,163,Follow._163_in_stmt_using2589);  
			stream_163.Add(string_literal231);

			DebugLocation(410, 12);
			// SugarCpp.g:410:12: ( stmt_using_item )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENT||LA97_0==150))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:410:12: stmt_using_item
					{
					DebugLocation(410, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2591);
					stmt_using_item232=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item232.Tree);

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 410:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(410, 32);
				// SugarCpp.g:410:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(410, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(410, 45);
				// SugarCpp.g:410:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(410, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 39);
			LeaveRule("stmt_using", 39);
			LeaveRule_stmt_using();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:413:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 40);
		TraceIn("stmt_return", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(413, 1);
		try
		{
			// SugarCpp.g:414:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:414:4: 'return' ( expr )?
			{
			DebugLocation(414, 4);
			string_literal233=(IToken)Match(input,154,Follow._154_in_stmt_return2612);  
			stream_154.Add(string_literal233);

			DebugLocation(414, 13);
			// SugarCpp.g:414:13: ( expr )?
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==IDENT||LA98_0==NUMBER||LA98_0==STRING||LA98_0==81||LA98_0==86||LA98_0==88||LA98_0==90||(LA98_0>=92 && LA98_0<=93)||(LA98_0>=96 && LA98_0<=97)||(LA98_0>=123 && LA98_0<=124)||LA98_0==147||LA98_0==149||(LA98_0>=151 && LA98_0<=152)||LA98_0==170))
			{
				alt98 = 1;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:13: expr
				{
				DebugLocation(414, 13);
				PushFollow(Follow._expr_in_stmt_return2614);
				expr234=expr();
				PopFollow();

				stream_expr.Add(expr234.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(98); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 414:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(414, 22);
				// SugarCpp.g:414:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(414, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(414, 36);
				// SugarCpp.g:414:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(414, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 40);
			LeaveRule("stmt_return", 40);
			LeaveRule_stmt_return();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:417:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 41);
		TraceIn("inline_stmt_block", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal236 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal236_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(417, 1);
		try
		{
			// SugarCpp.g:418:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(418, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2635);
			stmt_simple235=stmt_simple();
			PopFollow();

			stream_stmt_simple.Add(stmt_simple235.Tree);
			DebugLocation(418, 16);
			// SugarCpp.g:418:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==108))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:418:17: ';' stmt_simple
					{
					DebugLocation(418, 17);
					char_literal236=(IToken)Match(input,108,Follow._108_in_inline_stmt_block2638);  
					stream_108.Add(char_literal236);

					DebugLocation(418, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2640);
					stmt_simple237=stmt_simple();
					PopFollow();

					stream_stmt_simple.Add(stmt_simple237.Tree);

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(418, 38);
				// SugarCpp.g:418:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(418, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(418, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(418, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 41);
			LeaveRule("inline_stmt_block", 41);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:421:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 42);
		TraceIn("stmt_if", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal238 = default(IToken);
		IToken NEWLINE240 = default(IToken);
		IToken NEWLINE242 = default(IToken);
		IToken string_literal243 = default(IToken);
		IToken NEWLINE244 = default(IToken);
		IToken string_literal246 = default(IToken);
		IToken string_literal248 = default(IToken);
		IToken NEWLINE250 = default(IToken);
		IToken NEWLINE252 = default(IToken);
		IToken string_literal253 = default(IToken);
		IToken NEWLINE254 = default(IToken);
		IToken string_literal256 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block247 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree NEWLINE240_tree = default(CommonTree);
		CommonTree NEWLINE242_tree = default(CommonTree);
		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree NEWLINE244_tree = default(CommonTree);
		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree string_literal248_tree = default(CommonTree);
		CommonTree NEWLINE250_tree = default(CommonTree);
		CommonTree NEWLINE252_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree NEWLINE254_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(421, 1);
		try
		{
			// SugarCpp.g:422:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt110=2;
			try { DebugEnterDecision(110, false);
			int LA110_0 = input.LA(1);

			if ((LA110_0==142))
			{
				alt110 = 1;
			}
			else if ((LA110_0==161))
			{
				alt110 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 110, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:422:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(422, 4);
				string_literal238=(IToken)Match(input,142,Follow._142_in_stmt_if2662);  
				stream_142.Add(string_literal238);

				DebugLocation(422, 9);
				PushFollow(Follow._expr_in_stmt_if2664);
				expr239=expr();
				PopFollow();

				stream_expr.Add(expr239.Tree);
				DebugLocation(422, 14);
				// SugarCpp.g:422:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==NEWLINE))
				{
					alt104 = 1;
				}
				else if ((LA104_0==157))
				{
					alt104 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:422:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(422, 15);
					// SugarCpp.g:422:15: ( NEWLINE )+
					int cnt100=0;
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==NEWLINE))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch (alt100)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:422:15: NEWLINE
							{
							DebugLocation(422, 15);
							NEWLINE240=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2667);  
							stream_NEWLINE.Add(NEWLINE240);


							}
							break;

						default:
							if (cnt100 >= 1)
								goto loop100;

							EarlyExitException eee100 = new EarlyExitException( 100, input );
							DebugRecognitionException(eee100);
							throw eee100;
						}
						cnt100++;
					}
					loop100:
						;

					} finally { DebugExitSubRule(100); }

					DebugLocation(422, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2670);
					stmt_block241=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block241.Tree);
					DebugLocation(422, 35);
					// SugarCpp.g:422:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt103=2;
					try { DebugEnterSubRule(103);
					try { DebugEnterDecision(103, false);
					try
					{
						alt103 = dfa103.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(103); }
					switch (alt103)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:422:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(422, 36);
						// SugarCpp.g:422:36: ( NEWLINE )*
						try { DebugEnterSubRule(101);
						while (true)
						{
							int alt101=2;
							try { DebugEnterDecision(101, false);
							int LA101_0 = input.LA(1);

							if ((LA101_0==NEWLINE))
							{
								alt101 = 1;
							}


							} finally { DebugExitDecision(101); }
							switch ( alt101 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:422:36: NEWLINE
								{
								DebugLocation(422, 36);
								NEWLINE242=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2673);  
								stream_NEWLINE.Add(NEWLINE242);


								}
								break;

							default:
								goto loop101;
							}
						}

						loop101:
							;

						} finally { DebugExitSubRule(101); }

						DebugLocation(422, 45);
						string_literal243=(IToken)Match(input,138,Follow._138_in_stmt_if2676);  
						stream_138.Add(string_literal243);

						DebugLocation(422, 52);
						// SugarCpp.g:422:52: ( NEWLINE )+
						int cnt102=0;
						try { DebugEnterSubRule(102);
						while (true)
						{
							int alt102=2;
							try { DebugEnterDecision(102, false);
							int LA102_0 = input.LA(1);

							if ((LA102_0==NEWLINE))
							{
								alt102 = 1;
							}


							} finally { DebugExitDecision(102); }
							switch (alt102)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:422:52: NEWLINE
								{
								DebugLocation(422, 52);
								NEWLINE244=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2678);  
								stream_NEWLINE.Add(NEWLINE244);


								}
								break;

							default:
								if (cnt102 >= 1)
									goto loop102;

								EarlyExitException eee102 = new EarlyExitException( 102, input );
								DebugRecognitionException(eee102);
								throw eee102;
							}
							cnt102++;
						}
						loop102:
							;

						} finally { DebugExitSubRule(102); }

						DebugLocation(422, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2681);
						stmt_block245=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block245.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(103); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 422:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(422, 77);
						// SugarCpp.g:422:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(422, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(422, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(422, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(422, 103);
						// SugarCpp.g:422:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(422, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:423:16: 'then' inline_stmt_block
					{
					DebugLocation(423, 16);
					string_literal246=(IToken)Match(input,157,Follow._157_in_stmt_if2713);  
					stream_157.Add(string_literal246);

					DebugLocation(423, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2715);
					inline_stmt_block247=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block247.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 423:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(423, 44);
						// SugarCpp.g:423:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(423, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(423, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(423, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(104); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:425:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(425, 4);
				string_literal248=(IToken)Match(input,161,Follow._161_in_stmt_if2736);  
				stream_161.Add(string_literal248);

				DebugLocation(425, 13);
				PushFollow(Follow._expr_in_stmt_if2738);
				expr249=expr();
				PopFollow();

				stream_expr.Add(expr249.Tree);
				DebugLocation(425, 18);
				// SugarCpp.g:425:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}
				else if ((LA109_0==157))
				{
					alt109 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:425:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(425, 19);
					// SugarCpp.g:425:19: ( NEWLINE )+
					int cnt105=0;
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=2;
						try { DebugEnterDecision(105, false);
						int LA105_0 = input.LA(1);

						if ((LA105_0==NEWLINE))
						{
							alt105 = 1;
						}


						} finally { DebugExitDecision(105); }
						switch (alt105)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:425:19: NEWLINE
							{
							DebugLocation(425, 19);
							NEWLINE250=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2741);  
							stream_NEWLINE.Add(NEWLINE250);


							}
							break;

						default:
							if (cnt105 >= 1)
								goto loop105;

							EarlyExitException eee105 = new EarlyExitException( 105, input );
							DebugRecognitionException(eee105);
							throw eee105;
						}
						cnt105++;
					}
					loop105:
						;

					} finally { DebugExitSubRule(105); }

					DebugLocation(425, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2744);
					stmt_block251=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block251.Tree);
					DebugLocation(425, 39);
					// SugarCpp.g:425:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					try
					{
						alt108 = dfa108.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:425:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(425, 40);
						// SugarCpp.g:425:40: ( NEWLINE )*
						try { DebugEnterSubRule(106);
						while (true)
						{
							int alt106=2;
							try { DebugEnterDecision(106, false);
							int LA106_0 = input.LA(1);

							if ((LA106_0==NEWLINE))
							{
								alt106 = 1;
							}


							} finally { DebugExitDecision(106); }
							switch ( alt106 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:425:40: NEWLINE
								{
								DebugLocation(425, 40);
								NEWLINE252=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2747);  
								stream_NEWLINE.Add(NEWLINE252);


								}
								break;

							default:
								goto loop106;
							}
						}

						loop106:
							;

						} finally { DebugExitSubRule(106); }

						DebugLocation(425, 49);
						string_literal253=(IToken)Match(input,138,Follow._138_in_stmt_if2750);  
						stream_138.Add(string_literal253);

						DebugLocation(425, 56);
						// SugarCpp.g:425:56: ( NEWLINE )+
						int cnt107=0;
						try { DebugEnterSubRule(107);
						while (true)
						{
							int alt107=2;
							try { DebugEnterDecision(107, false);
							int LA107_0 = input.LA(1);

							if ((LA107_0==NEWLINE))
							{
								alt107 = 1;
							}


							} finally { DebugExitDecision(107); }
							switch (alt107)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:425:56: NEWLINE
								{
								DebugLocation(425, 56);
								NEWLINE254=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2752);  
								stream_NEWLINE.Add(NEWLINE254);


								}
								break;

							default:
								if (cnt107 >= 1)
									goto loop107;

								EarlyExitException eee107 = new EarlyExitException( 107, input );
								DebugRecognitionException(eee107);
								throw eee107;
							}
							cnt107++;
						}
						loop107:
							;

						} finally { DebugExitSubRule(107); }

						DebugLocation(425, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2755);
						stmt_block255=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block255.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(108); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 425:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(425, 81);
						// SugarCpp.g:425:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(425, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(425, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(425, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(425, 111);
						// SugarCpp.g:425:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(425, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:426:20: 'then' inline_stmt_block
					{
					DebugLocation(426, 20);
					string_literal256=(IToken)Match(input,157,Follow._157_in_stmt_if2791);  
					stream_157.Add(string_literal256);

					DebugLocation(426, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2793);
					inline_stmt_block257=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block257.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 426:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(426, 48);
						// SugarCpp.g:426:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(426, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(426, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(426, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(109); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 42);
			LeaveRule("stmt_if", 42);
			LeaveRule_stmt_if();
		}
		DebugLocation(428, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:430:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 43);
		TraceIn("stmt_while", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal258 = default(IToken);
		IToken NEWLINE260 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken string_literal264 = default(IToken);
		IToken NEWLINE266 = default(IToken);
		IToken string_literal268 = default(IToken);
		IToken string_literal270 = default(IToken);
		IToken NEWLINE272 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block267 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block273 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree NEWLINE260_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree string_literal264_tree = default(CommonTree);
		CommonTree NEWLINE266_tree = default(CommonTree);
		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree string_literal270_tree = default(CommonTree);
		CommonTree NEWLINE272_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(430, 1);
		try
		{
			// SugarCpp.g:431:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt117=3;
			try { DebugEnterDecision(117, false);
			switch (input.LA(1))
			{
			case 166:
				{
				alt117 = 1;
				}
				break;
			case 162:
				{
				alt117 = 2;
				}
				break;
			case 148:
				{
				alt117 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:431:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(431, 4);
				string_literal258=(IToken)Match(input,166,Follow._166_in_stmt_while2824);  
				stream_166.Add(string_literal258);

				DebugLocation(431, 12);
				PushFollow(Follow._expr_in_stmt_while2826);
				expr259=expr();
				PopFollow();

				stream_expr.Add(expr259.Tree);
				DebugLocation(431, 17);
				// SugarCpp.g:431:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==NEWLINE))
				{
					alt112 = 1;
				}
				else if ((LA112_0==157))
				{
					alt112 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:431:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(431, 19);
					// SugarCpp.g:431:19: ( NEWLINE )+
					int cnt111=0;
					try { DebugEnterSubRule(111);
					while (true)
					{
						int alt111=2;
						try { DebugEnterDecision(111, false);
						int LA111_0 = input.LA(1);

						if ((LA111_0==NEWLINE))
						{
							alt111 = 1;
						}


						} finally { DebugExitDecision(111); }
						switch (alt111)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:431:19: NEWLINE
							{
							DebugLocation(431, 19);
							NEWLINE260=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2830);  
							stream_NEWLINE.Add(NEWLINE260);


							}
							break;

						default:
							if (cnt111 >= 1)
								goto loop111;

							EarlyExitException eee111 = new EarlyExitException( 111, input );
							DebugRecognitionException(eee111);
							throw eee111;
						}
						cnt111++;
					}
					loop111:
						;

					} finally { DebugExitSubRule(111); }

					DebugLocation(431, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2833);
					stmt_block261=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block261.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 431:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(431, 42);
						// SugarCpp.g:431:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(431, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(431, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(431, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:432:13: 'then' inline_stmt_block
					{
					DebugLocation(432, 13);
					string_literal262=(IToken)Match(input,157,Follow._157_in_stmt_while2857);  
					stream_157.Add(string_literal262);

					DebugLocation(432, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2859);
					inline_stmt_block263=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block263.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(432, 41);
						// SugarCpp.g:432:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(432, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(432, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(112); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:434:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(434, 4);
				string_literal264=(IToken)Match(input,162,Follow._162_in_stmt_while2883);  
				stream_162.Add(string_literal264);

				DebugLocation(434, 12);
				PushFollow(Follow._expr_in_stmt_while2885);
				expr265=expr();
				PopFollow();

				stream_expr.Add(expr265.Tree);
				DebugLocation(434, 17);
				// SugarCpp.g:434:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==NEWLINE))
				{
					alt114 = 1;
				}
				else if ((LA114_0==157))
				{
					alt114 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(434, 19);
					// SugarCpp.g:434:19: ( NEWLINE )+
					int cnt113=0;
					try { DebugEnterSubRule(113);
					while (true)
					{
						int alt113=2;
						try { DebugEnterDecision(113, false);
						int LA113_0 = input.LA(1);

						if ((LA113_0==NEWLINE))
						{
							alt113 = 1;
						}


						} finally { DebugExitDecision(113); }
						switch (alt113)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:434:19: NEWLINE
							{
							DebugLocation(434, 19);
							NEWLINE266=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2889);  
							stream_NEWLINE.Add(NEWLINE266);


							}
							break;

						default:
							if (cnt113 >= 1)
								goto loop113;

							EarlyExitException eee113 = new EarlyExitException( 113, input );
							DebugRecognitionException(eee113);
							throw eee113;
						}
						cnt113++;
					}
					loop113:
						;

					} finally { DebugExitSubRule(113); }

					DebugLocation(434, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2892);
					stmt_block267=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block267.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(434, 42);
						// SugarCpp.g:434:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(434, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(434, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:435:13: 'then' inline_stmt_block
					{
					DebugLocation(435, 13);
					string_literal268=(IToken)Match(input,157,Follow._157_in_stmt_while2916);  
					stream_157.Add(string_literal268);

					DebugLocation(435, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2918);
					inline_stmt_block269=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block269.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 435:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(435, 41);
						// SugarCpp.g:435:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(435, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(435, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(435, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:437:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(437, 4);
				string_literal270=(IToken)Match(input,148,Follow._148_in_stmt_while2942);  
				stream_148.Add(string_literal270);

				DebugLocation(437, 11);
				// SugarCpp.g:437:11: ( expr )?
				int alt115=2;
				try { DebugEnterSubRule(115);
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==IDENT||LA115_0==NUMBER||LA115_0==STRING||LA115_0==81||LA115_0==86||LA115_0==88||LA115_0==90||(LA115_0>=92 && LA115_0<=93)||(LA115_0>=96 && LA115_0<=97)||(LA115_0>=123 && LA115_0<=124)||LA115_0==147||LA115_0==149||(LA115_0>=151 && LA115_0<=152)||LA115_0==170))
				{
					alt115 = 1;
				}
				} finally { DebugExitDecision(115); }
				switch (alt115)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:437:11: expr
					{
					DebugLocation(437, 11);
					PushFollow(Follow._expr_in_stmt_while2944);
					expr271=expr();
					PopFollow();

					stream_expr.Add(expr271.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(115); }

				DebugLocation(437, 17);
				// SugarCpp.g:437:17: ( NEWLINE )+
				int cnt116=0;
				try { DebugEnterSubRule(116);
				while (true)
				{
					int alt116=2;
					try { DebugEnterDecision(116, false);
					int LA116_0 = input.LA(1);

					if ((LA116_0==NEWLINE))
					{
						alt116 = 1;
					}


					} finally { DebugExitDecision(116); }
					switch (alt116)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:437:17: NEWLINE
						{
						DebugLocation(437, 17);
						NEWLINE272=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2947);  
						stream_NEWLINE.Add(NEWLINE272);


						}
						break;

					default:
						if (cnt116 >= 1)
							goto loop116;

						EarlyExitException eee116 = new EarlyExitException( 116, input );
						DebugRecognitionException(eee116);
						throw eee116;
					}
					cnt116++;
				}
				loop116:
					;

				} finally { DebugExitSubRule(116); }

				DebugLocation(437, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2950);
				stmt_block273=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block273.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 437:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(437, 40);
					// SugarCpp.g:437:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(437, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(437, 52);
					// SugarCpp.g:437:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(437, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(437, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 43);
			LeaveRule("stmt_while", 43);
			LeaveRule_stmt_while();
		}
		DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:440:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 44);
		TraceIn("for_range", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal275 = default(IToken);
		IToken string_literal276 = default(IToken);
		IToken string_literal277 = default(IToken);
		IToken string_literal278 = default(IToken);
		IToken string_literal279 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident274 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal275_tree = default(CommonTree);
		CommonTree string_literal276_tree = default(CommonTree);
		CommonTree string_literal277_tree = default(CommonTree);
		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree string_literal279_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(440, 1);
		try
		{
			// SugarCpp.g:441:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:441:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(441, 4);
			PushFollow(Follow._ident_in_for_range2972);
			ident274=ident();
			PopFollow();

			stream_ident.Add(ident274.Tree);
			DebugLocation(441, 10);
			string_literal275=(IToken)Match(input,110,Follow._110_in_for_range2974);  
			stream_110.Add(string_literal275);

			DebugLocation(441, 16);
			PushFollow(Follow._expr_in_for_range2978);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(441, 22);
			// SugarCpp.g:441:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt120=3;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			switch (input.LA(1))
			{
			case 158:
				{
				alt120 = 1;
				}
				break;
			case 137:
				{
				alt120 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 95:
			case 108:
			case 141:
			case 142:
			case 144:
			case 161:
			case 162:
			case 166:
				{
				alt120 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:441:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(441, 23);
				string_literal276=(IToken)Match(input,158,Follow._158_in_for_range2981);  
				stream_158.Add(string_literal276);

				DebugLocation(441, 29);
				PushFollow(Follow._expr_in_for_range2985);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(441, 35);
				// SugarCpp.g:441:35: ( 'by' c= expr )?
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==131))
				{
					alt118 = 1;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:441:36: 'by' c= expr
					{
					DebugLocation(441, 36);
					string_literal277=(IToken)Match(input,131,Follow._131_in_for_range2988);  
					stream_131.Add(string_literal277);

					DebugLocation(441, 42);
					PushFollow(Follow._expr_in_for_range2992);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(118); }



				{
				// AST REWRITE
				// elements: b, c, ident, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 441:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(441, 53);
					// SugarCpp.g:441:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(441, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(441, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(441, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(441, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(441, 80);
					// SugarCpp.g:441:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(441, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:442:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(442, 8);
				string_literal278=(IToken)Match(input,137,Follow._137_in_for_range3021);  
				stream_137.Add(string_literal278);

				DebugLocation(442, 18);
				PushFollow(Follow._expr_in_for_range3025);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(442, 24);
				// SugarCpp.g:442:24: ( 'by' c= expr )?
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==131))
				{
					alt119 = 1;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:442:25: 'by' c= expr
					{
					DebugLocation(442, 25);
					string_literal279=(IToken)Match(input,131,Follow._131_in_for_range3028);  
					stream_131.Add(string_literal279);

					DebugLocation(442, 31);
					PushFollow(Follow._expr_in_for_range3032);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(119); }



				{
				// AST REWRITE
				// elements: c, b, a, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 442:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(442, 42);
					// SugarCpp.g:442:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(442, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(442, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(442, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(442, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(442, 74);
					// SugarCpp.g:442:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(442, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:443:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 443:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(443, 12);
					// SugarCpp.g:443:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(443, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(443, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(443, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 44);
			LeaveRule("for_range", 44);
			LeaveRule_for_range();
		}
		DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:447:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 45);
		TraceIn("for_when", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr280 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(447, 1);
		try
		{
			// SugarCpp.g:448:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:448:4: expr
			{
			DebugLocation(448, 4);
			PushFollow(Follow._expr_in_for_when3090);
			expr280=expr();
			PopFollow();

			stream_expr.Add(expr280.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 448:9: -> ^( For_Item_When expr )
			{
				DebugLocation(448, 12);
				// SugarCpp.g:448:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(448, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(448, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 45);
			LeaveRule("for_when", 45);
			LeaveRule_for_when();
		}
		DebugLocation(449, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:451:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 46);
		TraceIn("for_item", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when282 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(451, 1);
		try
		{
			// SugarCpp.g:452:2: ( for_range | for_when )
			int alt121=2;
			try { DebugEnterDecision(121, false);
			try
			{
				alt121 = dfa121.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:452:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(452, 4);
				PushFollow(Follow._for_range_in_for_item3109);
				for_range281=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range281.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:453:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(453, 4);
				PushFollow(Follow._for_when_in_for_item3114);
				for_when282=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when282.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 46);
			LeaveRule("for_item", 46);
			LeaveRule_for_item();
		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:456:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 47);
		TraceIn("stmt_for", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal283 = default(IToken);
		IToken char_literal285 = default(IToken);
		IToken NEWLINE287 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item284 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item286 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block288 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal283_tree = default(CommonTree);
		CommonTree char_literal285_tree = default(CommonTree);
		CommonTree NEWLINE287_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(457, 4);
			string_literal283=(IToken)Match(input,141,Follow._141_in_stmt_for3125);  
			stream_141.Add(string_literal283);

			DebugLocation(457, 10);
			// SugarCpp.g:457:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:457:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(457, 12);
			PushFollow(Follow._for_item_in_stmt_for3129);
			for_item284=for_item();
			PopFollow();

			stream_for_item.Add(for_item284.Tree);
			DebugLocation(457, 21);
			// SugarCpp.g:457:21: ( ',' for_item )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==95))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:457:22: ',' for_item
					{
					DebugLocation(457, 22);
					char_literal285=(IToken)Match(input,95,Follow._95_in_stmt_for3132);  
					stream_95.Add(char_literal285);

					DebugLocation(457, 26);
					PushFollow(Follow._for_item_in_stmt_for3134);
					for_item286=for_item();
					PopFollow();

					stream_for_item.Add(for_item286.Tree);

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }

			DebugLocation(457, 37);
			// SugarCpp.g:457:37: ( NEWLINE )+
			int cnt123=0;
			try { DebugEnterSubRule(123);
			while (true)
			{
				int alt123=2;
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==NEWLINE))
				{
					alt123 = 1;
				}


				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:457:37: NEWLINE
					{
					DebugLocation(457, 37);
					NEWLINE287=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3138);  
					stream_NEWLINE.Add(NEWLINE287);


					}
					break;

				default:
					if (cnt123 >= 1)
						goto loop123;

					EarlyExitException eee123 = new EarlyExitException( 123, input );
					DebugRecognitionException(eee123);
					throw eee123;
				}
				cnt123++;
			}
			loop123:
				;

			} finally { DebugExitSubRule(123); }

			DebugLocation(457, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3141);
			stmt_block288=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block288.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 457:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(457, 60);
				// SugarCpp.g:457:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(457, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(457, 71);
				// SugarCpp.g:457:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(457, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(457, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 47);
			LeaveRule("stmt_for", 47);
			LeaveRule_stmt_for();
		}
		DebugLocation(460, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:462:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 48);
		TraceIn("stmt_try", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal289 = default(IToken);
		IToken NEWLINE290 = default(IToken);
		IToken NEWLINE292 = default(IToken);
		IToken string_literal293 = default(IToken);
		IToken NEWLINE295 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc294 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal289_tree = default(CommonTree);
		CommonTree NEWLINE290_tree = default(CommonTree);
		CommonTree NEWLINE292_tree = default(CommonTree);
		CommonTree string_literal293_tree = default(CommonTree);
		CommonTree NEWLINE295_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(462, 1);
		try
		{
			// SugarCpp.g:463:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:463:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(463, 4);
			string_literal289=(IToken)Match(input,159,Follow._159_in_stmt_try3172);  
			stream_159.Add(string_literal289);

			DebugLocation(463, 10);
			// SugarCpp.g:463:10: ( NEWLINE )+
			int cnt124=0;
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==NEWLINE))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:463:10: NEWLINE
					{
					DebugLocation(463, 10);
					NEWLINE290=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3174);  
					stream_NEWLINE.Add(NEWLINE290);


					}
					break;

				default:
					if (cnt124 >= 1)
						goto loop124;

					EarlyExitException eee124 = new EarlyExitException( 124, input );
					DebugRecognitionException(eee124);
					throw eee124;
				}
				cnt124++;
			}
			loop124:
				;

			} finally { DebugExitSubRule(124); }

			DebugLocation(463, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3177);
			stmt_block291=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block291.Tree);
			DebugLocation(463, 30);
			// SugarCpp.g:463:30: ( NEWLINE )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==NEWLINE))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:463:30: NEWLINE
					{
					DebugLocation(463, 30);
					NEWLINE292=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3179);  
					stream_NEWLINE.Add(NEWLINE292);


					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }

			DebugLocation(463, 39);
			string_literal293=(IToken)Match(input,133,Follow._133_in_stmt_try3182);  
			stream_133.Add(string_literal293);

			DebugLocation(463, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3184);
			stmt_alloc294=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc294.Tree);
			DebugLocation(463, 58);
			// SugarCpp.g:463:58: ( NEWLINE )+
			int cnt126=0;
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==NEWLINE))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:463:58: NEWLINE
					{
					DebugLocation(463, 58);
					NEWLINE295=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3186);  
					stream_NEWLINE.Add(NEWLINE295);


					}
					break;

				default:
					if (cnt126 >= 1)
						goto loop126;

					EarlyExitException eee126 = new EarlyExitException( 126, input );
					DebugRecognitionException(eee126);
					throw eee126;
				}
				cnt126++;
			}
			loop126:
				;

			} finally { DebugExitSubRule(126); }

			DebugLocation(463, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3189);
			stmt_block296=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block296.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 463:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(463, 81);
				// SugarCpp.g:463:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(463, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(463, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(463, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(463, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 48);
			LeaveRule("stmt_try", 48);
			LeaveRule_stmt_try();
		}
		DebugLocation(464, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:466:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 49);
		TraceIn("switch_item", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal297 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken NEWLINE301 = default(IToken);
		IToken string_literal303 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block304 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal297_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		CommonTree NEWLINE301_tree = default(CommonTree);
		CommonTree string_literal303_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(466, 1);
		try
		{
			// SugarCpp.g:467:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:467:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(467, 4);
			string_literal297=(IToken)Match(input,164,Follow._164_in_switch_item3212);  
			stream_164.Add(string_literal297);

			DebugLocation(467, 11);
			PushFollow(Follow._expr_in_switch_item3214);
			expr298=expr();
			PopFollow();

			stream_expr.Add(expr298.Tree);
			DebugLocation(467, 16);
			// SugarCpp.g:467:16: ( ',' expr )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==95))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:467:17: ',' expr
					{
					DebugLocation(467, 17);
					char_literal299=(IToken)Match(input,95,Follow._95_in_switch_item3217);  
					stream_95.Add(char_literal299);

					DebugLocation(467, 21);
					PushFollow(Follow._expr_in_switch_item3219);
					expr300=expr();
					PopFollow();

					stream_expr.Add(expr300.Tree);

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }

			DebugLocation(467, 28);
			// SugarCpp.g:467:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==NEWLINE))
			{
				alt129 = 1;
			}
			else if ((LA129_0==157))
			{
				alt129 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 129, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:467:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(467, 30);
				// SugarCpp.g:467:30: ( NEWLINE )+
				int cnt128=0;
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==NEWLINE))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch (alt128)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:467:30: NEWLINE
						{
						DebugLocation(467, 30);
						NEWLINE301=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3225);  
						stream_NEWLINE.Add(NEWLINE301);


						}
						break;

					default:
						if (cnt128 >= 1)
							goto loop128;

						EarlyExitException eee128 = new EarlyExitException( 128, input );
						DebugRecognitionException(eee128);
						throw eee128;
					}
					cnt128++;
				}
				loop128:
					;

				} finally { DebugExitSubRule(128); }

				DebugLocation(467, 39);
				PushFollow(Follow._stmt_block_in_switch_item3228);
				stmt_block302=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block302.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 467:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(467, 53);
					// SugarCpp.g:467:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(467, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(467, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(467, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(467, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:468:30: 'then' inline_stmt_block
				{
				DebugLocation(468, 30);
				string_literal303=(IToken)Match(input,157,Follow._157_in_switch_item3270);  
				stream_157.Add(string_literal303);

				DebugLocation(468, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3272);
				inline_stmt_block304=inline_stmt_block();
				PopFollow();

				stream_inline_stmt_block.Add(inline_stmt_block304.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 468:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(468, 58);
					// SugarCpp.g:468:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(468, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(468, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(468, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(468, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 49);
			LeaveRule("switch_item", 49);
			LeaveRule_switch_item();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:472:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 50);
		TraceIn("stmt_switch", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal305 = default(IToken);
		IToken NEWLINE307 = default(IToken);
		IToken INDENT308 = default(IToken);
		IToken NEWLINE309 = default(IToken);
		IToken NEWLINE311 = default(IToken);
		IToken string_literal312 = default(IToken);
		IToken NEWLINE313 = default(IToken);
		IToken NEWLINE315 = default(IToken);
		IToken DEDENT316 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr306 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block314 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal305_tree = default(CommonTree);
		CommonTree NEWLINE307_tree = default(CommonTree);
		CommonTree INDENT308_tree = default(CommonTree);
		CommonTree NEWLINE309_tree = default(CommonTree);
		CommonTree NEWLINE311_tree = default(CommonTree);
		CommonTree string_literal312_tree = default(CommonTree);
		CommonTree NEWLINE313_tree = default(CommonTree);
		CommonTree NEWLINE315_tree = default(CommonTree);
		CommonTree DEDENT316_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(472, 1);
		try
		{
			// SugarCpp.g:473:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:473:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(473, 4);
			string_literal305=(IToken)Match(input,156,Follow._156_in_stmt_switch3308);  
			stream_156.Add(string_literal305);

			DebugLocation(473, 13);
			// SugarCpp.g:473:13: ( expr )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==IDENT||LA130_0==NUMBER||LA130_0==STRING||LA130_0==81||LA130_0==86||LA130_0==88||LA130_0==90||(LA130_0>=92 && LA130_0<=93)||(LA130_0>=96 && LA130_0<=97)||(LA130_0>=123 && LA130_0<=124)||LA130_0==147||LA130_0==149||(LA130_0>=151 && LA130_0<=152)||LA130_0==170))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:473:13: expr
				{
				DebugLocation(473, 13);
				PushFollow(Follow._expr_in_stmt_switch3310);
				expr306=expr();
				PopFollow();

				stream_expr.Add(expr306.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(473, 19);
			// SugarCpp.g:473:19: ( NEWLINE )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==NEWLINE))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:19: NEWLINE
					{
					DebugLocation(473, 19);
					NEWLINE307=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3313);  
					stream_NEWLINE.Add(NEWLINE307);


					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(473, 28);
			INDENT308=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3316);  
			stream_INDENT.Add(INDENT308);

			DebugLocation(473, 35);
			// SugarCpp.g:473:35: ( NEWLINE )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==NEWLINE))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:35: NEWLINE
					{
					DebugLocation(473, 35);
					NEWLINE309=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3318);  
					stream_NEWLINE.Add(NEWLINE309);


					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(473, 44);
			// SugarCpp.g:473:44: ( switch_item ( NEWLINE )+ )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==164))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:45: switch_item ( NEWLINE )+
					{
					DebugLocation(473, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3322);
					switch_item310=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item310.Tree);
					DebugLocation(473, 57);
					// SugarCpp.g:473:57: ( NEWLINE )+
					int cnt133=0;
					try { DebugEnterSubRule(133);
					while (true)
					{
						int alt133=2;
						try { DebugEnterDecision(133, false);
						int LA133_0 = input.LA(1);

						if ((LA133_0==NEWLINE))
						{
							alt133 = 1;
						}


						} finally { DebugExitDecision(133); }
						switch (alt133)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:473:57: NEWLINE
							{
							DebugLocation(473, 57);
							NEWLINE311=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3324);  
							stream_NEWLINE.Add(NEWLINE311);


							}
							break;

						default:
							if (cnt133 >= 1)
								goto loop133;

							EarlyExitException eee133 = new EarlyExitException( 133, input );
							DebugRecognitionException(eee133);
							throw eee133;
						}
						cnt133++;
					}
					loop133:
						;

					} finally { DebugExitSubRule(133); }


					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(473, 68);
			// SugarCpp.g:473:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			int LA137_0 = input.LA(1);

			if ((LA137_0==138))
			{
				alt137 = 1;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:473:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(473, 69);
				string_literal312=(IToken)Match(input,138,Follow._138_in_stmt_switch3330);  
				stream_138.Add(string_literal312);

				DebugLocation(473, 76);
				// SugarCpp.g:473:76: ( NEWLINE )+
				int cnt135=0;
				try { DebugEnterSubRule(135);
				while (true)
				{
					int alt135=2;
					try { DebugEnterDecision(135, false);
					int LA135_0 = input.LA(1);

					if ((LA135_0==NEWLINE))
					{
						alt135 = 1;
					}


					} finally { DebugExitDecision(135); }
					switch (alt135)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:473:76: NEWLINE
						{
						DebugLocation(473, 76);
						NEWLINE313=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3332);  
						stream_NEWLINE.Add(NEWLINE313);


						}
						break;

					default:
						if (cnt135 >= 1)
							goto loop135;

						EarlyExitException eee135 = new EarlyExitException( 135, input );
						DebugRecognitionException(eee135);
						throw eee135;
					}
					cnt135++;
				}
				loop135:
					;

				} finally { DebugExitSubRule(135); }

				DebugLocation(473, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3335);
				stmt_block314=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block314.Tree);
				DebugLocation(473, 96);
				// SugarCpp.g:473:96: ( NEWLINE )*
				try { DebugEnterSubRule(136);
				while (true)
				{
					int alt136=2;
					try { DebugEnterDecision(136, false);
					int LA136_0 = input.LA(1);

					if ((LA136_0==NEWLINE))
					{
						alt136 = 1;
					}


					} finally { DebugExitDecision(136); }
					switch ( alt136 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:473:96: NEWLINE
						{
						DebugLocation(473, 96);
						NEWLINE315=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3337);  
						stream_NEWLINE.Add(NEWLINE315);


						}
						break;

					default:
						goto loop136;
					}
				}

				loop136:
					;

				} finally { DebugExitSubRule(136); }


				}
				break;

			}
			} finally { DebugExitSubRule(137); }

			DebugLocation(473, 107);
			DEDENT316=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3342);  
			stream_DEDENT.Add(DEDENT316);



			{
			// AST REWRITE
			// elements: expr, stmt_block, switch_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 473:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(473, 117);
				// SugarCpp.g:473:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(473, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(473, 131);
				// SugarCpp.g:473:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(473, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(473, 137);
				// SugarCpp.g:473:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(473, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(473, 150);
				// SugarCpp.g:473:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(473, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 50);
			LeaveRule("stmt_switch", 50);
			LeaveRule_stmt_switch();
		}
		DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:476:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 51);
		TraceIn("ident_list", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal318 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident319 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal318_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(476, 1);
		try
		{
			// SugarCpp.g:477:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:477:4: ident ( ',' ident )*
			{
			DebugLocation(477, 4);
			PushFollow(Follow._ident_in_ident_list3368);
			ident317=ident();
			PopFollow();

			stream_ident.Add(ident317.Tree);
			DebugLocation(477, 10);
			// SugarCpp.g:477:10: ( ',' ident )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==95))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:11: ',' ident
					{
					DebugLocation(477, 11);
					char_literal318=(IToken)Match(input,95,Follow._95_in_ident_list3371);  
					stream_95.Add(char_literal318);

					DebugLocation(477, 15);
					PushFollow(Follow._ident_in_ident_list3373);
					ident319=ident();
					PopFollow();

					stream_ident.Add(ident319.Tree);

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 477:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(477, 26);
				// SugarCpp.g:477:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(477, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(477, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(477, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 51);
			LeaveRule("ident_list", 51);
			LeaveRule_ident_list();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:480:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 52);
		TraceIn("stmt_alloc", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal321 = default(IToken);
		IToken char_literal323 = default(IToken);
		IToken string_literal324 = default(IToken);
		IToken char_literal326 = default(IToken);
		IToken char_literal328 = default(IToken);
		IToken string_literal329 = default(IToken);
		IToken char_literal331 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr332 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal321_tree = default(CommonTree);
		CommonTree char_literal323_tree = default(CommonTree);
		CommonTree string_literal324_tree = default(CommonTree);
		CommonTree char_literal326_tree = default(CommonTree);
		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree string_literal329_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			{
			DebugLocation(481, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3395);
			ident_list320=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list320.Tree);
			DebugLocation(481, 15);
			// SugarCpp.g:481:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_0 = input.LA(1);

			if ((LA143_0==105))
			{
				alt143 = 1;
			}
			else if ((LA143_0==107))
			{
				alt143 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 143, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:481:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(481, 17);
				char_literal321=(IToken)Match(input,105,Follow._105_in_stmt_alloc3399);  
				stream_105.Add(char_literal321);

				DebugLocation(481, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3401);
				type_name322=type_name();
				PopFollow();

				stream_type_name.Add(type_name322.Tree);
				DebugLocation(481, 31);
				// SugarCpp.g:481:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt141=3;
				try { DebugEnterSubRule(141);
				try { DebugEnterDecision(141, false);
				switch (input.LA(1))
				{
				case 107:
				case 114:
					{
					alt141 = 1;
					}
					break;
				case 88:
					{
					alt141 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 108:
				case 141:
				case 142:
				case 144:
				case 161:
				case 162:
				case 166:
					{
					alt141 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 141, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(481, 33);
					// SugarCpp.g:481:33: ( '=' | ':=' )
					int alt139=2;
					try { DebugEnterSubRule(139);
					try { DebugEnterDecision(139, false);
					int LA139_0 = input.LA(1);

					if ((LA139_0==114))
					{
						alt139 = 1;
					}
					else if ((LA139_0==107))
					{
						alt139 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 139, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(139); }
					switch (alt139)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:481:34: '='
						{
						DebugLocation(481, 34);
						char_literal323=(IToken)Match(input,114,Follow._114_in_stmt_alloc3406);  
						stream_114.Add(char_literal323);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:481:40: ':='
						{
						DebugLocation(481, 40);
						string_literal324=(IToken)Match(input,107,Follow._107_in_stmt_alloc3410);  
						stream_107.Add(string_literal324);


						}
						break;

					}
					} finally { DebugExitSubRule(139); }

					DebugLocation(481, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3413);
					where_expr325=where_expr();
					PopFollow();

					stream_where_expr.Add(where_expr325.Tree);


					{
					// AST REWRITE
					// elements: where_expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 481:58: -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
					{
						DebugLocation(481, 61);
						// SugarCpp.g:481:61: ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(481, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(481, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(481, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(481, 101);
						// SugarCpp.g:481:101: ( where_expr )?
						if (stream_where_expr.HasNext)
						{
							DebugLocation(481, 101);
							adaptor.AddChild(root_1, stream_where_expr.NextTree());

						}
						stream_where_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:482:33: '(' ( expr_list )? ')'
					{
					DebugLocation(482, 33);
					char_literal326=(IToken)Match(input,88,Follow._88_in_stmt_alloc3461);  
					stream_88.Add(char_literal326);

					DebugLocation(482, 37);
					// SugarCpp.g:482:37: ( expr_list )?
					int alt140=2;
					try { DebugEnterSubRule(140);
					try { DebugEnterDecision(140, false);
					int LA140_0 = input.LA(1);

					if ((LA140_0==IDENT||LA140_0==NUMBER||LA140_0==STRING||LA140_0==81||LA140_0==86||LA140_0==88||LA140_0==90||(LA140_0>=92 && LA140_0<=93)||(LA140_0>=96 && LA140_0<=97)||(LA140_0>=123 && LA140_0<=124)||LA140_0==147||LA140_0==149||(LA140_0>=151 && LA140_0<=152)||LA140_0==170))
					{
						alt140 = 1;
					}
					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:482:37: expr_list
						{
						DebugLocation(482, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3463);
						expr_list327=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list327.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(140); }

					DebugLocation(482, 48);
					char_literal328=(IToken)Match(input,89,Follow._89_in_stmt_alloc3466);  
					stream_89.Add(char_literal328);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 482:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(482, 56);
						// SugarCpp.g:482:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(482, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(482, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(482, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(482, 98);
						// SugarCpp.g:482:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(482, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:483:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 483:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(483, 18);
						// SugarCpp.g:483:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(483, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(483, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(483, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(141); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:485:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(485, 8);
				string_literal329=(IToken)Match(input,107,Follow._107_in_stmt_alloc3527);  
				stream_107.Add(string_literal329);

				DebugLocation(485, 14);
				// SugarCpp.g:485:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:485:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(485, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3531);
				where_expr330=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr330.Tree);
				DebugLocation(485, 26);
				// SugarCpp.g:485:26: ( ',' where_expr )*
				try { DebugEnterSubRule(142);
				while (true)
				{
					int alt142=2;
					try { DebugEnterDecision(142, false);
					int LA142_0 = input.LA(1);

					if ((LA142_0==95))
					{
						alt142 = 1;
					}


					} finally { DebugExitDecision(142); }
					switch ( alt142 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:485:27: ',' where_expr
						{
						DebugLocation(485, 27);
						char_literal331=(IToken)Match(input,95,Follow._95_in_stmt_alloc3534);  
						stream_95.Add(char_literal331);

						DebugLocation(485, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3536);
						where_expr332=where_expr();
						PopFollow();

						stream_where_expr.Add(where_expr332.Tree);

						}
						break;

					default:
						goto loop142;
					}
				}

				loop142:
					;

				} finally { DebugExitSubRule(142); }


				}



				{
				// AST REWRITE
				// elements: 107, where_expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 485:45: -> ^( ':=' ident_list ( where_expr )* )
				{
					DebugLocation(485, 48);
					// SugarCpp.g:485:48: ^( ':=' ident_list ( where_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(485, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_107.NextNode(), root_1);

					DebugLocation(485, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(485, 66);
					// SugarCpp.g:485:66: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(485, 66);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(143); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 52);
			LeaveRule("stmt_alloc", 52);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:488:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 53);
		TraceIn("stmt_modify", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal336 = default(IToken);
		IToken string_literal338 = default(IToken);
		IToken string_literal340 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr339 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr341 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal336_tree = default(CommonTree);
		CommonTree string_literal338_tree = default(CommonTree);
		CommonTree string_literal340_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(488, 1);
		try
		{
			// SugarCpp.g:489:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:489:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(489, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3562);
			lvalue333=lvalue();
			PopFollow();

			stream_lvalue.Add(lvalue333.Tree);
			DebugLocation(489, 11);
			// SugarCpp.g:489:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt144=5;
			try { DebugEnterSubRule(144);
			try { DebugEnterDecision(144, false);
			switch (input.LA(1))
			{
			case 84:
			case 87:
			case 91:
			case 94:
			case 98:
			case 104:
			case 112:
			case 114:
			case 120:
			case 127:
			case 168:
				{
				alt144 = 1;
				}
				break;
			case 122:
				{
				alt144 = 2;
				}
				break;
			case 111:
				{
				alt144 = 3;
				}
				break;
			case 119:
				{
				alt144 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 108:
			case 141:
			case 142:
			case 144:
			case 161:
			case 162:
			case 166:
				{
				alt144 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 144, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:489:13: modify_expr_op where_expr
				{
				DebugLocation(489, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3566);
				modify_expr_op334=modify_expr_op();
				PopFollow();

				stream_modify_expr_op.Add(modify_expr_op334.Tree);
				DebugLocation(489, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3568);
				where_expr335=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr335.Tree);


				{
				// AST REWRITE
				// elements: lvalue, modify_expr_op, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 489:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(489, 42);
					// SugarCpp.g:489:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(489, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(489, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(489, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:490:13: '?=' where_expr
				{
				DebugLocation(490, 13);
				string_literal336=(IToken)Match(input,122,Follow._122_in_stmt_modify3592);  
				stream_122.Add(string_literal336);

				DebugLocation(490, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3594);
				where_expr337=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr337.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 122
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 490:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(490, 32);
					// SugarCpp.g:490:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(490, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_122.NextNode(), root_1);

					DebugLocation(490, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(490, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:491:16: '<<' where_expr
				{
				DebugLocation(491, 16);
				string_literal338=(IToken)Match(input,111,Follow._111_in_stmt_modify3621);  
				stream_111.Add(string_literal338);

				DebugLocation(491, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3623);
				where_expr339=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr339.Tree);


				{
				// AST REWRITE
				// elements: where_expr, 111, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 491:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(491, 35);
					// SugarCpp.g:491:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(491, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(491, 46);
					adaptor.AddChild(root_1, stream_111.NextNode());
					DebugLocation(491, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(491, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:492:16: '>>' where_expr
				{
				DebugLocation(492, 16);
				string_literal340=(IToken)Match(input,119,Follow._119_in_stmt_modify3652);  
				stream_119.Add(string_literal340);

				DebugLocation(492, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3654);
				where_expr341=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr341.Tree);


				{
				// AST REWRITE
				// elements: 119, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 492:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(492, 35);
					// SugarCpp.g:492:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(492, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(492, 46);
					adaptor.AddChild(root_1, stream_119.NextNode());
					DebugLocation(492, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(492, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:493:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 493:7: -> lvalue
				{
					DebugLocation(493, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 53);
			LeaveRule("stmt_modify", 53);
			LeaveRule_stmt_modify();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:496:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 54);
		TraceIn("where_item", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt342 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(496, 1);
		try
		{
			// SugarCpp.g:497:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:497:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(497, 4);
			PushFollow(Follow._stmt_in_where_item3688);
			stmt342=stmt();
			PopFollow();

			adaptor.AddChild(root_0, stmt342.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 54);
			LeaveRule("where_item", 54);
			LeaveRule_where_item();
		}
		DebugLocation(498, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:500:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 55);
		TraceIn("where_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE343 = default(IToken);
		IToken INDENT344 = default(IToken);
		IToken NEWLINE345 = default(IToken);
		IToken string_literal346 = default(IToken);
		IToken NEWLINE348 = default(IToken);
		IToken DEDENT349 = default(IToken);
		IToken NEWLINE350 = default(IToken);
		IToken INDENT351 = default(IToken);
		IToken NEWLINE352 = default(IToken);
		IToken NEWLINE354 = default(IToken);
		IToken DEDENT355 = default(IToken);
		IToken NEWLINE356 = default(IToken);
		IToken DEDENT357 = default(IToken);
		IToken NEWLINE358 = default(IToken);
		IToken INDENT359 = default(IToken);
		IToken NEWLINE360 = default(IToken);
		IToken NEWLINE362 = default(IToken);
		IToken DEDENT363 = default(IToken);
		IToken NEWLINE364 = default(IToken);
		IToken DEDENT365 = default(IToken);
		IToken string_literal366 = default(IToken);
		IToken NEWLINE367 = default(IToken);
		IToken INDENT368 = default(IToken);
		IToken NEWLINE369 = default(IToken);
		IToken NEWLINE371 = default(IToken);
		IToken DEDENT372 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item361 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item370 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE343_tree = default(CommonTree);
		CommonTree INDENT344_tree = default(CommonTree);
		CommonTree NEWLINE345_tree = default(CommonTree);
		CommonTree string_literal346_tree = default(CommonTree);
		CommonTree NEWLINE348_tree = default(CommonTree);
		CommonTree DEDENT349_tree = default(CommonTree);
		CommonTree NEWLINE350_tree = default(CommonTree);
		CommonTree INDENT351_tree = default(CommonTree);
		CommonTree NEWLINE352_tree = default(CommonTree);
		CommonTree NEWLINE354_tree = default(CommonTree);
		CommonTree DEDENT355_tree = default(CommonTree);
		CommonTree NEWLINE356_tree = default(CommonTree);
		CommonTree DEDENT357_tree = default(CommonTree);
		CommonTree NEWLINE358_tree = default(CommonTree);
		CommonTree INDENT359_tree = default(CommonTree);
		CommonTree NEWLINE360_tree = default(CommonTree);
		CommonTree NEWLINE362_tree = default(CommonTree);
		CommonTree DEDENT363_tree = default(CommonTree);
		CommonTree NEWLINE364_tree = default(CommonTree);
		CommonTree DEDENT365_tree = default(CommonTree);
		CommonTree string_literal366_tree = default(CommonTree);
		CommonTree NEWLINE367_tree = default(CommonTree);
		CommonTree INDENT368_tree = default(CommonTree);
		CommonTree NEWLINE369_tree = default(CommonTree);
		CommonTree NEWLINE371_tree = default(CommonTree);
		CommonTree DEDENT372_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(500, 1);
		try
		{
			// SugarCpp.g:501:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:501:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(501, 4);
			// SugarCpp.g:501:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:501:5: a= expr
			{
			DebugLocation(501, 6);
			PushFollow(Follow._expr_in_where_expr3702);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 501:12: -> $a
			{
				DebugLocation(501, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(501, 19);
			// SugarCpp.g:501:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt164=3;
			try { DebugEnterSubRule(164);
			try { DebugEnterDecision(164, false);
			try
			{
				alt164 = dfa164.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(164); }
			switch (alt164)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:501:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(501, 21);
				// SugarCpp.g:501:21: ( NEWLINE )+
				int cnt145=0;
				try { DebugEnterSubRule(145);
				while (true)
				{
					int alt145=2;
					try { DebugEnterDecision(145, false);
					int LA145_0 = input.LA(1);

					if ((LA145_0==NEWLINE))
					{
						alt145 = 1;
					}


					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:501:21: NEWLINE
						{
						DebugLocation(501, 21);
						NEWLINE343=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3712);  
						stream_NEWLINE.Add(NEWLINE343);


						}
						break;

					default:
						if (cnt145 >= 1)
							goto loop145;

						EarlyExitException eee145 = new EarlyExitException( 145, input );
						DebugRecognitionException(eee145);
						throw eee145;
					}
					cnt145++;
				}
				loop145:
					;

				} finally { DebugExitSubRule(145); }

				DebugLocation(501, 30);
				INDENT344=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3715);  
				stream_INDENT.Add(INDENT344);

				DebugLocation(501, 37);
				// SugarCpp.g:501:37: ( NEWLINE )*
				try { DebugEnterSubRule(146);
				while (true)
				{
					int alt146=2;
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==NEWLINE))
					{
						alt146 = 1;
					}


					} finally { DebugExitDecision(146); }
					switch ( alt146 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:501:37: NEWLINE
						{
						DebugLocation(501, 37);
						NEWLINE345=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3717);  
						stream_NEWLINE.Add(NEWLINE345);


						}
						break;

					default:
						goto loop146;
					}
				}

				loop146:
					;

				} finally { DebugExitSubRule(146); }

				DebugLocation(501, 46);
				string_literal346=(IToken)Match(input,165,Follow._165_in_where_expr3720);  
				stream_165.Add(string_literal346);

				DebugLocation(501, 54);
				// SugarCpp.g:501:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt159=2;
				try { DebugEnterSubRule(159);
				try { DebugEnterDecision(159, false);
				int LA159_0 = input.LA(1);

				if ((LA159_0==IDENT||LA159_0==81||LA159_0==86||LA159_0==88||LA159_0==90||(LA159_0>=92 && LA159_0<=93)||(LA159_0>=96 && LA159_0<=97)||LA159_0==123||LA159_0==136||(LA159_0>=140 && LA159_0<=142)||LA159_0==148||LA159_0==152||LA159_0==154||LA159_0==156||(LA159_0>=159 && LA159_0<=163)||LA159_0==166||LA159_0==170))
				{
					alt159 = 1;
				}
				else if ((LA159_0==NEWLINE))
				{
					alt159 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 159, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(159); }
				switch (alt159)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:501:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(501, 56);
					PushFollow(Follow._where_item_in_where_expr3724);
					where_item347=where_item();
					PopFollow();

					stream_where_item.Add(where_item347.Tree);
					DebugLocation(501, 67);
					// SugarCpp.g:501:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt153=2;
					try { DebugEnterSubRule(153);
					try { DebugEnterDecision(153, false);
					try
					{
						alt153 = dfa153.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:501:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(501, 69);
						// SugarCpp.g:501:69: ( NEWLINE )*
						try { DebugEnterSubRule(147);
						while (true)
						{
							int alt147=2;
							try { DebugEnterDecision(147, false);
							int LA147_0 = input.LA(1);

							if ((LA147_0==NEWLINE))
							{
								alt147 = 1;
							}


							} finally { DebugExitDecision(147); }
							switch ( alt147 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:501:69: NEWLINE
								{
								DebugLocation(501, 69);
								NEWLINE348=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3728);  
								stream_NEWLINE.Add(NEWLINE348);


								}
								break;

							default:
								goto loop147;
							}
						}

						loop147:
							;

						} finally { DebugExitSubRule(147); }

						DebugLocation(501, 78);
						DEDENT349=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3731);  
						stream_DEDENT.Add(DEDENT349);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 501:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(501, 88);
							// SugarCpp.g:501:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(501, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(501, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(501, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:502:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(502, 21);
						// SugarCpp.g:502:21: ( NEWLINE )+
						int cnt148=0;
						try { DebugEnterSubRule(148);
						while (true)
						{
							int alt148=2;
							try { DebugEnterDecision(148, false);
							int LA148_0 = input.LA(1);

							if ((LA148_0==NEWLINE))
							{
								alt148 = 1;
							}


							} finally { DebugExitDecision(148); }
							switch (alt148)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:502:21: NEWLINE
								{
								DebugLocation(502, 21);
								NEWLINE350=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3764);  
								stream_NEWLINE.Add(NEWLINE350);


								}
								break;

							default:
								if (cnt148 >= 1)
									goto loop148;

								EarlyExitException eee148 = new EarlyExitException( 148, input );
								DebugRecognitionException(eee148);
								throw eee148;
							}
							cnt148++;
						}
						loop148:
							;

						} finally { DebugExitSubRule(148); }

						DebugLocation(502, 30);
						INDENT351=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3767);  
						stream_INDENT.Add(INDENT351);

						DebugLocation(502, 37);
						// SugarCpp.g:502:37: ( NEWLINE )*
						try { DebugEnterSubRule(149);
						while (true)
						{
							int alt149=2;
							try { DebugEnterDecision(149, false);
							int LA149_0 = input.LA(1);

							if ((LA149_0==NEWLINE))
							{
								alt149 = 1;
							}


							} finally { DebugExitDecision(149); }
							switch ( alt149 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:502:37: NEWLINE
								{
								DebugLocation(502, 37);
								NEWLINE352=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3769);  
								stream_NEWLINE.Add(NEWLINE352);


								}
								break;

							default:
								goto loop149;
							}
						}

						loop149:
							;

						} finally { DebugExitSubRule(149); }

						DebugLocation(502, 46);
						// SugarCpp.g:502:46: ( where_item ( NEWLINE )+ )+
						int cnt151=0;
						try { DebugEnterSubRule(151);
						while (true)
						{
							int alt151=2;
							try { DebugEnterDecision(151, false);
							int LA151_0 = input.LA(1);

							if ((LA151_0==IDENT||LA151_0==81||LA151_0==86||LA151_0==88||LA151_0==90||(LA151_0>=92 && LA151_0<=93)||(LA151_0>=96 && LA151_0<=97)||LA151_0==123||LA151_0==136||(LA151_0>=140 && LA151_0<=142)||LA151_0==148||LA151_0==152||LA151_0==154||LA151_0==156||(LA151_0>=159 && LA151_0<=163)||LA151_0==166||LA151_0==170))
							{
								alt151 = 1;
							}


							} finally { DebugExitDecision(151); }
							switch (alt151)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:502:47: where_item ( NEWLINE )+
								{
								DebugLocation(502, 47);
								PushFollow(Follow._where_item_in_where_expr3773);
								where_item353=where_item();
								PopFollow();

								stream_where_item.Add(where_item353.Tree);
								DebugLocation(502, 58);
								// SugarCpp.g:502:58: ( NEWLINE )+
								int cnt150=0;
								try { DebugEnterSubRule(150);
								while (true)
								{
									int alt150=2;
									try { DebugEnterDecision(150, false);
									int LA150_0 = input.LA(1);

									if ((LA150_0==NEWLINE))
									{
										alt150 = 1;
									}


									} finally { DebugExitDecision(150); }
									switch (alt150)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:502:58: NEWLINE
										{
										DebugLocation(502, 58);
										NEWLINE354=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3775);  
										stream_NEWLINE.Add(NEWLINE354);


										}
										break;

									default:
										if (cnt150 >= 1)
											goto loop150;

										EarlyExitException eee150 = new EarlyExitException( 150, input );
										DebugRecognitionException(eee150);
										throw eee150;
									}
									cnt150++;
								}
								loop150:
									;

								} finally { DebugExitSubRule(150); }


								}
								break;

							default:
								if (cnt151 >= 1)
									goto loop151;

								EarlyExitException eee151 = new EarlyExitException( 151, input );
								DebugRecognitionException(eee151);
								throw eee151;
							}
							cnt151++;
						}
						loop151:
							;

						} finally { DebugExitSubRule(151); }

						DebugLocation(502, 69);
						DEDENT355=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3780);  
						stream_DEDENT.Add(DEDENT355);

						DebugLocation(502, 76);
						// SugarCpp.g:502:76: ( NEWLINE )*
						try { DebugEnterSubRule(152);
						while (true)
						{
							int alt152=2;
							try { DebugEnterDecision(152, false);
							int LA152_0 = input.LA(1);

							if ((LA152_0==NEWLINE))
							{
								alt152 = 1;
							}


							} finally { DebugExitDecision(152); }
							switch ( alt152 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:502:76: NEWLINE
								{
								DebugLocation(502, 76);
								NEWLINE356=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3782);  
								stream_NEWLINE.Add(NEWLINE356);


								}
								break;

							default:
								goto loop152;
							}
						}

						loop152:
							;

						} finally { DebugExitSubRule(152); }

						DebugLocation(502, 85);
						DEDENT357=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3785);  
						stream_DEDENT.Add(DEDENT357);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 502:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(502, 95);
							// SugarCpp.g:502:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(502, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(502, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(502, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(502, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(153); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:504:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(504, 17);
					// SugarCpp.g:504:17: ( NEWLINE )+
					int cnt154=0;
					try { DebugEnterSubRule(154);
					while (true)
					{
						int alt154=2;
						try { DebugEnterDecision(154, false);
						int LA154_0 = input.LA(1);

						if ((LA154_0==NEWLINE))
						{
							alt154 = 1;
						}


						} finally { DebugExitDecision(154); }
						switch (alt154)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:504:17: NEWLINE
							{
							DebugLocation(504, 17);
							NEWLINE358=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3835);  
							stream_NEWLINE.Add(NEWLINE358);


							}
							break;

						default:
							if (cnt154 >= 1)
								goto loop154;

							EarlyExitException eee154 = new EarlyExitException( 154, input );
							DebugRecognitionException(eee154);
							throw eee154;
						}
						cnt154++;
					}
					loop154:
						;

					} finally { DebugExitSubRule(154); }

					DebugLocation(504, 26);
					INDENT359=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3838);  
					stream_INDENT.Add(INDENT359);

					DebugLocation(504, 33);
					// SugarCpp.g:504:33: ( NEWLINE )*
					try { DebugEnterSubRule(155);
					while (true)
					{
						int alt155=2;
						try { DebugEnterDecision(155, false);
						int LA155_0 = input.LA(1);

						if ((LA155_0==NEWLINE))
						{
							alt155 = 1;
						}


						} finally { DebugExitDecision(155); }
						switch ( alt155 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:504:33: NEWLINE
							{
							DebugLocation(504, 33);
							NEWLINE360=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3840);  
							stream_NEWLINE.Add(NEWLINE360);


							}
							break;

						default:
							goto loop155;
						}
					}

					loop155:
						;

					} finally { DebugExitSubRule(155); }

					DebugLocation(504, 42);
					// SugarCpp.g:504:42: ( where_item ( NEWLINE )+ )+
					int cnt157=0;
					try { DebugEnterSubRule(157);
					while (true)
					{
						int alt157=2;
						try { DebugEnterDecision(157, false);
						int LA157_0 = input.LA(1);

						if ((LA157_0==IDENT||LA157_0==81||LA157_0==86||LA157_0==88||LA157_0==90||(LA157_0>=92 && LA157_0<=93)||(LA157_0>=96 && LA157_0<=97)||LA157_0==123||LA157_0==136||(LA157_0>=140 && LA157_0<=142)||LA157_0==148||LA157_0==152||LA157_0==154||LA157_0==156||(LA157_0>=159 && LA157_0<=163)||LA157_0==166||LA157_0==170))
						{
							alt157 = 1;
						}


						} finally { DebugExitDecision(157); }
						switch (alt157)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:504:43: where_item ( NEWLINE )+
							{
							DebugLocation(504, 43);
							PushFollow(Follow._where_item_in_where_expr3844);
							where_item361=where_item();
							PopFollow();

							stream_where_item.Add(where_item361.Tree);
							DebugLocation(504, 54);
							// SugarCpp.g:504:54: ( NEWLINE )+
							int cnt156=0;
							try { DebugEnterSubRule(156);
							while (true)
							{
								int alt156=2;
								try { DebugEnterDecision(156, false);
								int LA156_0 = input.LA(1);

								if ((LA156_0==NEWLINE))
								{
									alt156 = 1;
								}


								} finally { DebugExitDecision(156); }
								switch (alt156)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:504:54: NEWLINE
									{
									DebugLocation(504, 54);
									NEWLINE362=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3846);  
									stream_NEWLINE.Add(NEWLINE362);


									}
									break;

								default:
									if (cnt156 >= 1)
										goto loop156;

									EarlyExitException eee156 = new EarlyExitException( 156, input );
									DebugRecognitionException(eee156);
									throw eee156;
								}
								cnt156++;
							}
							loop156:
								;

							} finally { DebugExitSubRule(156); }


							}
							break;

						default:
							if (cnt157 >= 1)
								goto loop157;

							EarlyExitException eee157 = new EarlyExitException( 157, input );
							DebugRecognitionException(eee157);
							throw eee157;
						}
						cnt157++;
					}
					loop157:
						;

					} finally { DebugExitSubRule(157); }

					DebugLocation(504, 65);
					DEDENT363=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3851);  
					stream_DEDENT.Add(DEDENT363);

					DebugLocation(504, 72);
					// SugarCpp.g:504:72: ( NEWLINE )*
					try { DebugEnterSubRule(158);
					while (true)
					{
						int alt158=2;
						try { DebugEnterDecision(158, false);
						int LA158_0 = input.LA(1);

						if ((LA158_0==NEWLINE))
						{
							alt158 = 1;
						}


						} finally { DebugExitDecision(158); }
						switch ( alt158 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:504:72: NEWLINE
							{
							DebugLocation(504, 72);
							NEWLINE364=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3853);  
							stream_NEWLINE.Add(NEWLINE364);


							}
							break;

						default:
							goto loop158;
						}
					}

					loop158:
						;

					} finally { DebugExitSubRule(158); }

					DebugLocation(504, 81);
					DEDENT365=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3856);  
					stream_DEDENT.Add(DEDENT365);



					{
					// AST REWRITE
					// elements: where_item, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 504:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(504, 91);
						// SugarCpp.g:504:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(504, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(504, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(504, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(504, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(159); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:506:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(506, 9);
				string_literal366=(IToken)Match(input,165,Follow._165_in_where_expr3894);  
				stream_165.Add(string_literal366);

				DebugLocation(506, 17);
				// SugarCpp.g:506:17: ( NEWLINE )+
				int cnt160=0;
				try { DebugEnterSubRule(160);
				while (true)
				{
					int alt160=2;
					try { DebugEnterDecision(160, false);
					int LA160_0 = input.LA(1);

					if ((LA160_0==NEWLINE))
					{
						alt160 = 1;
					}


					} finally { DebugExitDecision(160); }
					switch (alt160)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:17: NEWLINE
						{
						DebugLocation(506, 17);
						NEWLINE367=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3896);  
						stream_NEWLINE.Add(NEWLINE367);


						}
						break;

					default:
						if (cnt160 >= 1)
							goto loop160;

						EarlyExitException eee160 = new EarlyExitException( 160, input );
						DebugRecognitionException(eee160);
						throw eee160;
					}
					cnt160++;
				}
				loop160:
					;

				} finally { DebugExitSubRule(160); }

				DebugLocation(506, 26);
				INDENT368=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3899);  
				stream_INDENT.Add(INDENT368);

				DebugLocation(506, 33);
				// SugarCpp.g:506:33: ( NEWLINE )*
				try { DebugEnterSubRule(161);
				while (true)
				{
					int alt161=2;
					try { DebugEnterDecision(161, false);
					int LA161_0 = input.LA(1);

					if ((LA161_0==NEWLINE))
					{
						alt161 = 1;
					}


					} finally { DebugExitDecision(161); }
					switch ( alt161 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:33: NEWLINE
						{
						DebugLocation(506, 33);
						NEWLINE369=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3901);  
						stream_NEWLINE.Add(NEWLINE369);


						}
						break;

					default:
						goto loop161;
					}
				}

				loop161:
					;

				} finally { DebugExitSubRule(161); }

				DebugLocation(506, 42);
				// SugarCpp.g:506:42: ( where_item ( NEWLINE )+ )+
				int cnt163=0;
				try { DebugEnterSubRule(163);
				while (true)
				{
					int alt163=2;
					try { DebugEnterDecision(163, false);
					int LA163_0 = input.LA(1);

					if ((LA163_0==IDENT||LA163_0==81||LA163_0==86||LA163_0==88||LA163_0==90||(LA163_0>=92 && LA163_0<=93)||(LA163_0>=96 && LA163_0<=97)||LA163_0==123||LA163_0==136||(LA163_0>=140 && LA163_0<=142)||LA163_0==148||LA163_0==152||LA163_0==154||LA163_0==156||(LA163_0>=159 && LA163_0<=163)||LA163_0==166||LA163_0==170))
					{
						alt163 = 1;
					}


					} finally { DebugExitDecision(163); }
					switch (alt163)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:43: where_item ( NEWLINE )+
						{
						DebugLocation(506, 43);
						PushFollow(Follow._where_item_in_where_expr3905);
						where_item370=where_item();
						PopFollow();

						stream_where_item.Add(where_item370.Tree);
						DebugLocation(506, 54);
						// SugarCpp.g:506:54: ( NEWLINE )+
						int cnt162=0;
						try { DebugEnterSubRule(162);
						while (true)
						{
							int alt162=2;
							try { DebugEnterDecision(162, false);
							int LA162_0 = input.LA(1);

							if ((LA162_0==NEWLINE))
							{
								alt162 = 1;
							}


							} finally { DebugExitDecision(162); }
							switch (alt162)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:506:54: NEWLINE
								{
								DebugLocation(506, 54);
								NEWLINE371=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3907);  
								stream_NEWLINE.Add(NEWLINE371);


								}
								break;

							default:
								if (cnt162 >= 1)
									goto loop162;

								EarlyExitException eee162 = new EarlyExitException( 162, input );
								DebugRecognitionException(eee162);
								throw eee162;
							}
							cnt162++;
						}
						loop162:
							;

						} finally { DebugExitSubRule(162); }


						}
						break;

					default:
						if (cnt163 >= 1)
							goto loop163;

						EarlyExitException eee163 = new EarlyExitException( 163, input );
						DebugRecognitionException(eee163);
						throw eee163;
					}
					cnt163++;
				}
				loop163:
					;

				} finally { DebugExitSubRule(163); }

				DebugLocation(506, 65);
				DEDENT372=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3912);  
				stream_DEDENT.Add(DEDENT372);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 506:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(506, 75);
					// SugarCpp.g:506:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(506, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(506, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(506, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(506, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:507:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 507:15: -> expr
				{
					DebugLocation(507, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(164); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 55);
			LeaveRule("where_expr", 55);
			LeaveRule_where_expr();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:511:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 56);
		TraceIn("let_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal373 = default(IToken);
		IToken string_literal375 = default(IToken);
		IToken NEWLINE377 = default(IToken);
		IToken INDENT378 = default(IToken);
		IToken NEWLINE379 = default(IToken);
		IToken NEWLINE381 = default(IToken);
		IToken DEDENT382 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken INDENT385 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken NEWLINE388 = default(IToken);
		IToken string_literal389 = default(IToken);
		IToken NEWLINE391 = default(IToken);
		IToken DEDENT392 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item374 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr376 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr380 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item387 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr390 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal373_tree = default(CommonTree);
		CommonTree string_literal375_tree = default(CommonTree);
		CommonTree NEWLINE377_tree = default(CommonTree);
		CommonTree INDENT378_tree = default(CommonTree);
		CommonTree NEWLINE379_tree = default(CommonTree);
		CommonTree NEWLINE381_tree = default(CommonTree);
		CommonTree DEDENT382_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree INDENT385_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree NEWLINE388_tree = default(CommonTree);
		CommonTree string_literal389_tree = default(CommonTree);
		CommonTree NEWLINE391_tree = default(CommonTree);
		CommonTree DEDENT392_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(512, 4);
			string_literal373=(IToken)Match(input,147,Follow._147_in_let_expr3970);  
			stream_147.Add(string_literal373);

			DebugLocation(512, 10);
			PushFollow(Follow._where_item_in_let_expr3972);
			where_item374=where_item();
			PopFollow();

			stream_where_item.Add(where_item374.Tree);
			DebugLocation(512, 21);
			// SugarCpp.g:512:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt175=2;
			try { DebugEnterSubRule(175);
			try { DebugEnterDecision(175, false);
			int LA175_0 = input.LA(1);

			if ((LA175_0==144))
			{
				alt175 = 1;
			}
			else if ((LA175_0==NEWLINE))
			{
				alt175 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 175, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(175); }
			switch (alt175)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:512:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(512, 23);
				string_literal375=(IToken)Match(input,144,Follow._144_in_let_expr3976);  
				stream_144.Add(string_literal375);

				DebugLocation(512, 28);
				// SugarCpp.g:512:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt169=2;
				try { DebugEnterSubRule(169);
				try { DebugEnterDecision(169, false);
				int LA169_0 = input.LA(1);

				if ((LA169_0==IDENT||LA169_0==NUMBER||LA169_0==STRING||LA169_0==81||LA169_0==86||LA169_0==88||LA169_0==90||(LA169_0>=92 && LA169_0<=93)||(LA169_0>=96 && LA169_0<=97)||(LA169_0>=123 && LA169_0<=124)||LA169_0==147||LA169_0==149||(LA169_0>=151 && LA169_0<=152)||LA169_0==170))
				{
					alt169 = 1;
				}
				else if ((LA169_0==NEWLINE))
				{
					alt169 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 169, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:30: expr
					{
					DebugLocation(512, 30);
					PushFollow(Follow._expr_in_let_expr3980);
					expr376=expr();
					PopFollow();

					stream_expr.Add(expr376.Tree);


					{
					// AST REWRITE
					// elements: expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 512:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(512, 38);
						// SugarCpp.g:512:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(512, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(512, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(512, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(512, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:513:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(513, 12);
					// SugarCpp.g:513:12: ( NEWLINE )+
					int cnt165=0;
					try { DebugEnterSubRule(165);
					while (true)
					{
						int alt165=2;
						try { DebugEnterDecision(165, false);
						int LA165_0 = input.LA(1);

						if ((LA165_0==NEWLINE))
						{
							alt165 = 1;
						}


						} finally { DebugExitDecision(165); }
						switch (alt165)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:513:12: NEWLINE
							{
							DebugLocation(513, 12);
							NEWLINE377=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4004);  
							stream_NEWLINE.Add(NEWLINE377);


							}
							break;

						default:
							if (cnt165 >= 1)
								goto loop165;

							EarlyExitException eee165 = new EarlyExitException( 165, input );
							DebugRecognitionException(eee165);
							throw eee165;
						}
						cnt165++;
					}
					loop165:
						;

					} finally { DebugExitSubRule(165); }

					DebugLocation(513, 21);
					// SugarCpp.g:513:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt168=2;
					try { DebugEnterSubRule(168);
					try { DebugEnterDecision(168, false);
					int LA168_0 = input.LA(1);

					if ((LA168_0==INDENT))
					{
						alt168 = 1;
					}
					else if ((LA168_0==IDENT||LA168_0==NUMBER||LA168_0==STRING||LA168_0==81||LA168_0==86||LA168_0==88||LA168_0==90||(LA168_0>=92 && LA168_0<=93)||(LA168_0>=96 && LA168_0<=97)||(LA168_0>=123 && LA168_0<=124)||LA168_0==147||LA168_0==149||(LA168_0>=151 && LA168_0<=152)||LA168_0==170))
					{
						alt168 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(168); }
					switch (alt168)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:513:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(513, 23);
						INDENT378=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4009);  
						stream_INDENT.Add(INDENT378);

						DebugLocation(513, 30);
						// SugarCpp.g:513:30: ( NEWLINE )*
						try { DebugEnterSubRule(166);
						while (true)
						{
							int alt166=2;
							try { DebugEnterDecision(166, false);
							int LA166_0 = input.LA(1);

							if ((LA166_0==NEWLINE))
							{
								alt166 = 1;
							}


							} finally { DebugExitDecision(166); }
							switch ( alt166 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:513:30: NEWLINE
								{
								DebugLocation(513, 30);
								NEWLINE379=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4011);  
								stream_NEWLINE.Add(NEWLINE379);


								}
								break;

							default:
								goto loop166;
							}
						}

						loop166:
							;

						} finally { DebugExitSubRule(166); }

						DebugLocation(513, 39);
						PushFollow(Follow._expr_in_let_expr4014);
						expr380=expr();
						PopFollow();

						stream_expr.Add(expr380.Tree);
						DebugLocation(513, 44);
						// SugarCpp.g:513:44: ( NEWLINE )+
						int cnt167=0;
						try { DebugEnterSubRule(167);
						while (true)
						{
							int alt167=2;
							try { DebugEnterDecision(167, false);
							int LA167_0 = input.LA(1);

							if ((LA167_0==NEWLINE))
							{
								alt167 = 1;
							}


							} finally { DebugExitDecision(167); }
							switch (alt167)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:513:44: NEWLINE
								{
								DebugLocation(513, 44);
								NEWLINE381=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4016);  
								stream_NEWLINE.Add(NEWLINE381);


								}
								break;

							default:
								if (cnt167 >= 1)
									goto loop167;

								EarlyExitException eee167 = new EarlyExitException( 167, input );
								DebugRecognitionException(eee167);
								throw eee167;
							}
							cnt167++;
						}
						loop167:
							;

						} finally { DebugExitSubRule(167); }

						DebugLocation(513, 53);
						DEDENT382=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4019);  
						stream_DEDENT.Add(DEDENT382);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 513:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(513, 63);
							// SugarCpp.g:513:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(513, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(513, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(513, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(513, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:514:14: expr
						{
						DebugLocation(514, 14);
						PushFollow(Follow._expr_in_let_expr4045);
						expr383=expr();
						PopFollow();

						stream_expr.Add(expr383.Tree);


						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 514:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(514, 22);
							// SugarCpp.g:514:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(514, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(514, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(514, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(514, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(168); }


					}
					break;

				}
				} finally { DebugExitSubRule(169); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:517:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(517, 11);
				// SugarCpp.g:517:11: ( NEWLINE )+
				int cnt170=0;
				try { DebugEnterSubRule(170);
				while (true)
				{
					int alt170=2;
					try { DebugEnterDecision(170, false);
					int LA170_0 = input.LA(1);

					if ((LA170_0==NEWLINE))
					{
						alt170 = 1;
					}


					} finally { DebugExitDecision(170); }
					switch (alt170)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:11: NEWLINE
						{
						DebugLocation(517, 11);
						NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4092);  
						stream_NEWLINE.Add(NEWLINE384);


						}
						break;

					default:
						if (cnt170 >= 1)
							goto loop170;

						EarlyExitException eee170 = new EarlyExitException( 170, input );
						DebugRecognitionException(eee170);
						throw eee170;
					}
					cnt170++;
				}
				loop170:
					;

				} finally { DebugExitSubRule(170); }

				DebugLocation(517, 20);
				INDENT385=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4095);  
				stream_INDENT.Add(INDENT385);

				DebugLocation(517, 27);
				// SugarCpp.g:517:27: ( NEWLINE )*
				try { DebugEnterSubRule(171);
				while (true)
				{
					int alt171=2;
					try { DebugEnterDecision(171, false);
					int LA171_0 = input.LA(1);

					if ((LA171_0==NEWLINE))
					{
						alt171 = 1;
					}


					} finally { DebugExitDecision(171); }
					switch ( alt171 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:27: NEWLINE
						{
						DebugLocation(517, 27);
						NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4097);  
						stream_NEWLINE.Add(NEWLINE386);


						}
						break;

					default:
						goto loop171;
					}
				}

				loop171:
					;

				} finally { DebugExitSubRule(171); }

				DebugLocation(517, 36);
				// SugarCpp.g:517:36: ( where_item ( NEWLINE )+ )+
				int cnt173=0;
				try { DebugEnterSubRule(173);
				while (true)
				{
					int alt173=2;
					try { DebugEnterDecision(173, false);
					int LA173_0 = input.LA(1);

					if ((LA173_0==IDENT||LA173_0==81||LA173_0==86||LA173_0==88||LA173_0==90||(LA173_0>=92 && LA173_0<=93)||(LA173_0>=96 && LA173_0<=97)||LA173_0==123||LA173_0==136||(LA173_0>=140 && LA173_0<=142)||LA173_0==148||LA173_0==152||LA173_0==154||LA173_0==156||(LA173_0>=159 && LA173_0<=163)||LA173_0==166||LA173_0==170))
					{
						alt173 = 1;
					}


					} finally { DebugExitDecision(173); }
					switch (alt173)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:37: where_item ( NEWLINE )+
						{
						DebugLocation(517, 37);
						PushFollow(Follow._where_item_in_let_expr4101);
						where_item387=where_item();
						PopFollow();

						stream_where_item.Add(where_item387.Tree);
						DebugLocation(517, 48);
						// SugarCpp.g:517:48: ( NEWLINE )+
						int cnt172=0;
						try { DebugEnterSubRule(172);
						while (true)
						{
							int alt172=2;
							try { DebugEnterDecision(172, false);
							int LA172_0 = input.LA(1);

							if ((LA172_0==NEWLINE))
							{
								alt172 = 1;
							}


							} finally { DebugExitDecision(172); }
							switch (alt172)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:517:48: NEWLINE
								{
								DebugLocation(517, 48);
								NEWLINE388=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4103);  
								stream_NEWLINE.Add(NEWLINE388);


								}
								break;

							default:
								if (cnt172 >= 1)
									goto loop172;

								EarlyExitException eee172 = new EarlyExitException( 172, input );
								DebugRecognitionException(eee172);
								throw eee172;
							}
							cnt172++;
						}
						loop172:
							;

						} finally { DebugExitSubRule(172); }


						}
						break;

					default:
						if (cnt173 >= 1)
							goto loop173;

						EarlyExitException eee173 = new EarlyExitException( 173, input );
						DebugRecognitionException(eee173);
						throw eee173;
					}
					cnt173++;
				}
				loop173:
					;

				} finally { DebugExitSubRule(173); }

				DebugLocation(517, 59);
				string_literal389=(IToken)Match(input,144,Follow._144_in_let_expr4108);  
				stream_144.Add(string_literal389);

				DebugLocation(517, 64);
				PushFollow(Follow._expr_in_let_expr4110);
				expr390=expr();
				PopFollow();

				stream_expr.Add(expr390.Tree);
				DebugLocation(517, 69);
				// SugarCpp.g:517:69: ( NEWLINE )+
				int cnt174=0;
				try { DebugEnterSubRule(174);
				while (true)
				{
					int alt174=2;
					try { DebugEnterDecision(174, false);
					int LA174_0 = input.LA(1);

					if ((LA174_0==NEWLINE))
					{
						alt174 = 1;
					}


					} finally { DebugExitDecision(174); }
					switch (alt174)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:69: NEWLINE
						{
						DebugLocation(517, 69);
						NEWLINE391=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4112);  
						stream_NEWLINE.Add(NEWLINE391);


						}
						break;

					default:
						if (cnt174 >= 1)
							goto loop174;

						EarlyExitException eee174 = new EarlyExitException( 174, input );
						DebugRecognitionException(eee174);
						throw eee174;
					}
					cnt174++;
				}
				loop174:
					;

				} finally { DebugExitSubRule(174); }

				DebugLocation(517, 78);
				DEDENT392=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4115);  
				stream_DEDENT.Add(DEDENT392);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 517:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(517, 88);
					// SugarCpp.g:517:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(517, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(517, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(517, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(517, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(175); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 56);
			LeaveRule("let_expr", 56);
			LeaveRule_let_expr();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:521:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 57);
		TraceIn("match_item", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal393 = default(IToken);
		IToken string_literal395 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr394 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr396 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal393_tree = default(CommonTree);
		CommonTree string_literal395_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:522:4: '|' expr '=>' where_expr
			{
			DebugLocation(522, 4);
			char_literal393=(IToken)Match(input,167,Follow._167_in_match_item4147);  
			stream_167.Add(char_literal393);

			DebugLocation(522, 8);
			PushFollow(Follow._expr_in_match_item4149);
			expr394=expr();
			PopFollow();

			stream_expr.Add(expr394.Tree);
			DebugLocation(522, 13);
			string_literal395=(IToken)Match(input,116,Follow._116_in_match_item4151);  
			stream_116.Add(string_literal395);

			DebugLocation(522, 18);
			PushFollow(Follow._where_expr_in_match_item4153);
			where_expr396=where_expr();
			PopFollow();

			stream_where_expr.Add(where_expr396.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 522:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(522, 32);
				// SugarCpp.g:522:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(522, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(522, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(522, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 57);
			LeaveRule("match_item", 57);
			LeaveRule_match_item();
		}
		DebugLocation(523, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:525:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 58);
		TraceIn("match_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal397 = default(IToken);
		IToken NEWLINE399 = default(IToken);
		IToken INDENT400 = default(IToken);
		IToken NEWLINE401 = default(IToken);
		IToken NEWLINE403 = default(IToken);
		IToken DEDENT404 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr398 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item402 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal397_tree = default(CommonTree);
		CommonTree NEWLINE399_tree = default(CommonTree);
		CommonTree INDENT400_tree = default(CommonTree);
		CommonTree NEWLINE401_tree = default(CommonTree);
		CommonTree NEWLINE403_tree = default(CommonTree);
		CommonTree DEDENT404_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(525, 1);
		try
		{
			// SugarCpp.g:526:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:526:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(526, 4);
			string_literal397=(IToken)Match(input,149,Follow._149_in_match_expr4174);  
			stream_149.Add(string_literal397);

			DebugLocation(526, 12);
			// SugarCpp.g:526:12: ( expr )?
			int alt176=2;
			try { DebugEnterSubRule(176);
			try { DebugEnterDecision(176, false);
			int LA176_0 = input.LA(1);

			if ((LA176_0==IDENT||LA176_0==NUMBER||LA176_0==STRING||LA176_0==81||LA176_0==86||LA176_0==88||LA176_0==90||(LA176_0>=92 && LA176_0<=93)||(LA176_0>=96 && LA176_0<=97)||(LA176_0>=123 && LA176_0<=124)||LA176_0==147||LA176_0==149||(LA176_0>=151 && LA176_0<=152)||LA176_0==170))
			{
				alt176 = 1;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:526:12: expr
				{
				DebugLocation(526, 12);
				PushFollow(Follow._expr_in_match_expr4176);
				expr398=expr();
				PopFollow();

				stream_expr.Add(expr398.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(176); }

			DebugLocation(526, 18);
			// SugarCpp.g:526:18: ( NEWLINE )+
			int cnt177=0;
			try { DebugEnterSubRule(177);
			while (true)
			{
				int alt177=2;
				try { DebugEnterDecision(177, false);
				int LA177_0 = input.LA(1);

				if ((LA177_0==NEWLINE))
				{
					alt177 = 1;
				}


				} finally { DebugExitDecision(177); }
				switch (alt177)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:526:18: NEWLINE
					{
					DebugLocation(526, 18);
					NEWLINE399=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4179);  
					stream_NEWLINE.Add(NEWLINE399);


					}
					break;

				default:
					if (cnt177 >= 1)
						goto loop177;

					EarlyExitException eee177 = new EarlyExitException( 177, input );
					DebugRecognitionException(eee177);
					throw eee177;
				}
				cnt177++;
			}
			loop177:
				;

			} finally { DebugExitSubRule(177); }

			DebugLocation(526, 27);
			INDENT400=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4182);  
			stream_INDENT.Add(INDENT400);

			DebugLocation(526, 34);
			// SugarCpp.g:526:34: ( NEWLINE )*
			try { DebugEnterSubRule(178);
			while (true)
			{
				int alt178=2;
				try { DebugEnterDecision(178, false);
				int LA178_0 = input.LA(1);

				if ((LA178_0==NEWLINE))
				{
					alt178 = 1;
				}


				} finally { DebugExitDecision(178); }
				switch ( alt178 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:526:34: NEWLINE
					{
					DebugLocation(526, 34);
					NEWLINE401=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4184);  
					stream_NEWLINE.Add(NEWLINE401);


					}
					break;

				default:
					goto loop178;
				}
			}

			loop178:
				;

			} finally { DebugExitSubRule(178); }

			DebugLocation(526, 43);
			// SugarCpp.g:526:43: ( match_item ( NEWLINE )+ )+
			int cnt180=0;
			try { DebugEnterSubRule(180);
			while (true)
			{
				int alt180=2;
				try { DebugEnterDecision(180, false);
				int LA180_0 = input.LA(1);

				if ((LA180_0==167))
				{
					alt180 = 1;
				}


				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:526:44: match_item ( NEWLINE )+
					{
					DebugLocation(526, 44);
					PushFollow(Follow._match_item_in_match_expr4188);
					match_item402=match_item();
					PopFollow();

					stream_match_item.Add(match_item402.Tree);
					DebugLocation(526, 55);
					// SugarCpp.g:526:55: ( NEWLINE )+
					int cnt179=0;
					try { DebugEnterSubRule(179);
					while (true)
					{
						int alt179=2;
						try { DebugEnterDecision(179, false);
						int LA179_0 = input.LA(1);

						if ((LA179_0==NEWLINE))
						{
							alt179 = 1;
						}


						} finally { DebugExitDecision(179); }
						switch (alt179)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:526:55: NEWLINE
							{
							DebugLocation(526, 55);
							NEWLINE403=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4190);  
							stream_NEWLINE.Add(NEWLINE403);


							}
							break;

						default:
							if (cnt179 >= 1)
								goto loop179;

							EarlyExitException eee179 = new EarlyExitException( 179, input );
							DebugRecognitionException(eee179);
							throw eee179;
						}
						cnt179++;
					}
					loop179:
						;

					} finally { DebugExitSubRule(179); }


					}
					break;

				default:
					if (cnt180 >= 1)
						goto loop180;

					EarlyExitException eee180 = new EarlyExitException( 180, input );
					DebugRecognitionException(eee180);
					throw eee180;
				}
				cnt180++;
			}
			loop180:
				;

			} finally { DebugExitSubRule(180); }

			DebugLocation(526, 66);
			DEDENT404=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4195);  
			stream_DEDENT.Add(DEDENT404);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 526:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(526, 76);
				// SugarCpp.g:526:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(526, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(526, 89);
				// SugarCpp.g:526:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(526, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(526, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(526, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 58);
			LeaveRule("match_expr", 58);
			LeaveRule_match_expr();
		}
		DebugLocation(527, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:529:1: expr : ( list_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 59);
		TraceIn("expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr405 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr406 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr407 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(529, 1);
		try
		{
			// SugarCpp.g:530:2: ( list_expr | match_expr | let_expr )
			int alt181=3;
			try { DebugEnterDecision(181, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 81:
			case 86:
			case 88:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 123:
			case 124:
			case 151:
			case 152:
			case 170:
				{
				alt181 = 1;
				}
				break;
			case 149:
				{
				alt181 = 2;
				}
				break;
			case 147:
				{
				alt181 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 181, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(181); }
			switch (alt181)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:530:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(530, 4);
				PushFollow(Follow._list_expr_in_expr4218);
				list_expr405=list_expr();
				PopFollow();

				adaptor.AddChild(root_0, list_expr405.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:531:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(531, 4);
				PushFollow(Follow._match_expr_in_expr4223);
				match_expr406=match_expr();
				PopFollow();

				adaptor.AddChild(root_0, match_expr406.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:532:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(532, 4);
				PushFollow(Follow._let_expr_in_expr4228);
				let_expr407=let_expr();
				PopFollow();

				adaptor.AddChild(root_0, let_expr407.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 59);
			LeaveRule("expr", 59);
			LeaveRule_expr();
		}
		DebugLocation(533, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:535:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 60);
		TraceIn("list_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal408 = default(IToken);
		IToken char_literal409 = default(IToken);
		IToken NEWLINE410 = default(IToken);
		IToken INDENT411 = default(IToken);
		IToken DEDENT412 = default(IToken);
		IToken char_literal414 = default(IToken);
		IToken NEWLINE415 = default(IToken);
		IToken INDENT416 = default(IToken);
		IToken DEDENT417 = default(IToken);
		IToken char_literal419 = default(IToken);
		IToken NEWLINE420 = default(IToken);
		IToken INDENT421 = default(IToken);
		IToken DEDENT422 = default(IToken);
		IToken char_literal423 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr418 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr424 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal408_tree = default(CommonTree);
		CommonTree char_literal409_tree = default(CommonTree);
		CommonTree NEWLINE410_tree = default(CommonTree);
		CommonTree INDENT411_tree = default(CommonTree);
		CommonTree DEDENT412_tree = default(CommonTree);
		CommonTree char_literal414_tree = default(CommonTree);
		CommonTree NEWLINE415_tree = default(CommonTree);
		CommonTree INDENT416_tree = default(CommonTree);
		CommonTree DEDENT417_tree = default(CommonTree);
		CommonTree char_literal419_tree = default(CommonTree);
		CommonTree NEWLINE420_tree = default(CommonTree);
		CommonTree INDENT421_tree = default(CommonTree);
		CommonTree DEDENT422_tree = default(CommonTree);
		CommonTree char_literal423_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(535, 1);
		try
		{
			// SugarCpp.g:536:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt187=2;
			try { DebugEnterDecision(187, false);
			int LA187_0 = input.LA(1);

			if ((LA187_0==124))
			{
				alt187 = 1;
			}
			else if ((LA187_0==IDENT||LA187_0==NUMBER||LA187_0==STRING||LA187_0==81||LA187_0==86||LA187_0==88||LA187_0==90||(LA187_0>=92 && LA187_0<=93)||(LA187_0>=96 && LA187_0<=97)||LA187_0==123||(LA187_0>=151 && LA187_0<=152)||LA187_0==170))
			{
				alt187 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 187, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:536:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(536, 4);
				char_literal408=(IToken)Match(input,124,Follow._124_in_list_expr4239);  
				stream_124.Add(char_literal408);

				DebugLocation(536, 8);
				// SugarCpp.g:536:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt185=2;
				try { DebugEnterSubRule(185);
				try { DebugEnterDecision(185, false);
				try
				{
					alt185 = dfa185.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(185); }
				switch (alt185)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:536:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(536, 9);
					// SugarCpp.g:536:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(182);
					while (true)
					{
						int alt182=5;
						try { DebugEnterDecision(182, false);
						switch (input.LA(1))
						{
						case 95:
							{
							alt182 = 1;
							}
							break;
						case NEWLINE:
							{
							alt182 = 2;
							}
							break;
						case INDENT:
							{
							alt182 = 3;
							}
							break;
						case DEDENT:
							{
							alt182 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(182); }
						switch ( alt182 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:536:10: ','
							{
							DebugLocation(536, 10);
							char_literal409=(IToken)Match(input,95,Follow._95_in_list_expr4243);  
							stream_95.Add(char_literal409);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:536:16: NEWLINE
							{
							DebugLocation(536, 16);
							NEWLINE410=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4247);  
							stream_NEWLINE.Add(NEWLINE410);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:536:26: INDENT
							{
							DebugLocation(536, 26);
							INDENT411=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4251);  
							stream_INDENT.Add(INDENT411);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:536:35: DEDENT
							{
							DebugLocation(536, 35);
							DEDENT412=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4255);  
							stream_DEDENT.Add(DEDENT412);


							}
							break;

						default:
							goto loop182;
						}
					}

					loop182:
						;

					} finally { DebugExitSubRule(182); }

					DebugLocation(536, 44);
					PushFollow(Follow._list_expr_in_list_expr4259);
					list_expr413=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr413.Tree);
					DebugLocation(536, 54);
					// SugarCpp.g:536:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(184);
					while (true)
					{
						int alt184=2;
						try { DebugEnterDecision(184, false);
						try
						{
							alt184 = dfa184.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(184); }
						switch ( alt184 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:536:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(536, 55);
							// SugarCpp.g:536:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt183=0;
							try { DebugEnterSubRule(183);
							while (true)
							{
								int alt183=5;
								try { DebugEnterDecision(183, false);
								switch (input.LA(1))
								{
								case 95:
									{
									alt183 = 1;
									}
									break;
								case NEWLINE:
									{
									alt183 = 2;
									}
									break;
								case INDENT:
									{
									alt183 = 3;
									}
									break;
								case DEDENT:
									{
									alt183 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(183); }
								switch (alt183)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:536:56: ','
									{
									DebugLocation(536, 56);
									char_literal414=(IToken)Match(input,95,Follow._95_in_list_expr4263);  
									stream_95.Add(char_literal414);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:536:62: NEWLINE
									{
									DebugLocation(536, 62);
									NEWLINE415=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4267);  
									stream_NEWLINE.Add(NEWLINE415);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:536:72: INDENT
									{
									DebugLocation(536, 72);
									INDENT416=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4271);  
									stream_INDENT.Add(INDENT416);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:536:81: DEDENT
									{
									DebugLocation(536, 81);
									DEDENT417=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4275);  
									stream_DEDENT.Add(DEDENT417);


									}
									break;

								default:
									if (cnt183 >= 1)
										goto loop183;

									EarlyExitException eee183 = new EarlyExitException( 183, input );
									DebugRecognitionException(eee183);
									throw eee183;
								}
								cnt183++;
							}
							loop183:
								;

							} finally { DebugExitSubRule(183); }

							DebugLocation(536, 90);
							PushFollow(Follow._list_expr_in_list_expr4279);
							list_expr418=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr418.Tree);

							}
							break;

						default:
							goto loop184;
						}
					}

					loop184:
						;

					} finally { DebugExitSubRule(184); }


					}
					break;

				}
				} finally { DebugExitSubRule(185); }

				DebugLocation(536, 104);
				// SugarCpp.g:536:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(186);
				while (true)
				{
					int alt186=5;
					try { DebugEnterDecision(186, false);
					switch (input.LA(1))
					{
					case 95:
						{
						alt186 = 1;
						}
						break;
					case NEWLINE:
						{
						alt186 = 2;
						}
						break;
					case INDENT:
						{
						alt186 = 3;
						}
						break;
					case DEDENT:
						{
						alt186 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(186); }
					switch ( alt186 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:536:105: ','
						{
						DebugLocation(536, 105);
						char_literal419=(IToken)Match(input,95,Follow._95_in_list_expr4286);  
						stream_95.Add(char_literal419);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:536:111: NEWLINE
						{
						DebugLocation(536, 111);
						NEWLINE420=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4290);  
						stream_NEWLINE.Add(NEWLINE420);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:536:121: INDENT
						{
						DebugLocation(536, 121);
						INDENT421=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4294);  
						stream_INDENT.Add(INDENT421);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:536:130: DEDENT
						{
						DebugLocation(536, 130);
						DEDENT422=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4298);  
						stream_DEDENT.Add(DEDENT422);


						}
						break;

					default:
						goto loop186;
					}
				}

				loop186:
					;

				} finally { DebugExitSubRule(186); }

				DebugLocation(536, 139);
				char_literal423=(IToken)Match(input,125,Follow._125_in_list_expr4302);  
				stream_125.Add(char_literal423);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 536:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(536, 146);
					// SugarCpp.g:536:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(536, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(536, 158);
					// SugarCpp.g:536:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(536, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:537:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(537, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4316);
				lambda_expr424=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr424.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 60);
			LeaveRule("list_expr", 60);
			LeaveRule_list_expr();
		}
		DebugLocation(538, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:540:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 61);
		TraceIn("lambda_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal425 = default(IToken);
		IToken char_literal427 = default(IToken);
		IToken string_literal428 = default(IToken);
		IToken string_literal430 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr429 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr431 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr432 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal425_tree = default(CommonTree);
		CommonTree char_literal427_tree = default(CommonTree);
		CommonTree string_literal428_tree = default(CommonTree);
		CommonTree string_literal430_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(540, 1);
		try
		{
			// SugarCpp.g:541:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt190=2;
			try { DebugEnterDecision(190, false);
			try
			{
				alt190 = dfa190.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:541:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(541, 4);
				char_literal425=(IToken)Match(input,88,Follow._88_in_lambda_expr4327);  
				stream_88.Add(char_literal425);

				DebugLocation(541, 8);
				// SugarCpp.g:541:8: ( func_args )?
				int alt188=2;
				try { DebugEnterSubRule(188);
				try { DebugEnterDecision(188, false);
				int LA188_0 = input.LA(1);

				if ((LA188_0==IDENT||LA188_0==107))
				{
					alt188 = 1;
				}
				} finally { DebugExitDecision(188); }
				switch (alt188)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:541:8: func_args
					{
					DebugLocation(541, 8);
					PushFollow(Follow._func_args_in_lambda_expr4329);
					func_args426=func_args();
					PopFollow();

					stream_func_args.Add(func_args426.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(188); }

				DebugLocation(541, 19);
				char_literal427=(IToken)Match(input,89,Follow._89_in_lambda_expr4332);  
				stream_89.Add(char_literal427);

				DebugLocation(541, 23);
				// SugarCpp.g:541:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt189=2;
				try { DebugEnterSubRule(189);
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==99))
				{
					alt189 = 1;
				}
				else if ((LA189_0==116))
				{
					alt189 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 189, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(189); }
				switch (alt189)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:541:25: '->' expr
					{
					DebugLocation(541, 25);
					string_literal428=(IToken)Match(input,99,Follow._99_in_lambda_expr4336);  
					stream_99.Add(string_literal428);

					DebugLocation(541, 30);
					PushFollow(Follow._expr_in_lambda_expr4338);
					expr429=expr();
					PopFollow();

					stream_expr.Add(expr429.Tree);


					{
					// AST REWRITE
					// elements: func_args, 99, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 541:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(541, 39);
						// SugarCpp.g:541:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(541, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(541, 53);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(541, 58);
						// SugarCpp.g:541:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(541, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(541, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:542:25: '=>' expr
					{
					DebugLocation(542, 25);
					string_literal430=(IToken)Match(input,116,Follow._116_in_lambda_expr4378);  
					stream_116.Add(string_literal430);

					DebugLocation(542, 30);
					PushFollow(Follow._expr_in_lambda_expr4380);
					expr431=expr();
					PopFollow();

					stream_expr.Add(expr431.Tree);


					{
					// AST REWRITE
					// elements: func_args, 116, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 542:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(542, 39);
						// SugarCpp.g:542:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(542, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(542, 53);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(542, 58);
						// SugarCpp.g:542:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(542, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(542, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(189); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:543:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(543, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4400);
				modify_expr432=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr432.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 61);
			LeaveRule("lambda_expr", 61);
			LeaveRule_lambda_expr();
		}
		DebugLocation(544, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:546:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 62);
		TraceIn("modify_expr_op", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set433 = default(IToken);

		CommonTree set433_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(546, 91);
		try
		{
			// SugarCpp.g:546:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(546, 15);

			set433=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==112||input.LA(1)==114||input.LA(1)==120||input.LA(1)==127||input.LA(1)==168)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set433));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 62);
			LeaveRule("modify_expr_op", 62);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(546, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:547:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 63);
		TraceIn("modify_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set435 = default(IToken);
		IToken char_literal437 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr434 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr436 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr438 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set435_tree = default(CommonTree);
		CommonTree char_literal437_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(547, 1);
		try
		{
			// SugarCpp.g:548:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:548:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(548, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4457);
			cond_expr434=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr434.Tree);
			DebugLocation(548, 14);
			// SugarCpp.g:548:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt192=3;
			try { DebugEnterSubRule(192);
			try { DebugEnterDecision(192, false);
			int LA192_0 = input.LA(1);

			if ((LA192_0==84||LA192_0==87||LA192_0==91||LA192_0==94||LA192_0==98||LA192_0==104||LA192_0==107||LA192_0==112||LA192_0==120||LA192_0==127||LA192_0==168))
			{
				alt192 = 1;
			}
			else if ((LA192_0==114))
			{
				alt192 = 2;
			}
			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:548:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(548, 94);

				set435=(IToken)input.LT(1);
				set435=(IToken)input.LT(1);
				if (input.LA(1)==84||input.LA(1)==87||input.LA(1)==91||input.LA(1)==94||input.LA(1)==98||input.LA(1)==104||input.LA(1)==107||input.LA(1)==112||input.LA(1)==120||input.LA(1)==127||input.LA(1)==168)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set435), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(548, 96);
				PushFollow(Follow._cond_expr_in_modify_expr4506);
				cond_expr436=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr436.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:549:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(549, 7);
				// SugarCpp.g:549:7: ( '=' ^ cond_expr )+
				int cnt191=0;
				try { DebugEnterSubRule(191);
				while (true)
				{
					int alt191=2;
					try { DebugEnterDecision(191, false);
					int LA191_0 = input.LA(1);

					if ((LA191_0==114))
					{
						alt191 = 1;
					}


					} finally { DebugExitDecision(191); }
					switch (alt191)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:549:8: '=' ^ cond_expr
						{
						DebugLocation(549, 11);
						char_literal437=(IToken)Match(input,114,Follow._114_in_modify_expr4515); 
						char_literal437_tree = (CommonTree)adaptor.Create(char_literal437);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal437_tree, root_0);
						DebugLocation(549, 13);
						PushFollow(Follow._cond_expr_in_modify_expr4518);
						cond_expr438=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr438.Tree);

						}
						break;

					default:
						if (cnt191 >= 1)
							goto loop191;

						EarlyExitException eee191 = new EarlyExitException( 191, input );
						DebugRecognitionException(eee191);
						throw eee191;
					}
					cnt191++;
				}
				loop191:
					;

				} finally { DebugExitSubRule(191); }


				}
				break;

			}
			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 63);
			LeaveRule("modify_expr", 63);
			LeaveRule_modify_expr();
		}
		DebugLocation(550, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:552:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 64);
		TraceIn("cond_expr_item", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr439 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(552, 24);
		try
		{
			// SugarCpp.g:552:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:552:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(552, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item4531);
			or_expr439=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr439.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 64);
			LeaveRule("cond_expr_item", 64);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(552, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:553:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 65);
		TraceIn("cond_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal440 = default(IToken);
		IToken char_literal441 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree char_literal441_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(553, 1);
		try
		{
			// SugarCpp.g:554:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:554:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(554, 4);
			// SugarCpp.g:554:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:554:5: a= or_expr
			{
			DebugLocation(554, 6);
			PushFollow(Follow._or_expr_in_cond_expr4543);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 554:15: -> $a
			{
				DebugLocation(554, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(554, 22);
			// SugarCpp.g:554:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt195=2;
			try { DebugEnterSubRule(195);
			try { DebugEnterDecision(195, false);
			int LA195_0 = input.LA(1);

			if ((LA195_0==121))
			{
				alt195 = 1;
			}
			} finally { DebugExitDecision(195); }
			switch (alt195)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:554:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(554, 23);
				char_literal440=(IToken)Match(input,121,Follow._121_in_cond_expr4552);  
				stream_121.Add(char_literal440);

				DebugLocation(554, 27);
				// SugarCpp.g:554:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt194=2;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==IDENT||LA194_0==NUMBER||LA194_0==STRING||LA194_0==81||LA194_0==86||LA194_0==88||LA194_0==90||(LA194_0>=92 && LA194_0<=93)||(LA194_0>=96 && LA194_0<=97)||LA194_0==123||(LA194_0>=151 && LA194_0<=152)||LA194_0==170))
				{
					alt194 = 1;
				}
				else if ((LA194_0==DEDENT||LA194_0==INDENT||LA194_0==NEWLINE||LA194_0==84||LA194_0==87||LA194_0==89||LA194_0==91||(LA194_0>=94 && LA194_0<=95)||LA194_0==98||LA194_0==104||(LA194_0>=107 && LA194_0<=108)||LA194_0==112||LA194_0==114||LA194_0==116||LA194_0==120||LA194_0==125||LA194_0==127||LA194_0==131||LA194_0==137||(LA194_0>=141 && LA194_0<=142)||LA194_0==144||(LA194_0>=157 && LA194_0<=158)||(LA194_0>=161 && LA194_0<=162)||(LA194_0>=165 && LA194_0<=166)||LA194_0==168))
				{
					alt194 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:554:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(554, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr4558);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(554, 46);
					// SugarCpp.g:554:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt193=2;
					try { DebugEnterSubRule(193);
					try { DebugEnterDecision(193, false);
					int LA193_0 = input.LA(1);

					if ((LA193_0==105))
					{
						alt193 = 1;
					}
					else if ((LA193_0==DEDENT||LA193_0==INDENT||LA193_0==NEWLINE||LA193_0==84||LA193_0==87||LA193_0==89||LA193_0==91||(LA193_0>=94 && LA193_0<=95)||LA193_0==98||LA193_0==104||(LA193_0>=107 && LA193_0<=108)||LA193_0==112||LA193_0==114||LA193_0==116||LA193_0==120||LA193_0==125||LA193_0==127||LA193_0==131||LA193_0==137||(LA193_0>=141 && LA193_0<=142)||LA193_0==144||(LA193_0>=157 && LA193_0<=158)||(LA193_0>=161 && LA193_0<=162)||(LA193_0>=165 && LA193_0<=166)||LA193_0==168))
					{
						alt193 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 193, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(193); }
					switch (alt193)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:554:48: ':' b= cond_expr_item
						{
						DebugLocation(554, 48);
						char_literal441=(IToken)Match(input,105,Follow._105_in_cond_expr4562);  
						stream_105.Add(char_literal441);

						DebugLocation(554, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr4566);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, cond_expr, b
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 554:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(554, 72);
							// SugarCpp.g:554:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(554, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(554, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(554, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(554, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:555:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 555:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(555, 20);
							// SugarCpp.g:555:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(555, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(555, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(555, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(193); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:557:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 557:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(557, 14);
						// SugarCpp.g:557:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(557, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(557, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(194); }


				}
				break;

			}
			} finally { DebugExitSubRule(195); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 65);
			LeaveRule("cond_expr", 65);
			LeaveRule_cond_expr();
		}
		DebugLocation(559, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:561:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 66);
		TraceIn("or_op", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set442 = default(IToken);

		CommonTree set442_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(561, 19);
		try
		{
			// SugarCpp.g:561:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(561, 6);

			set442=(IToken)input.LT(1);
			if (input.LA(1)==153||input.LA(1)==169)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set442));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 66);
			LeaveRule("or_op", 66);
			LeaveRule_or_op();
		}
		DebugLocation(561, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:562:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 67);
		TraceIn("or_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(562, 1);
		try
		{
			// SugarCpp.g:563:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:563:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(563, 4);
			// SugarCpp.g:563:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:563:5: a= and_expr
			{
			DebugLocation(563, 6);
			PushFollow(Follow._and_expr_in_or_expr4680);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 563:16: -> $a
			{
				DebugLocation(563, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(563, 23);
			// SugarCpp.g:563:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(196);
			while (true)
			{
				int alt196=2;
				try { DebugEnterDecision(196, false);
				int LA196_0 = input.LA(1);

				if ((LA196_0==153||LA196_0==169))
				{
					alt196 = 1;
				}


				} finally { DebugExitDecision(196); }
				switch ( alt196 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:563:24: op= or_op b= and_expr
					{
					DebugLocation(563, 26);
					PushFollow(Follow._or_op_in_or_expr4691);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(563, 34);
					PushFollow(Follow._and_expr_in_or_expr4695);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 563:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(563, 47);
						// SugarCpp.g:563:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(563, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(563, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(563, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(563, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop196;
				}
			}

			loop196:
				;

			} finally { DebugExitSubRule(196); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 67);
			LeaveRule("or_expr", 67);
			LeaveRule_or_expr();
		}
		DebugLocation(564, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:566:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 68);
		TraceIn("and_op", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set443 = default(IToken);

		CommonTree set443_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(566, 21);
		try
		{
			// SugarCpp.g:566:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(566, 7);

			set443=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==129)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set443));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 68);
			LeaveRule("and_op", 68);
			LeaveRule_and_op();
		}
		DebugLocation(566, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:567:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 69);
		TraceIn("and_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(568, 4);
			// SugarCpp.g:568:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:568:5: a= bit_or
			{
			DebugLocation(568, 6);
			PushFollow(Follow._bit_or_in_and_expr4737);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 568:14: -> $a
			{
				DebugLocation(568, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(568, 21);
			// SugarCpp.g:568:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(197);
			while (true)
			{
				int alt197=2;
				try { DebugEnterDecision(197, false);
				int LA197_0 = input.LA(1);

				if ((LA197_0==85||LA197_0==129))
				{
					alt197 = 1;
				}


				} finally { DebugExitDecision(197); }
				switch ( alt197 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:568:22: op= and_op b= bit_or
					{
					DebugLocation(568, 24);
					PushFollow(Follow._and_op_in_and_expr4748);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(568, 33);
					PushFollow(Follow._bit_or_in_and_expr4752);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op, and_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 568:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(568, 44);
						// SugarCpp.g:568:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(568, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(568, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(568, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(568, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop197;
				}
			}

			loop197:
				;

			} finally { DebugExitSubRule(197); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 69);
			LeaveRule("and_expr", 69);
			LeaveRule_and_expr();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:571:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 70);
		TraceIn("bit_or", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal444 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal444_tree = default(CommonTree);
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:572:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(572, 4);
			// SugarCpp.g:572:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:572:5: a= bit_xor
			{
			DebugLocation(572, 6);
			PushFollow(Follow._bit_xor_in_bit_or4783);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 572:15: -> $a
			{
				DebugLocation(572, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(572, 22);
			// SugarCpp.g:572:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(198);
			while (true)
			{
				int alt198=2;
				try { DebugEnterDecision(198, false);
				int LA198_0 = input.LA(1);

				if ((LA198_0==167))
				{
					alt198 = 1;
				}


				} finally { DebugExitDecision(198); }
				switch ( alt198 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:572:23: '|' b= bit_xor
					{
					DebugLocation(572, 23);
					char_literal444=(IToken)Match(input,167,Follow._167_in_bit_or4792);  
					stream_167.Add(char_literal444);

					DebugLocation(572, 28);
					PushFollow(Follow._bit_xor_in_bit_or4796);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 167
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 572:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(572, 40);
						// SugarCpp.g:572:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(572, 51);
						adaptor.AddChild(root_1, stream_167.NextNode());
						DebugLocation(572, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(572, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop198;
				}
			}

			loop198:
				;

			} finally { DebugExitSubRule(198); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 70);
			LeaveRule("bit_or", 70);
			LeaveRule_bit_or();
		}
		DebugLocation(573, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:575:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 71);
		TraceIn("bit_xor", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal445 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal445_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(575, 1);
		try
		{
			// SugarCpp.g:576:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:576:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(576, 4);
			// SugarCpp.g:576:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:576:5: a= bit_and
			{
			DebugLocation(576, 6);
			PushFollow(Follow._bit_and_in_bit_xor4826);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 576:15: -> $a
			{
				DebugLocation(576, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(576, 22);
			// SugarCpp.g:576:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(199);
			while (true)
			{
				int alt199=2;
				try { DebugEnterDecision(199, false);
				int LA199_0 = input.LA(1);

				if ((LA199_0==126))
				{
					alt199 = 1;
				}


				} finally { DebugExitDecision(199); }
				switch ( alt199 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:576:23: '^' b= bit_and
					{
					DebugLocation(576, 23);
					char_literal445=(IToken)Match(input,126,Follow._126_in_bit_xor4835);  
					stream_126.Add(char_literal445);

					DebugLocation(576, 28);
					PushFollow(Follow._bit_and_in_bit_xor4839);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 126, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 576:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(576, 40);
						// SugarCpp.g:576:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(576, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(576, 51);
						adaptor.AddChild(root_1, stream_126.NextNode());
						DebugLocation(576, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(576, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop199;
				}
			}

			loop199:
				;

			} finally { DebugExitSubRule(199); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 71);
			LeaveRule("bit_xor", 71);
			LeaveRule_bit_xor();
		}
		DebugLocation(577, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:579:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 72);
		TraceIn("bit_and", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal446 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal446_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(579, 1);
		try
		{
			// SugarCpp.g:580:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:580:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(580, 4);
			// SugarCpp.g:580:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:580:5: a= cmp_expr
			{
			DebugLocation(580, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4869);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 580:16: -> $a
			{
				DebugLocation(580, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(580, 23);
			// SugarCpp.g:580:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(200);
			while (true)
			{
				int alt200=2;
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==86))
				{
					alt200 = 1;
				}


				} finally { DebugExitDecision(200); }
				switch ( alt200 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:580:24: '&' b= cmp_expr
					{
					DebugLocation(580, 24);
					char_literal446=(IToken)Match(input,86,Follow._86_in_bit_and4878);  
					stream_86.Add(char_literal446);

					DebugLocation(580, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4882);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 86, bit_and, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 580:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(580, 42);
						// SugarCpp.g:580:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(580, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(580, 53);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(580, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(580, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop200;
				}
			}

			loop200:
				;

			} finally { DebugExitSubRule(200); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 72);
			LeaveRule("bit_and", 72);
			LeaveRule_bit_and();
		}
		DebugLocation(581, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:583:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 73);
		TraceIn("chain_op", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set447 = default(IToken);

		CommonTree set447_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(583, 64);
		try
		{
			// SugarCpp.g:583:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(583, 9);

			set447=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==109||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=145 && input.LA(1)<=146))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set447));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 73);
			LeaveRule("chain_op", 73);
			LeaveRule_chain_op();
		}
		DebugLocation(583, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:584:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 74);
		TraceIn("no_less_op", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set448 = default(IToken);

		CommonTree set448_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(584, 60);
		try
		{
			// SugarCpp.g:584:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(584, 11);

			set448=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==113||input.LA(1)==115||(input.LA(1)>=117 && input.LA(1)<=118)||(input.LA(1)>=145 && input.LA(1)<=146))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set448));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 74);
			LeaveRule("no_less_op", 74);
			LeaveRule_no_less_op();
		}
		DebugLocation(584, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:585:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 75);
		TraceIn("chain_list", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op449 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr450 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(585, 35);
		try
		{
			// SugarCpp.g:585:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:585:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(585, 13);
			// SugarCpp.g:585:13: ( chain_op shift_expr )+
			int cnt201=0;
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=2;
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==82||LA201_0==109||LA201_0==113||LA201_0==115||(LA201_0>=117 && LA201_0<=118)||(LA201_0>=145 && LA201_0<=146)))
				{
					alt201 = 1;
				}


				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:585:14: chain_op shift_expr
					{
					DebugLocation(585, 14);
					PushFollow(Follow._chain_op_in_chain_list4974);
					chain_op449=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op449.Tree);
					DebugLocation(585, 23);
					PushFollow(Follow._shift_expr_in_chain_list4976);
					shift_expr450=shift_expr();
					PopFollow();

					adaptor.AddChild(root_0, shift_expr450.Tree);

					}
					break;

				default:
					if (cnt201 >= 1)
						goto loop201;

					EarlyExitException eee201 = new EarlyExitException( 201, input );
					DebugRecognitionException(eee201);
					throw eee201;
				}
				cnt201++;
			}
			loop201:
				;

			} finally { DebugExitSubRule(201); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 75);
			LeaveRule("chain_list", 75);
			LeaveRule_chain_list();
		}
		DebugLocation(585, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:586:1: cmp_expr : (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 76);
		TraceIn("cmp_expr", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal451 = default(IToken);
		IToken char_literal453 = default(IToken);
		IToken char_literal454 = default(IToken);
		IToken char_literal456 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident452 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list455 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list458 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal451_tree = default(CommonTree);
		CommonTree char_literal453_tree = default(CommonTree);
		CommonTree char_literal454_tree = default(CommonTree);
		CommonTree char_literal456_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(586, 1);
		try
		{
			// SugarCpp.g:587:2: ( (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:587:4: (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(587, 4);
			// SugarCpp.g:587:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:587:5: a= shift_expr
			{
			DebugLocation(587, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr4990);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 587:18: -> $a
			{
				DebugLocation(587, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(587, 25);
			// SugarCpp.g:587:25: ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt206=3;
			try { DebugEnterSubRule(206);
			try { DebugEnterDecision(206, false);
			int LA206_0 = input.LA(1);

			if ((LA206_0==109))
			{
				alt206 = 1;
			}
			else if ((LA206_0==82||LA206_0==113||LA206_0==115||(LA206_0>=117 && LA206_0<=118)||(LA206_0>=145 && LA206_0<=146)))
			{
				alt206 = 2;
			}
			} finally { DebugExitDecision(206); }
			switch (alt206)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:587:27: '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(587, 27);
				char_literal451=(IToken)Match(input,109,Follow._109_in_cmp_expr5000);  
				stream_109.Add(char_literal451);

				DebugLocation(587, 32);
				PushFollow(Follow._shift_expr_in_cmp_expr5004);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(587, 44);
				// SugarCpp.g:587:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt204=3;
				try { DebugEnterSubRule(204);
				try { DebugEnterDecision(204, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt204 = 1;
					}
					break;
				case 117:
					{
					int LA204_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt204 = 1;
					}
					else if ((true))
					{
						alt204 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 204, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 82:
				case 109:
				case 113:
				case 115:
				case 118:
				case 145:
				case 146:
					{
					alt204 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 84:
				case 85:
				case 86:
				case 87:
				case 89:
				case 91:
				case 94:
				case 95:
				case 98:
				case 104:
				case 105:
				case 107:
				case 108:
				case 112:
				case 114:
				case 116:
				case 120:
				case 121:
				case 125:
				case 126:
				case 127:
				case 129:
				case 131:
				case 137:
				case 141:
				case 142:
				case 144:
				case 153:
				case 157:
				case 158:
				case 161:
				case 162:
				case 165:
				case 166:
				case 167:
				case 168:
				case 169:
					{
					alt204 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 204, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(204); }
				switch (alt204)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:587:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(587, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(587, 76);
					// SugarCpp.g:587:76: ( ident )*
					try { DebugEnterSubRule(202);
					while (true)
					{
						int alt202=2;
						try { DebugEnterDecision(202, false);
						int LA202_0 = input.LA(1);

						if ((LA202_0==IDENT))
						{
							alt202 = 1;
						}


						} finally { DebugExitDecision(202); }
						switch ( alt202 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:587:76: ident
							{
							DebugLocation(587, 76);
							PushFollow(Follow._ident_in_cmp_expr5010);
							ident452=ident();
							PopFollow();

							stream_ident.Add(ident452.Tree);

							}
							break;

						default:
							goto loop202;
						}
					}

					loop202:
						;

					} finally { DebugExitSubRule(202); }

					DebugLocation(587, 83);
					char_literal453=(IToken)Match(input,117,Follow._117_in_cmp_expr5013);  
					stream_117.Add(char_literal453);

					DebugLocation(587, 87);
					char_literal454=(IToken)Match(input,88,Follow._88_in_cmp_expr5015);  
					stream_88.Add(char_literal454);

					DebugLocation(587, 91);
					// SugarCpp.g:587:91: ( expr_list )?
					int alt203=2;
					try { DebugEnterSubRule(203);
					try { DebugEnterDecision(203, false);
					int LA203_0 = input.LA(1);

					if ((LA203_0==IDENT||LA203_0==NUMBER||LA203_0==STRING||LA203_0==81||LA203_0==86||LA203_0==88||LA203_0==90||(LA203_0>=92 && LA203_0<=93)||(LA203_0>=96 && LA203_0<=97)||(LA203_0>=123 && LA203_0<=124)||LA203_0==147||LA203_0==149||(LA203_0>=151 && LA203_0<=152)||LA203_0==170))
					{
						alt203 = 1;
					}
					} finally { DebugExitDecision(203); }
					switch (alt203)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:587:91: expr_list
						{
						DebugLocation(587, 91);
						PushFollow(Follow._expr_list_in_cmp_expr5017);
						expr_list455=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list455.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(203); }

					DebugLocation(587, 102);
					char_literal456=(IToken)Match(input,89,Follow._89_in_cmp_expr5020);  
					stream_89.Add(char_literal456);



					{
					// AST REWRITE
					// elements: ident, expr_list, b, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 587:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(587, 109);
						// SugarCpp.g:587:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(587, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(587, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(587, 131);
						// SugarCpp.g:587:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(587, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(587, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(587, 155);
						// SugarCpp.g:587:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(587, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(587, 163);
						// SugarCpp.g:587:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(587, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:588:46: chain_list
					{
					DebugLocation(588, 46);
					PushFollow(Follow._chain_list_in_cmp_expr5089);
					chain_list457=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list457.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, 109, chain_list, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 588:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(588, 60);
						// SugarCpp.g:588:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(588, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(588, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(588, 84);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(588, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(588, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:589:16: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, 109, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 589:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(589, 19);
						// SugarCpp.g:589:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(589, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(589, 30);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(589, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(589, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(204); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:590:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(590, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5166);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(590, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5170);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(590, 54);
				// SugarCpp.g:590:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt205=2;
				try { DebugEnterSubRule(205);
				try { DebugEnterDecision(205, false);
				int LA205_0 = input.LA(1);

				if ((LA205_0==82||LA205_0==109||LA205_0==113||LA205_0==115||(LA205_0>=117 && LA205_0<=118)||(LA205_0>=145 && LA205_0<=146)))
				{
					alt205 = 1;
				}
				else if ((LA205_0==DEDENT||LA205_0==INDENT||LA205_0==NEWLINE||(LA205_0>=84 && LA205_0<=87)||LA205_0==89||LA205_0==91||(LA205_0>=94 && LA205_0<=95)||LA205_0==98||(LA205_0>=104 && LA205_0<=105)||(LA205_0>=107 && LA205_0<=108)||LA205_0==112||LA205_0==114||LA205_0==116||(LA205_0>=120 && LA205_0<=121)||(LA205_0>=125 && LA205_0<=127)||LA205_0==129||LA205_0==131||LA205_0==137||(LA205_0>=141 && LA205_0<=142)||LA205_0==144||LA205_0==153||(LA205_0>=157 && LA205_0<=158)||(LA205_0>=161 && LA205_0<=162)||(LA205_0>=165 && LA205_0<=169)))
				{
					alt205 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 205, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(205); }
				switch (alt205)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:590:56: chain_list
					{
					DebugLocation(590, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5174);
					chain_list458=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list458.Tree);


					{
					// AST REWRITE
					// elements: op, b, chain_list, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 590:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(590, 70);
						// SugarCpp.g:590:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(590, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(590, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(590, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(590, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(590, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:591:17: 
					{

					{
					// AST REWRITE
					// elements: b, op, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 591:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(591, 20);
						// SugarCpp.g:591:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(591, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(591, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(591, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(591, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(205); }


				}
				break;

			}
			} finally { DebugExitSubRule(206); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 76);
			LeaveRule("cmp_expr", 76);
			LeaveRule_cmp_expr();
		}
		DebugLocation(594, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:596:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 77);
		TraceIn("shift_expr_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set459 = default(IToken);

		CommonTree set459_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(596, 27);
		try
		{
			// SugarCpp.g:596:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(596, 14);

			set459=(IToken)input.LT(1);
			if (input.LA(1)==111||input.LA(1)==119)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set459));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 77);
			LeaveRule("shift_expr_op", 77);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(596, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:597:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 78);
		TraceIn("shift_expr", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op460 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(597, 1);
		try
		{
			// SugarCpp.g:598:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:598:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(598, 4);
			// SugarCpp.g:598:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:598:5: a= add_expr
			{
			DebugLocation(598, 6);
			PushFollow(Follow._add_expr_in_shift_expr5276);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 598:16: -> $a
			{
				DebugLocation(598, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(598, 23);
			// SugarCpp.g:598:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(207);
			while (true)
			{
				int alt207=2;
				try { DebugEnterDecision(207, false);
				int LA207_0 = input.LA(1);

				if ((LA207_0==111||LA207_0==119))
				{
					alt207 = 1;
				}


				} finally { DebugExitDecision(207); }
				switch ( alt207 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:598:24: shift_expr_op b= add_expr
					{
					DebugLocation(598, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5285);
					shift_expr_op460=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op460.Tree);
					DebugLocation(598, 39);
					PushFollow(Follow._add_expr_in_shift_expr5289);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, b, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 598:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(598, 52);
						// SugarCpp.g:598:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(598, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(598, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(598, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(598, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop207;
				}
			}

			loop207:
				;

			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 78);
			LeaveRule("shift_expr", 78);
			LeaveRule_shift_expr();
		}
		DebugLocation(599, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:601:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 79);
		TraceIn("add_expr", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal461 = default(IToken);
		IToken char_literal462 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal461_tree = default(CommonTree);
		CommonTree char_literal462_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(601, 1);
		try
		{
			// SugarCpp.g:602:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:602:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(602, 4);
			// SugarCpp.g:602:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:602:5: a= mul_expr
			{
			DebugLocation(602, 6);
			PushFollow(Follow._mul_expr_in_add_expr5319);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 602:16: -> $a
			{
				DebugLocation(602, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(602, 23);
			// SugarCpp.g:602:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(208);
			while (true)
			{
				int alt208=3;
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==92))
				{
					alt208 = 1;
				}
				else if ((LA208_0==96))
				{
					alt208 = 2;
				}


				} finally { DebugExitDecision(208); }
				switch ( alt208 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:602:25: '+' b= mul_expr
					{
					DebugLocation(602, 25);
					char_literal461=(IToken)Match(input,92,Follow._92_in_add_expr5329);  
					stream_92.Add(char_literal461);

					DebugLocation(602, 30);
					PushFollow(Follow._mul_expr_in_add_expr5333);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 92, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 602:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(602, 43);
						// SugarCpp.g:602:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(602, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(602, 54);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(602, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(602, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:603:10: '-' b= mul_expr
					{
					DebugLocation(603, 10);
					char_literal462=(IToken)Match(input,96,Follow._96_in_add_expr5358);  
					stream_96.Add(char_literal462);

					DebugLocation(603, 15);
					PushFollow(Follow._mul_expr_in_add_expr5362);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 96, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 603:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(603, 28);
						// SugarCpp.g:603:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(603, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(603, 39);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(603, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(603, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop208;
				}
			}

			loop208:
				;

			} finally { DebugExitSubRule(208); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 79);
			LeaveRule("add_expr", 79);
			LeaveRule_add_expr();
		}
		DebugLocation(605, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:607:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 80);
		TraceIn("mul_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal463 = default(IToken);
		IToken char_literal464 = default(IToken);
		IToken char_literal465 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal463_tree = default(CommonTree);
		CommonTree char_literal464_tree = default(CommonTree);
		CommonTree char_literal465_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(607, 1);
		try
		{
			// SugarCpp.g:608:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:608:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(608, 4);
			// SugarCpp.g:608:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:608:5: a= infix_expr
			{
			DebugLocation(608, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5400);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 608:18: -> $a
			{
				DebugLocation(608, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(608, 25);
			// SugarCpp.g:608:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(209);
			while (true)
			{
				int alt209=4;
				try { DebugEnterDecision(209, false);
				switch (input.LA(1))
				{
				case 90:
					{
					alt209 = 1;
					}
					break;
				case 103:
					{
					alt209 = 2;
					}
					break;
				case 83:
					{
					alt209 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(209); }
				switch ( alt209 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:608:27: '*' b= infix_expr
					{
					DebugLocation(608, 27);
					char_literal463=(IToken)Match(input,90,Follow._90_in_mul_expr5410);  
					stream_90.Add(char_literal463);

					DebugLocation(608, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5414);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 90
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(608, 47);
						// SugarCpp.g:608:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(608, 58);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(608, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(608, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:609:12: '/' b= infix_expr
					{
					DebugLocation(609, 12);
					char_literal464=(IToken)Match(input,103,Follow._103_in_mul_expr5441);  
					stream_103.Add(char_literal464);

					DebugLocation(609, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5445);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 103, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 609:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(609, 32);
						// SugarCpp.g:609:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(609, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(609, 43);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(609, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(609, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:610:12: '%' b= infix_expr
					{
					DebugLocation(610, 12);
					char_literal465=(IToken)Match(input,83,Follow._83_in_mul_expr5472);  
					stream_83.Add(char_literal465);

					DebugLocation(610, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5476);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 83, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(610, 32);
						// SugarCpp.g:610:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(610, 43);
						adaptor.AddChild(root_1, stream_83.NextNode());
						DebugLocation(610, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(610, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop209;
				}
			}

			loop209:
				;

			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 80);
			LeaveRule("mul_expr", 80);
			LeaveRule_mul_expr();
		}
		DebugLocation(612, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:614:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 81);
		TraceIn("infix_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func466 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(614, 1);
		try
		{
			// SugarCpp.g:615:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:615:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(615, 4);
			// SugarCpp.g:615:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:615:5: a= selector_expr
			{
			DebugLocation(615, 6);
			PushFollow(Follow._selector_expr_in_infix_expr5516);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 615:21: -> $a
			{
				DebugLocation(615, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(615, 28);
			// SugarCpp.g:615:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(210);
			while (true)
			{
				int alt210=2;
				try { DebugEnterDecision(210, false);
				int LA210_0 = input.LA(1);

				if ((LA210_0==128))
				{
					alt210 = 1;
				}


				} finally { DebugExitDecision(210); }
				switch ( alt210 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:615:30: infix_func b= selector_expr
					{
					DebugLocation(615, 30);
					PushFollow(Follow._infix_func_in_infix_expr5526);
					infix_func466=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func466.Tree);
					DebugLocation(615, 42);
					PushFollow(Follow._selector_expr_in_infix_expr5530);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, b, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 615:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(615, 61);
						// SugarCpp.g:615:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(615, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(615, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(615, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(615, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop210;
				}
			}

			loop210:
				;

			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 81);
			LeaveRule("infix_expr", 81);
			LeaveRule_infix_expr();
		}
		DebugLocation(616, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:618:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 82);
		TraceIn("selector_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal467 = default(IToken);
		IToken string_literal468 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal467_tree = default(CommonTree);
		CommonTree string_literal468_tree = default(CommonTree);
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(618, 1);
		try
		{
			// SugarCpp.g:619:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:619:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(619, 4);
			// SugarCpp.g:619:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:619:5: a= cast_expr
			{
			DebugLocation(619, 6);
			PushFollow(Follow._cast_expr_in_selector_expr5562);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 619:17: -> $a
			{
				DebugLocation(619, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(619, 24);
			// SugarCpp.g:619:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=3;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==100))
				{
					alt211 = 1;
				}
				else if ((LA211_0==102))
				{
					alt211 = 2;
				}


				} finally { DebugExitDecision(211); }
				switch ( alt211 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:619:26: '->*' b= ident
					{
					DebugLocation(619, 26);
					string_literal467=(IToken)Match(input,100,Follow._100_in_selector_expr5572);  
					stream_100.Add(string_literal467);

					DebugLocation(619, 33);
					PushFollow(Follow._ident_in_selector_expr5576);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 100
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 619:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(619, 43);
						// SugarCpp.g:619:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(619, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(619, 57);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(619, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(619, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:620:11: '.*' b= ident
					{
					DebugLocation(620, 11);
					string_literal468=(IToken)Match(input,102,Follow._102_in_selector_expr5602);  
					stream_102.Add(string_literal468);

					DebugLocation(620, 18);
					PushFollow(Follow._ident_in_selector_expr5607);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 102
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 620:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(620, 28);
						// SugarCpp.g:620:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(620, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(620, 42);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(620, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(620, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop211;
				}
			}

			loop211:
				;

			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 82);
			LeaveRule("selector_expr", 82);
			LeaveRule_selector_expr();
		}
		DebugLocation(622, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:624:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 83);
		TraceIn("cast_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal469 = default(IToken);
		IToken char_literal470 = default(IToken);
		IToken char_literal472 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name471 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal469_tree = default(CommonTree);
		CommonTree char_literal470_tree = default(CommonTree);
		CommonTree char_literal472_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(624, 1);
		try
		{
			// SugarCpp.g:625:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:625:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(625, 4);
			// SugarCpp.g:625:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:625:5: a= prefix_expr
			{
			DebugLocation(625, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5647);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 625:19: -> $a
			{
				DebugLocation(625, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(625, 26);
			// SugarCpp.g:625:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt212=2;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, false);
			int LA212_0 = input.LA(1);

			if ((LA212_0==130))
			{
				alt212 = 1;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:625:27: 'as' '(' type_name ')'
				{
				DebugLocation(625, 27);
				string_literal469=(IToken)Match(input,130,Follow._130_in_cast_expr5656);  
				stream_130.Add(string_literal469);

				DebugLocation(625, 32);
				char_literal470=(IToken)Match(input,88,Follow._88_in_cast_expr5658);  
				stream_88.Add(char_literal470);

				DebugLocation(625, 36);
				PushFollow(Follow._type_name_in_cast_expr5660);
				type_name471=type_name();
				PopFollow();

				stream_type_name.Add(type_name471.Tree);
				DebugLocation(625, 46);
				char_literal472=(IToken)Match(input,89,Follow._89_in_cast_expr5662);  
				stream_89.Add(char_literal472);



				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 625:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(625, 53);
					// SugarCpp.g:625:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(625, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(625, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(625, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 83);
			LeaveRule("cast_expr", 83);
			LeaveRule_cast_expr();
		}
		DebugLocation(626, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:628:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 84);
		TraceIn("prefix_expr_op", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set473 = default(IToken);

		CommonTree set473_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(628, 71);
		try
		{
			// SugarCpp.g:628:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(628, 15);

			set473=(IToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==86||input.LA(1)==90||(input.LA(1)>=92 && input.LA(1)<=93)||(input.LA(1)>=96 && input.LA(1)<=97)||input.LA(1)==152||input.LA(1)==170)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set473));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 84);
			LeaveRule("prefix_expr_op", 84);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(628, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:629:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 85);
		TraceIn("prefix_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal476 = default(IToken);
		IToken char_literal478 = default(IToken);
		IToken char_literal480 = default(IToken);
		IToken char_literal481 = default(IToken);
		IToken char_literal483 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op474 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array477 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr484 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal476_tree = default(CommonTree);
		CommonTree char_literal478_tree = default(CommonTree);
		CommonTree char_literal480_tree = default(CommonTree);
		CommonTree char_literal481_tree = default(CommonTree);
		CommonTree char_literal483_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(629, 1);
		try
		{
			// SugarCpp.g:630:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) ) | suffix_expr )
			int alt216=3;
			try { DebugEnterDecision(216, false);
			switch (input.LA(1))
			{
			case 81:
			case 86:
			case 90:
			case 92:
			case 93:
			case 96:
			case 97:
			case 152:
			case 170:
				{
				alt216 = 1;
				}
				break;
			case 151:
				{
				alt216 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 88:
			case 123:
				{
				alt216 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 216, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(216); }
			switch (alt216)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:630:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(630, 4);
				// SugarCpp.g:630:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:630:5: prefix_expr_op prefix_expr
				{
				DebugLocation(630, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5724);
				prefix_expr_op474=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op474.Tree);
				DebugLocation(630, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5726);
				prefix_expr475=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr475.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 630:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(630, 36);
					// SugarCpp.g:630:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(630, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(630, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(630, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:631:4: 'new' type_no_array ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) )
				{
				DebugLocation(631, 4);
				string_literal476=(IToken)Match(input,151,Follow._151_in_prefix_expr5742);  
				stream_151.Add(string_literal476);

				DebugLocation(631, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr5744);
				type_no_array477=type_no_array();
				PopFollow();

				stream_type_no_array.Add(type_no_array477.Tree);
				DebugLocation(631, 24);
				// SugarCpp.g:631:24: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_no_array ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_New_Array type_no_array ( expr_list )? ) )
				int alt215=2;
				try { DebugEnterSubRule(215);
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==88))
				{
					alt215 = 1;
				}
				else if ((LA215_0==124))
				{
					alt215 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 215, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(215); }
				switch (alt215)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:631:26: '(' ( expr_list )? ')'
					{
					DebugLocation(631, 26);
					char_literal478=(IToken)Match(input,88,Follow._88_in_prefix_expr5748);  
					stream_88.Add(char_literal478);

					DebugLocation(631, 30);
					// SugarCpp.g:631:30: ( expr_list )?
					int alt213=2;
					try { DebugEnterSubRule(213);
					try { DebugEnterDecision(213, false);
					int LA213_0 = input.LA(1);

					if ((LA213_0==IDENT||LA213_0==NUMBER||LA213_0==STRING||LA213_0==81||LA213_0==86||LA213_0==88||LA213_0==90||(LA213_0>=92 && LA213_0<=93)||(LA213_0>=96 && LA213_0<=97)||(LA213_0>=123 && LA213_0<=124)||LA213_0==147||LA213_0==149||(LA213_0>=151 && LA213_0<=152)||LA213_0==170))
					{
						alt213 = 1;
					}
					} finally { DebugExitDecision(213); }
					switch (alt213)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:631:30: expr_list
						{
						DebugLocation(631, 30);
						PushFollow(Follow._expr_list_in_prefix_expr5750);
						expr_list479=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list479.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(213); }

					DebugLocation(631, 41);
					char_literal480=(IToken)Match(input,89,Follow._89_in_prefix_expr5753);  
					stream_89.Add(char_literal480);



					{
					// AST REWRITE
					// elements: expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 631:45: -> ^( Expr_New_Type type_no_array ( expr_list )? )
					{
						DebugLocation(631, 48);
						// SugarCpp.g:631:48: ^( Expr_New_Type type_no_array ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(631, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(631, 64);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(631, 78);
						// SugarCpp.g:631:78: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(631, 78);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:632:11: '[' ( expr_list )? ']'
					{
					DebugLocation(632, 11);
					char_literal481=(IToken)Match(input,124,Follow._124_in_prefix_expr5776);  
					stream_124.Add(char_literal481);

					DebugLocation(632, 15);
					// SugarCpp.g:632:15: ( expr_list )?
					int alt214=2;
					try { DebugEnterSubRule(214);
					try { DebugEnterDecision(214, false);
					int LA214_0 = input.LA(1);

					if ((LA214_0==IDENT||LA214_0==NUMBER||LA214_0==STRING||LA214_0==81||LA214_0==86||LA214_0==88||LA214_0==90||(LA214_0>=92 && LA214_0<=93)||(LA214_0>=96 && LA214_0<=97)||(LA214_0>=123 && LA214_0<=124)||LA214_0==147||LA214_0==149||(LA214_0>=151 && LA214_0<=152)||LA214_0==170))
					{
						alt214 = 1;
					}
					} finally { DebugExitDecision(214); }
					switch (alt214)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:632:15: expr_list
						{
						DebugLocation(632, 15);
						PushFollow(Follow._expr_list_in_prefix_expr5778);
						expr_list482=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list482.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(214); }

					DebugLocation(632, 26);
					char_literal483=(IToken)Match(input,125,Follow._125_in_prefix_expr5781);  
					stream_125.Add(char_literal483);



					{
					// AST REWRITE
					// elements: expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 632:30: -> ^( Expr_New_Array type_no_array ( expr_list )? )
					{
						DebugLocation(632, 33);
						// SugarCpp.g:632:33: ^( Expr_New_Array type_no_array ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(632, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(632, 50);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(632, 64);
						// SugarCpp.g:632:64: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(632, 64);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(215); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:634:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(634, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5807);
				suffix_expr484=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr484.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 85);
			LeaveRule("prefix_expr", 85);
			LeaveRule_prefix_expr();
		}
		DebugLocation(635, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:637:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 86);
		TraceIn("expr_list", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal486 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr485 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr487 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal486_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(637, 1);
		try
		{
			// SugarCpp.g:638:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:638:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(638, 4);
			PushFollow(Follow._expr_in_expr_list5819);
			expr485=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr485.Tree);
			DebugLocation(638, 9);
			// SugarCpp.g:638:9: ( ',' ! expr )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=2;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==95))
				{
					alt217 = 1;
				}


				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:638:10: ',' ! expr
					{
					DebugLocation(638, 13);
					char_literal486=(IToken)Match(input,95,Follow._95_in_expr_list5822); 
					DebugLocation(638, 15);
					PushFollow(Follow._expr_in_expr_list5825);
					expr487=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr487.Tree);

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 86);
			LeaveRule("expr_list", 86);
			LeaveRule_expr_list();
		}
		DebugLocation(639, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:641:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 87);
		TraceIn("suffix_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal488 = default(IToken);
		IToken string_literal489 = default(IToken);
		IToken char_literal490 = default(IToken);
		IToken string_literal492 = default(IToken);
		IToken char_literal494 = default(IToken);
		IToken char_literal496 = default(IToken);
		IToken char_literal497 = default(IToken);
		IToken char_literal498 = default(IToken);
		IToken char_literal500 = default(IToken);
		IToken char_literal501 = default(IToken);
		IToken char_literal502 = default(IToken);
		IToken char_literal504 = default(IToken);
		IToken char_literal506 = default(IToken);
		IToken char_literal507 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident493 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list499 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident503 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list505 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal488_tree = default(CommonTree);
		CommonTree string_literal489_tree = default(CommonTree);
		CommonTree char_literal490_tree = default(CommonTree);
		CommonTree string_literal492_tree = default(CommonTree);
		CommonTree char_literal494_tree = default(CommonTree);
		CommonTree char_literal496_tree = default(CommonTree);
		CommonTree char_literal497_tree = default(CommonTree);
		CommonTree char_literal498_tree = default(CommonTree);
		CommonTree char_literal500_tree = default(CommonTree);
		CommonTree char_literal501_tree = default(CommonTree);
		CommonTree char_literal502_tree = default(CommonTree);
		CommonTree char_literal504_tree = default(CommonTree);
		CommonTree char_literal506_tree = default(CommonTree);
		CommonTree char_literal507_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(641, 1);
		try
		{
			// SugarCpp.g:642:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:642:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )*
			{
			DebugLocation(642, 4);
			// SugarCpp.g:642:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:642:5: a= atom_expr
			{
			DebugLocation(642, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr5841);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 642:17: -> $a
			{
				DebugLocation(642, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(642, 24);
			// SugarCpp.g:642:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) | '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) ) )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=8;
				try { DebugEnterDecision(221, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt221 = 1;
					}
					break;
				case 97:
					{
					alt221 = 2;
					}
					break;
				case 101:
					{
					alt221 = 3;
					}
					break;
				case 99:
					{
					alt221 = 4;
					}
					break;
				case 88:
					{
					alt221 = 5;
					}
					break;
				case 124:
					{
					alt221 = 6;
					}
					break;
				case 123:
					{
					alt221 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:642:26: '++'
					{
					DebugLocation(642, 26);
					string_literal488=(IToken)Match(input,93,Follow._93_in_suffix_expr5851);  
					stream_93.Add(string_literal488);



					{
					// AST REWRITE
					// elements: 93, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 642:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(642, 34);
						// SugarCpp.g:642:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(642, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(642, 48);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(642, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:643:14: '--'
					{
					DebugLocation(643, 14);
					string_literal489=(IToken)Match(input,97,Follow._97_in_suffix_expr5877);  
					stream_97.Add(string_literal489);



					{
					// AST REWRITE
					// elements: 97, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 643:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(643, 22);
						// SugarCpp.g:643:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(643, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(643, 36);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(643, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:644:11: '.' ident
					{
					DebugLocation(644, 11);
					char_literal490=(IToken)Match(input,101,Follow._101_in_suffix_expr5900);  
					stream_101.Add(char_literal490);

					DebugLocation(644, 15);
					PushFollow(Follow._ident_in_suffix_expr5902);
					ident491=ident();
					PopFollow();

					stream_ident.Add(ident491.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 644:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(644, 24);
						// SugarCpp.g:644:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(644, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(644, 38);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(644, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(644, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:645:11: '->' ident
					{
					DebugLocation(645, 11);
					string_literal492=(IToken)Match(input,99,Follow._99_in_suffix_expr5927);  
					stream_99.Add(string_literal492);

					DebugLocation(645, 16);
					PushFollow(Follow._ident_in_suffix_expr5929);
					ident493=ident();
					PopFollow();

					stream_ident.Add(ident493.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 99, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 645:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(645, 25);
						// SugarCpp.g:645:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(645, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(645, 39);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(645, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(645, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:646:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(646, 11);
					char_literal494=(IToken)Match(input,88,Follow._88_in_suffix_expr5954);  
					stream_88.Add(char_literal494);

					DebugLocation(646, 15);
					// SugarCpp.g:646:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt218=2;
					try { DebugEnterSubRule(218);
					try { DebugEnterDecision(218, false);
					int LA218_0 = input.LA(1);

					if ((LA218_0==IDENT||LA218_0==NUMBER||LA218_0==STRING||LA218_0==81||LA218_0==86||LA218_0==88||LA218_0==90||(LA218_0>=92 && LA218_0<=93)||(LA218_0>=96 && LA218_0<=97)||(LA218_0>=123 && LA218_0<=124)||LA218_0==147||LA218_0==149||(LA218_0>=151 && LA218_0<=152)||LA218_0==170))
					{
						alt218 = 1;
					}
					else if ((LA218_0==89))
					{
						alt218 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 218, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(218); }
					switch (alt218)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:646:17: expr_list ')'
						{
						DebugLocation(646, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5958);
						expr_list495=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list495.Tree);
						DebugLocation(646, 27);
						char_literal496=(IToken)Match(input,89,Follow._89_in_suffix_expr5960);  
						stream_89.Add(char_literal496);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 646:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(646, 34);
							// SugarCpp.g:646:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(646, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(646, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(646, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:647:17: ')'
						{
						DebugLocation(647, 17);
						char_literal497=(IToken)Match(input,89,Follow._89_in_suffix_expr5989);  
						stream_89.Add(char_literal497);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 647:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(647, 24);
							// SugarCpp.g:647:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(647, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(647, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(218); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:649:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(649, 11);
					char_literal498=(IToken)Match(input,124,Follow._124_in_suffix_expr6020);  
					stream_124.Add(char_literal498);

					DebugLocation(649, 15);
					// SugarCpp.g:649:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt219=2;
					try { DebugEnterSubRule(219);
					try { DebugEnterDecision(219, false);
					int LA219_0 = input.LA(1);

					if ((LA219_0==IDENT||LA219_0==NUMBER||LA219_0==STRING||LA219_0==81||LA219_0==86||LA219_0==88||LA219_0==90||(LA219_0>=92 && LA219_0<=93)||(LA219_0>=96 && LA219_0<=97)||(LA219_0>=123 && LA219_0<=124)||LA219_0==147||LA219_0==149||(LA219_0>=151 && LA219_0<=152)||LA219_0==170))
					{
						alt219 = 1;
					}
					else if ((LA219_0==125))
					{
						alt219 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 219, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(219); }
					switch (alt219)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:649:17: expr_list ']'
						{
						DebugLocation(649, 17);
						PushFollow(Follow._expr_list_in_suffix_expr6024);
						expr_list499=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list499.Tree);
						DebugLocation(649, 27);
						char_literal500=(IToken)Match(input,125,Follow._125_in_suffix_expr6026);  
						stream_125.Add(char_literal500);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 649:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(649, 34);
							// SugarCpp.g:649:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(649, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(649, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(649, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:650:17: ']'
						{
						DebugLocation(650, 17);
						char_literal501=(IToken)Match(input,125,Follow._125_in_suffix_expr6055);  
						stream_125.Add(char_literal501);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 650:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(650, 24);
							// SugarCpp.g:650:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(650, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(650, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(219); }


					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:652:11: '@' ident '(' ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) )
					{
					DebugLocation(652, 11);
					char_literal502=(IToken)Match(input,123,Follow._123_in_suffix_expr6086);  
					stream_123.Add(char_literal502);

					DebugLocation(652, 15);
					PushFollow(Follow._ident_in_suffix_expr6088);
					ident503=ident();
					PopFollow();

					stream_ident.Add(ident503.Tree);
					DebugLocation(652, 21);
					char_literal504=(IToken)Match(input,88,Follow._88_in_suffix_expr6090);  
					stream_88.Add(char_literal504);

					DebugLocation(652, 25);
					// SugarCpp.g:652:25: ( expr_list ')' -> ^( Expr_Call_With $suffix_expr ident expr_list ) | ')' -> ^( Expr_Call_With $suffix_expr ident ) )
					int alt220=2;
					try { DebugEnterSubRule(220);
					try { DebugEnterDecision(220, false);
					int LA220_0 = input.LA(1);

					if ((LA220_0==IDENT||LA220_0==NUMBER||LA220_0==STRING||LA220_0==81||LA220_0==86||LA220_0==88||LA220_0==90||(LA220_0>=92 && LA220_0<=93)||(LA220_0>=96 && LA220_0<=97)||(LA220_0>=123 && LA220_0<=124)||LA220_0==147||LA220_0==149||(LA220_0>=151 && LA220_0<=152)||LA220_0==170))
					{
						alt220 = 1;
					}
					else if ((LA220_0==89))
					{
						alt220 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 220, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(220); }
					switch (alt220)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:652:27: expr_list ')'
						{
						DebugLocation(652, 27);
						PushFollow(Follow._expr_list_in_suffix_expr6094);
						expr_list505=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list505.Tree);
						DebugLocation(652, 37);
						char_literal506=(IToken)Match(input,89,Follow._89_in_suffix_expr6096);  
						stream_89.Add(char_literal506);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list, ident
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 652:41: -> ^( Expr_Call_With $suffix_expr ident expr_list )
						{
							DebugLocation(652, 44);
							// SugarCpp.g:652:44: ^( Expr_Call_With $suffix_expr ident expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(652, 46);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

							DebugLocation(652, 62);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(652, 74);
							adaptor.AddChild(root_1, stream_ident.NextTree());
							DebugLocation(652, 80);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:653:15: ')'
						{
						DebugLocation(653, 15);
						char_literal507=(IToken)Match(input,89,Follow._89_in_suffix_expr6125);  
						stream_89.Add(char_literal507);



						{
						// AST REWRITE
						// elements: suffix_expr, ident
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 653:19: -> ^( Expr_Call_With $suffix_expr ident )
						{
							DebugLocation(653, 22);
							// SugarCpp.g:653:22: ^( Expr_Call_With $suffix_expr ident )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(653, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

							DebugLocation(653, 40);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(653, 52);
							adaptor.AddChild(root_1, stream_ident.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(220); }


					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 87);
			LeaveRule("suffix_expr", 87);
			LeaveRule_suffix_expr();
		}
		DebugLocation(656, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:658:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 88);
		TraceIn("atom_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER508 = default(IToken);
		IToken STRING510 = default(IToken);
		IToken char_literal511 = default(IToken);
		IToken char_literal513 = default(IToken);
		IToken char_literal514 = default(IToken);
		IToken char_literal516 = default(IToken);
		IToken char_literal517 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident509 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident512 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr515 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER508_tree = default(CommonTree);
		CommonTree STRING510_tree = default(CommonTree);
		CommonTree char_literal511_tree = default(CommonTree);
		CommonTree char_literal513_tree = default(CommonTree);
		CommonTree char_literal514_tree = default(CommonTree);
		CommonTree char_literal516_tree = default(CommonTree);
		CommonTree char_literal517_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(658, 1);
		try
		{
			// SugarCpp.g:659:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt224=5;
			try { DebugEnterDecision(224, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt224 = 1;
				}
				break;
			case IDENT:
				{
				alt224 = 2;
				}
				break;
			case STRING:
				{
				alt224 = 3;
				}
				break;
			case 123:
				{
				alt224 = 4;
				}
				break;
			case 88:
				{
				alt224 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 224, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(224); }
			switch (alt224)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:659:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(659, 4);
				NUMBER508=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6175); 
				NUMBER508_tree = (CommonTree)adaptor.Create(NUMBER508);
				adaptor.AddChild(root_0, NUMBER508_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:660:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(660, 4);
				PushFollow(Follow._ident_in_atom_expr6180);
				ident509=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident509.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:661:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(661, 4);
				STRING510=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6185); 
				STRING510_tree = (CommonTree)adaptor.Create(STRING510);
				adaptor.AddChild(root_0, STRING510_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:662:4: '@' ident
				{
				DebugLocation(662, 4);
				char_literal511=(IToken)Match(input,123,Follow._123_in_atom_expr6190);  
				stream_123.Add(char_literal511);

				DebugLocation(662, 8);
				PushFollow(Follow._ident_in_atom_expr6192);
				ident512=ident();
				PopFollow();

				stream_ident.Add(ident512.Tree);


				{
				// AST REWRITE
				// elements: ident, 123
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 662:14: -> ^( '@' ident )
				{
					DebugLocation(662, 17);
					// SugarCpp.g:662:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(662, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(662, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:663:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(663, 4);
				char_literal513=(IToken)Match(input,88,Follow._88_in_atom_expr6205);  
				stream_88.Add(char_literal513);

				DebugLocation(663, 9);
				PushFollow(Follow._expr_in_atom_expr6209);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(663, 15);
				// SugarCpp.g:663:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt223=2;
				try { DebugEnterSubRule(223);
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==95))
				{
					alt223 = 1;
				}
				else if ((LA223_0==89))
				{
					alt223 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 223, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(223); }
				switch (alt223)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:663:17: ( ',' expr )+ ')'
					{
					DebugLocation(663, 17);
					// SugarCpp.g:663:17: ( ',' expr )+
					int cnt222=0;
					try { DebugEnterSubRule(222);
					while (true)
					{
						int alt222=2;
						try { DebugEnterDecision(222, false);
						int LA222_0 = input.LA(1);

						if ((LA222_0==95))
						{
							alt222 = 1;
						}


						} finally { DebugExitDecision(222); }
						switch (alt222)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:663:18: ',' expr
							{
							DebugLocation(663, 18);
							char_literal514=(IToken)Match(input,95,Follow._95_in_atom_expr6214);  
							stream_95.Add(char_literal514);

							DebugLocation(663, 22);
							PushFollow(Follow._expr_in_atom_expr6216);
							expr515=expr();
							PopFollow();

							stream_expr.Add(expr515.Tree);

							}
							break;

						default:
							if (cnt222 >= 1)
								goto loop222;

							EarlyExitException eee222 = new EarlyExitException( 222, input );
							DebugRecognitionException(eee222);
							throw eee222;
						}
						cnt222++;
					}
					loop222:
						;

					} finally { DebugExitSubRule(222); }

					DebugLocation(663, 29);
					char_literal516=(IToken)Match(input,89,Follow._89_in_atom_expr6220);  
					stream_89.Add(char_literal516);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 663:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(663, 36);
						// SugarCpp.g:663:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(663, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(663, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(663, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:664:17: ')' {...}?
					{
					DebugLocation(664, 17);
					char_literal517=(IToken)Match(input,89,Follow._89_in_atom_expr6247);  
					stream_89.Add(char_literal517);

					DebugLocation(664, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 664:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(664, 40);
						// SugarCpp.g:664:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(664, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(664, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(223); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 88);
			LeaveRule("atom_expr", 88);
			LeaveRule_atom_expr();
		}
		DebugLocation(666, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:668:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 89);
		TraceIn("lvalue_item", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix518 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(668, 1);
		try
		{
			// SugarCpp.g:669:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:669:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(669, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6278);
			lvalue_prefix518=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix518.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 89);
			LeaveRule("lvalue_item", 89);
			LeaveRule_lvalue_item();
		}
		DebugLocation(670, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:672:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 90);
		TraceIn("lvalue_prefix", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix521 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(672, 1);
		try
		{
			// SugarCpp.g:673:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt225=2;
			try { DebugEnterDecision(225, false);
			int LA225_0 = input.LA(1);

			if ((LA225_0==81||LA225_0==86||LA225_0==90||(LA225_0>=92 && LA225_0<=93)||(LA225_0>=96 && LA225_0<=97)||LA225_0==152||LA225_0==170))
			{
				alt225 = 1;
			}
			else if ((LA225_0==IDENT||LA225_0==123))
			{
				alt225 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 225, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(225); }
			switch (alt225)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:673:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(673, 4);
				// SugarCpp.g:673:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:673:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(673, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6290);
				prefix_expr_op519=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op519.Tree);
				DebugLocation(673, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6292);
				lvalue_prefix520=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix520.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 673:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(673, 38);
					// SugarCpp.g:673:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(673, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(673, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(673, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:674:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(674, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6308);
				lvalue_suffix521=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix521.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 90);
			LeaveRule("lvalue_prefix", 90);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(675, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:677:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 91);
		TraceIn("lvalue_suffix", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal522 = default(IToken);
		IToken string_literal523 = default(IToken);
		IToken char_literal524 = default(IToken);
		IToken string_literal526 = default(IToken);
		IToken char_literal529 = default(IToken);
		IToken char_literal531 = default(IToken);
		IToken char_literal532 = default(IToken);
		IToken char_literal534 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident525 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident527 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list530 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list533 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal522_tree = default(CommonTree);
		CommonTree string_literal523_tree = default(CommonTree);
		CommonTree char_literal524_tree = default(CommonTree);
		CommonTree string_literal526_tree = default(CommonTree);
		CommonTree char_literal529_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		CommonTree char_literal532_tree = default(CommonTree);
		CommonTree char_literal534_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(677, 1);
		try
		{
			// SugarCpp.g:678:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:678:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(678, 4);
			// SugarCpp.g:678:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:678:5: a= lvalue_atom
			{
			DebugLocation(678, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6322);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 678:19: -> $a
			{
				DebugLocation(678, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(678, 26);
			// SugarCpp.g:678:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(229);
			while (true)
			{
				int alt229=7;
				try { DebugEnterDecision(229, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt229 = 1;
					}
					break;
				case 97:
					{
					alt229 = 2;
					}
					break;
				case 101:
					{
					alt229 = 3;
					}
					break;
				case 99:
					{
					alt229 = 4;
					}
					break;
				case 88:
				case 109:
					{
					alt229 = 5;
					}
					break;
				case 124:
					{
					alt229 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(229); }
				switch ( alt229 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:678:28: '++'
					{
					DebugLocation(678, 28);
					string_literal522=(IToken)Match(input,93,Follow._93_in_lvalue_suffix6332);  
					stream_93.Add(string_literal522);



					{
					// AST REWRITE
					// elements: 93, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 678:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(678, 36);
						// SugarCpp.g:678:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(678, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(678, 50);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(678, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:679:16: '--'
					{
					DebugLocation(679, 16);
					string_literal523=(IToken)Match(input,97,Follow._97_in_lvalue_suffix6360);  
					stream_97.Add(string_literal523);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 97
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 679:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(679, 24);
						// SugarCpp.g:679:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(679, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(679, 38);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(679, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:680:13: '.' ident
					{
					DebugLocation(680, 13);
					char_literal524=(IToken)Match(input,101,Follow._101_in_lvalue_suffix6385);  
					stream_101.Add(char_literal524);

					DebugLocation(680, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6387);
					ident525=ident();
					PopFollow();

					stream_ident.Add(ident525.Tree);


					{
					// AST REWRITE
					// elements: 101, lvalue_suffix, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 680:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(680, 26);
						// SugarCpp.g:680:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(680, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(680, 40);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(680, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(680, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:681:13: '->' ident
					{
					DebugLocation(681, 13);
					string_literal526=(IToken)Match(input,99,Follow._99_in_lvalue_suffix6414);  
					stream_99.Add(string_literal526);

					DebugLocation(681, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6416);
					ident527=ident();
					PopFollow();

					stream_ident.Add(ident527.Tree);


					{
					// AST REWRITE
					// elements: ident, 99, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 681:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(681, 27);
						// SugarCpp.g:681:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(681, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(681, 41);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(681, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(681, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:682:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(682, 13);
					// SugarCpp.g:682:13: ( generic_parameter )?
					int alt226=2;
					try { DebugEnterSubRule(226);
					try { DebugEnterDecision(226, false);
					int LA226_0 = input.LA(1);

					if ((LA226_0==109))
					{
						alt226 = 1;
					}
					} finally { DebugExitDecision(226); }
					switch (alt226)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:682:13: generic_parameter
						{
						DebugLocation(682, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix6443);
						generic_parameter528=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter528.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(226); }

					DebugLocation(682, 32);
					char_literal529=(IToken)Match(input,88,Follow._88_in_lvalue_suffix6446);  
					stream_88.Add(char_literal529);

					DebugLocation(682, 36);
					// SugarCpp.g:682:36: ( expr_list )?
					int alt227=2;
					try { DebugEnterSubRule(227);
					try { DebugEnterDecision(227, false);
					int LA227_0 = input.LA(1);

					if ((LA227_0==IDENT||LA227_0==NUMBER||LA227_0==STRING||LA227_0==81||LA227_0==86||LA227_0==88||LA227_0==90||(LA227_0>=92 && LA227_0<=93)||(LA227_0>=96 && LA227_0<=97)||(LA227_0>=123 && LA227_0<=124)||LA227_0==147||LA227_0==149||(LA227_0>=151 && LA227_0<=152)||LA227_0==170))
					{
						alt227 = 1;
					}
					} finally { DebugExitDecision(227); }
					switch (alt227)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:682:36: expr_list
						{
						DebugLocation(682, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix6448);
						expr_list530=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list530.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(227); }

					DebugLocation(682, 47);
					char_literal531=(IToken)Match(input,89,Follow._89_in_lvalue_suffix6451);  
					stream_89.Add(char_literal531);



					{
					// AST REWRITE
					// elements: lvalue_suffix, generic_parameter, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 682:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(682, 54);
						// SugarCpp.g:682:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(682, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(682, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(682, 81);
						// SugarCpp.g:682:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(682, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(682, 100);
						// SugarCpp.g:682:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(682, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:683:13: '[' ( expr_list )? ']'
					{
					DebugLocation(683, 13);
					char_literal532=(IToken)Match(input,124,Follow._124_in_lvalue_suffix6480);  
					stream_124.Add(char_literal532);

					DebugLocation(683, 17);
					// SugarCpp.g:683:17: ( expr_list )?
					int alt228=2;
					try { DebugEnterSubRule(228);
					try { DebugEnterDecision(228, false);
					int LA228_0 = input.LA(1);

					if ((LA228_0==IDENT||LA228_0==NUMBER||LA228_0==STRING||LA228_0==81||LA228_0==86||LA228_0==88||LA228_0==90||(LA228_0>=92 && LA228_0<=93)||(LA228_0>=96 && LA228_0<=97)||(LA228_0>=123 && LA228_0<=124)||LA228_0==147||LA228_0==149||(LA228_0>=151 && LA228_0<=152)||LA228_0==170))
					{
						alt228 = 1;
					}
					} finally { DebugExitDecision(228); }
					switch (alt228)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:683:17: expr_list
						{
						DebugLocation(683, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix6482);
						expr_list533=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list533.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(228); }

					DebugLocation(683, 28);
					char_literal534=(IToken)Match(input,125,Follow._125_in_lvalue_suffix6485);  
					stream_125.Add(char_literal534);



					{
					// AST REWRITE
					// elements: lvalue_suffix, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 683:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(683, 35);
						// SugarCpp.g:683:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(683, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(683, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(683, 62);
						// SugarCpp.g:683:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(683, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop229;
				}
			}

			loop229:
				;

			} finally { DebugExitSubRule(229); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 91);
			LeaveRule("lvalue_suffix", 91);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(685, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:687:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 92);
		TraceIn("lvalue_atom", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal536 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident537 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal536_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(687, 1);
		try
		{
			// SugarCpp.g:688:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt230=2;
			try { DebugEnterDecision(230, false);
			int LA230_0 = input.LA(1);

			if ((LA230_0==IDENT))
			{
				alt230 = 1;
			}
			else if ((LA230_0==123))
			{
				alt230 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:688:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(688, 4);
				PushFollow(Follow._ident_in_lvalue_atom6524);
				ident535=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident535.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:689:4: '@' ident
				{
				DebugLocation(689, 4);
				char_literal536=(IToken)Match(input,123,Follow._123_in_lvalue_atom6529);  
				stream_123.Add(char_literal536);

				DebugLocation(689, 8);
				PushFollow(Follow._ident_in_lvalue_atom6531);
				ident537=ident();
				PopFollow();

				stream_ident.Add(ident537.Tree);


				{
				// AST REWRITE
				// elements: 123, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 689:14: -> ^( '@' ident )
				{
					DebugLocation(689, 17);
					// SugarCpp.g:689:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(689, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_123.NextNode(), root_1);

					DebugLocation(689, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 92);
			LeaveRule("lvalue_atom", 92);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(690, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:692:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 93);
		TraceIn("lvalue", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal538 = default(IToken);
		IToken char_literal540 = default(IToken);
		IToken char_literal542 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item539 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item541 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item543 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal538_tree = default(CommonTree);
		CommonTree char_literal540_tree = default(CommonTree);
		CommonTree char_literal542_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(692, 1);
		try
		{
			// SugarCpp.g:693:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt232=2;
			try { DebugEnterDecision(232, false);
			int LA232_0 = input.LA(1);

			if ((LA232_0==88))
			{
				alt232 = 1;
			}
			else if ((LA232_0==IDENT||LA232_0==81||LA232_0==86||LA232_0==90||(LA232_0>=92 && LA232_0<=93)||(LA232_0>=96 && LA232_0<=97)||LA232_0==123||LA232_0==152||LA232_0==170))
			{
				alt232 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 232, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(232); }
			switch (alt232)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:693:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(693, 4);
				char_literal538=(IToken)Match(input,88,Follow._88_in_lvalue6550);  
				stream_88.Add(char_literal538);

				DebugLocation(693, 8);
				PushFollow(Follow._lvalue_item_in_lvalue6552);
				lvalue_item539=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item539.Tree);
				DebugLocation(693, 20);
				// SugarCpp.g:693:20: ( ',' lvalue_item )+
				int cnt231=0;
				try { DebugEnterSubRule(231);
				while (true)
				{
					int alt231=2;
					try { DebugEnterDecision(231, false);
					int LA231_0 = input.LA(1);

					if ((LA231_0==95))
					{
						alt231 = 1;
					}


					} finally { DebugExitDecision(231); }
					switch (alt231)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:693:21: ',' lvalue_item
						{
						DebugLocation(693, 21);
						char_literal540=(IToken)Match(input,95,Follow._95_in_lvalue6555);  
						stream_95.Add(char_literal540);

						DebugLocation(693, 25);
						PushFollow(Follow._lvalue_item_in_lvalue6557);
						lvalue_item541=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item541.Tree);

						}
						break;

					default:
						if (cnt231 >= 1)
							goto loop231;

						EarlyExitException eee231 = new EarlyExitException( 231, input );
						DebugRecognitionException(eee231);
						throw eee231;
					}
					cnt231++;
				}
				loop231:
					;

				} finally { DebugExitSubRule(231); }

				DebugLocation(693, 39);
				char_literal542=(IToken)Match(input,89,Follow._89_in_lvalue6561);  
				stream_89.Add(char_literal542);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 693:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(693, 46);
					// SugarCpp.g:693:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(693, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(693, 60);
					// SugarCpp.g:693:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(693, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:694:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(694, 4);
				PushFollow(Follow._lvalue_item_in_lvalue6575);
				lvalue_item543=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item543.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 93);
			LeaveRule("lvalue", 93);
			LeaveRule_lvalue();
		}
		DebugLocation(695, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:697:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 94);
		TraceIn("ident", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT544 = default(IToken);
		IToken string_literal545 = default(IToken);
		IToken IDENT546 = default(IToken);

		CommonTree IDENT544_tree = default(CommonTree);
		CommonTree string_literal545_tree = default(CommonTree);
		CommonTree IDENT546_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(697, 1);
		try
		{
			// SugarCpp.g:698:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:698:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(698, 4);
			IDENT544=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6586); 
			IDENT544_tree = (CommonTree)adaptor.Create(IDENT544);
			adaptor.AddChild(root_0, IDENT544_tree);
			DebugLocation(698, 10);
			// SugarCpp.g:698:10: ( '::' IDENT )*
			try { DebugEnterSubRule(233);
			while (true)
			{
				int alt233=2;
				try { DebugEnterDecision(233, false);
				int LA233_0 = input.LA(1);

				if ((LA233_0==106))
				{
					alt233 = 1;
				}


				} finally { DebugExitDecision(233); }
				switch ( alt233 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:698:11: '::' IDENT
					{
					DebugLocation(698, 11);
					string_literal545=(IToken)Match(input,106,Follow._106_in_ident6589); 
					string_literal545_tree = (CommonTree)adaptor.Create(string_literal545);
					adaptor.AddChild(root_0, string_literal545_tree);
					DebugLocation(698, 16);
					IDENT546=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6591); 
					IDENT546_tree = (CommonTree)adaptor.Create(IDENT546);
					adaptor.AddChild(root_0, IDENT546_tree);

					}
					break;

				default:
					goto loop233;
				}
			}

			loop233:
				;

			} finally { DebugExitSubRule(233); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 94);
			LeaveRule("ident", 94);
			LeaveRule_ident();
		}
		DebugLocation(699, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:701:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 95);
		TraceIn("infix_func", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal547 = default(IToken);
		IToken char_literal549 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident548 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal547_tree = default(CommonTree);
		CommonTree char_literal549_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(701, 1);
		try
		{
			// SugarCpp.g:702:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:702:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(702, 7);
			char_literal547=(IToken)Match(input,128,Follow._128_in_infix_func6604); 
			DebugLocation(702, 9);
			PushFollow(Follow._ident_in_infix_func6607);
			ident548=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident548.Tree);
			DebugLocation(702, 18);
			char_literal549=(IToken)Match(input,128,Follow._128_in_infix_func6609); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 95);
			LeaveRule("infix_func", 95);
			LeaveRule_infix_func();
		}
		DebugLocation(703, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA43 dfa43;
	private DFA50 dfa50;
	private DFA94 dfa94;
	private DFA103 dfa103;
	private DFA108 dfa108;
	private DFA121 dfa121;
	private DFA164 dfa164;
	private DFA153 dfa153;
	private DFA185 dfa185;
	private DFA184 dfa184;
	private DFA190 dfa190;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa43 = new DFA43( this );
		dfa50 = new DFA50( this );
		dfa94 = new DFA94( this );
		dfa103 = new DFA103( this );
		dfa108 = new DFA108( this );
		dfa121 = new DFA121( this );
		dfa164 = new DFA164( this );
		dfa153 = new DFA153( this );
		dfa185 = new DFA185( this );
		dfa184 = new DFA184( this );
		dfa190 = new DFA190( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2A\x1\xFFFF\x1\x2A\x6\xFFFF\x2\x58\x1\x2A\x1\xFFFF\x3\x2A\x1\x33"+
			"\x2\x2A\x1\x58\x3\x59\x2\x58\x1\x2A\x3\x59\x1\x2A\x1\x5F\x5\x2A\x1\x5F"+
			"\x1\x2A\x4\x59\x1\x58\xA\x59\x2\x2A\x1\x5F\x2\x2A\x1\x5F\x2\x2A\xA\x59"+
			"\x2\x2A\x2\x59";
		private const string DFA4_maxS =
			"\x1\xA3\x1\x87\x1\xFFFF\x1\xAA\x6\xFFFF\x2\x7D\x1\x2A\x1\xFFFF\x1\x2A"+
			"\x1\x39\x1\x87\x1\x33\x1\x39\x1\xAA\x1\x7D\x2\x5F\x1\x6A\x2\x7D\x1\xA3"+
			"\x2\x5F\x1\x6A\x1\x39\x1\x7D\x2\x2A\x3\x39\x1\x7D\x1\x2A\x2\x5F\x2\x6A"+
			"\x1\x7D\x2\x5F\x1\x6A\x2\x5F\x1\x6A\x2\x5F\x2\x6A\x1\x2A\x1\x39\x1\x7D"+
			"\x1\x2A\x1\x39\x1\x7D\x2\x2A\x1\x6A\x2\x5F\x2\x6A\x2\x5F\x3\x6A\x2\x2A"+
			"\x2\x6A";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4"+
				"\xFFFF\x1\x7\x2\xFFFF\x1\x6",
				"\x1\xA\x5C\xFFFF\x1\xB",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2D\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5C\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2D\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x24\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9"+
				"\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "214:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x33\x1\xA3\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "258:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x33\x1\xA3\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "266:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA43 : DFA
	{
		private const string DFA43_eotS =
			"\x4\xFFFF";
		private const string DFA43_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA43_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA43_maxS =
			"\x1\x33\x1\xA3\x2\xFFFF";
		private const string DFA43_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA43_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA43_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA43_eot = DFA.UnpackEncodedString(DFA43_eotS);
		private static readonly short[] DFA43_eof = DFA.UnpackEncodedString(DFA43_eofS);
		private static readonly char[] DFA43_min = DFA.UnpackEncodedStringToUnsignedChars(DFA43_minS);
		private static readonly char[] DFA43_max = DFA.UnpackEncodedStringToUnsignedChars(DFA43_maxS);
		private static readonly short[] DFA43_accept = DFA.UnpackEncodedString(DFA43_acceptS);
		private static readonly short[] DFA43_special = DFA.UnpackEncodedString(DFA43_specialS);
		private static readonly short[][] DFA43_transition;

		static DFA43()
		{
			int numStates = DFA43_transitionS.Length;
			DFA43_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA43_transition[i] = DFA.UnpackEncodedString(DFA43_transitionS[i]);
			}
		}

		public DFA43( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 43;
			this.eot = DFA43_eot;
			this.eof = DFA43_eof;
			this.min = DFA43_min;
			this.max = DFA43_max;
			this.accept = DFA43_accept;
			this.special = DFA43_special;
			this.transition = DFA43_transition;
		}

		public override string Description { get { return "270:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA50 : DFA
	{
		private const string DFA50_eotS =
			"\x4\xFFFF";
		private const string DFA50_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA50_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA50_maxS =
			"\x1\x33\x1\xA3\x2\xFFFF";
		private const string DFA50_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA50_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA50_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA50_eot = DFA.UnpackEncodedString(DFA50_eotS);
		private static readonly short[] DFA50_eof = DFA.UnpackEncodedString(DFA50_eofS);
		private static readonly char[] DFA50_min = DFA.UnpackEncodedStringToUnsignedChars(DFA50_minS);
		private static readonly char[] DFA50_max = DFA.UnpackEncodedStringToUnsignedChars(DFA50_maxS);
		private static readonly short[] DFA50_accept = DFA.UnpackEncodedString(DFA50_acceptS);
		private static readonly short[] DFA50_special = DFA.UnpackEncodedString(DFA50_specialS);
		private static readonly short[][] DFA50_transition;

		static DFA50()
		{
			int numStates = DFA50_transitionS.Length;
			DFA50_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA50_transition[i] = DFA.UnpackEncodedString(DFA50_transitionS[i]);
			}
		}

		public DFA50( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}

		public override string Description { get { return "271:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA94 : DFA
	{
		private const string DFA94_eotS =
			"\x9\xFFFF";
		private const string DFA94_eofS =
			"\x9\xFFFF";
		private const string DFA94_minS =
			"\x1\x2A\x1\x8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA94_maxS =
			"\x1\xAA\x1\xA8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\xA8";
		private const string DFA94_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA94_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA94_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x1C\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x2\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2A\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA94_eot = DFA.UnpackEncodedString(DFA94_eotS);
		private static readonly short[] DFA94_eof = DFA.UnpackEncodedString(DFA94_eofS);
		private static readonly char[] DFA94_min = DFA.UnpackEncodedStringToUnsignedChars(DFA94_minS);
		private static readonly char[] DFA94_max = DFA.UnpackEncodedStringToUnsignedChars(DFA94_maxS);
		private static readonly short[] DFA94_accept = DFA.UnpackEncodedString(DFA94_acceptS);
		private static readonly short[] DFA94_special = DFA.UnpackEncodedString(DFA94_specialS);
		private static readonly short[][] DFA94_transition;

		static DFA94()
		{
			int numStates = DFA94_transitionS.Length;
			DFA94_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA94_transition[i] = DFA.UnpackEncodedString(DFA94_transitionS[i]);
			}
		}

		public DFA94( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 94;
			this.eot = DFA94_eot;
			this.eof = DFA94_eof;
			this.min = DFA94_min;
			this.max = DFA94_max;
			this.accept = DFA94_accept;
			this.special = DFA94_special;
			this.transition = DFA94_transition;
		}

		public override string Description { get { return "391:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA103 : DFA
	{
		private const string DFA103_eotS =
			"\x4\xFFFF";
		private const string DFA103_eofS =
			"\x4\xFFFF";
		private const string DFA103_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA103_maxS =
			"\x1\x90\x1\xAA\x2\xFFFF";
		private const string DFA103_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA103_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA103_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA103_eot = DFA.UnpackEncodedString(DFA103_eotS);
		private static readonly short[] DFA103_eof = DFA.UnpackEncodedString(DFA103_eofS);
		private static readonly char[] DFA103_min = DFA.UnpackEncodedStringToUnsignedChars(DFA103_minS);
		private static readonly char[] DFA103_max = DFA.UnpackEncodedStringToUnsignedChars(DFA103_maxS);
		private static readonly short[] DFA103_accept = DFA.UnpackEncodedString(DFA103_acceptS);
		private static readonly short[] DFA103_special = DFA.UnpackEncodedString(DFA103_specialS);
		private static readonly short[][] DFA103_transition;

		static DFA103()
		{
			int numStates = DFA103_transitionS.Length;
			DFA103_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA103_transition[i] = DFA.UnpackEncodedString(DFA103_transitionS[i]);
			}
		}

		public DFA103( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 103;
			this.eot = DFA103_eot;
			this.eof = DFA103_eof;
			this.min = DFA103_min;
			this.max = DFA103_max;
			this.accept = DFA103_accept;
			this.special = DFA103_special;
			this.transition = DFA103_transition;
		}

		public override string Description { get { return "422:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA108 : DFA
	{
		private const string DFA108_eotS =
			"\x4\xFFFF";
		private const string DFA108_eofS =
			"\x4\xFFFF";
		private const string DFA108_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA108_maxS =
			"\x1\x90\x1\xAA\x2\xFFFF";
		private const string DFA108_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA108_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA108_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
		private static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
		private static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
		private static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
		private static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
		private static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
		private static readonly short[][] DFA108_transition;

		static DFA108()
		{
			int numStates = DFA108_transitionS.Length;
			DFA108_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA108_transition[i] = DFA.UnpackEncodedString(DFA108_transitionS[i]);
			}
		}

		public DFA108( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 108;
			this.eot = DFA108_eot;
			this.eof = DFA108_eof;
			this.min = DFA108_min;
			this.max = DFA108_max;
			this.accept = DFA108_accept;
			this.special = DFA108_special;
			this.transition = DFA108_transition;
		}

		public override string Description { get { return "425:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA121 : DFA
	{
		private const string DFA121_eotS =
			"\x6\xFFFF";
		private const string DFA121_eofS =
			"\x6\xFFFF";
		private const string DFA121_minS =
			"\x1\x2A\x1\x8\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA121_maxS =
			"\x1\xAA\x1\xA9\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xA9";
		private const string DFA121_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA121_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA121_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x2A\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF\x4\x2"
			};

		private static readonly short[] DFA121_eot = DFA.UnpackEncodedString(DFA121_eotS);
		private static readonly short[] DFA121_eof = DFA.UnpackEncodedString(DFA121_eofS);
		private static readonly char[] DFA121_min = DFA.UnpackEncodedStringToUnsignedChars(DFA121_minS);
		private static readonly char[] DFA121_max = DFA.UnpackEncodedStringToUnsignedChars(DFA121_maxS);
		private static readonly short[] DFA121_accept = DFA.UnpackEncodedString(DFA121_acceptS);
		private static readonly short[] DFA121_special = DFA.UnpackEncodedString(DFA121_specialS);
		private static readonly short[][] DFA121_transition;

		static DFA121()
		{
			int numStates = DFA121_transitionS.Length;
			DFA121_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA121_transition[i] = DFA.UnpackEncodedString(DFA121_transitionS[i]);
			}
		}

		public DFA121( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 121;
			this.eot = DFA121_eot;
			this.eof = DFA121_eof;
			this.min = DFA121_min;
			this.max = DFA121_max;
			this.accept = DFA121_accept;
			this.special = DFA121_special;
			this.transition = DFA121_transition;
		}

		public override string Description { get { return "451:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA164 : DFA
	{
		private const string DFA164_eotS =
			"\x7\xFFFF";
		private const string DFA164_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA164_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA164_maxS =
			"\x1\xA6\x1\xAA\x2\xFFFF\x2\xAA\x1\xFFFF";
		private const string DFA164_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA164_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA164_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xC\xFFFF\x1\x3\x20\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x10\xFFFF\x2\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x6\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x3\xFFFF"+
				"\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x3\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA164_eot = DFA.UnpackEncodedString(DFA164_eotS);
		private static readonly short[] DFA164_eof = DFA.UnpackEncodedString(DFA164_eofS);
		private static readonly char[] DFA164_min = DFA.UnpackEncodedStringToUnsignedChars(DFA164_minS);
		private static readonly char[] DFA164_max = DFA.UnpackEncodedStringToUnsignedChars(DFA164_maxS);
		private static readonly short[] DFA164_accept = DFA.UnpackEncodedString(DFA164_acceptS);
		private static readonly short[] DFA164_special = DFA.UnpackEncodedString(DFA164_specialS);
		private static readonly short[][] DFA164_transition;

		static DFA164()
		{
			int numStates = DFA164_transitionS.Length;
			DFA164_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA164_transition[i] = DFA.UnpackEncodedString(DFA164_transitionS[i]);
			}
		}

		public DFA164( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 164;
			this.eot = DFA164_eot;
			this.eof = DFA164_eof;
			this.min = DFA164_min;
			this.max = DFA164_max;
			this.accept = DFA164_accept;
			this.special = DFA164_special;
			this.transition = DFA164_transition;
		}

		public override string Description { get { return "501:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA153 : DFA
	{
		private const string DFA153_eotS =
			"\x4\xFFFF";
		private const string DFA153_eofS =
			"\x4\xFFFF";
		private const string DFA153_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA153_maxS =
			"\x2\x33\x2\xFFFF";
		private const string DFA153_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA153_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA153_transitionS =
			{
				"\x1\x2\x2A\xFFFF\x1\x1",
				"\x1\x2\x22\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA153_eot = DFA.UnpackEncodedString(DFA153_eotS);
		private static readonly short[] DFA153_eof = DFA.UnpackEncodedString(DFA153_eofS);
		private static readonly char[] DFA153_min = DFA.UnpackEncodedStringToUnsignedChars(DFA153_minS);
		private static readonly char[] DFA153_max = DFA.UnpackEncodedStringToUnsignedChars(DFA153_maxS);
		private static readonly short[] DFA153_accept = DFA.UnpackEncodedString(DFA153_acceptS);
		private static readonly short[] DFA153_special = DFA.UnpackEncodedString(DFA153_specialS);
		private static readonly short[][] DFA153_transition;

		static DFA153()
		{
			int numStates = DFA153_transitionS.Length;
			DFA153_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA153_transition[i] = DFA.UnpackEncodedString(DFA153_transitionS[i]);
			}
		}

		public DFA153( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 153;
			this.eot = DFA153_eot;
			this.eof = DFA153_eof;
			this.min = DFA153_min;
			this.max = DFA153_max;
			this.accept = DFA153_accept;
			this.special = DFA153_special;
			this.transition = DFA153_transition;
		}

		public override string Description { get { return "501:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA185 : DFA
	{
		private const string DFA185_eotS =
			"\x7\xFFFF";
		private const string DFA185_eofS =
			"\x7\xFFFF";
		private const string DFA185_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA185_maxS =
			"\x5\xAA\x2\xFFFF";
		private const string DFA185_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA185_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA185_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA185_eot = DFA.UnpackEncodedString(DFA185_eotS);
		private static readonly short[] DFA185_eof = DFA.UnpackEncodedString(DFA185_eofS);
		private static readonly char[] DFA185_min = DFA.UnpackEncodedStringToUnsignedChars(DFA185_minS);
		private static readonly char[] DFA185_max = DFA.UnpackEncodedStringToUnsignedChars(DFA185_maxS);
		private static readonly short[] DFA185_accept = DFA.UnpackEncodedString(DFA185_acceptS);
		private static readonly short[] DFA185_special = DFA.UnpackEncodedString(DFA185_specialS);
		private static readonly short[][] DFA185_transition;

		static DFA185()
		{
			int numStates = DFA185_transitionS.Length;
			DFA185_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA185_transition[i] = DFA.UnpackEncodedString(DFA185_transitionS[i]);
			}
		}

		public DFA185( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 185;
			this.eot = DFA185_eot;
			this.eof = DFA185_eof;
			this.min = DFA185_min;
			this.max = DFA185_max;
			this.accept = DFA185_accept;
			this.special = DFA185_special;
			this.transition = DFA185_transition;
		}

		public override string Description { get { return "536:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA184 : DFA
	{
		private const string DFA184_eotS =
			"\x7\xFFFF";
		private const string DFA184_eofS =
			"\x7\xFFFF";
		private const string DFA184_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA184_maxS =
			"\x1\x7D\x4\xAA\x2\xFFFF";
		private const string DFA184_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA184_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA184_transitionS =
			{
				"\x1\x4\x22\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA184_eot = DFA.UnpackEncodedString(DFA184_eotS);
		private static readonly short[] DFA184_eof = DFA.UnpackEncodedString(DFA184_eofS);
		private static readonly char[] DFA184_min = DFA.UnpackEncodedStringToUnsignedChars(DFA184_minS);
		private static readonly char[] DFA184_max = DFA.UnpackEncodedStringToUnsignedChars(DFA184_maxS);
		private static readonly short[] DFA184_accept = DFA.UnpackEncodedString(DFA184_acceptS);
		private static readonly short[] DFA184_special = DFA.UnpackEncodedString(DFA184_specialS);
		private static readonly short[][] DFA184_transition;

		static DFA184()
		{
			int numStates = DFA184_transitionS.Length;
			DFA184_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA184_transition[i] = DFA.UnpackEncodedString(DFA184_transitionS[i]);
			}
		}

		public DFA184( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 184;
			this.eot = DFA184_eot;
			this.eof = DFA184_eof;
			this.min = DFA184_min;
			this.max = DFA184_max;
			this.accept = DFA184_accept;
			this.special = DFA184_special;
			this.transition = DFA184_transition;
		}

		public override string Description { get { return "()* loopback of 536:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA190 : DFA
	{
		private const string DFA190_eotS =
			"\xB\xFFFF";
		private const string DFA190_eofS =
			"\xB\xFFFF";
		private const string DFA190_minS =
			"\x2\x2A\x1\xFFFF\x1\x52\x1\xFFFF\x2\x2A\x2\x52\x1\x2A\x1\x52";
		private const string DFA190_maxS =
			"\x2\xAA\x1\xFFFF\x1\xA9\x1\xFFFF\x1\x2A\x1\xAA\x2\xA9\x1\x2A\x1\xA9";
		private const string DFA190_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA190_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA190_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x16\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11"+
				"\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2"
			};

		private static readonly short[] DFA190_eot = DFA.UnpackEncodedString(DFA190_eotS);
		private static readonly short[] DFA190_eof = DFA.UnpackEncodedString(DFA190_eofS);
		private static readonly char[] DFA190_min = DFA.UnpackEncodedStringToUnsignedChars(DFA190_minS);
		private static readonly char[] DFA190_max = DFA.UnpackEncodedStringToUnsignedChars(DFA190_maxS);
		private static readonly short[] DFA190_accept = DFA.UnpackEncodedString(DFA190_acceptS);
		private static readonly short[] DFA190_special = DFA.UnpackEncodedString(DFA190_specialS);
		private static readonly short[][] DFA190_transition;

		static DFA190()
		{
			int numStates = DFA190_transitionS.Length;
			DFA190_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA190_transition[i] = DFA.UnpackEncodedString(DFA190_transitionS[i]);
			}
		}

		public DFA190( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 190;
			this.eot = DFA190_eot;
			this.eof = DFA190_eof;
			this.min = DFA190_min;
			this.max = DFA190_max;
			this.accept = DFA190_accept;
			this.special = DFA190_special;
			this.transition = DFA190_transition;
		}

		public override string Description { get { return "540:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root559 = new BitSet(new ulong[]{0x8040000000000UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _global_block_in_root562 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block584 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block586 = new BitSet(new ulong[]{0x8040000000002UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _func_def_in_node609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node634 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item677 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item680 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item682 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item685 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item687 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_attribute_item709 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_attribute_item712 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item714 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_attribute_item717 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item719 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_attribute_item723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_attribute748 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _attribute_item_in_attribute750 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_attribute753 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _attribute_item_in_attribute755 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_attribute759 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute761 = new BitSet(new ulong[]{0x8000000000002UL,0x1000000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc780 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc783 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_global_alloc787 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_global_alloc789 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_global_alloc794 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _107_in_global_alloc798 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_global_alloc801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_global_alloc861 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_global_alloc863 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_global_alloc866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_global_alloc939 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_global_alloc942 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_global_alloc945 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_global_alloc947 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _attribute_in_global_using984 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_global_using987 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x400000UL});
		public static readonly BitSet _stmt_using_item_in_global_using989 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x400000UL});
		public static readonly BitSet _attribute_in_global_typedef1013 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000UL});
		public static readonly BitSet _160_in_global_typedef1016 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef1018 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_global_typedef1020 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_global_typedef1022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1046 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_import_def1049 = new BitSet(new ulong[]{0x208000000000002UL});
		public static readonly BitSet _STRING_in_import_def1051 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1055 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_import_def1058 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1060 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _STRING_in_import_def1065 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1067 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1097 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_enum_def1100 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1102 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_enum_def1104 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _ident_in_enum_def1107 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_enum_def1110 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1112 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1145 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_namespace_def1148 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_namespace_def1150 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1153 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1156 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1158 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _global_block_in_namespace_def1161 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1191 = new BitSet(new ulong[]{0x0UL,0x0UL,0x50UL});
		public static readonly BitSet _134_in_class_def1196 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1198 = new BitSet(new ulong[]{0x8000000000002UL,0x220000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1201 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000000UL});
		public static readonly BitSet _105_in_class_def1206 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1208 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _95_in_class_def1211 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1213 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1220 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1223 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _NEWLINE_in_class_def1225 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _global_block_in_class_def1228 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_class_def1272 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_class_def1274 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1276 = new BitSet(new ulong[]{0x8000000000002UL,0x220001000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1279 = new BitSet(new ulong[]{0x8000000000002UL,0x20001000000UL});
		public static readonly BitSet _88_in_class_def1284 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_in_class_def1286 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_class_def1288 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000000UL});
		public static readonly BitSet _105_in_class_def1293 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1295 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _95_in_class_def1298 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1300 = new BitSet(new ulong[]{0x8000000000002UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1307 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1310 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _NEWLINE_in_class_def1312 = new BitSet(new ulong[]{0x8040000000100UL,0x1000000001000000UL,0x9084088D0UL});
		public static readonly BitSet _global_block_in_class_def1315 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1317 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1370 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_type_list1373 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_type_list1375 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _type_single_in_type_name1397 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1401 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_type_name1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1408 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1451 = new BitSet(new ulong[]{0x40000000000UL,0x3000000UL,0x8000080UL});
		public static readonly BitSet _type_list_in_type_name1453 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1456 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_type_name1458 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_type_name1461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_type_name1465 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_type_name1467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1491 = new BitSet(new ulong[]{0x2UL,0x1000000000400000UL});
		public static readonly BitSet _86_in_type_single1495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_type_single1511 = new BitSet(new ulong[]{0x210040000000000UL,0x38000003B5420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_type_single1515 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_type_single1518 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_type_single1520 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_type_single1524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_type_single1549 = new BitSet(new ulong[]{0x0UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_type_single1552 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1599 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_type_no_array1603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1638 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_type_star1642 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1688 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_type_template_type1692 = new BitSet(new ulong[]{0x40000000000UL,0x20000001000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_type_template_type1695 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _95_in_type_template_type1698 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_type_template_type1700 = new BitSet(new ulong[]{0x0UL,0x20000080000000UL});
		public static readonly BitSet _117_in_type_template_type1706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_type_ident1746 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_type_ident1749 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident1752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1777 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_generic_parameter_inside1780 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1782 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _109_in_generic_parameter1804 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1806 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _117_in_generic_parameter1808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1823 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_func_args1826 = new BitSet(new ulong[]{0x40000000000UL,0x80000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1828 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1850 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_func_args_item1852 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_func_args_item1854 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_func_args_item1859 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _107_in_func_args_item1863 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_func_args_item1866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_args_item1914 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_func_args_item1916 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_args_item1919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_func_args_item1976 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_name2023 = new BitSet(new ulong[]{0x0UL,0x8114000000UL});
		public static readonly BitSet _operator_in_func_name2025 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_name2027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2053 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _func_type_in_func_def2056 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x40000000000UL});
		public static readonly BitSet _170_in_func_def2058 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL});
		public static readonly BitSet _func_name_in_func_def2061 = new BitSet(new ulong[]{0x0UL,0x200001000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2063 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_func_def2066 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_func_def2068 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_func_def2071 = new BitSet(new ulong[]{0x8000000000000UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2075 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_func_def2127 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_func_def2129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2169 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2171 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2181 = new BitSet(new ulong[]{0x8000000000000UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2184 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _108_in_stmt_block_item2189 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2191 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2208 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2210 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2213 = new BitSet(new ulong[]{0x40000000100UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _DEDENT_in_stmt_block2216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2236 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2268 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2283 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2302 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4600006000UL});
		public static readonly BitSet _142_in_stmt_expr2312 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_expr2314 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4600006000UL});
		public static readonly BitSet _161_in_stmt_expr2343 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_expr2345 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4600006000UL});
		public static readonly BitSet _166_in_stmt_expr2374 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_expr2376 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4600006000UL});
		public static readonly BitSet _162_in_stmt_expr2405 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_expr2407 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4600006000UL});
		public static readonly BitSet _141_in_stmt_expr2436 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _for_item_in_stmt_expr2438 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x4600006000UL});
		public static readonly BitSet _95_in_stmt_expr2441 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _for_item_in_stmt_expr2443 = new BitSet(new ulong[]{0x2UL,0x80000000UL,0x4600006000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2485 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_defer2516 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _stmt_in_stmt_defer2518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_stmt_defer2531 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _stmt_in_stmt_defer2533 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_typedef2552 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2554 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_stmt_typedef2556 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_stmt_typedef2558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2577 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_stmt_using_item2581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_using2589 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x400000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2591 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x400000UL});
		public static readonly BitSet _154_in_stmt_return2612 = new BitSet(new ulong[]{0x210040000000002UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_return2614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2635 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_inline_stmt_block2638 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40905000000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2640 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _142_in_stmt_if2662 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_if2664 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2667 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2670 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2673 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_stmt_if2676 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2678 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2681 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_if2713 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40905000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_stmt_if2736 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_if2738 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2741 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2744 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2747 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_stmt_if2750 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2752 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_if2791 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40905000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_while2824 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_while2826 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2830 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_while2857 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40905000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2859 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_while2883 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_while2885 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2889 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_while2916 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40905000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_while2942 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_while2944 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2947 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2972 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_for_range2974 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_for_range2978 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000200UL});
		public static readonly BitSet _158_in_for_range2981 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_for_range2985 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range2988 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_for_range2992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_for_range3021 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_for_range3025 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_for_range3028 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_for_range3032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3109 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_for3125 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _for_item_in_stmt_for3129 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_for3132 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _for_item_in_stmt_for3134 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3138 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_try3172 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3174 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3177 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3179 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_stmt_try3182 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3184 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3186 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_switch_item3212 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_switch_item3214 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x20000000UL});
		public static readonly BitSet _95_in_switch_item3217 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_switch_item3219 = new BitSet(new ulong[]{0x8000000000000UL,0x80000000UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3225 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_switch_item3270 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x40905000000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_switch3308 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_stmt_switch3310 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3313 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3316 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3318 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3322 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3324 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x1000000400UL});
		public static readonly BitSet _138_in_stmt_switch3330 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3332 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3335 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3337 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3368 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_ident_list3371 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_ident_list3373 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3395 = new BitSet(new ulong[]{0x0UL,0xA0000000000UL});
		public static readonly BitSet _105_in_stmt_alloc3399 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_stmt_alloc3401 = new BitSet(new ulong[]{0x2UL,0x4080001000000UL});
		public static readonly BitSet _114_in_stmt_alloc3406 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _107_in_stmt_alloc3410 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_stmt_alloc3461 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3463 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_stmt_alloc3466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_stmt_alloc3527 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3531 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_stmt_alloc3534 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3536 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3562 = new BitSet(new ulong[]{0x2UL,0x8585810448900000UL,0x10000000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3566 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3568 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_stmt_modify3592 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_modify3621 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_stmt_modify3652 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3702 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3712 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3715 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3717 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_where_expr3720 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _where_item_in_where_expr3724 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3728 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3764 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3767 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3769 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _where_item_in_where_expr3773 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3775 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _DEDENT_in_where_expr3780 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3782 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3835 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3838 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3840 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _where_item_in_where_expr3844 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3846 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _DEDENT_in_where_expr3851 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3853 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_where_expr3894 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3896 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3899 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3901 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _where_item_in_where_expr3905 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3907 = new BitSet(new ulong[]{0x8040000000100UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _DEDENT_in_where_expr3912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_let_expr3970 = new BitSet(new ulong[]{0x40000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _where_item_in_let_expr3972 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_let_expr3976 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_let_expr3980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4004 = new BitSet(new ulong[]{0x2180C0000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _INDENT_in_let_expr4009 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4011 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_let_expr4014 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4016 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4045 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4092 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4095 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _NEWLINE_in_let_expr4097 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95107100UL});
		public static readonly BitSet _where_item_in_let_expr4101 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4103 = new BitSet(new ulong[]{0x8040000000000UL,0x800000335420000UL,0x44F95117100UL});
		public static readonly BitSet _144_in_let_expr4108 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_let_expr4110 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4112 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_match_item4147 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_match_item4149 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_match_item4151 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _where_expr_in_match_item4153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_match_expr4174 = new BitSet(new ulong[]{0x218040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_match_expr4176 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4179 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4182 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4184 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _match_item_in_match_expr4188 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4190 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr4218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_list_expr4239 = new BitSet(new ulong[]{0x2180C0000000100UL,0x38000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _95_in_list_expr4243 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4247 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _INDENT_in_list_expr4251 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _DEDENT_in_list_expr4255 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _list_expr_in_list_expr4259 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4263 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4267 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _INDENT_in_list_expr4271 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _DEDENT_in_list_expr4275 = new BitSet(new ulong[]{0x2180C0000000100UL,0x18000003B5420000UL,0x40001800000UL});
		public static readonly BitSet _list_expr_in_list_expr4279 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _95_in_list_expr4286 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4290 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _INDENT_in_list_expr4294 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4298 = new BitSet(new ulong[]{0x8080000000100UL,0x2000000080000000UL});
		public static readonly BitSet _125_in_list_expr4302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lambda_expr4327 = new BitSet(new ulong[]{0x40000000000UL,0x80002000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4329 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lambda_expr4332 = new BitSet(new ulong[]{0x0UL,0x10000800000000UL});
		public static readonly BitSet _99_in_lambda_expr4336 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_lambda_expr4338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_lambda_expr4378 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_lambda_expr4380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4400 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4457 = new BitSet(new ulong[]{0x2UL,0x8105090448900000UL,0x10000000000UL});
		public static readonly BitSet _set_in_modify_expr4461 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_modify_expr4515 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4518 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item4531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr4543 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _121_in_cond_expr4552 = new BitSet(new ulong[]{0x210040000000002UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4558 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_cond_expr4562 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4680 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20002000000UL});
		public static readonly BitSet _or_op_in_or_expr4691 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _and_expr_in_or_expr4695 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20002000000UL});
		public static readonly BitSet _bit_or_in_and_expr4737 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _and_op_in_and_expr4748 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _bit_or_in_and_expr4752 = new BitSet(new ulong[]{0x2UL,0x200000UL,0x2UL});
		public static readonly BitSet _bit_xor_in_bit_or4783 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_bit_or4792 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _bit_xor_in_bit_or4796 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4826 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_bit_xor4835 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _bit_and_in_bit_xor4839 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4869 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_bit_and4878 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4882 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _chain_op_in_chain_list4974 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _shift_expr_in_chain_list4976 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4990 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _109_in_cmp_expr5000 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5004 = new BitSet(new ulong[]{0x40000000002UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _ident_in_cmp_expr5010 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000000UL});
		public static readonly BitSet _117_in_cmp_expr5013 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cmp_expr5015 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_cmp_expr5017 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cmp_expr5020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr5089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5166 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5170 = new BitSet(new ulong[]{0x2UL,0x6A200000040000UL,0x60000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5276 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5285 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _add_expr_in_shift_expr5289 = new BitSet(new ulong[]{0x2UL,0x80800000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5319 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _92_in_add_expr5329 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _mul_expr_in_add_expr5333 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _96_in_add_expr5358 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _mul_expr_in_add_expr5362 = new BitSet(new ulong[]{0x2UL,0x110000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5400 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _90_in_mul_expr5410 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5414 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _103_in_mul_expr5441 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5445 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _83_in_mul_expr5472 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5476 = new BitSet(new ulong[]{0x2UL,0x8004080000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5516 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _infix_func_in_infix_expr5526 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5530 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _cast_expr_in_selector_expr5562 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _100_in_selector_expr5572 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5576 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _102_in_selector_expr5602 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5607 = new BitSet(new ulong[]{0x2UL,0x5000000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5647 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_cast_expr5656 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_cast_expr5658 = new BitSet(new ulong[]{0x40000000000UL,0x1000000UL,0x8000080UL});
		public static readonly BitSet _type_name_in_cast_expr5660 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_cast_expr5662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5724 = new BitSet(new ulong[]{0x210040000000000UL,0x800000335420000UL,0x40001800000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_prefix_expr5742 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x8000080UL});
		public static readonly BitSet _type_no_array_in_prefix_expr5744 = new BitSet(new ulong[]{0x0UL,0x1000000001000000UL});
		public static readonly BitSet _88_in_prefix_expr5748 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5750 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_prefix_expr5753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_prefix_expr5776 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5778 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_prefix_expr5781 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list5819 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_expr_list5822 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_expr_list5825 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr5841 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _93_in_suffix_expr5851 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _97_in_suffix_expr5877 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _101_in_suffix_expr5900 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5902 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _99_in_suffix_expr5927 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5929 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _88_in_suffix_expr5954 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5958 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_suffix_expr5960 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _89_in_suffix_expr5989 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _124_in_suffix_expr6020 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_suffix_expr6024 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_suffix_expr6026 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _125_in_suffix_expr6055 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _123_in_suffix_expr6086 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6088 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_suffix_expr6090 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_suffix_expr6094 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_suffix_expr6096 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _89_in_suffix_expr6125 = new BitSet(new ulong[]{0x2UL,0x1800002A21000000UL});
		public static readonly BitSet _NUMBER_in_atom_expr6175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_atom_expr6190 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_atom_expr6192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_atom_expr6205 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_atom_expr6209 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _95_in_atom_expr6214 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_in_atom_expr6216 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_atom_expr6220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _89_in_atom_expr6247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6290 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40001000000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6322 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _93_in_lvalue_suffix6332 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _97_in_lvalue_suffix6360 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _101_in_lvalue_suffix6385 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6387 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _99_in_lvalue_suffix6414 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6416 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix6443 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_lvalue_suffix6446 = new BitSet(new ulong[]{0x210040000000000UL,0x1800000337420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6448 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lvalue_suffix6451 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _124_in_lvalue_suffix6480 = new BitSet(new ulong[]{0x210040000000000UL,0x3800000335420000UL,0x40001A80000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix6482 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_lvalue_suffix6485 = new BitSet(new ulong[]{0x2UL,0x1000202A21000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lvalue_atom6529 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_lvalue6550 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40001000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6552 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_lvalue6555 = new BitSet(new ulong[]{0x40000000000UL,0x800000334420000UL,0x40001000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6557 = new BitSet(new ulong[]{0x0UL,0x82000000UL});
		public static readonly BitSet _89_in_lvalue6561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue6575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident6586 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_ident6589 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident6591 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _128_in_infix_func6604 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_infix_func6607 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_infix_func6609 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
