//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-06-19 16:19:18

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Declare", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'extern'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'returns'", "'static'", "'struct'", "'switch'", "'then'", "'til'", "'to'", "'try'", "'typedef'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int T__182=182;
	public const int T__183=183;
	public const int T__184=184;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Declare=43;
	public const int Func_Def=44;
	public const int Generic_Patameters=45;
	public const int Global_Block=46;
	public const int IDENT=47;
	public const int INDENT=48;
	public const int Ident_List=49;
	public const int Import=50;
	public const int Left_Bracket=51;
	public const int LineComment=52;
	public const int Match_Expr=53;
	public const int Match_Expr_Item=54;
	public const int Match_Tuple=55;
	public const int NEWLINE=56;
	public const int NUMBER=57;
	public const int Namespace=58;
	public const int Right_Bracket=59;
	public const int Root=60;
	public const int SP=61;
	public const int STRING=62;
	public const int Stmt_Block=63;
	public const int Stmt_Defer=64;
	public const int Stmt_Finally=65;
	public const int Stmt_For=66;
	public const int Stmt_If=67;
	public const int Stmt_Loop=68;
	public const int Stmt_Return=69;
	public const int Stmt_Switch=70;
	public const int Stmt_Try=71;
	public const int Stmt_Typedef=72;
	public const int Stmt_Unless=73;
	public const int Stmt_Until=74;
	public const int Stmt_Using=75;
	public const int Stmt_While=76;
	public const int Switch_Item=77;
	public const int Type_Array=78;
	public const int Type_Func=79;
	public const int Type_Ident=80;
	public const int Type_List=81;
	public const int Type_Ref=82;
	public const int Type_Star=83;
	public const int Type_Template=84;
	public const int White_Space=85;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:214:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(215, 4);
			// SugarCpp.g:215:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:215:4: NEWLINE
					{
					DebugLocation(215, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(215, 13);
			PushFollow(Follow._global_block_in_root597);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(215, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root599); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 215:30: -> ^( Root global_block )
			{
				DebugLocation(215, 33);
				// SugarCpp.g:215:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(215, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(215, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:218:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(219, 4);
			// SugarCpp.g:219:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==93||LA3_0==132||(LA3_0>=140 && LA3_0<=141)||(LA3_0>=145 && LA3_0<=146)||LA3_0==150||LA3_0==155||LA3_0==158||LA3_0==162||(LA3_0>=165 && LA3_0<=166)||LA3_0==172||(LA3_0>=175 && LA3_0<=176)||LA3_0==184))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:219:5: node ( NEWLINE )+
					{
					DebugLocation(219, 5);
					PushFollow(Follow._node_in_global_block619);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(219, 10);
					// SugarCpp.g:219:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:219:10: NEWLINE
							{
							DebugLocation(219, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block621); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(219, 24);
				// SugarCpp.g:219:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(219, 39);
				// SugarCpp.g:219:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(219, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:222:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._func_def_in_node644);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._class_def_in_node649);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:225:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._enum_def_in_node654);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:226:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._global_alloc_in_node659);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:227:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._global_using_in_node664);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:228:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._global_typedef_in_node669);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:229:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				PushFollow(Follow._import_def_in_node674);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:230:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 4);
				PushFollow(Follow._namespace_def_in_node679);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:233:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(233, 1);
		try
		{
			// SugarCpp.g:234:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:234:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args691); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:235:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(235, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args696); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:236:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(236, 4);
				PushFollow(Follow._ident_in_attribute_args701);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:239:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken char_literal30 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken string_literal41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		CommonTree string_literal35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) )
			int alt16=5;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt16 = 1;
				}
				break;
			case 141:
				{
				alt16 = 2;
				}
				break;
			case 165:
				{
				alt16 = 3;
				}
				break;
			case 162:
				{
				alt16 = 4;
				}
				break;
			case 176:
				{
				alt16 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(240, 4);
				PushFollow(Follow._ident_in_attribute_item712);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(240, 10);
				// SugarCpp.g:240:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==93))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(240, 11);
					char_literal18=(IToken)Match(input,93,Follow._93_in_attribute_item715); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal18);

					DebugLocation(240, 15);
					PushFollow(Follow._attribute_args_in_attribute_item717);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(240, 30);
					// SugarCpp.g:240:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==100))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:31: ',' attribute_args
							{
							DebugLocation(240, 31);
							char_literal20=(IToken)Match(input,100,Follow._100_in_attribute_item720); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal20);

							DebugLocation(240, 35);
							PushFollow(Follow._attribute_args_in_attribute_item722);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(240, 52);
					char_literal22=(IToken)Match(input,94,Follow._94_in_attribute_item726); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(240, 61);
					// SugarCpp.g:240:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(240, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(240, 79);
					// SugarCpp.g:240:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(240, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:241:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(241, 4);
				string_literal23=(IToken)Match(input,141,Follow._141_in_attribute_item744); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal23);

				DebugLocation(241, 12);
				// SugarCpp.g:241:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==93))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(241, 13);
					char_literal24=(IToken)Match(input,93,Follow._93_in_attribute_item747); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal24);

					DebugLocation(241, 17);
					PushFollow(Follow._attribute_args_in_attribute_item749);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(241, 32);
					// SugarCpp.g:241:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==100))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:241:33: ',' attribute_args
							{
							DebugLocation(241, 33);
							char_literal26=(IToken)Match(input,100,Follow._100_in_attribute_item752); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal26);

							DebugLocation(241, 37);
							PushFollow(Follow._attribute_args_in_attribute_item754);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(241, 54);
					char_literal28=(IToken)Match(input,94,Follow._94_in_attribute_item758); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 141
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(241, 63);
					// SugarCpp.g:241:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(241, 75);
					adaptor.AddChild(root_1, stream_141.NextNode());
					DebugLocation(241, 83);
					// SugarCpp.g:241:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(241, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:242:4: 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(242, 4);
				string_literal29=(IToken)Match(input,165,Follow._165_in_attribute_item776); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal29);

				DebugLocation(242, 13);
				// SugarCpp.g:242:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==93))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:242:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(242, 14);
					char_literal30=(IToken)Match(input,93,Follow._93_in_attribute_item779); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal30);

					DebugLocation(242, 18);
					PushFollow(Follow._attribute_args_in_attribute_item781);
					attribute_args31=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args31.Tree);
					DebugLocation(242, 33);
					// SugarCpp.g:242:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==100))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:242:34: ',' attribute_args
							{
							DebugLocation(242, 34);
							char_literal32=(IToken)Match(input,100,Follow._100_in_attribute_item784); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal32);

							DebugLocation(242, 38);
							PushFollow(Follow._attribute_args_in_attribute_item786);
							attribute_args33=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args33.Tree);

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(242, 55);
					char_literal34=(IToken)Match(input,94,Follow._94_in_attribute_item790); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal34);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: 165, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:61: -> ^( Attribute 'static' ( attribute_args )* )
				{
					DebugLocation(242, 64);
					// SugarCpp.g:242:64: ^( Attribute 'static' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(242, 76);
					adaptor.AddChild(root_1, stream_165.NextNode());
					DebugLocation(242, 85);
					// SugarCpp.g:242:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(242, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:243:4: 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(243, 4);
				string_literal35=(IToken)Match(input,162,Follow._162_in_attribute_item808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal35);

				DebugLocation(243, 13);
				// SugarCpp.g:243:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==93))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:243:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(243, 14);
					char_literal36=(IToken)Match(input,93,Follow._93_in_attribute_item811); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal36);

					DebugLocation(243, 18);
					PushFollow(Follow._attribute_args_in_attribute_item813);
					attribute_args37=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args37.Tree);
					DebugLocation(243, 33);
					// SugarCpp.g:243:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==100))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:243:34: ',' attribute_args
							{
							DebugLocation(243, 34);
							char_literal38=(IToken)Match(input,100,Follow._100_in_attribute_item816); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal38);

							DebugLocation(243, 38);
							PushFollow(Follow._attribute_args_in_attribute_item818);
							attribute_args39=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args39.Tree);

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }

					DebugLocation(243, 55);
					char_literal40=(IToken)Match(input,94,Follow._94_in_attribute_item822); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal40);


					}
					break;

				}
				} finally { DebugExitSubRule(13); }



				{
				// AST REWRITE
				// elements: attribute_args, 162
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 243:61: -> ^( Attribute 'public' ( attribute_args )* )
				{
					DebugLocation(243, 64);
					// SugarCpp.g:243:64: ^( Attribute 'public' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(243, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(243, 76);
					adaptor.AddChild(root_1, stream_162.NextNode());
					DebugLocation(243, 85);
					// SugarCpp.g:243:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(243, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:244:4: 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(244, 4);
				string_literal41=(IToken)Match(input,176,Follow._176_in_attribute_item840); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal41);

				DebugLocation(244, 14);
				// SugarCpp.g:244:14: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==93))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:15: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(244, 15);
					char_literal42=(IToken)Match(input,93,Follow._93_in_attribute_item843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal42);

					DebugLocation(244, 19);
					PushFollow(Follow._attribute_args_in_attribute_item845);
					attribute_args43=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args43.Tree);
					DebugLocation(244, 34);
					// SugarCpp.g:244:34: ( ',' attribute_args )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==100))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:244:35: ',' attribute_args
							{
							DebugLocation(244, 35);
							char_literal44=(IToken)Match(input,100,Follow._100_in_attribute_item848); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal44);

							DebugLocation(244, 39);
							PushFollow(Follow._attribute_args_in_attribute_item850);
							attribute_args45=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args45.Tree);

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(244, 56);
					char_literal46=(IToken)Match(input,94,Follow._94_in_attribute_item854); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal46);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }



				{
				// AST REWRITE
				// elements: attribute_args, 176
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 244:62: -> ^( Attribute 'virtual' ( attribute_args )* )
				{
					DebugLocation(244, 65);
					// SugarCpp.g:244:65: ^( Attribute 'virtual' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(244, 67);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(244, 77);
					adaptor.AddChild(root_1, stream_176.NextNode());
					DebugLocation(244, 87);
					// SugarCpp.g:244:87: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(244, 87);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:247:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal47 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		IToken NEWLINE52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree NEWLINE52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(248, 4);
			// SugarCpp.g:248:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==132))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:248:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(248, 5);
					char_literal47=(IToken)Match(input,132,Follow._132_in_attribute879); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal47);

					DebugLocation(248, 9);
					PushFollow(Follow._attribute_item_in_attribute881);
					attribute_item48=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item48.Tree);
					DebugLocation(248, 24);
					// SugarCpp.g:248:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(17);
					while (true)
					{
						int alt17=2;
						try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0==100))
						{
							alt17 = 1;
						}


						} finally { DebugExitDecision(17); }
						switch ( alt17 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:248:25: ',' attribute_item
							{
							DebugLocation(248, 25);
							char_literal49=(IToken)Match(input,100,Follow._100_in_attribute884); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal49);

							DebugLocation(248, 29);
							PushFollow(Follow._attribute_item_in_attribute886);
							attribute_item50=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item50.Tree);

							}
							break;

						default:
							goto loop17;
						}
					}

					loop17:
						;

					} finally { DebugExitSubRule(17); }

					DebugLocation(248, 46);
					char_literal51=(IToken)Match(input,133,Follow._133_in_attribute890); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal51);

					DebugLocation(248, 50);
					// SugarCpp.g:248:50: ( NEWLINE )+
					int cnt18=0;
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_0 = input.LA(1);

						if ((LA18_0==NEWLINE))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch (alt18)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:248:50: NEWLINE
							{
							DebugLocation(248, 50);
							NEWLINE52=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute892); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE52);


							}
							break;

						default:
							if (cnt18 >= 1)
								goto loop18;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee18 = new EarlyExitException( 18, input );
							DebugRecognitionException(eee18);
							throw eee18;
						}
						cnt18++;
					}
					loop18:
						;

					} finally { DebugExitSubRule(18); }


					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:61: -> ( attribute_item )+
			{
				DebugLocation(248, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(248, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:251:1: global_alloc : ( attribute )? ( 'extern' )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		IToken string_literal59 = default(IToken);
		IToken string_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		CommonTree string_literal59_tree = default(CommonTree);
		CommonTree string_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( ( attribute )? ( 'extern' )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: ( attribute )? ( 'extern' )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(252, 4);
			// SugarCpp.g:252:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==132))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:4: attribute
				{
				DebugLocation(252, 4);
				PushFollow(Follow._attribute_in_global_alloc911);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(252, 15);
			// SugarCpp.g:252:15: ( 'extern' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==146))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:15: 'extern'
				{
				DebugLocation(252, 15);
				string_literal54=(IToken)Match(input,146,Follow._146_in_global_alloc914); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal54);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(252, 25);
			PushFollow(Follow._ident_list_in_global_alloc917);
			ident_list55=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list55.Tree);
			DebugLocation(252, 36);
			// SugarCpp.g:252:36: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==111))
			{
				alt25 = 1;
			}
			else if ((LA25_0==113))
			{
				alt25 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:252:38: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(252, 38);
				char_literal56=(IToken)Match(input,111,Follow._111_in_global_alloc921); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal56);

				DebugLocation(252, 42);
				PushFollow(Follow._type_name_in_global_alloc923);
				type_name57=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name57.Tree);
				DebugLocation(252, 52);
				// SugarCpp.g:252:52: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) ) )
				int alt23=3;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				switch (input.LA(1))
				{
				case 113:
				case 121:
					{
					alt23 = 1;
					}
					break;
				case 93:
					{
					alt23 = 2;
					}
					break;
				case NEWLINE:
					{
					alt23 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 23, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:252:54: ( '=' | ':=' ) expr
					{
					DebugLocation(252, 54);
					// SugarCpp.g:252:54: ( '=' | ':=' )
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==121))
					{
						alt22 = 1;
					}
					else if ((LA22_0==113))
					{
						alt22 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:252:55: '='
						{
						DebugLocation(252, 55);
						char_literal58=(IToken)Match(input,121,Follow._121_in_global_alloc928); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal58);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:252:61: ':='
						{
						DebugLocation(252, 61);
						string_literal59=(IToken)Match(input,113,Follow._113_in_global_alloc932); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal59);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(252, 67);
					PushFollow(Follow._expr_in_global_alloc935);
					expr60=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr60.Tree);


					{
					// AST REWRITE
					// elements: 146, attribute, ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 252:72: -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(252, 75);
						// SugarCpp.g:252:75: ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 77);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(252, 94);
						// SugarCpp.g:252:94: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(252, 94);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(252, 105);
						// SugarCpp.g:252:105: ( 'extern' )?
						if (stream_146.HasNext)
						{
							DebugLocation(252, 105);
							adaptor.AddChild(root_1, stream_146.NextNode());

						}
						stream_146.Reset();
						DebugLocation(252, 115);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(252, 125);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(252, 136);
						// SugarCpp.g:252:136: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 138);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(252, 148);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:253:18: bracket_expr_list
					{
					DebugLocation(253, 18);
					PushFollow(Follow._bracket_expr_list_in_global_alloc976);
					bracket_expr_list61=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list61.Tree);


					{
					// AST REWRITE
					// elements: 146, type_name, attribute, bracket_expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 253:36: -> ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(253, 39);
						// SugarCpp.g:253:39: ^( Expr_Alloc_Bracket ( attribute )? ( 'extern' )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(253, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(253, 60);
						// SugarCpp.g:253:60: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(253, 60);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(253, 71);
						// SugarCpp.g:253:71: ( 'extern' )?
						if (stream_146.HasNext)
						{
							DebugLocation(253, 71);
							adaptor.AddChild(root_1, stream_146.NextNode());

						}
						stream_146.Reset();
						DebugLocation(253, 81);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(253, 91);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(253, 102);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:254:19: 
					{

					{
					// AST REWRITE
					// elements: attribute, type_name, 146, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 254:19: -> ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(254, 22);
						// SugarCpp.g:254:22: ^( Expr_Alloc_Equal ( attribute )? ( 'extern' )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(254, 41);
						// SugarCpp.g:254:41: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(254, 41);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(254, 52);
						// SugarCpp.g:254:52: ( 'extern' )?
						if (stream_146.HasNext)
						{
							DebugLocation(254, 52);
							adaptor.AddChild(root_1, stream_146.NextNode());

						}
						stream_146.Reset();
						DebugLocation(254, 62);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(254, 72);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(254, 83);
						// SugarCpp.g:254:83: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(254, 85);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(23); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:256:14: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(256, 14);
				string_literal62=(IToken)Match(input,113,Follow._113_in_global_alloc1066); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal62);

				DebugLocation(256, 19);
				// SugarCpp.g:256:19: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:256:20: expr ( ',' expr )*
				{
				DebugLocation(256, 20);
				PushFollow(Follow._expr_in_global_alloc1069);
				expr63=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr63.Tree);
				DebugLocation(256, 25);
				// SugarCpp.g:256:25: ( ',' expr )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==100))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:26: ',' expr
						{
						DebugLocation(256, 26);
						char_literal64=(IToken)Match(input,100,Follow._100_in_global_alloc1072); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal64);

						DebugLocation(256, 30);
						PushFollow(Follow._expr_in_global_alloc1074);
						expr65=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr65.Tree);

						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }


				}



				{
				// AST REWRITE
				// elements: expr, attribute, 146, 113, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 256:38: -> ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(256, 41);
					// SugarCpp.g:256:41: ^( ':=' ( attribute )? ( 'extern' )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(256, 48);
					// SugarCpp.g:256:48: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(256, 48);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(256, 59);
					// SugarCpp.g:256:59: ( 'extern' )?
					if (stream_146.HasNext)
					{
						DebugLocation(256, 59);
						adaptor.AddChild(root_1, stream_146.NextNode());

					}
					stream_146.Reset();
					DebugLocation(256, 69);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(256, 80);
					// SugarCpp.g:256:80: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(256, 82);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(256, 92);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(256, 92);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(25); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:260:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item68 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(260, 1);
		try
		{
			// SugarCpp.g:261:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(261, 4);
			// SugarCpp.g:261:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==132))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:4: attribute
				{
				DebugLocation(261, 4);
				PushFollow(Follow._attribute_in_global_using1122);
				attribute66=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(261, 15);
			string_literal67=(IToken)Match(input,175,Follow._175_in_global_using1125); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_175.Add(string_literal67);

			DebugLocation(261, 23);
			// SugarCpp.g:261:23: ( stmt_using_item )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==IDENT||LA27_0==158))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:261:23: stmt_using_item
					{
					DebugLocation(261, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1127);
					stmt_using_item68=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item68.Tree);

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }



			{
			// AST REWRITE
			// elements: attribute, stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(261, 43);
				// SugarCpp.g:261:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(261, 56);
				// SugarCpp.g:261:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(261, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(261, 67);
				// SugarCpp.g:261:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(261, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:264:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal70 = default(IToken);
		IToken char_literal72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal70_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(265, 4);
			// SugarCpp.g:265:4: ( attribute )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==132))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:4: attribute
				{
				DebugLocation(265, 4);
				PushFollow(Follow._attribute_in_global_typedef1151);
				attribute69=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute69.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(265, 15);
			string_literal70=(IToken)Match(input,172,Follow._172_in_global_typedef1154); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal70);

			DebugLocation(265, 25);
			PushFollow(Follow._ident_in_global_typedef1156);
			ident71=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident71.Tree);
			DebugLocation(265, 31);
			char_literal72=(IToken)Match(input,121,Follow._121_in_global_typedef1158); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal72);

			DebugLocation(265, 35);
			PushFollow(Follow._type_name_in_global_typedef1160);
			type_name73=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name73.Tree);


			{
			// AST REWRITE
			// elements: ident, attribute, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(265, 48);
				// SugarCpp.g:265:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(265, 63);
				// SugarCpp.g:265:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(265, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(265, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(265, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:268:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal75 = default(IToken);
		IToken STRING76 = default(IToken);
		IToken NEWLINE77 = default(IToken);
		IToken INDENT78 = default(IToken);
		IToken NEWLINE79 = default(IToken);
		IToken STRING80 = default(IToken);
		IToken NEWLINE81 = default(IToken);
		IToken DEDENT82 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute74 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal75_tree = default(CommonTree);
		CommonTree STRING76_tree = default(CommonTree);
		CommonTree NEWLINE77_tree = default(CommonTree);
		CommonTree INDENT78_tree = default(CommonTree);
		CommonTree NEWLINE79_tree = default(CommonTree);
		CommonTree STRING80_tree = default(CommonTree);
		CommonTree NEWLINE81_tree = default(CommonTree);
		CommonTree DEDENT82_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(269, 4);
			// SugarCpp.g:269:4: ( attribute )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==132))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:4: attribute
				{
				DebugLocation(269, 4);
				PushFollow(Follow._attribute_in_import_def1184);
				attribute74=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute74.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(269, 15);
			string_literal75=(IToken)Match(input,150,Follow._150_in_import_def1187); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_150.Add(string_literal75);

			DebugLocation(269, 24);
			// SugarCpp.g:269:24: ( STRING )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==STRING))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:24: STRING
				{
				DebugLocation(269, 24);
				STRING76=(IToken)Match(input,STRING,Follow._STRING_in_import_def1189); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING76);


				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(269, 32);
			// SugarCpp.g:269:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			try
			{
				alt35 = dfa35.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(269, 33);
				// SugarCpp.g:269:33: ( NEWLINE )+
				int cnt31=0;
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==NEWLINE))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch (alt31)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:33: NEWLINE
						{
						DebugLocation(269, 33);
						NEWLINE77=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1193); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE77);


						}
						break;

					default:
						if (cnt31 >= 1)
							goto loop31;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee31 = new EarlyExitException( 31, input );
						DebugRecognitionException(eee31);
						throw eee31;
					}
					cnt31++;
				}
				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(269, 42);
				INDENT78=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1196); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT78);

				DebugLocation(269, 49);
				// SugarCpp.g:269:49: ( NEWLINE )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==NEWLINE))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:49: NEWLINE
						{
						DebugLocation(269, 49);
						NEWLINE79=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1198); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE79);


						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }

				DebugLocation(269, 59);
				// SugarCpp.g:269:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==STRING))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:60: STRING ( NEWLINE )+
						{
						DebugLocation(269, 60);
						STRING80=(IToken)Match(input,STRING,Follow._STRING_in_import_def1203); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING80);

						DebugLocation(269, 67);
						// SugarCpp.g:269:67: ( NEWLINE )+
						int cnt33=0;
						try { DebugEnterSubRule(33);
						while (true)
						{
							int alt33=2;
							try { DebugEnterDecision(33, false);
							int LA33_0 = input.LA(1);

							if ((LA33_0==NEWLINE))
							{
								alt33 = 1;
							}


							} finally { DebugExitDecision(33); }
							switch (alt33)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:269:67: NEWLINE
								{
								DebugLocation(269, 67);
								NEWLINE81=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1205); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE81);


								}
								break;

							default:
								if (cnt33 >= 1)
									goto loop33;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee33 = new EarlyExitException( 33, input );
								DebugRecognitionException(eee33);
								throw eee33;
							}
							cnt33++;
						}
						loop33:
							;

						} finally { DebugExitSubRule(33); }


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(269, 78);
				DEDENT82=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1210); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT82);


				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(269, 90);
				// SugarCpp.g:269:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(269, 99);
				// SugarCpp.g:269:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(269, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(269, 110);
				// SugarCpp.g:269:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(269, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:272:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal84 = default(IToken);
		IToken char_literal86 = default(IToken);
		IToken char_literal88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal84_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(272, 1);
		try
		{
			// SugarCpp.g:273:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:273:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(273, 4);
			// SugarCpp.g:273:4: ( attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==132))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:4: attribute
				{
				DebugLocation(273, 4);
				PushFollow(Follow._attribute_in_enum_def1235);
				attribute83=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute83.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(273, 15);
			string_literal84=(IToken)Match(input,145,Follow._145_in_enum_def1238); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_145.Add(string_literal84);

			DebugLocation(273, 22);
			PushFollow(Follow._ident_in_enum_def1240);
			ident85=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident85.Tree);
			DebugLocation(273, 28);
			char_literal86=(IToken)Match(input,121,Follow._121_in_enum_def1242); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal86);

			DebugLocation(273, 32);
			// SugarCpp.g:273:32: ( ident ( '|' ident )* )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==IDENT))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:33: ident ( '|' ident )*
				{
				DebugLocation(273, 33);
				PushFollow(Follow._ident_in_enum_def1245);
				ident87=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident87.Tree);
				DebugLocation(273, 39);
				// SugarCpp.g:273:39: ( '|' ident )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==180))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:273:40: '|' ident
						{
						DebugLocation(273, 40);
						char_literal88=(IToken)Match(input,180,Follow._180_in_enum_def1248); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_180.Add(char_literal88);

						DebugLocation(273, 44);
						PushFollow(Follow._ident_in_enum_def1250);
						ident89=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident89.Tree);

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 273:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(273, 57);
				// SugarCpp.g:273:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(273, 64);
				// SugarCpp.g:273:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(273, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(273, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(273, 81);
				// SugarCpp.g:273:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(273, 94);
				// SugarCpp.g:273:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(273, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:276:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal91 = default(IToken);
		IToken NEWLINE93 = default(IToken);
		IToken INDENT94 = default(IToken);
		IToken NEWLINE95 = default(IToken);
		IToken DEDENT97 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal91_tree = default(CommonTree);
		CommonTree NEWLINE93_tree = default(CommonTree);
		CommonTree INDENT94_tree = default(CommonTree);
		CommonTree NEWLINE95_tree = default(CommonTree);
		CommonTree DEDENT97_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(276, 1);
		try
		{
			// SugarCpp.g:277:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:277:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(277, 4);
			// SugarCpp.g:277:4: ( attribute )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==132))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:4: attribute
				{
				DebugLocation(277, 4);
				PushFollow(Follow._attribute_in_namespace_def1283);
				attribute90=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(277, 15);
			string_literal91=(IToken)Match(input,158,Follow._158_in_namespace_def1286); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_158.Add(string_literal91);

			DebugLocation(277, 27);
			PushFollow(Follow._ident_in_namespace_def1288);
			ident92=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident92.Tree);
			DebugLocation(277, 33);
			// SugarCpp.g:277:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			try
			{
				alt42 = dfa42.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:277:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(277, 34);
				// SugarCpp.g:277:34: ( NEWLINE )+
				int cnt40=0;
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==NEWLINE))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch (alt40)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:277:34: NEWLINE
						{
						DebugLocation(277, 34);
						NEWLINE93=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1291); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE93);


						}
						break;

					default:
						if (cnt40 >= 1)
							goto loop40;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee40 = new EarlyExitException( 40, input );
						DebugRecognitionException(eee40);
						throw eee40;
					}
					cnt40++;
				}
				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(277, 43);
				INDENT94=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1294); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT94);

				DebugLocation(277, 50);
				// SugarCpp.g:277:50: ( NEWLINE )*
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if ((LA41_0==NEWLINE))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch ( alt41 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:277:50: NEWLINE
						{
						DebugLocation(277, 50);
						NEWLINE95=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1296); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE95);


						}
						break;

					default:
						goto loop41;
					}
				}

				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(277, 59);
				PushFollow(Follow._global_block_in_namespace_def1299);
				global_block96=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block96.Tree);
				DebugLocation(277, 72);
				DEDENT97=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1301); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT97);


				}
				break;

			}
			} finally { DebugExitSubRule(42); }



			{
			// AST REWRITE
			// elements: global_block, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 277:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(277, 84);
				// SugarCpp.g:277:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(277, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(277, 96);
				// SugarCpp.g:277:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(277, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(277, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(277, 113);
				// SugarCpp.g:277:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(277, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(278, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_args();
	partial void LeaveRule_class_args();

	// $ANTLR start "class_args"
	// SugarCpp.g:280:1: class_args : '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) ) ;
	[GrammarRule("class_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_args()
	{
		EnterRule_class_args();
		EnterRule("class_args", 13);
		TraceIn("class_args", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		IToken char_literal101 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args99 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "class_args");
		DebugLocation(280, 1);
		try
		{
			// SugarCpp.g:281:2: ( '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) )
			{
			DebugLocation(281, 4);
			char_literal98=(IToken)Match(input,93,Follow._93_in_class_args1328); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal98);

			DebugLocation(281, 8);
			// SugarCpp.g:281:8: ( func_args ')' -> func_args | ')' -> ^( Func_Args ) )
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==IDENT||LA43_0==113))
			{
				alt43 = 1;
			}
			else if ((LA43_0==94))
			{
				alt43 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 43, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:10: func_args ')'
				{
				DebugLocation(281, 10);
				PushFollow(Follow._func_args_in_class_args1332);
				func_args99=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args99.Tree);
				DebugLocation(281, 20);
				char_literal100=(IToken)Match(input,94,Follow._94_in_class_args1334); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal100);



				{
				// AST REWRITE
				// elements: func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 281:24: -> func_args
				{
					DebugLocation(281, 27);
					adaptor.AddChild(root_0, stream_func_args.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:282:7: ')'
				{
				DebugLocation(282, 7);
				char_literal101=(IToken)Match(input,94,Follow._94_in_class_args1346); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal101);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:11: -> ^( Func_Args )
				{
					DebugLocation(282, 14);
					// SugarCpp.g:282:14: ^( Func_Args )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(282, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_args", 13);
			LeaveRule("class_args", 13);
			LeaveRule_class_args();
		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "class_args"); }
		return retval;

	}
	// $ANTLR end "class_args"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:286:1: class_def : ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 14);
		TraceIn("class_def", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal103 = default(IToken);
		IToken string_literal104 = default(IToken);
		IToken char_literal108 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken NEWLINE112 = default(IToken);
		IToken INDENT113 = default(IToken);
		IToken NEWLINE114 = default(IToken);
		IToken DEDENT116 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_args107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal103_tree = default(CommonTree);
		CommonTree string_literal104_tree = default(CommonTree);
		CommonTree char_literal108_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree NEWLINE112_tree = default(CommonTree);
		CommonTree INDENT113_tree = default(CommonTree);
		CommonTree NEWLINE114_tree = default(CommonTree);
		CommonTree DEDENT116_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_class_args=new RewriteRuleSubtreeStream(adaptor,"rule class_args");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(286, 1);
		try
		{
			// SugarCpp.g:287:2: ( ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:5: ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(287, 5);
			// SugarCpp.g:287:5: ( attribute )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==132))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:5: attribute
				{
				DebugLocation(287, 5);
				PushFollow(Follow._attribute_in_class_def1370);
				attribute102=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute102.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(287, 16);
			// SugarCpp.g:287:16: ( 'public' )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==162))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:16: 'public'
				{
				DebugLocation(287, 16);
				string_literal103=(IToken)Match(input,162,Follow._162_in_class_def1373); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal103);


				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(287, 26);
			string_literal104=(IToken)Match(input,140,Follow._140_in_class_def1376); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_140.Add(string_literal104);

			DebugLocation(287, 34);
			PushFollow(Follow._ident_in_class_def1378);
			ident105=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident105.Tree);
			DebugLocation(287, 40);
			// SugarCpp.g:287:40: ( generic_parameter )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==115))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:41: generic_parameter
				{
				DebugLocation(287, 41);
				PushFollow(Follow._generic_parameter_in_class_def1381);
				generic_parameter106=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter106.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(287, 61);
			// SugarCpp.g:287:61: ( class_args )?
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			int LA47_0 = input.LA(1);

			if ((LA47_0==93))
			{
				alt47 = 1;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:61: class_args
				{
				DebugLocation(287, 61);
				PushFollow(Follow._class_args_in_class_def1385);
				class_args107=class_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_class_args.Add(class_args107.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(47); }

			DebugLocation(287, 73);
			// SugarCpp.g:287:73: ( ':' ident ( ',' ident )* )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==111))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:74: ':' ident ( ',' ident )*
				{
				DebugLocation(287, 74);
				char_literal108=(IToken)Match(input,111,Follow._111_in_class_def1389); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal108);

				DebugLocation(287, 78);
				PushFollow(Follow._ident_in_class_def1391);
				ident109=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident109.Tree);
				DebugLocation(287, 84);
				// SugarCpp.g:287:84: ( ',' ident )*
				try { DebugEnterSubRule(48);
				while (true)
				{
					int alt48=2;
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==100))
					{
						alt48 = 1;
					}


					} finally { DebugExitDecision(48); }
					switch ( alt48 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:287:85: ',' ident
						{
						DebugLocation(287, 85);
						char_literal110=(IToken)Match(input,100,Follow._100_in_class_def1394); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal110);

						DebugLocation(287, 89);
						PushFollow(Follow._ident_in_class_def1396);
						ident111=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident111.Tree);

						}
						break;

					default:
						goto loop48;
					}
				}

				loop48:
					;

				} finally { DebugExitSubRule(48); }


				}
				break;

			}
			} finally { DebugExitSubRule(49); }

			DebugLocation(287, 99);
			// SugarCpp.g:287:99: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			try
			{
				alt52 = dfa52.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:287:100: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(287, 100);
				// SugarCpp.g:287:100: ( NEWLINE )+
				int cnt50=0;
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_0 = input.LA(1);

					if ((LA50_0==NEWLINE))
					{
						alt50 = 1;
					}


					} finally { DebugExitDecision(50); }
					switch (alt50)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:287:100: NEWLINE
						{
						DebugLocation(287, 100);
						NEWLINE112=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1403); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE112);


						}
						break;

					default:
						if (cnt50 >= 1)
							goto loop50;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee50 = new EarlyExitException( 50, input );
						DebugRecognitionException(eee50);
						throw eee50;
					}
					cnt50++;
				}
				loop50:
					;

				} finally { DebugExitSubRule(50); }

				DebugLocation(287, 109);
				INDENT113=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1406); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT113);

				DebugLocation(287, 116);
				// SugarCpp.g:287:116: ( NEWLINE )*
				try { DebugEnterSubRule(51);
				while (true)
				{
					int alt51=2;
					try { DebugEnterDecision(51, false);
					int LA51_0 = input.LA(1);

					if ((LA51_0==NEWLINE))
					{
						alt51 = 1;
					}


					} finally { DebugExitDecision(51); }
					switch ( alt51 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:287:116: NEWLINE
						{
						DebugLocation(287, 116);
						NEWLINE114=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1408); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE114);


						}
						break;

					default:
						goto loop51;
					}
				}

				loop51:
					;

				} finally { DebugExitSubRule(51); }

				DebugLocation(287, 125);
				PushFollow(Follow._global_block_in_class_def1411);
				global_block115=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block115.Tree);
				DebugLocation(287, 138);
				DEDENT116=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1413); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT116);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: attribute, ident, generic_parameter, global_block, class_args, 162, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:147: -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(287, 150);
				// SugarCpp.g:287:150: ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 152);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(287, 158);
				// SugarCpp.g:287:158: ( 'public' )?
				if (stream_162.HasNext)
				{
					DebugLocation(287, 158);
					adaptor.AddChild(root_1, stream_162.NextNode());

				}
				stream_162.Reset();
				DebugLocation(287, 168);
				// SugarCpp.g:287:168: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(287, 168);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(287, 179);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(287, 185);
				// SugarCpp.g:287:185: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(287, 185);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(287, 204);
				// SugarCpp.g:287:204: ( class_args )?
				if (stream_class_args.HasNext)
				{
					DebugLocation(287, 204);
					adaptor.AddChild(root_1, stream_class_args.NextTree());

				}
				stream_class_args.Reset();
				DebugLocation(287, 216);
				// SugarCpp.g:287:216: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(287, 217);
					// SugarCpp.g:287:217: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(287, 219);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(287, 230);
					// SugarCpp.g:287:230: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(287, 230);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(287, 240);
				// SugarCpp.g:287:240: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(287, 240);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 14);
			LeaveRule("class_def", 14);
			LeaveRule_class_def();
		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:290:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 15);
		TraceIn("type_list", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal118 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name119 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal118_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(290, 1);
		try
		{
			// SugarCpp.g:291:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: type_name ( ',' type_name )*
			{
			DebugLocation(291, 4);
			PushFollow(Follow._type_name_in_type_list1459);
			type_name117=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name117.Tree);
			DebugLocation(291, 14);
			// SugarCpp.g:291:14: ( ',' type_name )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==100))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:15: ',' type_name
					{
					DebugLocation(291, 15);
					char_literal118=(IToken)Match(input,100,Follow._100_in_type_list1462); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal118);

					DebugLocation(291, 19);
					PushFollow(Follow._type_name_in_type_list1464);
					type_name119=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name119.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(291, 34);
				// SugarCpp.g:291:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(291, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(291, 46);
				// SugarCpp.g:291:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(291, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 15);
			LeaveRule("type_list", 15);
			LeaveRule_type_list();
		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:294:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 16);
		TraceIn("type_name", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal121 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken char_literal124 = default(IToken);
		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken string_literal128 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name129 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal121_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree string_literal128_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(294, 1);
		try
		{
			// SugarCpp.g:295:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==IDENT||LA58_0==141||LA58_0==155||(LA58_0>=165 && LA58_0<=166)))
			{
				alt58 = 1;
			}
			else if ((LA58_0==93))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:295:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(295, 4);
				PushFollow(Follow._type_single_in_type_name1486);
				type_single120=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single120.Tree);
				DebugLocation(295, 16);
				// SugarCpp.g:295:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==105))
				{
					alt55 = 1;
				}
				else if ((LA55_0==DEDENT||(LA55_0>=IDENT && LA55_0<=INDENT)||LA55_0==NEWLINE||(LA55_0>=93 && LA55_0<=94)||LA55_0==100||(LA55_0>=113 && LA55_0<=114)||LA55_0==121||(LA55_0>=124 && LA55_0<=125)||LA55_0==133||LA55_0==138||LA55_0==143||(LA55_0>=148 && LA55_0<=149)||LA55_0==151||LA55_0==164||(LA55_0>=168 && LA55_0<=170)||(LA55_0>=173 && LA55_0<=174)||(LA55_0>=178 && LA55_0<=179)||LA55_0==184))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:295:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(295, 18);
					string_literal121=(IToken)Match(input,105,Follow._105_in_type_name1490); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal121);

					DebugLocation(295, 23);
					// SugarCpp.g:295:23: ( type_name | '(' ')' )
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==IDENT||LA54_0==141||LA54_0==155||(LA54_0>=165 && LA54_0<=166)))
					{
						alt54 = 1;
					}
					else if ((LA54_0==93))
					{
						int LA54_2 = input.LA(2);

						if ((LA54_2==94))
						{
							int LA54_3 = input.LA(3);

							if ((LA54_3==105))
							{
								alt54 = 1;
							}
							else if ((LA54_3==DEDENT||(LA54_3>=IDENT && LA54_3<=INDENT)||LA54_3==NEWLINE||(LA54_3>=93 && LA54_3<=94)||LA54_3==100||(LA54_3>=113 && LA54_3<=114)||LA54_3==121||(LA54_3>=124 && LA54_3<=125)||LA54_3==133||LA54_3==138||LA54_3==143||(LA54_3>=148 && LA54_3<=149)||LA54_3==151||LA54_3==164||(LA54_3>=168 && LA54_3<=170)||(LA54_3>=173 && LA54_3<=174)||(LA54_3>=178 && LA54_3<=179)||LA54_3==184))
							{
								alt54 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 54, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA54_2==IDENT||LA54_2==93||LA54_2==141||LA54_2==155||(LA54_2>=165 && LA54_2<=166)))
						{
							alt54 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 54, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:295:24: type_name
						{
						DebugLocation(295, 24);
						PushFollow(Follow._type_name_in_type_name1493);
						type_name122=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name122.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:295:36: '(' ')'
						{
						DebugLocation(295, 36);
						char_literal123=(IToken)Match(input,93,Follow._93_in_type_name1497); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal123);

						DebugLocation(295, 40);
						char_literal124=(IToken)Match(input,94,Follow._94_in_type_name1499); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal124);


						}
						break;

					}
					} finally { DebugExitSubRule(54); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 295:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(295, 48);
						// SugarCpp.g:295:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(295, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(295, 60);
						// SugarCpp.g:295:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(295, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(295, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(295, 85);
						// SugarCpp.g:295:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(295, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:296:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 296:9: -> type_single
					{
						DebugLocation(296, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:298:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(298, 4);
				char_literal125=(IToken)Match(input,93,Follow._93_in_type_name1540); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal125);

				DebugLocation(298, 8);
				// SugarCpp.g:298:8: ( type_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==93||LA56_0==141||LA56_0==155||(LA56_0>=165 && LA56_0<=166)))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:298:8: type_list
					{
					DebugLocation(298, 8);
					PushFollow(Follow._type_list_in_type_name1542);
					type_list126=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list126.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(298, 19);
				char_literal127=(IToken)Match(input,94,Follow._94_in_type_name1545); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal127);

				DebugLocation(298, 23);
				string_literal128=(IToken)Match(input,105,Follow._105_in_type_name1547); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(string_literal128);

				DebugLocation(298, 28);
				// SugarCpp.g:298:28: ( type_name | '(' ')' )
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT||LA57_0==141||LA57_0==155||(LA57_0>=165 && LA57_0<=166)))
				{
					alt57 = 1;
				}
				else if ((LA57_0==93))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==94))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==105))
						{
							alt57 = 1;
						}
						else if ((LA57_3==DEDENT||(LA57_3>=IDENT && LA57_3<=INDENT)||LA57_3==NEWLINE||(LA57_3>=93 && LA57_3<=94)||LA57_3==100||(LA57_3>=113 && LA57_3<=114)||LA57_3==121||(LA57_3>=124 && LA57_3<=125)||LA57_3==133||LA57_3==138||LA57_3==143||(LA57_3>=148 && LA57_3<=149)||LA57_3==151||LA57_3==164||(LA57_3>=168 && LA57_3<=170)||(LA57_3>=173 && LA57_3<=174)||(LA57_3>=178 && LA57_3<=179)||LA57_3==184))
						{
							alt57 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 57, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA57_2==IDENT||LA57_2==93||LA57_2==141||LA57_2==155||(LA57_2>=165 && LA57_2<=166)))
					{
						alt57 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:298:29: type_name
					{
					DebugLocation(298, 29);
					PushFollow(Follow._type_name_in_type_name1550);
					type_name129=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name129.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:298:41: '(' ')'
					{
					DebugLocation(298, 41);
					char_literal130=(IToken)Match(input,93,Follow._93_in_type_name1554); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal130);

					DebugLocation(298, 45);
					char_literal131=(IToken)Match(input,94,Follow._94_in_type_name1556); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal131);


					}
					break;

				}
				} finally { DebugExitSubRule(57); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(298, 53);
					// SugarCpp.g:298:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(298, 65);
					// SugarCpp.g:298:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(298, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(298, 76);
					// SugarCpp.g:298:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(298, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 16);
			LeaveRule("type_name", 16);
			LeaveRule_type_name();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:301:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 17);
		TraceIn("type_single", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal133 = default(IToken);
		IToken char_literal134 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr137 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree char_literal134_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(302, 4);
			PushFollow(Follow._type_star_in_type_single1580);
			type_star132=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star132.Tree);
			DebugLocation(302, 14);
			// SugarCpp.g:302:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt62=3;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case 91:
				{
				alt62 = 1;
				}
				break;
			case 132:
				{
				alt62 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case INDENT:
			case NEWLINE:
			case 93:
			case 94:
			case 100:
			case 105:
			case 113:
			case 114:
			case 121:
			case 124:
			case 125:
			case 133:
			case 138:
			case 143:
			case 148:
			case 149:
			case 151:
			case 164:
			case 168:
			case 169:
			case 170:
			case 173:
			case 174:
			case 178:
			case 179:
			case 184:
				{
				alt62 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:302:16: '&'
				{
				DebugLocation(302, 16);
				char_literal133=(IToken)Match(input,91,Follow._91_in_type_single1584); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal133);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(302, 23);
					// SugarCpp.g:302:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(302, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:303:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(303, 7);
				char_literal134=(IToken)Match(input,132,Follow._132_in_type_single1600); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal134);

				DebugLocation(303, 11);
				// SugarCpp.g:303:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==NUMBER||LA61_0==STRING||LA61_0==86||LA61_0==91||LA61_0==93||LA61_0==95||(LA61_0>=97 && LA61_0<=98)||(LA61_0>=101 && LA61_0<=102)||(LA61_0>=131 && LA61_0<=132)||LA61_0==154||LA61_0==157||(LA61_0>=159 && LA61_0<=160)||LA61_0==184))
				{
					alt61 = 1;
				}
				else if ((LA61_0==100||LA61_0==133))
				{
					alt61 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:303:13: expr ( ',' expr )* ']'
					{
					DebugLocation(303, 13);
					PushFollow(Follow._expr_in_type_single1604);
					expr135=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr135.Tree);
					DebugLocation(303, 18);
					// SugarCpp.g:303:18: ( ',' expr )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==100))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:303:19: ',' expr
							{
							DebugLocation(303, 19);
							char_literal136=(IToken)Match(input,100,Follow._100_in_type_single1607); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal136);

							DebugLocation(303, 23);
							PushFollow(Follow._expr_in_type_single1609);
							expr137=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr137.Tree);

							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(303, 30);
					char_literal138=(IToken)Match(input,133,Follow._133_in_type_single1613); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal138);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 303:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(303, 37);
						// SugarCpp.g:303:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(303, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(303, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(303, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(303, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:304:13: ( ',' )* ']'
					{
					DebugLocation(304, 13);
					// SugarCpp.g:304:13: ( ',' )*
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==100))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch ( alt60 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:304:13: ','
							{
							DebugLocation(304, 13);
							char_literal139=(IToken)Match(input,100,Follow._100_in_type_single1638); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal139);


							}
							break;

						default:
							goto loop60;
						}
					}

					loop60:
						;

					} finally { DebugExitSubRule(60); }

					DebugLocation(304, 18);
					char_literal140=(IToken)Match(input,133,Follow._133_in_type_single1641); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal140);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 304:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(304, 25);
						// SugarCpp.g:304:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(304, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(304, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(304, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(304, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:306:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:7: -> type_star
				{
					DebugLocation(306, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 17);
			LeaveRule("type_single", 17);
			LeaveRule_type_single();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:310:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 18);
		TraceIn("type_no_array", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal142 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star141 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal142_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(311, 4);
			PushFollow(Follow._type_star_in_type_no_array1688);
			type_star141=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star141.Tree);
			DebugLocation(311, 14);
			// SugarCpp.g:311:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==91))
			{
				alt63 = 1;
			}
			else if ((LA63_0==93||LA63_0==132))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:16: '&'
				{
				DebugLocation(311, 16);
				char_literal142=(IToken)Match(input,91,Follow._91_in_type_no_array1692); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal142);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(311, 23);
					// SugarCpp.g:311:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(311, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:7: -> type_star
				{
					DebugLocation(312, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 18);
			LeaveRule("type_no_array", 18);
			LeaveRule_type_no_array();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:316:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 19);
		TraceIn("type_star", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type143 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(317, 4);
			PushFollow(Follow._type_template_type_in_type_star1727);
			type_template_type143=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type143.Tree);
			DebugLocation(317, 23);
			// SugarCpp.g:317:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==95))
			{
				alt65 = 1;
			}
			else if ((LA65_0==DEDENT||(LA65_0>=IDENT && LA65_0<=INDENT)||LA65_0==NEWLINE||LA65_0==91||(LA65_0>=93 && LA65_0<=94)||LA65_0==100||LA65_0==105||(LA65_0>=113 && LA65_0<=114)||LA65_0==121||(LA65_0>=124 && LA65_0<=125)||(LA65_0>=132 && LA65_0<=133)||LA65_0==138||LA65_0==143||(LA65_0>=148 && LA65_0<=149)||LA65_0==151||LA65_0==164||(LA65_0>=168 && LA65_0<=170)||(LA65_0>=173 && LA65_0<=174)||(LA65_0>=178 && LA65_0<=179)||LA65_0==184))
			{
				alt65 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:25: ( '*' )+
				{
				DebugLocation(317, 25);
				// SugarCpp.g:317:25: ( '*' )+
				int cnt64=0;
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==95))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:317:25: '*'
						{
						DebugLocation(317, 25);
						char_literal144=(IToken)Match(input,95,Follow._95_in_type_star1731); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_95.Add(char_literal144);


						}
						break;

					default:
						if (cnt64 >= 1)
							goto loop64;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee64 = new EarlyExitException( 64, input );
						DebugRecognitionException(eee64);
						throw eee64;
					}
					cnt64++;
				}
				loop64:
					;

				} finally { DebugExitSubRule(64); }



				{
				// AST REWRITE
				// elements: type_template_type, 95
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 317:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(317, 33);
					// SugarCpp.g:317:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(317, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(317, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(317, 64);
					if (!(stream_95.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_95.HasNext )
					{
						DebugLocation(317, 64);
						adaptor.AddChild(root_1, stream_95.NextNode());

					}
					stream_95.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:318:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 318:10: -> type_template_type
				{
					DebugLocation(318, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 19);
			LeaveRule("type_star", 19);
			LeaveRule_type_star();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:322:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 20);
		TraceIn("type_template_type", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken char_literal150 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		CommonTree char_literal150_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(322, 1);
		try
		{
			// SugarCpp.g:323:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(323, 4);
			PushFollow(Follow._type_ident_in_type_template_type1777);
			type_ident145=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident145.Tree);
			DebugLocation(323, 15);
			// SugarCpp.g:323:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==115))
			{
				alt68 = 1;
			}
			else if ((LA68_0==DEDENT||(LA68_0>=IDENT && LA68_0<=INDENT)||LA68_0==NEWLINE||LA68_0==91||(LA68_0>=93 && LA68_0<=95)||LA68_0==100||LA68_0==105||(LA68_0>=113 && LA68_0<=114)||LA68_0==121||(LA68_0>=124 && LA68_0<=125)||(LA68_0>=132 && LA68_0<=133)||LA68_0==138||LA68_0==143||(LA68_0>=148 && LA68_0<=149)||LA68_0==151||LA68_0==164||(LA68_0>=168 && LA68_0<=170)||(LA68_0>=173 && LA68_0<=174)||(LA68_0>=178 && LA68_0<=179)||LA68_0==184))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(323, 17);
				char_literal146=(IToken)Match(input,115,Follow._115_in_type_template_type1781); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(char_literal146);

				DebugLocation(323, 21);
				// SugarCpp.g:323:21: ( type_name ( ',' type_name )* )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==93||LA67_0==141||LA67_0==155||(LA67_0>=165 && LA67_0<=166)))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:323:22: type_name ( ',' type_name )*
					{
					DebugLocation(323, 22);
					PushFollow(Follow._type_name_in_type_template_type1784);
					type_name147=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name147.Tree);
					DebugLocation(323, 32);
					// SugarCpp.g:323:32: ( ',' type_name )*
					try { DebugEnterSubRule(66);
					while (true)
					{
						int alt66=2;
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==100))
						{
							alt66 = 1;
						}


						} finally { DebugExitDecision(66); }
						switch ( alt66 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:323:33: ',' type_name
							{
							DebugLocation(323, 33);
							char_literal148=(IToken)Match(input,100,Follow._100_in_type_template_type1787); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal148);

							DebugLocation(323, 37);
							PushFollow(Follow._type_name_in_type_template_type1789);
							type_name149=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name149.Tree);

							}
							break;

						default:
							goto loop66;
						}
					}

					loop66:
						;

					} finally { DebugExitSubRule(66); }


					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(323, 51);
				char_literal150=(IToken)Match(input,125,Follow._125_in_type_template_type1795); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal150);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 323:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(323, 58);
					// SugarCpp.g:323:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(323, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(323, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(323, 85);
					// SugarCpp.g:323:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(323, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:324:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:8: -> type_ident
				{
					DebugLocation(324, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 20);
			LeaveRule("type_template_type", 20);
			LeaveRule_type_template_type();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:328:1: type_ident : ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 21);
		TraceIn("type_ident", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal151 = default(IToken);
		IToken string_literal152 = default(IToken);
		IToken string_literal153 = default(IToken);
		IToken string_literal154 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident155 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal151_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree string_literal153_tree = default(CommonTree);
		CommonTree string_literal154_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(329, 4);
			// SugarCpp.g:329:4: ( 'static' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==165))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:4: 'static'
				{
				DebugLocation(329, 4);
				string_literal151=(IToken)Match(input,165,Follow._165_in_type_ident1835); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal151);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(329, 14);
			// SugarCpp.g:329:14: ( 'const' )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==141))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:14: 'const'
				{
				DebugLocation(329, 14);
				string_literal152=(IToken)Match(input,141,Follow._141_in_type_ident1838); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal152);


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(329, 23);
			// SugarCpp.g:329:23: ( 'struct' )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==166))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:23: 'struct'
				{
				DebugLocation(329, 23);
				string_literal153=(IToken)Match(input,166,Follow._166_in_type_ident1841); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal153);


				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(329, 33);
			// SugarCpp.g:329:33: ( 'long' )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==155))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:33: 'long'
				{
				DebugLocation(329, 33);
				string_literal154=(IToken)Match(input,155,Follow._155_in_type_ident1844); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_155.Add(string_literal154);


				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(329, 41);
			PushFollow(Follow._ident_in_type_ident1847);
			ident155=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident155.Tree);


			{
			// AST REWRITE
			// elements: 166, 141, ident, 165, 155
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:47: -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(329, 50);
				// SugarCpp.g:329:50: ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 52);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(329, 63);
				// SugarCpp.g:329:63: ( 'static' )?
				if (stream_165.HasNext)
				{
					DebugLocation(329, 63);
					adaptor.AddChild(root_1, stream_165.NextNode());

				}
				stream_165.Reset();
				DebugLocation(329, 73);
				// SugarCpp.g:329:73: ( 'const' )?
				if (stream_141.HasNext)
				{
					DebugLocation(329, 73);
					adaptor.AddChild(root_1, stream_141.NextNode());

				}
				stream_141.Reset();
				DebugLocation(329, 82);
				// SugarCpp.g:329:82: ( 'struct' )?
				if (stream_166.HasNext)
				{
					DebugLocation(329, 82);
					adaptor.AddChild(root_1, stream_166.NextNode());

				}
				stream_166.Reset();
				DebugLocation(329, 92);
				// SugarCpp.g:329:92: ( 'long' )?
				if (stream_155.HasNext)
				{
					DebugLocation(329, 92);
					adaptor.AddChild(root_1, stream_155.NextNode());

				}
				stream_155.Reset();
				DebugLocation(329, 100);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 21);
			LeaveRule("type_ident", 21);
			LeaveRule_type_ident();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:332:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 22);
		TraceIn("generic_parameter_inside", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident158 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: ident ( ',' ident )*
			{
			DebugLocation(333, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1878);
			ident156=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident156.Tree);
			DebugLocation(333, 10);
			// SugarCpp.g:333:10: ( ',' ident )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==100))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:11: ',' ident
					{
					DebugLocation(333, 11);
					char_literal157=(IToken)Match(input,100,Follow._100_in_generic_parameter_inside1881); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal157);

					DebugLocation(333, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1883);
					ident158=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident158.Tree);

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(333, 26);
				// SugarCpp.g:333:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(333, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(333, 47);
				// SugarCpp.g:333:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(333, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 22);
			LeaveRule("generic_parameter_inside", 22);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:336:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside160 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal159_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:337:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(337, 4);
			char_literal159=(IToken)Match(input,115,Follow._115_in_generic_parameter1905); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(char_literal159);

			DebugLocation(337, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1907);
			generic_parameter_inside160=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside160.Tree);
			DebugLocation(337, 33);
			char_literal161=(IToken)Match(input,125,Follow._125_in_generic_parameter1909); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_125.Add(char_literal161);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 337:37: -> generic_parameter_inside
			{
				DebugLocation(337, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:340:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 24);
		TraceIn("func_args", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal163 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal163_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:341:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(341, 4);
			PushFollow(Follow._func_args_item_in_func_args1924);
			func_args_item162=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item162.Tree);
			DebugLocation(341, 19);
			// SugarCpp.g:341:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==100))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:341:20: ',' func_args_item
					{
					DebugLocation(341, 20);
					char_literal163=(IToken)Match(input,100,Follow._100_in_func_args1927); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal163);

					DebugLocation(341, 24);
					PushFollow(Follow._func_args_item_in_func_args1929);
					func_args_item164=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item164.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 341:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(341, 44);
				// SugarCpp.g:341:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(341, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(341, 56);
				// SugarCpp.g:341:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(341, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 24);
			LeaveRule("func_args", 24);
			LeaveRule_func_args();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:344:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 25);
		TraceIn("func_args_item", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		IToken string_literal169 = default(IToken);
		IToken string_literal172 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr173 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree string_literal172_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==IDENT))
			{
				alt77 = 1;
			}
			else if ((LA77_0==113))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:345:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(345, 4);
				PushFollow(Follow._ident_list_in_func_args_item1951);
				ident_list165=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list165.Tree);
				DebugLocation(345, 15);
				char_literal166=(IToken)Match(input,111,Follow._111_in_func_args_item1953); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal166);

				DebugLocation(345, 19);
				PushFollow(Follow._type_name_in_func_args_item1955);
				type_name167=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name167.Tree);
				DebugLocation(345, 29);
				// SugarCpp.g:345:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt76=3;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				switch (input.LA(1))
				{
				case 113:
				case 121:
					{
					alt76 = 1;
					}
					break;
				case 93:
					{
					alt76 = 2;
					}
					break;
				case 94:
				case 100:
					{
					alt76 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:345:31: ( '=' | ':=' ) expr
					{
					DebugLocation(345, 31);
					// SugarCpp.g:345:31: ( '=' | ':=' )
					int alt75=2;
					try { DebugEnterSubRule(75);
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==121))
					{
						alt75 = 1;
					}
					else if ((LA75_0==113))
					{
						alt75 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:345:32: '='
						{
						DebugLocation(345, 32);
						char_literal168=(IToken)Match(input,121,Follow._121_in_func_args_item1960); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal168);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:345:38: ':='
						{
						DebugLocation(345, 38);
						string_literal169=(IToken)Match(input,113,Follow._113_in_func_args_item1964); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal169);


						}
						break;

					}
					} finally { DebugExitSubRule(75); }

					DebugLocation(345, 44);
					PushFollow(Follow._expr_in_func_args_item1967);
					expr170=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr170.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 345:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(345, 53);
						// SugarCpp.g:345:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(345, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(345, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(345, 93);
						// SugarCpp.g:345:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(345, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:346:33: bracket_expr_list
					{
					DebugLocation(346, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item2018);
					bracket_expr_list171=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list171.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 346:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(346, 55);
						// SugarCpp.g:346:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(346, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(346, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(346, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(346, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:347:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 347:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(347, 18);
						// SugarCpp.g:347:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(347, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(347, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(347, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(347, 58);
						// SugarCpp.g:347:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(347, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(76); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:349:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(349, 8);
				string_literal172=(IToken)Match(input,113,Follow._113_in_func_args_item2078); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal172_tree = (CommonTree)adaptor.Create(string_literal172);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal172_tree, root_0);
				}
				DebugLocation(349, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2082);
				modify_expr173=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr173.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 25);
			LeaveRule("func_args_item", 25);
			LeaveRule_func_args_item();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:352:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 26);
		TraceIn("operator", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set174 = default(IToken);

		CommonTree set174_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(352, 1);
		try
		{
			// SugarCpp.g:353:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(353, 2);

			set174=(IToken)input.LT(1);
			if (input.LA(1)==95||input.LA(1)==97||input.LA(1)==101||input.LA(1)==109)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set174));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 26);
			LeaveRule("operator", 26);
			LeaveRule_operator();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:356:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 27);
		TraceIn("func_name", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal176 = default(IToken);
		IToken char_literal178 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal176_tree = default(CommonTree);
		CommonTree char_literal178_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENT))
			{
				alt78 = 1;
			}
			else if ((LA78_0==93))
			{
				alt78 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:4: ident
				{
				DebugLocation(357, 4);
				PushFollow(Follow._ident_in_func_name2116);
				ident175=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident175.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:10: -> ident
				{
					DebugLocation(357, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:358:4: '(' operator ')'
				{
				DebugLocation(358, 4);
				char_literal176=(IToken)Match(input,93,Follow._93_in_func_name2125); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal176);

				DebugLocation(358, 8);
				PushFollow(Follow._operator_in_func_name2127);
				operator177=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator177.Tree);
				DebugLocation(358, 17);
				char_literal178=(IToken)Match(input,94,Follow._94_in_func_name2129); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal178);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 358:21: -> operator
				{
					DebugLocation(358, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 27);
			LeaveRule("func_name", 27);
			LeaveRule_func_name();
		}
		DebugLocation(359, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:361:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 28);
		TraceIn("func_type", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name179 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(361, 1);
		try
		{
			// SugarCpp.g:362:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:362:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(362, 4);
			PushFollow(Follow._type_name_in_func_type2144);
			type_name179=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name179.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 28);
			LeaveRule("func_type", 28);
			LeaveRule_func_type();
		}
		DebugLocation(363, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:365:1: func_def : ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? Func_Declare ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 29);
		TraceIn("func_def", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal181 = default(IToken);
		IToken string_literal182 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken char_literal189 = default(IToken);
		IToken NEWLINE190 = default(IToken);
		IToken char_literal192 = default(IToken);
		IToken NEWLINE194 = default(IToken);
		IToken INDENT195 = default(IToken);
		IToken NEWLINE196 = default(IToken);
		IToken NEWLINE198 = default(IToken);
		IToken DEDENT199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree string_literal182_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree char_literal189_tree = default(CommonTree);
		CommonTree NEWLINE190_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		CommonTree NEWLINE194_tree = default(CommonTree);
		CommonTree INDENT195_tree = default(CommonTree);
		CommonTree NEWLINE196_tree = default(CommonTree);
		CommonTree NEWLINE198_tree = default(CommonTree);
		CommonTree DEDENT199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_184=new RewriteRuleITokenStream(adaptor,"token 184");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(365, 4);
		try
		{
			// SugarCpp.g:366:2: ( ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? Func_Declare ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:366:4: ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? Func_Declare ) )
			{
			DebugLocation(366, 4);
			// SugarCpp.g:366:4: ( attribute )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==132))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:4: attribute
				{
				DebugLocation(366, 4);
				PushFollow(Follow._attribute_in_func_def2155);
				attribute180=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute180.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(366, 15);
			// SugarCpp.g:366:15: ( 'public' )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==162))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:15: 'public'
				{
				DebugLocation(366, 15);
				string_literal181=(IToken)Match(input,162,Follow._162_in_func_def2158); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal181);


				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(366, 25);
			// SugarCpp.g:366:25: ( 'virtual' )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==176))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:25: 'virtual'
				{
				DebugLocation(366, 25);
				string_literal182=(IToken)Match(input,176,Follow._176_in_func_def2161); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal182);


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(366, 36);
			// SugarCpp.g:366:36: ( func_type )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			try
			{
				alt82 = dfa82.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:36: func_type
				{
				DebugLocation(366, 36);
				PushFollow(Follow._func_type_in_func_def2164);
				func_type183=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(366, 47);
			// SugarCpp.g:366:47: ( '~' )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==184))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:47: '~'
				{
				DebugLocation(366, 47);
				char_literal184=(IToken)Match(input,184,Follow._184_in_func_def2167); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_184.Add(char_literal184);


				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(366, 52);
			PushFollow(Follow._func_name_in_func_def2170);
			func_name185=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name185.Tree);
			DebugLocation(366, 62);
			// SugarCpp.g:366:62: ( generic_parameter )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==115))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:62: generic_parameter
				{
				DebugLocation(366, 62);
				PushFollow(Follow._generic_parameter_in_func_def2172);
				generic_parameter186=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter186.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(366, 81);
			char_literal187=(IToken)Match(input,93,Follow._93_in_func_def2175); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal187);

			DebugLocation(366, 85);
			// SugarCpp.g:366:85: ( func_args )?
			int alt85=2;
			try { DebugEnterSubRule(85);
			try { DebugEnterDecision(85, false);
			int LA85_0 = input.LA(1);

			if ((LA85_0==IDENT||LA85_0==113))
			{
				alt85 = 1;
			}
			} finally { DebugExitDecision(85); }
			switch (alt85)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:85: func_args
				{
				DebugLocation(366, 85);
				PushFollow(Follow._func_args_in_func_def2177);
				func_args188=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args188.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(85); }

			DebugLocation(366, 96);
			char_literal189=(IToken)Match(input,94,Follow._94_in_func_def2180); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(char_literal189);

			DebugLocation(366, 100);
			// SugarCpp.g:366:100: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? Func_Declare ) )
			int alt92=3;
			try { DebugEnterSubRule(92);
			try { DebugEnterDecision(92, false);
			try
			{
				alt92 = dfa92.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:366:102: ( NEWLINE )+ stmt_block
				{
				DebugLocation(366, 102);
				// SugarCpp.g:366:102: ( NEWLINE )+
				int cnt86=0;
				try { DebugEnterSubRule(86);
				while (true)
				{
					int alt86=2;
					try { DebugEnterDecision(86, false);
					int LA86_0 = input.LA(1);

					if ((LA86_0==NEWLINE))
					{
						alt86 = 1;
					}


					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:366:102: NEWLINE
						{
						DebugLocation(366, 102);
						NEWLINE190=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2184); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE190);


						}
						break;

					default:
						if (cnt86 >= 1)
							goto loop86;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee86 = new EarlyExitException( 86, input );
						DebugRecognitionException(eee86);
						throw eee86;
					}
					cnt86++;
				}
				loop86:
					;

				} finally { DebugExitSubRule(86); }

				DebugLocation(366, 111);
				PushFollow(Follow._stmt_block_in_func_def2187);
				stmt_block191=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block191.Tree);


				{
				// AST REWRITE
				// elements: func_type, 176, func_name, 162, generic_parameter, func_args, 184, attribute, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 366:122: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(366, 125);
					// SugarCpp.g:366:125: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(366, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(366, 136);
					// SugarCpp.g:366:136: ( 'public' )?
					if (stream_162.HasNext)
					{
						DebugLocation(366, 136);
						adaptor.AddChild(root_1, stream_162.NextNode());

					}
					stream_162.Reset();
					DebugLocation(366, 146);
					// SugarCpp.g:366:146: ( 'virtual' )?
					if (stream_176.HasNext)
					{
						DebugLocation(366, 146);
						adaptor.AddChild(root_1, stream_176.NextNode());

					}
					stream_176.Reset();
					DebugLocation(366, 157);
					// SugarCpp.g:366:157: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(366, 157);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(366, 168);
					// SugarCpp.g:366:168: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(366, 168);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(366, 179);
					// SugarCpp.g:366:179: ( '~' )?
					if (stream_184.HasNext)
					{
						DebugLocation(366, 179);
						adaptor.AddChild(root_1, stream_184.NextNode());

					}
					stream_184.Reset();
					DebugLocation(366, 184);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(366, 194);
					// SugarCpp.g:366:194: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(366, 194);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(366, 213);
					// SugarCpp.g:366:213: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(366, 213);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(366, 224);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:367:30: '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(367, 30);
				char_literal192=(IToken)Match(input,121,Follow._121_in_func_def2249); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_121.Add(char_literal192);

				DebugLocation(367, 34);
				// SugarCpp.g:367:34: ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==IDENT||LA91_0==NUMBER||LA91_0==STRING||LA91_0==86||LA91_0==91||LA91_0==93||LA91_0==95||(LA91_0>=97 && LA91_0<=98)||(LA91_0>=101 && LA91_0<=102)||(LA91_0>=131 && LA91_0<=132)||LA91_0==154||LA91_0==157||(LA91_0>=159 && LA91_0<=160)||LA91_0==184))
				{
					alt91 = 1;
				}
				else if ((LA91_0==NEWLINE))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:36: where_expr
					{
					DebugLocation(367, 36);
					PushFollow(Follow._where_expr_in_func_def2253);
					where_expr193=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr193.Tree);


					{
					// AST REWRITE
					// elements: 176, attribute, func_name, 162, generic_parameter, func_type, where_expr, func_args, 184
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 367:48: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
						DebugLocation(367, 51);
						// SugarCpp.g:367:51: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(367, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(367, 62);
						// SugarCpp.g:367:62: ( 'public' )?
						if (stream_162.HasNext)
						{
							DebugLocation(367, 62);
							adaptor.AddChild(root_1, stream_162.NextNode());

						}
						stream_162.Reset();
						DebugLocation(367, 72);
						// SugarCpp.g:367:72: ( 'virtual' )?
						if (stream_176.HasNext)
						{
							DebugLocation(367, 72);
							adaptor.AddChild(root_1, stream_176.NextNode());

						}
						stream_176.Reset();
						DebugLocation(367, 83);
						// SugarCpp.g:367:83: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(367, 83);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(367, 94);
						// SugarCpp.g:367:94: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(367, 94);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(367, 105);
						// SugarCpp.g:367:105: ( '~' )?
						if (stream_184.HasNext)
						{
							DebugLocation(367, 105);
							adaptor.AddChild(root_1, stream_184.NextNode());

						}
						stream_184.Reset();
						DebugLocation(367, 110);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(367, 120);
						// SugarCpp.g:367:120: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(367, 120);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(367, 139);
						// SugarCpp.g:367:139: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(367, 139);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(367, 150);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:368:30: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(368, 30);
					// SugarCpp.g:368:30: ( NEWLINE )+
					int cnt87=0;
					try { DebugEnterSubRule(87);
					while (true)
					{
						int alt87=2;
						try { DebugEnterDecision(87, false);
						int LA87_0 = input.LA(1);

						if ((LA87_0==NEWLINE))
						{
							alt87 = 1;
						}


						} finally { DebugExitDecision(87); }
						switch (alt87)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:368:30: NEWLINE
							{
							DebugLocation(368, 30);
							NEWLINE194=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2316); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE194);


							}
							break;

						default:
							if (cnt87 >= 1)
								goto loop87;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee87 = new EarlyExitException( 87, input );
							DebugRecognitionException(eee87);
							throw eee87;
						}
						cnt87++;
					}
					loop87:
						;

					} finally { DebugExitSubRule(87); }

					DebugLocation(368, 39);
					INDENT195=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2319); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT195);

					DebugLocation(368, 46);
					// SugarCpp.g:368:46: ( NEWLINE )*
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==NEWLINE))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch ( alt88 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:368:46: NEWLINE
							{
							DebugLocation(368, 46);
							NEWLINE196=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2321); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE196);


							}
							break;

						default:
							goto loop88;
						}
					}

					loop88:
						;

					} finally { DebugExitSubRule(88); }

					DebugLocation(368, 55);
					// SugarCpp.g:368:55: ( match_item ( NEWLINE )+ )+
					int cnt90=0;
					try { DebugEnterSubRule(90);
					while (true)
					{
						int alt90=2;
						try { DebugEnterDecision(90, false);
						int LA90_0 = input.LA(1);

						if ((LA90_0==180))
						{
							alt90 = 1;
						}


						} finally { DebugExitDecision(90); }
						switch (alt90)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:368:56: match_item ( NEWLINE )+
							{
							DebugLocation(368, 56);
							PushFollow(Follow._match_item_in_func_def2325);
							match_item197=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item197.Tree);
							DebugLocation(368, 67);
							// SugarCpp.g:368:67: ( NEWLINE )+
							int cnt89=0;
							try { DebugEnterSubRule(89);
							while (true)
							{
								int alt89=2;
								try { DebugEnterDecision(89, false);
								int LA89_0 = input.LA(1);

								if ((LA89_0==NEWLINE))
								{
									alt89 = 1;
								}


								} finally { DebugExitDecision(89); }
								switch (alt89)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:368:67: NEWLINE
									{
									DebugLocation(368, 67);
									NEWLINE198=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2327); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE198);


									}
									break;

								default:
									if (cnt89 >= 1)
										goto loop89;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee89 = new EarlyExitException( 89, input );
									DebugRecognitionException(eee89);
									throw eee89;
								}
								cnt89++;
							}
							loop89:
								;

							} finally { DebugExitSubRule(89); }


							}
							break;

						default:
							if (cnt90 >= 1)
								goto loop90;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee90 = new EarlyExitException( 90, input );
							DebugRecognitionException(eee90);
							throw eee90;
						}
						cnt90++;
					}
					loop90:
						;

					} finally { DebugExitSubRule(90); }

					DebugLocation(368, 78);
					DEDENT199=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2332); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT199);



					{
					// AST REWRITE
					// elements: generic_parameter, attribute, match_item, func_args, 176, 162, 184, func_name, func_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:85: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(368, 88);
						// SugarCpp.g:368:88: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 90);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(368, 99);
						// SugarCpp.g:368:99: ( 'public' )?
						if (stream_162.HasNext)
						{
							DebugLocation(368, 99);
							adaptor.AddChild(root_1, stream_162.NextNode());

						}
						stream_162.Reset();
						DebugLocation(368, 109);
						// SugarCpp.g:368:109: ( 'virtual' )?
						if (stream_176.HasNext)
						{
							DebugLocation(368, 109);
							adaptor.AddChild(root_1, stream_176.NextNode());

						}
						stream_176.Reset();
						DebugLocation(368, 120);
						// SugarCpp.g:368:120: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(368, 120);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(368, 131);
						// SugarCpp.g:368:131: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(368, 131);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(368, 142);
						// SugarCpp.g:368:142: ( '~' )?
						if (stream_184.HasNext)
						{
							DebugLocation(368, 142);
							adaptor.AddChild(root_1, stream_184.NextNode());

						}
						stream_184.Reset();
						DebugLocation(368, 147);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(368, 157);
						// SugarCpp.g:368:157: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(368, 157);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(368, 176);
						// SugarCpp.g:368:176: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(368, 176);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(368, 187);
						// SugarCpp.g:368:187: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 189);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(368, 200);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(368, 200);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(91); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:370:30: 
				{

				{
				// AST REWRITE
				// elements: func_name, func_type, generic_parameter, attribute, func_args, 176, 162, 184
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 370:30: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? Func_Declare )
				{
					DebugLocation(370, 33);
					// SugarCpp.g:370:33: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? Func_Declare )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(370, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(370, 44);
					// SugarCpp.g:370:44: ( 'public' )?
					if (stream_162.HasNext)
					{
						DebugLocation(370, 44);
						adaptor.AddChild(root_1, stream_162.NextNode());

					}
					stream_162.Reset();
					DebugLocation(370, 54);
					// SugarCpp.g:370:54: ( 'virtual' )?
					if (stream_176.HasNext)
					{
						DebugLocation(370, 54);
						adaptor.AddChild(root_1, stream_176.NextNode());

					}
					stream_176.Reset();
					DebugLocation(370, 65);
					// SugarCpp.g:370:65: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(370, 65);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(370, 76);
					// SugarCpp.g:370:76: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(370, 76);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(370, 87);
					// SugarCpp.g:370:87: ( '~' )?
					if (stream_184.HasNext)
					{
						DebugLocation(370, 87);
						adaptor.AddChild(root_1, stream_184.NextNode());

					}
					stream_184.Reset();
					DebugLocation(370, 92);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(370, 102);
					// SugarCpp.g:370:102: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(370, 102);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(370, 121);
					// SugarCpp.g:370:121: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(370, 121);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(370, 132);
					adaptor.AddChild(root_1, (CommonTree)adaptor.Create(Func_Declare, "Func_Declare"));

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(92); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 29);
			LeaveRule("func_def", 29);
			LeaveRule_func_def();
		}
		DebugLocation(372, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:374:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 30);
		TraceIn("stmt_block_item", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE201 = default(IToken);
		IToken NEWLINE203 = default(IToken);
		IToken char_literal204 = default(IToken);
		IToken NEWLINE205 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex200 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple202 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE201_tree = default(CommonTree);
		CommonTree NEWLINE203_tree = default(CommonTree);
		CommonTree char_literal204_tree = default(CommonTree);
		CommonTree NEWLINE205_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			int LA97_0 = input.LA(1);

			if ((LA97_0==142||(LA97_0>=147 && LA97_0<=149)||LA97_0==156||LA97_0==167||LA97_0==171||(LA97_0>=173 && LA97_0<=174)||LA97_0==179))
			{
				alt97 = 1;
			}
			else if ((LA97_0==IDENT||LA97_0==86||LA97_0==91||LA97_0==93||LA97_0==95||(LA97_0>=97 && LA97_0<=98)||(LA97_0>=101 && LA97_0<=102)||LA97_0==131||LA97_0==160||LA97_0==163||LA97_0==172||LA97_0==175||LA97_0==184))
			{
				alt97 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 97, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:375:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(375, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2500);
				stmt_complex200=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex200.Tree);
				DebugLocation(375, 17);
				// SugarCpp.g:375:17: ( NEWLINE )+
				int cnt93=0;
				try { DebugEnterSubRule(93);
				while (true)
				{
					int alt93=2;
					try { DebugEnterDecision(93, false);
					int LA93_0 = input.LA(1);

					if ((LA93_0==NEWLINE))
					{
						alt93 = 1;
					}


					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:375:17: NEWLINE
						{
						DebugLocation(375, 17);
						NEWLINE201=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2502); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE201);


						}
						break;

					default:
						if (cnt93 >= 1)
							goto loop93;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee93 = new EarlyExitException( 93, input );
						DebugRecognitionException(eee93);
						throw eee93;
					}
					cnt93++;
				}
				loop93:
					;

				} finally { DebugExitSubRule(93); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 375:26: -> stmt_complex
				{
					DebugLocation(375, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:376:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(376, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2512);
				stmt_simple202=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple202.Tree);
				DebugLocation(376, 16);
				// SugarCpp.g:376:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==NEWLINE))
				{
					alt96 = 1;
				}
				else if ((LA96_0==114))
				{
					alt96 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:376:17: ( NEWLINE )+
					{
					DebugLocation(376, 17);
					// SugarCpp.g:376:17: ( NEWLINE )+
					int cnt94=0;
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, false);
						int LA94_0 = input.LA(1);

						if ((LA94_0==NEWLINE))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch (alt94)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:376:17: NEWLINE
							{
							DebugLocation(376, 17);
							NEWLINE203=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2515); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE203);


							}
							break;

						default:
							if (cnt94 >= 1)
								goto loop94;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee94 = new EarlyExitException( 94, input );
							DebugRecognitionException(eee94);
							throw eee94;
						}
						cnt94++;
					}
					loop94:
						;

					} finally { DebugExitSubRule(94); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:376:28: ';' ( NEWLINE )*
					{
					DebugLocation(376, 28);
					char_literal204=(IToken)Match(input,114,Follow._114_in_stmt_block_item2520); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_114.Add(char_literal204);

					DebugLocation(376, 32);
					// SugarCpp.g:376:32: ( NEWLINE )*
					try { DebugEnterSubRule(95);
					while (true)
					{
						int alt95=2;
						try { DebugEnterDecision(95, false);
						int LA95_0 = input.LA(1);

						if ((LA95_0==NEWLINE))
						{
							alt95 = 1;
						}


						} finally { DebugExitDecision(95); }
						switch ( alt95 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:376:32: NEWLINE
							{
							DebugLocation(376, 32);
							NEWLINE205=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2522); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE205);


							}
							break;

						default:
							goto loop95;
						}
					}

					loop95:
						;

					} finally { DebugExitSubRule(95); }


					}
					break;

				}
				} finally { DebugExitSubRule(96); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 376:42: -> stmt_simple
				{
					DebugLocation(376, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 30);
			LeaveRule("stmt_block_item", 30);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:379:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 31);
		TraceIn("stmt_block", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT206 = default(IToken);
		IToken NEWLINE207 = default(IToken);
		IToken DEDENT209 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item208 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT206_tree = default(CommonTree);
		CommonTree NEWLINE207_tree = default(CommonTree);
		CommonTree DEDENT209_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(379, 1);
		try
		{
			// SugarCpp.g:380:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:380:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(380, 4);
			INDENT206=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2539); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT206);

			DebugLocation(380, 11);
			// SugarCpp.g:380:11: ( NEWLINE )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==NEWLINE))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:11: NEWLINE
					{
					DebugLocation(380, 11);
					NEWLINE207=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2541); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE207);


					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }

			DebugLocation(380, 20);
			// SugarCpp.g:380:20: ( stmt_block_item )*
			try { DebugEnterSubRule(99);
			while (true)
			{
				int alt99=2;
				try { DebugEnterDecision(99, false);
				int LA99_0 = input.LA(1);

				if ((LA99_0==IDENT||LA99_0==86||LA99_0==91||LA99_0==93||LA99_0==95||(LA99_0>=97 && LA99_0<=98)||(LA99_0>=101 && LA99_0<=102)||LA99_0==131||LA99_0==142||(LA99_0>=147 && LA99_0<=149)||LA99_0==156||LA99_0==160||LA99_0==163||LA99_0==167||(LA99_0>=171 && LA99_0<=175)||LA99_0==179||LA99_0==184))
				{
					alt99 = 1;
				}


				} finally { DebugExitDecision(99); }
				switch ( alt99 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:380:20: stmt_block_item
					{
					DebugLocation(380, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2544);
					stmt_block_item208=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item208.Tree);

					}
					break;

				default:
					goto loop99;
				}
			}

			loop99:
				;

			} finally { DebugExitSubRule(99); }

			DebugLocation(380, 37);
			DEDENT209=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2547); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT209);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 380:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(380, 47);
				// SugarCpp.g:380:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(380, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(380, 60);
				// SugarCpp.g:380:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(380, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 31);
			LeaveRule("stmt_block", 31);
			LeaveRule_stmt_block();
		}
		DebugLocation(381, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:383:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 32);
		TraceIn("stmt", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(383, 1);
		try
		{
			// SugarCpp.g:384:2: ( stmt_simple | stmt_complex )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_0 = input.LA(1);

			if ((LA100_0==IDENT||LA100_0==86||LA100_0==91||LA100_0==93||LA100_0==95||(LA100_0>=97 && LA100_0<=98)||(LA100_0>=101 && LA100_0<=102)||LA100_0==131||LA100_0==160||LA100_0==163||LA100_0==172||LA100_0==175||LA100_0==184))
			{
				alt100 = 1;
			}
			else if ((LA100_0==142||(LA100_0>=147 && LA100_0<=149)||LA100_0==156||LA100_0==167||LA100_0==171||(LA100_0>=173 && LA100_0<=174)||LA100_0==179))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:384:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._stmt_simple_in_stmt2567);
				stmt_simple210=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple210.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:385:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._stmt_complex_in_stmt2572);
				stmt_complex211=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex211.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 32);
			LeaveRule("stmt", 32);
			LeaveRule_stmt();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:388:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 33);
		TraceIn("stmt_simple", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(388, 1);
		try
		{
			// SugarCpp.g:389:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:389:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(389, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2583);
			stmt_expr212=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr212.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 33);
			LeaveRule("stmt_simple", 33);
			LeaveRule_stmt_simple();
		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:392:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 34);
		TraceIn("stmt_complex", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer218 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(392, 1);
		try
		{
			// SugarCpp.g:393:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt101=6;
			try { DebugEnterDecision(101, false);
			switch (input.LA(1))
			{
			case 149:
			case 173:
				{
				alt101 = 1;
				}
				break;
			case 148:
				{
				alt101 = 2;
				}
				break;
			case 156:
			case 174:
			case 179:
				{
				alt101 = 3;
				}
				break;
			case 171:
				{
				alt101 = 4;
				}
				break;
			case 167:
				{
				alt101 = 5;
				}
				break;
			case 142:
			case 147:
				{
				alt101 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:393:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(393, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2594);
				stmt_if213=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if213.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:394:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2599);
				stmt_for214=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for214.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:395:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2604);
				stmt_while215=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while215.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:396:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(396, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2609);
				stmt_try216=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try216.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:397:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2614);
				stmt_switch217=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch217.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:398:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2619);
				stmt_defer218=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer218.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 34);
			LeaveRule("stmt_complex", 34);
			LeaveRule_stmt_complex();
		}
		DebugLocation(399, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:401:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 35);
		TraceIn("stmt_expr", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal219 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken string_literal223 = default(IToken);
		IToken string_literal225 = default(IToken);
		IToken string_literal227 = default(IToken);
		IToken char_literal229 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item230 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal219_tree = default(CommonTree);
		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		CommonTree string_literal225_tree = default(CommonTree);
		CommonTree string_literal227_tree = default(CommonTree);
		CommonTree char_literal229_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(401, 1);
		try
		{
			// SugarCpp.g:402:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:402:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(402, 4);
			// SugarCpp.g:402:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:402:5: a= stmt_expr_item
			{
			DebugLocation(402, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2633);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 402:22: -> $a
			{
				DebugLocation(402, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(402, 29);
			// SugarCpp.g:402:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=6;
				try { DebugEnterDecision(103, false);
				switch (input.LA(1))
				{
				case 149:
					{
					alt103 = 1;
					}
					break;
				case 173:
					{
					alt103 = 2;
					}
					break;
				case 179:
					{
					alt103 = 3;
					}
					break;
				case 174:
					{
					alt103 = 4;
					}
					break;
				case 148:
					{
					alt103 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:402:31: 'if' expr
					{
					DebugLocation(402, 31);
					string_literal219=(IToken)Match(input,149,Follow._149_in_stmt_expr2643); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_149.Add(string_literal219);

					DebugLocation(402, 36);
					PushFollow(Follow._expr_in_stmt_expr2645);
					expr220=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr220.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 402:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(402, 44);
						// SugarCpp.g:402:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(402, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(402, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(402, 59);
						// SugarCpp.g:402:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(402, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(402, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:403:13: 'unless' expr
					{
					DebugLocation(403, 13);
					string_literal221=(IToken)Match(input,173,Follow._173_in_stmt_expr2674); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(string_literal221);

					DebugLocation(403, 22);
					PushFollow(Follow._expr_in_stmt_expr2676);
					expr222=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr222.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(403, 30);
						// SugarCpp.g:403:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(403, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(403, 49);
						// SugarCpp.g:403:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(403, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:404:13: 'while' expr
					{
					DebugLocation(404, 13);
					string_literal223=(IToken)Match(input,179,Follow._179_in_stmt_expr2705); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_179.Add(string_literal223);

					DebugLocation(404, 21);
					PushFollow(Follow._expr_in_stmt_expr2707);
					expr224=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr224.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(404, 29);
						// SugarCpp.g:404:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(404, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(404, 47);
						// SugarCpp.g:404:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(404, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:405:13: 'until' expr
					{
					DebugLocation(405, 13);
					string_literal225=(IToken)Match(input,174,Follow._174_in_stmt_expr2736); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(string_literal225);

					DebugLocation(405, 21);
					PushFollow(Follow._expr_in_stmt_expr2738);
					expr226=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr226.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(405, 29);
						// SugarCpp.g:405:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(405, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(405, 47);
						// SugarCpp.g:405:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(405, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:406:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(406, 13);
					string_literal227=(IToken)Match(input,148,Follow._148_in_stmt_expr2767); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_148.Add(string_literal227);

					DebugLocation(406, 19);
					PushFollow(Follow._for_item_in_stmt_expr2769);
					for_item228=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item228.Tree);
					DebugLocation(406, 28);
					// SugarCpp.g:406:28: ( ',' for_item )*
					try { DebugEnterSubRule(102);
					while (true)
					{
						int alt102=2;
						try { DebugEnterDecision(102, false);
						int LA102_0 = input.LA(1);

						if ((LA102_0==100))
						{
							alt102 = 1;
						}


						} finally { DebugExitDecision(102); }
						switch ( alt102 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:406:29: ',' for_item
							{
							DebugLocation(406, 29);
							char_literal229=(IToken)Match(input,100,Follow._100_in_stmt_expr2772); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal229);

							DebugLocation(406, 33);
							PushFollow(Follow._for_item_in_stmt_expr2774);
							for_item230=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item230.Tree);

							}
							break;

						default:
							goto loop102;
						}
					}

					loop102:
						;

					} finally { DebugExitSubRule(102); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 406:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(406, 47);
						// SugarCpp.g:406:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(406, 58);
						// SugarCpp.g:406:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(406, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(406, 68);
						// SugarCpp.g:406:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(406, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 35);
			LeaveRule("stmt_expr", 35);
			LeaveRule_stmt_expr();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:410:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 36);
		TraceIn("stmt_expr_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(410, 1);
		try
		{
			// SugarCpp.g:411:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt104=5;
			try { DebugEnterDecision(104, false);
			try
			{
				alt104 = dfa104.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:411:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(411, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2816);
				stmt_alloc231=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc231.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:412:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2821);
				stmt_return232=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return232.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:413:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(413, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2826);
				stmt_using233=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using233.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:414:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(414, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2831);
				stmt_typedef234=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef234.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:415:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(415, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2836);
				stmt_modify235=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify235.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 36);
			LeaveRule("stmt_expr_item", 36);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(416, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:418:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 37);
		TraceIn("stmt_defer", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal236 = default(IToken);
		IToken string_literal238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal236_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(418, 1);
		try
		{
			// SugarCpp.g:419:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt105=2;
			try { DebugEnterDecision(105, false);
			int LA105_0 = input.LA(1);

			if ((LA105_0==142))
			{
				alt105 = 1;
			}
			else if ((LA105_0==147))
			{
				alt105 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:419:4: 'defer' stmt
				{
				DebugLocation(419, 4);
				string_literal236=(IToken)Match(input,142,Follow._142_in_stmt_defer2847); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal236);

				DebugLocation(419, 12);
				PushFollow(Follow._stmt_in_stmt_defer2849);
				stmt237=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt237.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 419:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(419, 20);
					// SugarCpp.g:419:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(419, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(419, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:420:4: 'finally' stmt
				{
				DebugLocation(420, 4);
				string_literal238=(IToken)Match(input,147,Follow._147_in_stmt_defer2862); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal238);

				DebugLocation(420, 14);
				PushFollow(Follow._stmt_in_stmt_defer2864);
				stmt239=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt239.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 420:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(420, 22);
					// SugarCpp.g:420:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(420, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(420, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 37);
			LeaveRule("stmt_defer", 37);
			LeaveRule_stmt_defer();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:423:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 38);
		TraceIn("stmt_typedef", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal240 = default(IToken);
		IToken char_literal242 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident241 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name243 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal240_tree = default(CommonTree);
		CommonTree char_literal242_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(423, 1);
		try
		{
			// SugarCpp.g:424:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:424:4: 'typedef' ident '=' type_name
			{
			DebugLocation(424, 4);
			string_literal240=(IToken)Match(input,172,Follow._172_in_stmt_typedef2883); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal240);

			DebugLocation(424, 14);
			PushFollow(Follow._ident_in_stmt_typedef2885);
			ident241=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident241.Tree);
			DebugLocation(424, 20);
			char_literal242=(IToken)Match(input,121,Follow._121_in_stmt_typedef2887); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_121.Add(char_literal242);

			DebugLocation(424, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2889);
			type_name243=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name243.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 424:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(424, 37);
				// SugarCpp.g:424:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(424, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(424, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(424, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 38);
			LeaveRule("stmt_typedef", 38);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:427:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 39);
		TraceIn("stmt_using_item", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal245_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(427, 36);
		try
		{
			// SugarCpp.g:427:16: ( ident | 'namespace' )
			int alt106=2;
			try { DebugEnterDecision(106, false);
			int LA106_0 = input.LA(1);

			if ((LA106_0==IDENT))
			{
				alt106 = 1;
			}
			else if ((LA106_0==158))
			{
				alt106 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:427:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(427, 18);
				PushFollow(Follow._ident_in_stmt_using_item2908);
				ident244=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident244.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:427:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(427, 26);
				string_literal245=(IToken)Match(input,158,Follow._158_in_stmt_using_item2912); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal245_tree = (CommonTree)adaptor.Create(string_literal245);
				adaptor.AddChild(root_0, string_literal245_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 39);
			LeaveRule("stmt_using_item", 39);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(427, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:428:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 40);
		TraceIn("stmt_using", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal246 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal246_tree = default(CommonTree);
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(428, 1);
		try
		{
			// SugarCpp.g:429:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:429:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(429, 4);
			string_literal246=(IToken)Match(input,175,Follow._175_in_stmt_using2920); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_175.Add(string_literal246);

			DebugLocation(429, 12);
			// SugarCpp.g:429:12: ( stmt_using_item )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==IDENT||LA107_0==158))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:12: stmt_using_item
					{
					DebugLocation(429, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2922);
					stmt_using_item247=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item247.Tree);

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 429:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(429, 32);
				// SugarCpp.g:429:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(429, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(429, 45);
				// SugarCpp.g:429:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(429, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 40);
			LeaveRule("stmt_using", 40);
			LeaveRule_stmt_using();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:432:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal248 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr249 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal248_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(432, 1);
		try
		{
			// SugarCpp.g:433:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:433:4: 'return' ( expr )?
			{
			DebugLocation(433, 4);
			string_literal248=(IToken)Match(input,163,Follow._163_in_stmt_return2943); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_163.Add(string_literal248);

			DebugLocation(433, 13);
			// SugarCpp.g:433:13: ( expr )?
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_0 = input.LA(1);

			if ((LA108_0==IDENT||LA108_0==NUMBER||LA108_0==STRING||LA108_0==86||LA108_0==91||LA108_0==93||LA108_0==95||(LA108_0>=97 && LA108_0<=98)||(LA108_0>=101 && LA108_0<=102)||(LA108_0>=131 && LA108_0<=132)||LA108_0==154||LA108_0==157||(LA108_0>=159 && LA108_0<=160)||LA108_0==184))
			{
				alt108 = 1;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:433:13: expr
				{
				DebugLocation(433, 13);
				PushFollow(Follow._expr_in_stmt_return2945);
				expr249=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr249.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(108); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 433:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(433, 22);
				// SugarCpp.g:433:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(433, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(433, 36);
				// SugarCpp.g:433:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(433, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:436:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 42);
		TraceIn("inline_stmt_block", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal251 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple252 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal251_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(436, 1);
		try
		{
			// SugarCpp.g:437:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:437:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(437, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2966);
			stmt_simple250=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple250.Tree);
			DebugLocation(437, 16);
			// SugarCpp.g:437:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==114))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch ( alt109 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:437:17: ';' stmt_simple
					{
					DebugLocation(437, 17);
					char_literal251=(IToken)Match(input,114,Follow._114_in_inline_stmt_block2969); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_114.Add(char_literal251);

					DebugLocation(437, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2971);
					stmt_simple252=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple252.Tree);

					}
					break;

				default:
					goto loop109;
				}
			}

			loop109:
				;

			} finally { DebugExitSubRule(109); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 437:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(437, 38);
				// SugarCpp.g:437:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(437, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(437, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(437, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 42);
			LeaveRule("inline_stmt_block", 42);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(438, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:440:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 43);
		TraceIn("stmt_if", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		IToken NEWLINE257 = default(IToken);
		IToken string_literal258 = default(IToken);
		IToken NEWLINE259 = default(IToken);
		IToken string_literal261 = default(IToken);
		IToken string_literal263 = default(IToken);
		IToken NEWLINE265 = default(IToken);
		IToken NEWLINE267 = default(IToken);
		IToken string_literal268 = default(IToken);
		IToken NEWLINE269 = default(IToken);
		IToken string_literal271 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block256 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block260 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block272 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		CommonTree NEWLINE257_tree = default(CommonTree);
		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree NEWLINE259_tree = default(CommonTree);
		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree NEWLINE265_tree = default(CommonTree);
		CommonTree NEWLINE267_tree = default(CommonTree);
		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree NEWLINE269_tree = default(CommonTree);
		CommonTree string_literal271_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(440, 1);
		try
		{
			// SugarCpp.g:441:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt120=2;
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==149))
			{
				alt120 = 1;
			}
			else if ((LA120_0==173))
			{
				alt120 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:441:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(441, 4);
				string_literal253=(IToken)Match(input,149,Follow._149_in_stmt_if2993); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal253);

				DebugLocation(441, 9);
				PushFollow(Follow._expr_in_stmt_if2995);
				expr254=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr254.Tree);
				DebugLocation(441, 14);
				// SugarCpp.g:441:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==NEWLINE))
				{
					alt114 = 1;
				}
				else if ((LA114_0==168))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:441:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(441, 15);
					// SugarCpp.g:441:15: ( NEWLINE )+
					int cnt110=0;
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=2;
						try { DebugEnterDecision(110, false);
						int LA110_0 = input.LA(1);

						if ((LA110_0==NEWLINE))
						{
							alt110 = 1;
						}


						} finally { DebugExitDecision(110); }
						switch (alt110)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:441:15: NEWLINE
							{
							DebugLocation(441, 15);
							NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2998); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE255);


							}
							break;

						default:
							if (cnt110 >= 1)
								goto loop110;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee110 = new EarlyExitException( 110, input );
							DebugRecognitionException(eee110);
							throw eee110;
						}
						cnt110++;
					}
					loop110:
						;

					} finally { DebugExitSubRule(110); }

					DebugLocation(441, 24);
					PushFollow(Follow._stmt_block_in_stmt_if3001);
					stmt_block256=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block256.Tree);
					DebugLocation(441, 35);
					// SugarCpp.g:441:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt113=2;
					try { DebugEnterSubRule(113);
					try { DebugEnterDecision(113, false);
					try
					{
						alt113 = dfa113.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:441:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(441, 36);
						// SugarCpp.g:441:36: ( NEWLINE )*
						try { DebugEnterSubRule(111);
						while (true)
						{
							int alt111=2;
							try { DebugEnterDecision(111, false);
							int LA111_0 = input.LA(1);

							if ((LA111_0==NEWLINE))
							{
								alt111 = 1;
							}


							} finally { DebugExitDecision(111); }
							switch ( alt111 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:441:36: NEWLINE
								{
								DebugLocation(441, 36);
								NEWLINE257=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3004); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE257);


								}
								break;

							default:
								goto loop111;
							}
						}

						loop111:
							;

						} finally { DebugExitSubRule(111); }

						DebugLocation(441, 45);
						string_literal258=(IToken)Match(input,144,Follow._144_in_stmt_if3007); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal258);

						DebugLocation(441, 52);
						// SugarCpp.g:441:52: ( NEWLINE )+
						int cnt112=0;
						try { DebugEnterSubRule(112);
						while (true)
						{
							int alt112=2;
							try { DebugEnterDecision(112, false);
							int LA112_0 = input.LA(1);

							if ((LA112_0==NEWLINE))
							{
								alt112 = 1;
							}


							} finally { DebugExitDecision(112); }
							switch (alt112)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:441:52: NEWLINE
								{
								DebugLocation(441, 52);
								NEWLINE259=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3009); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE259);


								}
								break;

							default:
								if (cnt112 >= 1)
									goto loop112;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee112 = new EarlyExitException( 112, input );
								DebugRecognitionException(eee112);
								throw eee112;
							}
							cnt112++;
						}
						loop112:
							;

						} finally { DebugExitSubRule(112); }

						DebugLocation(441, 61);
						PushFollow(Follow._stmt_block_in_stmt_if3012);
						stmt_block260=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block260.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(113); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(441, 77);
						// SugarCpp.g:441:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(441, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(441, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(441, 103);
						// SugarCpp.g:441:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(441, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:442:16: 'then' inline_stmt_block
					{
					DebugLocation(442, 16);
					string_literal261=(IToken)Match(input,168,Follow._168_in_stmt_if3044); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal261);

					DebugLocation(442, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3046);
					inline_stmt_block262=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block262.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(442, 44);
						// SugarCpp.g:442:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(442, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(442, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:444:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(444, 4);
				string_literal263=(IToken)Match(input,173,Follow._173_in_stmt_if3067); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(string_literal263);

				DebugLocation(444, 13);
				PushFollow(Follow._expr_in_stmt_if3069);
				expr264=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr264.Tree);
				DebugLocation(444, 18);
				// SugarCpp.g:444:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==NEWLINE))
				{
					alt119 = 1;
				}
				else if ((LA119_0==168))
				{
					alt119 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:444:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(444, 19);
					// SugarCpp.g:444:19: ( NEWLINE )+
					int cnt115=0;
					try { DebugEnterSubRule(115);
					while (true)
					{
						int alt115=2;
						try { DebugEnterDecision(115, false);
						int LA115_0 = input.LA(1);

						if ((LA115_0==NEWLINE))
						{
							alt115 = 1;
						}


						} finally { DebugExitDecision(115); }
						switch (alt115)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:444:19: NEWLINE
							{
							DebugLocation(444, 19);
							NEWLINE265=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3072); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE265);


							}
							break;

						default:
							if (cnt115 >= 1)
								goto loop115;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee115 = new EarlyExitException( 115, input );
							DebugRecognitionException(eee115);
							throw eee115;
						}
						cnt115++;
					}
					loop115:
						;

					} finally { DebugExitSubRule(115); }

					DebugLocation(444, 28);
					PushFollow(Follow._stmt_block_in_stmt_if3075);
					stmt_block266=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block266.Tree);
					DebugLocation(444, 39);
					// SugarCpp.g:444:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt118=2;
					try { DebugEnterSubRule(118);
					try { DebugEnterDecision(118, false);
					try
					{
						alt118 = dfa118.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(118); }
					switch (alt118)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:444:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(444, 40);
						// SugarCpp.g:444:40: ( NEWLINE )*
						try { DebugEnterSubRule(116);
						while (true)
						{
							int alt116=2;
							try { DebugEnterDecision(116, false);
							int LA116_0 = input.LA(1);

							if ((LA116_0==NEWLINE))
							{
								alt116 = 1;
							}


							} finally { DebugExitDecision(116); }
							switch ( alt116 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:444:40: NEWLINE
								{
								DebugLocation(444, 40);
								NEWLINE267=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3078); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE267);


								}
								break;

							default:
								goto loop116;
							}
						}

						loop116:
							;

						} finally { DebugExitSubRule(116); }

						DebugLocation(444, 49);
						string_literal268=(IToken)Match(input,144,Follow._144_in_stmt_if3081); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_144.Add(string_literal268);

						DebugLocation(444, 56);
						// SugarCpp.g:444:56: ( NEWLINE )+
						int cnt117=0;
						try { DebugEnterSubRule(117);
						while (true)
						{
							int alt117=2;
							try { DebugEnterDecision(117, false);
							int LA117_0 = input.LA(1);

							if ((LA117_0==NEWLINE))
							{
								alt117 = 1;
							}


							} finally { DebugExitDecision(117); }
							switch (alt117)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:444:56: NEWLINE
								{
								DebugLocation(444, 56);
								NEWLINE269=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3083); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE269);


								}
								break;

							default:
								if (cnt117 >= 1)
									goto loop117;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee117 = new EarlyExitException( 117, input );
								DebugRecognitionException(eee117);
								throw eee117;
							}
							cnt117++;
						}
						loop117:
							;

						} finally { DebugExitSubRule(117); }

						DebugLocation(444, 65);
						PushFollow(Follow._stmt_block_in_stmt_if3086);
						stmt_block270=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block270.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(118); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(444, 81);
						// SugarCpp.g:444:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(444, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(444, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(444, 111);
						// SugarCpp.g:444:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(444, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:445:20: 'then' inline_stmt_block
					{
					DebugLocation(445, 20);
					string_literal271=(IToken)Match(input,168,Follow._168_in_stmt_if3122); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal271);

					DebugLocation(445, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3124);
					inline_stmt_block272=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block272.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 445:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(445, 48);
						// SugarCpp.g:445:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(445, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(445, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(445, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(119); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 43);
			LeaveRule("stmt_if", 43);
			LeaveRule_stmt_if();
		}
		DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:449:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 44);
		TraceIn("stmt_while", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal273 = default(IToken);
		IToken NEWLINE275 = default(IToken);
		IToken string_literal277 = default(IToken);
		IToken string_literal279 = default(IToken);
		IToken NEWLINE281 = default(IToken);
		IToken string_literal283 = default(IToken);
		IToken string_literal285 = default(IToken);
		IToken NEWLINE287 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr280 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block282 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block284 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr286 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block288 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree NEWLINE275_tree = default(CommonTree);
		CommonTree string_literal277_tree = default(CommonTree);
		CommonTree string_literal279_tree = default(CommonTree);
		CommonTree NEWLINE281_tree = default(CommonTree);
		CommonTree string_literal283_tree = default(CommonTree);
		CommonTree string_literal285_tree = default(CommonTree);
		CommonTree NEWLINE287_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(449, 1);
		try
		{
			// SugarCpp.g:450:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt127=3;
			try { DebugEnterDecision(127, false);
			switch (input.LA(1))
			{
			case 179:
				{
				alt127 = 1;
				}
				break;
			case 174:
				{
				alt127 = 2;
				}
				break;
			case 156:
				{
				alt127 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:450:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(450, 4);
				string_literal273=(IToken)Match(input,179,Follow._179_in_stmt_while3155); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_179.Add(string_literal273);

				DebugLocation(450, 12);
				PushFollow(Follow._expr_in_stmt_while3157);
				expr274=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr274.Tree);
				DebugLocation(450, 17);
				// SugarCpp.g:450:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==NEWLINE))
				{
					alt122 = 1;
				}
				else if ((LA122_0==168))
				{
					alt122 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:450:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(450, 19);
					// SugarCpp.g:450:19: ( NEWLINE )+
					int cnt121=0;
					try { DebugEnterSubRule(121);
					while (true)
					{
						int alt121=2;
						try { DebugEnterDecision(121, false);
						int LA121_0 = input.LA(1);

						if ((LA121_0==NEWLINE))
						{
							alt121 = 1;
						}


						} finally { DebugExitDecision(121); }
						switch (alt121)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:450:19: NEWLINE
							{
							DebugLocation(450, 19);
							NEWLINE275=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3161); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE275);


							}
							break;

						default:
							if (cnt121 >= 1)
								goto loop121;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee121 = new EarlyExitException( 121, input );
							DebugRecognitionException(eee121);
							throw eee121;
						}
						cnt121++;
					}
					loop121:
						;

					} finally { DebugExitSubRule(121); }

					DebugLocation(450, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3164);
					stmt_block276=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block276.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 450:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(450, 42);
						// SugarCpp.g:450:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(450, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(450, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(450, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:451:13: 'then' inline_stmt_block
					{
					DebugLocation(451, 13);
					string_literal277=(IToken)Match(input,168,Follow._168_in_stmt_while3188); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal277);

					DebugLocation(451, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3190);
					inline_stmt_block278=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block278.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(451, 41);
						// SugarCpp.g:451:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(451, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(451, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(122); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:453:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(453, 4);
				string_literal279=(IToken)Match(input,174,Follow._174_in_stmt_while3214); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_174.Add(string_literal279);

				DebugLocation(453, 12);
				PushFollow(Follow._expr_in_stmt_while3216);
				expr280=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr280.Tree);
				DebugLocation(453, 17);
				// SugarCpp.g:453:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==NEWLINE))
				{
					alt124 = 1;
				}
				else if ((LA124_0==168))
				{
					alt124 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 124, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(453, 19);
					// SugarCpp.g:453:19: ( NEWLINE )+
					int cnt123=0;
					try { DebugEnterSubRule(123);
					while (true)
					{
						int alt123=2;
						try { DebugEnterDecision(123, false);
						int LA123_0 = input.LA(1);

						if ((LA123_0==NEWLINE))
						{
							alt123 = 1;
						}


						} finally { DebugExitDecision(123); }
						switch (alt123)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:453:19: NEWLINE
							{
							DebugLocation(453, 19);
							NEWLINE281=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3220); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE281);


							}
							break;

						default:
							if (cnt123 >= 1)
								goto loop123;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee123 = new EarlyExitException( 123, input );
							DebugRecognitionException(eee123);
							throw eee123;
						}
						cnt123++;
					}
					loop123:
						;

					} finally { DebugExitSubRule(123); }

					DebugLocation(453, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3223);
					stmt_block282=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block282.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 453:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(453, 42);
						// SugarCpp.g:453:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(453, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(453, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(453, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:454:13: 'then' inline_stmt_block
					{
					DebugLocation(454, 13);
					string_literal283=(IToken)Match(input,168,Follow._168_in_stmt_while3247); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal283);

					DebugLocation(454, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3249);
					inline_stmt_block284=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block284.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(454, 41);
						// SugarCpp.g:454:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(454, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(454, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(124); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:456:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(456, 4);
				string_literal285=(IToken)Match(input,156,Follow._156_in_stmt_while3273); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_156.Add(string_literal285);

				DebugLocation(456, 11);
				// SugarCpp.g:456:11: ( expr )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==IDENT||LA125_0==NUMBER||LA125_0==STRING||LA125_0==86||LA125_0==91||LA125_0==93||LA125_0==95||(LA125_0>=97 && LA125_0<=98)||(LA125_0>=101 && LA125_0<=102)||(LA125_0>=131 && LA125_0<=132)||LA125_0==154||LA125_0==157||(LA125_0>=159 && LA125_0<=160)||LA125_0==184))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:456:11: expr
					{
					DebugLocation(456, 11);
					PushFollow(Follow._expr_in_stmt_while3275);
					expr286=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr286.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(125); }

				DebugLocation(456, 17);
				// SugarCpp.g:456:17: ( NEWLINE )+
				int cnt126=0;
				try { DebugEnterSubRule(126);
				while (true)
				{
					int alt126=2;
					try { DebugEnterDecision(126, false);
					int LA126_0 = input.LA(1);

					if ((LA126_0==NEWLINE))
					{
						alt126 = 1;
					}


					} finally { DebugExitDecision(126); }
					switch (alt126)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:456:17: NEWLINE
						{
						DebugLocation(456, 17);
						NEWLINE287=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3278); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE287);


						}
						break;

					default:
						if (cnt126 >= 1)
							goto loop126;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee126 = new EarlyExitException( 126, input );
						DebugRecognitionException(eee126);
						throw eee126;
					}
					cnt126++;
				}
				loop126:
					;

				} finally { DebugExitSubRule(126); }

				DebugLocation(456, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3281);
				stmt_block288=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block288.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 456:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(456, 40);
					// SugarCpp.g:456:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(456, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(456, 52);
					// SugarCpp.g:456:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(456, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(456, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 44);
			LeaveRule("stmt_while", 44);
			LeaveRule_stmt_while();
		}
		DebugLocation(457, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:459:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 45);
		TraceIn("for_range", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken string_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken string_literal293 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken string_literal295 = default(IToken);
		IToken string_literal296 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree string_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree string_literal293_tree = default(CommonTree);
		CommonTree string_literal294_tree = default(CommonTree);
		CommonTree string_literal295_tree = default(CommonTree);
		CommonTree string_literal296_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(459, 1);
		try
		{
			// SugarCpp.g:460:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:460:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(460, 4);
			PushFollow(Follow._ident_in_for_range3303);
			ident289=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident289.Tree);
			DebugLocation(460, 10);
			string_literal290=(IToken)Match(input,116,Follow._116_in_for_range3305); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(string_literal290);

			DebugLocation(460, 16);
			PushFollow(Follow._expr_in_for_range3309);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(460, 22);
			// SugarCpp.g:460:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt131=4;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, false);
			switch (input.LA(1))
			{
			case 170:
				{
				alt131 = 1;
				}
				break;
			case 169:
				{
				alt131 = 2;
				}
				break;
			case 143:
				{
				alt131 = 3;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 100:
			case 114:
			case 133:
			case 148:
			case 149:
			case 151:
			case 173:
			case 174:
			case 179:
				{
				alt131 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 131, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:460:24: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(460, 24);
				string_literal291=(IToken)Match(input,170,Follow._170_in_for_range3313); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(string_literal291);

				DebugLocation(460, 30);
				PushFollow(Follow._expr_in_for_range3317);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(460, 36);
				// SugarCpp.g:460:36: ( 'by' c= expr )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==138))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:460:37: 'by' c= expr
					{
					DebugLocation(460, 37);
					string_literal292=(IToken)Match(input,138,Follow._138_in_for_range3320); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal292);

					DebugLocation(460, 43);
					PushFollow(Follow._expr_in_for_range3324);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(128); }



				{
				// AST REWRITE
				// elements: a, ident, c, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 460:51: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(460, 54);
					// SugarCpp.g:460:54: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(460, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(460, 68);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(460, 75);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(460, 78);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(460, 81);
					// SugarCpp.g:460:81: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(460, 81);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:461:9: 'til' b= expr ( 'by' c= expr )?
				{
				DebugLocation(461, 9);
				string_literal293=(IToken)Match(input,169,Follow._169_in_for_range3354); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal293);

				DebugLocation(461, 16);
				PushFollow(Follow._expr_in_for_range3358);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(461, 22);
				// SugarCpp.g:461:22: ( 'by' c= expr )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==138))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:461:23: 'by' c= expr
					{
					DebugLocation(461, 23);
					string_literal294=(IToken)Match(input,138,Follow._138_in_for_range3361); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal294);

					DebugLocation(461, 29);
					PushFollow(Follow._expr_in_for_range3365);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(129); }



				{
				// AST REWRITE
				// elements: ident, a, c, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 461:37: -> ^( For_Item_Til ident $a $b ( $c)? )
				{
					DebugLocation(461, 40);
					// SugarCpp.g:461:40: ^( For_Item_Til ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(461, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Til, "For_Item_Til"), root_1);

					DebugLocation(461, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(461, 62);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(461, 65);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(461, 68);
					// SugarCpp.g:461:68: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(461, 68);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:462:9: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(462, 9);
				string_literal295=(IToken)Match(input,143,Follow._143_in_for_range3395); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal295);

				DebugLocation(462, 19);
				PushFollow(Follow._expr_in_for_range3399);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(462, 25);
				// SugarCpp.g:462:25: ( 'by' c= expr )?
				int alt130=2;
				try { DebugEnterSubRule(130);
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==138))
				{
					alt130 = 1;
				}
				} finally { DebugExitDecision(130); }
				switch (alt130)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:462:26: 'by' c= expr
					{
					DebugLocation(462, 26);
					string_literal296=(IToken)Match(input,138,Follow._138_in_for_range3402); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_138.Add(string_literal296);

					DebugLocation(462, 32);
					PushFollow(Follow._expr_in_for_range3406);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(130); }



				{
				// AST REWRITE
				// elements: a, c, b, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 462:40: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(462, 43);
					// SugarCpp.g:462:43: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(462, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(462, 62);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(462, 69);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(462, 72);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(462, 75);
					// SugarCpp.g:462:75: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(462, 75);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:463:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 463:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(463, 12);
					// SugarCpp.g:463:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(463, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(463, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(463, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(131); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 45);
			LeaveRule("for_range", 45);
			LeaveRule_for_range();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:467:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 46);
		TraceIn("for_when", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr297 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(467, 1);
		try
		{
			// SugarCpp.g:468:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:468:4: expr
			{
			DebugLocation(468, 4);
			PushFollow(Follow._expr_in_for_when3464);
			expr297=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr297.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 468:9: -> ^( For_Item_When expr )
			{
				DebugLocation(468, 12);
				// SugarCpp.g:468:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(468, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(468, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 46);
			LeaveRule("for_when", 46);
			LeaveRule_for_when();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:471:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 47);
		TraceIn("for_map", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal299 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal299_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(471, 1);
		try
		{
			// SugarCpp.g:472:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:472:4: ident '=>' expr
			{
			DebugLocation(472, 4);
			PushFollow(Follow._ident_in_for_map3483);
			ident298=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident298.Tree);
			DebugLocation(472, 10);
			string_literal299=(IToken)Match(input,124,Follow._124_in_for_map3485); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal299);

			DebugLocation(472, 15);
			PushFollow(Follow._expr_in_for_map3487);
			expr300=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr300.Tree);


			{
			// AST REWRITE
			// elements: ident, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 472:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(472, 23);
				// SugarCpp.g:472:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(472, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(472, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(472, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 47);
			LeaveRule("for_map", 47);
			LeaveRule_for_map();
		}
		DebugLocation(473, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:475:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 48);
		TraceIn("for_item", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map303 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(475, 1);
		try
		{
			// SugarCpp.g:476:2: ( for_range | for_when | for_map )
			int alt132=3;
			try { DebugEnterDecision(132, false);
			try
			{
				alt132 = dfa132.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:476:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(476, 4);
				PushFollow(Follow._for_range_in_for_item3508);
				for_range301=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range301.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:477:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(477, 4);
				PushFollow(Follow._for_when_in_for_item3513);
				for_when302=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when302.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:478:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(478, 4);
				PushFollow(Follow._for_map_in_for_item3518);
				for_map303=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map303.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 48);
			LeaveRule("for_item", 48);
			LeaveRule_for_item();
		}
		DebugLocation(479, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:481:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 49);
		TraceIn("stmt_for", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal304 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken NEWLINE308 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block309 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree NEWLINE308_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(481, 1);
		try
		{
			// SugarCpp.g:482:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:482:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(482, 4);
			string_literal304=(IToken)Match(input,148,Follow._148_in_stmt_for3529); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_148.Add(string_literal304);

			DebugLocation(482, 10);
			// SugarCpp.g:482:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:482:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(482, 12);
			PushFollow(Follow._for_item_in_stmt_for3533);
			for_item305=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item305.Tree);
			DebugLocation(482, 21);
			// SugarCpp.g:482:21: ( ',' for_item )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==100))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:482:22: ',' for_item
					{
					DebugLocation(482, 22);
					char_literal306=(IToken)Match(input,100,Follow._100_in_stmt_for3536); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal306);

					DebugLocation(482, 26);
					PushFollow(Follow._for_item_in_stmt_for3538);
					for_item307=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item307.Tree);

					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }

			DebugLocation(482, 37);
			// SugarCpp.g:482:37: ( NEWLINE )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==NEWLINE))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:482:37: NEWLINE
					{
					DebugLocation(482, 37);
					NEWLINE308=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3542); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE308);


					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(482, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3545);
			stmt_block309=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block309.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 482:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(482, 60);
				// SugarCpp.g:482:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(482, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(482, 71);
				// SugarCpp.g:482:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(482, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(482, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 49);
			LeaveRule("stmt_for", 49);
			LeaveRule_stmt_for();
		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:487:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 50);
		TraceIn("stmt_try", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal310 = default(IToken);
		IToken NEWLINE311 = default(IToken);
		IToken NEWLINE313 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc315 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block317 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal310_tree = default(CommonTree);
		CommonTree NEWLINE311_tree = default(CommonTree);
		CommonTree NEWLINE313_tree = default(CommonTree);
		CommonTree string_literal314_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(487, 1);
		try
		{
			// SugarCpp.g:488:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:488:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(488, 4);
			string_literal310=(IToken)Match(input,171,Follow._171_in_stmt_try3576); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_171.Add(string_literal310);

			DebugLocation(488, 10);
			// SugarCpp.g:488:10: ( NEWLINE )+
			int cnt135=0;
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==NEWLINE))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch (alt135)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:488:10: NEWLINE
					{
					DebugLocation(488, 10);
					NEWLINE311=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3578); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE311);


					}
					break;

				default:
					if (cnt135 >= 1)
						goto loop135;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee135 = new EarlyExitException( 135, input );
					DebugRecognitionException(eee135);
					throw eee135;
				}
				cnt135++;
			}
			loop135:
				;

			} finally { DebugExitSubRule(135); }

			DebugLocation(488, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3581);
			stmt_block312=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block312.Tree);
			DebugLocation(488, 30);
			// SugarCpp.g:488:30: ( NEWLINE )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==NEWLINE))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:488:30: NEWLINE
					{
					DebugLocation(488, 30);
					NEWLINE313=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3583); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE313);


					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(488, 39);
			string_literal314=(IToken)Match(input,139,Follow._139_in_stmt_try3586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_139.Add(string_literal314);

			DebugLocation(488, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3588);
			stmt_alloc315=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc315.Tree);
			DebugLocation(488, 58);
			// SugarCpp.g:488:58: ( NEWLINE )+
			int cnt137=0;
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==NEWLINE))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch (alt137)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:488:58: NEWLINE
					{
					DebugLocation(488, 58);
					NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3590); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE316);


					}
					break;

				default:
					if (cnt137 >= 1)
						goto loop137;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee137 = new EarlyExitException( 137, input );
					DebugRecognitionException(eee137);
					throw eee137;
				}
				cnt137++;
			}
			loop137:
				;

			} finally { DebugExitSubRule(137); }

			DebugLocation(488, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3593);
			stmt_block317=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block317.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 488:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(488, 81);
				// SugarCpp.g:488:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(488, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(488, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(488, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(488, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 50);
			LeaveRule("stmt_try", 50);
			LeaveRule_stmt_try();
		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:491:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 51);
		TraceIn("switch_item", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal318 = default(IToken);
		IToken char_literal320 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		IToken string_literal324 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block323 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block325 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal318_tree = default(CommonTree);
		CommonTree char_literal320_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		CommonTree string_literal324_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(491, 1);
		try
		{
			// SugarCpp.g:492:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:492:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(492, 4);
			string_literal318=(IToken)Match(input,177,Follow._177_in_switch_item3616); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_177.Add(string_literal318);

			DebugLocation(492, 11);
			PushFollow(Follow._expr_in_switch_item3618);
			expr319=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr319.Tree);
			DebugLocation(492, 16);
			// SugarCpp.g:492:16: ( ',' expr )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=2;
				try { DebugEnterDecision(138, false);
				int LA138_0 = input.LA(1);

				if ((LA138_0==100))
				{
					alt138 = 1;
				}


				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:17: ',' expr
					{
					DebugLocation(492, 17);
					char_literal320=(IToken)Match(input,100,Follow._100_in_switch_item3621); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal320);

					DebugLocation(492, 21);
					PushFollow(Follow._expr_in_switch_item3623);
					expr321=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr321.Tree);

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }

			DebugLocation(492, 28);
			// SugarCpp.g:492:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt140=2;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			int LA140_0 = input.LA(1);

			if ((LA140_0==NEWLINE))
			{
				alt140 = 1;
			}
			else if ((LA140_0==168))
			{
				alt140 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 140, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:492:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(492, 30);
				// SugarCpp.g:492:30: ( NEWLINE )+
				int cnt139=0;
				try { DebugEnterSubRule(139);
				while (true)
				{
					int alt139=2;
					try { DebugEnterDecision(139, false);
					int LA139_0 = input.LA(1);

					if ((LA139_0==NEWLINE))
					{
						alt139 = 1;
					}


					} finally { DebugExitDecision(139); }
					switch (alt139)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:492:30: NEWLINE
						{
						DebugLocation(492, 30);
						NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3629); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE322);


						}
						break;

					default:
						if (cnt139 >= 1)
							goto loop139;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee139 = new EarlyExitException( 139, input );
						DebugRecognitionException(eee139);
						throw eee139;
					}
					cnt139++;
				}
				loop139:
					;

				} finally { DebugExitSubRule(139); }

				DebugLocation(492, 39);
				PushFollow(Follow._stmt_block_in_switch_item3632);
				stmt_block323=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block323.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 492:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(492, 53);
					// SugarCpp.g:492:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(492, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(492, 67);
					// SugarCpp.g:492:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(492, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(492, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(492, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(492, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:493:30: 'then' inline_stmt_block
				{
				DebugLocation(493, 30);
				string_literal324=(IToken)Match(input,168,Follow._168_in_switch_item3678); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal324);

				DebugLocation(493, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3680);
				inline_stmt_block325=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block325.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 493:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(493, 58);
					// SugarCpp.g:493:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(493, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(493, 72);
					// SugarCpp.g:493:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(493, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(493, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(493, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(493, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 51);
			LeaveRule("switch_item", 51);
			LeaveRule_switch_item();
		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:497:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 52);
		TraceIn("stmt_switch", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal326 = default(IToken);
		IToken NEWLINE328 = default(IToken);
		IToken INDENT329 = default(IToken);
		IToken NEWLINE330 = default(IToken);
		IToken NEWLINE332 = default(IToken);
		IToken string_literal333 = default(IToken);
		IToken NEWLINE334 = default(IToken);
		IToken NEWLINE336 = default(IToken);
		IToken DEDENT337 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item331 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block335 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal326_tree = default(CommonTree);
		CommonTree NEWLINE328_tree = default(CommonTree);
		CommonTree INDENT329_tree = default(CommonTree);
		CommonTree NEWLINE330_tree = default(CommonTree);
		CommonTree NEWLINE332_tree = default(CommonTree);
		CommonTree string_literal333_tree = default(CommonTree);
		CommonTree NEWLINE334_tree = default(CommonTree);
		CommonTree NEWLINE336_tree = default(CommonTree);
		CommonTree DEDENT337_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(497, 1);
		try
		{
			// SugarCpp.g:498:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:498:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(498, 4);
			string_literal326=(IToken)Match(input,167,Follow._167_in_stmt_switch3720); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(string_literal326);

			DebugLocation(498, 13);
			// SugarCpp.g:498:13: ( expr )?
			int alt141=2;
			try { DebugEnterSubRule(141);
			try { DebugEnterDecision(141, false);
			int LA141_0 = input.LA(1);

			if ((LA141_0==IDENT||LA141_0==NUMBER||LA141_0==STRING||LA141_0==86||LA141_0==91||LA141_0==93||LA141_0==95||(LA141_0>=97 && LA141_0<=98)||(LA141_0>=101 && LA141_0<=102)||(LA141_0>=131 && LA141_0<=132)||LA141_0==154||LA141_0==157||(LA141_0>=159 && LA141_0<=160)||LA141_0==184))
			{
				alt141 = 1;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:498:13: expr
				{
				DebugLocation(498, 13);
				PushFollow(Follow._expr_in_stmt_switch3722);
				expr327=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr327.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(141); }

			DebugLocation(498, 19);
			// SugarCpp.g:498:19: ( NEWLINE )+
			int cnt142=0;
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==NEWLINE))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:19: NEWLINE
					{
					DebugLocation(498, 19);
					NEWLINE328=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3725); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE328);


					}
					break;

				default:
					if (cnt142 >= 1)
						goto loop142;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee142 = new EarlyExitException( 142, input );
					DebugRecognitionException(eee142);
					throw eee142;
				}
				cnt142++;
			}
			loop142:
				;

			} finally { DebugExitSubRule(142); }

			DebugLocation(498, 28);
			INDENT329=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3728); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT329);

			DebugLocation(498, 35);
			// SugarCpp.g:498:35: ( NEWLINE )*
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_0 = input.LA(1);

				if ((LA143_0==NEWLINE))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch ( alt143 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:35: NEWLINE
					{
					DebugLocation(498, 35);
					NEWLINE330=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3730); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE330);


					}
					break;

				default:
					goto loop143;
				}
			}

			loop143:
				;

			} finally { DebugExitSubRule(143); }

			DebugLocation(498, 44);
			// SugarCpp.g:498:44: ( switch_item ( NEWLINE )+ )+
			int cnt145=0;
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==177))
				{
					alt145 = 1;
				}


				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:45: switch_item ( NEWLINE )+
					{
					DebugLocation(498, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3734);
					switch_item331=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item331.Tree);
					DebugLocation(498, 57);
					// SugarCpp.g:498:57: ( NEWLINE )+
					int cnt144=0;
					try { DebugEnterSubRule(144);
					while (true)
					{
						int alt144=2;
						try { DebugEnterDecision(144, false);
						int LA144_0 = input.LA(1);

						if ((LA144_0==NEWLINE))
						{
							alt144 = 1;
						}


						} finally { DebugExitDecision(144); }
						switch (alt144)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:498:57: NEWLINE
							{
							DebugLocation(498, 57);
							NEWLINE332=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3736); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE332);


							}
							break;

						default:
							if (cnt144 >= 1)
								goto loop144;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee144 = new EarlyExitException( 144, input );
							DebugRecognitionException(eee144);
							throw eee144;
						}
						cnt144++;
					}
					loop144:
						;

					} finally { DebugExitSubRule(144); }


					}
					break;

				default:
					if (cnt145 >= 1)
						goto loop145;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee145 = new EarlyExitException( 145, input );
					DebugRecognitionException(eee145);
					throw eee145;
				}
				cnt145++;
			}
			loop145:
				;

			} finally { DebugExitSubRule(145); }

			DebugLocation(498, 68);
			// SugarCpp.g:498:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt148=2;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			int LA148_0 = input.LA(1);

			if ((LA148_0==144))
			{
				alt148 = 1;
			}
			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:498:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(498, 69);
				string_literal333=(IToken)Match(input,144,Follow._144_in_stmt_switch3742); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal333);

				DebugLocation(498, 76);
				// SugarCpp.g:498:76: ( NEWLINE )+
				int cnt146=0;
				try { DebugEnterSubRule(146);
				while (true)
				{
					int alt146=2;
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==NEWLINE))
					{
						alt146 = 1;
					}


					} finally { DebugExitDecision(146); }
					switch (alt146)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:498:76: NEWLINE
						{
						DebugLocation(498, 76);
						NEWLINE334=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3744); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE334);


						}
						break;

					default:
						if (cnt146 >= 1)
							goto loop146;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee146 = new EarlyExitException( 146, input );
						DebugRecognitionException(eee146);
						throw eee146;
					}
					cnt146++;
				}
				loop146:
					;

				} finally { DebugExitSubRule(146); }

				DebugLocation(498, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3747);
				stmt_block335=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block335.Tree);
				DebugLocation(498, 96);
				// SugarCpp.g:498:96: ( NEWLINE )*
				try { DebugEnterSubRule(147);
				while (true)
				{
					int alt147=2;
					try { DebugEnterDecision(147, false);
					int LA147_0 = input.LA(1);

					if ((LA147_0==NEWLINE))
					{
						alt147 = 1;
					}


					} finally { DebugExitDecision(147); }
					switch ( alt147 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:498:96: NEWLINE
						{
						DebugLocation(498, 96);
						NEWLINE336=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3749); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE336);


						}
						break;

					default:
						goto loop147;
					}
				}

				loop147:
					;

				} finally { DebugExitSubRule(147); }


				}
				break;

			}
			} finally { DebugExitSubRule(148); }

			DebugLocation(498, 107);
			DEDENT337=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3754); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT337);



			{
			// AST REWRITE
			// elements: switch_item, expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 498:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(498, 117);
				// SugarCpp.g:498:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(498, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(498, 131);
				// SugarCpp.g:498:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(498, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(498, 137);
				// SugarCpp.g:498:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(498, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(498, 150);
				// SugarCpp.g:498:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(498, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 52);
			LeaveRule("stmt_switch", 52);
			LeaveRule_stmt_switch();
		}
		DebugLocation(499, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:501:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 53);
		TraceIn("ident_list", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal339 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident340 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal339_tree = default(CommonTree);
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(501, 1);
		try
		{
			// SugarCpp.g:502:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:502:4: ident ( ',' ident )*
			{
			DebugLocation(502, 4);
			PushFollow(Follow._ident_in_ident_list3780);
			ident338=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident338.Tree);
			DebugLocation(502, 10);
			// SugarCpp.g:502:10: ( ',' ident )*
			try { DebugEnterSubRule(149);
			while (true)
			{
				int alt149=2;
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==100))
				{
					alt149 = 1;
				}


				} finally { DebugExitDecision(149); }
				switch ( alt149 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:502:11: ',' ident
					{
					DebugLocation(502, 11);
					char_literal339=(IToken)Match(input,100,Follow._100_in_ident_list3783); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal339);

					DebugLocation(502, 15);
					PushFollow(Follow._ident_in_ident_list3785);
					ident340=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident340.Tree);

					}
					break;

				default:
					goto loop149;
				}
			}

			loop149:
				;

			} finally { DebugExitSubRule(149); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 502:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(502, 26);
				// SugarCpp.g:502:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(502, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(502, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(502, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 53);
			LeaveRule("ident_list", 53);
			LeaveRule_ident_list();
		}
		DebugLocation(503, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:505:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 54);
		TraceIn("stmt_alloc", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal342 = default(IToken);
		IToken char_literal344 = default(IToken);
		IToken string_literal345 = default(IToken);
		IToken string_literal348 = default(IToken);
		IToken char_literal350 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name343 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr349 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr351 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal342_tree = default(CommonTree);
		CommonTree char_literal344_tree = default(CommonTree);
		CommonTree string_literal345_tree = default(CommonTree);
		CommonTree string_literal348_tree = default(CommonTree);
		CommonTree char_literal350_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(505, 1);
		try
		{
			// SugarCpp.g:506:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:506:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(506, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3807);
			ident_list341=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list341.Tree);
			DebugLocation(506, 15);
			// SugarCpp.g:506:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt153=2;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			int LA153_0 = input.LA(1);

			if ((LA153_0==111))
			{
				alt153 = 1;
			}
			else if ((LA153_0==113))
			{
				alt153 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 153, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:506:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(506, 17);
				char_literal342=(IToken)Match(input,111,Follow._111_in_stmt_alloc3811); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal342);

				DebugLocation(506, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3813);
				type_name343=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name343.Tree);
				DebugLocation(506, 31);
				// SugarCpp.g:506:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt151=3;
				try { DebugEnterSubRule(151);
				try { DebugEnterDecision(151, false);
				switch (input.LA(1))
				{
				case 113:
				case 121:
					{
					alt151 = 1;
					}
					break;
				case 93:
					{
					alt151 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 114:
				case 148:
				case 149:
				case 151:
				case 173:
				case 174:
				case 179:
					{
					alt151 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(151); }
				switch (alt151)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:506:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(506, 33);
					// SugarCpp.g:506:33: ( '=' | ':=' )
					int alt150=2;
					try { DebugEnterSubRule(150);
					try { DebugEnterDecision(150, false);
					int LA150_0 = input.LA(1);

					if ((LA150_0==121))
					{
						alt150 = 1;
					}
					else if ((LA150_0==113))
					{
						alt150 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(150); }
					switch (alt150)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:34: '='
						{
						DebugLocation(506, 34);
						char_literal344=(IToken)Match(input,121,Follow._121_in_stmt_alloc3818); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_121.Add(char_literal344);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:506:40: ':='
						{
						DebugLocation(506, 40);
						string_literal345=(IToken)Match(input,113,Follow._113_in_stmt_alloc3822); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_113.Add(string_literal345);


						}
						break;

					}
					} finally { DebugExitSubRule(150); }

					DebugLocation(506, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3825);
					where_expr346=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr346.Tree);


					{
					// AST REWRITE
					// elements: ident_list, where_expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 506:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(506, 61);
						// SugarCpp.g:506:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(506, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(506, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(506, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(506, 101);
						// SugarCpp.g:506:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(506, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(506, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:507:33: bracket_expr_list
					{
					DebugLocation(507, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3876);
					bracket_expr_list347=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list347.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 507:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(507, 55);
						// SugarCpp.g:507:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(507, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(507, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(507, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(507, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:508:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 508:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(508, 18);
						// SugarCpp.g:508:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(508, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(508, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(508, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(508, 58);
						// SugarCpp.g:508:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(508, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(151); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:510:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(510, 8);
				string_literal348=(IToken)Match(input,113,Follow._113_in_stmt_alloc3940); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal348);

				DebugLocation(510, 14);
				// SugarCpp.g:510:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:510:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(510, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3944);
				where_expr349=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr349.Tree);
				DebugLocation(510, 26);
				// SugarCpp.g:510:26: ( ',' where_expr )*
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==100))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch ( alt152 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:510:27: ',' where_expr
						{
						DebugLocation(510, 27);
						char_literal350=(IToken)Match(input,100,Follow._100_in_stmt_alloc3947); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal350);

						DebugLocation(510, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3949);
						where_expr351=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr351.Tree);

						}
						break;

					default:
						goto loop152;
					}
				}

				loop152:
					;

				} finally { DebugExitSubRule(152); }


				}



				{
				// AST REWRITE
				// elements: where_expr, ident_list, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 510:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(510, 48);
					// SugarCpp.g:510:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(510, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_113.NextNode(), root_1);

					DebugLocation(510, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(510, 66);
					// SugarCpp.g:510:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(510, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(510, 78);
					// SugarCpp.g:510:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(510, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 54);
			LeaveRule("stmt_alloc", 54);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(511, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:513:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 55);
		TraceIn("stmt_modify", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal355 = default(IToken);
		IToken string_literal357 = default(IToken);
		IToken string_literal359 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr354 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr356 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal355_tree = default(CommonTree);
		CommonTree string_literal357_tree = default(CommonTree);
		CommonTree string_literal359_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(513, 1);
		try
		{
			// SugarCpp.g:514:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:514:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(514, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3979);
			lvalue352=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue352.Tree);
			DebugLocation(514, 11);
			// SugarCpp.g:514:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt154=5;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			switch (input.LA(1))
			{
			case 89:
			case 92:
			case 96:
			case 99:
			case 104:
			case 110:
			case 118:
			case 121:
			case 128:
			case 135:
			case 181:
				{
				alt154 = 1;
				}
				break;
			case 130:
				{
				alt154 = 2;
				}
				break;
			case 117:
				{
				alt154 = 3;
				}
				break;
			case 127:
				{
				alt154 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 114:
			case 148:
			case 149:
			case 151:
			case 173:
			case 174:
			case 179:
				{
				alt154 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 154, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:514:13: modify_expr_op where_expr
				{
				DebugLocation(514, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3983);
				modify_expr_op353=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op353.Tree);
				DebugLocation(514, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3985);
				where_expr354=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr354.Tree);


				{
				// AST REWRITE
				// elements: modify_expr_op, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 514:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(514, 42);
					// SugarCpp.g:514:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(514, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(514, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(514, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:515:13: '?=' where_expr
				{
				DebugLocation(515, 13);
				string_literal355=(IToken)Match(input,130,Follow._130_in_stmt_modify4009); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(string_literal355);

				DebugLocation(515, 18);
				PushFollow(Follow._where_expr_in_stmt_modify4011);
				where_expr356=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr356.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 130
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 515:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(515, 32);
					// SugarCpp.g:515:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(515, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(515, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(515, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:516:16: '<<' where_expr
				{
				DebugLocation(516, 16);
				string_literal357=(IToken)Match(input,117,Follow._117_in_stmt_modify4038); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_117.Add(string_literal357);

				DebugLocation(516, 21);
				PushFollow(Follow._where_expr_in_stmt_modify4040);
				where_expr358=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr358.Tree);


				{
				// AST REWRITE
				// elements: 117, lvalue, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 516:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(516, 35);
					// SugarCpp.g:516:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(516, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(516, 46);
					adaptor.AddChild(root_1, stream_117.NextNode());
					DebugLocation(516, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(516, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:517:16: '>>' where_expr
				{
				DebugLocation(517, 16);
				string_literal359=(IToken)Match(input,127,Follow._127_in_stmt_modify4069); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(string_literal359);

				DebugLocation(517, 21);
				PushFollow(Follow._where_expr_in_stmt_modify4071);
				where_expr360=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr360.Tree);


				{
				// AST REWRITE
				// elements: 127, lvalue, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 517:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(517, 35);
					// SugarCpp.g:517:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(517, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(517, 46);
					adaptor.AddChild(root_1, stream_127.NextNode());
					DebugLocation(517, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(517, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:518:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 518:7: -> lvalue
				{
					DebugLocation(518, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(154); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 55);
			LeaveRule("stmt_modify", 55);
			LeaveRule_stmt_modify();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:521:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 56);
		TraceIn("where_item", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt361 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:522:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(522, 4);
			PushFollow(Follow._stmt_in_where_item4105);
			stmt361=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt361.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 56);
			LeaveRule("where_item", 56);
			LeaveRule_where_item();
		}
		DebugLocation(523, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:525:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 57);
		TraceIn("where_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE362 = default(IToken);
		IToken INDENT363 = default(IToken);
		IToken NEWLINE364 = default(IToken);
		IToken string_literal365 = default(IToken);
		IToken NEWLINE367 = default(IToken);
		IToken DEDENT368 = default(IToken);
		IToken NEWLINE369 = default(IToken);
		IToken INDENT370 = default(IToken);
		IToken NEWLINE371 = default(IToken);
		IToken NEWLINE373 = default(IToken);
		IToken DEDENT374 = default(IToken);
		IToken NEWLINE375 = default(IToken);
		IToken DEDENT376 = default(IToken);
		IToken NEWLINE377 = default(IToken);
		IToken INDENT378 = default(IToken);
		IToken NEWLINE379 = default(IToken);
		IToken NEWLINE381 = default(IToken);
		IToken DEDENT382 = default(IToken);
		IToken NEWLINE383 = default(IToken);
		IToken DEDENT384 = default(IToken);
		IToken string_literal385 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken INDENT387 = default(IToken);
		IToken NEWLINE388 = default(IToken);
		IToken NEWLINE390 = default(IToken);
		IToken DEDENT391 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item380 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item389 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE362_tree = default(CommonTree);
		CommonTree INDENT363_tree = default(CommonTree);
		CommonTree NEWLINE364_tree = default(CommonTree);
		CommonTree string_literal365_tree = default(CommonTree);
		CommonTree NEWLINE367_tree = default(CommonTree);
		CommonTree DEDENT368_tree = default(CommonTree);
		CommonTree NEWLINE369_tree = default(CommonTree);
		CommonTree INDENT370_tree = default(CommonTree);
		CommonTree NEWLINE371_tree = default(CommonTree);
		CommonTree NEWLINE373_tree = default(CommonTree);
		CommonTree DEDENT374_tree = default(CommonTree);
		CommonTree NEWLINE375_tree = default(CommonTree);
		CommonTree DEDENT376_tree = default(CommonTree);
		CommonTree NEWLINE377_tree = default(CommonTree);
		CommonTree INDENT378_tree = default(CommonTree);
		CommonTree NEWLINE379_tree = default(CommonTree);
		CommonTree NEWLINE381_tree = default(CommonTree);
		CommonTree DEDENT382_tree = default(CommonTree);
		CommonTree NEWLINE383_tree = default(CommonTree);
		CommonTree DEDENT384_tree = default(CommonTree);
		CommonTree string_literal385_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree INDENT387_tree = default(CommonTree);
		CommonTree NEWLINE388_tree = default(CommonTree);
		CommonTree NEWLINE390_tree = default(CommonTree);
		CommonTree DEDENT391_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(525, 1);
		try
		{
			// SugarCpp.g:526:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:526:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(526, 4);
			// SugarCpp.g:526:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:526:5: a= expr
			{
			DebugLocation(526, 6);
			PushFollow(Follow._expr_in_where_expr4119);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 526:12: -> $a
			{
				DebugLocation(526, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(526, 19);
			// SugarCpp.g:526:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt174=3;
			try { DebugEnterSubRule(174);
			try { DebugEnterDecision(174, false);
			try
			{
				alt174 = dfa174.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(174); }
			switch (alt174)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:526:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(526, 21);
				// SugarCpp.g:526:21: ( NEWLINE )+
				int cnt155=0;
				try { DebugEnterSubRule(155);
				while (true)
				{
					int alt155=2;
					try { DebugEnterDecision(155, false);
					int LA155_0 = input.LA(1);

					if ((LA155_0==NEWLINE))
					{
						alt155 = 1;
					}


					} finally { DebugExitDecision(155); }
					switch (alt155)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:21: NEWLINE
						{
						DebugLocation(526, 21);
						NEWLINE362=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4129); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE362);


						}
						break;

					default:
						if (cnt155 >= 1)
							goto loop155;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee155 = new EarlyExitException( 155, input );
						DebugRecognitionException(eee155);
						throw eee155;
					}
					cnt155++;
				}
				loop155:
					;

				} finally { DebugExitSubRule(155); }

				DebugLocation(526, 30);
				INDENT363=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4132); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT363);

				DebugLocation(526, 37);
				// SugarCpp.g:526:37: ( NEWLINE )*
				try { DebugEnterSubRule(156);
				while (true)
				{
					int alt156=2;
					try { DebugEnterDecision(156, false);
					int LA156_0 = input.LA(1);

					if ((LA156_0==NEWLINE))
					{
						alt156 = 1;
					}


					} finally { DebugExitDecision(156); }
					switch ( alt156 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:37: NEWLINE
						{
						DebugLocation(526, 37);
						NEWLINE364=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4134); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE364);


						}
						break;

					default:
						goto loop156;
					}
				}

				loop156:
					;

				} finally { DebugExitSubRule(156); }

				DebugLocation(526, 46);
				string_literal365=(IToken)Match(input,178,Follow._178_in_where_expr4137); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(string_literal365);

				DebugLocation(526, 54);
				// SugarCpp.g:526:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt169=2;
				try { DebugEnterSubRule(169);
				try { DebugEnterDecision(169, false);
				int LA169_0 = input.LA(1);

				if ((LA169_0==IDENT||LA169_0==86||LA169_0==91||LA169_0==93||LA169_0==95||(LA169_0>=97 && LA169_0<=98)||(LA169_0>=101 && LA169_0<=102)||LA169_0==131||LA169_0==142||(LA169_0>=147 && LA169_0<=149)||LA169_0==156||LA169_0==160||LA169_0==163||LA169_0==167||(LA169_0>=171 && LA169_0<=175)||LA169_0==179||LA169_0==184))
				{
					alt169 = 1;
				}
				else if ((LA169_0==NEWLINE))
				{
					alt169 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 169, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(169); }
				switch (alt169)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:526:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(526, 56);
					PushFollow(Follow._where_item_in_where_expr4141);
					where_item366=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item366.Tree);
					DebugLocation(526, 67);
					// SugarCpp.g:526:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt163=2;
					try { DebugEnterSubRule(163);
					try { DebugEnterDecision(163, false);
					try
					{
						alt163 = dfa163.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(163); }
					switch (alt163)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(526, 69);
						// SugarCpp.g:526:69: ( NEWLINE )*
						try { DebugEnterSubRule(157);
						while (true)
						{
							int alt157=2;
							try { DebugEnterDecision(157, false);
							int LA157_0 = input.LA(1);

							if ((LA157_0==NEWLINE))
							{
								alt157 = 1;
							}


							} finally { DebugExitDecision(157); }
							switch ( alt157 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:526:69: NEWLINE
								{
								DebugLocation(526, 69);
								NEWLINE367=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4145); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE367);


								}
								break;

							default:
								goto loop157;
							}
						}

						loop157:
							;

						} finally { DebugExitSubRule(157); }

						DebugLocation(526, 78);
						DEDENT368=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4148); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT368);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 526:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(526, 88);
							// SugarCpp.g:526:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(526, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(526, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(526, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:527:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(527, 21);
						// SugarCpp.g:527:21: ( NEWLINE )+
						int cnt158=0;
						try { DebugEnterSubRule(158);
						while (true)
						{
							int alt158=2;
							try { DebugEnterDecision(158, false);
							int LA158_0 = input.LA(1);

							if ((LA158_0==NEWLINE))
							{
								alt158 = 1;
							}


							} finally { DebugExitDecision(158); }
							switch (alt158)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:527:21: NEWLINE
								{
								DebugLocation(527, 21);
								NEWLINE369=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4181); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE369);


								}
								break;

							default:
								if (cnt158 >= 1)
									goto loop158;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee158 = new EarlyExitException( 158, input );
								DebugRecognitionException(eee158);
								throw eee158;
							}
							cnt158++;
						}
						loop158:
							;

						} finally { DebugExitSubRule(158); }

						DebugLocation(527, 30);
						INDENT370=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4184); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT370);

						DebugLocation(527, 37);
						// SugarCpp.g:527:37: ( NEWLINE )*
						try { DebugEnterSubRule(159);
						while (true)
						{
							int alt159=2;
							try { DebugEnterDecision(159, false);
							int LA159_0 = input.LA(1);

							if ((LA159_0==NEWLINE))
							{
								alt159 = 1;
							}


							} finally { DebugExitDecision(159); }
							switch ( alt159 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:527:37: NEWLINE
								{
								DebugLocation(527, 37);
								NEWLINE371=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4186); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE371);


								}
								break;

							default:
								goto loop159;
							}
						}

						loop159:
							;

						} finally { DebugExitSubRule(159); }

						DebugLocation(527, 46);
						// SugarCpp.g:527:46: ( where_item ( NEWLINE )+ )+
						int cnt161=0;
						try { DebugEnterSubRule(161);
						while (true)
						{
							int alt161=2;
							try { DebugEnterDecision(161, false);
							int LA161_0 = input.LA(1);

							if ((LA161_0==IDENT||LA161_0==86||LA161_0==91||LA161_0==93||LA161_0==95||(LA161_0>=97 && LA161_0<=98)||(LA161_0>=101 && LA161_0<=102)||LA161_0==131||LA161_0==142||(LA161_0>=147 && LA161_0<=149)||LA161_0==156||LA161_0==160||LA161_0==163||LA161_0==167||(LA161_0>=171 && LA161_0<=175)||LA161_0==179||LA161_0==184))
							{
								alt161 = 1;
							}


							} finally { DebugExitDecision(161); }
							switch (alt161)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:527:47: where_item ( NEWLINE )+
								{
								DebugLocation(527, 47);
								PushFollow(Follow._where_item_in_where_expr4190);
								where_item372=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item372.Tree);
								DebugLocation(527, 58);
								// SugarCpp.g:527:58: ( NEWLINE )+
								int cnt160=0;
								try { DebugEnterSubRule(160);
								while (true)
								{
									int alt160=2;
									try { DebugEnterDecision(160, false);
									int LA160_0 = input.LA(1);

									if ((LA160_0==NEWLINE))
									{
										alt160 = 1;
									}


									} finally { DebugExitDecision(160); }
									switch (alt160)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:527:58: NEWLINE
										{
										DebugLocation(527, 58);
										NEWLINE373=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4192); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE373);


										}
										break;

									default:
										if (cnt160 >= 1)
											goto loop160;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee160 = new EarlyExitException( 160, input );
										DebugRecognitionException(eee160);
										throw eee160;
									}
									cnt160++;
								}
								loop160:
									;

								} finally { DebugExitSubRule(160); }


								}
								break;

							default:
								if (cnt161 >= 1)
									goto loop161;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee161 = new EarlyExitException( 161, input );
								DebugRecognitionException(eee161);
								throw eee161;
							}
							cnt161++;
						}
						loop161:
							;

						} finally { DebugExitSubRule(161); }

						DebugLocation(527, 69);
						DEDENT374=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4197); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT374);

						DebugLocation(527, 76);
						// SugarCpp.g:527:76: ( NEWLINE )*
						try { DebugEnterSubRule(162);
						while (true)
						{
							int alt162=2;
							try { DebugEnterDecision(162, false);
							int LA162_0 = input.LA(1);

							if ((LA162_0==NEWLINE))
							{
								alt162 = 1;
							}


							} finally { DebugExitDecision(162); }
							switch ( alt162 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:527:76: NEWLINE
								{
								DebugLocation(527, 76);
								NEWLINE375=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4199); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE375);


								}
								break;

							default:
								goto loop162;
							}
						}

						loop162:
							;

						} finally { DebugExitSubRule(162); }

						DebugLocation(527, 85);
						DEDENT376=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4202); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT376);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 527:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(527, 95);
							// SugarCpp.g:527:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(527, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(527, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(527, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(527, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(163); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:529:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(529, 17);
					// SugarCpp.g:529:17: ( NEWLINE )+
					int cnt164=0;
					try { DebugEnterSubRule(164);
					while (true)
					{
						int alt164=2;
						try { DebugEnterDecision(164, false);
						int LA164_0 = input.LA(1);

						if ((LA164_0==NEWLINE))
						{
							alt164 = 1;
						}


						} finally { DebugExitDecision(164); }
						switch (alt164)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:529:17: NEWLINE
							{
							DebugLocation(529, 17);
							NEWLINE377=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4252); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE377);


							}
							break;

						default:
							if (cnt164 >= 1)
								goto loop164;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee164 = new EarlyExitException( 164, input );
							DebugRecognitionException(eee164);
							throw eee164;
						}
						cnt164++;
					}
					loop164:
						;

					} finally { DebugExitSubRule(164); }

					DebugLocation(529, 26);
					INDENT378=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4255); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT378);

					DebugLocation(529, 33);
					// SugarCpp.g:529:33: ( NEWLINE )*
					try { DebugEnterSubRule(165);
					while (true)
					{
						int alt165=2;
						try { DebugEnterDecision(165, false);
						int LA165_0 = input.LA(1);

						if ((LA165_0==NEWLINE))
						{
							alt165 = 1;
						}


						} finally { DebugExitDecision(165); }
						switch ( alt165 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:529:33: NEWLINE
							{
							DebugLocation(529, 33);
							NEWLINE379=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4257); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE379);


							}
							break;

						default:
							goto loop165;
						}
					}

					loop165:
						;

					} finally { DebugExitSubRule(165); }

					DebugLocation(529, 42);
					// SugarCpp.g:529:42: ( where_item ( NEWLINE )+ )+
					int cnt167=0;
					try { DebugEnterSubRule(167);
					while (true)
					{
						int alt167=2;
						try { DebugEnterDecision(167, false);
						int LA167_0 = input.LA(1);

						if ((LA167_0==IDENT||LA167_0==86||LA167_0==91||LA167_0==93||LA167_0==95||(LA167_0>=97 && LA167_0<=98)||(LA167_0>=101 && LA167_0<=102)||LA167_0==131||LA167_0==142||(LA167_0>=147 && LA167_0<=149)||LA167_0==156||LA167_0==160||LA167_0==163||LA167_0==167||(LA167_0>=171 && LA167_0<=175)||LA167_0==179||LA167_0==184))
						{
							alt167 = 1;
						}


						} finally { DebugExitDecision(167); }
						switch (alt167)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:529:43: where_item ( NEWLINE )+
							{
							DebugLocation(529, 43);
							PushFollow(Follow._where_item_in_where_expr4261);
							where_item380=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item380.Tree);
							DebugLocation(529, 54);
							// SugarCpp.g:529:54: ( NEWLINE )+
							int cnt166=0;
							try { DebugEnterSubRule(166);
							while (true)
							{
								int alt166=2;
								try { DebugEnterDecision(166, false);
								int LA166_0 = input.LA(1);

								if ((LA166_0==NEWLINE))
								{
									alt166 = 1;
								}


								} finally { DebugExitDecision(166); }
								switch (alt166)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:529:54: NEWLINE
									{
									DebugLocation(529, 54);
									NEWLINE381=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4263); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE381);


									}
									break;

								default:
									if (cnt166 >= 1)
										goto loop166;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee166 = new EarlyExitException( 166, input );
									DebugRecognitionException(eee166);
									throw eee166;
								}
								cnt166++;
							}
							loop166:
								;

							} finally { DebugExitSubRule(166); }


							}
							break;

						default:
							if (cnt167 >= 1)
								goto loop167;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee167 = new EarlyExitException( 167, input );
							DebugRecognitionException(eee167);
							throw eee167;
						}
						cnt167++;
					}
					loop167:
						;

					} finally { DebugExitSubRule(167); }

					DebugLocation(529, 65);
					DEDENT382=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4268); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT382);

					DebugLocation(529, 72);
					// SugarCpp.g:529:72: ( NEWLINE )*
					try { DebugEnterSubRule(168);
					while (true)
					{
						int alt168=2;
						try { DebugEnterDecision(168, false);
						int LA168_0 = input.LA(1);

						if ((LA168_0==NEWLINE))
						{
							alt168 = 1;
						}


						} finally { DebugExitDecision(168); }
						switch ( alt168 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:529:72: NEWLINE
							{
							DebugLocation(529, 72);
							NEWLINE383=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4270); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE383);


							}
							break;

						default:
							goto loop168;
						}
					}

					loop168:
						;

					} finally { DebugExitSubRule(168); }

					DebugLocation(529, 81);
					DEDENT384=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4273); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT384);



					{
					// AST REWRITE
					// elements: where_item, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 529:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(529, 91);
						// SugarCpp.g:529:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(529, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(529, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(529, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(529, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(169); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:531:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(531, 9);
				string_literal385=(IToken)Match(input,178,Follow._178_in_where_expr4311); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(string_literal385);

				DebugLocation(531, 17);
				// SugarCpp.g:531:17: ( NEWLINE )+
				int cnt170=0;
				try { DebugEnterSubRule(170);
				while (true)
				{
					int alt170=2;
					try { DebugEnterDecision(170, false);
					int LA170_0 = input.LA(1);

					if ((LA170_0==NEWLINE))
					{
						alt170 = 1;
					}


					} finally { DebugExitDecision(170); }
					switch (alt170)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:17: NEWLINE
						{
						DebugLocation(531, 17);
						NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4313); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE386);


						}
						break;

					default:
						if (cnt170 >= 1)
							goto loop170;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee170 = new EarlyExitException( 170, input );
						DebugRecognitionException(eee170);
						throw eee170;
					}
					cnt170++;
				}
				loop170:
					;

				} finally { DebugExitSubRule(170); }

				DebugLocation(531, 26);
				INDENT387=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4316); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT387);

				DebugLocation(531, 33);
				// SugarCpp.g:531:33: ( NEWLINE )*
				try { DebugEnterSubRule(171);
				while (true)
				{
					int alt171=2;
					try { DebugEnterDecision(171, false);
					int LA171_0 = input.LA(1);

					if ((LA171_0==NEWLINE))
					{
						alt171 = 1;
					}


					} finally { DebugExitDecision(171); }
					switch ( alt171 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:33: NEWLINE
						{
						DebugLocation(531, 33);
						NEWLINE388=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4318); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE388);


						}
						break;

					default:
						goto loop171;
					}
				}

				loop171:
					;

				} finally { DebugExitSubRule(171); }

				DebugLocation(531, 42);
				// SugarCpp.g:531:42: ( where_item ( NEWLINE )+ )+
				int cnt173=0;
				try { DebugEnterSubRule(173);
				while (true)
				{
					int alt173=2;
					try { DebugEnterDecision(173, false);
					int LA173_0 = input.LA(1);

					if ((LA173_0==IDENT||LA173_0==86||LA173_0==91||LA173_0==93||LA173_0==95||(LA173_0>=97 && LA173_0<=98)||(LA173_0>=101 && LA173_0<=102)||LA173_0==131||LA173_0==142||(LA173_0>=147 && LA173_0<=149)||LA173_0==156||LA173_0==160||LA173_0==163||LA173_0==167||(LA173_0>=171 && LA173_0<=175)||LA173_0==179||LA173_0==184))
					{
						alt173 = 1;
					}


					} finally { DebugExitDecision(173); }
					switch (alt173)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:43: where_item ( NEWLINE )+
						{
						DebugLocation(531, 43);
						PushFollow(Follow._where_item_in_where_expr4322);
						where_item389=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item389.Tree);
						DebugLocation(531, 54);
						// SugarCpp.g:531:54: ( NEWLINE )+
						int cnt172=0;
						try { DebugEnterSubRule(172);
						while (true)
						{
							int alt172=2;
							try { DebugEnterDecision(172, false);
							int LA172_0 = input.LA(1);

							if ((LA172_0==NEWLINE))
							{
								alt172 = 1;
							}


							} finally { DebugExitDecision(172); }
							switch (alt172)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:54: NEWLINE
								{
								DebugLocation(531, 54);
								NEWLINE390=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4324); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE390);


								}
								break;

							default:
								if (cnt172 >= 1)
									goto loop172;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee172 = new EarlyExitException( 172, input );
								DebugRecognitionException(eee172);
								throw eee172;
							}
							cnt172++;
						}
						loop172:
							;

						} finally { DebugExitSubRule(172); }


						}
						break;

					default:
						if (cnt173 >= 1)
							goto loop173;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee173 = new EarlyExitException( 173, input );
						DebugRecognitionException(eee173);
						throw eee173;
					}
					cnt173++;
				}
				loop173:
					;

				} finally { DebugExitSubRule(173); }

				DebugLocation(531, 65);
				DEDENT391=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4329); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT391);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 531:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(531, 75);
					// SugarCpp.g:531:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(531, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(531, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(531, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(531, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:532:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 532:15: -> expr
				{
					DebugLocation(532, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(174); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 57);
			LeaveRule("where_expr", 57);
			LeaveRule_where_expr();
		}
		DebugLocation(534, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:536:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 58);
		TraceIn("let_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal392 = default(IToken);
		IToken string_literal394 = default(IToken);
		IToken NEWLINE396 = default(IToken);
		IToken INDENT397 = default(IToken);
		IToken NEWLINE398 = default(IToken);
		IToken NEWLINE400 = default(IToken);
		IToken DEDENT401 = default(IToken);
		IToken NEWLINE403 = default(IToken);
		IToken INDENT404 = default(IToken);
		IToken NEWLINE405 = default(IToken);
		IToken NEWLINE407 = default(IToken);
		IToken string_literal408 = default(IToken);
		IToken NEWLINE410 = default(IToken);
		IToken DEDENT411 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item393 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr395 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr402 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item406 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr409 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal392_tree = default(CommonTree);
		CommonTree string_literal394_tree = default(CommonTree);
		CommonTree NEWLINE396_tree = default(CommonTree);
		CommonTree INDENT397_tree = default(CommonTree);
		CommonTree NEWLINE398_tree = default(CommonTree);
		CommonTree NEWLINE400_tree = default(CommonTree);
		CommonTree DEDENT401_tree = default(CommonTree);
		CommonTree NEWLINE403_tree = default(CommonTree);
		CommonTree INDENT404_tree = default(CommonTree);
		CommonTree NEWLINE405_tree = default(CommonTree);
		CommonTree NEWLINE407_tree = default(CommonTree);
		CommonTree string_literal408_tree = default(CommonTree);
		CommonTree NEWLINE410_tree = default(CommonTree);
		CommonTree DEDENT411_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(536, 1);
		try
		{
			// SugarCpp.g:537:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:537:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(537, 4);
			string_literal392=(IToken)Match(input,154,Follow._154_in_let_expr4387); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_154.Add(string_literal392);

			DebugLocation(537, 10);
			PushFollow(Follow._where_item_in_let_expr4389);
			where_item393=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item393.Tree);
			DebugLocation(537, 21);
			// SugarCpp.g:537:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt185=2;
			try { DebugEnterSubRule(185);
			try { DebugEnterDecision(185, false);
			int LA185_0 = input.LA(1);

			if ((LA185_0==151))
			{
				alt185 = 1;
			}
			else if ((LA185_0==NEWLINE))
			{
				alt185 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 185, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(185); }
			switch (alt185)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:537:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(537, 23);
				string_literal394=(IToken)Match(input,151,Follow._151_in_let_expr4393); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_151.Add(string_literal394);

				DebugLocation(537, 28);
				// SugarCpp.g:537:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt179=2;
				try { DebugEnterSubRule(179);
				try { DebugEnterDecision(179, false);
				int LA179_0 = input.LA(1);

				if ((LA179_0==IDENT||LA179_0==NUMBER||LA179_0==STRING||LA179_0==86||LA179_0==91||LA179_0==93||LA179_0==95||(LA179_0>=97 && LA179_0<=98)||(LA179_0>=101 && LA179_0<=102)||(LA179_0>=131 && LA179_0<=132)||LA179_0==154||LA179_0==157||(LA179_0>=159 && LA179_0<=160)||LA179_0==184))
				{
					alt179 = 1;
				}
				else if ((LA179_0==NEWLINE))
				{
					alt179 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(179); }
				switch (alt179)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:537:30: expr
					{
					DebugLocation(537, 30);
					PushFollow(Follow._expr_in_let_expr4397);
					expr395=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr395.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 537:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(537, 38);
						// SugarCpp.g:537:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(537, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(537, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(537, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(537, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:538:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(538, 12);
					// SugarCpp.g:538:12: ( NEWLINE )+
					int cnt175=0;
					try { DebugEnterSubRule(175);
					while (true)
					{
						int alt175=2;
						try { DebugEnterDecision(175, false);
						int LA175_0 = input.LA(1);

						if ((LA175_0==NEWLINE))
						{
							alt175 = 1;
						}


						} finally { DebugExitDecision(175); }
						switch (alt175)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:538:12: NEWLINE
							{
							DebugLocation(538, 12);
							NEWLINE396=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4421); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE396);


							}
							break;

						default:
							if (cnt175 >= 1)
								goto loop175;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee175 = new EarlyExitException( 175, input );
							DebugRecognitionException(eee175);
							throw eee175;
						}
						cnt175++;
					}
					loop175:
						;

					} finally { DebugExitSubRule(175); }

					DebugLocation(538, 21);
					// SugarCpp.g:538:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt178=2;
					try { DebugEnterSubRule(178);
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==INDENT))
					{
						alt178 = 1;
					}
					else if ((LA178_0==IDENT||LA178_0==NUMBER||LA178_0==STRING||LA178_0==86||LA178_0==91||LA178_0==93||LA178_0==95||(LA178_0>=97 && LA178_0<=98)||(LA178_0>=101 && LA178_0<=102)||(LA178_0>=131 && LA178_0<=132)||LA178_0==154||LA178_0==157||(LA178_0>=159 && LA178_0<=160)||LA178_0==184))
					{
						alt178 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 178, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:538:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(538, 23);
						INDENT397=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4426); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT397);

						DebugLocation(538, 30);
						// SugarCpp.g:538:30: ( NEWLINE )*
						try { DebugEnterSubRule(176);
						while (true)
						{
							int alt176=2;
							try { DebugEnterDecision(176, false);
							int LA176_0 = input.LA(1);

							if ((LA176_0==NEWLINE))
							{
								alt176 = 1;
							}


							} finally { DebugExitDecision(176); }
							switch ( alt176 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:538:30: NEWLINE
								{
								DebugLocation(538, 30);
								NEWLINE398=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4428); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE398);


								}
								break;

							default:
								goto loop176;
							}
						}

						loop176:
							;

						} finally { DebugExitSubRule(176); }

						DebugLocation(538, 39);
						PushFollow(Follow._expr_in_let_expr4431);
						expr399=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr399.Tree);
						DebugLocation(538, 44);
						// SugarCpp.g:538:44: ( NEWLINE )+
						int cnt177=0;
						try { DebugEnterSubRule(177);
						while (true)
						{
							int alt177=2;
							try { DebugEnterDecision(177, false);
							int LA177_0 = input.LA(1);

							if ((LA177_0==NEWLINE))
							{
								alt177 = 1;
							}


							} finally { DebugExitDecision(177); }
							switch (alt177)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:538:44: NEWLINE
								{
								DebugLocation(538, 44);
								NEWLINE400=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4433); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE400);


								}
								break;

							default:
								if (cnt177 >= 1)
									goto loop177;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee177 = new EarlyExitException( 177, input );
								DebugRecognitionException(eee177);
								throw eee177;
							}
							cnt177++;
						}
						loop177:
							;

						} finally { DebugExitSubRule(177); }

						DebugLocation(538, 53);
						DEDENT401=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4436); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT401);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 538:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(538, 63);
							// SugarCpp.g:538:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(538, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(538, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(538, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(538, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:539:14: expr
						{
						DebugLocation(539, 14);
						PushFollow(Follow._expr_in_let_expr4462);
						expr402=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr402.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 539:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(539, 22);
							// SugarCpp.g:539:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(539, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(539, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(539, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(539, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(178); }


					}
					break;

				}
				} finally { DebugExitSubRule(179); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:542:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(542, 11);
				// SugarCpp.g:542:11: ( NEWLINE )+
				int cnt180=0;
				try { DebugEnterSubRule(180);
				while (true)
				{
					int alt180=2;
					try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0==NEWLINE))
					{
						alt180 = 1;
					}


					} finally { DebugExitDecision(180); }
					switch (alt180)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:542:11: NEWLINE
						{
						DebugLocation(542, 11);
						NEWLINE403=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4509); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE403);


						}
						break;

					default:
						if (cnt180 >= 1)
							goto loop180;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee180 = new EarlyExitException( 180, input );
						DebugRecognitionException(eee180);
						throw eee180;
					}
					cnt180++;
				}
				loop180:
					;

				} finally { DebugExitSubRule(180); }

				DebugLocation(542, 20);
				INDENT404=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4512); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT404);

				DebugLocation(542, 27);
				// SugarCpp.g:542:27: ( NEWLINE )*
				try { DebugEnterSubRule(181);
				while (true)
				{
					int alt181=2;
					try { DebugEnterDecision(181, false);
					int LA181_0 = input.LA(1);

					if ((LA181_0==NEWLINE))
					{
						alt181 = 1;
					}


					} finally { DebugExitDecision(181); }
					switch ( alt181 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:542:27: NEWLINE
						{
						DebugLocation(542, 27);
						NEWLINE405=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4514); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE405);


						}
						break;

					default:
						goto loop181;
					}
				}

				loop181:
					;

				} finally { DebugExitSubRule(181); }

				DebugLocation(542, 36);
				// SugarCpp.g:542:36: ( where_item ( NEWLINE )+ )+
				int cnt183=0;
				try { DebugEnterSubRule(183);
				while (true)
				{
					int alt183=2;
					try { DebugEnterDecision(183, false);
					int LA183_0 = input.LA(1);

					if ((LA183_0==IDENT||LA183_0==86||LA183_0==91||LA183_0==93||LA183_0==95||(LA183_0>=97 && LA183_0<=98)||(LA183_0>=101 && LA183_0<=102)||LA183_0==131||LA183_0==142||(LA183_0>=147 && LA183_0<=149)||LA183_0==156||LA183_0==160||LA183_0==163||LA183_0==167||(LA183_0>=171 && LA183_0<=175)||LA183_0==179||LA183_0==184))
					{
						alt183 = 1;
					}


					} finally { DebugExitDecision(183); }
					switch (alt183)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:542:37: where_item ( NEWLINE )+
						{
						DebugLocation(542, 37);
						PushFollow(Follow._where_item_in_let_expr4518);
						where_item406=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item406.Tree);
						DebugLocation(542, 48);
						// SugarCpp.g:542:48: ( NEWLINE )+
						int cnt182=0;
						try { DebugEnterSubRule(182);
						while (true)
						{
							int alt182=2;
							try { DebugEnterDecision(182, false);
							int LA182_0 = input.LA(1);

							if ((LA182_0==NEWLINE))
							{
								alt182 = 1;
							}


							} finally { DebugExitDecision(182); }
							switch (alt182)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:542:48: NEWLINE
								{
								DebugLocation(542, 48);
								NEWLINE407=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4520); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE407);


								}
								break;

							default:
								if (cnt182 >= 1)
									goto loop182;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee182 = new EarlyExitException( 182, input );
								DebugRecognitionException(eee182);
								throw eee182;
							}
							cnt182++;
						}
						loop182:
							;

						} finally { DebugExitSubRule(182); }


						}
						break;

					default:
						if (cnt183 >= 1)
							goto loop183;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee183 = new EarlyExitException( 183, input );
						DebugRecognitionException(eee183);
						throw eee183;
					}
					cnt183++;
				}
				loop183:
					;

				} finally { DebugExitSubRule(183); }

				DebugLocation(542, 59);
				string_literal408=(IToken)Match(input,151,Follow._151_in_let_expr4525); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_151.Add(string_literal408);

				DebugLocation(542, 64);
				PushFollow(Follow._expr_in_let_expr4527);
				expr409=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr409.Tree);
				DebugLocation(542, 69);
				// SugarCpp.g:542:69: ( NEWLINE )+
				int cnt184=0;
				try { DebugEnterSubRule(184);
				while (true)
				{
					int alt184=2;
					try { DebugEnterDecision(184, false);
					int LA184_0 = input.LA(1);

					if ((LA184_0==NEWLINE))
					{
						alt184 = 1;
					}


					} finally { DebugExitDecision(184); }
					switch (alt184)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:542:69: NEWLINE
						{
						DebugLocation(542, 69);
						NEWLINE410=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4529); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE410);


						}
						break;

					default:
						if (cnt184 >= 1)
							goto loop184;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee184 = new EarlyExitException( 184, input );
						DebugRecognitionException(eee184);
						throw eee184;
					}
					cnt184++;
				}
				loop184:
					;

				} finally { DebugExitSubRule(184); }

				DebugLocation(542, 78);
				DEDENT411=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4532); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT411);



				{
				// AST REWRITE
				// elements: expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 542:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(542, 88);
					// SugarCpp.g:542:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(542, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(542, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(542, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(542, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(185); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 58);
			LeaveRule("let_expr", 58);
			LeaveRule_let_expr();
		}
		DebugLocation(544, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:546:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 59);
		TraceIn("match_item", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal412 = default(IToken);
		IToken string_literal414 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr415 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal412_tree = default(CommonTree);
		CommonTree string_literal414_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(546, 1);
		try
		{
			// SugarCpp.g:547:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:547:4: '|' expr '=>' where_expr
			{
			DebugLocation(547, 4);
			char_literal412=(IToken)Match(input,180,Follow._180_in_match_item4564); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_180.Add(char_literal412);

			DebugLocation(547, 8);
			PushFollow(Follow._expr_in_match_item4566);
			expr413=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr413.Tree);
			DebugLocation(547, 13);
			string_literal414=(IToken)Match(input,124,Follow._124_in_match_item4568); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(string_literal414);

			DebugLocation(547, 18);
			PushFollow(Follow._where_expr_in_match_item4570);
			where_expr415=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr415.Tree);


			{
			// AST REWRITE
			// elements: expr, where_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 547:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(547, 32);
				// SugarCpp.g:547:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(547, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(547, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(547, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 59);
			LeaveRule("match_item", 59);
			LeaveRule_match_item();
		}
		DebugLocation(548, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:550:1: match_expr : 'match' ( expr )? ( 'returns' type_name )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 60);
		TraceIn("match_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal416 = default(IToken);
		IToken string_literal418 = default(IToken);
		IToken NEWLINE420 = default(IToken);
		IToken INDENT421 = default(IToken);
		IToken NEWLINE422 = default(IToken);
		IToken NEWLINE424 = default(IToken);
		IToken DEDENT425 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name419 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item423 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal416_tree = default(CommonTree);
		CommonTree string_literal418_tree = default(CommonTree);
		CommonTree NEWLINE420_tree = default(CommonTree);
		CommonTree INDENT421_tree = default(CommonTree);
		CommonTree NEWLINE422_tree = default(CommonTree);
		CommonTree NEWLINE424_tree = default(CommonTree);
		CommonTree DEDENT425_tree = default(CommonTree);
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(550, 1);
		try
		{
			// SugarCpp.g:551:2: ( 'match' ( expr )? ( 'returns' type_name )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:551:4: 'match' ( expr )? ( 'returns' type_name )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(551, 4);
			string_literal416=(IToken)Match(input,157,Follow._157_in_match_expr4591); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_157.Add(string_literal416);

			DebugLocation(551, 12);
			// SugarCpp.g:551:12: ( expr )?
			int alt186=2;
			try { DebugEnterSubRule(186);
			try { DebugEnterDecision(186, false);
			int LA186_0 = input.LA(1);

			if ((LA186_0==IDENT||LA186_0==NUMBER||LA186_0==STRING||LA186_0==86||LA186_0==91||LA186_0==93||LA186_0==95||(LA186_0>=97 && LA186_0<=98)||(LA186_0>=101 && LA186_0<=102)||(LA186_0>=131 && LA186_0<=132)||LA186_0==154||LA186_0==157||(LA186_0>=159 && LA186_0<=160)||LA186_0==184))
			{
				alt186 = 1;
			}
			} finally { DebugExitDecision(186); }
			switch (alt186)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:551:12: expr
				{
				DebugLocation(551, 12);
				PushFollow(Follow._expr_in_match_expr4593);
				expr417=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr417.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(186); }

			DebugLocation(551, 18);
			// SugarCpp.g:551:18: ( 'returns' type_name )?
			int alt187=2;
			try { DebugEnterSubRule(187);
			try { DebugEnterDecision(187, false);
			int LA187_0 = input.LA(1);

			if ((LA187_0==164))
			{
				alt187 = 1;
			}
			} finally { DebugExitDecision(187); }
			switch (alt187)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:551:19: 'returns' type_name
				{
				DebugLocation(551, 19);
				string_literal418=(IToken)Match(input,164,Follow._164_in_match_expr4597); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal418);

				DebugLocation(551, 29);
				PushFollow(Follow._type_name_in_match_expr4599);
				type_name419=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name419.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(187); }

			DebugLocation(551, 41);
			// SugarCpp.g:551:41: ( NEWLINE )+
			int cnt188=0;
			try { DebugEnterSubRule(188);
			while (true)
			{
				int alt188=2;
				try { DebugEnterDecision(188, false);
				int LA188_0 = input.LA(1);

				if ((LA188_0==NEWLINE))
				{
					alt188 = 1;
				}


				} finally { DebugExitDecision(188); }
				switch (alt188)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:551:41: NEWLINE
					{
					DebugLocation(551, 41);
					NEWLINE420=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4603); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE420);


					}
					break;

				default:
					if (cnt188 >= 1)
						goto loop188;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee188 = new EarlyExitException( 188, input );
					DebugRecognitionException(eee188);
					throw eee188;
				}
				cnt188++;
			}
			loop188:
				;

			} finally { DebugExitSubRule(188); }

			DebugLocation(551, 50);
			INDENT421=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4606); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT421);

			DebugLocation(551, 57);
			// SugarCpp.g:551:57: ( NEWLINE )*
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==NEWLINE))
				{
					alt189 = 1;
				}


				} finally { DebugExitDecision(189); }
				switch ( alt189 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:551:57: NEWLINE
					{
					DebugLocation(551, 57);
					NEWLINE422=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4608); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE422);


					}
					break;

				default:
					goto loop189;
				}
			}

			loop189:
				;

			} finally { DebugExitSubRule(189); }

			DebugLocation(551, 66);
			// SugarCpp.g:551:66: ( match_item ( NEWLINE )+ )+
			int cnt191=0;
			try { DebugEnterSubRule(191);
			while (true)
			{
				int alt191=2;
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==180))
				{
					alt191 = 1;
				}


				} finally { DebugExitDecision(191); }
				switch (alt191)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:551:67: match_item ( NEWLINE )+
					{
					DebugLocation(551, 67);
					PushFollow(Follow._match_item_in_match_expr4612);
					match_item423=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item423.Tree);
					DebugLocation(551, 78);
					// SugarCpp.g:551:78: ( NEWLINE )+
					int cnt190=0;
					try { DebugEnterSubRule(190);
					while (true)
					{
						int alt190=2;
						try { DebugEnterDecision(190, false);
						int LA190_0 = input.LA(1);

						if ((LA190_0==NEWLINE))
						{
							alt190 = 1;
						}


						} finally { DebugExitDecision(190); }
						switch (alt190)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:551:78: NEWLINE
							{
							DebugLocation(551, 78);
							NEWLINE424=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4614); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE424);


							}
							break;

						default:
							if (cnt190 >= 1)
								goto loop190;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee190 = new EarlyExitException( 190, input );
							DebugRecognitionException(eee190);
							throw eee190;
						}
						cnt190++;
					}
					loop190:
						;

					} finally { DebugExitSubRule(190); }


					}
					break;

				default:
					if (cnt191 >= 1)
						goto loop191;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee191 = new EarlyExitException( 191, input );
					DebugRecognitionException(eee191);
					throw eee191;
				}
				cnt191++;
			}
			loop191:
				;

			} finally { DebugExitSubRule(191); }

			DebugLocation(551, 89);
			DEDENT425=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4619); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT425);



			{
			// AST REWRITE
			// elements: type_name, match_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 551:96: -> ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ )
			{
				DebugLocation(551, 99);
				// SugarCpp.g:551:99: ^( Match_Expr ( expr )? ( type_name )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(551, 101);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(551, 112);
				// SugarCpp.g:551:112: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(551, 112);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(551, 118);
				// SugarCpp.g:551:118: ( type_name )?
				if (stream_type_name.HasNext)
				{
					DebugLocation(551, 118);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();
				DebugLocation(551, 129);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(551, 129);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 60);
			LeaveRule("match_expr", 60);
			LeaveRule_match_expr();
		}
		DebugLocation(552, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:554:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 61);
		TraceIn("expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr427 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr428 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(554, 1);
		try
		{
			// SugarCpp.g:555:2: ( feed_expr | match_expr | let_expr )
			int alt192=3;
			try { DebugEnterDecision(192, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 86:
			case 91:
			case 93:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 131:
			case 132:
			case 159:
			case 160:
			case 184:
				{
				alt192 = 1;
				}
				break;
			case 157:
				{
				alt192 = 2;
				}
				break;
			case 154:
				{
				alt192 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:555:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(555, 4);
				PushFollow(Follow._feed_expr_in_expr4645);
				feed_expr426=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr426.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:556:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(556, 4);
				PushFollow(Follow._match_expr_in_expr4650);
				match_expr427=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr427.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:557:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(557, 4);
				PushFollow(Follow._let_expr_in_expr4655);
				let_expr428=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr428.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 61);
			LeaveRule("expr", 61);
			LeaveRule_expr();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:560:1: feed_expr : ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 62);
		TraceIn("feed_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal429 = default(IToken);
		IToken string_literal431 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr433 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal429_tree = default(CommonTree);
		CommonTree string_literal431_tree = default(CommonTree);
		RewriteRuleITokenStream stream_182=new RewriteRuleITokenStream(adaptor,"token 182");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(560, 1);
		try
		{
			// SugarCpp.g:561:2: ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt194=2;
			try { DebugEnterDecision(194, false);
			switch (input.LA(1))
			{
			case 93:
				{
				int LA194_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 86:
			case 91:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 160:
			case 184:
				{
				int LA194_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 159:
				{
				int LA194_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA194_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA194_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA194_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				int LA194_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt194 = 1;
				}
				else if ((true))
				{
					alt194 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 132:
				{
				alt194 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 194, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(194); }
			switch (alt194)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:561:4: ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(561, 36);
				// SugarCpp.g:561:36: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:561:37: a= modify_expr
				{
				DebugLocation(561, 38);
				PushFollow(Follow._modify_expr_in_feed_expr4684);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 561:51: -> $a
				{
					DebugLocation(561, 55);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(561, 58);
				// SugarCpp.g:561:58: ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt193=2;
				try { DebugEnterSubRule(193);
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==120))
				{
					alt193 = 1;
				}
				else if ((LA193_0==182))
				{
					alt193 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 193, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(193); }
				switch (alt193)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:60: '<|' list_expr
					{
					DebugLocation(561, 60);
					string_literal429=(IToken)Match(input,120,Follow._120_in_feed_expr4694); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_120.Add(string_literal429);

					DebugLocation(561, 65);
					PushFollow(Follow._list_expr_in_feed_expr4696);
					list_expr430=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr430.Tree);


					{
					// AST REWRITE
					// elements: list_expr, feed_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 561:75: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(561, 78);
						// SugarCpp.g:561:78: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(561, 80);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(561, 91);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(561, 101);
						// SugarCpp.g:561:101: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(561, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(561, 113);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:562:18: '|>' list_expr
					{
					DebugLocation(562, 18);
					string_literal431=(IToken)Match(input,182,Follow._182_in_feed_expr4730); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_182.Add(string_literal431);

					DebugLocation(562, 23);
					PushFollow(Follow._list_expr_in_feed_expr4732);
					list_expr432=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr432.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 562:33: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(562, 36);
						// SugarCpp.g:562:36: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(562, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(562, 48);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(562, 58);
						// SugarCpp.g:562:58: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(562, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(562, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(193); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:564:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(564, 4);
				PushFollow(Follow._list_expr_in_feed_expr4769);
				list_expr433=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr433.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 62);
			LeaveRule("feed_expr", 62);
			LeaveRule_feed_expr();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:567:1: list_expr : ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 63);
		TraceIn("list_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal434 = default(IToken);
		IToken string_literal436 = default(IToken);
		IToken char_literal438 = default(IToken);
		IToken char_literal440 = default(IToken);
		IToken char_literal441 = default(IToken);
		IToken char_literal443 = default(IToken);
		IToken char_literal444 = default(IToken);
		IToken NEWLINE445 = default(IToken);
		IToken INDENT446 = default(IToken);
		IToken DEDENT447 = default(IToken);
		IToken char_literal449 = default(IToken);
		IToken NEWLINE450 = default(IToken);
		IToken INDENT451 = default(IToken);
		IToken DEDENT452 = default(IToken);
		IToken char_literal454 = default(IToken);
		IToken NEWLINE455 = default(IToken);
		IToken INDENT456 = default(IToken);
		IToken DEDENT457 = default(IToken);
		IToken char_literal458 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr435 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item437 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name442 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr453 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr459 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal434_tree = default(CommonTree);
		CommonTree string_literal436_tree = default(CommonTree);
		CommonTree char_literal438_tree = default(CommonTree);
		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree char_literal441_tree = default(CommonTree);
		CommonTree char_literal443_tree = default(CommonTree);
		CommonTree char_literal444_tree = default(CommonTree);
		CommonTree NEWLINE445_tree = default(CommonTree);
		CommonTree INDENT446_tree = default(CommonTree);
		CommonTree DEDENT447_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		CommonTree NEWLINE450_tree = default(CommonTree);
		CommonTree INDENT451_tree = default(CommonTree);
		CommonTree DEDENT452_tree = default(CommonTree);
		CommonTree char_literal454_tree = default(CommonTree);
		CommonTree NEWLINE455_tree = default(CommonTree);
		CommonTree INDENT456_tree = default(CommonTree);
		CommonTree DEDENT457_tree = default(CommonTree);
		CommonTree char_literal458_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt201=3;
			try { DebugEnterDecision(201, false);
			int LA201_0 = input.LA(1);

			if ((LA201_0==132))
			{
				int LA201_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt201 = 1;
				}
				else if ((true))
				{
					alt201 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 201, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA201_0==IDENT||LA201_0==NUMBER||LA201_0==STRING||LA201_0==86||LA201_0==91||LA201_0==93||LA201_0==95||(LA201_0>=97 && LA201_0<=98)||(LA201_0>=101 && LA201_0<=102)||LA201_0==131||(LA201_0>=159 && LA201_0<=160)||LA201_0==184))
			{
				alt201 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 201, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(201); }
			switch (alt201)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:568:4: ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name
				{
				DebugLocation(568, 29);
				char_literal434=(IToken)Match(input,132,Follow._132_in_list_expr4790); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal434);

				DebugLocation(568, 33);
				PushFollow(Follow._feed_expr_in_list_expr4792);
				feed_expr435=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr435.Tree);
				DebugLocation(568, 43);
				string_literal436=(IToken)Match(input,148,Follow._148_in_list_expr4794); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_148.Add(string_literal436);

				DebugLocation(568, 49);
				PushFollow(Follow._for_item_in_list_expr4796);
				for_item437=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item437.Tree);
				DebugLocation(568, 58);
				// SugarCpp.g:568:58: ( ',' for_item )*
				try { DebugEnterSubRule(195);
				while (true)
				{
					int alt195=2;
					try { DebugEnterDecision(195, false);
					int LA195_0 = input.LA(1);

					if ((LA195_0==100))
					{
						alt195 = 1;
					}


					} finally { DebugExitDecision(195); }
					switch ( alt195 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:568:59: ',' for_item
						{
						DebugLocation(568, 59);
						char_literal438=(IToken)Match(input,100,Follow._100_in_list_expr4799); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal438);

						DebugLocation(568, 63);
						PushFollow(Follow._for_item_in_list_expr4801);
						for_item439=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item439.Tree);

						}
						break;

					default:
						goto loop195;
					}
				}

				loop195:
					;

				} finally { DebugExitSubRule(195); }

				DebugLocation(568, 74);
				char_literal440=(IToken)Match(input,133,Follow._133_in_list_expr4805); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(char_literal440);

				DebugLocation(568, 78);
				char_literal441=(IToken)Match(input,111,Follow._111_in_list_expr4807); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal441);

				DebugLocation(568, 82);
				PushFollow(Follow._type_name_in_list_expr4809);
				type_name442=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name442.Tree);


				{
				// AST REWRITE
				// elements: feed_expr, for_item, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 568:93: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(568, 96);
					// SugarCpp.g:568:96: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(568, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(568, 119);
					// SugarCpp.g:568:119: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(568, 119);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(568, 130);
					// SugarCpp.g:568:130: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(568, 132);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(568, 141);
					// SugarCpp.g:568:141: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(568, 141);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(568, 151);
					// SugarCpp.g:568:151: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(568, 153);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(568, 166);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:569:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(569, 4);
				char_literal443=(IToken)Match(input,132,Follow._132_in_list_expr4837); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal443);

				DebugLocation(569, 8);
				// SugarCpp.g:569:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?
				int alt199=2;
				try { DebugEnterSubRule(199);
				try { DebugEnterDecision(199, false);
				try
				{
					alt199 = dfa199.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(199); }
				switch (alt199)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:569:9: ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					{
					DebugLocation(569, 9);
					// SugarCpp.g:569:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(196);
					while (true)
					{
						int alt196=5;
						try { DebugEnterDecision(196, false);
						switch (input.LA(1))
						{
						case 100:
							{
							alt196 = 1;
							}
							break;
						case NEWLINE:
							{
							alt196 = 2;
							}
							break;
						case INDENT:
							{
							alt196 = 3;
							}
							break;
						case DEDENT:
							{
							alt196 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(196); }
						switch ( alt196 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:569:10: ','
							{
							DebugLocation(569, 10);
							char_literal444=(IToken)Match(input,100,Follow._100_in_list_expr4841); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal444);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:569:16: NEWLINE
							{
							DebugLocation(569, 16);
							NEWLINE445=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4845); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE445);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:569:26: INDENT
							{
							DebugLocation(569, 26);
							INDENT446=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4849); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT446);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:569:35: DEDENT
							{
							DebugLocation(569, 35);
							DEDENT447=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4853); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT447);


							}
							break;

						default:
							goto loop196;
						}
					}

					loop196:
						;

					} finally { DebugExitSubRule(196); }

					DebugLocation(569, 44);
					PushFollow(Follow._feed_expr_in_list_expr4857);
					feed_expr448=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr448.Tree);
					DebugLocation(569, 54);
					// SugarCpp.g:569:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					try { DebugEnterSubRule(198);
					while (true)
					{
						int alt198=2;
						try { DebugEnterDecision(198, false);
						try
						{
							alt198 = dfa198.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(198); }
						switch ( alt198 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:569:55: ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr
							{
							DebugLocation(569, 55);
							// SugarCpp.g:569:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt197=0;
							try { DebugEnterSubRule(197);
							while (true)
							{
								int alt197=5;
								try { DebugEnterDecision(197, false);
								switch (input.LA(1))
								{
								case 100:
									{
									alt197 = 1;
									}
									break;
								case NEWLINE:
									{
									alt197 = 2;
									}
									break;
								case INDENT:
									{
									alt197 = 3;
									}
									break;
								case DEDENT:
									{
									alt197 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(197); }
								switch (alt197)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:569:56: ','
									{
									DebugLocation(569, 56);
									char_literal449=(IToken)Match(input,100,Follow._100_in_list_expr4861); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_100.Add(char_literal449);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:569:62: NEWLINE
									{
									DebugLocation(569, 62);
									NEWLINE450=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4865); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE450);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:569:72: INDENT
									{
									DebugLocation(569, 72);
									INDENT451=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4869); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT451);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:569:81: DEDENT
									{
									DebugLocation(569, 81);
									DEDENT452=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4873); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT452);


									}
									break;

								default:
									if (cnt197 >= 1)
										goto loop197;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee197 = new EarlyExitException( 197, input );
									DebugRecognitionException(eee197);
									throw eee197;
								}
								cnt197++;
							}
							loop197:
								;

							} finally { DebugExitSubRule(197); }

							DebugLocation(569, 90);
							PushFollow(Follow._feed_expr_in_list_expr4877);
							feed_expr453=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr453.Tree);

							}
							break;

						default:
							goto loop198;
						}
					}

					loop198:
						;

					} finally { DebugExitSubRule(198); }


					}
					break;

				}
				} finally { DebugExitSubRule(199); }

				DebugLocation(569, 104);
				// SugarCpp.g:569:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(200);
				while (true)
				{
					int alt200=5;
					try { DebugEnterDecision(200, false);
					switch (input.LA(1))
					{
					case 100:
						{
						alt200 = 1;
						}
						break;
					case NEWLINE:
						{
						alt200 = 2;
						}
						break;
					case INDENT:
						{
						alt200 = 3;
						}
						break;
					case DEDENT:
						{
						alt200 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(200); }
					switch ( alt200 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:569:105: ','
						{
						DebugLocation(569, 105);
						char_literal454=(IToken)Match(input,100,Follow._100_in_list_expr4884); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal454);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:569:111: NEWLINE
						{
						DebugLocation(569, 111);
						NEWLINE455=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4888); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE455);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:569:121: INDENT
						{
						DebugLocation(569, 121);
						INDENT456=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4892); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT456);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:569:130: DEDENT
						{
						DebugLocation(569, 130);
						DEDENT457=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4896); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT457);


						}
						break;

					default:
						goto loop200;
					}
				}

				loop200:
					;

				} finally { DebugExitSubRule(200); }

				DebugLocation(569, 139);
				char_literal458=(IToken)Match(input,133,Follow._133_in_list_expr4900); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_133.Add(char_literal458);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 569:143: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(569, 146);
					// SugarCpp.g:569:146: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(569, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(569, 158);
					// SugarCpp.g:569:158: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(569, 158);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:570:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(570, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4914);
				lambda_expr459=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr459.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 63);
			LeaveRule("list_expr", 63);
			LeaveRule_list_expr();
		}
		DebugLocation(571, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:573:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 64);
		TraceIn("lambda_value", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE461 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block462 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE461_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(573, 1);
		try
		{
			// SugarCpp.g:574:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt203=2;
			try { DebugEnterDecision(203, false);
			int LA203_0 = input.LA(1);

			if ((LA203_0==IDENT||LA203_0==NUMBER||LA203_0==STRING||LA203_0==86||LA203_0==91||LA203_0==93||LA203_0==95||(LA203_0>=97 && LA203_0<=98)||(LA203_0>=101 && LA203_0<=102)||(LA203_0>=131 && LA203_0<=132)||LA203_0==154||LA203_0==157||(LA203_0>=159 && LA203_0<=160)||LA203_0==184))
			{
				alt203 = 1;
			}
			else if ((LA203_0==NEWLINE))
			{
				alt203 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 203, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(203); }
			switch (alt203)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:574:4: expr
				{
				DebugLocation(574, 4);
				PushFollow(Follow._expr_in_lambda_value4925);
				expr460=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr460.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 574:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(574, 12);
					// SugarCpp.g:574:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(574, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(574, 25);
					// SugarCpp.g:574:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(574, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(574, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:575:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(575, 4);
				// SugarCpp.g:575:4: ( NEWLINE )+
				int cnt202=0;
				try { DebugEnterSubRule(202);
				while (true)
				{
					int alt202=2;
					try { DebugEnterDecision(202, false);
					int LA202_0 = input.LA(1);

					if ((LA202_0==NEWLINE))
					{
						alt202 = 1;
					}


					} finally { DebugExitDecision(202); }
					switch (alt202)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:575:4: NEWLINE
						{
						DebugLocation(575, 4);
						NEWLINE461=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4942); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE461);


						}
						break;

					default:
						if (cnt202 >= 1)
							goto loop202;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee202 = new EarlyExitException( 202, input );
						DebugRecognitionException(eee202);
						throw eee202;
					}
					cnt202++;
				}
				loop202:
					;

				} finally { DebugExitSubRule(202); }

				DebugLocation(575, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4945);
				stmt_block462=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block462.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 575:24: -> stmt_block
				{
					DebugLocation(575, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 64);
			LeaveRule("lambda_value", 64);
			LeaveRule_lambda_value();
		}
		DebugLocation(576, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:578:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 65);
		TraceIn("lambda_type", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal463 = default(IToken);
		IToken char_literal465 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name464 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal463_tree = default(CommonTree);
		CommonTree char_literal465_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(578, 1);
		try
		{
			// SugarCpp.g:579:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:579:4: '(' type_name ')'
			{
			DebugLocation(579, 4);
			char_literal463=(IToken)Match(input,93,Follow._93_in_lambda_type4960); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal463);

			DebugLocation(579, 8);
			PushFollow(Follow._type_name_in_lambda_type4962);
			type_name464=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name464.Tree);
			DebugLocation(579, 18);
			char_literal465=(IToken)Match(input,94,Follow._94_in_lambda_type4964); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_94.Add(char_literal465);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 579:22: -> type_name
			{
				DebugLocation(579, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 65);
			LeaveRule("lambda_type", 65);
			LeaveRule_lambda_type();
		}
		DebugLocation(580, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:582:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 66);
		TraceIn("lambda_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal466 = default(IToken);
		IToken char_literal468 = default(IToken);
		IToken string_literal470 = default(IToken);
		IToken string_literal472 = default(IToken);
		IToken string_literal474 = default(IToken);
		IToken string_literal476 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args467 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type469 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value471 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value473 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value477 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr478 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal466_tree = default(CommonTree);
		CommonTree char_literal468_tree = default(CommonTree);
		CommonTree string_literal470_tree = default(CommonTree);
		CommonTree string_literal472_tree = default(CommonTree);
		CommonTree string_literal474_tree = default(CommonTree);
		CommonTree string_literal476_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(582, 1);
		try
		{
			// SugarCpp.g:583:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt207=2;
			try { DebugEnterDecision(207, false);
			try
			{
				alt207 = dfa207.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:583:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(583, 4);
				char_literal466=(IToken)Match(input,93,Follow._93_in_lambda_expr4979); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal466);

				DebugLocation(583, 8);
				// SugarCpp.g:583:8: ( func_args )?
				int alt204=2;
				try { DebugEnterSubRule(204);
				try { DebugEnterDecision(204, false);
				int LA204_0 = input.LA(1);

				if ((LA204_0==IDENT||LA204_0==113))
				{
					alt204 = 1;
				}
				} finally { DebugExitDecision(204); }
				switch (alt204)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:583:8: func_args
					{
					DebugLocation(583, 8);
					PushFollow(Follow._func_args_in_lambda_expr4981);
					func_args467=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args467.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(204); }

				DebugLocation(583, 19);
				char_literal468=(IToken)Match(input,94,Follow._94_in_lambda_expr4984); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal468);

				DebugLocation(583, 23);
				// SugarCpp.g:583:23: ( lambda_type )?
				int alt205=2;
				try { DebugEnterSubRule(205);
				try { DebugEnterDecision(205, false);
				int LA205_0 = input.LA(1);

				if ((LA205_0==93))
				{
					alt205 = 1;
				}
				} finally { DebugExitDecision(205); }
				switch (alt205)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:583:23: lambda_type
					{
					DebugLocation(583, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4986);
					lambda_type469=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type469.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(205); }

				DebugLocation(583, 36);
				// SugarCpp.g:583:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt206=4;
				try { DebugEnterSubRule(206);
				try { DebugEnterDecision(206, false);
				switch (input.LA(1))
				{
				case 105:
					{
					alt206 = 1;
					}
					break;
				case 124:
					{
					alt206 = 2;
					}
					break;
				case 103:
					{
					alt206 = 3;
					}
					break;
				case 123:
					{
					alt206 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 206, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(206); }
				switch (alt206)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:583:38: '->' lambda_value
					{
					DebugLocation(583, 38);
					string_literal470=(IToken)Match(input,105,Follow._105_in_lambda_expr4991); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal470);

					DebugLocation(583, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4993);
					lambda_value471=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value471.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, lambda_value, func_args, 105
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 583:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(583, 60);
						// SugarCpp.g:583:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(583, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(583, 74);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(583, 79);
						// SugarCpp.g:583:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(583, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(583, 90);
						// SugarCpp.g:583:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(583, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(583, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:584:17: '=>' lambda_value
					{
					DebugLocation(584, 17);
					string_literal472=(IToken)Match(input,124,Follow._124_in_lambda_expr5028); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_124.Add(string_literal472);

					DebugLocation(584, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr5030);
					lambda_value473=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value473.Tree);


					{
					// AST REWRITE
					// elements: 124, func_args, lambda_value, lambda_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 584:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(584, 39);
						// SugarCpp.g:584:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(584, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(584, 53);
						adaptor.AddChild(root_1, stream_124.NextNode());
						DebugLocation(584, 58);
						// SugarCpp.g:584:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(584, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(584, 69);
						// SugarCpp.g:584:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(584, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(584, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:585:14: '-->' lambda_value
					{
					DebugLocation(585, 14);
					string_literal474=(IToken)Match(input,103,Follow._103_in_lambda_expr5062); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal474);

					DebugLocation(585, 20);
					PushFollow(Follow._lambda_value_in_lambda_expr5064);
					lambda_value475=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value475.Tree);


					{
					// AST REWRITE
					// elements: 103, lambda_value, lambda_type, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 585:34: -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(585, 37);
						// SugarCpp.g:585:37: ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(585, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(585, 51);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(585, 57);
						// SugarCpp.g:585:57: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(585, 57);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(585, 68);
						// SugarCpp.g:585:68: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(585, 68);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(585, 81);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:586:17: '==>' lambda_value
					{
					DebugLocation(586, 17);
					string_literal476=(IToken)Match(input,123,Follow._123_in_lambda_expr5099); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_123.Add(string_literal476);

					DebugLocation(586, 23);
					PushFollow(Follow._lambda_value_in_lambda_expr5101);
					lambda_value477=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value477.Tree);


					{
					// AST REWRITE
					// elements: 123, lambda_type, lambda_value, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 586:37: -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(586, 40);
						// SugarCpp.g:586:40: ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(586, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(586, 54);
						adaptor.AddChild(root_1, stream_123.NextNode());
						DebugLocation(586, 60);
						// SugarCpp.g:586:60: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(586, 60);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(586, 71);
						// SugarCpp.g:586:71: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(586, 71);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(586, 84);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(206); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:588:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(588, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr5136);
				modify_expr478=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr478.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 66);
			LeaveRule("lambda_expr", 66);
			LeaveRule_lambda_expr();
		}
		DebugLocation(589, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:591:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 67);
		TraceIn("modify_expr_op", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set479 = default(IToken);

		CommonTree set479_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(591, 91);
		try
		{
			// SugarCpp.g:591:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(591, 15);

			set479=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==118||input.LA(1)==121||input.LA(1)==128||input.LA(1)==135||input.LA(1)==181)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set479));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 67);
			LeaveRule("modify_expr_op", 67);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(591, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:592:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 68);
		TraceIn("modify_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set481 = default(IToken);
		IToken char_literal483 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr480 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr484 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set481_tree = default(CommonTree);
		CommonTree char_literal483_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(592, 1);
		try
		{
			// SugarCpp.g:593:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:593:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(593, 4);
			PushFollow(Follow._cond_expr_in_modify_expr5193);
			cond_expr480=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr480.Tree);
			DebugLocation(593, 14);
			// SugarCpp.g:593:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt209=3;
			try { DebugEnterSubRule(209);
			try { DebugEnterDecision(209, false);
			int LA209_0 = input.LA(1);

			if ((LA209_0==89||LA209_0==92||LA209_0==96||LA209_0==99||LA209_0==104||LA209_0==110||LA209_0==113||LA209_0==118||LA209_0==128||LA209_0==135||LA209_0==181))
			{
				alt209 = 1;
			}
			else if ((LA209_0==121))
			{
				alt209 = 2;
			}
			} finally { DebugExitDecision(209); }
			switch (alt209)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:593:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(593, 94);

				set481=(IToken)input.LT(1);
				set481=(IToken)input.LT(1);
				if (input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==99||input.LA(1)==104||input.LA(1)==110||input.LA(1)==113||input.LA(1)==118||input.LA(1)==128||input.LA(1)==135||input.LA(1)==181)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set481), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(593, 96);
				PushFollow(Follow._cond_expr_in_modify_expr5242);
				cond_expr482=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr482.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:594:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(594, 7);
				// SugarCpp.g:594:7: ( '=' ^ cond_expr )+
				int cnt208=0;
				try { DebugEnterSubRule(208);
				while (true)
				{
					int alt208=2;
					try { DebugEnterDecision(208, false);
					int LA208_0 = input.LA(1);

					if ((LA208_0==121))
					{
						alt208 = 1;
					}


					} finally { DebugExitDecision(208); }
					switch (alt208)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:594:8: '=' ^ cond_expr
						{
						DebugLocation(594, 11);
						char_literal483=(IToken)Match(input,121,Follow._121_in_modify_expr5251); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal483_tree = (CommonTree)adaptor.Create(char_literal483);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal483_tree, root_0);
						}
						DebugLocation(594, 13);
						PushFollow(Follow._cond_expr_in_modify_expr5254);
						cond_expr484=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr484.Tree);

						}
						break;

					default:
						if (cnt208 >= 1)
							goto loop208;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee208 = new EarlyExitException( 208, input );
						DebugRecognitionException(eee208);
						throw eee208;
					}
					cnt208++;
				}
				loop208:
					;

				} finally { DebugExitSubRule(208); }


				}
				break;

			}
			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 68);
			LeaveRule("modify_expr", 68);
			LeaveRule_modify_expr();
		}
		DebugLocation(595, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:597:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 69);
		TraceIn("cond_expr_item", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr485 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(597, 24);
		try
		{
			// SugarCpp.g:597:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:597:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(597, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item5267);
			or_expr485=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr485.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 69);
			LeaveRule("cond_expr_item", 69);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(597, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:598:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 70);
		TraceIn("cond_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal486 = default(IToken);
		IToken char_literal487 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal486_tree = default(CommonTree);
		CommonTree char_literal487_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(598, 1);
		try
		{
			// SugarCpp.g:599:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:599:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(599, 4);
			// SugarCpp.g:599:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:599:5: a= or_expr
			{
			DebugLocation(599, 6);
			PushFollow(Follow._or_expr_in_cond_expr5279);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 599:15: -> $a
			{
				DebugLocation(599, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(599, 22);
			// SugarCpp.g:599:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt212=2;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, false);
			int LA212_0 = input.LA(1);

			if ((LA212_0==129))
			{
				alt212 = 1;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:599:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(599, 23);
				char_literal486=(IToken)Match(input,129,Follow._129_in_cond_expr5288); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(char_literal486);

				DebugLocation(599, 27);
				// SugarCpp.g:599:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt211=2;
				try { DebugEnterSubRule(211);
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==IDENT||LA211_0==NUMBER||LA211_0==STRING||LA211_0==86||LA211_0==91||LA211_0==93||LA211_0==95||(LA211_0>=97 && LA211_0<=98)||(LA211_0>=101 && LA211_0<=102)||LA211_0==131||(LA211_0>=159 && LA211_0<=160)||LA211_0==184))
				{
					alt211 = 1;
				}
				else if ((LA211_0==DEDENT||LA211_0==INDENT||LA211_0==NEWLINE||LA211_0==89||LA211_0==92||LA211_0==94||LA211_0==96||(LA211_0>=99 && LA211_0<=100)||LA211_0==104||LA211_0==110||(LA211_0>=113 && LA211_0<=114)||LA211_0==118||(LA211_0>=120 && LA211_0<=121)||LA211_0==124||LA211_0==128||LA211_0==133||LA211_0==135||LA211_0==138||LA211_0==143||(LA211_0>=148 && LA211_0<=149)||LA211_0==151||LA211_0==164||(LA211_0>=168 && LA211_0<=170)||(LA211_0>=173 && LA211_0<=174)||(LA211_0>=178 && LA211_0<=179)||(LA211_0>=181 && LA211_0<=182)))
				{
					alt211 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 211, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(211); }
				switch (alt211)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:599:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(599, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr5294);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(599, 46);
					// SugarCpp.g:599:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt210=2;
					try { DebugEnterSubRule(210);
					try { DebugEnterDecision(210, false);
					int LA210_0 = input.LA(1);

					if ((LA210_0==111))
					{
						alt210 = 1;
					}
					else if ((LA210_0==DEDENT||LA210_0==INDENT||LA210_0==NEWLINE||LA210_0==89||LA210_0==92||LA210_0==94||LA210_0==96||(LA210_0>=99 && LA210_0<=100)||LA210_0==104||LA210_0==110||(LA210_0>=113 && LA210_0<=114)||LA210_0==118||(LA210_0>=120 && LA210_0<=121)||LA210_0==124||LA210_0==128||LA210_0==133||LA210_0==135||LA210_0==138||LA210_0==143||(LA210_0>=148 && LA210_0<=149)||LA210_0==151||LA210_0==164||(LA210_0>=168 && LA210_0<=170)||(LA210_0>=173 && LA210_0<=174)||(LA210_0>=178 && LA210_0<=179)||(LA210_0>=181 && LA210_0<=182)))
					{
						alt210 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 210, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(210); }
					switch (alt210)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:599:48: ':' b= cond_expr_item
						{
						DebugLocation(599, 48);
						char_literal487=(IToken)Match(input,111,Follow._111_in_cond_expr5298); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(char_literal487);

						DebugLocation(599, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr5302);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, cond_expr, b
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 599:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(599, 72);
							// SugarCpp.g:599:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(599, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(599, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(599, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(599, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:600:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 600:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(600, 20);
							// SugarCpp.g:600:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(600, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(600, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(600, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(210); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:602:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 602:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(602, 14);
						// SugarCpp.g:602:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(602, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(602, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(211); }


				}
				break;

			}
			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 70);
			LeaveRule("cond_expr", 70);
			LeaveRule_cond_expr();
		}
		DebugLocation(604, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:606:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 71);
		TraceIn("or_op", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set488 = default(IToken);

		CommonTree set488_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(606, 19);
		try
		{
			// SugarCpp.g:606:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(606, 6);

			set488=(IToken)input.LT(1);
			if (input.LA(1)==161||input.LA(1)==183)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set488));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 71);
			LeaveRule("or_op", 71);
			LeaveRule_or_op();
		}
		DebugLocation(606, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:607:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 72);
		TraceIn("or_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(607, 1);
		try
		{
			// SugarCpp.g:608:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:608:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(608, 4);
			// SugarCpp.g:608:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:608:5: a= and_expr
			{
			DebugLocation(608, 6);
			PushFollow(Follow._and_expr_in_or_expr5416);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 608:16: -> $a
			{
				DebugLocation(608, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(608, 23);
			// SugarCpp.g:608:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=2;
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==161||LA213_0==183))
				{
					alt213 = 1;
				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:608:24: op= or_op b= and_expr
					{
					DebugLocation(608, 26);
					PushFollow(Follow._or_op_in_or_expr5427);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(608, 34);
					PushFollow(Follow._and_expr_in_or_expr5431);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(608, 47);
						// SugarCpp.g:608:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(608, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(608, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(608, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 72);
			LeaveRule("or_expr", 72);
			LeaveRule_or_expr();
		}
		DebugLocation(609, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:611:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 73);
		TraceIn("and_op", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set489 = default(IToken);

		CommonTree set489_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(611, 21);
		try
		{
			// SugarCpp.g:611:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(611, 7);

			set489=(IToken)input.LT(1);
			if (input.LA(1)==90||input.LA(1)==137)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set489));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 73);
			LeaveRule("and_op", 73);
			LeaveRule_and_op();
		}
		DebugLocation(611, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:612:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 74);
		TraceIn("and_expr", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(612, 1);
		try
		{
			// SugarCpp.g:613:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:613:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(613, 4);
			// SugarCpp.g:613:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:613:5: a= bit_or
			{
			DebugLocation(613, 6);
			PushFollow(Follow._bit_or_in_and_expr5473);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 613:14: -> $a
			{
				DebugLocation(613, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(613, 21);
			// SugarCpp.g:613:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(214);
			while (true)
			{
				int alt214=2;
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==90||LA214_0==137))
				{
					alt214 = 1;
				}


				} finally { DebugExitDecision(214); }
				switch ( alt214 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:613:22: op= and_op b= bit_or
					{
					DebugLocation(613, 24);
					PushFollow(Follow._and_op_in_and_expr5484);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(613, 33);
					PushFollow(Follow._bit_or_in_and_expr5488);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 613:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(613, 44);
						// SugarCpp.g:613:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(613, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(613, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(613, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(613, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop214;
				}
			}

			loop214:
				;

			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 74);
			LeaveRule("and_expr", 74);
			LeaveRule_and_expr();
		}
		DebugLocation(614, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:616:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 75);
		TraceIn("bit_or", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal490 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal490_tree = default(CommonTree);
		RewriteRuleITokenStream stream_180=new RewriteRuleITokenStream(adaptor,"token 180");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(616, 1);
		try
		{
			// SugarCpp.g:617:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:617:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(617, 4);
			// SugarCpp.g:617:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:617:5: a= bit_xor
			{
			DebugLocation(617, 6);
			PushFollow(Follow._bit_xor_in_bit_or5519);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 617:15: -> $a
			{
				DebugLocation(617, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(617, 22);
			// SugarCpp.g:617:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(215);
			while (true)
			{
				int alt215=2;
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==180))
				{
					alt215 = 1;
				}


				} finally { DebugExitDecision(215); }
				switch ( alt215 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:617:23: '|' b= bit_xor
					{
					DebugLocation(617, 23);
					char_literal490=(IToken)Match(input,180,Follow._180_in_bit_or5528); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_180.Add(char_literal490);

					DebugLocation(617, 28);
					PushFollow(Follow._bit_xor_in_bit_or5532);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 180, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 617:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(617, 40);
						// SugarCpp.g:617:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(617, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(617, 51);
						adaptor.AddChild(root_1, stream_180.NextNode());
						DebugLocation(617, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(617, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop215;
				}
			}

			loop215:
				;

			} finally { DebugExitSubRule(215); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 75);
			LeaveRule("bit_or", 75);
			LeaveRule_bit_or();
		}
		DebugLocation(618, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:620:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 76);
		TraceIn("bit_xor", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal491 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal491_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(620, 1);
		try
		{
			// SugarCpp.g:621:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:621:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(621, 4);
			// SugarCpp.g:621:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:621:5: a= bit_and
			{
			DebugLocation(621, 6);
			PushFollow(Follow._bit_and_in_bit_xor5562);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 621:15: -> $a
			{
				DebugLocation(621, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(621, 22);
			// SugarCpp.g:621:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==134))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:621:23: '^' b= bit_and
					{
					DebugLocation(621, 23);
					char_literal491=(IToken)Match(input,134,Follow._134_in_bit_xor5571); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_134.Add(char_literal491);

					DebugLocation(621, 28);
					PushFollow(Follow._bit_and_in_bit_xor5575);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 134, bit_xor, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 621:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(621, 40);
						// SugarCpp.g:621:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(621, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(621, 51);
						adaptor.AddChild(root_1, stream_134.NextNode());
						DebugLocation(621, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(621, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 76);
			LeaveRule("bit_xor", 76);
			LeaveRule_bit_xor();
		}
		DebugLocation(622, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:624:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 77);
		TraceIn("bit_and", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal492 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal492_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(624, 1);
		try
		{
			// SugarCpp.g:625:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:625:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(625, 4);
			// SugarCpp.g:625:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:625:5: a= cmp_expr
			{
			DebugLocation(625, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5605);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 625:16: -> $a
			{
				DebugLocation(625, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(625, 23);
			// SugarCpp.g:625:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=2;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==91))
				{
					alt217 = 1;
				}


				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:625:24: '&' b= cmp_expr
					{
					DebugLocation(625, 24);
					char_literal492=(IToken)Match(input,91,Follow._91_in_bit_and5614); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal492);

					DebugLocation(625, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5618);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, 91, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 625:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(625, 42);
						// SugarCpp.g:625:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(625, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(625, 53);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(625, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(625, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 77);
			LeaveRule("bit_and", 77);
			LeaveRule_bit_and();
		}
		DebugLocation(626, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:628:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 78);
		TraceIn("chain_op", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set493 = default(IToken);

		CommonTree set493_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(628, 64);
		try
		{
			// SugarCpp.g:628:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(628, 9);

			set493=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=152 && input.LA(1)<=153))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set493));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 78);
			LeaveRule("chain_op", 78);
			LeaveRule_chain_op();
		}
		DebugLocation(628, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:629:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 79);
		TraceIn("no_less_op", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set494 = default(IToken);

		CommonTree set494_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(629, 60);
		try
		{
			// SugarCpp.g:629:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(629, 11);

			set494=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==119||input.LA(1)==122||(input.LA(1)>=125 && input.LA(1)<=126)||(input.LA(1)>=152 && input.LA(1)<=153))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set494));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 79);
			LeaveRule("no_less_op", 79);
			LeaveRule_no_less_op();
		}
		DebugLocation(629, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:630:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 80);
		TraceIn("chain_list", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr496 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(630, 35);
		try
		{
			// SugarCpp.g:630:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:630:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(630, 13);
			// SugarCpp.g:630:13: ( chain_op shift_expr )+
			int cnt218=0;
			try { DebugEnterSubRule(218);
			while (true)
			{
				int alt218=2;
				try { DebugEnterDecision(218, false);
				int LA218_0 = input.LA(1);

				if ((LA218_0==87||LA218_0==115||LA218_0==119||LA218_0==122||(LA218_0>=125 && LA218_0<=126)||(LA218_0>=152 && LA218_0<=153)))
				{
					alt218 = 1;
				}


				} finally { DebugExitDecision(218); }
				switch (alt218)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:630:14: chain_op shift_expr
					{
					DebugLocation(630, 14);
					PushFollow(Follow._chain_op_in_chain_list5710);
					chain_op495=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op495.Tree);
					DebugLocation(630, 23);
					PushFollow(Follow._shift_expr_in_chain_list5712);
					shift_expr496=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr496.Tree);

					}
					break;

				default:
					if (cnt218 >= 1)
						goto loop218;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee218 = new EarlyExitException( 218, input );
					DebugRecognitionException(eee218);
					throw eee218;
				}
				cnt218++;
			}
			loop218:
				;

			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 80);
			LeaveRule("chain_list", 80);
			LeaveRule_chain_list();
		}
		DebugLocation(630, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:631:1: cmp_expr : (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 81);
		TraceIn("cmp_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal497 = default(IToken);
		IToken char_literal499 = default(IToken);
		IToken char_literal501 = default(IToken);
		IToken char_literal503 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident498 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident500 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list502 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list504 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list505 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal497_tree = default(CommonTree);
		CommonTree char_literal499_tree = default(CommonTree);
		CommonTree char_literal501_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(631, 1);
		try
		{
			// SugarCpp.g:632:2: ( (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:632:4: (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(632, 4);
			// SugarCpp.g:632:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:632:5: a= shift_expr
			{
			DebugLocation(632, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5726);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 632:18: -> $a
			{
				DebugLocation(632, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(632, 25);
			// SugarCpp.g:632:25: ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt222=4;
			try { DebugEnterSubRule(222);
			try { DebugEnterDecision(222, false);
			int LA222_0 = input.LA(1);

			if ((LA222_0==115))
			{
				int LA222_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt222 = 1;
				}
				else if ((true))
				{
					alt222 = 2;
				}
			}
			else if ((LA222_0==87||LA222_0==119||LA222_0==122||(LA222_0>=125 && LA222_0<=126)||(LA222_0>=152 && LA222_0<=153)))
			{
				alt222 = 3;
			}
			} finally { DebugExitDecision(222); }
			switch (alt222)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:632:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list
				{
				DebugLocation(632, 77);
				char_literal497=(IToken)Match(input,115,Follow._115_in_cmp_expr5755); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(char_literal497);

				DebugLocation(632, 81);
				PushFollow(Follow._ident_in_cmp_expr5757);
				ident498=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident498.Tree);
				DebugLocation(632, 87);
				// SugarCpp.g:632:87: ( ',' ident )*
				try { DebugEnterSubRule(219);
				while (true)
				{
					int alt219=2;
					try { DebugEnterDecision(219, false);
					int LA219_0 = input.LA(1);

					if ((LA219_0==100))
					{
						alt219 = 1;
					}


					} finally { DebugExitDecision(219); }
					switch ( alt219 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:632:88: ',' ident
						{
						DebugLocation(632, 88);
						char_literal499=(IToken)Match(input,100,Follow._100_in_cmp_expr5760); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal499);

						DebugLocation(632, 92);
						PushFollow(Follow._ident_in_cmp_expr5762);
						ident500=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident500.Tree);

						}
						break;

					default:
						goto loop219;
					}
				}

				loop219:
					;

				} finally { DebugExitSubRule(219); }

				DebugLocation(632, 100);
				char_literal501=(IToken)Match(input,125,Follow._125_in_cmp_expr5766); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal501);

				DebugLocation(632, 104);
				PushFollow(Follow._bracket_expr_list_in_cmp_expr5768);
				bracket_expr_list502=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list502.Tree);


				{
				// AST REWRITE
				// elements: ident, bracket_expr_list, cmp_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 632:122: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
				{
					DebugLocation(632, 125);
					// SugarCpp.g:632:125: ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(632, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(632, 138);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(632, 147);
					// SugarCpp.g:632:147: ^( Generic_Patameters ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(632, 149);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

					DebugLocation(632, 168);
					// SugarCpp.g:632:168: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(632, 168);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(632, 176);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:633:12: '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(633, 12);
				char_literal503=(IToken)Match(input,115,Follow._115_in_cmp_expr5799); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(char_literal503);

				DebugLocation(633, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr5803);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(633, 29);
				// SugarCpp.g:633:29: ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt220=2;
				try { DebugEnterSubRule(220);
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==87||LA220_0==115||LA220_0==119||LA220_0==122||(LA220_0>=125 && LA220_0<=126)||(LA220_0>=152 && LA220_0<=153)))
				{
					alt220 = 1;
				}
				else if ((LA220_0==DEDENT||LA220_0==INDENT||LA220_0==NEWLINE||(LA220_0>=89 && LA220_0<=92)||LA220_0==94||LA220_0==96||(LA220_0>=99 && LA220_0<=100)||LA220_0==104||(LA220_0>=110 && LA220_0<=111)||(LA220_0>=113 && LA220_0<=114)||LA220_0==118||(LA220_0>=120 && LA220_0<=121)||LA220_0==124||(LA220_0>=128 && LA220_0<=129)||(LA220_0>=133 && LA220_0<=135)||(LA220_0>=137 && LA220_0<=138)||LA220_0==143||(LA220_0>=148 && LA220_0<=149)||LA220_0==151||LA220_0==161||LA220_0==164||(LA220_0>=168 && LA220_0<=170)||(LA220_0>=173 && LA220_0<=174)||(LA220_0>=178 && LA220_0<=183)))
				{
					alt220 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 220, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(220); }
				switch (alt220)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:633:31: chain_list
					{
					DebugLocation(633, 31);
					PushFollow(Follow._chain_list_in_cmp_expr5807);
					chain_list504=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list504.Tree);


					{
					// AST REWRITE
					// elements: 115, b, chain_list, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 633:42: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(633, 45);
						// SugarCpp.g:633:45: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(633, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(633, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(633, 69);
						adaptor.AddChild(root_1, stream_115.NextNode());
						DebugLocation(633, 74);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(633, 76);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:634:16: 
					{

					{
					// AST REWRITE
					// elements: 115, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 634:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(634, 19);
						// SugarCpp.g:634:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(634, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(634, 30);
						adaptor.AddChild(root_1, stream_115.NextNode());
						DebugLocation(634, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(634, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(220); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:635:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(635, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5884);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(635, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5888);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(635, 54);
				// SugarCpp.g:635:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt221=2;
				try { DebugEnterSubRule(221);
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==87||LA221_0==115||LA221_0==119||LA221_0==122||(LA221_0>=125 && LA221_0<=126)||(LA221_0>=152 && LA221_0<=153)))
				{
					alt221 = 1;
				}
				else if ((LA221_0==DEDENT||LA221_0==INDENT||LA221_0==NEWLINE||(LA221_0>=89 && LA221_0<=92)||LA221_0==94||LA221_0==96||(LA221_0>=99 && LA221_0<=100)||LA221_0==104||(LA221_0>=110 && LA221_0<=111)||(LA221_0>=113 && LA221_0<=114)||LA221_0==118||(LA221_0>=120 && LA221_0<=121)||LA221_0==124||(LA221_0>=128 && LA221_0<=129)||(LA221_0>=133 && LA221_0<=135)||(LA221_0>=137 && LA221_0<=138)||LA221_0==143||(LA221_0>=148 && LA221_0<=149)||LA221_0==151||LA221_0==161||LA221_0==164||(LA221_0>=168 && LA221_0<=170)||(LA221_0>=173 && LA221_0<=174)||(LA221_0>=178 && LA221_0<=183)))
				{
					alt221 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 221, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(221); }
				switch (alt221)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:635:56: chain_list
					{
					DebugLocation(635, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5892);
					chain_list505=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list505.Tree);


					{
					// AST REWRITE
					// elements: b, op, chain_list, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 635:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(635, 70);
						// SugarCpp.g:635:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(635, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(635, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(635, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(635, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(635, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:636:17: 
					{

					{
					// AST REWRITE
					// elements: op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(636, 20);
						// SugarCpp.g:636:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(636, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(636, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(636, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(221); }


				}
				break;

			}
			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 81);
			LeaveRule("cmp_expr", 81);
			LeaveRule_cmp_expr();
		}
		DebugLocation(639, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:641:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 82);
		TraceIn("shift_expr_op", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set506 = default(IToken);

		CommonTree set506_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(641, 27);
		try
		{
			// SugarCpp.g:641:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(641, 14);

			set506=(IToken)input.LT(1);
			if (input.LA(1)==117||input.LA(1)==127)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set506));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 82);
			LeaveRule("shift_expr_op", 82);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(641, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:642:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 83);
		TraceIn("shift_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op507 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(642, 1);
		try
		{
			// SugarCpp.g:643:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:643:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(643, 4);
			// SugarCpp.g:643:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:643:5: a= add_expr
			{
			DebugLocation(643, 6);
			PushFollow(Follow._add_expr_in_shift_expr5994);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 643:16: -> $a
			{
				DebugLocation(643, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(643, 23);
			// SugarCpp.g:643:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=2;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==117||LA223_0==127))
				{
					alt223 = 1;
				}


				} finally { DebugExitDecision(223); }
				switch ( alt223 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:643:24: shift_expr_op b= add_expr
					{
					DebugLocation(643, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr6003);
					shift_expr_op507=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op507.Tree);
					DebugLocation(643, 39);
					PushFollow(Follow._add_expr_in_shift_expr6007);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr_op, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 643:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(643, 52);
						// SugarCpp.g:643:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(643, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(643, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(643, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(643, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop223;
				}
			}

			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 83);
			LeaveRule("shift_expr", 83);
			LeaveRule_shift_expr();
		}
		DebugLocation(644, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:646:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 84);
		TraceIn("add_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal508 = default(IToken);
		IToken char_literal509 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree char_literal509_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(646, 1);
		try
		{
			// SugarCpp.g:647:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:647:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(647, 4);
			// SugarCpp.g:647:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:647:5: a= mul_expr
			{
			DebugLocation(647, 6);
			PushFollow(Follow._mul_expr_in_add_expr6037);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 647:16: -> $a
			{
				DebugLocation(647, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(647, 23);
			// SugarCpp.g:647:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=3;
				try { DebugEnterDecision(224, false);
				int LA224_0 = input.LA(1);

				if ((LA224_0==97))
				{
					alt224 = 1;
				}
				else if ((LA224_0==101))
				{
					alt224 = 2;
				}


				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:647:25: '+' b= mul_expr
					{
					DebugLocation(647, 25);
					char_literal508=(IToken)Match(input,97,Follow._97_in_add_expr6047); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal508);

					DebugLocation(647, 30);
					PushFollow(Follow._mul_expr_in_add_expr6051);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 97, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 647:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(647, 43);
						// SugarCpp.g:647:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(647, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(647, 54);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(647, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(647, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:648:10: '-' b= mul_expr
					{
					DebugLocation(648, 10);
					char_literal509=(IToken)Match(input,101,Follow._101_in_add_expr6076); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(char_literal509);

					DebugLocation(648, 15);
					PushFollow(Follow._mul_expr_in_add_expr6080);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 101, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 648:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(648, 28);
						// SugarCpp.g:648:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(648, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(648, 39);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(648, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(648, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 84);
			LeaveRule("add_expr", 84);
			LeaveRule_add_expr();
		}
		DebugLocation(650, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:652:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 85);
		TraceIn("mul_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal510 = default(IToken);
		IToken char_literal511 = default(IToken);
		IToken char_literal512 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal510_tree = default(CommonTree);
		CommonTree char_literal511_tree = default(CommonTree);
		CommonTree char_literal512_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(652, 1);
		try
		{
			// SugarCpp.g:653:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:653:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(653, 4);
			// SugarCpp.g:653:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:653:5: a= infix_expr
			{
			DebugLocation(653, 6);
			PushFollow(Follow._infix_expr_in_mul_expr6118);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 653:18: -> $a
			{
				DebugLocation(653, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(653, 25);
			// SugarCpp.g:653:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(225);
			while (true)
			{
				int alt225=4;
				try { DebugEnterDecision(225, false);
				switch (input.LA(1))
				{
				case 95:
					{
					alt225 = 1;
					}
					break;
				case 109:
					{
					alt225 = 2;
					}
					break;
				case 88:
					{
					alt225 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(225); }
				switch ( alt225 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:653:27: '*' b= infix_expr
					{
					DebugLocation(653, 27);
					char_literal510=(IToken)Match(input,95,Follow._95_in_mul_expr6128); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal510);

					DebugLocation(653, 32);
					PushFollow(Follow._infix_expr_in_mul_expr6132);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 95, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 653:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(653, 47);
						// SugarCpp.g:653:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(653, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(653, 58);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(653, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(653, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:654:12: '/' b= infix_expr
					{
					DebugLocation(654, 12);
					char_literal511=(IToken)Match(input,109,Follow._109_in_mul_expr6159); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(char_literal511);

					DebugLocation(654, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6163);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 109, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 654:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(654, 32);
						// SugarCpp.g:654:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(654, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(654, 43);
						adaptor.AddChild(root_1, stream_109.NextNode());
						DebugLocation(654, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(654, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:655:12: '%' b= infix_expr
					{
					DebugLocation(655, 12);
					char_literal512=(IToken)Match(input,88,Follow._88_in_mul_expr6190); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal512);

					DebugLocation(655, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6194);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 88
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 655:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(655, 32);
						// SugarCpp.g:655:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(655, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(655, 43);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(655, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(655, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop225;
				}
			}

			loop225:
				;

			} finally { DebugExitSubRule(225); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 85);
			LeaveRule("mul_expr", 85);
			LeaveRule_mul_expr();
		}
		DebugLocation(657, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:659:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 86);
		TraceIn("infix_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func513 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(659, 1);
		try
		{
			// SugarCpp.g:660:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:660:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(660, 4);
			// SugarCpp.g:660:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:660:5: a= selector_expr
			{
			DebugLocation(660, 6);
			PushFollow(Follow._selector_expr_in_infix_expr6234);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 660:21: -> $a
			{
				DebugLocation(660, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(660, 28);
			// SugarCpp.g:660:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(226);
			while (true)
			{
				int alt226=2;
				try { DebugEnterDecision(226, false);
				int LA226_0 = input.LA(1);

				if ((LA226_0==136))
				{
					alt226 = 1;
				}


				} finally { DebugExitDecision(226); }
				switch ( alt226 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:660:30: infix_func b= selector_expr
					{
					DebugLocation(660, 30);
					PushFollow(Follow._infix_func_in_infix_expr6244);
					infix_func513=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func513.Tree);
					DebugLocation(660, 42);
					PushFollow(Follow._selector_expr_in_infix_expr6248);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, infix_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 660:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(660, 61);
						// SugarCpp.g:660:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(660, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(660, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(660, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(660, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop226;
				}
			}

			loop226:
				;

			} finally { DebugExitSubRule(226); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 86);
			LeaveRule("infix_expr", 86);
			LeaveRule_infix_expr();
		}
		DebugLocation(661, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:663:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 87);
		TraceIn("selector_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal514 = default(IToken);
		IToken string_literal515 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal514_tree = default(CommonTree);
		CommonTree string_literal515_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(663, 1);
		try
		{
			// SugarCpp.g:664:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:664:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(664, 4);
			// SugarCpp.g:664:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:664:5: a= cast_expr
			{
			DebugLocation(664, 6);
			PushFollow(Follow._cast_expr_in_selector_expr6280);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 664:17: -> $a
			{
				DebugLocation(664, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(664, 24);
			// SugarCpp.g:664:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(227);
			while (true)
			{
				int alt227=3;
				try { DebugEnterDecision(227, false);
				int LA227_0 = input.LA(1);

				if ((LA227_0==106))
				{
					alt227 = 1;
				}
				else if ((LA227_0==108))
				{
					alt227 = 2;
				}


				} finally { DebugExitDecision(227); }
				switch ( alt227 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:664:26: '->*' b= ident
					{
					DebugLocation(664, 26);
					string_literal514=(IToken)Match(input,106,Follow._106_in_selector_expr6290); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(string_literal514);

					DebugLocation(664, 33);
					PushFollow(Follow._ident_in_selector_expr6294);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 106, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 664:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(664, 43);
						// SugarCpp.g:664:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(664, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(664, 57);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(664, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(664, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:665:11: '.*' b= ident
					{
					DebugLocation(665, 11);
					string_literal515=(IToken)Match(input,108,Follow._108_in_selector_expr6320); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(string_literal515);

					DebugLocation(665, 18);
					PushFollow(Follow._ident_in_selector_expr6325);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 108, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 665:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(665, 28);
						// SugarCpp.g:665:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(665, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(665, 42);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(665, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(665, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop227;
				}
			}

			loop227:
				;

			} finally { DebugExitSubRule(227); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 87);
			LeaveRule("selector_expr", 87);
			LeaveRule_selector_expr();
		}
		DebugLocation(667, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:669:1: cast_expr : ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 88);
		TraceIn("cast_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal516 = default(IToken);
		IToken char_literal518 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name517 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr520 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal516_tree = default(CommonTree);
		CommonTree char_literal518_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(669, 1);
		try
		{
			// SugarCpp.g:670:2: ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt228=2;
			try { DebugEnterDecision(228, false);
			int LA228_0 = input.LA(1);

			if ((LA228_0==93))
			{
				int LA228_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_SugarCpp_fragment)))
				{
					alt228 = 1;
				}
				else if ((true))
				{
					alt228 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA228_0==IDENT||LA228_0==NUMBER||LA228_0==STRING||LA228_0==86||LA228_0==91||LA228_0==95||(LA228_0>=97 && LA228_0<=98)||(LA228_0>=101 && LA228_0<=102)||LA228_0==131||(LA228_0>=159 && LA228_0<=160)||LA228_0==184))
			{
				alt228 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 228, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(228); }
			switch (alt228)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:670:4: ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr
				{
				DebugLocation(670, 39);
				char_literal516=(IToken)Match(input,93,Follow._93_in_cast_expr6374); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal516);

				DebugLocation(670, 43);
				PushFollow(Follow._type_name_in_cast_expr6376);
				type_name517=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name517.Tree);
				DebugLocation(670, 53);
				char_literal518=(IToken)Match(input,94,Follow._94_in_cast_expr6378); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal518);

				DebugLocation(670, 57);
				PushFollow(Follow._prefix_expr_in_cast_expr6380);
				prefix_expr519=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr519.Tree);


				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 670:69: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(670, 72);
					// SugarCpp.g:670:72: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(670, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(670, 84);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(670, 94);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:671:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(671, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr6395);
				prefix_expr520=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr520.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 88);
			LeaveRule("cast_expr", 88);
			LeaveRule_cast_expr();
		}
		DebugLocation(672, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:674:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 89);
		TraceIn("prefix_expr_op", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set521 = default(IToken);

		CommonTree set521_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(674, 71);
		try
		{
			// SugarCpp.g:674:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(674, 15);

			set521=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==91||input.LA(1)==95||(input.LA(1)>=97 && input.LA(1)<=98)||(input.LA(1)>=101 && input.LA(1)<=102)||input.LA(1)==160||input.LA(1)==184)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set521));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 89);
			LeaveRule("prefix_expr_op", 89);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(674, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:675:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 90);
		TraceIn("prefix_expr", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal524 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op522 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array525 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list527 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr528 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal524_tree = default(CommonTree);
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(675, 1);
		try
		{
			// SugarCpp.g:676:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt230=3;
			try { DebugEnterDecision(230, false);
			switch (input.LA(1))
			{
			case 86:
			case 91:
			case 95:
			case 97:
			case 98:
			case 101:
			case 102:
			case 160:
			case 184:
				{
				alt230 = 1;
				}
				break;
			case 159:
				{
				alt230 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 93:
			case 131:
				{
				alt230 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 230, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(230); }
			switch (alt230)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:676:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(676, 4);
				// SugarCpp.g:676:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:676:5: prefix_expr_op prefix_expr
				{
				DebugLocation(676, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr6445);
				prefix_expr_op522=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op522.Tree);
				DebugLocation(676, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr6447);
				prefix_expr523=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr523.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 676:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(676, 36);
					// SugarCpp.g:676:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(676, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(676, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(676, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:677:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(677, 4);
				string_literal524=(IToken)Match(input,159,Follow._159_in_prefix_expr6463); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_159.Add(string_literal524);

				DebugLocation(677, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr6465);
				type_no_array525=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array525.Tree);
				DebugLocation(677, 24);
				// SugarCpp.g:677:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt229=2;
				try { DebugEnterSubRule(229);
				try { DebugEnterDecision(229, false);
				int LA229_0 = input.LA(1);

				if ((LA229_0==93))
				{
					alt229 = 1;
				}
				else if ((LA229_0==132))
				{
					alt229 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 229, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(229); }
				switch (alt229)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:677:26: bracket_expr_list
					{
					DebugLocation(677, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr6469);
					bracket_expr_list526=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list526.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 677:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(677, 47);
						// SugarCpp.g:677:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(677, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(677, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(677, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:678:11: square_expr_list
					{
					DebugLocation(678, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6491);
					square_expr_list527=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list527.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 678:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(678, 31);
						// SugarCpp.g:678:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(678, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(678, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(678, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(229); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:680:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(680, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6516);
				suffix_expr528=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr528.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 90);
			LeaveRule("prefix_expr", 90);
			LeaveRule_prefix_expr();
		}
		DebugLocation(681, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:683:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 91);
		TraceIn("square_expr_list", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal529 = default(IToken);
		IToken char_literal531 = default(IToken);
		IToken char_literal533 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr530 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr532 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal529_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		CommonTree char_literal533_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(683, 1);
		try
		{
			// SugarCpp.g:684:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:684:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(684, 4);
			char_literal529=(IToken)Match(input,132,Follow._132_in_square_expr_list6528); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(char_literal529);

			DebugLocation(684, 8);
			PushFollow(Follow._expr_in_square_expr_list6530);
			expr530=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr530.Tree);
			DebugLocation(684, 13);
			// SugarCpp.g:684:13: ( ',' expr )*
			try { DebugEnterSubRule(231);
			while (true)
			{
				int alt231=2;
				try { DebugEnterDecision(231, false);
				int LA231_0 = input.LA(1);

				if ((LA231_0==100))
				{
					alt231 = 1;
				}


				} finally { DebugExitDecision(231); }
				switch ( alt231 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:684:14: ',' expr
					{
					DebugLocation(684, 14);
					char_literal531=(IToken)Match(input,100,Follow._100_in_square_expr_list6533); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal531);

					DebugLocation(684, 18);
					PushFollow(Follow._expr_in_square_expr_list6535);
					expr532=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr532.Tree);

					}
					break;

				default:
					goto loop231;
				}
			}

			loop231:
				;

			} finally { DebugExitSubRule(231); }

			DebugLocation(684, 25);
			char_literal533=(IToken)Match(input,133,Follow._133_in_square_expr_list6539); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_133.Add(char_literal533);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 684:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(684, 32);
				// SugarCpp.g:684:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(684, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(684, 44);
				// SugarCpp.g:684:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(684, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 91);
			LeaveRule("square_expr_list", 91);
			LeaveRule_square_expr_list();
		}
		DebugLocation(685, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:687:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 92);
		TraceIn("bracket_expr_list", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal534 = default(IToken);
		IToken char_literal536 = default(IToken);
		IToken char_literal538 = default(IToken);
		IToken NEWLINE539 = default(IToken);
		IToken INDENT540 = default(IToken);
		IToken NEWLINE541 = default(IToken);
		IToken char_literal543 = default(IToken);
		IToken NEWLINE544 = default(IToken);
		IToken NEWLINE546 = default(IToken);
		IToken char_literal547 = default(IToken);
		IToken NEWLINE548 = default(IToken);
		IToken DEDENT549 = default(IToken);
		IToken DEDENT550 = default(IToken);
		IToken NEWLINE551 = default(IToken);
		IToken char_literal552 = default(IToken);
		IToken char_literal554 = default(IToken);
		IToken NEWLINE555 = default(IToken);
		IToken char_literal557 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr537 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr545 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr553 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr556 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal534_tree = default(CommonTree);
		CommonTree char_literal536_tree = default(CommonTree);
		CommonTree char_literal538_tree = default(CommonTree);
		CommonTree NEWLINE539_tree = default(CommonTree);
		CommonTree INDENT540_tree = default(CommonTree);
		CommonTree NEWLINE541_tree = default(CommonTree);
		CommonTree char_literal543_tree = default(CommonTree);
		CommonTree NEWLINE544_tree = default(CommonTree);
		CommonTree NEWLINE546_tree = default(CommonTree);
		CommonTree char_literal547_tree = default(CommonTree);
		CommonTree NEWLINE548_tree = default(CommonTree);
		CommonTree DEDENT549_tree = default(CommonTree);
		CommonTree DEDENT550_tree = default(CommonTree);
		CommonTree NEWLINE551_tree = default(CommonTree);
		CommonTree char_literal552_tree = default(CommonTree);
		CommonTree char_literal554_tree = default(CommonTree);
		CommonTree NEWLINE555_tree = default(CommonTree);
		CommonTree char_literal557_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(687, 1);
		try
		{
			// SugarCpp.g:688:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:688:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(688, 4);
			char_literal534=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6559); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal534);

			DebugLocation(688, 8);
			// SugarCpp.g:688:8: ( expr ( ',' expr )* )?
			int alt233=2;
			try { DebugEnterSubRule(233);
			try { DebugEnterDecision(233, false);
			int LA233_0 = input.LA(1);

			if ((LA233_0==IDENT||LA233_0==NUMBER||LA233_0==STRING||LA233_0==86||LA233_0==91||LA233_0==93||LA233_0==95||(LA233_0>=97 && LA233_0<=98)||(LA233_0>=101 && LA233_0<=102)||(LA233_0>=131 && LA233_0<=132)||LA233_0==154||LA233_0==157||(LA233_0>=159 && LA233_0<=160)||LA233_0==184))
			{
				alt233 = 1;
			}
			} finally { DebugExitDecision(233); }
			switch (alt233)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:688:9: expr ( ',' expr )*
				{
				DebugLocation(688, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6562);
				expr535=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr535.Tree);
				DebugLocation(688, 14);
				// SugarCpp.g:688:14: ( ',' expr )*
				try { DebugEnterSubRule(232);
				while (true)
				{
					int alt232=2;
					try { DebugEnterDecision(232, false);
					int LA232_0 = input.LA(1);

					if ((LA232_0==100))
					{
						alt232 = 1;
					}


					} finally { DebugExitDecision(232); }
					switch ( alt232 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:688:15: ',' expr
						{
						DebugLocation(688, 15);
						char_literal536=(IToken)Match(input,100,Follow._100_in_bracket_expr_list6565); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal536);

						DebugLocation(688, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6567);
						expr537=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr537.Tree);

						}
						break;

					default:
						goto loop232;
					}
				}

				loop232:
					;

				} finally { DebugExitSubRule(232); }


				}
				break;

			}
			} finally { DebugExitSubRule(233); }

			DebugLocation(688, 28);
			// SugarCpp.g:688:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt246=2;
			try { DebugEnterSubRule(246);
			try { DebugEnterDecision(246, false);
			int LA246_0 = input.LA(1);

			if ((LA246_0==94))
			{
				alt246 = 1;
			}
			else if ((LA246_0==NEWLINE))
			{
				alt246 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 246, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(246); }
			switch (alt246)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:688:30: ')'
				{
				DebugLocation(688, 30);
				char_literal538=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6575); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal538);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 688:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(688, 37);
					// SugarCpp.g:688:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(688, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(688, 49);
					// SugarCpp.g:688:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(688, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:689:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(689, 12);
				// SugarCpp.g:689:12: ( NEWLINE )+
				int cnt234=0;
				try { DebugEnterSubRule(234);
				while (true)
				{
					int alt234=2;
					try { DebugEnterDecision(234, false);
					int LA234_0 = input.LA(1);

					if ((LA234_0==NEWLINE))
					{
						alt234 = 1;
					}


					} finally { DebugExitDecision(234); }
					switch (alt234)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:689:12: NEWLINE
						{
						DebugLocation(689, 12);
						NEWLINE539=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6597); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE539);


						}
						break;

					default:
						if (cnt234 >= 1)
							goto loop234;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee234 = new EarlyExitException( 234, input );
						DebugRecognitionException(eee234);
						throw eee234;
					}
					cnt234++;
				}
				loop234:
					;

				} finally { DebugExitSubRule(234); }

				DebugLocation(689, 21);
				// SugarCpp.g:689:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt245=2;
				try { DebugEnterSubRule(245);
				try { DebugEnterDecision(245, false);
				int LA245_0 = input.LA(1);

				if ((LA245_0==INDENT))
				{
					alt245 = 1;
				}
				else if ((LA245_0==IDENT||LA245_0==NUMBER||LA245_0==STRING||LA245_0==86||LA245_0==91||(LA245_0>=93 && LA245_0<=95)||(LA245_0>=97 && LA245_0<=98)||(LA245_0>=101 && LA245_0<=102)||(LA245_0>=131 && LA245_0<=132)||LA245_0==154||LA245_0==157||(LA245_0>=159 && LA245_0<=160)||LA245_0==184))
				{
					alt245 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(245); }
				switch (alt245)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:689:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(689, 23);
					INDENT540=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6602); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT540);

					DebugLocation(689, 30);
					// SugarCpp.g:689:30: ( NEWLINE )*
					try { DebugEnterSubRule(235);
					while (true)
					{
						int alt235=2;
						try { DebugEnterDecision(235, false);
						int LA235_0 = input.LA(1);

						if ((LA235_0==NEWLINE))
						{
							alt235 = 1;
						}


						} finally { DebugExitDecision(235); }
						switch ( alt235 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:689:30: NEWLINE
							{
							DebugLocation(689, 30);
							NEWLINE541=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6604); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE541);


							}
							break;

						default:
							goto loop235;
						}
					}

					loop235:
						;

					} finally { DebugExitSubRule(235); }

					DebugLocation(689, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6607);
					expr542=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr542.Tree);
					DebugLocation(689, 44);
					// SugarCpp.g:689:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(237);
					while (true)
					{
						int alt237=2;
						try { DebugEnterDecision(237, false);
						try
						{
							alt237 = dfa237.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(237); }
						switch ( alt237 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:689:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(689, 45);
							// SugarCpp.g:689:45: ( ',' | NEWLINE )+
							int cnt236=0;
							try { DebugEnterSubRule(236);
							while (true)
							{
								int alt236=3;
								try { DebugEnterDecision(236, false);
								int LA236_0 = input.LA(1);

								if ((LA236_0==100))
								{
									alt236 = 1;
								}
								else if ((LA236_0==NEWLINE))
								{
									alt236 = 2;
								}


								} finally { DebugExitDecision(236); }
								switch (alt236)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:689:46: ','
									{
									DebugLocation(689, 46);
									char_literal543=(IToken)Match(input,100,Follow._100_in_bracket_expr_list6611); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_100.Add(char_literal543);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:689:52: NEWLINE
									{
									DebugLocation(689, 52);
									NEWLINE544=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6615); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE544);


									}
									break;

								default:
									if (cnt236 >= 1)
										goto loop236;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee236 = new EarlyExitException( 236, input );
									DebugRecognitionException(eee236);
									throw eee236;
								}
								cnt236++;
							}
							loop236:
								;

							} finally { DebugExitSubRule(236); }

							DebugLocation(689, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6619);
							expr545=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr545.Tree);

							}
							break;

						default:
							goto loop237;
						}
					}

					loop237:
						;

					} finally { DebugExitSubRule(237); }

					DebugLocation(689, 69);
					// SugarCpp.g:689:69: ( NEWLINE )*
					try { DebugEnterSubRule(238);
					while (true)
					{
						int alt238=2;
						try { DebugEnterDecision(238, false);
						int LA238_0 = input.LA(1);

						if ((LA238_0==NEWLINE))
						{
							alt238 = 1;
						}


						} finally { DebugExitDecision(238); }
						switch ( alt238 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:689:69: NEWLINE
							{
							DebugLocation(689, 69);
							NEWLINE546=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6623); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE546);


							}
							break;

						default:
							goto loop238;
						}
					}

					loop238:
						;

					} finally { DebugExitSubRule(238); }

					DebugLocation(689, 78);
					// SugarCpp.g:689:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt241=2;
					try { DebugEnterSubRule(241);
					try { DebugEnterDecision(241, false);
					int LA241_0 = input.LA(1);

					if ((LA241_0==94))
					{
						alt241 = 1;
					}
					else if ((LA241_0==DEDENT))
					{
						alt241 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(241); }
					switch (alt241)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:689:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(689, 80);
						char_literal547=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6628); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal547);

						DebugLocation(689, 84);
						// SugarCpp.g:689:84: ( NEWLINE )*
						try { DebugEnterSubRule(239);
						while (true)
						{
							int alt239=2;
							try { DebugEnterDecision(239, false);
							int LA239_0 = input.LA(1);

							if ((LA239_0==NEWLINE))
							{
								alt239 = 1;
							}


							} finally { DebugExitDecision(239); }
							switch ( alt239 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:689:84: NEWLINE
								{
								DebugLocation(689, 84);
								NEWLINE548=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6630); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE548);


								}
								break;

							default:
								goto loop239;
							}
						}

						loop239:
							;

						} finally { DebugExitSubRule(239); }

						DebugLocation(689, 93);
						DEDENT549=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6633); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT549);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:689:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(689, 102);
						DEDENT550=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6637); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT550);

						DebugLocation(689, 109);
						// SugarCpp.g:689:109: ( NEWLINE )*
						try { DebugEnterSubRule(240);
						while (true)
						{
							int alt240=2;
							try { DebugEnterDecision(240, false);
							int LA240_0 = input.LA(1);

							if ((LA240_0==NEWLINE))
							{
								alt240 = 1;
							}


							} finally { DebugExitDecision(240); }
							switch ( alt240 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:689:109: NEWLINE
								{
								DebugLocation(689, 109);
								NEWLINE551=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6639); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE551);


								}
								break;

							default:
								goto loop240;
							}
						}

						loop240:
							;

						} finally { DebugExitSubRule(240); }

						DebugLocation(689, 118);
						char_literal552=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6642); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal552);


						}
						break;

					}
					} finally { DebugExitSubRule(241); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 689:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(689, 127);
						// SugarCpp.g:689:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(689, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(689, 139);
						// SugarCpp.g:689:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(689, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:690:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(690, 14);
					// SugarCpp.g:690:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt244=2;
					try { DebugEnterSubRule(244);
					try { DebugEnterDecision(244, false);
					int LA244_0 = input.LA(1);

					if ((LA244_0==IDENT||LA244_0==NUMBER||LA244_0==STRING||LA244_0==86||LA244_0==91||LA244_0==93||LA244_0==95||(LA244_0>=97 && LA244_0<=98)||(LA244_0>=101 && LA244_0<=102)||(LA244_0>=131 && LA244_0<=132)||LA244_0==154||LA244_0==157||(LA244_0>=159 && LA244_0<=160)||LA244_0==184))
					{
						alt244 = 1;
					}
					} finally { DebugExitDecision(244); }
					switch (alt244)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:690:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(690, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6669);
						expr553=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr553.Tree);
						DebugLocation(690, 20);
						// SugarCpp.g:690:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(243);
						while (true)
						{
							int alt243=2;
							try { DebugEnterDecision(243, false);
							int LA243_0 = input.LA(1);

							if ((LA243_0==NEWLINE||LA243_0==100))
							{
								alt243 = 1;
							}


							} finally { DebugExitDecision(243); }
							switch ( alt243 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:690:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(690, 21);
								// SugarCpp.g:690:21: ( ',' | NEWLINE )+
								int cnt242=0;
								try { DebugEnterSubRule(242);
								while (true)
								{
									int alt242=3;
									try { DebugEnterDecision(242, false);
									int LA242_0 = input.LA(1);

									if ((LA242_0==100))
									{
										alt242 = 1;
									}
									else if ((LA242_0==NEWLINE))
									{
										alt242 = 2;
									}


									} finally { DebugExitDecision(242); }
									switch (alt242)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:690:22: ','
										{
										DebugLocation(690, 22);
										char_literal554=(IToken)Match(input,100,Follow._100_in_bracket_expr_list6673); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_100.Add(char_literal554);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:690:28: NEWLINE
										{
										DebugLocation(690, 28);
										NEWLINE555=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6677); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE555);


										}
										break;

									default:
										if (cnt242 >= 1)
											goto loop242;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee242 = new EarlyExitException( 242, input );
										DebugRecognitionException(eee242);
										throw eee242;
									}
									cnt242++;
								}
								loop242:
									;

								} finally { DebugExitSubRule(242); }

								DebugLocation(690, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6681);
								expr556=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr556.Tree);

								}
								break;

							default:
								goto loop243;
							}
						}

						loop243:
							;

						} finally { DebugExitSubRule(243); }


						}
						break;

					}
					} finally { DebugExitSubRule(244); }

					DebugLocation(690, 47);
					char_literal557=(IToken)Match(input,94,Follow._94_in_bracket_expr_list6687); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal557);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 690:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(690, 54);
						// SugarCpp.g:690:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(690, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(690, 66);
						// SugarCpp.g:690:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(690, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(245); }


				}
				break;

			}
			} finally { DebugExitSubRule(246); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 92);
			LeaveRule("bracket_expr_list", 92);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(693, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:695:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 93);
		TraceIn("suffix_expr", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal558 = default(IToken);
		IToken string_literal559 = default(IToken);
		IToken char_literal560 = default(IToken);
		IToken string_literal562 = default(IToken);
		IToken char_literal566 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident563 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list564 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list565 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident567 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list568 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal558_tree = default(CommonTree);
		CommonTree string_literal559_tree = default(CommonTree);
		CommonTree char_literal560_tree = default(CommonTree);
		CommonTree string_literal562_tree = default(CommonTree);
		CommonTree char_literal566_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(695, 1);
		try
		{
			// SugarCpp.g:696:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:696:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(696, 4);
			// SugarCpp.g:696:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:696:5: a= atom_expr
			{
			DebugLocation(696, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6734);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 696:17: -> $a
			{
				DebugLocation(696, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(696, 24);
			// SugarCpp.g:696:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(247);
			while (true)
			{
				int alt247=8;
				try { DebugEnterDecision(247, false);
				switch (input.LA(1))
				{
				case 98:
					{
					alt247 = 1;
					}
					break;
				case 102:
					{
					alt247 = 2;
					}
					break;
				case 107:
					{
					alt247 = 3;
					}
					break;
				case 105:
					{
					alt247 = 4;
					}
					break;
				case 93:
					{
					alt247 = 5;
					}
					break;
				case 132:
					{
					alt247 = 6;
					}
					break;
				case 131:
					{
					alt247 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(247); }
				switch ( alt247 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:696:26: '++'
					{
					DebugLocation(696, 26);
					string_literal558=(IToken)Match(input,98,Follow._98_in_suffix_expr6744); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(string_literal558);



					{
					// AST REWRITE
					// elements: 98, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 696:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(696, 34);
						// SugarCpp.g:696:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(696, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(696, 48);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(696, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:697:14: '--'
					{
					DebugLocation(697, 14);
					string_literal559=(IToken)Match(input,102,Follow._102_in_suffix_expr6770); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal559);



					{
					// AST REWRITE
					// elements: suffix_expr, 102
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 697:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(697, 22);
						// SugarCpp.g:697:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(697, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(697, 36);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(697, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:698:11: '.' ident
					{
					DebugLocation(698, 11);
					char_literal560=(IToken)Match(input,107,Follow._107_in_suffix_expr6793); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal560);

					DebugLocation(698, 15);
					PushFollow(Follow._ident_in_suffix_expr6795);
					ident561=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident561.Tree);


					{
					// AST REWRITE
					// elements: 107, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 698:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(698, 24);
						// SugarCpp.g:698:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(698, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(698, 38);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(698, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(698, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:699:11: '->' ident
					{
					DebugLocation(699, 11);
					string_literal562=(IToken)Match(input,105,Follow._105_in_suffix_expr6820); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal562);

					DebugLocation(699, 16);
					PushFollow(Follow._ident_in_suffix_expr6822);
					ident563=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident563.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 105
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 699:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(699, 25);
						// SugarCpp.g:699:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(699, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(699, 39);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(699, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(699, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:700:11: bracket_expr_list
					{
					DebugLocation(700, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6847);
					bracket_expr_list564=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list564.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 700:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(700, 32);
						// SugarCpp.g:700:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(700, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(700, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(700, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:701:11: square_expr_list
					{
					DebugLocation(701, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6870);
					square_expr_list565=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list565.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 701:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(701, 31);
						// SugarCpp.g:701:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(701, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(701, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(701, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:702:11: '@' ident bracket_expr_list
					{
					DebugLocation(702, 11);
					char_literal566=(IToken)Match(input,131,Follow._131_in_suffix_expr6893); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal566);

					DebugLocation(702, 15);
					PushFollow(Follow._ident_in_suffix_expr6895);
					ident567=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident567.Tree);
					DebugLocation(702, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6897);
					bracket_expr_list568=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list568.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 702:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(702, 42);
						// SugarCpp.g:702:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(702, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(702, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(702, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(702, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop247;
				}
			}

			loop247:
				;

			} finally { DebugExitSubRule(247); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 93);
			LeaveRule("suffix_expr", 93);
			LeaveRule_suffix_expr();
		}
		DebugLocation(704, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:706:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 94);
		TraceIn("atom_expr", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER569 = default(IToken);
		IToken STRING571 = default(IToken);
		IToken char_literal572 = default(IToken);
		IToken char_literal574 = default(IToken);
		IToken char_literal575 = default(IToken);
		IToken char_literal577 = default(IToken);
		IToken char_literal578 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident570 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident573 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr576 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER569_tree = default(CommonTree);
		CommonTree STRING571_tree = default(CommonTree);
		CommonTree char_literal572_tree = default(CommonTree);
		CommonTree char_literal574_tree = default(CommonTree);
		CommonTree char_literal575_tree = default(CommonTree);
		CommonTree char_literal577_tree = default(CommonTree);
		CommonTree char_literal578_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(706, 1);
		try
		{
			// SugarCpp.g:707:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt250=5;
			try { DebugEnterDecision(250, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt250 = 1;
				}
				break;
			case IDENT:
				{
				alt250 = 2;
				}
				break;
			case STRING:
				{
				alt250 = 3;
				}
				break;
			case 131:
				{
				alt250 = 4;
				}
				break;
			case 93:
				{
				alt250 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 250, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(250); }
			switch (alt250)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:707:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(707, 4);
				NUMBER569=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6935); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER569_tree = (CommonTree)adaptor.Create(NUMBER569);
				adaptor.AddChild(root_0, NUMBER569_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:708:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(708, 4);
				PushFollow(Follow._ident_in_atom_expr6940);
				ident570=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident570.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:709:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(709, 4);
				STRING571=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6945); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING571_tree = (CommonTree)adaptor.Create(STRING571);
				adaptor.AddChild(root_0, STRING571_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:710:4: '@' ident
				{
				DebugLocation(710, 4);
				char_literal572=(IToken)Match(input,131,Follow._131_in_atom_expr6950); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal572);

				DebugLocation(710, 8);
				PushFollow(Follow._ident_in_atom_expr6952);
				ident573=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident573.Tree);


				{
				// AST REWRITE
				// elements: 131, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 710:14: -> ^( '@' ident )
				{
					DebugLocation(710, 17);
					// SugarCpp.g:710:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(710, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

					DebugLocation(710, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:711:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(711, 4);
				char_literal574=(IToken)Match(input,93,Follow._93_in_atom_expr6965); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal574);

				DebugLocation(711, 9);
				PushFollow(Follow._expr_in_atom_expr6969);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(711, 15);
				// SugarCpp.g:711:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt249=2;
				try { DebugEnterSubRule(249);
				try { DebugEnterDecision(249, false);
				int LA249_0 = input.LA(1);

				if ((LA249_0==100))
				{
					alt249 = 1;
				}
				else if ((LA249_0==94))
				{
					alt249 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 249, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(249); }
				switch (alt249)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:711:17: ( ',' expr )+ ')'
					{
					DebugLocation(711, 17);
					// SugarCpp.g:711:17: ( ',' expr )+
					int cnt248=0;
					try { DebugEnterSubRule(248);
					while (true)
					{
						int alt248=2;
						try { DebugEnterDecision(248, false);
						int LA248_0 = input.LA(1);

						if ((LA248_0==100))
						{
							alt248 = 1;
						}


						} finally { DebugExitDecision(248); }
						switch (alt248)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:711:18: ',' expr
							{
							DebugLocation(711, 18);
							char_literal575=(IToken)Match(input,100,Follow._100_in_atom_expr6974); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_100.Add(char_literal575);

							DebugLocation(711, 22);
							PushFollow(Follow._expr_in_atom_expr6976);
							expr576=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr576.Tree);

							}
							break;

						default:
							if (cnt248 >= 1)
								goto loop248;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee248 = new EarlyExitException( 248, input );
							DebugRecognitionException(eee248);
							throw eee248;
						}
						cnt248++;
					}
					loop248:
						;

					} finally { DebugExitSubRule(248); }

					DebugLocation(711, 29);
					char_literal577=(IToken)Match(input,94,Follow._94_in_atom_expr6980); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal577);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 711:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(711, 36);
						// SugarCpp.g:711:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(711, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(711, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(711, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:712:17: ')' {...}?
					{
					DebugLocation(712, 17);
					char_literal578=(IToken)Match(input,94,Follow._94_in_atom_expr7007); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal578);

					DebugLocation(712, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 712:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(712, 40);
						// SugarCpp.g:712:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(712, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(712, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(249); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 94);
			LeaveRule("atom_expr", 94);
			LeaveRule_atom_expr();
		}
		DebugLocation(714, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:716:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 95);
		TraceIn("lvalue_item", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix579 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(716, 1);
		try
		{
			// SugarCpp.g:717:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:717:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(717, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item7038);
			lvalue_prefix579=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix579.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 95);
			LeaveRule("lvalue_item", 95);
			LeaveRule_lvalue_item();
		}
		DebugLocation(718, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:720:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 96);
		TraceIn("lvalue_prefix", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op580 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix581 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix582 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(720, 1);
		try
		{
			// SugarCpp.g:721:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt251=2;
			try { DebugEnterDecision(251, false);
			int LA251_0 = input.LA(1);

			if ((LA251_0==86||LA251_0==91||LA251_0==95||(LA251_0>=97 && LA251_0<=98)||(LA251_0>=101 && LA251_0<=102)||LA251_0==160||LA251_0==184))
			{
				alt251 = 1;
			}
			else if ((LA251_0==IDENT||LA251_0==131))
			{
				alt251 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 251, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(251); }
			switch (alt251)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:721:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(721, 4);
				// SugarCpp.g:721:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:721:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(721, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix7050);
				prefix_expr_op580=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op580.Tree);
				DebugLocation(721, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix7052);
				lvalue_prefix581=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix581.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 721:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(721, 38);
					// SugarCpp.g:721:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(721, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(721, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(721, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:722:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(722, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix7068);
				lvalue_suffix582=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix582.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 96);
			LeaveRule("lvalue_prefix", 96);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(723, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:725:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 97);
		TraceIn("lvalue_suffix", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal583 = default(IToken);
		IToken string_literal584 = default(IToken);
		IToken char_literal585 = default(IToken);
		IToken string_literal587 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident586 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident588 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter589 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list590 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list591 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal583_tree = default(CommonTree);
		CommonTree string_literal584_tree = default(CommonTree);
		CommonTree char_literal585_tree = default(CommonTree);
		CommonTree string_literal587_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(725, 1);
		try
		{
			// SugarCpp.g:726:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:726:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(726, 4);
			// SugarCpp.g:726:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:726:5: a= lvalue_atom
			{
			DebugLocation(726, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix7082);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 726:19: -> $a
			{
				DebugLocation(726, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(726, 26);
			// SugarCpp.g:726:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(253);
			while (true)
			{
				int alt253=7;
				try { DebugEnterDecision(253, false);
				switch (input.LA(1))
				{
				case 98:
					{
					alt253 = 1;
					}
					break;
				case 102:
					{
					alt253 = 2;
					}
					break;
				case 107:
					{
					alt253 = 3;
					}
					break;
				case 105:
					{
					alt253 = 4;
					}
					break;
				case 93:
				case 115:
					{
					alt253 = 5;
					}
					break;
				case 132:
					{
					alt253 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(253); }
				switch ( alt253 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:726:28: '++'
					{
					DebugLocation(726, 28);
					string_literal583=(IToken)Match(input,98,Follow._98_in_lvalue_suffix7092); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(string_literal583);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 98
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 726:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(726, 36);
						// SugarCpp.g:726:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(726, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(726, 50);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(726, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:727:16: '--'
					{
					DebugLocation(727, 16);
					string_literal584=(IToken)Match(input,102,Follow._102_in_lvalue_suffix7120); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal584);



					{
					// AST REWRITE
					// elements: 102, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 727:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(727, 24);
						// SugarCpp.g:727:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(727, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(727, 38);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(727, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:728:13: '.' ident
					{
					DebugLocation(728, 13);
					char_literal585=(IToken)Match(input,107,Follow._107_in_lvalue_suffix7145); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal585);

					DebugLocation(728, 17);
					PushFollow(Follow._ident_in_lvalue_suffix7147);
					ident586=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident586.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 107, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 728:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(728, 26);
						// SugarCpp.g:728:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(728, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(728, 40);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(728, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(728, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:729:13: '->' ident
					{
					DebugLocation(729, 13);
					string_literal587=(IToken)Match(input,105,Follow._105_in_lvalue_suffix7174); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal587);

					DebugLocation(729, 18);
					PushFollow(Follow._ident_in_lvalue_suffix7176);
					ident588=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident588.Tree);


					{
					// AST REWRITE
					// elements: 105, ident, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 729:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(729, 27);
						// SugarCpp.g:729:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(729, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(729, 41);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(729, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(729, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:730:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(730, 13);
					// SugarCpp.g:730:13: ( generic_parameter )?
					int alt252=2;
					try { DebugEnterSubRule(252);
					try { DebugEnterDecision(252, false);
					int LA252_0 = input.LA(1);

					if ((LA252_0==115))
					{
						alt252 = 1;
					}
					} finally { DebugExitDecision(252); }
					switch (alt252)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:730:13: generic_parameter
						{
						DebugLocation(730, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix7203);
						generic_parameter589=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter589.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(252); }

					DebugLocation(730, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix7206);
					bracket_expr_list590=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list590.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, generic_parameter, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 730:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(730, 53);
						// SugarCpp.g:730:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(730, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(730, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(730, 80);
						// SugarCpp.g:730:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(730, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(730, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:731:13: square_expr_list
					{
					DebugLocation(731, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix7234);
					square_expr_list591=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list591.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 731:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(731, 33);
						// SugarCpp.g:731:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(731, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(731, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(731, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop253;
				}
			}

			loop253:
				;

			} finally { DebugExitSubRule(253); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 97);
			LeaveRule("lvalue_suffix", 97);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(733, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:735:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 98);
		TraceIn("lvalue_atom", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal593 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident592 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident594 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal593_tree = default(CommonTree);
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(735, 1);
		try
		{
			// SugarCpp.g:736:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt254=2;
			try { DebugEnterDecision(254, false);
			int LA254_0 = input.LA(1);

			if ((LA254_0==IDENT))
			{
				alt254 = 1;
			}
			else if ((LA254_0==131))
			{
				alt254 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 254, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(254); }
			switch (alt254)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:736:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(736, 4);
				PushFollow(Follow._ident_in_lvalue_atom7272);
				ident592=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident592.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:737:4: '@' ident
				{
				DebugLocation(737, 4);
				char_literal593=(IToken)Match(input,131,Follow._131_in_lvalue_atom7277); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal593);

				DebugLocation(737, 8);
				PushFollow(Follow._ident_in_lvalue_atom7279);
				ident594=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident594.Tree);


				{
				// AST REWRITE
				// elements: 131, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 737:14: -> ^( '@' ident )
				{
					DebugLocation(737, 17);
					// SugarCpp.g:737:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(737, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_131.NextNode(), root_1);

					DebugLocation(737, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 98);
			LeaveRule("lvalue_atom", 98);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(738, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:740:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 99);
		TraceIn("lvalue", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal595 = default(IToken);
		IToken char_literal597 = default(IToken);
		IToken char_literal599 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item596 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item598 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item600 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal595_tree = default(CommonTree);
		CommonTree char_literal597_tree = default(CommonTree);
		CommonTree char_literal599_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(740, 1);
		try
		{
			// SugarCpp.g:741:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt256=2;
			try { DebugEnterDecision(256, false);
			int LA256_0 = input.LA(1);

			if ((LA256_0==93))
			{
				alt256 = 1;
			}
			else if ((LA256_0==IDENT||LA256_0==86||LA256_0==91||LA256_0==95||(LA256_0>=97 && LA256_0<=98)||(LA256_0>=101 && LA256_0<=102)||LA256_0==131||LA256_0==160||LA256_0==184))
			{
				alt256 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 256, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(256); }
			switch (alt256)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:741:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(741, 4);
				char_literal595=(IToken)Match(input,93,Follow._93_in_lvalue7298); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal595);

				DebugLocation(741, 8);
				PushFollow(Follow._lvalue_item_in_lvalue7300);
				lvalue_item596=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item596.Tree);
				DebugLocation(741, 20);
				// SugarCpp.g:741:20: ( ',' lvalue_item )+
				int cnt255=0;
				try { DebugEnterSubRule(255);
				while (true)
				{
					int alt255=2;
					try { DebugEnterDecision(255, false);
					int LA255_0 = input.LA(1);

					if ((LA255_0==100))
					{
						alt255 = 1;
					}


					} finally { DebugExitDecision(255); }
					switch (alt255)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:741:21: ',' lvalue_item
						{
						DebugLocation(741, 21);
						char_literal597=(IToken)Match(input,100,Follow._100_in_lvalue7303); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_100.Add(char_literal597);

						DebugLocation(741, 25);
						PushFollow(Follow._lvalue_item_in_lvalue7305);
						lvalue_item598=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item598.Tree);

						}
						break;

					default:
						if (cnt255 >= 1)
							goto loop255;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee255 = new EarlyExitException( 255, input );
						DebugRecognitionException(eee255);
						throw eee255;
					}
					cnt255++;
				}
				loop255:
					;

				} finally { DebugExitSubRule(255); }

				DebugLocation(741, 39);
				char_literal599=(IToken)Match(input,94,Follow._94_in_lvalue7309); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_94.Add(char_literal599);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 741:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(741, 46);
					// SugarCpp.g:741:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(741, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(741, 60);
					// SugarCpp.g:741:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(741, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:742:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(742, 4);
				PushFollow(Follow._lvalue_item_in_lvalue7323);
				lvalue_item600=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item600.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 99);
			LeaveRule("lvalue", 99);
			LeaveRule_lvalue();
		}
		DebugLocation(743, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:745:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 100);
		TraceIn("ident", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT601 = default(IToken);
		IToken string_literal602 = default(IToken);
		IToken IDENT603 = default(IToken);

		CommonTree IDENT601_tree = default(CommonTree);
		CommonTree string_literal602_tree = default(CommonTree);
		CommonTree IDENT603_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(745, 1);
		try
		{
			// SugarCpp.g:746:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:746:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(746, 4);
			IDENT601=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7334); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT601_tree = (CommonTree)adaptor.Create(IDENT601);
			adaptor.AddChild(root_0, IDENT601_tree);
			}
			DebugLocation(746, 10);
			// SugarCpp.g:746:10: ( '::' IDENT )*
			try { DebugEnterSubRule(257);
			while (true)
			{
				int alt257=2;
				try { DebugEnterDecision(257, false);
				int LA257_0 = input.LA(1);

				if ((LA257_0==112))
				{
					alt257 = 1;
				}


				} finally { DebugExitDecision(257); }
				switch ( alt257 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:746:11: '::' IDENT
					{
					DebugLocation(746, 11);
					string_literal602=(IToken)Match(input,112,Follow._112_in_ident7337); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal602_tree = (CommonTree)adaptor.Create(string_literal602);
					adaptor.AddChild(root_0, string_literal602_tree);
					}
					DebugLocation(746, 16);
					IDENT603=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7339); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT603_tree = (CommonTree)adaptor.Create(IDENT603);
					adaptor.AddChild(root_0, IDENT603_tree);
					}

					}
					break;

				default:
					goto loop257;
				}
			}

			loop257:
				;

			} finally { DebugExitSubRule(257); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 100);
			LeaveRule("ident", 100);
			LeaveRule_ident();
		}
		DebugLocation(747, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:749:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 101);
		TraceIn("infix_func", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal604 = default(IToken);
		IToken char_literal606 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident605 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal604_tree = default(CommonTree);
		CommonTree char_literal606_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(749, 1);
		try
		{
			// SugarCpp.g:750:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:750:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(750, 7);
			char_literal604=(IToken)Match(input,136,Follow._136_in_infix_func7352); if (state.failed) return retval;
			DebugLocation(750, 9);
			PushFollow(Follow._ident_in_infix_func7355);
			ident605=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident605.Tree);
			DebugLocation(750, 18);
			char_literal606=(IToken)Match(input,136,Follow._136_in_infix_func7357); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 101);
			LeaveRule("infix_func", 101);
			LeaveRule_infix_func();
		}
		DebugLocation(751, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 102);
		TraceIn("synpred1_SugarCpp_fragment", 102);
		try
		{
			// SugarCpp.g:561:4: ( modify_expr ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:561:5: modify_expr ( '<|' | '|>' )
			{
			DebugLocation(561, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp4667);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(561, 17);
			if (input.LA(1)==120||input.LA(1)==182)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 102);
			LeaveRule("synpred1_SugarCpp_fragment", 102);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 103);
		TraceIn("synpred2_SugarCpp_fragment", 103);
		try
		{
			// SugarCpp.g:568:4: ( '[' feed_expr 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:568:5: '[' feed_expr 'for'
			{
			DebugLocation(568, 5);
			Match(input,132,Follow._132_in_synpred2_SugarCpp4781); if (state.failed) return;
			DebugLocation(568, 9);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp4783);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(568, 19);
			Match(input,148,Follow._148_in_synpred2_SugarCpp4785); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 103);
			LeaveRule("synpred2_SugarCpp_fragment", 103);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 104);
		TraceIn("synpred3_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:632:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )
			DebugEnterAlt(1);
			// SugarCpp.g:632:28: '<' ident ( ',' ident )* '>' bracket_expr_list
			{
			DebugLocation(632, 28);
			Match(input,115,Follow._115_in_synpred3_SugarCpp5737); if (state.failed) return;
			DebugLocation(632, 32);
			PushFollow(Follow._ident_in_synpred3_SugarCpp5739);
			ident();
			PopFollow();
			if (state.failed) return;
			DebugLocation(632, 38);
			// SugarCpp.g:632:38: ( ',' ident )*
			try { DebugEnterSubRule(258);
			while (true)
			{
				int alt258=2;
				try { DebugEnterDecision(258, false);
				int LA258_0 = input.LA(1);

				if ((LA258_0==100))
				{
					alt258 = 1;
				}


				} finally { DebugExitDecision(258); }
				switch ( alt258 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:632:39: ',' ident
					{
					DebugLocation(632, 39);
					Match(input,100,Follow._100_in_synpred3_SugarCpp5742); if (state.failed) return;
					DebugLocation(632, 43);
					PushFollow(Follow._ident_in_synpred3_SugarCpp5744);
					ident();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop258;
				}
			}

			loop258:
				;

			} finally { DebugExitSubRule(258); }

			DebugLocation(632, 51);
			Match(input,125,Follow._125_in_synpred3_SugarCpp5748); if (state.failed) return;
			DebugLocation(632, 55);
			PushFollow(Follow._bracket_expr_list_in_synpred3_SugarCpp5750);
			bracket_expr_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 104);
			LeaveRule("synpred3_SugarCpp_fragment", 104);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp

	partial void EnterRule_synpred4_SugarCpp_fragment();
	partial void LeaveRule_synpred4_SugarCpp_fragment();

	// $ANTLR start synpred4_SugarCpp
	public void synpred4_SugarCpp_fragment()
	{
		EnterRule_synpred4_SugarCpp_fragment();
		EnterRule("synpred4_SugarCpp_fragment", 105);
		TraceIn("synpred4_SugarCpp_fragment", 105);
		try
		{
			// SugarCpp.g:670:4: ( '(' type_name ')' prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:670:5: '(' type_name ')' prefix_expr
			{
			DebugLocation(670, 5);
			Match(input,93,Follow._93_in_synpred4_SugarCpp6363); if (state.failed) return;
			DebugLocation(670, 9);
			PushFollow(Follow._type_name_in_synpred4_SugarCpp6365);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(670, 19);
			Match(input,94,Follow._94_in_synpred4_SugarCpp6367); if (state.failed) return;
			DebugLocation(670, 23);
			PushFollow(Follow._prefix_expr_in_synpred4_SugarCpp6369);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_SugarCpp_fragment", 105);
			LeaveRule("synpred4_SugarCpp_fragment", 105);
			LeaveRule_synpred4_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred4_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA35 dfa35;
	private DFA42 dfa42;
	private DFA52 dfa52;
	private DFA82 dfa82;
	private DFA92 dfa92;
	private DFA104 dfa104;
	private DFA113 dfa113;
	private DFA118 dfa118;
	private DFA132 dfa132;
	private DFA174 dfa174;
	private DFA163 dfa163;
	private DFA199 dfa199;
	private DFA198 dfa198;
	private DFA207 dfa207;
	private DFA237 dfa237;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa35 = new DFA35( this );
		dfa42 = new DFA42( this );
		dfa52 = new DFA52( this );
		dfa82 = new DFA82( this );
		dfa92 = new DFA92( this );
		dfa104 = new DFA104( this );
		dfa113 = new DFA113( this );
		dfa118 = new DFA118( this );
		dfa132 = new DFA132( this );
		dfa174 = new DFA174( this );
		dfa163 = new DFA163( this );
		dfa199 = new DFA199( this );
		dfa198 = new DFA198( this );
		dfa207 = new DFA207( this );
		dfa237 = new DFA237( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xA1\xFFFF";
		private const string DFA4_eofS =
			"\xA1\xFFFF";
		private const string DFA4_minS =
			"\x3\x2F\x1\xFFFF\x1\x2F\x7\xFFFF\x5\x5D\x4\x2F\x1\x38\x5\x2F\x1\x5D\x3"+
			"\x5E\x5\x5D\x1\x2F\xC\x5E\x1\x2F\x1\x64\x8\x2F\x1\x64\x2\x2F\x1\x64\x2"+
			"\x2F\x1\x64\x2\x2F\x1\x64\x1\x2F\x4\x5E\x1\x5D\x1F\x5E\x2\x2F\x1\x64"+
			"\x2\x2F\x1\x64\x2\x2F\x1\x64\x2\x2F\x1\x64\x2\x2F\x1\x64\x5\x2F\x19\x5E"+
			"\x5\x2F\x5\x5E";
		private const string DFA4_maxS =
			"\x1\xB8\x1\xB0\x1\xB8\x1\xFFFF\x1\xB8\x7\xFFFF\x5\x85\x2\x2F\x1\x3E\x1"+
			"\xB0\x1\x38\x4\x3E\x1\xB8\x1\x85\x2\x64\x1\x70\x5\x85\x1\xB8\x2\x64\x1"+
			"\x70\x2\x64\x1\x70\x2\x64\x1\x70\x2\x64\x1\x70\x1\x3E\x1\x85\x2\x2F\x6"+
			"\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1"+
			"\x85\x1\x2F\x2\x64\x2\x70\x1\x85\x2\x64\x1\x70\x2\x64\x1\x70\x2\x64\x1"+
			"\x70\x2\x64\x1\x70\x2\x64\x1\x70\x2\x64\x2\x70\x2\x64\x2\x70\x2\x64\x2"+
			"\x70\x2\x64\x2\x70\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1"+
			"\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x1\x2F\x1\x3E\x1\x85\x5\x2F\x1\x70\x2"+
			"\x64\x2\x70\x2\x64\x2\x70\x2\x64\x2\x70\x2\x64\x2\x70\x2\x64\x6\x70\x5"+
			"\x2F\x5\x70";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x95"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\xA1\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x4\x2D\xFFFF\x1\x3\x26\xFFFF\x1\x1\x7\xFFFF\x1\x5\x1\x3\x3\xFFFF"+
				"\x1\x6\x1\x7\x3\xFFFF\x1\xA\x4\xFFFF\x1\x3\x2\xFFFF\x1\xB\x3\xFFFF\x1"+
				"\x2\x2\xFFFF\x2\x3\x5\xFFFF\x1\x9\x2\xFFFF\x1\x8\x1\x3\x7\xFFFF\x1\x3",
				"\x1\xC\x5D\xFFFF\x1\xD\x14\xFFFF\x1\xF\x2\xFFFF\x1\xE\xA\xFFFF\x1\x10",
				"\x1\x3\x2D\xFFFF\x1\x3\x2E\xFFFF\x1\x5\x1\x3\xD\xFFFF\x1\x3\x9\xFFFF"+
				"\x2\x3\x9\xFFFF\x1\x3\x7\xFFFF\x1\x3",
				"",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x7"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x7\x1\x11\x1\x7\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x33\xFFFF\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x16\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x17\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x18\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x19\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1E\x9\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x1F\x5D\xFFFF\x1\x20\x14\xFFFF\x1\x22\x2\xFFFF\x1\x21\xA\xFFFF"+
				"\x1\x23",
				"\x1\x24",
				"\x1\x27\x9\xFFFF\x1\x25\x4\xFFFF\x1\x26",
				"\x1\x2A\x9\xFFFF\x1\x28\x4\xFFFF\x1\x29",
				"\x1\x2D\x9\xFFFF\x1\x2B\x4\xFFFF\x1\x2C",
				"\x1\x30\x9\xFFFF\x1\x2E\x4\xFFFF\x1\x2F",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x7"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x7\x1\x11\x1\x7\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x33\xFFFF\x1\x3",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x36\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x37\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x38\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x39\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x4\x8\xFFFF\x1\x24\x24\xFFFF\x1\x3\x26\xFFFF\x1\x1\x7\xFFFF\x1"+
				"\x5\x1\x3\x3\xFFFF\x1\x6\x1\x7\x3\xFFFF\x1\xA\x4\xFFFF\x1\x3\x2\xFFFF"+
				"\x1\xB\x3\xFFFF\x1\x2\x2\xFFFF\x2\x3\x5\xFFFF\x1\x9\x2\xFFFF\x1\x8\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x48\x9\xFFFF\x1\x46\x4\xFFFF\x1\x47",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4D\x9\xFFFF\x1\x4B\x4\xFFFF\x1\x4C",
				"\x1\x50\x9\xFFFF\x1\x4E\x4\xFFFF\x1\x4F",
				"\x1\x53\x9\xFFFF\x1\x51\x4\xFFFF\x1\x52",
				"\x1\x56\x9\xFFFF\x1\x54\x4\xFFFF\x1\x55",
				"\x1\x59\x9\xFFFF\x1\x57\x4\xFFFF\x1\x58",
				"\x1\x5C\x9\xFFFF\x1\x5A\x4\xFFFF\x1\x5B",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x5D",
				"\x1\x60\x9\xFFFF\x1\x5E\x4\xFFFF\x1\x5F",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x61",
				"\x1\x64\x9\xFFFF\x1\x62\x4\xFFFF\x1\x63",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x65",
				"\x1\x68\x9\xFFFF\x1\x66\x4\xFFFF\x1\x67",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x69",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x7E",
				"\x1\x81\x9\xFFFF\x1\x7F\x4\xFFFF\x1\x80",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x82",
				"\x1\x85\x9\xFFFF\x1\x83\x4\xFFFF\x1\x84",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x86",
				"\x1\x89\x9\xFFFF\x1\x87\x4\xFFFF\x1\x88",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8A",
				"\x1\x8D\x9\xFFFF\x1\x8B\x4\xFFFF\x1\x8C",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8E",
				"\x1\x91\x9\xFFFF\x1\x8F\x4\xFFFF\x1\x90",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x92",
				"\x1\x93",
				"\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "222:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA35 : DFA
	{
		private const string DFA35_eotS =
			"\x4\xFFFF";
		private const string DFA35_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA35_minS =
			"\x1\x38\x1\x8\x2\xFFFF";
		private const string DFA35_maxS =
			"\x1\x38\x1\xB8\x2\xFFFF";
		private const string DFA35_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA35_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA35_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
		private static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
		private static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
		private static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
		private static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
		private static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
		private static readonly short[][] DFA35_transition;

		static DFA35()
		{
			int numStates = DFA35_transitionS.Length;
			DFA35_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA35_transition[i] = DFA.UnpackEncodedString(DFA35_transitionS[i]);
			}
		}

		public DFA35( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 35;
			this.eot = DFA35_eot;
			this.eof = DFA35_eof;
			this.min = DFA35_min;
			this.max = DFA35_max;
			this.accept = DFA35_accept;
			this.special = DFA35_special;
			this.transition = DFA35_transition;
		}

		public override string Description { get { return "269:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x4\xFFFF";
		private const string DFA42_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA42_minS =
			"\x1\x38\x1\x8\x2\xFFFF";
		private const string DFA42_maxS =
			"\x1\x38\x1\xB8\x2\xFFFF";
		private const string DFA42_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA42_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "277:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA52 : DFA
	{
		private const string DFA52_eotS =
			"\x4\xFFFF";
		private const string DFA52_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA52_minS =
			"\x1\x38\x1\x8\x2\xFFFF";
		private const string DFA52_maxS =
			"\x1\x38\x1\xB8\x2\xFFFF";
		private const string DFA52_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA52_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA52_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA52_eot = DFA.UnpackEncodedString(DFA52_eotS);
		private static readonly short[] DFA52_eof = DFA.UnpackEncodedString(DFA52_eofS);
		private static readonly char[] DFA52_min = DFA.UnpackEncodedStringToUnsignedChars(DFA52_minS);
		private static readonly char[] DFA52_max = DFA.UnpackEncodedStringToUnsignedChars(DFA52_maxS);
		private static readonly short[] DFA52_accept = DFA.UnpackEncodedString(DFA52_acceptS);
		private static readonly short[] DFA52_special = DFA.UnpackEncodedString(DFA52_specialS);
		private static readonly short[][] DFA52_transition;

		static DFA52()
		{
			int numStates = DFA52_transitionS.Length;
			DFA52_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA52_transition[i] = DFA.UnpackEncodedString(DFA52_transitionS[i]);
			}
		}

		public DFA52( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 52;
			this.eot = DFA52_eot;
			this.eof = DFA52_eof;
			this.min = DFA52_min;
			this.max = DFA52_max;
			this.accept = DFA52_accept;
			this.special = DFA52_special;
			this.transition = DFA52_transition;
		}

		public override string Description { get { return "287:99: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA82 : DFA
	{
		private const string DFA82_eotS =
			"\x11\xFFFF";
		private const string DFA82_eofS =
			"\x11\xFFFF";
		private const string DFA82_minS =
			"\x1\x2F\x1\xFFFF\x2\x2F\x1\xFFFF\x4\x2F\x1\x5B\x3\x2F\x2\x5B\x1\x2F\x1"+
			"\x5B";
		private const string DFA82_maxS =
			"\x1\xB8\x1\xFFFF\x1\xB8\x1\xA6\x1\xFFFF\x1\x2F\x1\xA6\x1\x71\x1\xB8\x1"+
			"\x84\x1\x2F\x1\xA6\x1\xB8\x2\x84\x1\x2F\x1\x84";
		private const string DFA82_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA82_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA82_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2F\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1"+
				"\x11\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x33\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x1F\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1F\xFFFF\x1\x1\xF\xFFFF\x1\x1\xD\xFFFF\x1\x1"+
				"\x9\xFFFF\x2\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x7\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x33\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x2F\xFFFF\x1\x1\xD\xFFFF\x1\x1\x9\xFFFF\x2\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x1A\xFFFF\x1\x1\x33\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA82_eot = DFA.UnpackEncodedString(DFA82_eotS);
		private static readonly short[] DFA82_eof = DFA.UnpackEncodedString(DFA82_eofS);
		private static readonly char[] DFA82_min = DFA.UnpackEncodedStringToUnsignedChars(DFA82_minS);
		private static readonly char[] DFA82_max = DFA.UnpackEncodedStringToUnsignedChars(DFA82_maxS);
		private static readonly short[] DFA82_accept = DFA.UnpackEncodedString(DFA82_acceptS);
		private static readonly short[] DFA82_special = DFA.UnpackEncodedString(DFA82_specialS);
		private static readonly short[][] DFA82_transition;

		static DFA82()
		{
			int numStates = DFA82_transitionS.Length;
			DFA82_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA82_transition[i] = DFA.UnpackEncodedString(DFA82_transitionS[i]);
			}
		}

		public DFA82( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 82;
			this.eot = DFA82_eot;
			this.eof = DFA82_eof;
			this.min = DFA82_min;
			this.max = DFA82_max;
			this.accept = DFA82_accept;
			this.special = DFA82_special;
			this.transition = DFA82_transition;
		}

		public override string Description { get { return "366:36: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA92 : DFA
	{
		private const string DFA92_eotS =
			"\x5\xFFFF";
		private const string DFA92_eofS =
			"\x1\xFFFF\x1\x4\x3\xFFFF";
		private const string DFA92_minS =
			"\x1\x38\x1\x8\x3\xFFFF";
		private const string DFA92_maxS =
			"\x1\x79\x1\xB8\x3\xFFFF";
		private const string DFA92_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA92_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA92_transitionS =
			{
				"\x1\x1\x40\xFFFF\x1\x2",
				"\x1\x4\x26\xFFFF\x1\x4\x1\x3\x7\xFFFF\x1\x1\x24\xFFFF\x1\x4\x26\xFFFF"+
				"\x1\x4\x7\xFFFF\x2\x4\x3\xFFFF\x2\x4\x3\xFFFF\x1\x4\x4\xFFFF\x1\x4\x2"+
				"\xFFFF\x1\x4\x3\xFFFF\x1\x4\x2\xFFFF\x2\x4\x5\xFFFF\x1\x4\x2\xFFFF\x2"+
				"\x4\x7\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA92_eot = DFA.UnpackEncodedString(DFA92_eotS);
		private static readonly short[] DFA92_eof = DFA.UnpackEncodedString(DFA92_eofS);
		private static readonly char[] DFA92_min = DFA.UnpackEncodedStringToUnsignedChars(DFA92_minS);
		private static readonly char[] DFA92_max = DFA.UnpackEncodedStringToUnsignedChars(DFA92_maxS);
		private static readonly short[] DFA92_accept = DFA.UnpackEncodedString(DFA92_acceptS);
		private static readonly short[] DFA92_special = DFA.UnpackEncodedString(DFA92_specialS);
		private static readonly short[][] DFA92_transition;

		static DFA92()
		{
			int numStates = DFA92_transitionS.Length;
			DFA92_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA92_transition[i] = DFA.UnpackEncodedString(DFA92_transitionS[i]);
			}
		}

		public DFA92( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 92;
			this.eot = DFA92_eot;
			this.eof = DFA92_eof;
			this.min = DFA92_min;
			this.max = DFA92_max;
			this.accept = DFA92_accept;
			this.special = DFA92_special;
			this.transition = DFA92_transition;
		}

		public override string Description { get { return "366:100: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) | -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? Func_Declare ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA104 : DFA
	{
		private const string DFA104_eotS =
			"\x9\xFFFF";
		private const string DFA104_eofS =
			"\x9\xFFFF";
		private const string DFA104_minS =
			"\x1\x2F\x1\x8\x4\xFFFF\x1\x2F\x1\xFFFF\x1\x8";
		private const string DFA104_maxS =
			"\x1\xB8\x1\xB5\x4\xFFFF\x1\x2F\x1\xFFFF\x1\xB5";
		private const string DFA104_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA104_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA104_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1C\xFFFF\x1\x5\x2\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x4\x2\xFFFF\x1\x3\x8\xFFFF\x1\x5",
				"\x1\x5\x2F\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x15\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2F\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x15\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA104_eot = DFA.UnpackEncodedString(DFA104_eotS);
		private static readonly short[] DFA104_eof = DFA.UnpackEncodedString(DFA104_eofS);
		private static readonly char[] DFA104_min = DFA.UnpackEncodedStringToUnsignedChars(DFA104_minS);
		private static readonly char[] DFA104_max = DFA.UnpackEncodedStringToUnsignedChars(DFA104_maxS);
		private static readonly short[] DFA104_accept = DFA.UnpackEncodedString(DFA104_acceptS);
		private static readonly short[] DFA104_special = DFA.UnpackEncodedString(DFA104_specialS);
		private static readonly short[][] DFA104_transition;

		static DFA104()
		{
			int numStates = DFA104_transitionS.Length;
			DFA104_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA104_transition[i] = DFA.UnpackEncodedString(DFA104_transitionS[i]);
			}
		}

		public DFA104( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 104;
			this.eot = DFA104_eot;
			this.eof = DFA104_eof;
			this.min = DFA104_min;
			this.max = DFA104_max;
			this.accept = DFA104_accept;
			this.special = DFA104_special;
			this.transition = DFA104_transition;
		}

		public override string Description { get { return "410:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA113 : DFA
	{
		private const string DFA113_eotS =
			"\x4\xFFFF";
		private const string DFA113_eofS =
			"\x4\xFFFF";
		private const string DFA113_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA113_maxS =
			"\x1\x97\x1\xB8\x2\xFFFF";
		private const string DFA113_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA113_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA113_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x57\xFFFF\x1\x2\x6\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
		private static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
		private static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
		private static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
		private static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
		private static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
		private static readonly short[][] DFA113_transition;

		static DFA113()
		{
			int numStates = DFA113_transitionS.Length;
			DFA113_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA113_transition[i] = DFA.UnpackEncodedString(DFA113_transitionS[i]);
			}
		}

		public DFA113( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 113;
			this.eot = DFA113_eot;
			this.eof = DFA113_eof;
			this.min = DFA113_min;
			this.max = DFA113_max;
			this.accept = DFA113_accept;
			this.special = DFA113_special;
			this.transition = DFA113_transition;
		}

		public override string Description { get { return "441:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA118 : DFA
	{
		private const string DFA118_eotS =
			"\x4\xFFFF";
		private const string DFA118_eofS =
			"\x4\xFFFF";
		private const string DFA118_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA118_maxS =
			"\x1\x97\x1\xB8\x2\xFFFF";
		private const string DFA118_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA118_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA118_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x57\xFFFF\x1\x2\x6\xFFFF\x1\x3",
				"\x1\x3\x26\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x2\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA118_eot = DFA.UnpackEncodedString(DFA118_eotS);
		private static readonly short[] DFA118_eof = DFA.UnpackEncodedString(DFA118_eofS);
		private static readonly char[] DFA118_min = DFA.UnpackEncodedStringToUnsignedChars(DFA118_minS);
		private static readonly char[] DFA118_max = DFA.UnpackEncodedStringToUnsignedChars(DFA118_maxS);
		private static readonly short[] DFA118_accept = DFA.UnpackEncodedString(DFA118_acceptS);
		private static readonly short[] DFA118_special = DFA.UnpackEncodedString(DFA118_specialS);
		private static readonly short[][] DFA118_transition;

		static DFA118()
		{
			int numStates = DFA118_transitionS.Length;
			DFA118_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA118_transition[i] = DFA.UnpackEncodedString(DFA118_transitionS[i]);
			}
		}

		public DFA118( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 118;
			this.eot = DFA118_eot;
			this.eof = DFA118_eof;
			this.min = DFA118_min;
			this.max = DFA118_max;
			this.accept = DFA118_accept;
			this.special = DFA118_special;
			this.transition = DFA118_transition;
		}

		public override string Description { get { return "444:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA132 : DFA
	{
		private const string DFA132_eotS =
			"\x7\xFFFF";
		private const string DFA132_eofS =
			"\x7\xFFFF";
		private const string DFA132_minS =
			"\x1\x2F\x1\x8\x1\xFFFF\x1\x2F\x2\xFFFF\x1\x8";
		private const string DFA132_maxS =
			"\x1\xB8\x1\xB7\x1\xFFFF\x1\x2F\x2\xFFFF\x1\xB7";
		private const string DFA132_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA132_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA132_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x17\xFFFF\x1\x2",
				"\x1\x2\x2F\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xB\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2F\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xB\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2"
			};

		private static readonly short[] DFA132_eot = DFA.UnpackEncodedString(DFA132_eotS);
		private static readonly short[] DFA132_eof = DFA.UnpackEncodedString(DFA132_eofS);
		private static readonly char[] DFA132_min = DFA.UnpackEncodedStringToUnsignedChars(DFA132_minS);
		private static readonly char[] DFA132_max = DFA.UnpackEncodedStringToUnsignedChars(DFA132_maxS);
		private static readonly short[] DFA132_accept = DFA.UnpackEncodedString(DFA132_acceptS);
		private static readonly short[] DFA132_special = DFA.UnpackEncodedString(DFA132_specialS);
		private static readonly short[][] DFA132_transition;

		static DFA132()
		{
			int numStates = DFA132_transitionS.Length;
			DFA132_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA132_transition[i] = DFA.UnpackEncodedString(DFA132_transitionS[i]);
			}
		}

		public DFA132( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 132;
			this.eot = DFA132_eot;
			this.eof = DFA132_eof;
			this.min = DFA132_min;
			this.max = DFA132_max;
			this.accept = DFA132_accept;
			this.special = DFA132_special;
			this.transition = DFA132_transition;
		}

		public override string Description { get { return "475:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA174 : DFA
	{
		private const string DFA174_eotS =
			"\x7\xFFFF";
		private const string DFA174_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA174_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA174_maxS =
			"\x1\xB3\x1\xB8\x2\xFFFF\x2\xB8\x1\xFFFF";
		private const string DFA174_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA174_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA174_transitionS =
			{
				"\x1\x3\x2F\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xD\xFFFF\x1\x3\x21\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x15\xFFFF\x2\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x26\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C"+
				"\xFFFF\x2\x3\x7\xFFFF\x3\x3\x1\xFFFF\x8\x3\x3\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF\x3\x3\x3\xFFFF\x7\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x26\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x4\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x3\x26\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x4\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA174_eot = DFA.UnpackEncodedString(DFA174_eotS);
		private static readonly short[] DFA174_eof = DFA.UnpackEncodedString(DFA174_eofS);
		private static readonly char[] DFA174_min = DFA.UnpackEncodedStringToUnsignedChars(DFA174_minS);
		private static readonly char[] DFA174_max = DFA.UnpackEncodedStringToUnsignedChars(DFA174_maxS);
		private static readonly short[] DFA174_accept = DFA.UnpackEncodedString(DFA174_acceptS);
		private static readonly short[] DFA174_special = DFA.UnpackEncodedString(DFA174_specialS);
		private static readonly short[][] DFA174_transition;

		static DFA174()
		{
			int numStates = DFA174_transitionS.Length;
			DFA174_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA174_transition[i] = DFA.UnpackEncodedString(DFA174_transitionS[i]);
			}
		}

		public DFA174( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 174;
			this.eot = DFA174_eot;
			this.eof = DFA174_eof;
			this.min = DFA174_min;
			this.max = DFA174_max;
			this.accept = DFA174_accept;
			this.special = DFA174_special;
			this.transition = DFA174_transition;
		}

		public override string Description { get { return "526:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA163 : DFA
	{
		private const string DFA163_eotS =
			"\x4\xFFFF";
		private const string DFA163_eofS =
			"\x4\xFFFF";
		private const string DFA163_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA163_maxS =
			"\x2\x38\x2\xFFFF";
		private const string DFA163_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA163_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA163_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x1",
				"\x1\x2\x27\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA163_eot = DFA.UnpackEncodedString(DFA163_eotS);
		private static readonly short[] DFA163_eof = DFA.UnpackEncodedString(DFA163_eofS);
		private static readonly char[] DFA163_min = DFA.UnpackEncodedStringToUnsignedChars(DFA163_minS);
		private static readonly char[] DFA163_max = DFA.UnpackEncodedStringToUnsignedChars(DFA163_maxS);
		private static readonly short[] DFA163_accept = DFA.UnpackEncodedString(DFA163_acceptS);
		private static readonly short[] DFA163_special = DFA.UnpackEncodedString(DFA163_specialS);
		private static readonly short[][] DFA163_transition;

		static DFA163()
		{
			int numStates = DFA163_transitionS.Length;
			DFA163_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA163_transition[i] = DFA.UnpackEncodedString(DFA163_transitionS[i]);
			}
		}

		public DFA163( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 163;
			this.eot = DFA163_eot;
			this.eof = DFA163_eof;
			this.min = DFA163_min;
			this.max = DFA163_max;
			this.accept = DFA163_accept;
			this.special = DFA163_special;
			this.transition = DFA163_transition;
		}

		public override string Description { get { return "526:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA199 : DFA
	{
		private const string DFA199_eotS =
			"\x7\xFFFF";
		private const string DFA199_eofS =
			"\x7\xFFFF";
		private const string DFA199_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA199_maxS =
			"\x5\xB8\x2\xFFFF";
		private const string DFA199_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA199_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA199_transitionS =
			{
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x17\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA199_eot = DFA.UnpackEncodedString(DFA199_eotS);
		private static readonly short[] DFA199_eof = DFA.UnpackEncodedString(DFA199_eofS);
		private static readonly char[] DFA199_min = DFA.UnpackEncodedStringToUnsignedChars(DFA199_minS);
		private static readonly char[] DFA199_max = DFA.UnpackEncodedStringToUnsignedChars(DFA199_maxS);
		private static readonly short[] DFA199_accept = DFA.UnpackEncodedString(DFA199_acceptS);
		private static readonly short[] DFA199_special = DFA.UnpackEncodedString(DFA199_specialS);
		private static readonly short[][] DFA199_transition;

		static DFA199()
		{
			int numStates = DFA199_transitionS.Length;
			DFA199_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA199_transition[i] = DFA.UnpackEncodedString(DFA199_transitionS[i]);
			}
		}

		public DFA199( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 199;
			this.eot = DFA199_eot;
			this.eof = DFA199_eof;
			this.min = DFA199_min;
			this.max = DFA199_max;
			this.accept = DFA199_accept;
			this.special = DFA199_special;
			this.transition = DFA199_transition;
		}

		public override string Description { get { return "569:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA198 : DFA
	{
		private const string DFA198_eotS =
			"\x7\xFFFF";
		private const string DFA198_eofS =
			"\x7\xFFFF";
		private const string DFA198_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA198_maxS =
			"\x1\x85\x4\xB8\x2\xFFFF";
		private const string DFA198_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA198_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA198_transitionS =
			{
				"\x1\x4\x27\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x20\xFFFF\x1\x5",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"\x1\x4\x26\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x17\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA198_eot = DFA.UnpackEncodedString(DFA198_eotS);
		private static readonly short[] DFA198_eof = DFA.UnpackEncodedString(DFA198_eofS);
		private static readonly char[] DFA198_min = DFA.UnpackEncodedStringToUnsignedChars(DFA198_minS);
		private static readonly char[] DFA198_max = DFA.UnpackEncodedStringToUnsignedChars(DFA198_maxS);
		private static readonly short[] DFA198_accept = DFA.UnpackEncodedString(DFA198_acceptS);
		private static readonly short[] DFA198_special = DFA.UnpackEncodedString(DFA198_specialS);
		private static readonly short[][] DFA198_transition;

		static DFA198()
		{
			int numStates = DFA198_transitionS.Length;
			DFA198_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA198_transition[i] = DFA.UnpackEncodedString(DFA198_transitionS[i]);
			}
		}

		public DFA198( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 198;
			this.eot = DFA198_eot;
			this.eof = DFA198_eof;
			this.min = DFA198_min;
			this.max = DFA198_max;
			this.accept = DFA198_accept;
			this.special = DFA198_special;
			this.transition = DFA198_transition;
		}

		public override string Description { get { return "()* loopback of 569:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA207 : DFA
	{
		private const string DFA207_eotS =
			"\xB\xFFFF";
		private const string DFA207_eofS =
			"\xB\xFFFF";
		private const string DFA207_minS =
			"\x2\x2F\x1\xFFFF\x1\x57\x1\xFFFF\x2\x2F\x2\x57\x1\x2F\x1\x57";
		private const string DFA207_maxS =
			"\x2\xB8\x1\xFFFF\x1\xB7\x1\xFFFF\x1\x2F\x1\xB8\x2\xB7\x1\x2F\x1\xB7";
		private const string DFA207_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA207_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA207_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x2\x17\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\xA\xFFFF\x1"+
				"\x4\x11\xFFFF\x2\x2\x8\xFFFF\x1\x2\xC\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x4\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x17\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x12\xFFFF\x4\x2"
			};

		private static readonly short[] DFA207_eot = DFA.UnpackEncodedString(DFA207_eotS);
		private static readonly short[] DFA207_eof = DFA.UnpackEncodedString(DFA207_eofS);
		private static readonly char[] DFA207_min = DFA.UnpackEncodedStringToUnsignedChars(DFA207_minS);
		private static readonly char[] DFA207_max = DFA.UnpackEncodedStringToUnsignedChars(DFA207_maxS);
		private static readonly short[] DFA207_accept = DFA.UnpackEncodedString(DFA207_acceptS);
		private static readonly short[] DFA207_special = DFA.UnpackEncodedString(DFA207_specialS);
		private static readonly short[][] DFA207_transition;

		static DFA207()
		{
			int numStates = DFA207_transitionS.Length;
			DFA207_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA207_transition[i] = DFA.UnpackEncodedString(DFA207_transitionS[i]);
			}
		}

		public DFA207( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 207;
			this.eot = DFA207_eot;
			this.eof = DFA207_eof;
			this.min = DFA207_min;
			this.max = DFA207_max;
			this.accept = DFA207_accept;
			this.special = DFA207_special;
			this.transition = DFA207_transition;
		}

		public override string Description { get { return "582:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA237 : DFA
	{
		private const string DFA237_eotS =
			"\x4\xFFFF";
		private const string DFA237_eofS =
			"\x4\xFFFF";
		private const string DFA237_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA237_maxS =
			"\x1\x64\x1\xB8\x2\xFFFF";
		private const string DFA237_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA237_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA237_transitionS =
			{
				"\x1\x2\x2F\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x26\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x1C\xFFFF\x2\x3\x15\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x17\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA237_eot = DFA.UnpackEncodedString(DFA237_eotS);
		private static readonly short[] DFA237_eof = DFA.UnpackEncodedString(DFA237_eofS);
		private static readonly char[] DFA237_min = DFA.UnpackEncodedStringToUnsignedChars(DFA237_minS);
		private static readonly char[] DFA237_max = DFA.UnpackEncodedStringToUnsignedChars(DFA237_maxS);
		private static readonly short[] DFA237_accept = DFA.UnpackEncodedString(DFA237_acceptS);
		private static readonly short[] DFA237_special = DFA.UnpackEncodedString(DFA237_specialS);
		private static readonly short[][] DFA237_transition;

		static DFA237()
		{
			int numStates = DFA237_transitionS.Length;
			DFA237_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA237_transition[i] = DFA.UnpackEncodedString(DFA237_transitionS[i]);
			}
		}

		public DFA237( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 237;
			this.eot = DFA237_eot;
			this.eof = DFA237_eof;
			this.min = DFA237_min;
			this.max = DFA237_max;
			this.accept = DFA237_accept;
			this.special = DFA237_special;
			this.transition = DFA237_transition;
		}

		public override string Description { get { return "()* loopback of 689:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root594 = new BitSet(new ulong[]{0x100800000000000UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _global_block_in_root597 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block619 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block621 = new BitSet(new ulong[]{0x100800000000002UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _func_def_in_node644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args691 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item712 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item715 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item717 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item720 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item722 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_attribute_item744 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item747 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item749 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item752 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item754 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_attribute_item776 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item779 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item781 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item784 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item786 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item790 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_attribute_item808 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item811 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item813 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item816 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item818 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_attribute_item840 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_attribute_item843 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item845 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_attribute_item848 = new BitSet(new ulong[]{0x4200800000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item850 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_attribute_item854 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_attribute879 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x1002400002000UL});
		public static readonly BitSet _attribute_item_in_attribute881 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_attribute884 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x1002400002000UL});
		public static readonly BitSet _attribute_item_in_attribute886 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_attribute890 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute892 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x10UL});
		public static readonly BitSet _attribute_in_global_alloc911 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_global_alloc914 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc917 = new BitSet(new ulong[]{0x0UL,0x2800000000000UL});
		public static readonly BitSet _111_in_global_alloc921 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_global_alloc923 = new BitSet(new ulong[]{0x2UL,0x202000020000000UL});
		public static readonly BitSet _121_in_global_alloc928 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _113_in_global_alloc932 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_global_alloc935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_global_alloc1066 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_global_alloc1069 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_global_alloc1072 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_global_alloc1074 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _attribute_in_global_using1122 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_global_using1125 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1127 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _attribute_in_global_typedef1151 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_global_typedef1154 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_global_typedef1156 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_global_typedef1158 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_global_typedef1160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1184 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_import_def1187 = new BitSet(new ulong[]{0x4100000000000002UL});
		public static readonly BitSet _STRING_in_import_def1189 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1193 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_import_def1196 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1198 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _STRING_in_import_def1203 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1205 = new BitSet(new ulong[]{0x4100000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1235 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_enum_def1238 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_enum_def1240 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_enum_def1242 = new BitSet(new ulong[]{0x800000000002UL});
		public static readonly BitSet _ident_in_enum_def1245 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_enum_def1248 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_enum_def1250 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1283 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000UL});
		public static readonly BitSet _158_in_namespace_def1286 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_namespace_def1288 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1291 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1294 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1296 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _global_block_in_namespace_def1299 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_class_args1328 = new BitSet(new ulong[]{0x800000000000UL,0x2000040000000UL});
		public static readonly BitSet _func_args_in_class_args1332 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_class_args1334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_class_args1346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1370 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400001000UL});
		public static readonly BitSet _162_in_class_def1373 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_class_def1376 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def1378 = new BitSet(new ulong[]{0x100000000000002UL,0x8800020000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1381 = new BitSet(new ulong[]{0x100000000000002UL,0x800020000000UL});
		public static readonly BitSet _class_args_in_class_def1385 = new BitSet(new ulong[]{0x100000000000002UL,0x800000000000UL});
		public static readonly BitSet _111_in_class_def1389 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def1391 = new BitSet(new ulong[]{0x100000000000002UL,0x1000000000UL});
		public static readonly BitSet _100_in_class_def1394 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_class_def1396 = new BitSet(new ulong[]{0x100000000000002UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1403 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_class_def1406 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _NEWLINE_in_class_def1408 = new BitSet(new ulong[]{0x100800000000100UL,0x20000000UL,0x101906448463010UL});
		public static readonly BitSet _global_block_in_class_def1411 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1459 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_type_list1462 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_list1464 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _type_single_in_type_name1486 = new BitSet(new ulong[]{0x2UL,0x20000000000UL});
		public static readonly BitSet _105_in_type_name1490 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_name1493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1497 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name1499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1540 = new BitSet(new ulong[]{0x800000000000UL,0x60000000UL,0x6008002000UL});
		public static readonly BitSet _type_list_in_type_name1542 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name1545 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_type_name1547 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_name1550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_type_name1554 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_type_name1556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1580 = new BitSet(new ulong[]{0x2UL,0x8000000UL,0x10UL});
		public static readonly BitSet _91_in_type_single1584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_type_single1600 = new BitSet(new ulong[]{0x4200800000000000UL,0x76A8400000UL,0x1000001A4000038UL});
		public static readonly BitSet _expr_in_type_single1604 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_type_single1607 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_type_single1609 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_type_single1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_type_single1638 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_type_single1641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1688 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_type_no_array1692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1727 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_type_star1731 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1777 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_type_template_type1781 = new BitSet(new ulong[]{0x800000000000UL,0x2000000020000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_template_type1784 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _100_in_type_template_type1787 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_type_template_type1789 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _125_in_type_template_type1795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_type_ident1835 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x4008002000UL});
		public static readonly BitSet _141_in_type_ident1838 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x4008000000UL});
		public static readonly BitSet _166_in_type_ident1841 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x8000000UL});
		public static readonly BitSet _155_in_type_ident1844 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_type_ident1847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1878 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_generic_parameter_inside1881 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1883 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _115_in_generic_parameter1905 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1907 = new BitSet(new ulong[]{0x0UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_generic_parameter1909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1924 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_func_args1927 = new BitSet(new ulong[]{0x800000000000UL,0x2000000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1929 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1951 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_func_args_item1953 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_func_args_item1955 = new BitSet(new ulong[]{0x2UL,0x202000020000000UL});
		public static readonly BitSet _121_in_func_args_item1960 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _113_in_func_args_item1964 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_func_args_item1967 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item2018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_func_args_item2078 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _modify_expr_in_func_args_item2082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_func_name2125 = new BitSet(new ulong[]{0x0UL,0x202280000000UL});
		public static readonly BitSet _operator_in_func_name2127 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_func_name2129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2155 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x101006408002000UL});
		public static readonly BitSet _162_in_func_def2158 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x101006008002000UL});
		public static readonly BitSet _176_in_func_def2161 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x100006008002000UL});
		public static readonly BitSet _func_type_in_func_def2164 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x100000000000000UL});
		public static readonly BitSet _184_in_func_def2167 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL});
		public static readonly BitSet _func_name_in_func_def2170 = new BitSet(new ulong[]{0x0UL,0x8000020000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2172 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_def2175 = new BitSet(new ulong[]{0x800000000000UL,0x2000040000000UL});
		public static readonly BitSet _func_args_in_func_def2177 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_func_def2180 = new BitSet(new ulong[]{0x100000000000002UL,0x200000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2184 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_func_def2249 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_func_def2253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2316 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_func_def2319 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2321 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _match_item_in_func_def2325 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2327 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2332 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2500 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2502 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2512 = new BitSet(new ulong[]{0x100000000000000UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2515 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _114_in_stmt_block_item2520 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2522 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2539 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2541 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2544 = new BitSet(new ulong[]{0x800000000100UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _DEDENT_in_stmt_block2547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2594 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2633 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _149_in_stmt_expr2643 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2645 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _173_in_stmt_expr2674 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2676 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _179_in_stmt_expr2705 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2707 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _174_in_stmt_expr2736 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_expr2738 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8600000300000UL});
		public static readonly BitSet _148_in_stmt_expr2767 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_expr2769 = new BitSet(new ulong[]{0x2UL,0x1000000000UL,0x8600000300000UL});
		public static readonly BitSet _100_in_stmt_expr2772 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_expr2774 = new BitSet(new ulong[]{0x2UL,0x1000000000UL,0x8600000300000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_defer2847 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _stmt_in_stmt_defer2849 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_defer2862 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _stmt_in_stmt_defer2864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_stmt_typedef2883 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2885 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_stmt_typedef2887 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2908 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_stmt_using_item2912 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_stmt_using2920 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2922 = new BitSet(new ulong[]{0x800000000002UL,0x0UL,0x40000000UL});
		public static readonly BitSet _163_in_stmt_return2943 = new BitSet(new ulong[]{0x4200800000000002UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_return2945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2966 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _114_in_inline_stmt_block2969 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2971 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _149_in_stmt_if2993 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_if2995 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2998 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3001 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3004 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if3007 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3009 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_if3044 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3046 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_stmt_if3067 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_if3069 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3072 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3075 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x10000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3078 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_stmt_if3081 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3083 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_if3122 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_stmt_while3155 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_while3157 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3161 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_while3188 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_stmt_while3214 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_while3216 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3220 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_while3247 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_while3273 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_while3275 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3278 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3303 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_for_range3305 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3309 = new BitSet(new ulong[]{0x2UL,0x0UL,0x60000008000UL});
		public static readonly BitSet _170_in_for_range3313 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3317 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_for_range3320 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3324 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_for_range3354 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3358 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_for_range3361 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3365 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_for_range3395 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3399 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_for_range3402 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_range3406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3483 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_for_map3485 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_for_map3487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3508 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3513 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3518 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_stmt_for3529 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_for3533 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_for3536 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_stmt_for3538 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3542 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_stmt_try3576 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3578 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3581 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3583 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_stmt_try3586 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3588 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3590 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_switch_item3616 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_switch_item3618 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL,0x10000000000UL});
		public static readonly BitSet _100_in_switch_item3621 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_switch_item3623 = new BitSet(new ulong[]{0x100000000000000UL,0x1000000000UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3629 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_switch_item3678 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x100900900000008UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_stmt_switch3720 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_stmt_switch3722 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3725 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3728 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3730 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3734 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3736 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x2000000010000UL});
		public static readonly BitSet _144_in_stmt_switch3742 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3744 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3747 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3749 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3780 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_ident_list3783 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_ident_list3785 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3807 = new BitSet(new ulong[]{0x0UL,0x2800000000000UL});
		public static readonly BitSet _111_in_stmt_alloc3811 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_stmt_alloc3813 = new BitSet(new ulong[]{0x2UL,0x202000020000000UL});
		public static readonly BitSet _121_in_stmt_alloc3818 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _113_in_stmt_alloc3822 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_stmt_alloc3940 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3944 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_stmt_alloc3947 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3949 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3979 = new BitSet(new ulong[]{0x2UL,0x8260410912000000UL,0x20000000000085UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3983 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify3985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_modify4009 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify4011 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_stmt_modify4038 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify4040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_stmt_modify4069 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_stmt_modify4071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item4105 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr4119 = new BitSet(new ulong[]{0x100000000000002UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4129 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4132 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4134 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x4000000000000UL});
		public static readonly BitSet _178_in_where_expr4137 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _where_item_in_where_expr4141 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4145 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4181 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4184 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _NEWLINE_in_where_expr4186 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _where_item_in_where_expr4190 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4192 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _DEDENT_in_where_expr4197 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4199 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4202 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4252 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4255 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _NEWLINE_in_where_expr4257 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _where_item_in_where_expr4261 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4263 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _DEDENT_in_where_expr4268 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4270 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _178_in_where_expr4311 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4313 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4316 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _NEWLINE_in_where_expr4318 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _where_item_in_where_expr4322 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4324 = new BitSet(new ulong[]{0x100800000000100UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _DEDENT_in_where_expr4329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_let_expr4387 = new BitSet(new ulong[]{0x800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _where_item_in_let_expr4389 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x800000UL});
		public static readonly BitSet _151_in_let_expr4393 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_let_expr4397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4421 = new BitSet(new ulong[]{0x4301800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _INDENT_in_let_expr4426 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_let_expr4428 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_let_expr4431 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4433 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4509 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4512 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _NEWLINE_in_let_expr4514 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910384008UL});
		public static readonly BitSet _where_item_in_let_expr4518 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4520 = new BitSet(new ulong[]{0x100800000000000UL,0x66A8400000UL,0x108F88910B84008UL});
		public static readonly BitSet _151_in_let_expr4525 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_let_expr4527 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4529 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4532 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _180_in_match_item4564 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_match_item4566 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_match_item4568 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _where_expr_in_match_item4570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_match_expr4591 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000011A4000018UL});
		public static readonly BitSet _expr_in_match_expr4593 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _164_in_match_expr4597 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_match_expr4599 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4603 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4606 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4608 = new BitSet(new ulong[]{0x100000000000000UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _match_item_in_match_expr4612 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4614 = new BitSet(new ulong[]{0x100000000000100UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr4645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr4684 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL,0x40000000000000UL});
		public static readonly BitSet _120_in_feed_expr4694 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _list_expr_in_feed_expr4696 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _182_in_feed_expr4730 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _list_expr_in_feed_expr4732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr4769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_list_expr4790 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_list_expr4792 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_list_expr4794 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_list_expr4796 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_list_expr4799 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _for_item_in_list_expr4801 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_list_expr4805 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_list_expr4807 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_list_expr4809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_list_expr4837 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000038UL});
		public static readonly BitSet _100_in_list_expr4841 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _NEWLINE_in_list_expr4845 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _INDENT_in_list_expr4849 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _DEDENT_in_list_expr4853 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_list_expr4857 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_list_expr4861 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _NEWLINE_in_list_expr4865 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _INDENT_in_list_expr4869 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _DEDENT_in_list_expr4873 = new BitSet(new ulong[]{0x4301800000000100UL,0x76A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_list_expr4877 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_list_expr4884 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _NEWLINE_in_list_expr4888 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _INDENT_in_list_expr4892 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _DEDENT_in_list_expr4896 = new BitSet(new ulong[]{0x101000000000100UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_list_expr4900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4942 = new BitSet(new ulong[]{0x101000000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lambda_type4960 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_lambda_type4962 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_lambda_type4964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lambda_expr4979 = new BitSet(new ulong[]{0x800000000000UL,0x2000040000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4981 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_lambda_expr4984 = new BitSet(new ulong[]{0x0UL,0x1800028020000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4986 = new BitSet(new ulong[]{0x0UL,0x1800028000000000UL});
		public static readonly BitSet _105_in_lambda_expr4991 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4993 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_lambda_expr5028 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr5030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _103_in_lambda_expr5062 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr5064 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lambda_expr5099 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _lambda_value_in_lambda_expr5101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr5136 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr5193 = new BitSet(new ulong[]{0x2UL,0x242410912000000UL,0x20000000000081UL});
		public static readonly BitSet _set_in_modify_expr5197 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_in_modify_expr5242 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_modify_expr5251 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_in_modify_expr5254 = new BitSet(new ulong[]{0x2UL,0x200000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item5267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr5279 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_cond_expr5288 = new BitSet(new ulong[]{0x4200800000000002UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5294 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_cond_expr5298 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr5416 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000200000000UL});
		public static readonly BitSet _or_op_in_or_expr5427 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _and_expr_in_or_expr5431 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80000200000000UL});
		public static readonly BitSet _bit_or_in_and_expr5473 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x200UL});
		public static readonly BitSet _and_op_in_and_expr5484 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _bit_or_in_and_expr5488 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x200UL});
		public static readonly BitSet _bit_xor_in_bit_or5519 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _180_in_bit_or5528 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _bit_xor_in_bit_or5532 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5562 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_bit_xor5571 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _bit_and_in_bit_xor5575 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _cmp_expr_in_bit_and5605 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_bit_and5614 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _cmp_expr_in_bit_and5618 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _chain_op_in_chain_list5710 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _shift_expr_in_chain_list5712 = new BitSet(new ulong[]{0x2UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5726 = new BitSet(new ulong[]{0x2UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _115_in_cmp_expr5755 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5757 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _100_in_cmp_expr5760 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5762 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _125_in_cmp_expr5766 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_cmp_expr5799 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5803 = new BitSet(new ulong[]{0x2UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5884 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5888 = new BitSet(new ulong[]{0x2UL,0x6488000000800000UL,0x3000000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5994 = new BitSet(new ulong[]{0x2UL,0x8020000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr6003 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _add_expr_in_shift_expr6007 = new BitSet(new ulong[]{0x2UL,0x8020000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr6037 = new BitSet(new ulong[]{0x2UL,0x2200000000UL});
		public static readonly BitSet _97_in_add_expr6047 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _mul_expr_in_add_expr6051 = new BitSet(new ulong[]{0x2UL,0x2200000000UL});
		public static readonly BitSet _101_in_add_expr6076 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _mul_expr_in_add_expr6080 = new BitSet(new ulong[]{0x2UL,0x2200000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr6118 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _95_in_mul_expr6128 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr6132 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _109_in_mul_expr6159 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr6163 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _88_in_mul_expr6190 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _infix_expr_in_mul_expr6194 = new BitSet(new ulong[]{0x2UL,0x200081000000UL});
		public static readonly BitSet _selector_expr_in_infix_expr6234 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _infix_func_in_infix_expr6244 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _selector_expr_in_infix_expr6248 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _cast_expr_in_selector_expr6280 = new BitSet(new ulong[]{0x2UL,0x140000000000UL});
		public static readonly BitSet _106_in_selector_expr6290 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_selector_expr6294 = new BitSet(new ulong[]{0x2UL,0x140000000000UL});
		public static readonly BitSet _108_in_selector_expr6320 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_selector_expr6325 = new BitSet(new ulong[]{0x2UL,0x140000000000UL});
		public static readonly BitSet _93_in_cast_expr6374 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_cast_expr6376 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_cast_expr6378 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr6445 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr6447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_prefix_expr6463 = new BitSet(new ulong[]{0x800000000000UL,0x0UL,0x6008002000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr6465 = new BitSet(new ulong[]{0x0UL,0x20000000UL,0x10UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr6469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_square_expr_list6528 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_square_expr_list6530 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _100_in_square_expr_list6533 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_square_expr_list6535 = new BitSet(new ulong[]{0x0UL,0x1000000000UL,0x20UL});
		public static readonly BitSet _133_in_square_expr_list6539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_bracket_expr_list6559 = new BitSet(new ulong[]{0x4300800000000000UL,0x66E8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6562 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _100_in_bracket_expr_list6565 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6567 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6597 = new BitSet(new ulong[]{0x4301800000000000UL,0x66E8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6602 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6604 = new BitSet(new ulong[]{0x4300800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6607 = new BitSet(new ulong[]{0x100000000000100UL,0x1040000000UL});
		public static readonly BitSet _100_in_bracket_expr_list6611 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6615 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6619 = new BitSet(new ulong[]{0x100000000000100UL,0x1040000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6623 = new BitSet(new ulong[]{0x100000000000100UL,0x40000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6628 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6630 = new BitSet(new ulong[]{0x100000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6633 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6637 = new BitSet(new ulong[]{0x100000000000000UL,0x40000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6639 = new BitSet(new ulong[]{0x100000000000000UL,0x40000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6669 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _100_in_bracket_expr_list6673 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6677 = new BitSet(new ulong[]{0x4300800000000000UL,0x76A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_bracket_expr_list6681 = new BitSet(new ulong[]{0x100000000000000UL,0x1040000000UL});
		public static readonly BitSet _94_in_bracket_expr_list6687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6734 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _98_in_suffix_expr6744 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _102_in_suffix_expr6770 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _107_in_suffix_expr6793 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6795 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _105_in_suffix_expr6820 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6822 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6847 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6870 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _131_in_suffix_expr6893 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6895 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6897 = new BitSet(new ulong[]{0x2UL,0xA4420000000UL,0x18UL});
		public static readonly BitSet _NUMBER_in_atom_expr6935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_atom_expr6950 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_atom_expr6952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_atom_expr6965 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_atom_expr6969 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _100_in_atom_expr6974 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x1000001A4000018UL});
		public static readonly BitSet _expr_in_atom_expr6976 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_atom_expr6980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _94_in_atom_expr7007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item7038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix7050 = new BitSet(new ulong[]{0x800000000000UL,0x6688400000UL,0x100000100000008UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix7052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix7068 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix7082 = new BitSet(new ulong[]{0x2UL,0x80A4420000000UL,0x10UL});
		public static readonly BitSet _98_in_lvalue_suffix7092 = new BitSet(new ulong[]{0x2UL,0x80A4420000000UL,0x10UL});
		public static readonly BitSet _102_in_lvalue_suffix7120 = new BitSet(new ulong[]{0x2UL,0x80A4420000000UL,0x10UL});
		public static readonly BitSet _107_in_lvalue_suffix7145 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7147 = new BitSet(new ulong[]{0x2UL,0x80A4420000000UL,0x10UL});
		public static readonly BitSet _105_in_lvalue_suffix7174 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7176 = new BitSet(new ulong[]{0x2UL,0x80A4420000000UL,0x10UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix7203 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix7206 = new BitSet(new ulong[]{0x2UL,0x80A4420000000UL,0x10UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix7234 = new BitSet(new ulong[]{0x2UL,0x80A4420000000UL,0x10UL});
		public static readonly BitSet _ident_in_lvalue_atom7272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_lvalue_atom7277 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom7279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_lvalue7298 = new BitSet(new ulong[]{0x800000000000UL,0x6688400000UL,0x100000100000008UL});
		public static readonly BitSet _lvalue_item_in_lvalue7300 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_lvalue7303 = new BitSet(new ulong[]{0x800000000000UL,0x6688400000UL,0x100000100000008UL});
		public static readonly BitSet _lvalue_item_in_lvalue7305 = new BitSet(new ulong[]{0x0UL,0x1040000000UL});
		public static readonly BitSet _94_in_lvalue7309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue7323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident7334 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_ident7337 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _IDENT_in_ident7339 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _136_in_infix_func7352 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_infix_func7355 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_infix_func7357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp4667 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL,0x40000000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp4669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_synpred2_SugarCpp4781 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000018UL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp4783 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_synpred2_SugarCpp4785 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_synpred3_SugarCpp5737 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5739 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _100_in_synpred3_SugarCpp5742 = new BitSet(new ulong[]{0x800000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5744 = new BitSet(new ulong[]{0x0UL,0x2000001000000000UL});
		public static readonly BitSet _125_in_synpred3_SugarCpp5748 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _bracket_expr_list_in_synpred3_SugarCpp5750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_synpred4_SugarCpp6363 = new BitSet(new ulong[]{0x800000000000UL,0x20000000UL,0x6008002000UL});
		public static readonly BitSet _type_name_in_synpred4_SugarCpp6365 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_synpred4_SugarCpp6367 = new BitSet(new ulong[]{0x4200800000000000UL,0x66A8400000UL,0x100000180000008UL});
		public static readonly BitSet _prefix_expr_in_synpred4_SugarCpp6369 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
