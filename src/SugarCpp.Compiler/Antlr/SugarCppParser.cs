//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-18 23:25:38

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Ident", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Expr_Where=33;
	public const int For_Item_Down_To=34;
	public const int For_Item_Each=35;
	public const int For_Item_To=36;
	public const int For_Item_When=37;
	public const int Func_Args=38;
	public const int Func_Def=39;
	public const int Generic_Patameters=40;
	public const int Global_Block=41;
	public const int IDENT=42;
	public const int INDENT=43;
	public const int Ident_List=44;
	public const int Import=45;
	public const int Left_Bracket=46;
	public const int LineComment=47;
	public const int Match_Expr=48;
	public const int Match_Expr_Item=49;
	public const int Match_Tuple=50;
	public const int NEWLINE=51;
	public const int NUMBER=52;
	public const int Namespace=53;
	public const int Right_Bracket=54;
	public const int Root=55;
	public const int SP=56;
	public const int STRING=57;
	public const int Stmt_Block=58;
	public const int Stmt_Defer=59;
	public const int Stmt_Finally=60;
	public const int Stmt_For=61;
	public const int Stmt_If=62;
	public const int Stmt_Loop=63;
	public const int Stmt_Return=64;
	public const int Stmt_Switch=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Switch_Item=72;
	public const int Type_Array=73;
	public const int Type_Ident=74;
	public const int Type_Ref=75;
	public const int Type_Star=76;
	public const int Type_Template=77;
	public const int White_Space=78;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:203:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(203, 1);
		try
		{
			// SugarCpp.g:204:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:204:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(204, 4);
			// SugarCpp.g:204:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:204:4: NEWLINE
					{
					DebugLocation(204, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root546);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(204, 13);
			PushFollow(Follow._global_block_in_root549);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(204, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root551);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 204:30: -> ^( Root global_block )
			{
				DebugLocation(204, 33);
				// SugarCpp.g:204:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(204, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(204, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(205, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:207:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(207, 1);
		try
		{
			// SugarCpp.g:208:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:208:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(208, 4);
			// SugarCpp.g:208:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==86||LA3_0==122||(LA3_0>=131 && LA3_0<=132)||LA3_0==136||LA3_0==140||LA3_0==147||LA3_0==152||LA3_0==157||LA3_0==159||LA3_0==161||LA3_0==168))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:208:5: node ( NEWLINE )+
					{
					DebugLocation(208, 5);
					PushFollow(Follow._node_in_global_block571);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(208, 10);
					// SugarCpp.g:208:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:208:10: NEWLINE
							{
							DebugLocation(208, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block573);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 208:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(208, 24);
				// SugarCpp.g:208:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(208, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(208, 39);
				// SugarCpp.g:208:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(208, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:211:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(211, 1);
		try
		{
			// SugarCpp.g:212:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:212:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._func_def_in_node596);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:213:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(213, 4);
				PushFollow(Follow._class_def_in_node601);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:214:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(214, 4);
				PushFollow(Follow._enum_def_in_node606);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:215:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._global_alloc_in_node611);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:216:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._global_using_in_node616);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:217:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._global_typedef_in_node621);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:218:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._import_def_in_node626);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:219:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._namespace_def_in_node631);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:222:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args643); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args648); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:225:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._ident_in_attribute_args653);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:228:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(228, 1);
		try
		{
			// SugarCpp.g:229:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==132))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:229:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(229, 4);
				PushFollow(Follow._ident_in_attribute_item664);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(229, 10);
				// SugarCpp.g:229:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==86))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:229:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(229, 11);
					char_literal18=(IToken)Match(input,86,Follow._86_in_attribute_item667);  
					stream_86.Add(char_literal18);

					DebugLocation(229, 15);
					PushFollow(Follow._attribute_args_in_attribute_item669);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(229, 30);
					// SugarCpp.g:229:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==93))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:229:31: ',' attribute_args
							{
							DebugLocation(229, 31);
							char_literal20=(IToken)Match(input,93,Follow._93_in_attribute_item672);  
							stream_93.Add(char_literal20);

							DebugLocation(229, 35);
							PushFollow(Follow._attribute_args_in_attribute_item674);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(229, 52);
					char_literal22=(IToken)Match(input,87,Follow._87_in_attribute_item678);  
					stream_87.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 229:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(229, 61);
					// SugarCpp.g:229:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(229, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(229, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(229, 79);
					// SugarCpp.g:229:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(229, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:230:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(230, 4);
				string_literal23=(IToken)Match(input,132,Follow._132_in_attribute_item696);  
				stream_132.Add(string_literal23);

				DebugLocation(230, 12);
				// SugarCpp.g:230:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==86))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:230:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(230, 13);
					char_literal24=(IToken)Match(input,86,Follow._86_in_attribute_item699);  
					stream_86.Add(char_literal24);

					DebugLocation(230, 17);
					PushFollow(Follow._attribute_args_in_attribute_item701);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(230, 32);
					// SugarCpp.g:230:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==93))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:230:33: ',' attribute_args
							{
							DebugLocation(230, 33);
							char_literal26=(IToken)Match(input,93,Follow._93_in_attribute_item704);  
							stream_93.Add(char_literal26);

							DebugLocation(230, 37);
							PushFollow(Follow._attribute_args_in_attribute_item706);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(230, 54);
					char_literal28=(IToken)Match(input,87,Follow._87_in_attribute_item710);  
					stream_87.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 132
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 230:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(230, 63);
					// SugarCpp.g:230:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(230, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(230, 75);
					adaptor.AddChild(root_1, stream_132.NextNode());
					DebugLocation(230, 83);
					// SugarCpp.g:230:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(230, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:233:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(233, 1);
		try
		{
			// SugarCpp.g:234:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:234:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(234, 4);
			// SugarCpp.g:234:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==122))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:234:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(234, 5);
					char_literal29=(IToken)Match(input,122,Follow._122_in_attribute735);  
					stream_122.Add(char_literal29);

					DebugLocation(234, 9);
					PushFollow(Follow._attribute_item_in_attribute737);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(234, 24);
					// SugarCpp.g:234:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==93))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:234:25: ',' attribute_item
							{
							DebugLocation(234, 25);
							char_literal31=(IToken)Match(input,93,Follow._93_in_attribute740);  
							stream_93.Add(char_literal31);

							DebugLocation(234, 29);
							PushFollow(Follow._attribute_item_in_attribute742);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(234, 46);
					char_literal33=(IToken)Match(input,123,Follow._123_in_attribute746);  
					stream_123.Add(char_literal33);

					DebugLocation(234, 50);
					// SugarCpp.g:234:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:234:50: NEWLINE
							{
							DebugLocation(234, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute748);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 234:61: -> ( attribute_item )+
			{
				DebugLocation(234, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(234, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:237:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(237, 1);
		try
		{
			// SugarCpp.g:238:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:238:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(238, 4);
			// SugarCpp.g:238:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==122))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:4: attribute
				{
				DebugLocation(238, 4);
				PushFollow(Follow._attribute_in_global_alloc767);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(238, 15);
			PushFollow(Follow._ident_list_in_global_alloc770);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(238, 26);
			// SugarCpp.g:238:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==103))
			{
				alt19 = 1;
			}
			else if ((LA19_0==105))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(238, 28);
				char_literal37=(IToken)Match(input,103,Follow._103_in_global_alloc774);  
				stream_103.Add(char_literal37);

				DebugLocation(238, 32);
				PushFollow(Follow._type_name_in_global_alloc776);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(238, 42);
				// SugarCpp.g:238:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 105:
				case 112:
					{
					alt17 = 1;
					}
					break;
				case 86:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:44: ( '=' | ':=' ) expr
					{
					DebugLocation(238, 44);
					// SugarCpp.g:238:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==112))
					{
						alt15 = 1;
					}
					else if ((LA15_0==105))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:238:45: '='
						{
						DebugLocation(238, 45);
						char_literal39=(IToken)Match(input,112,Follow._112_in_global_alloc781);  
						stream_112.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:238:51: ':='
						{
						DebugLocation(238, 51);
						string_literal40=(IToken)Match(input,105,Follow._105_in_global_alloc785);  
						stream_105.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(238, 57);
					PushFollow(Follow._expr_in_global_alloc788);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 238:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(238, 65);
						// SugarCpp.g:238:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(238, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(238, 84);
						// SugarCpp.g:238:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(238, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(238, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(238, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(238, 116);
						// SugarCpp.g:238:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(238, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:239:43: '(' ( expr_list )? ')'
					{
					DebugLocation(239, 43);
					char_literal42=(IToken)Match(input,86,Follow._86_in_global_alloc848);  
					stream_86.Add(char_literal42);

					DebugLocation(239, 47);
					// SugarCpp.g:239:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==79||LA16_0==84||LA16_0==86||LA16_0==88||(LA16_0>=90 && LA16_0<=91)||(LA16_0>=94 && LA16_0<=95)||(LA16_0>=121 && LA16_0<=122)||LA16_0==144||LA16_0==146||(LA16_0>=148 && LA16_0<=149)||LA16_0==168))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:239:47: expr_list
						{
						DebugLocation(239, 47);
						PushFollow(Follow._expr_list_in_global_alloc850);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(239, 58);
					char_literal44=(IToken)Match(input,87,Follow._87_in_global_alloc853);  
					stream_87.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 239:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(239, 65);
						// SugarCpp.g:239:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(239, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(239, 86);
						// SugarCpp.g:239:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(239, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(239, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(239, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(239, 118);
						// SugarCpp.g:239:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(239, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:240:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 240:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(240, 20);
						// SugarCpp.g:240:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(240, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(240, 39);
						// SugarCpp.g:240:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(240, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(240, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(240, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:242:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(242, 10);
				string_literal45=(IToken)Match(input,105,Follow._105_in_global_alloc926);  
				stream_105.Add(string_literal45);

				DebugLocation(242, 15);
				// SugarCpp.g:242:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:242:16: expr ( ',' expr )*
				{
				DebugLocation(242, 16);
				PushFollow(Follow._expr_in_global_alloc929);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(242, 21);
				// SugarCpp.g:242:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==93))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:22: ',' expr
						{
						DebugLocation(242, 22);
						char_literal47=(IToken)Match(input,93,Follow._93_in_global_alloc932);  
						stream_93.Add(char_literal47);

						DebugLocation(242, 26);
						PushFollow(Follow._expr_in_global_alloc934);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 105, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(242, 37);
					// SugarCpp.g:242:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_105.NextNode(), root_1);

					DebugLocation(242, 44);
					// SugarCpp.g:242:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(242, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(242, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(242, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(242, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:246:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item51 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(246, 1);
		try
		{
			// SugarCpp.g:247:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(247, 4);
			// SugarCpp.g:247:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==122))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:4: attribute
				{
				DebugLocation(247, 4);
				PushFollow(Follow._attribute_in_global_using971);
				attribute49=attribute();
				PopFollow();

				stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(247, 15);
			string_literal50=(IToken)Match(input,161,Follow._161_in_global_using974);  
			stream_161.Add(string_literal50);

			DebugLocation(247, 23);
			// SugarCpp.g:247:23: ( stmt_using_item )*
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if ((LA21_0==IDENT||LA21_0==147))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch ( alt21 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:247:23: stmt_using_item
					{
					DebugLocation(247, 23);
					PushFollow(Follow._stmt_using_item_in_global_using976);
					stmt_using_item51=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item51.Tree);

					}
					break;

				default:
					goto loop21;
				}
			}

			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(247, 43);
				// SugarCpp.g:247:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(247, 56);
				// SugarCpp.g:247:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(247, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(247, 67);
				// SugarCpp.g:247:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(247, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:250:1: global_typedef : ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal53 = default(IToken);
		IToken char_literal55 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal53_tree = default(CommonTree);
		CommonTree char_literal55_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(250, 1);
		try
		{
			// SugarCpp.g:251:2: ( ( attribute )? 'typedef' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:251:4: ( attribute )? 'typedef' ident '=' type_name
			{
			DebugLocation(251, 4);
			// SugarCpp.g:251:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==122))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:251:4: attribute
				{
				DebugLocation(251, 4);
				PushFollow(Follow._attribute_in_global_typedef1000);
				attribute52=attribute();
				PopFollow();

				stream_attribute.Add(attribute52.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(251, 15);
			string_literal53=(IToken)Match(input,157,Follow._157_in_global_typedef1003);  
			stream_157.Add(string_literal53);

			DebugLocation(251, 25);
			PushFollow(Follow._ident_in_global_typedef1005);
			ident54=ident();
			PopFollow();

			stream_ident.Add(ident54.Tree);
			DebugLocation(251, 31);
			char_literal55=(IToken)Match(input,112,Follow._112_in_global_typedef1007);  
			stream_112.Add(char_literal55);

			DebugLocation(251, 35);
			PushFollow(Follow._type_name_in_global_typedef1009);
			type_name56=type_name();
			PopFollow();

			stream_type_name.Add(type_name56.Tree);


			{
			// AST REWRITE
			// elements: attribute, ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 251:45: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(251, 48);
				// SugarCpp.g:251:48: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(251, 63);
				// SugarCpp.g:251:63: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(251, 63);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(251, 74);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(251, 84);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:254:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal58 = default(IToken);
		IToken STRING59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken INDENT61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken DEDENT65 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute57 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree STRING59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree INDENT61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree DEDENT65_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(254, 1);
		try
		{
			// SugarCpp.g:255:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:255:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(255, 4);
			// SugarCpp.g:255:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==122))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:4: attribute
				{
				DebugLocation(255, 4);
				PushFollow(Follow._attribute_in_import_def1033);
				attribute57=attribute();
				PopFollow();

				stream_attribute.Add(attribute57.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(255, 15);
			string_literal58=(IToken)Match(input,140,Follow._140_in_import_def1036);  
			stream_140.Add(string_literal58);

			DebugLocation(255, 24);
			// SugarCpp.g:255:24: ( STRING )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==STRING))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:24: STRING
				{
				DebugLocation(255, 24);
				STRING59=(IToken)Match(input,STRING,Follow._STRING_in_import_def1038);  
				stream_STRING.Add(STRING59);


				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(255, 32);
			// SugarCpp.g:255:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			try
			{
				alt29 = dfa29.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:255:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(255, 33);
				// SugarCpp.g:255:33: ( NEWLINE )+
				int cnt25=0;
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch (alt25)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:33: NEWLINE
						{
						DebugLocation(255, 33);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1042);  
						stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						if (cnt25 >= 1)
							goto loop25;

						EarlyExitException eee25 = new EarlyExitException( 25, input );
						DebugRecognitionException(eee25);
						throw eee25;
					}
					cnt25++;
				}
				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(255, 42);
				INDENT61=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1045);  
				stream_INDENT.Add(INDENT61);

				DebugLocation(255, 49);
				// SugarCpp.g:255:49: ( NEWLINE )*
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch ( alt26 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:49: NEWLINE
						{
						DebugLocation(255, 49);
						NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1047);  
						stream_NEWLINE.Add(NEWLINE62);


						}
						break;

					default:
						goto loop26;
					}
				}

				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(255, 59);
				// SugarCpp.g:255:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, false);
					int LA28_0 = input.LA(1);

					if ((LA28_0==STRING))
					{
						alt28 = 1;
					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:255:60: STRING ( NEWLINE )+
						{
						DebugLocation(255, 60);
						STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1052);  
						stream_STRING.Add(STRING63);

						DebugLocation(255, 67);
						// SugarCpp.g:255:67: ( NEWLINE )+
						int cnt27=0;
						try { DebugEnterSubRule(27);
						while (true)
						{
							int alt27=2;
							try { DebugEnterDecision(27, false);
							int LA27_0 = input.LA(1);

							if ((LA27_0==NEWLINE))
							{
								alt27 = 1;
							}


							} finally { DebugExitDecision(27); }
							switch (alt27)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:255:67: NEWLINE
								{
								DebugLocation(255, 67);
								NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1054);  
								stream_NEWLINE.Add(NEWLINE64);


								}
								break;

							default:
								if (cnt27 >= 1)
									goto loop27;

								EarlyExitException eee27 = new EarlyExitException( 27, input );
								DebugRecognitionException(eee27);
								throw eee27;
							}
							cnt27++;
						}
						loop27:
							;

						} finally { DebugExitSubRule(27); }


						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(255, 78);
				DEDENT65=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1059);  
				stream_DEDENT.Add(DEDENT65);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(255, 90);
				// SugarCpp.g:255:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(255, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(255, 99);
				// SugarCpp.g:255:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(255, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(255, 110);
				// SugarCpp.g:255:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(255, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:258:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(259, 4);
			// SugarCpp.g:259:4: ( attribute )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			int LA30_0 = input.LA(1);

			if ((LA30_0==122))
			{
				alt30 = 1;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:4: attribute
				{
				DebugLocation(259, 4);
				PushFollow(Follow._attribute_in_enum_def1084);
				attribute66=attribute();
				PopFollow();

				stream_attribute.Add(attribute66.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(30); }

			DebugLocation(259, 15);
			string_literal67=(IToken)Match(input,136,Follow._136_in_enum_def1087);  
			stream_136.Add(string_literal67);

			DebugLocation(259, 22);
			PushFollow(Follow._ident_in_enum_def1089);
			ident68=ident();
			PopFollow();

			stream_ident.Add(ident68.Tree);
			DebugLocation(259, 28);
			char_literal69=(IToken)Match(input,112,Follow._112_in_enum_def1091);  
			stream_112.Add(char_literal69);

			DebugLocation(259, 32);
			// SugarCpp.g:259:32: ( ident ( '|' ident )* )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==IDENT))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:33: ident ( '|' ident )*
				{
				DebugLocation(259, 33);
				PushFollow(Follow._ident_in_enum_def1094);
				ident70=ident();
				PopFollow();

				stream_ident.Add(ident70.Tree);
				DebugLocation(259, 39);
				// SugarCpp.g:259:39: ( '|' ident )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==165))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:259:40: '|' ident
						{
						DebugLocation(259, 40);
						char_literal71=(IToken)Match(input,165,Follow._165_in_enum_def1097);  
						stream_165.Add(char_literal71);

						DebugLocation(259, 44);
						PushFollow(Follow._ident_in_enum_def1099);
						ident72=ident();
						PopFollow();

						stream_ident.Add(ident72.Tree);

						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }


				}
				break;

			}
			} finally { DebugExitSubRule(32); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(259, 57);
				// SugarCpp.g:259:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(259, 64);
				// SugarCpp.g:259:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(259, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(259, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(259, 81);
				// SugarCpp.g:259:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(259, 94);
				// SugarCpp.g:259:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(259, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:262:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken DEDENT80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree DEDENT80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(262, 1);
		try
		{
			// SugarCpp.g:263:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:263:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(263, 4);
			// SugarCpp.g:263:4: ( attribute )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==122))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:4: attribute
				{
				DebugLocation(263, 4);
				PushFollow(Follow._attribute_in_namespace_def1132);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(263, 15);
			string_literal74=(IToken)Match(input,147,Follow._147_in_namespace_def1135);  
			stream_147.Add(string_literal74);

			DebugLocation(263, 27);
			PushFollow(Follow._ident_in_namespace_def1137);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(263, 33);
			// SugarCpp.g:263:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			try
			{
				alt36 = dfa36.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(263, 34);
				// SugarCpp.g:263:34: ( NEWLINE )+
				int cnt34=0;
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch (alt34)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:34: NEWLINE
						{
						DebugLocation(263, 34);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1140);  
						stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt34 >= 1)
							goto loop34;

						EarlyExitException eee34 = new EarlyExitException( 34, input );
						DebugRecognitionException(eee34);
						throw eee34;
					}
					cnt34++;
				}
				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(263, 43);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1143);  
				stream_INDENT.Add(INDENT77);

				DebugLocation(263, 50);
				// SugarCpp.g:263:50: ( NEWLINE )*
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch ( alt35 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:50: NEWLINE
						{
						DebugLocation(263, 50);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1145);  
						stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop35;
					}
				}

				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(263, 59);
				PushFollow(Follow._global_block_in_namespace_def1148);
				global_block79=global_block();
				PopFollow();

				stream_global_block.Add(global_block79.Tree);
				DebugLocation(263, 72);
				DEDENT80=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1150);  
				stream_DEDENT.Add(DEDENT80);


				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(263, 84);
				// SugarCpp.g:263:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(263, 96);
				// SugarCpp.g:263:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(263, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(263, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(263, 113);
				// SugarCpp.g:263:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(263, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:266:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal82 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		IToken char_literal88 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal82_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		CommonTree char_literal88_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(266, 1);
		try
		{
			// SugarCpp.g:267:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:267:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(267, 5);
			// SugarCpp.g:267:5: ( attribute )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==122))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:5: attribute
				{
				DebugLocation(267, 5);
				PushFollow(Follow._attribute_in_class_def1178);
				attribute81=attribute();
				PopFollow();

				stream_attribute.Add(attribute81.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(267, 16);
			string_literal82=(IToken)Match(input,131,Follow._131_in_class_def1181);  
			stream_131.Add(string_literal82);

			DebugLocation(267, 24);
			PushFollow(Follow._ident_in_class_def1183);
			ident83=ident();
			PopFollow();

			stream_ident.Add(ident83.Tree);
			DebugLocation(267, 30);
			// SugarCpp.g:267:30: ( generic_parameter )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==107))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:31: generic_parameter
				{
				DebugLocation(267, 31);
				PushFollow(Follow._generic_parameter_in_class_def1186);
				generic_parameter84=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter84.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(267, 51);
			// SugarCpp.g:267:51: ( '(' func_args ')' )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==86))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:52: '(' func_args ')'
				{
				DebugLocation(267, 52);
				char_literal85=(IToken)Match(input,86,Follow._86_in_class_def1191);  
				stream_86.Add(char_literal85);

				DebugLocation(267, 56);
				PushFollow(Follow._func_args_in_class_def1193);
				func_args86=func_args();
				PopFollow();

				stream_func_args.Add(func_args86.Tree);
				DebugLocation(267, 66);
				char_literal87=(IToken)Match(input,87,Follow._87_in_class_def1195);  
				stream_87.Add(char_literal87);


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(267, 72);
			// SugarCpp.g:267:72: ( ':' ident ( ',' ident )* )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==103))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:73: ':' ident ( ',' ident )*
				{
				DebugLocation(267, 73);
				char_literal88=(IToken)Match(input,103,Follow._103_in_class_def1200);  
				stream_103.Add(char_literal88);

				DebugLocation(267, 77);
				PushFollow(Follow._ident_in_class_def1202);
				ident89=ident();
				PopFollow();

				stream_ident.Add(ident89.Tree);
				DebugLocation(267, 83);
				// SugarCpp.g:267:83: ( ',' ident )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==93))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:84: ',' ident
						{
						DebugLocation(267, 84);
						char_literal90=(IToken)Match(input,93,Follow._93_in_class_def1205);  
						stream_93.Add(char_literal90);

						DebugLocation(267, 88);
						PushFollow(Follow._ident_in_class_def1207);
						ident91=ident();
						PopFollow();

						stream_ident.Add(ident91.Tree);

						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(267, 98);
			// SugarCpp.g:267:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			try
			{
				alt44 = dfa44.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(267, 99);
				// SugarCpp.g:267:99: ( NEWLINE )+
				int cnt42=0;
				try { DebugEnterSubRule(42);
				while (true)
				{
					int alt42=2;
					try { DebugEnterDecision(42, false);
					int LA42_0 = input.LA(1);

					if ((LA42_0==NEWLINE))
					{
						alt42 = 1;
					}


					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:99: NEWLINE
						{
						DebugLocation(267, 99);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1214);  
						stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt42 >= 1)
							goto loop42;

						EarlyExitException eee42 = new EarlyExitException( 42, input );
						DebugRecognitionException(eee42);
						throw eee42;
					}
					cnt42++;
				}
				loop42:
					;

				} finally { DebugExitSubRule(42); }

				DebugLocation(267, 108);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1217);  
				stream_INDENT.Add(INDENT93);

				DebugLocation(267, 115);
				// SugarCpp.g:267:115: ( NEWLINE )*
				try { DebugEnterSubRule(43);
				while (true)
				{
					int alt43=2;
					try { DebugEnterDecision(43, false);
					int LA43_0 = input.LA(1);

					if ((LA43_0==NEWLINE))
					{
						alt43 = 1;
					}


					} finally { DebugExitDecision(43); }
					switch ( alt43 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:115: NEWLINE
						{
						DebugLocation(267, 115);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1219);  
						stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop43;
					}
				}

				loop43:
					;

				} finally { DebugExitSubRule(43); }

				DebugLocation(267, 124);
				PushFollow(Follow._global_block_in_class_def1222);
				global_block95=global_block();
				PopFollow();

				stream_global_block.Add(global_block95.Tree);
				DebugLocation(267, 137);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1224);  
				stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, attribute, func_args, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(267, 149);
				// SugarCpp.g:267:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(267, 157);
				// SugarCpp.g:267:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(267, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(267, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(267, 174);
				// SugarCpp.g:267:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(267, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(267, 193);
				// SugarCpp.g:267:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(267, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(267, 204);
				// SugarCpp.g:267:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(267, 205);
					// SugarCpp.g:267:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(267, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(267, 218);
					// SugarCpp.g:267:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(267, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(267, 228);
				// SugarCpp.g:267:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(267, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:270:1: type_name : type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 14);
		TraceIn("type_name", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr102 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(270, 1);
		try
		{
			// SugarCpp.g:271:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			{
			DebugLocation(271, 4);
			PushFollow(Follow._type_star_in_type_name1267);
			type_star97=type_star();
			PopFollow();

			stream_type_star.Add(type_star97.Tree);
			DebugLocation(271, 14);
			// SugarCpp.g:271:14: ( '&' -> ^( Type_Ref type_star ) | '[' expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | -> type_star )
			int alt46=3;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case 84:
				{
				alt46 = 1;
				}
				break;
			case 122:
				{
				alt46 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 86:
			case 87:
			case 93:
			case 105:
			case 106:
			case 112:
			case 115:
			case 138:
			case 139:
			case 141:
			case 158:
			case 160:
			case 164:
			case 168:
				{
				alt46 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:16: '&'
				{
				DebugLocation(271, 16);
				char_literal98=(IToken)Match(input,84,Follow._84_in_type_name1271);  
				stream_84.Add(char_literal98);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 271:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(271, 23);
					// SugarCpp.g:271:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(271, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(271, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:272:7: '[' expr ( ',' expr )* ']'
				{
				DebugLocation(272, 7);
				char_literal99=(IToken)Match(input,122,Follow._122_in_type_name1287);  
				stream_122.Add(char_literal99);

				DebugLocation(272, 11);
				PushFollow(Follow._expr_in_type_name1289);
				expr100=expr();
				PopFollow();

				stream_expr.Add(expr100.Tree);
				DebugLocation(272, 16);
				// SugarCpp.g:272:16: ( ',' expr )*
				try { DebugEnterSubRule(45);
				while (true)
				{
					int alt45=2;
					try { DebugEnterDecision(45, false);
					int LA45_0 = input.LA(1);

					if ((LA45_0==93))
					{
						alt45 = 1;
					}


					} finally { DebugExitDecision(45); }
					switch ( alt45 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:272:17: ',' expr
						{
						DebugLocation(272, 17);
						char_literal101=(IToken)Match(input,93,Follow._93_in_type_name1292);  
						stream_93.Add(char_literal101);

						DebugLocation(272, 21);
						PushFollow(Follow._expr_in_type_name1294);
						expr102=expr();
						PopFollow();

						stream_expr.Add(expr102.Tree);

						}
						break;

					default:
						goto loop45;
					}
				}

				loop45:
					;

				} finally { DebugExitSubRule(45); }

				DebugLocation(272, 28);
				char_literal103=(IToken)Match(input,123,Follow._123_in_type_name1298);  
				stream_123.Add(char_literal103);



				{
				// AST REWRITE
				// elements: expr, type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 272:32: -> ^( Type_Array type_star ( expr )+ )
				{
					DebugLocation(272, 35);
					// SugarCpp.g:272:35: ^( Type_Array type_star ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(272, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

					DebugLocation(272, 48);
					adaptor.AddChild(root_1, stream_type_star.NextTree());
					DebugLocation(272, 58);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(272, 58);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:273:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 273:7: -> type_star
				{
					DebugLocation(273, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 14);
			LeaveRule("type_name", 14);
			LeaveRule_type_name();
		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:277:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 15);
		TraceIn("type_star", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(277, 1);
		try
		{
			// SugarCpp.g:278:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:278:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(278, 4);
			PushFollow(Follow._type_template_type_in_type_star1336);
			type_template_type104=type_template_type();
			PopFollow();

			stream_type_template_type.Add(type_template_type104.Tree);
			DebugLocation(278, 23);
			// SugarCpp.g:278:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==88))
			{
				alt48 = 1;
			}
			else if ((LA48_0==DEDENT||LA48_0==IDENT||LA48_0==NEWLINE||LA48_0==84||(LA48_0>=86 && LA48_0<=87)||LA48_0==93||(LA48_0>=105 && LA48_0<=106)||LA48_0==112||LA48_0==115||LA48_0==122||(LA48_0>=138 && LA48_0<=139)||LA48_0==141||LA48_0==158||LA48_0==160||LA48_0==164||LA48_0==168))
			{
				alt48 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:278:25: ( '*' )+
				{
				DebugLocation(278, 25);
				// SugarCpp.g:278:25: ( '*' )+
				int cnt47=0;
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==88))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch (alt47)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:278:25: '*'
						{
						DebugLocation(278, 25);
						char_literal105=(IToken)Match(input,88,Follow._88_in_type_star1340);  
						stream_88.Add(char_literal105);


						}
						break;

					default:
						if (cnt47 >= 1)
							goto loop47;

						EarlyExitException eee47 = new EarlyExitException( 47, input );
						DebugRecognitionException(eee47);
						throw eee47;
					}
					cnt47++;
				}
				loop47:
					;

				} finally { DebugExitSubRule(47); }



				{
				// AST REWRITE
				// elements: 88, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 278:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(278, 33);
					// SugarCpp.g:278:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(278, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(278, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(278, 64);
					if (!(stream_88.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_88.HasNext )
					{
						DebugLocation(278, 64);
						adaptor.AddChild(root_1, stream_88.NextNode());

					}
					stream_88.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:279:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:10: -> type_template_type
				{
					DebugLocation(279, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 15);
			LeaveRule("type_star", 15);
			LeaveRule_type_star();
		}
		DebugLocation(281, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:283:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 16);
		TraceIn("type_template_type", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken char_literal111 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree char_literal111_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(283, 1);
		try
		{
			// SugarCpp.g:284:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:284:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(284, 4);
			PushFollow(Follow._type_ident_in_type_template_type1386);
			type_ident106=type_ident();
			PopFollow();

			stream_type_ident.Add(type_ident106.Tree);
			DebugLocation(284, 15);
			// SugarCpp.g:284:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==107))
			{
				alt51 = 1;
			}
			else if ((LA51_0==DEDENT||LA51_0==IDENT||LA51_0==NEWLINE||LA51_0==84||(LA51_0>=86 && LA51_0<=88)||LA51_0==93||(LA51_0>=105 && LA51_0<=106)||LA51_0==112||LA51_0==115||LA51_0==122||(LA51_0>=138 && LA51_0<=139)||LA51_0==141||LA51_0==158||LA51_0==160||LA51_0==164||LA51_0==168))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:284:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(284, 17);
				char_literal107=(IToken)Match(input,107,Follow._107_in_type_template_type1390);  
				stream_107.Add(char_literal107);

				DebugLocation(284, 21);
				// SugarCpp.g:284:21: ( type_name ( ',' type_name )* )?
				int alt50=2;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				int LA50_0 = input.LA(1);

				if ((LA50_0==IDENT||LA50_0==132||LA50_0==152||LA50_0==159))
				{
					alt50 = 1;
				}
				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:284:22: type_name ( ',' type_name )*
					{
					DebugLocation(284, 22);
					PushFollow(Follow._type_name_in_type_template_type1393);
					type_name108=type_name();
					PopFollow();

					stream_type_name.Add(type_name108.Tree);
					DebugLocation(284, 32);
					// SugarCpp.g:284:32: ( ',' type_name )*
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==93))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch ( alt49 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:284:33: ',' type_name
							{
							DebugLocation(284, 33);
							char_literal109=(IToken)Match(input,93,Follow._93_in_type_template_type1396);  
							stream_93.Add(char_literal109);

							DebugLocation(284, 37);
							PushFollow(Follow._type_name_in_type_template_type1398);
							type_name110=type_name();
							PopFollow();

							stream_type_name.Add(type_name110.Tree);

							}
							break;

						default:
							goto loop49;
						}
					}

					loop49:
						;

					} finally { DebugExitSubRule(49); }


					}
					break;

				}
				} finally { DebugExitSubRule(50); }

				DebugLocation(284, 51);
				char_literal111=(IToken)Match(input,115,Follow._115_in_type_template_type1404);  
				stream_115.Add(char_literal111);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(284, 58);
					// SugarCpp.g:284:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(284, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(284, 85);
					// SugarCpp.g:284:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(284, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:285:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 285:8: -> type_ident
				{
					DebugLocation(285, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 16);
			LeaveRule("type_template_type", 16);
			LeaveRule_type_template_type();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:289:1: type_ident : ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 17);
		TraceIn("type_ident", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken string_literal113 = default(IToken);
		IToken string_literal114 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident115 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree string_literal113_tree = default(CommonTree);
		CommonTree string_literal114_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(289, 1);
		try
		{
			// SugarCpp.g:290:2: ( ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:290:4: ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident
			{
			DebugLocation(290, 4);
			// SugarCpp.g:290:4: ( 'const' )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==132))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:4: 'const'
				{
				DebugLocation(290, 4);
				string_literal112=(IToken)Match(input,132,Follow._132_in_type_ident1444);  
				stream_132.Add(string_literal112);


				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(290, 13);
			// SugarCpp.g:290:13: ( 'unsigned' )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			int LA53_0 = input.LA(1);

			if ((LA53_0==159))
			{
				alt53 = 1;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:13: 'unsigned'
				{
				DebugLocation(290, 13);
				string_literal113=(IToken)Match(input,159,Follow._159_in_type_ident1447);  
				stream_159.Add(string_literal113);


				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(290, 25);
			// SugarCpp.g:290:25: ( 'struct' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==152))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:25: 'struct'
				{
				DebugLocation(290, 25);
				string_literal114=(IToken)Match(input,152,Follow._152_in_type_ident1450);  
				stream_152.Add(string_literal114);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(290, 35);
			PushFollow(Follow._ident_in_type_ident1453);
			ident115=ident();
			PopFollow();

			stream_ident.Add(ident115.Tree);


			{
			// AST REWRITE
			// elements: ident, 159, 152, 132
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 290:41: -> ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
			{
				DebugLocation(290, 44);
				// SugarCpp.g:290:44: ^( Type_Ident ( 'const' )? ( 'unsigned' )? ( 'struct' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(290, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(290, 57);
				// SugarCpp.g:290:57: ( 'const' )?
				if (stream_132.HasNext)
				{
					DebugLocation(290, 57);
					adaptor.AddChild(root_1, stream_132.NextNode());

				}
				stream_132.Reset();
				DebugLocation(290, 66);
				// SugarCpp.g:290:66: ( 'unsigned' )?
				if (stream_159.HasNext)
				{
					DebugLocation(290, 66);
					adaptor.AddChild(root_1, stream_159.NextNode());

				}
				stream_159.Reset();
				DebugLocation(290, 78);
				// SugarCpp.g:290:78: ( 'struct' )?
				if (stream_152.HasNext)
				{
					DebugLocation(290, 78);
					adaptor.AddChild(root_1, stream_152.NextNode());

				}
				stream_152.Reset();
				DebugLocation(290, 88);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 17);
			LeaveRule("type_ident", 17);
			LeaveRule_type_ident();
		}
		DebugLocation(291, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:293:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 18);
		TraceIn("generic_parameter_inside", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(293, 1);
		try
		{
			// SugarCpp.g:294:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:294:4: ident ( ',' ident )*
			{
			DebugLocation(294, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1481);
			ident116=ident();
			PopFollow();

			stream_ident.Add(ident116.Tree);
			DebugLocation(294, 10);
			// SugarCpp.g:294:10: ( ',' ident )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=2;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==93))
				{
					alt55 = 1;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:294:11: ',' ident
					{
					DebugLocation(294, 11);
					char_literal117=(IToken)Match(input,93,Follow._93_in_generic_parameter_inside1484);  
					stream_93.Add(char_literal117);

					DebugLocation(294, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1486);
					ident118=ident();
					PopFollow();

					stream_ident.Add(ident118.Tree);

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 294:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(294, 26);
				// SugarCpp.g:294:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(294, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(294, 47);
				// SugarCpp.g:294:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(294, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 18);
			LeaveRule("generic_parameter_inside", 18);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(295, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:297:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 19);
		TraceIn("generic_parameter", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(297, 1);
		try
		{
			// SugarCpp.g:298:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:298:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(298, 4);
			char_literal119=(IToken)Match(input,107,Follow._107_in_generic_parameter1508);  
			stream_107.Add(char_literal119);

			DebugLocation(298, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1510);
			generic_parameter_inside120=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside120.Tree);
			DebugLocation(298, 33);
			char_literal121=(IToken)Match(input,115,Follow._115_in_generic_parameter1512);  
			stream_115.Add(char_literal121);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 298:37: -> generic_parameter_inside
			{
				DebugLocation(298, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 19);
			LeaveRule("generic_parameter", 19);
			LeaveRule_generic_parameter();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:301:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 20);
		TraceIn("func_args", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(302, 4);
			PushFollow(Follow._func_args_item_in_func_args1527);
			func_args_item122=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item122.Tree);
			DebugLocation(302, 19);
			// SugarCpp.g:302:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(56);
			while (true)
			{
				int alt56=2;
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==93))
				{
					alt56 = 1;
				}


				} finally { DebugExitDecision(56); }
				switch ( alt56 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:302:20: ',' func_args_item
					{
					DebugLocation(302, 20);
					char_literal123=(IToken)Match(input,93,Follow._93_in_func_args1530);  
					stream_93.Add(char_literal123);

					DebugLocation(302, 24);
					PushFollow(Follow._func_args_item_in_func_args1532);
					func_args_item124=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item124.Tree);

					}
					break;

				default:
					goto loop56;
				}
			}

			loop56:
				;

			} finally { DebugExitSubRule(56); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(302, 44);
				// SugarCpp.g:302:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(302, 56);
				// SugarCpp.g:302:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(302, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 20);
			LeaveRule("func_args", 20);
			LeaveRule_func_args();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:305:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 21);
		TraceIn("func_args_item", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal126 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken string_literal129 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken string_literal134 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name127 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr130 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr135 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree string_literal129_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree string_literal134_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(305, 1);
		try
		{
			// SugarCpp.g:306:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt60=2;
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==IDENT))
			{
				alt60 = 1;
			}
			else if ((LA60_0==105))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:306:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(306, 4);
				PushFollow(Follow._ident_list_in_func_args_item1554);
				ident_list125=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list125.Tree);
				DebugLocation(306, 15);
				char_literal126=(IToken)Match(input,103,Follow._103_in_func_args_item1556);  
				stream_103.Add(char_literal126);

				DebugLocation(306, 19);
				PushFollow(Follow._type_name_in_func_args_item1558);
				type_name127=type_name();
				PopFollow();

				stream_type_name.Add(type_name127.Tree);
				DebugLocation(306, 29);
				// SugarCpp.g:306:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt59=3;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				switch (input.LA(1))
				{
				case 105:
				case 112:
					{
					alt59 = 1;
					}
					break;
				case 86:
					{
					alt59 = 2;
					}
					break;
				case 87:
				case 93:
					{
					alt59 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:306:31: ( '=' | ':=' ) expr
					{
					DebugLocation(306, 31);
					// SugarCpp.g:306:31: ( '=' | ':=' )
					int alt57=2;
					try { DebugEnterSubRule(57);
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==112))
					{
						alt57 = 1;
					}
					else if ((LA57_0==105))
					{
						alt57 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:306:32: '='
						{
						DebugLocation(306, 32);
						char_literal128=(IToken)Match(input,112,Follow._112_in_func_args_item1563);  
						stream_112.Add(char_literal128);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:306:38: ':='
						{
						DebugLocation(306, 38);
						string_literal129=(IToken)Match(input,105,Follow._105_in_func_args_item1567);  
						stream_105.Add(string_literal129);


						}
						break;

					}
					} finally { DebugExitSubRule(57); }

					DebugLocation(306, 44);
					PushFollow(Follow._expr_in_func_args_item1570);
					expr130=expr();
					PopFollow();

					stream_expr.Add(expr130.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 306:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(306, 53);
						// SugarCpp.g:306:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(306, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(306, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(306, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(306, 93);
						// SugarCpp.g:306:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(306, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:307:33: '(' ( expr_list )? ')'
					{
					DebugLocation(307, 33);
					char_literal131=(IToken)Match(input,86,Follow._86_in_func_args_item1618);  
					stream_86.Add(char_literal131);

					DebugLocation(307, 37);
					// SugarCpp.g:307:37: ( expr_list )?
					int alt58=2;
					try { DebugEnterSubRule(58);
					try { DebugEnterDecision(58, false);
					int LA58_0 = input.LA(1);

					if ((LA58_0==IDENT||LA58_0==NUMBER||LA58_0==STRING||LA58_0==79||LA58_0==84||LA58_0==86||LA58_0==88||(LA58_0>=90 && LA58_0<=91)||(LA58_0>=94 && LA58_0<=95)||(LA58_0>=121 && LA58_0<=122)||LA58_0==144||LA58_0==146||(LA58_0>=148 && LA58_0<=149)||LA58_0==168))
					{
						alt58 = 1;
					}
					} finally { DebugExitDecision(58); }
					switch (alt58)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:307:37: expr_list
						{
						DebugLocation(307, 37);
						PushFollow(Follow._expr_list_in_func_args_item1620);
						expr_list132=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list132.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(58); }

					DebugLocation(307, 48);
					char_literal133=(IToken)Match(input,87,Follow._87_in_func_args_item1623);  
					stream_87.Add(char_literal133);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 307:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(307, 56);
						// SugarCpp.g:307:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(307, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(307, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(307, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(307, 98);
						// SugarCpp.g:307:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(307, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:308:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 308:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(308, 18);
						// SugarCpp.g:308:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(308, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(308, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(308, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:310:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(310, 8);
				string_literal134=(IToken)Match(input,105,Follow._105_in_func_args_item1680); 
				string_literal134_tree = (CommonTree)adaptor.Create(string_literal134);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal134_tree, root_0);
				DebugLocation(310, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1684);
				modify_expr135=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr135.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 21);
			LeaveRule("func_args_item", 21);
			LeaveRule_func_args_item();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:313:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 22);
		TraceIn("operator", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set136 = default(IToken);

		CommonTree set136_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(313, 1);
		try
		{
			// SugarCpp.g:314:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(314, 2);

			set136=(IToken)input.LT(1);
			if (input.LA(1)==88||input.LA(1)==90||input.LA(1)==94||input.LA(1)==101)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set136));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 22);
			LeaveRule("operator", 22);
			LeaveRule_operator();
		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:317:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 23);
		TraceIn("func_name", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal138 = default(IToken);
		IToken char_literal140 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(317, 1);
		try
		{
			// SugarCpp.g:318:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt61=2;
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==IDENT))
			{
				alt61 = 1;
			}
			else if ((LA61_0==86))
			{
				alt61 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:318:4: ident
				{
				DebugLocation(318, 4);
				PushFollow(Follow._ident_in_func_name1718);
				ident137=ident();
				PopFollow();

				stream_ident.Add(ident137.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 318:10: -> ident
				{
					DebugLocation(318, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:319:4: '(' operator ')'
				{
				DebugLocation(319, 4);
				char_literal138=(IToken)Match(input,86,Follow._86_in_func_name1727);  
				stream_86.Add(char_literal138);

				DebugLocation(319, 8);
				PushFollow(Follow._operator_in_func_name1729);
				operator139=@operator();
				PopFollow();

				stream_operator.Add(operator139.Tree);
				DebugLocation(319, 17);
				char_literal140=(IToken)Match(input,87,Follow._87_in_func_name1731);  
				stream_87.Add(char_literal140);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 319:21: -> operator
				{
					DebugLocation(319, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 23);
			LeaveRule("func_name", 23);
			LeaveRule_func_name();
		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:322:1: func_def : ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 24);
		TraceIn("func_def", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal143 = default(IToken);
		IToken char_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		IToken NEWLINE149 = default(IToken);
		IToken char_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		CommonTree NEWLINE149_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(322, 4);
		try
		{
			// SugarCpp.g:323:2: ( ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			{
			DebugLocation(323, 4);
			// SugarCpp.g:323:4: ( attribute )?
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==122))
			{
				alt62 = 1;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:4: attribute
				{
				DebugLocation(323, 4);
				PushFollow(Follow._attribute_in_func_def1746);
				attribute141=attribute();
				PopFollow();

				stream_attribute.Add(attribute141.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(62); }

			DebugLocation(323, 15);
			// SugarCpp.g:323:15: ( type_name )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			try
			{
				alt63 = dfa63.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:15: type_name
				{
				DebugLocation(323, 15);
				PushFollow(Follow._type_name_in_func_def1749);
				type_name142=type_name();
				PopFollow();

				stream_type_name.Add(type_name142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(323, 26);
			// SugarCpp.g:323:26: ( '~' )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==168))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:26: '~'
				{
				DebugLocation(323, 26);
				char_literal143=(IToken)Match(input,168,Follow._168_in_func_def1752);  
				stream_168.Add(char_literal143);


				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(323, 31);
			PushFollow(Follow._func_name_in_func_def1755);
			func_name144=func_name();
			PopFollow();

			stream_func_name.Add(func_name144.Tree);
			DebugLocation(323, 41);
			// SugarCpp.g:323:41: ( generic_parameter )?
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==107))
			{
				alt65 = 1;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:41: generic_parameter
				{
				DebugLocation(323, 41);
				PushFollow(Follow._generic_parameter_in_func_def1757);
				generic_parameter145=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter145.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(65); }

			DebugLocation(323, 60);
			char_literal146=(IToken)Match(input,86,Follow._86_in_func_def1760);  
			stream_86.Add(char_literal146);

			DebugLocation(323, 64);
			// SugarCpp.g:323:64: ( func_args )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==IDENT||LA66_0==105))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:64: func_args
				{
				DebugLocation(323, 64);
				PushFollow(Follow._func_args_in_func_def1762);
				func_args147=func_args();
				PopFollow();

				stream_func_args.Add(func_args147.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(323, 75);
			char_literal148=(IToken)Match(input,87,Follow._87_in_func_def1765);  
			stream_87.Add(char_literal148);

			DebugLocation(323, 79);
			// SugarCpp.g:323:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' where_expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) )
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==NEWLINE))
			{
				alt68 = 1;
			}
			else if ((LA68_0==112))
			{
				alt68 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:80: ( NEWLINE )+ stmt_block
				{
				DebugLocation(323, 80);
				// SugarCpp.g:323:80: ( NEWLINE )+
				int cnt67=0;
				try { DebugEnterSubRule(67);
				while (true)
				{
					int alt67=2;
					try { DebugEnterDecision(67, false);
					int LA67_0 = input.LA(1);

					if ((LA67_0==NEWLINE))
					{
						alt67 = 1;
					}


					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:323:80: NEWLINE
						{
						DebugLocation(323, 80);
						NEWLINE149=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1768);  
						stream_NEWLINE.Add(NEWLINE149);


						}
						break;

					default:
						if (cnt67 >= 1)
							goto loop67;

						EarlyExitException eee67 = new EarlyExitException( 67, input );
						DebugRecognitionException(eee67);
						throw eee67;
					}
					cnt67++;
				}
				loop67:
					;

				} finally { DebugExitSubRule(67); }

				DebugLocation(323, 89);
				PushFollow(Follow._stmt_block_in_func_def1771);
				stmt_block150=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block150.Tree);


				{
				// AST REWRITE
				// elements: generic_parameter, attribute, func_name, stmt_block, type_name, 168, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 323:100: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(323, 103);
					// SugarCpp.g:323:103: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(323, 105);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(323, 114);
					// SugarCpp.g:323:114: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(323, 114);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(323, 125);
					// SugarCpp.g:323:125: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(323, 125);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(323, 136);
					// SugarCpp.g:323:136: ( '~' )?
					if (stream_168.HasNext)
					{
						DebugLocation(323, 136);
						adaptor.AddChild(root_1, stream_168.NextNode());

					}
					stream_168.Reset();
					DebugLocation(323, 141);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(323, 151);
					// SugarCpp.g:323:151: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(323, 151);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(323, 170);
					// SugarCpp.g:323:170: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(323, 170);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(323, 181);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:324:27: '=' where_expr
				{
				DebugLocation(324, 27);
				char_literal151=(IToken)Match(input,112,Follow._112_in_func_def1824);  
				stream_112.Add(char_literal151);

				DebugLocation(324, 31);
				PushFollow(Follow._where_expr_in_func_def1826);
				where_expr152=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr152.Tree);


				{
				// AST REWRITE
				// elements: type_name, func_args, where_expr, 168, generic_parameter, func_name, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:43: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
				{
					DebugLocation(324, 46);
					// SugarCpp.g:324:46: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(324, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(324, 57);
					// SugarCpp.g:324:57: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(324, 57);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(324, 68);
					// SugarCpp.g:324:68: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(324, 68);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(324, 79);
					// SugarCpp.g:324:79: ( '~' )?
					if (stream_168.HasNext)
					{
						DebugLocation(324, 79);
						adaptor.AddChild(root_1, stream_168.NextNode());

					}
					stream_168.Reset();
					DebugLocation(324, 84);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(324, 94);
					// SugarCpp.g:324:94: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(324, 94);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(324, 113);
					// SugarCpp.g:324:113: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(324, 113);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(324, 124);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 24);
			LeaveRule("func_def", 24);
			LeaveRule_func_def();
		}
		DebugLocation(325, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:327:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 25);
		TraceIn("stmt_block_item", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE154 = default(IToken);
		IToken NEWLINE156 = default(IToken);
		IToken char_literal157 = default(IToken);
		IToken NEWLINE158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple155 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE154_tree = default(CommonTree);
		CommonTree NEWLINE156_tree = default(CommonTree);
		CommonTree char_literal157_tree = default(CommonTree);
		CommonTree NEWLINE158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(327, 1);
		try
		{
			// SugarCpp.g:328:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==133||(LA73_0>=137 && LA73_0<=139)||LA73_0==145||LA73_0==153||LA73_0==156||LA73_0==158||LA73_0==160||LA73_0==164))
			{
				alt73 = 1;
			}
			else if ((LA73_0==IDENT||LA73_0==79||LA73_0==84||LA73_0==86||LA73_0==88||(LA73_0>=90 && LA73_0<=91)||(LA73_0>=94 && LA73_0<=95)||LA73_0==121||LA73_0==149||LA73_0==151||LA73_0==157||LA73_0==161||LA73_0==168))
			{
				alt73 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:328:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(328, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item1867);
				stmt_complex153=stmt_complex();
				PopFollow();

				stream_stmt_complex.Add(stmt_complex153.Tree);
				DebugLocation(328, 17);
				// SugarCpp.g:328:17: ( NEWLINE )+
				int cnt69=0;
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_0 = input.LA(1);

					if ((LA69_0==NEWLINE))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:328:17: NEWLINE
						{
						DebugLocation(328, 17);
						NEWLINE154=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1869);  
						stream_NEWLINE.Add(NEWLINE154);


						}
						break;

					default:
						if (cnt69 >= 1)
							goto loop69;

						EarlyExitException eee69 = new EarlyExitException( 69, input );
						DebugRecognitionException(eee69);
						throw eee69;
					}
					cnt69++;
				}
				loop69:
					;

				} finally { DebugExitSubRule(69); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 328:26: -> stmt_complex
				{
					DebugLocation(328, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:329:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(329, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item1879);
				stmt_simple155=stmt_simple();
				PopFollow();

				stream_stmt_simple.Add(stmt_simple155.Tree);
				DebugLocation(329, 16);
				// SugarCpp.g:329:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==NEWLINE))
				{
					alt72 = 1;
				}
				else if ((LA72_0==106))
				{
					alt72 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:17: ( NEWLINE )+
					{
					DebugLocation(329, 17);
					// SugarCpp.g:329:17: ( NEWLINE )+
					int cnt70=0;
					try { DebugEnterSubRule(70);
					while (true)
					{
						int alt70=2;
						try { DebugEnterDecision(70, false);
						int LA70_0 = input.LA(1);

						if ((LA70_0==NEWLINE))
						{
							alt70 = 1;
						}


						} finally { DebugExitDecision(70); }
						switch (alt70)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:329:17: NEWLINE
							{
							DebugLocation(329, 17);
							NEWLINE156=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1882);  
							stream_NEWLINE.Add(NEWLINE156);


							}
							break;

						default:
							if (cnt70 >= 1)
								goto loop70;

							EarlyExitException eee70 = new EarlyExitException( 70, input );
							DebugRecognitionException(eee70);
							throw eee70;
						}
						cnt70++;
					}
					loop70:
						;

					} finally { DebugExitSubRule(70); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:329:28: ';' ( NEWLINE )*
					{
					DebugLocation(329, 28);
					char_literal157=(IToken)Match(input,106,Follow._106_in_stmt_block_item1887);  
					stream_106.Add(char_literal157);

					DebugLocation(329, 32);
					// SugarCpp.g:329:32: ( NEWLINE )*
					try { DebugEnterSubRule(71);
					while (true)
					{
						int alt71=2;
						try { DebugEnterDecision(71, false);
						int LA71_0 = input.LA(1);

						if ((LA71_0==NEWLINE))
						{
							alt71 = 1;
						}


						} finally { DebugExitDecision(71); }
						switch ( alt71 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:329:32: NEWLINE
							{
							DebugLocation(329, 32);
							NEWLINE158=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item1889);  
							stream_NEWLINE.Add(NEWLINE158);


							}
							break;

						default:
							goto loop71;
						}
					}

					loop71:
						;

					} finally { DebugExitSubRule(71); }


					}
					break;

				}
				} finally { DebugExitSubRule(72); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:42: -> stmt_simple
				{
					DebugLocation(329, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 25);
			LeaveRule("stmt_block_item", 25);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:332:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 26);
		TraceIn("stmt_block", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT159 = default(IToken);
		IToken NEWLINE160 = default(IToken);
		IToken DEDENT162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT159_tree = default(CommonTree);
		CommonTree NEWLINE160_tree = default(CommonTree);
		CommonTree DEDENT162_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:333:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(333, 4);
			INDENT159=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1906);  
			stream_INDENT.Add(INDENT159);

			DebugLocation(333, 11);
			// SugarCpp.g:333:11: ( NEWLINE )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==NEWLINE))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:11: NEWLINE
					{
					DebugLocation(333, 11);
					NEWLINE160=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1908);  
					stream_NEWLINE.Add(NEWLINE160);


					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }

			DebugLocation(333, 20);
			// SugarCpp.g:333:20: ( stmt_block_item )*
			try { DebugEnterSubRule(75);
			while (true)
			{
				int alt75=2;
				try { DebugEnterDecision(75, false);
				int LA75_0 = input.LA(1);

				if ((LA75_0==IDENT||LA75_0==79||LA75_0==84||LA75_0==86||LA75_0==88||(LA75_0>=90 && LA75_0<=91)||(LA75_0>=94 && LA75_0<=95)||LA75_0==121||LA75_0==133||(LA75_0>=137 && LA75_0<=139)||LA75_0==145||LA75_0==149||LA75_0==151||LA75_0==153||(LA75_0>=156 && LA75_0<=158)||(LA75_0>=160 && LA75_0<=161)||LA75_0==164||LA75_0==168))
				{
					alt75 = 1;
				}


				} finally { DebugExitDecision(75); }
				switch ( alt75 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:20: stmt_block_item
					{
					DebugLocation(333, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block1911);
					stmt_block_item161=stmt_block_item();
					PopFollow();

					stream_stmt_block_item.Add(stmt_block_item161.Tree);

					}
					break;

				default:
					goto loop75;
				}
			}

			loop75:
				;

			} finally { DebugExitSubRule(75); }

			DebugLocation(333, 37);
			DEDENT162=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1914);  
			stream_DEDENT.Add(DEDENT162);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 333:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(333, 47);
				// SugarCpp.g:333:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(333, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(333, 60);
				// SugarCpp.g:333:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(333, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 26);
			LeaveRule("stmt_block", 26);
			LeaveRule_stmt_block();
		}
		DebugLocation(334, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:336:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 27);
		TraceIn("stmt", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple163 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex164 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(336, 1);
		try
		{
			// SugarCpp.g:337:2: ( stmt_simple | stmt_complex )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==IDENT||LA76_0==79||LA76_0==84||LA76_0==86||LA76_0==88||(LA76_0>=90 && LA76_0<=91)||(LA76_0>=94 && LA76_0<=95)||LA76_0==121||LA76_0==149||LA76_0==151||LA76_0==157||LA76_0==161||LA76_0==168))
			{
				alt76 = 1;
			}
			else if ((LA76_0==133||(LA76_0>=137 && LA76_0<=139)||LA76_0==145||LA76_0==153||LA76_0==156||LA76_0==158||LA76_0==160||LA76_0==164))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:337:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 4);
				PushFollow(Follow._stmt_simple_in_stmt1934);
				stmt_simple163=stmt_simple();
				PopFollow();

				adaptor.AddChild(root_0, stmt_simple163.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:338:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(338, 4);
				PushFollow(Follow._stmt_complex_in_stmt1939);
				stmt_complex164=stmt_complex();
				PopFollow();

				adaptor.AddChild(root_0, stmt_complex164.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 27);
			LeaveRule("stmt", 27);
			LeaveRule_stmt();
		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:341:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 28);
		TraceIn("stmt_simple", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(341, 1);
		try
		{
			// SugarCpp.g:342:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:342:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(342, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple1950);
			stmt_expr165=stmt_expr();
			PopFollow();

			adaptor.AddChild(root_0, stmt_expr165.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 28);
			LeaveRule("stmt_simple", 28);
			LeaveRule_stmt_simple();
		}
		DebugLocation(343, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:345:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 29);
		TraceIn("stmt_complex", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(345, 1);
		try
		{
			// SugarCpp.g:346:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt77=6;
			try { DebugEnterDecision(77, false);
			switch (input.LA(1))
			{
			case 139:
			case 158:
				{
				alt77 = 1;
				}
				break;
			case 138:
				{
				alt77 = 2;
				}
				break;
			case 145:
			case 160:
			case 164:
				{
				alt77 = 3;
				}
				break;
			case 156:
				{
				alt77 = 4;
				}
				break;
			case 153:
				{
				alt77 = 5;
				}
				break;
			case 133:
			case 137:
				{
				alt77 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:346:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(346, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex1961);
				stmt_if166=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if166.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:347:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(347, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex1966);
				stmt_for167=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for167.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:348:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(348, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex1971);
				stmt_while168=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while168.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:349:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(349, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex1976);
				stmt_try169=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try169.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:350:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(350, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex1981);
				stmt_switch170=stmt_switch();
				PopFollow();

				adaptor.AddChild(root_0, stmt_switch170.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:351:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(351, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex1986);
				stmt_defer171=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer171.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 29);
			LeaveRule("stmt_complex", 29);
			LeaveRule_stmt_complex();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:354:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 30);
		TraceIn("stmt_expr", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal172 = default(IToken);
		IToken string_literal174 = default(IToken);
		IToken string_literal176 = default(IToken);
		IToken string_literal178 = default(IToken);
		IToken string_literal180 = default(IToken);
		IToken char_literal182 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal172_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		CommonTree string_literal178_tree = default(CommonTree);
		CommonTree string_literal180_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(354, 1);
		try
		{
			// SugarCpp.g:355:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:355:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(355, 4);
			// SugarCpp.g:355:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:355:5: a= stmt_expr_item
			{
			DebugLocation(355, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2000);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 355:22: -> $a
			{
				DebugLocation(355, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(355, 29);
			// SugarCpp.g:355:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(79);
			while (true)
			{
				int alt79=6;
				try { DebugEnterDecision(79, false);
				switch (input.LA(1))
				{
				case 139:
					{
					alt79 = 1;
					}
					break;
				case 158:
					{
					alt79 = 2;
					}
					break;
				case 164:
					{
					alt79 = 3;
					}
					break;
				case 160:
					{
					alt79 = 4;
					}
					break;
				case 138:
					{
					alt79 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(79); }
				switch ( alt79 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:355:31: 'if' expr
					{
					DebugLocation(355, 31);
					string_literal172=(IToken)Match(input,139,Follow._139_in_stmt_expr2010);  
					stream_139.Add(string_literal172);

					DebugLocation(355, 36);
					PushFollow(Follow._expr_in_stmt_expr2012);
					expr173=expr();
					PopFollow();

					stream_expr.Add(expr173.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 355:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(355, 44);
						// SugarCpp.g:355:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(355, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(355, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(355, 59);
						// SugarCpp.g:355:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(355, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(355, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:356:13: 'unless' expr
					{
					DebugLocation(356, 13);
					string_literal174=(IToken)Match(input,158,Follow._158_in_stmt_expr2041);  
					stream_158.Add(string_literal174);

					DebugLocation(356, 22);
					PushFollow(Follow._expr_in_stmt_expr2043);
					expr175=expr();
					PopFollow();

					stream_expr.Add(expr175.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 356:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(356, 30);
						// SugarCpp.g:356:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(356, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(356, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(356, 49);
						// SugarCpp.g:356:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(356, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(356, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:357:13: 'while' expr
					{
					DebugLocation(357, 13);
					string_literal176=(IToken)Match(input,164,Follow._164_in_stmt_expr2072);  
					stream_164.Add(string_literal176);

					DebugLocation(357, 21);
					PushFollow(Follow._expr_in_stmt_expr2074);
					expr177=expr();
					PopFollow();

					stream_expr.Add(expr177.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 357:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(357, 29);
						// SugarCpp.g:357:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(357, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(357, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(357, 47);
						// SugarCpp.g:357:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(357, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(357, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:358:13: 'until' expr
					{
					DebugLocation(358, 13);
					string_literal178=(IToken)Match(input,160,Follow._160_in_stmt_expr2103);  
					stream_160.Add(string_literal178);

					DebugLocation(358, 21);
					PushFollow(Follow._expr_in_stmt_expr2105);
					expr179=expr();
					PopFollow();

					stream_expr.Add(expr179.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 358:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(358, 29);
						// SugarCpp.g:358:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(358, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(358, 47);
						// SugarCpp.g:358:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(358, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:359:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(359, 13);
					string_literal180=(IToken)Match(input,138,Follow._138_in_stmt_expr2134);  
					stream_138.Add(string_literal180);

					DebugLocation(359, 19);
					PushFollow(Follow._for_item_in_stmt_expr2136);
					for_item181=for_item();
					PopFollow();

					stream_for_item.Add(for_item181.Tree);
					DebugLocation(359, 28);
					// SugarCpp.g:359:28: ( ',' for_item )*
					try { DebugEnterSubRule(78);
					while (true)
					{
						int alt78=2;
						try { DebugEnterDecision(78, false);
						int LA78_0 = input.LA(1);

						if ((LA78_0==93))
						{
							alt78 = 1;
						}


						} finally { DebugExitDecision(78); }
						switch ( alt78 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:359:29: ',' for_item
							{
							DebugLocation(359, 29);
							char_literal182=(IToken)Match(input,93,Follow._93_in_stmt_expr2139);  
							stream_93.Add(char_literal182);

							DebugLocation(359, 33);
							PushFollow(Follow._for_item_in_stmt_expr2141);
							for_item183=for_item();
							PopFollow();

							stream_for_item.Add(for_item183.Tree);

							}
							break;

						default:
							goto loop78;
						}
					}

					loop78:
						;

					} finally { DebugExitSubRule(78); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 359:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(359, 47);
						// SugarCpp.g:359:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(359, 58);
						// SugarCpp.g:359:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(359, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(359, 68);
						// SugarCpp.g:359:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(359, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop79;
				}
			}

			loop79:
				;

			} finally { DebugExitSubRule(79); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 30);
			LeaveRule("stmt_expr", 30);
			LeaveRule_stmt_expr();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:363:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 31);
		TraceIn("stmt_expr_item", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(363, 1);
		try
		{
			// SugarCpp.g:364:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt80=5;
			try { DebugEnterDecision(80, false);
			try
			{
				alt80 = dfa80.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(364, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2183);
				stmt_alloc184=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc184.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:365:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(365, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2188);
				stmt_return185=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return185.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:366:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(366, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2193);
				stmt_using186=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using186.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:367:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(367, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2198);
				stmt_typedef187=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef187.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:368:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(368, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2203);
				stmt_modify188=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify188.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 31);
			LeaveRule("stmt_expr_item", 31);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(369, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:371:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 32);
		TraceIn("stmt_defer", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal189 = default(IToken);
		IToken string_literal191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal189_tree = default(CommonTree);
		CommonTree string_literal191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(371, 1);
		try
		{
			// SugarCpp.g:372:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt81=2;
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==133))
			{
				alt81 = 1;
			}
			else if ((LA81_0==137))
			{
				alt81 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:372:4: 'defer' stmt
				{
				DebugLocation(372, 4);
				string_literal189=(IToken)Match(input,133,Follow._133_in_stmt_defer2214);  
				stream_133.Add(string_literal189);

				DebugLocation(372, 12);
				PushFollow(Follow._stmt_in_stmt_defer2216);
				stmt190=stmt();
				PopFollow();

				stream_stmt.Add(stmt190.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 372:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(372, 20);
					// SugarCpp.g:372:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(372, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(372, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:373:4: 'finally' stmt
				{
				DebugLocation(373, 4);
				string_literal191=(IToken)Match(input,137,Follow._137_in_stmt_defer2229);  
				stream_137.Add(string_literal191);

				DebugLocation(373, 14);
				PushFollow(Follow._stmt_in_stmt_defer2231);
				stmt192=stmt();
				PopFollow();

				stream_stmt.Add(stmt192.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 373:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(373, 22);
					// SugarCpp.g:373:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(373, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(373, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 32);
			LeaveRule("stmt_defer", 32);
			LeaveRule_stmt_defer();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:376:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 33);
		TraceIn("stmt_typedef", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal193 = default(IToken);
		IToken char_literal195 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal193_tree = default(CommonTree);
		CommonTree char_literal195_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:377:4: 'typedef' ident '=' type_name
			{
			DebugLocation(377, 4);
			string_literal193=(IToken)Match(input,157,Follow._157_in_stmt_typedef2250);  
			stream_157.Add(string_literal193);

			DebugLocation(377, 14);
			PushFollow(Follow._ident_in_stmt_typedef2252);
			ident194=ident();
			PopFollow();

			stream_ident.Add(ident194.Tree);
			DebugLocation(377, 20);
			char_literal195=(IToken)Match(input,112,Follow._112_in_stmt_typedef2254);  
			stream_112.Add(char_literal195);

			DebugLocation(377, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2256);
			type_name196=type_name();
			PopFollow();

			stream_type_name.Add(type_name196.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 377:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(377, 37);
				// SugarCpp.g:377:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(377, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(377, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(377, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 33);
			LeaveRule("stmt_typedef", 33);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:380:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 34);
		TraceIn("stmt_using_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal198 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal198_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(380, 36);
		try
		{
			// SugarCpp.g:380:16: ( ident | 'namespace' )
			int alt82=2;
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==IDENT))
			{
				alt82 = 1;
			}
			else if ((LA82_0==147))
			{
				alt82 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:380:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(380, 18);
				PushFollow(Follow._ident_in_stmt_using_item2275);
				ident197=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident197.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:380:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(380, 26);
				string_literal198=(IToken)Match(input,147,Follow._147_in_stmt_using_item2279); 
				string_literal198_tree = (CommonTree)adaptor.Create(string_literal198);
				adaptor.AddChild(root_0, string_literal198_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 34);
			LeaveRule("stmt_using_item", 34);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(380, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:381:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 35);
		TraceIn("stmt_using", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal199 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal199_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(381, 1);
		try
		{
			// SugarCpp.g:382:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:382:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(382, 4);
			string_literal199=(IToken)Match(input,161,Follow._161_in_stmt_using2287);  
			stream_161.Add(string_literal199);

			DebugLocation(382, 12);
			// SugarCpp.g:382:12: ( stmt_using_item )*
			try { DebugEnterSubRule(83);
			while (true)
			{
				int alt83=2;
				try { DebugEnterDecision(83, false);
				int LA83_0 = input.LA(1);

				if ((LA83_0==IDENT||LA83_0==147))
				{
					alt83 = 1;
				}


				} finally { DebugExitDecision(83); }
				switch ( alt83 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:382:12: stmt_using_item
					{
					DebugLocation(382, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2289);
					stmt_using_item200=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item200.Tree);

					}
					break;

				default:
					goto loop83;
				}
			}

			loop83:
				;

			} finally { DebugExitSubRule(83); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 382:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(382, 32);
				// SugarCpp.g:382:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(382, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(382, 45);
				// SugarCpp.g:382:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(382, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 35);
			LeaveRule("stmt_using", 35);
			LeaveRule_stmt_using();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:385:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 36);
		TraceIn("stmt_return", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal201 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr202 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal201_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:386:4: 'return' ( expr )?
			{
			DebugLocation(386, 4);
			string_literal201=(IToken)Match(input,151,Follow._151_in_stmt_return2310);  
			stream_151.Add(string_literal201);

			DebugLocation(386, 13);
			// SugarCpp.g:386:13: ( expr )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==IDENT||LA84_0==NUMBER||LA84_0==STRING||LA84_0==79||LA84_0==84||LA84_0==86||LA84_0==88||(LA84_0>=90 && LA84_0<=91)||(LA84_0>=94 && LA84_0<=95)||(LA84_0>=121 && LA84_0<=122)||LA84_0==144||LA84_0==146||(LA84_0>=148 && LA84_0<=149)||LA84_0==168))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:386:13: expr
				{
				DebugLocation(386, 13);
				PushFollow(Follow._expr_in_stmt_return2312);
				expr202=expr();
				PopFollow();

				stream_expr.Add(expr202.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(84); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 386:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(386, 22);
				// SugarCpp.g:386:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(386, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(386, 36);
				// SugarCpp.g:386:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(386, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 36);
			LeaveRule("stmt_return", 36);
			LeaveRule_stmt_return();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:389:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 37);
		TraceIn("inline_stmt_block", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(389, 1);
		try
		{
			// SugarCpp.g:390:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:390:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(390, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2333);
			stmt_simple203=stmt_simple();
			PopFollow();

			stream_stmt_simple.Add(stmt_simple203.Tree);
			DebugLocation(390, 16);
			// SugarCpp.g:390:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==106))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:390:17: ';' stmt_simple
					{
					DebugLocation(390, 17);
					char_literal204=(IToken)Match(input,106,Follow._106_in_inline_stmt_block2336);  
					stream_106.Add(char_literal204);

					DebugLocation(390, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2338);
					stmt_simple205=stmt_simple();
					PopFollow();

					stream_stmt_simple.Add(stmt_simple205.Tree);

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 390:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(390, 38);
				// SugarCpp.g:390:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(390, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(390, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(390, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 37);
			LeaveRule("inline_stmt_block", 37);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(391, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:393:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 38);
		TraceIn("stmt_if", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal206 = default(IToken);
		IToken NEWLINE208 = default(IToken);
		IToken NEWLINE210 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken NEWLINE212 = default(IToken);
		IToken string_literal214 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken NEWLINE218 = default(IToken);
		IToken NEWLINE220 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken NEWLINE222 = default(IToken);
		IToken string_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree NEWLINE208_tree = default(CommonTree);
		CommonTree NEWLINE210_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree NEWLINE212_tree = default(CommonTree);
		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree NEWLINE218_tree = default(CommonTree);
		CommonTree NEWLINE220_tree = default(CommonTree);
		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree NEWLINE222_tree = default(CommonTree);
		CommonTree string_literal224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(393, 1);
		try
		{
			// SugarCpp.g:394:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt96=2;
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==139))
			{
				alt96 = 1;
			}
			else if ((LA96_0==158))
			{
				alt96 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:394:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(394, 4);
				string_literal206=(IToken)Match(input,139,Follow._139_in_stmt_if2360);  
				stream_139.Add(string_literal206);

				DebugLocation(394, 9);
				PushFollow(Follow._expr_in_stmt_if2362);
				expr207=expr();
				PopFollow();

				stream_expr.Add(expr207.Tree);
				DebugLocation(394, 14);
				// SugarCpp.g:394:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==NEWLINE))
				{
					alt90 = 1;
				}
				else if ((LA90_0==154))
				{
					alt90 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:394:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(394, 15);
					// SugarCpp.g:394:15: ( NEWLINE )+
					int cnt86=0;
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==NEWLINE))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:394:15: NEWLINE
							{
							DebugLocation(394, 15);
							NEWLINE208=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2365);  
							stream_NEWLINE.Add(NEWLINE208);


							}
							break;

						default:
							if (cnt86 >= 1)
								goto loop86;

							EarlyExitException eee86 = new EarlyExitException( 86, input );
							DebugRecognitionException(eee86);
							throw eee86;
						}
						cnt86++;
					}
					loop86:
						;

					} finally { DebugExitSubRule(86); }

					DebugLocation(394, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2368);
					stmt_block209=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block209.Tree);
					DebugLocation(394, 35);
					// SugarCpp.g:394:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt89=2;
					try { DebugEnterSubRule(89);
					try { DebugEnterDecision(89, false);
					try
					{
						alt89 = dfa89.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:394:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(394, 36);
						// SugarCpp.g:394:36: ( NEWLINE )*
						try { DebugEnterSubRule(87);
						while (true)
						{
							int alt87=2;
							try { DebugEnterDecision(87, false);
							int LA87_0 = input.LA(1);

							if ((LA87_0==NEWLINE))
							{
								alt87 = 1;
							}


							} finally { DebugExitDecision(87); }
							switch ( alt87 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:394:36: NEWLINE
								{
								DebugLocation(394, 36);
								NEWLINE210=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2371);  
								stream_NEWLINE.Add(NEWLINE210);


								}
								break;

							default:
								goto loop87;
							}
						}

						loop87:
							;

						} finally { DebugExitSubRule(87); }

						DebugLocation(394, 45);
						string_literal211=(IToken)Match(input,135,Follow._135_in_stmt_if2374);  
						stream_135.Add(string_literal211);

						DebugLocation(394, 52);
						// SugarCpp.g:394:52: ( NEWLINE )+
						int cnt88=0;
						try { DebugEnterSubRule(88);
						while (true)
						{
							int alt88=2;
							try { DebugEnterDecision(88, false);
							int LA88_0 = input.LA(1);

							if ((LA88_0==NEWLINE))
							{
								alt88 = 1;
							}


							} finally { DebugExitDecision(88); }
							switch (alt88)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:394:52: NEWLINE
								{
								DebugLocation(394, 52);
								NEWLINE212=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2376);  
								stream_NEWLINE.Add(NEWLINE212);


								}
								break;

							default:
								if (cnt88 >= 1)
									goto loop88;

								EarlyExitException eee88 = new EarlyExitException( 88, input );
								DebugRecognitionException(eee88);
								throw eee88;
							}
							cnt88++;
						}
						loop88:
							;

						} finally { DebugExitSubRule(88); }

						DebugLocation(394, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2379);
						stmt_block213=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block213.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(89); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(394, 77);
						// SugarCpp.g:394:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(394, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(394, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(394, 103);
						// SugarCpp.g:394:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(394, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:395:16: 'then' inline_stmt_block
					{
					DebugLocation(395, 16);
					string_literal214=(IToken)Match(input,154,Follow._154_in_stmt_if2411);  
					stream_154.Add(string_literal214);

					DebugLocation(395, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2413);
					inline_stmt_block215=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block215.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(395, 44);
						// SugarCpp.g:395:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(395, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(395, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:397:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(397, 4);
				string_literal216=(IToken)Match(input,158,Follow._158_in_stmt_if2434);  
				stream_158.Add(string_literal216);

				DebugLocation(397, 13);
				PushFollow(Follow._expr_in_stmt_if2436);
				expr217=expr();
				PopFollow();

				stream_expr.Add(expr217.Tree);
				DebugLocation(397, 18);
				// SugarCpp.g:397:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==NEWLINE))
				{
					alt95 = 1;
				}
				else if ((LA95_0==154))
				{
					alt95 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:397:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(397, 19);
					// SugarCpp.g:397:19: ( NEWLINE )+
					int cnt91=0;
					try { DebugEnterSubRule(91);
					while (true)
					{
						int alt91=2;
						try { DebugEnterDecision(91, false);
						int LA91_0 = input.LA(1);

						if ((LA91_0==NEWLINE))
						{
							alt91 = 1;
						}


						} finally { DebugExitDecision(91); }
						switch (alt91)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:397:19: NEWLINE
							{
							DebugLocation(397, 19);
							NEWLINE218=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2439);  
							stream_NEWLINE.Add(NEWLINE218);


							}
							break;

						default:
							if (cnt91 >= 1)
								goto loop91;

							EarlyExitException eee91 = new EarlyExitException( 91, input );
							DebugRecognitionException(eee91);
							throw eee91;
						}
						cnt91++;
					}
					loop91:
						;

					} finally { DebugExitSubRule(91); }

					DebugLocation(397, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2442);
					stmt_block219=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block219.Tree);
					DebugLocation(397, 39);
					// SugarCpp.g:397:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt94=2;
					try { DebugEnterSubRule(94);
					try { DebugEnterDecision(94, false);
					try
					{
						alt94 = dfa94.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(94); }
					switch (alt94)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:397:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(397, 40);
						// SugarCpp.g:397:40: ( NEWLINE )*
						try { DebugEnterSubRule(92);
						while (true)
						{
							int alt92=2;
							try { DebugEnterDecision(92, false);
							int LA92_0 = input.LA(1);

							if ((LA92_0==NEWLINE))
							{
								alt92 = 1;
							}


							} finally { DebugExitDecision(92); }
							switch ( alt92 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:397:40: NEWLINE
								{
								DebugLocation(397, 40);
								NEWLINE220=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2445);  
								stream_NEWLINE.Add(NEWLINE220);


								}
								break;

							default:
								goto loop92;
							}
						}

						loop92:
							;

						} finally { DebugExitSubRule(92); }

						DebugLocation(397, 49);
						string_literal221=(IToken)Match(input,135,Follow._135_in_stmt_if2448);  
						stream_135.Add(string_literal221);

						DebugLocation(397, 56);
						// SugarCpp.g:397:56: ( NEWLINE )+
						int cnt93=0;
						try { DebugEnterSubRule(93);
						while (true)
						{
							int alt93=2;
							try { DebugEnterDecision(93, false);
							int LA93_0 = input.LA(1);

							if ((LA93_0==NEWLINE))
							{
								alt93 = 1;
							}


							} finally { DebugExitDecision(93); }
							switch (alt93)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:397:56: NEWLINE
								{
								DebugLocation(397, 56);
								NEWLINE222=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2450);  
								stream_NEWLINE.Add(NEWLINE222);


								}
								break;

							default:
								if (cnt93 >= 1)
									goto loop93;

								EarlyExitException eee93 = new EarlyExitException( 93, input );
								DebugRecognitionException(eee93);
								throw eee93;
							}
							cnt93++;
						}
						loop93:
							;

						} finally { DebugExitSubRule(93); }

						DebugLocation(397, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2453);
						stmt_block223=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block223.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(94); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(397, 81);
						// SugarCpp.g:397:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(397, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(397, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(397, 111);
						// SugarCpp.g:397:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(397, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:398:20: 'then' inline_stmt_block
					{
					DebugLocation(398, 20);
					string_literal224=(IToken)Match(input,154,Follow._154_in_stmt_if2489);  
					stream_154.Add(string_literal224);

					DebugLocation(398, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2491);
					inline_stmt_block225=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block225.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 398:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(398, 48);
						// SugarCpp.g:398:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(398, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(398, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(95); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 38);
			LeaveRule("stmt_if", 38);
			LeaveRule_stmt_if();
		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:402:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 39);
		TraceIn("stmt_while", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal226 = default(IToken);
		IToken NEWLINE228 = default(IToken);
		IToken string_literal230 = default(IToken);
		IToken string_literal232 = default(IToken);
		IToken NEWLINE234 = default(IToken);
		IToken string_literal236 = default(IToken);
		IToken string_literal238 = default(IToken);
		IToken NEWLINE240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal226_tree = default(CommonTree);
		CommonTree NEWLINE228_tree = default(CommonTree);
		CommonTree string_literal230_tree = default(CommonTree);
		CommonTree string_literal232_tree = default(CommonTree);
		CommonTree NEWLINE234_tree = default(CommonTree);
		CommonTree string_literal236_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree NEWLINE240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(402, 1);
		try
		{
			// SugarCpp.g:403:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt103=3;
			try { DebugEnterDecision(103, false);
			switch (input.LA(1))
			{
			case 164:
				{
				alt103 = 1;
				}
				break;
			case 160:
				{
				alt103 = 2;
				}
				break;
			case 145:
				{
				alt103 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:403:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(403, 4);
				string_literal226=(IToken)Match(input,164,Follow._164_in_stmt_while2522);  
				stream_164.Add(string_literal226);

				DebugLocation(403, 12);
				PushFollow(Follow._expr_in_stmt_while2524);
				expr227=expr();
				PopFollow();

				stream_expr.Add(expr227.Tree);
				DebugLocation(403, 17);
				// SugarCpp.g:403:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt98=2;
				try { DebugEnterSubRule(98);
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==NEWLINE))
				{
					alt98 = 1;
				}
				else if ((LA98_0==154))
				{
					alt98 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(98); }
				switch (alt98)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:403:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(403, 19);
					// SugarCpp.g:403:19: ( NEWLINE )+
					int cnt97=0;
					try { DebugEnterSubRule(97);
					while (true)
					{
						int alt97=2;
						try { DebugEnterDecision(97, false);
						int LA97_0 = input.LA(1);

						if ((LA97_0==NEWLINE))
						{
							alt97 = 1;
						}


						} finally { DebugExitDecision(97); }
						switch (alt97)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:403:19: NEWLINE
							{
							DebugLocation(403, 19);
							NEWLINE228=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2528);  
							stream_NEWLINE.Add(NEWLINE228);


							}
							break;

						default:
							if (cnt97 >= 1)
								goto loop97;

							EarlyExitException eee97 = new EarlyExitException( 97, input );
							DebugRecognitionException(eee97);
							throw eee97;
						}
						cnt97++;
					}
					loop97:
						;

					} finally { DebugExitSubRule(97); }

					DebugLocation(403, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2531);
					stmt_block229=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block229.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(403, 42);
						// SugarCpp.g:403:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(403, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(403, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:404:13: 'then' inline_stmt_block
					{
					DebugLocation(404, 13);
					string_literal230=(IToken)Match(input,154,Follow._154_in_stmt_while2555);  
					stream_154.Add(string_literal230);

					DebugLocation(404, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2557);
					inline_stmt_block231=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block231.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 404:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(404, 41);
						// SugarCpp.g:404:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(404, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(404, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(404, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(98); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:406:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(406, 4);
				string_literal232=(IToken)Match(input,160,Follow._160_in_stmt_while2581);  
				stream_160.Add(string_literal232);

				DebugLocation(406, 12);
				PushFollow(Follow._expr_in_stmt_while2583);
				expr233=expr();
				PopFollow();

				stream_expr.Add(expr233.Tree);
				DebugLocation(406, 17);
				// SugarCpp.g:406:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt100=2;
				try { DebugEnterSubRule(100);
				try { DebugEnterDecision(100, false);
				int LA100_0 = input.LA(1);

				if ((LA100_0==NEWLINE))
				{
					alt100 = 1;
				}
				else if ((LA100_0==154))
				{
					alt100 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(100); }
				switch (alt100)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:406:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(406, 19);
					// SugarCpp.g:406:19: ( NEWLINE )+
					int cnt99=0;
					try { DebugEnterSubRule(99);
					while (true)
					{
						int alt99=2;
						try { DebugEnterDecision(99, false);
						int LA99_0 = input.LA(1);

						if ((LA99_0==NEWLINE))
						{
							alt99 = 1;
						}


						} finally { DebugExitDecision(99); }
						switch (alt99)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:406:19: NEWLINE
							{
							DebugLocation(406, 19);
							NEWLINE234=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2587);  
							stream_NEWLINE.Add(NEWLINE234);


							}
							break;

						default:
							if (cnt99 >= 1)
								goto loop99;

							EarlyExitException eee99 = new EarlyExitException( 99, input );
							DebugRecognitionException(eee99);
							throw eee99;
						}
						cnt99++;
					}
					loop99:
						;

					} finally { DebugExitSubRule(99); }

					DebugLocation(406, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2590);
					stmt_block235=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block235.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 406:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(406, 42);
						// SugarCpp.g:406:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(406, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(406, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(406, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:407:13: 'then' inline_stmt_block
					{
					DebugLocation(407, 13);
					string_literal236=(IToken)Match(input,154,Follow._154_in_stmt_while2614);  
					stream_154.Add(string_literal236);

					DebugLocation(407, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while2616);
					inline_stmt_block237=inline_stmt_block();
					PopFollow();

					stream_inline_stmt_block.Add(inline_stmt_block237.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 407:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(407, 41);
						// SugarCpp.g:407:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(407, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(407, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(407, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(100); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:409:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(409, 4);
				string_literal238=(IToken)Match(input,145,Follow._145_in_stmt_while2640);  
				stream_145.Add(string_literal238);

				DebugLocation(409, 11);
				// SugarCpp.g:409:11: ( expr )?
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==IDENT||LA101_0==NUMBER||LA101_0==STRING||LA101_0==79||LA101_0==84||LA101_0==86||LA101_0==88||(LA101_0>=90 && LA101_0<=91)||(LA101_0>=94 && LA101_0<=95)||(LA101_0>=121 && LA101_0<=122)||LA101_0==144||LA101_0==146||(LA101_0>=148 && LA101_0<=149)||LA101_0==168))
				{
					alt101 = 1;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:409:11: expr
					{
					DebugLocation(409, 11);
					PushFollow(Follow._expr_in_stmt_while2642);
					expr239=expr();
					PopFollow();

					stream_expr.Add(expr239.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(101); }

				DebugLocation(409, 17);
				// SugarCpp.g:409:17: ( NEWLINE )+
				int cnt102=0;
				try { DebugEnterSubRule(102);
				while (true)
				{
					int alt102=2;
					try { DebugEnterDecision(102, false);
					int LA102_0 = input.LA(1);

					if ((LA102_0==NEWLINE))
					{
						alt102 = 1;
					}


					} finally { DebugExitDecision(102); }
					switch (alt102)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:409:17: NEWLINE
						{
						DebugLocation(409, 17);
						NEWLINE240=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2645);  
						stream_NEWLINE.Add(NEWLINE240);


						}
						break;

					default:
						if (cnt102 >= 1)
							goto loop102;

						EarlyExitException eee102 = new EarlyExitException( 102, input );
						DebugRecognitionException(eee102);
						throw eee102;
					}
					cnt102++;
				}
				loop102:
					;

				} finally { DebugExitSubRule(102); }

				DebugLocation(409, 26);
				PushFollow(Follow._stmt_block_in_stmt_while2648);
				stmt_block241=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block241.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 409:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(409, 40);
					// SugarCpp.g:409:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(409, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(409, 52);
					// SugarCpp.g:409:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(409, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(409, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 39);
			LeaveRule("stmt_while", 39);
			LeaveRule_stmt_while();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:412:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 40);
		TraceIn("for_range", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		IToken string_literal244 = default(IToken);
		IToken string_literal245 = default(IToken);
		IToken string_literal246 = default(IToken);
		IToken string_literal247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		CommonTree string_literal244_tree = default(CommonTree);
		CommonTree string_literal245_tree = default(CommonTree);
		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(412, 1);
		try
		{
			// SugarCpp.g:413:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:413:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(413, 4);
			PushFollow(Follow._ident_in_for_range2670);
			ident242=ident();
			PopFollow();

			stream_ident.Add(ident242.Tree);
			DebugLocation(413, 10);
			string_literal243=(IToken)Match(input,108,Follow._108_in_for_range2672);  
			stream_108.Add(string_literal243);

			DebugLocation(413, 16);
			PushFollow(Follow._expr_in_for_range2676);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);
			DebugLocation(413, 22);
			// SugarCpp.g:413:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt106=3;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, false);
			switch (input.LA(1))
			{
			case 155:
				{
				alt106 = 1;
				}
				break;
			case 134:
				{
				alt106 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 93:
			case 106:
			case 138:
			case 139:
			case 141:
			case 158:
			case 160:
			case 164:
				{
				alt106 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:413:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(413, 23);
				string_literal244=(IToken)Match(input,155,Follow._155_in_for_range2679);  
				stream_155.Add(string_literal244);

				DebugLocation(413, 29);
				PushFollow(Follow._expr_in_for_range2683);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(413, 35);
				// SugarCpp.g:413:35: ( 'by' c= expr )?
				int alt104=2;
				try { DebugEnterSubRule(104);
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==129))
				{
					alt104 = 1;
				}
				} finally { DebugExitDecision(104); }
				switch (alt104)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:413:36: 'by' c= expr
					{
					DebugLocation(413, 36);
					string_literal245=(IToken)Match(input,129,Follow._129_in_for_range2686);  
					stream_129.Add(string_literal245);

					DebugLocation(413, 42);
					PushFollow(Follow._expr_in_for_range2690);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(104); }



				{
				// AST REWRITE
				// elements: ident, b, a, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 413:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(413, 53);
					// SugarCpp.g:413:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(413, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(413, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(413, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(413, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(413, 80);
					// SugarCpp.g:413:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(413, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:414:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(414, 8);
				string_literal246=(IToken)Match(input,134,Follow._134_in_for_range2719);  
				stream_134.Add(string_literal246);

				DebugLocation(414, 18);
				PushFollow(Follow._expr_in_for_range2723);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(414, 24);
				// SugarCpp.g:414:24: ( 'by' c= expr )?
				int alt105=2;
				try { DebugEnterSubRule(105);
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==129))
				{
					alt105 = 1;
				}
				} finally { DebugExitDecision(105); }
				switch (alt105)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:25: 'by' c= expr
					{
					DebugLocation(414, 25);
					string_literal247=(IToken)Match(input,129,Follow._129_in_for_range2726);  
					stream_129.Add(string_literal247);

					DebugLocation(414, 31);
					PushFollow(Follow._expr_in_for_range2730);
					c=expr();
					PopFollow();

					stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(105); }



				{
				// AST REWRITE
				// elements: a, c, b, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 414:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(414, 42);
					// SugarCpp.g:414:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(414, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(414, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(414, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(414, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(414, 74);
					// SugarCpp.g:414:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(414, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:415:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 415:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(415, 12);
					// SugarCpp.g:415:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(415, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(415, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(415, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 40);
			LeaveRule("for_range", 40);
			LeaveRule_for_range();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:419:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 41);
		TraceIn("for_when", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr248 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(419, 1);
		try
		{
			// SugarCpp.g:420:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:420:4: expr
			{
			DebugLocation(420, 4);
			PushFollow(Follow._expr_in_for_when2788);
			expr248=expr();
			PopFollow();

			stream_expr.Add(expr248.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 420:9: -> ^( For_Item_When expr )
			{
				DebugLocation(420, 12);
				// SugarCpp.g:420:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(420, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(420, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 41);
			LeaveRule("for_when", 41);
			LeaveRule_for_when();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:423:1: for_item : ( for_range | for_when );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 42);
		TraceIn("for_item", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when250 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(423, 1);
		try
		{
			// SugarCpp.g:424:2: ( for_range | for_when )
			int alt107=2;
			try { DebugEnterDecision(107, false);
			try
			{
				alt107 = dfa107.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:424:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(424, 4);
				PushFollow(Follow._for_range_in_for_item2807);
				for_range249=for_range();
				PopFollow();

				adaptor.AddChild(root_0, for_range249.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:425:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(425, 4);
				PushFollow(Follow._for_when_in_for_item2812);
				for_when250=for_when();
				PopFollow();

				adaptor.AddChild(root_0, for_when250.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 42);
			LeaveRule("for_item", 42);
			LeaveRule_for_item();
		}
		DebugLocation(426, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:428:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 43);
		TraceIn("stmt_for", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal251 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block256 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(428, 1);
		try
		{
			// SugarCpp.g:429:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:429:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(429, 4);
			string_literal251=(IToken)Match(input,138,Follow._138_in_stmt_for2823);  
			stream_138.Add(string_literal251);

			DebugLocation(429, 10);
			// SugarCpp.g:429:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:429:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(429, 12);
			PushFollow(Follow._for_item_in_stmt_for2827);
			for_item252=for_item();
			PopFollow();

			stream_for_item.Add(for_item252.Tree);
			DebugLocation(429, 21);
			// SugarCpp.g:429:21: ( ',' for_item )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==93))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:22: ',' for_item
					{
					DebugLocation(429, 22);
					char_literal253=(IToken)Match(input,93,Follow._93_in_stmt_for2830);  
					stream_93.Add(char_literal253);

					DebugLocation(429, 26);
					PushFollow(Follow._for_item_in_stmt_for2832);
					for_item254=for_item();
					PopFollow();

					stream_for_item.Add(for_item254.Tree);

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }

			DebugLocation(429, 37);
			// SugarCpp.g:429:37: ( NEWLINE )+
			int cnt109=0;
			try { DebugEnterSubRule(109);
			while (true)
			{
				int alt109=2;
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}


				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:429:37: NEWLINE
					{
					DebugLocation(429, 37);
					NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2836);  
					stream_NEWLINE.Add(NEWLINE255);


					}
					break;

				default:
					if (cnt109 >= 1)
						goto loop109;

					EarlyExitException eee109 = new EarlyExitException( 109, input );
					DebugRecognitionException(eee109);
					throw eee109;
				}
				cnt109++;
			}
			loop109:
				;

			} finally { DebugExitSubRule(109); }

			DebugLocation(429, 46);
			PushFollow(Follow._stmt_block_in_stmt_for2839);
			stmt_block256=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block256.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 429:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(429, 60);
				// SugarCpp.g:429:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(429, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(429, 71);
				// SugarCpp.g:429:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(429, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(429, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 43);
			LeaveRule("stmt_for", 43);
			LeaveRule_stmt_for();
		}
		DebugLocation(432, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:434:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 44);
		TraceIn("stmt_try", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal257 = default(IToken);
		IToken NEWLINE258 = default(IToken);
		IToken NEWLINE260 = default(IToken);
		IToken string_literal261 = default(IToken);
		IToken NEWLINE263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal257_tree = default(CommonTree);
		CommonTree NEWLINE258_tree = default(CommonTree);
		CommonTree NEWLINE260_tree = default(CommonTree);
		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree NEWLINE263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(434, 1);
		try
		{
			// SugarCpp.g:435:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:435:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(435, 4);
			string_literal257=(IToken)Match(input,156,Follow._156_in_stmt_try2870);  
			stream_156.Add(string_literal257);

			DebugLocation(435, 10);
			// SugarCpp.g:435:10: ( NEWLINE )+
			int cnt110=0;
			try { DebugEnterSubRule(110);
			while (true)
			{
				int alt110=2;
				try { DebugEnterDecision(110, false);
				int LA110_0 = input.LA(1);

				if ((LA110_0==NEWLINE))
				{
					alt110 = 1;
				}


				} finally { DebugExitDecision(110); }
				switch (alt110)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:435:10: NEWLINE
					{
					DebugLocation(435, 10);
					NEWLINE258=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2872);  
					stream_NEWLINE.Add(NEWLINE258);


					}
					break;

				default:
					if (cnt110 >= 1)
						goto loop110;

					EarlyExitException eee110 = new EarlyExitException( 110, input );
					DebugRecognitionException(eee110);
					throw eee110;
				}
				cnt110++;
			}
			loop110:
				;

			} finally { DebugExitSubRule(110); }

			DebugLocation(435, 19);
			PushFollow(Follow._stmt_block_in_stmt_try2875);
			stmt_block259=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block259.Tree);
			DebugLocation(435, 30);
			// SugarCpp.g:435:30: ( NEWLINE )*
			try { DebugEnterSubRule(111);
			while (true)
			{
				int alt111=2;
				try { DebugEnterDecision(111, false);
				int LA111_0 = input.LA(1);

				if ((LA111_0==NEWLINE))
				{
					alt111 = 1;
				}


				} finally { DebugExitDecision(111); }
				switch ( alt111 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:435:30: NEWLINE
					{
					DebugLocation(435, 30);
					NEWLINE260=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2877);  
					stream_NEWLINE.Add(NEWLINE260);


					}
					break;

				default:
					goto loop111;
				}
			}

			loop111:
				;

			} finally { DebugExitSubRule(111); }

			DebugLocation(435, 39);
			string_literal261=(IToken)Match(input,130,Follow._130_in_stmt_try2880);  
			stream_130.Add(string_literal261);

			DebugLocation(435, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try2882);
			stmt_alloc262=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc262.Tree);
			DebugLocation(435, 58);
			// SugarCpp.g:435:58: ( NEWLINE )+
			int cnt112=0;
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==NEWLINE))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:435:58: NEWLINE
					{
					DebugLocation(435, 58);
					NEWLINE263=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try2884);  
					stream_NEWLINE.Add(NEWLINE263);


					}
					break;

				default:
					if (cnt112 >= 1)
						goto loop112;

					EarlyExitException eee112 = new EarlyExitException( 112, input );
					DebugRecognitionException(eee112);
					throw eee112;
				}
				cnt112++;
			}
			loop112:
				;

			} finally { DebugExitSubRule(112); }

			DebugLocation(435, 67);
			PushFollow(Follow._stmt_block_in_stmt_try2887);
			stmt_block264=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block264.Tree);


			{
			// AST REWRITE
			// elements: stmt_alloc, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 435:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(435, 81);
				// SugarCpp.g:435:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(435, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(435, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(435, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(435, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 44);
			LeaveRule("stmt_try", 44);
			LeaveRule_stmt_try();
		}
		DebugLocation(436, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:438:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 45);
		TraceIn("switch_item", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal265 = default(IToken);
		IToken char_literal267 = default(IToken);
		IToken NEWLINE269 = default(IToken);
		IToken string_literal271 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block272 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree NEWLINE269_tree = default(CommonTree);
		CommonTree string_literal271_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(438, 1);
		try
		{
			// SugarCpp.g:439:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:439:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			{
			DebugLocation(439, 4);
			string_literal265=(IToken)Match(input,162,Follow._162_in_switch_item2910);  
			stream_162.Add(string_literal265);

			DebugLocation(439, 11);
			PushFollow(Follow._expr_in_switch_item2912);
			expr266=expr();
			PopFollow();

			stream_expr.Add(expr266.Tree);
			DebugLocation(439, 16);
			// SugarCpp.g:439:16: ( ',' expr )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==93))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:439:17: ',' expr
					{
					DebugLocation(439, 17);
					char_literal267=(IToken)Match(input,93,Follow._93_in_switch_item2915);  
					stream_93.Add(char_literal267);

					DebugLocation(439, 21);
					PushFollow(Follow._expr_in_switch_item2917);
					expr268=expr();
					PopFollow();

					stream_expr.Add(expr268.Tree);

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }

			DebugLocation(439, 28);
			// SugarCpp.g:439:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ( expr )+ stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ( expr )+ inline_stmt_block ) )
			int alt115=2;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==NEWLINE))
			{
				alt115 = 1;
			}
			else if ((LA115_0==154))
			{
				alt115 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:439:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(439, 30);
				// SugarCpp.g:439:30: ( NEWLINE )+
				int cnt114=0;
				try { DebugEnterSubRule(114);
				while (true)
				{
					int alt114=2;
					try { DebugEnterDecision(114, false);
					int LA114_0 = input.LA(1);

					if ((LA114_0==NEWLINE))
					{
						alt114 = 1;
					}


					} finally { DebugExitDecision(114); }
					switch (alt114)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:439:30: NEWLINE
						{
						DebugLocation(439, 30);
						NEWLINE269=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item2923);  
						stream_NEWLINE.Add(NEWLINE269);


						}
						break;

					default:
						if (cnt114 >= 1)
							goto loop114;

						EarlyExitException eee114 = new EarlyExitException( 114, input );
						DebugRecognitionException(eee114);
						throw eee114;
					}
					cnt114++;
				}
				loop114:
					;

				} finally { DebugExitSubRule(114); }

				DebugLocation(439, 39);
				PushFollow(Follow._stmt_block_in_switch_item2926);
				stmt_block270=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block270.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 439:50: -> ^( Switch_Item ( expr )+ stmt_block )
				{
					DebugLocation(439, 53);
					// SugarCpp.g:439:53: ^( Switch_Item ( expr )+ stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(439, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(439, 67);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(439, 67);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(439, 73);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:440:30: 'then' inline_stmt_block
				{
				DebugLocation(440, 30);
				string_literal271=(IToken)Match(input,154,Follow._154_in_switch_item2968);  
				stream_154.Add(string_literal271);

				DebugLocation(440, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item2970);
				inline_stmt_block272=inline_stmt_block();
				PopFollow();

				stream_inline_stmt_block.Add(inline_stmt_block272.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 440:55: -> ^( Switch_Item ( expr )+ inline_stmt_block )
				{
					DebugLocation(440, 58);
					// SugarCpp.g:440:58: ^( Switch_Item ( expr )+ inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(440, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(440, 72);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(440, 72);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(440, 78);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 45);
			LeaveRule("switch_item", 45);
			LeaveRule_switch_item();
		}
		DebugLocation(442, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:444:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 46);
		TraceIn("stmt_switch", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal273 = default(IToken);
		IToken NEWLINE275 = default(IToken);
		IToken INDENT276 = default(IToken);
		IToken NEWLINE277 = default(IToken);
		IToken NEWLINE279 = default(IToken);
		IToken string_literal280 = default(IToken);
		IToken NEWLINE281 = default(IToken);
		IToken NEWLINE283 = default(IToken);
		IToken DEDENT284 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item278 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block282 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree NEWLINE275_tree = default(CommonTree);
		CommonTree INDENT276_tree = default(CommonTree);
		CommonTree NEWLINE277_tree = default(CommonTree);
		CommonTree NEWLINE279_tree = default(CommonTree);
		CommonTree string_literal280_tree = default(CommonTree);
		CommonTree NEWLINE281_tree = default(CommonTree);
		CommonTree NEWLINE283_tree = default(CommonTree);
		CommonTree DEDENT284_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(444, 1);
		try
		{
			// SugarCpp.g:445:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:445:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(445, 4);
			string_literal273=(IToken)Match(input,153,Follow._153_in_stmt_switch3006);  
			stream_153.Add(string_literal273);

			DebugLocation(445, 13);
			// SugarCpp.g:445:13: ( expr )?
			int alt116=2;
			try { DebugEnterSubRule(116);
			try { DebugEnterDecision(116, false);
			int LA116_0 = input.LA(1);

			if ((LA116_0==IDENT||LA116_0==NUMBER||LA116_0==STRING||LA116_0==79||LA116_0==84||LA116_0==86||LA116_0==88||(LA116_0>=90 && LA116_0<=91)||(LA116_0>=94 && LA116_0<=95)||(LA116_0>=121 && LA116_0<=122)||LA116_0==144||LA116_0==146||(LA116_0>=148 && LA116_0<=149)||LA116_0==168))
			{
				alt116 = 1;
			}
			} finally { DebugExitDecision(116); }
			switch (alt116)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:445:13: expr
				{
				DebugLocation(445, 13);
				PushFollow(Follow._expr_in_stmt_switch3008);
				expr274=expr();
				PopFollow();

				stream_expr.Add(expr274.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(116); }

			DebugLocation(445, 19);
			// SugarCpp.g:445:19: ( NEWLINE )+
			int cnt117=0;
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=2;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}


				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:19: NEWLINE
					{
					DebugLocation(445, 19);
					NEWLINE275=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3011);  
					stream_NEWLINE.Add(NEWLINE275);


					}
					break;

				default:
					if (cnt117 >= 1)
						goto loop117;

					EarlyExitException eee117 = new EarlyExitException( 117, input );
					DebugRecognitionException(eee117);
					throw eee117;
				}
				cnt117++;
			}
			loop117:
				;

			} finally { DebugExitSubRule(117); }

			DebugLocation(445, 28);
			INDENT276=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3014);  
			stream_INDENT.Add(INDENT276);

			DebugLocation(445, 35);
			// SugarCpp.g:445:35: ( NEWLINE )*
			try { DebugEnterSubRule(118);
			while (true)
			{
				int alt118=2;
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==NEWLINE))
				{
					alt118 = 1;
				}


				} finally { DebugExitDecision(118); }
				switch ( alt118 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:35: NEWLINE
					{
					DebugLocation(445, 35);
					NEWLINE277=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3016);  
					stream_NEWLINE.Add(NEWLINE277);


					}
					break;

				default:
					goto loop118;
				}
			}

			loop118:
				;

			} finally { DebugExitSubRule(118); }

			DebugLocation(445, 44);
			// SugarCpp.g:445:44: ( switch_item ( NEWLINE )+ )+
			int cnt120=0;
			try { DebugEnterSubRule(120);
			while (true)
			{
				int alt120=2;
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==162))
				{
					alt120 = 1;
				}


				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:45: switch_item ( NEWLINE )+
					{
					DebugLocation(445, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3020);
					switch_item278=switch_item();
					PopFollow();

					stream_switch_item.Add(switch_item278.Tree);
					DebugLocation(445, 57);
					// SugarCpp.g:445:57: ( NEWLINE )+
					int cnt119=0;
					try { DebugEnterSubRule(119);
					while (true)
					{
						int alt119=2;
						try { DebugEnterDecision(119, false);
						int LA119_0 = input.LA(1);

						if ((LA119_0==NEWLINE))
						{
							alt119 = 1;
						}


						} finally { DebugExitDecision(119); }
						switch (alt119)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:445:57: NEWLINE
							{
							DebugLocation(445, 57);
							NEWLINE279=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3022);  
							stream_NEWLINE.Add(NEWLINE279);


							}
							break;

						default:
							if (cnt119 >= 1)
								goto loop119;

							EarlyExitException eee119 = new EarlyExitException( 119, input );
							DebugRecognitionException(eee119);
							throw eee119;
						}
						cnt119++;
					}
					loop119:
						;

					} finally { DebugExitSubRule(119); }


					}
					break;

				default:
					if (cnt120 >= 1)
						goto loop120;

					EarlyExitException eee120 = new EarlyExitException( 120, input );
					DebugRecognitionException(eee120);
					throw eee120;
				}
				cnt120++;
			}
			loop120:
				;

			} finally { DebugExitSubRule(120); }

			DebugLocation(445, 68);
			// SugarCpp.g:445:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_0 = input.LA(1);

			if ((LA123_0==135))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:445:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(445, 69);
				string_literal280=(IToken)Match(input,135,Follow._135_in_stmt_switch3028);  
				stream_135.Add(string_literal280);

				DebugLocation(445, 76);
				// SugarCpp.g:445:76: ( NEWLINE )+
				int cnt121=0;
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==NEWLINE))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:445:76: NEWLINE
						{
						DebugLocation(445, 76);
						NEWLINE281=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3030);  
						stream_NEWLINE.Add(NEWLINE281);


						}
						break;

					default:
						if (cnt121 >= 1)
							goto loop121;

						EarlyExitException eee121 = new EarlyExitException( 121, input );
						DebugRecognitionException(eee121);
						throw eee121;
					}
					cnt121++;
				}
				loop121:
					;

				} finally { DebugExitSubRule(121); }

				DebugLocation(445, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3033);
				stmt_block282=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block282.Tree);
				DebugLocation(445, 96);
				// SugarCpp.g:445:96: ( NEWLINE )*
				try { DebugEnterSubRule(122);
				while (true)
				{
					int alt122=2;
					try { DebugEnterDecision(122, false);
					int LA122_0 = input.LA(1);

					if ((LA122_0==NEWLINE))
					{
						alt122 = 1;
					}


					} finally { DebugExitDecision(122); }
					switch ( alt122 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:445:96: NEWLINE
						{
						DebugLocation(445, 96);
						NEWLINE283=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3035);  
						stream_NEWLINE.Add(NEWLINE283);


						}
						break;

					default:
						goto loop122;
					}
				}

				loop122:
					;

				} finally { DebugExitSubRule(122); }


				}
				break;

			}
			} finally { DebugExitSubRule(123); }

			DebugLocation(445, 107);
			DEDENT284=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3040);  
			stream_DEDENT.Add(DEDENT284);



			{
			// AST REWRITE
			// elements: stmt_block, expr, switch_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 445:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(445, 117);
				// SugarCpp.g:445:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(445, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(445, 131);
				// SugarCpp.g:445:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(445, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(445, 137);
				// SugarCpp.g:445:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(445, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(445, 150);
				// SugarCpp.g:445:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(445, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 46);
			LeaveRule("stmt_switch", 46);
			LeaveRule_stmt_switch();
		}
		DebugLocation(446, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:448:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 47);
		TraceIn("ident_list", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident287 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(448, 1);
		try
		{
			// SugarCpp.g:449:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:449:4: ident ( ',' ident )*
			{
			DebugLocation(449, 4);
			PushFollow(Follow._ident_in_ident_list3066);
			ident285=ident();
			PopFollow();

			stream_ident.Add(ident285.Tree);
			DebugLocation(449, 10);
			// SugarCpp.g:449:10: ( ',' ident )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==93))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:449:11: ',' ident
					{
					DebugLocation(449, 11);
					char_literal286=(IToken)Match(input,93,Follow._93_in_ident_list3069);  
					stream_93.Add(char_literal286);

					DebugLocation(449, 15);
					PushFollow(Follow._ident_in_ident_list3071);
					ident287=ident();
					PopFollow();

					stream_ident.Add(ident287.Tree);

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 449:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(449, 26);
				// SugarCpp.g:449:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(449, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(449, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(449, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 47);
			LeaveRule("ident_list", 47);
			LeaveRule_ident_list();
		}
		DebugLocation(450, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:452:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 48);
		TraceIn("stmt_alloc", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal289 = default(IToken);
		IToken char_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken char_literal294 = default(IToken);
		IToken char_literal296 = default(IToken);
		IToken string_literal297 = default(IToken);
		IToken char_literal299 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name290 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr300 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal289_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree char_literal294_tree = default(CommonTree);
		CommonTree char_literal296_tree = default(CommonTree);
		CommonTree string_literal297_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(452, 1);
		try
		{
			// SugarCpp.g:453:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:453:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			{
			DebugLocation(453, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3093);
			ident_list288=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list288.Tree);
			DebugLocation(453, 15);
			// SugarCpp.g:453:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ( where_expr )* ) )
			int alt129=2;
			try { DebugEnterSubRule(129);
			try { DebugEnterDecision(129, false);
			int LA129_0 = input.LA(1);

			if ((LA129_0==103))
			{
				alt129 = 1;
			}
			else if ((LA129_0==105))
			{
				alt129 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 129, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:453:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(453, 17);
				char_literal289=(IToken)Match(input,103,Follow._103_in_stmt_alloc3097);  
				stream_103.Add(char_literal289);

				DebugLocation(453, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3099);
				type_name290=type_name();
				PopFollow();

				stream_type_name.Add(type_name290.Tree);
				DebugLocation(453, 31);
				// SugarCpp.g:453:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt127=3;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				switch (input.LA(1))
				{
				case 105:
				case 112:
					{
					alt127 = 1;
					}
					break;
				case 86:
					{
					alt127 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 106:
				case 138:
				case 139:
				case 141:
				case 158:
				case 160:
				case 164:
					{
					alt127 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 127, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(453, 33);
					// SugarCpp.g:453:33: ( '=' | ':=' )
					int alt125=2;
					try { DebugEnterSubRule(125);
					try { DebugEnterDecision(125, false);
					int LA125_0 = input.LA(1);

					if ((LA125_0==112))
					{
						alt125 = 1;
					}
					else if ((LA125_0==105))
					{
						alt125 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:453:34: '='
						{
						DebugLocation(453, 34);
						char_literal291=(IToken)Match(input,112,Follow._112_in_stmt_alloc3104);  
						stream_112.Add(char_literal291);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:453:40: ':='
						{
						DebugLocation(453, 40);
						string_literal292=(IToken)Match(input,105,Follow._105_in_stmt_alloc3108);  
						stream_105.Add(string_literal292);


						}
						break;

					}
					} finally { DebugExitSubRule(125); }

					DebugLocation(453, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3111);
					where_expr293=where_expr();
					PopFollow();

					stream_where_expr.Add(where_expr293.Tree);


					{
					// AST REWRITE
					// elements: where_expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 453:58: -> ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
					{
						DebugLocation(453, 61);
						// SugarCpp.g:453:61: ^( Expr_Alloc_Equal type_name ident_list ( where_expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(453, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(453, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(453, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(453, 101);
						// SugarCpp.g:453:101: ( where_expr )?
						if (stream_where_expr.HasNext)
						{
							DebugLocation(453, 101);
							adaptor.AddChild(root_1, stream_where_expr.NextTree());

						}
						stream_where_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:454:33: '(' ( expr_list )? ')'
					{
					DebugLocation(454, 33);
					char_literal294=(IToken)Match(input,86,Follow._86_in_stmt_alloc3159);  
					stream_86.Add(char_literal294);

					DebugLocation(454, 37);
					// SugarCpp.g:454:37: ( expr_list )?
					int alt126=2;
					try { DebugEnterSubRule(126);
					try { DebugEnterDecision(126, false);
					int LA126_0 = input.LA(1);

					if ((LA126_0==IDENT||LA126_0==NUMBER||LA126_0==STRING||LA126_0==79||LA126_0==84||LA126_0==86||LA126_0==88||(LA126_0>=90 && LA126_0<=91)||(LA126_0>=94 && LA126_0<=95)||(LA126_0>=121 && LA126_0<=122)||LA126_0==144||LA126_0==146||(LA126_0>=148 && LA126_0<=149)||LA126_0==168))
					{
						alt126 = 1;
					}
					} finally { DebugExitDecision(126); }
					switch (alt126)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:454:37: expr_list
						{
						DebugLocation(454, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3161);
						expr_list295=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list295.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(126); }

					DebugLocation(454, 48);
					char_literal296=(IToken)Match(input,87,Follow._87_in_stmt_alloc3164);  
					stream_87.Add(char_literal296);



					{
					// AST REWRITE
					// elements: type_name, ident_list, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 454:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(454, 56);
						// SugarCpp.g:454:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(454, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(454, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(454, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(454, 98);
						// SugarCpp.g:454:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(454, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:455:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(455, 18);
						// SugarCpp.g:455:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(455, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(455, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(127); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:457:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(457, 8);
				string_literal297=(IToken)Match(input,105,Follow._105_in_stmt_alloc3225);  
				stream_105.Add(string_literal297);

				DebugLocation(457, 14);
				// SugarCpp.g:457:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:457:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(457, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3229);
				where_expr298=where_expr();
				PopFollow();

				stream_where_expr.Add(where_expr298.Tree);
				DebugLocation(457, 26);
				// SugarCpp.g:457:26: ( ',' where_expr )*
				try { DebugEnterSubRule(128);
				while (true)
				{
					int alt128=2;
					try { DebugEnterDecision(128, false);
					int LA128_0 = input.LA(1);

					if ((LA128_0==93))
					{
						alt128 = 1;
					}


					} finally { DebugExitDecision(128); }
					switch ( alt128 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:457:27: ',' where_expr
						{
						DebugLocation(457, 27);
						char_literal299=(IToken)Match(input,93,Follow._93_in_stmt_alloc3232);  
						stream_93.Add(char_literal299);

						DebugLocation(457, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3234);
						where_expr300=where_expr();
						PopFollow();

						stream_where_expr.Add(where_expr300.Tree);

						}
						break;

					default:
						goto loop128;
					}
				}

				loop128:
					;

				} finally { DebugExitSubRule(128); }


				}



				{
				// AST REWRITE
				// elements: where_expr, 105, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 457:45: -> ^( ':=' ident_list ( where_expr )* )
				{
					DebugLocation(457, 48);
					// SugarCpp.g:457:48: ^( ':=' ident_list ( where_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(457, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_105.NextNode(), root_1);

					DebugLocation(457, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(457, 66);
					// SugarCpp.g:457:66: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(457, 66);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 48);
			LeaveRule("stmt_alloc", 48);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:460:1: stmt_modify : lvalue ( modify_expr_op ^ where_expr | '?=' ^ where_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 49);
		TraceIn("stmt_modify", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal304 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr305 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal304_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(460, 1);
		try
		{
			// SugarCpp.g:461:2: ( lvalue ( modify_expr_op ^ where_expr | '?=' ^ where_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:461:4: lvalue ( modify_expr_op ^ where_expr | '?=' ^ where_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(461, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3260);
			lvalue301=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue301.Tree);
			DebugLocation(461, 11);
			// SugarCpp.g:461:11: ( modify_expr_op ^ where_expr | '?=' ^ where_expr )?
			int alt130=3;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_0 = input.LA(1);

			if ((LA130_0==82||LA130_0==85||LA130_0==89||LA130_0==92||LA130_0==96||LA130_0==102||LA130_0==110||LA130_0==112||LA130_0==118||LA130_0==125||LA130_0==166))
			{
				alt130 = 1;
			}
			else if ((LA130_0==120))
			{
				alt130 = 2;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:461:13: modify_expr_op ^ where_expr
				{
				DebugLocation(461, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3264);
				modify_expr_op302=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op302.Tree, root_0);
				DebugLocation(461, 29);
				PushFollow(Follow._where_expr_in_stmt_modify3267);
				where_expr303=where_expr();
				PopFollow();

				adaptor.AddChild(root_0, where_expr303.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:462:13: '?=' ^ where_expr
				{
				DebugLocation(462, 17);
				string_literal304=(IToken)Match(input,120,Follow._120_in_stmt_modify3281); 
				string_literal304_tree = (CommonTree)adaptor.Create(string_literal304);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal304_tree, root_0);
				DebugLocation(462, 19);
				PushFollow(Follow._where_expr_in_stmt_modify3284);
				where_expr305=where_expr();
				PopFollow();

				adaptor.AddChild(root_0, where_expr305.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 49);
			LeaveRule("stmt_modify", 49);
			LeaveRule_stmt_modify();
		}
		DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:465:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 50);
		TraceIn("where_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt306 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(465, 1);
		try
		{
			// SugarCpp.g:466:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:466:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(466, 4);
			PushFollow(Follow._stmt_in_where_item3297);
			stmt306=stmt();
			PopFollow();

			adaptor.AddChild(root_0, stmt306.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 50);
			LeaveRule("where_item", 50);
			LeaveRule_where_item();
		}
		DebugLocation(467, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:469:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 51);
		TraceIn("where_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE307 = default(IToken);
		IToken INDENT308 = default(IToken);
		IToken NEWLINE309 = default(IToken);
		IToken string_literal310 = default(IToken);
		IToken NEWLINE312 = default(IToken);
		IToken DEDENT313 = default(IToken);
		IToken NEWLINE314 = default(IToken);
		IToken INDENT315 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken NEWLINE318 = default(IToken);
		IToken DEDENT319 = default(IToken);
		IToken NEWLINE320 = default(IToken);
		IToken DEDENT321 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		IToken INDENT323 = default(IToken);
		IToken NEWLINE324 = default(IToken);
		IToken NEWLINE326 = default(IToken);
		IToken DEDENT327 = default(IToken);
		IToken NEWLINE328 = default(IToken);
		IToken DEDENT329 = default(IToken);
		IToken string_literal330 = default(IToken);
		IToken NEWLINE331 = default(IToken);
		IToken INDENT332 = default(IToken);
		IToken NEWLINE333 = default(IToken);
		IToken NEWLINE335 = default(IToken);
		IToken DEDENT336 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item325 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item334 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE307_tree = default(CommonTree);
		CommonTree INDENT308_tree = default(CommonTree);
		CommonTree NEWLINE309_tree = default(CommonTree);
		CommonTree string_literal310_tree = default(CommonTree);
		CommonTree NEWLINE312_tree = default(CommonTree);
		CommonTree DEDENT313_tree = default(CommonTree);
		CommonTree NEWLINE314_tree = default(CommonTree);
		CommonTree INDENT315_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree NEWLINE318_tree = default(CommonTree);
		CommonTree DEDENT319_tree = default(CommonTree);
		CommonTree NEWLINE320_tree = default(CommonTree);
		CommonTree DEDENT321_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		CommonTree INDENT323_tree = default(CommonTree);
		CommonTree NEWLINE324_tree = default(CommonTree);
		CommonTree NEWLINE326_tree = default(CommonTree);
		CommonTree DEDENT327_tree = default(CommonTree);
		CommonTree NEWLINE328_tree = default(CommonTree);
		CommonTree DEDENT329_tree = default(CommonTree);
		CommonTree string_literal330_tree = default(CommonTree);
		CommonTree NEWLINE331_tree = default(CommonTree);
		CommonTree INDENT332_tree = default(CommonTree);
		CommonTree NEWLINE333_tree = default(CommonTree);
		CommonTree NEWLINE335_tree = default(CommonTree);
		CommonTree DEDENT336_tree = default(CommonTree);
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(469, 1);
		try
		{
			// SugarCpp.g:470:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:470:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(470, 4);
			// SugarCpp.g:470:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:470:5: a= expr
			{
			DebugLocation(470, 6);
			PushFollow(Follow._expr_in_where_expr3311);
			a=expr();
			PopFollow();

			stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 470:12: -> $a
			{
				DebugLocation(470, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(470, 19);
			// SugarCpp.g:470:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt150=3;
			try { DebugEnterSubRule(150);
			try { DebugEnterDecision(150, false);
			try
			{
				alt150 = dfa150.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:470:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(470, 21);
				// SugarCpp.g:470:21: ( NEWLINE )+
				int cnt131=0;
				try { DebugEnterSubRule(131);
				while (true)
				{
					int alt131=2;
					try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0==NEWLINE))
					{
						alt131 = 1;
					}


					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:470:21: NEWLINE
						{
						DebugLocation(470, 21);
						NEWLINE307=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3321);  
						stream_NEWLINE.Add(NEWLINE307);


						}
						break;

					default:
						if (cnt131 >= 1)
							goto loop131;

						EarlyExitException eee131 = new EarlyExitException( 131, input );
						DebugRecognitionException(eee131);
						throw eee131;
					}
					cnt131++;
				}
				loop131:
					;

				} finally { DebugExitSubRule(131); }

				DebugLocation(470, 30);
				INDENT308=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3324);  
				stream_INDENT.Add(INDENT308);

				DebugLocation(470, 37);
				// SugarCpp.g:470:37: ( NEWLINE )*
				try { DebugEnterSubRule(132);
				while (true)
				{
					int alt132=2;
					try { DebugEnterDecision(132, false);
					int LA132_0 = input.LA(1);

					if ((LA132_0==NEWLINE))
					{
						alt132 = 1;
					}


					} finally { DebugExitDecision(132); }
					switch ( alt132 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:470:37: NEWLINE
						{
						DebugLocation(470, 37);
						NEWLINE309=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3326);  
						stream_NEWLINE.Add(NEWLINE309);


						}
						break;

					default:
						goto loop132;
					}
				}

				loop132:
					;

				} finally { DebugExitSubRule(132); }

				DebugLocation(470, 46);
				string_literal310=(IToken)Match(input,163,Follow._163_in_where_expr3329);  
				stream_163.Add(string_literal310);

				DebugLocation(470, 54);
				// SugarCpp.g:470:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt145=2;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				int LA145_0 = input.LA(1);

				if ((LA145_0==IDENT||LA145_0==79||LA145_0==84||LA145_0==86||LA145_0==88||(LA145_0>=90 && LA145_0<=91)||(LA145_0>=94 && LA145_0<=95)||LA145_0==121||LA145_0==133||(LA145_0>=137 && LA145_0<=139)||LA145_0==145||LA145_0==149||LA145_0==151||LA145_0==153||(LA145_0>=156 && LA145_0<=158)||(LA145_0>=160 && LA145_0<=161)||LA145_0==164||LA145_0==168))
				{
					alt145 = 1;
				}
				else if ((LA145_0==NEWLINE))
				{
					alt145 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 145, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:470:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(470, 56);
					PushFollow(Follow._where_item_in_where_expr3333);
					where_item311=where_item();
					PopFollow();

					stream_where_item.Add(where_item311.Tree);
					DebugLocation(470, 67);
					// SugarCpp.g:470:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt139=2;
					try { DebugEnterSubRule(139);
					try { DebugEnterDecision(139, false);
					try
					{
						alt139 = dfa139.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(139); }
					switch (alt139)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:470:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(470, 69);
						// SugarCpp.g:470:69: ( NEWLINE )*
						try { DebugEnterSubRule(133);
						while (true)
						{
							int alt133=2;
							try { DebugEnterDecision(133, false);
							int LA133_0 = input.LA(1);

							if ((LA133_0==NEWLINE))
							{
								alt133 = 1;
							}


							} finally { DebugExitDecision(133); }
							switch ( alt133 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:470:69: NEWLINE
								{
								DebugLocation(470, 69);
								NEWLINE312=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3337);  
								stream_NEWLINE.Add(NEWLINE312);


								}
								break;

							default:
								goto loop133;
							}
						}

						loop133:
							;

						} finally { DebugExitSubRule(133); }

						DebugLocation(470, 78);
						DEDENT313=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3340);  
						stream_DEDENT.Add(DEDENT313);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 470:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(470, 88);
							// SugarCpp.g:470:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(470, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(470, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(470, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:471:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(471, 21);
						// SugarCpp.g:471:21: ( NEWLINE )+
						int cnt134=0;
						try { DebugEnterSubRule(134);
						while (true)
						{
							int alt134=2;
							try { DebugEnterDecision(134, false);
							int LA134_0 = input.LA(1);

							if ((LA134_0==NEWLINE))
							{
								alt134 = 1;
							}


							} finally { DebugExitDecision(134); }
							switch (alt134)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:471:21: NEWLINE
								{
								DebugLocation(471, 21);
								NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3373);  
								stream_NEWLINE.Add(NEWLINE314);


								}
								break;

							default:
								if (cnt134 >= 1)
									goto loop134;

								EarlyExitException eee134 = new EarlyExitException( 134, input );
								DebugRecognitionException(eee134);
								throw eee134;
							}
							cnt134++;
						}
						loop134:
							;

						} finally { DebugExitSubRule(134); }

						DebugLocation(471, 30);
						INDENT315=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3376);  
						stream_INDENT.Add(INDENT315);

						DebugLocation(471, 37);
						// SugarCpp.g:471:37: ( NEWLINE )*
						try { DebugEnterSubRule(135);
						while (true)
						{
							int alt135=2;
							try { DebugEnterDecision(135, false);
							int LA135_0 = input.LA(1);

							if ((LA135_0==NEWLINE))
							{
								alt135 = 1;
							}


							} finally { DebugExitDecision(135); }
							switch ( alt135 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:471:37: NEWLINE
								{
								DebugLocation(471, 37);
								NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3378);  
								stream_NEWLINE.Add(NEWLINE316);


								}
								break;

							default:
								goto loop135;
							}
						}

						loop135:
							;

						} finally { DebugExitSubRule(135); }

						DebugLocation(471, 46);
						// SugarCpp.g:471:46: ( where_item ( NEWLINE )+ )+
						int cnt137=0;
						try { DebugEnterSubRule(137);
						while (true)
						{
							int alt137=2;
							try { DebugEnterDecision(137, false);
							int LA137_0 = input.LA(1);

							if ((LA137_0==IDENT||LA137_0==79||LA137_0==84||LA137_0==86||LA137_0==88||(LA137_0>=90 && LA137_0<=91)||(LA137_0>=94 && LA137_0<=95)||LA137_0==121||LA137_0==133||(LA137_0>=137 && LA137_0<=139)||LA137_0==145||LA137_0==149||LA137_0==151||LA137_0==153||(LA137_0>=156 && LA137_0<=158)||(LA137_0>=160 && LA137_0<=161)||LA137_0==164||LA137_0==168))
							{
								alt137 = 1;
							}


							} finally { DebugExitDecision(137); }
							switch (alt137)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:471:47: where_item ( NEWLINE )+
								{
								DebugLocation(471, 47);
								PushFollow(Follow._where_item_in_where_expr3382);
								where_item317=where_item();
								PopFollow();

								stream_where_item.Add(where_item317.Tree);
								DebugLocation(471, 58);
								// SugarCpp.g:471:58: ( NEWLINE )+
								int cnt136=0;
								try { DebugEnterSubRule(136);
								while (true)
								{
									int alt136=2;
									try { DebugEnterDecision(136, false);
									int LA136_0 = input.LA(1);

									if ((LA136_0==NEWLINE))
									{
										alt136 = 1;
									}


									} finally { DebugExitDecision(136); }
									switch (alt136)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:471:58: NEWLINE
										{
										DebugLocation(471, 58);
										NEWLINE318=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3384);  
										stream_NEWLINE.Add(NEWLINE318);


										}
										break;

									default:
										if (cnt136 >= 1)
											goto loop136;

										EarlyExitException eee136 = new EarlyExitException( 136, input );
										DebugRecognitionException(eee136);
										throw eee136;
									}
									cnt136++;
								}
								loop136:
									;

								} finally { DebugExitSubRule(136); }


								}
								break;

							default:
								if (cnt137 >= 1)
									goto loop137;

								EarlyExitException eee137 = new EarlyExitException( 137, input );
								DebugRecognitionException(eee137);
								throw eee137;
							}
							cnt137++;
						}
						loop137:
							;

						} finally { DebugExitSubRule(137); }

						DebugLocation(471, 69);
						DEDENT319=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3389);  
						stream_DEDENT.Add(DEDENT319);

						DebugLocation(471, 76);
						// SugarCpp.g:471:76: ( NEWLINE )*
						try { DebugEnterSubRule(138);
						while (true)
						{
							int alt138=2;
							try { DebugEnterDecision(138, false);
							int LA138_0 = input.LA(1);

							if ((LA138_0==NEWLINE))
							{
								alt138 = 1;
							}


							} finally { DebugExitDecision(138); }
							switch ( alt138 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:471:76: NEWLINE
								{
								DebugLocation(471, 76);
								NEWLINE320=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3391);  
								stream_NEWLINE.Add(NEWLINE320);


								}
								break;

							default:
								goto loop138;
							}
						}

						loop138:
							;

						} finally { DebugExitSubRule(138); }

						DebugLocation(471, 85);
						DEDENT321=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3394);  
						stream_DEDENT.Add(DEDENT321);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 471:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(471, 95);
							// SugarCpp.g:471:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(471, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(471, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(471, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(471, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(139); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:473:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(473, 17);
					// SugarCpp.g:473:17: ( NEWLINE )+
					int cnt140=0;
					try { DebugEnterSubRule(140);
					while (true)
					{
						int alt140=2;
						try { DebugEnterDecision(140, false);
						int LA140_0 = input.LA(1);

						if ((LA140_0==NEWLINE))
						{
							alt140 = 1;
						}


						} finally { DebugExitDecision(140); }
						switch (alt140)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:473:17: NEWLINE
							{
							DebugLocation(473, 17);
							NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3444);  
							stream_NEWLINE.Add(NEWLINE322);


							}
							break;

						default:
							if (cnt140 >= 1)
								goto loop140;

							EarlyExitException eee140 = new EarlyExitException( 140, input );
							DebugRecognitionException(eee140);
							throw eee140;
						}
						cnt140++;
					}
					loop140:
						;

					} finally { DebugExitSubRule(140); }

					DebugLocation(473, 26);
					INDENT323=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3447);  
					stream_INDENT.Add(INDENT323);

					DebugLocation(473, 33);
					// SugarCpp.g:473:33: ( NEWLINE )*
					try { DebugEnterSubRule(141);
					while (true)
					{
						int alt141=2;
						try { DebugEnterDecision(141, false);
						int LA141_0 = input.LA(1);

						if ((LA141_0==NEWLINE))
						{
							alt141 = 1;
						}


						} finally { DebugExitDecision(141); }
						switch ( alt141 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:473:33: NEWLINE
							{
							DebugLocation(473, 33);
							NEWLINE324=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3449);  
							stream_NEWLINE.Add(NEWLINE324);


							}
							break;

						default:
							goto loop141;
						}
					}

					loop141:
						;

					} finally { DebugExitSubRule(141); }

					DebugLocation(473, 42);
					// SugarCpp.g:473:42: ( where_item ( NEWLINE )+ )+
					int cnt143=0;
					try { DebugEnterSubRule(143);
					while (true)
					{
						int alt143=2;
						try { DebugEnterDecision(143, false);
						int LA143_0 = input.LA(1);

						if ((LA143_0==IDENT||LA143_0==79||LA143_0==84||LA143_0==86||LA143_0==88||(LA143_0>=90 && LA143_0<=91)||(LA143_0>=94 && LA143_0<=95)||LA143_0==121||LA143_0==133||(LA143_0>=137 && LA143_0<=139)||LA143_0==145||LA143_0==149||LA143_0==151||LA143_0==153||(LA143_0>=156 && LA143_0<=158)||(LA143_0>=160 && LA143_0<=161)||LA143_0==164||LA143_0==168))
						{
							alt143 = 1;
						}


						} finally { DebugExitDecision(143); }
						switch (alt143)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:473:43: where_item ( NEWLINE )+
							{
							DebugLocation(473, 43);
							PushFollow(Follow._where_item_in_where_expr3453);
							where_item325=where_item();
							PopFollow();

							stream_where_item.Add(where_item325.Tree);
							DebugLocation(473, 54);
							// SugarCpp.g:473:54: ( NEWLINE )+
							int cnt142=0;
							try { DebugEnterSubRule(142);
							while (true)
							{
								int alt142=2;
								try { DebugEnterDecision(142, false);
								int LA142_0 = input.LA(1);

								if ((LA142_0==NEWLINE))
								{
									alt142 = 1;
								}


								} finally { DebugExitDecision(142); }
								switch (alt142)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:473:54: NEWLINE
									{
									DebugLocation(473, 54);
									NEWLINE326=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3455);  
									stream_NEWLINE.Add(NEWLINE326);


									}
									break;

								default:
									if (cnt142 >= 1)
										goto loop142;

									EarlyExitException eee142 = new EarlyExitException( 142, input );
									DebugRecognitionException(eee142);
									throw eee142;
								}
								cnt142++;
							}
							loop142:
								;

							} finally { DebugExitSubRule(142); }


							}
							break;

						default:
							if (cnt143 >= 1)
								goto loop143;

							EarlyExitException eee143 = new EarlyExitException( 143, input );
							DebugRecognitionException(eee143);
							throw eee143;
						}
						cnt143++;
					}
					loop143:
						;

					} finally { DebugExitSubRule(143); }

					DebugLocation(473, 65);
					DEDENT327=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3460);  
					stream_DEDENT.Add(DEDENT327);

					DebugLocation(473, 72);
					// SugarCpp.g:473:72: ( NEWLINE )*
					try { DebugEnterSubRule(144);
					while (true)
					{
						int alt144=2;
						try { DebugEnterDecision(144, false);
						int LA144_0 = input.LA(1);

						if ((LA144_0==NEWLINE))
						{
							alt144 = 1;
						}


						} finally { DebugExitDecision(144); }
						switch ( alt144 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:473:72: NEWLINE
							{
							DebugLocation(473, 72);
							NEWLINE328=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3462);  
							stream_NEWLINE.Add(NEWLINE328);


							}
							break;

						default:
							goto loop144;
						}
					}

					loop144:
						;

					} finally { DebugExitSubRule(144); }

					DebugLocation(473, 81);
					DEDENT329=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3465);  
					stream_DEDENT.Add(DEDENT329);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 473:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(473, 91);
						// SugarCpp.g:473:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(473, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(473, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(473, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(473, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:475:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(475, 9);
				string_literal330=(IToken)Match(input,163,Follow._163_in_where_expr3503);  
				stream_163.Add(string_literal330);

				DebugLocation(475, 17);
				// SugarCpp.g:475:17: ( NEWLINE )+
				int cnt146=0;
				try { DebugEnterSubRule(146);
				while (true)
				{
					int alt146=2;
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==NEWLINE))
					{
						alt146 = 1;
					}


					} finally { DebugExitDecision(146); }
					switch (alt146)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:475:17: NEWLINE
						{
						DebugLocation(475, 17);
						NEWLINE331=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3505);  
						stream_NEWLINE.Add(NEWLINE331);


						}
						break;

					default:
						if (cnt146 >= 1)
							goto loop146;

						EarlyExitException eee146 = new EarlyExitException( 146, input );
						DebugRecognitionException(eee146);
						throw eee146;
					}
					cnt146++;
				}
				loop146:
					;

				} finally { DebugExitSubRule(146); }

				DebugLocation(475, 26);
				INDENT332=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3508);  
				stream_INDENT.Add(INDENT332);

				DebugLocation(475, 33);
				// SugarCpp.g:475:33: ( NEWLINE )*
				try { DebugEnterSubRule(147);
				while (true)
				{
					int alt147=2;
					try { DebugEnterDecision(147, false);
					int LA147_0 = input.LA(1);

					if ((LA147_0==NEWLINE))
					{
						alt147 = 1;
					}


					} finally { DebugExitDecision(147); }
					switch ( alt147 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:475:33: NEWLINE
						{
						DebugLocation(475, 33);
						NEWLINE333=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3510);  
						stream_NEWLINE.Add(NEWLINE333);


						}
						break;

					default:
						goto loop147;
					}
				}

				loop147:
					;

				} finally { DebugExitSubRule(147); }

				DebugLocation(475, 42);
				// SugarCpp.g:475:42: ( where_item ( NEWLINE )+ )+
				int cnt149=0;
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==IDENT||LA149_0==79||LA149_0==84||LA149_0==86||LA149_0==88||(LA149_0>=90 && LA149_0<=91)||(LA149_0>=94 && LA149_0<=95)||LA149_0==121||LA149_0==133||(LA149_0>=137 && LA149_0<=139)||LA149_0==145||LA149_0==149||LA149_0==151||LA149_0==153||(LA149_0>=156 && LA149_0<=158)||(LA149_0>=160 && LA149_0<=161)||LA149_0==164||LA149_0==168))
					{
						alt149 = 1;
					}


					} finally { DebugExitDecision(149); }
					switch (alt149)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:475:43: where_item ( NEWLINE )+
						{
						DebugLocation(475, 43);
						PushFollow(Follow._where_item_in_where_expr3514);
						where_item334=where_item();
						PopFollow();

						stream_where_item.Add(where_item334.Tree);
						DebugLocation(475, 54);
						// SugarCpp.g:475:54: ( NEWLINE )+
						int cnt148=0;
						try { DebugEnterSubRule(148);
						while (true)
						{
							int alt148=2;
							try { DebugEnterDecision(148, false);
							int LA148_0 = input.LA(1);

							if ((LA148_0==NEWLINE))
							{
								alt148 = 1;
							}


							} finally { DebugExitDecision(148); }
							switch (alt148)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:475:54: NEWLINE
								{
								DebugLocation(475, 54);
								NEWLINE335=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3516);  
								stream_NEWLINE.Add(NEWLINE335);


								}
								break;

							default:
								if (cnt148 >= 1)
									goto loop148;

								EarlyExitException eee148 = new EarlyExitException( 148, input );
								DebugRecognitionException(eee148);
								throw eee148;
							}
							cnt148++;
						}
						loop148:
							;

						} finally { DebugExitSubRule(148); }


						}
						break;

					default:
						if (cnt149 >= 1)
							goto loop149;

						EarlyExitException eee149 = new EarlyExitException( 149, input );
						DebugRecognitionException(eee149);
						throw eee149;
					}
					cnt149++;
				}
				loop149:
					;

				} finally { DebugExitSubRule(149); }

				DebugLocation(475, 65);
				DEDENT336=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3521);  
				stream_DEDENT.Add(DEDENT336);



				{
				// AST REWRITE
				// elements: where_expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 475:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(475, 75);
					// SugarCpp.g:475:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(475, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(475, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(475, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(475, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:476:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 476:15: -> expr
				{
					DebugLocation(476, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 51);
			LeaveRule("where_expr", 51);
			LeaveRule_where_expr();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:480:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 52);
		TraceIn("let_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal337 = default(IToken);
		IToken string_literal339 = default(IToken);
		IToken NEWLINE341 = default(IToken);
		IToken INDENT342 = default(IToken);
		IToken NEWLINE343 = default(IToken);
		IToken NEWLINE345 = default(IToken);
		IToken DEDENT346 = default(IToken);
		IToken NEWLINE348 = default(IToken);
		IToken INDENT349 = default(IToken);
		IToken NEWLINE350 = default(IToken);
		IToken NEWLINE352 = default(IToken);
		IToken string_literal353 = default(IToken);
		IToken NEWLINE355 = default(IToken);
		IToken DEDENT356 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr354 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal337_tree = default(CommonTree);
		CommonTree string_literal339_tree = default(CommonTree);
		CommonTree NEWLINE341_tree = default(CommonTree);
		CommonTree INDENT342_tree = default(CommonTree);
		CommonTree NEWLINE343_tree = default(CommonTree);
		CommonTree NEWLINE345_tree = default(CommonTree);
		CommonTree DEDENT346_tree = default(CommonTree);
		CommonTree NEWLINE348_tree = default(CommonTree);
		CommonTree INDENT349_tree = default(CommonTree);
		CommonTree NEWLINE350_tree = default(CommonTree);
		CommonTree NEWLINE352_tree = default(CommonTree);
		CommonTree string_literal353_tree = default(CommonTree);
		CommonTree NEWLINE355_tree = default(CommonTree);
		CommonTree DEDENT356_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(481, 4);
			string_literal337=(IToken)Match(input,144,Follow._144_in_let_expr3579);  
			stream_144.Add(string_literal337);

			DebugLocation(481, 10);
			PushFollow(Follow._where_item_in_let_expr3581);
			where_item338=where_item();
			PopFollow();

			stream_where_item.Add(where_item338.Tree);
			DebugLocation(481, 21);
			// SugarCpp.g:481:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt161=2;
			try { DebugEnterSubRule(161);
			try { DebugEnterDecision(161, false);
			int LA161_0 = input.LA(1);

			if ((LA161_0==141))
			{
				alt161 = 1;
			}
			else if ((LA161_0==NEWLINE))
			{
				alt161 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 161, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(161); }
			switch (alt161)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:481:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(481, 23);
				string_literal339=(IToken)Match(input,141,Follow._141_in_let_expr3585);  
				stream_141.Add(string_literal339);

				DebugLocation(481, 28);
				// SugarCpp.g:481:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt155=2;
				try { DebugEnterSubRule(155);
				try { DebugEnterDecision(155, false);
				int LA155_0 = input.LA(1);

				if ((LA155_0==IDENT||LA155_0==NUMBER||LA155_0==STRING||LA155_0==79||LA155_0==84||LA155_0==86||LA155_0==88||(LA155_0>=90 && LA155_0<=91)||(LA155_0>=94 && LA155_0<=95)||(LA155_0>=121 && LA155_0<=122)||LA155_0==144||LA155_0==146||(LA155_0>=148 && LA155_0<=149)||LA155_0==168))
				{
					alt155 = 1;
				}
				else if ((LA155_0==NEWLINE))
				{
					alt155 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 155, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(155); }
				switch (alt155)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:30: expr
					{
					DebugLocation(481, 30);
					PushFollow(Follow._expr_in_let_expr3589);
					expr340=expr();
					PopFollow();

					stream_expr.Add(expr340.Tree);


					{
					// AST REWRITE
					// elements: expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 481:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(481, 38);
						// SugarCpp.g:481:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(481, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(481, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(481, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(481, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:482:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(482, 12);
					// SugarCpp.g:482:12: ( NEWLINE )+
					int cnt151=0;
					try { DebugEnterSubRule(151);
					while (true)
					{
						int alt151=2;
						try { DebugEnterDecision(151, false);
						int LA151_0 = input.LA(1);

						if ((LA151_0==NEWLINE))
						{
							alt151 = 1;
						}


						} finally { DebugExitDecision(151); }
						switch (alt151)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:482:12: NEWLINE
							{
							DebugLocation(482, 12);
							NEWLINE341=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3613);  
							stream_NEWLINE.Add(NEWLINE341);


							}
							break;

						default:
							if (cnt151 >= 1)
								goto loop151;

							EarlyExitException eee151 = new EarlyExitException( 151, input );
							DebugRecognitionException(eee151);
							throw eee151;
						}
						cnt151++;
					}
					loop151:
						;

					} finally { DebugExitSubRule(151); }

					DebugLocation(482, 21);
					// SugarCpp.g:482:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt154=2;
					try { DebugEnterSubRule(154);
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==INDENT))
					{
						alt154 = 1;
					}
					else if ((LA154_0==IDENT||LA154_0==NUMBER||LA154_0==STRING||LA154_0==79||LA154_0==84||LA154_0==86||LA154_0==88||(LA154_0>=90 && LA154_0<=91)||(LA154_0>=94 && LA154_0<=95)||(LA154_0>=121 && LA154_0<=122)||LA154_0==144||LA154_0==146||(LA154_0>=148 && LA154_0<=149)||LA154_0==168))
					{
						alt154 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 154, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(154); }
					switch (alt154)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:482:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(482, 23);
						INDENT342=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr3618);  
						stream_INDENT.Add(INDENT342);

						DebugLocation(482, 30);
						// SugarCpp.g:482:30: ( NEWLINE )*
						try { DebugEnterSubRule(152);
						while (true)
						{
							int alt152=2;
							try { DebugEnterDecision(152, false);
							int LA152_0 = input.LA(1);

							if ((LA152_0==NEWLINE))
							{
								alt152 = 1;
							}


							} finally { DebugExitDecision(152); }
							switch ( alt152 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:482:30: NEWLINE
								{
								DebugLocation(482, 30);
								NEWLINE343=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3620);  
								stream_NEWLINE.Add(NEWLINE343);


								}
								break;

							default:
								goto loop152;
							}
						}

						loop152:
							;

						} finally { DebugExitSubRule(152); }

						DebugLocation(482, 39);
						PushFollow(Follow._expr_in_let_expr3623);
						expr344=expr();
						PopFollow();

						stream_expr.Add(expr344.Tree);
						DebugLocation(482, 44);
						// SugarCpp.g:482:44: ( NEWLINE )+
						int cnt153=0;
						try { DebugEnterSubRule(153);
						while (true)
						{
							int alt153=2;
							try { DebugEnterDecision(153, false);
							int LA153_0 = input.LA(1);

							if ((LA153_0==NEWLINE))
							{
								alt153 = 1;
							}


							} finally { DebugExitDecision(153); }
							switch (alt153)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:482:44: NEWLINE
								{
								DebugLocation(482, 44);
								NEWLINE345=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3625);  
								stream_NEWLINE.Add(NEWLINE345);


								}
								break;

							default:
								if (cnt153 >= 1)
									goto loop153;

								EarlyExitException eee153 = new EarlyExitException( 153, input );
								DebugRecognitionException(eee153);
								throw eee153;
							}
							cnt153++;
						}
						loop153:
							;

						} finally { DebugExitSubRule(153); }

						DebugLocation(482, 53);
						DEDENT346=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr3628);  
						stream_DEDENT.Add(DEDENT346);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 482:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(482, 63);
							// SugarCpp.g:482:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(482, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(482, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(482, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(482, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:483:14: expr
						{
						DebugLocation(483, 14);
						PushFollow(Follow._expr_in_let_expr3654);
						expr347=expr();
						PopFollow();

						stream_expr.Add(expr347.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 483:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(483, 22);
							// SugarCpp.g:483:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(483, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(483, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(483, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(483, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(154); }


					}
					break;

				}
				} finally { DebugExitSubRule(155); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:486:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(486, 11);
				// SugarCpp.g:486:11: ( NEWLINE )+
				int cnt156=0;
				try { DebugEnterSubRule(156);
				while (true)
				{
					int alt156=2;
					try { DebugEnterDecision(156, false);
					int LA156_0 = input.LA(1);

					if ((LA156_0==NEWLINE))
					{
						alt156 = 1;
					}


					} finally { DebugExitDecision(156); }
					switch (alt156)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:11: NEWLINE
						{
						DebugLocation(486, 11);
						NEWLINE348=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3701);  
						stream_NEWLINE.Add(NEWLINE348);


						}
						break;

					default:
						if (cnt156 >= 1)
							goto loop156;

						EarlyExitException eee156 = new EarlyExitException( 156, input );
						DebugRecognitionException(eee156);
						throw eee156;
					}
					cnt156++;
				}
				loop156:
					;

				} finally { DebugExitSubRule(156); }

				DebugLocation(486, 20);
				INDENT349=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr3704);  
				stream_INDENT.Add(INDENT349);

				DebugLocation(486, 27);
				// SugarCpp.g:486:27: ( NEWLINE )*
				try { DebugEnterSubRule(157);
				while (true)
				{
					int alt157=2;
					try { DebugEnterDecision(157, false);
					int LA157_0 = input.LA(1);

					if ((LA157_0==NEWLINE))
					{
						alt157 = 1;
					}


					} finally { DebugExitDecision(157); }
					switch ( alt157 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:27: NEWLINE
						{
						DebugLocation(486, 27);
						NEWLINE350=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3706);  
						stream_NEWLINE.Add(NEWLINE350);


						}
						break;

					default:
						goto loop157;
					}
				}

				loop157:
					;

				} finally { DebugExitSubRule(157); }

				DebugLocation(486, 36);
				// SugarCpp.g:486:36: ( where_item ( NEWLINE )+ )+
				int cnt159=0;
				try { DebugEnterSubRule(159);
				while (true)
				{
					int alt159=2;
					try { DebugEnterDecision(159, false);
					int LA159_0 = input.LA(1);

					if ((LA159_0==IDENT||LA159_0==79||LA159_0==84||LA159_0==86||LA159_0==88||(LA159_0>=90 && LA159_0<=91)||(LA159_0>=94 && LA159_0<=95)||LA159_0==121||LA159_0==133||(LA159_0>=137 && LA159_0<=139)||LA159_0==145||LA159_0==149||LA159_0==151||LA159_0==153||(LA159_0>=156 && LA159_0<=158)||(LA159_0>=160 && LA159_0<=161)||LA159_0==164||LA159_0==168))
					{
						alt159 = 1;
					}


					} finally { DebugExitDecision(159); }
					switch (alt159)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:37: where_item ( NEWLINE )+
						{
						DebugLocation(486, 37);
						PushFollow(Follow._where_item_in_let_expr3710);
						where_item351=where_item();
						PopFollow();

						stream_where_item.Add(where_item351.Tree);
						DebugLocation(486, 48);
						// SugarCpp.g:486:48: ( NEWLINE )+
						int cnt158=0;
						try { DebugEnterSubRule(158);
						while (true)
						{
							int alt158=2;
							try { DebugEnterDecision(158, false);
							int LA158_0 = input.LA(1);

							if ((LA158_0==NEWLINE))
							{
								alt158 = 1;
							}


							} finally { DebugExitDecision(158); }
							switch (alt158)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:486:48: NEWLINE
								{
								DebugLocation(486, 48);
								NEWLINE352=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3712);  
								stream_NEWLINE.Add(NEWLINE352);


								}
								break;

							default:
								if (cnt158 >= 1)
									goto loop158;

								EarlyExitException eee158 = new EarlyExitException( 158, input );
								DebugRecognitionException(eee158);
								throw eee158;
							}
							cnt158++;
						}
						loop158:
							;

						} finally { DebugExitSubRule(158); }


						}
						break;

					default:
						if (cnt159 >= 1)
							goto loop159;

						EarlyExitException eee159 = new EarlyExitException( 159, input );
						DebugRecognitionException(eee159);
						throw eee159;
					}
					cnt159++;
				}
				loop159:
					;

				} finally { DebugExitSubRule(159); }

				DebugLocation(486, 59);
				string_literal353=(IToken)Match(input,141,Follow._141_in_let_expr3717);  
				stream_141.Add(string_literal353);

				DebugLocation(486, 64);
				PushFollow(Follow._expr_in_let_expr3719);
				expr354=expr();
				PopFollow();

				stream_expr.Add(expr354.Tree);
				DebugLocation(486, 69);
				// SugarCpp.g:486:69: ( NEWLINE )+
				int cnt160=0;
				try { DebugEnterSubRule(160);
				while (true)
				{
					int alt160=2;
					try { DebugEnterDecision(160, false);
					int LA160_0 = input.LA(1);

					if ((LA160_0==NEWLINE))
					{
						alt160 = 1;
					}


					} finally { DebugExitDecision(160); }
					switch (alt160)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:486:69: NEWLINE
						{
						DebugLocation(486, 69);
						NEWLINE355=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr3721);  
						stream_NEWLINE.Add(NEWLINE355);


						}
						break;

					default:
						if (cnt160 >= 1)
							goto loop160;

						EarlyExitException eee160 = new EarlyExitException( 160, input );
						DebugRecognitionException(eee160);
						throw eee160;
					}
					cnt160++;
				}
				loop160:
					;

				} finally { DebugExitSubRule(160); }

				DebugLocation(486, 78);
				DEDENT356=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr3724);  
				stream_DEDENT.Add(DEDENT356);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 486:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(486, 88);
					// SugarCpp.g:486:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(486, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(486, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(486, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(486, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(161); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 52);
			LeaveRule("let_expr", 52);
			LeaveRule_let_expr();
		}
		DebugLocation(488, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:490:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 53);
		TraceIn("match_item", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal357 = default(IToken);
		IToken string_literal359 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal357_tree = default(CommonTree);
		CommonTree string_literal359_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(490, 1);
		try
		{
			// SugarCpp.g:491:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:491:4: '|' expr '=>' where_expr
			{
			DebugLocation(491, 4);
			char_literal357=(IToken)Match(input,165,Follow._165_in_match_item3756);  
			stream_165.Add(char_literal357);

			DebugLocation(491, 8);
			PushFollow(Follow._expr_in_match_item3758);
			expr358=expr();
			PopFollow();

			stream_expr.Add(expr358.Tree);
			DebugLocation(491, 13);
			string_literal359=(IToken)Match(input,114,Follow._114_in_match_item3760);  
			stream_114.Add(string_literal359);

			DebugLocation(491, 18);
			PushFollow(Follow._where_expr_in_match_item3762);
			where_expr360=where_expr();
			PopFollow();

			stream_where_expr.Add(where_expr360.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 491:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(491, 32);
				// SugarCpp.g:491:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(491, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(491, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(491, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 53);
			LeaveRule("match_item", 53);
			LeaveRule_match_item();
		}
		DebugLocation(492, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:494:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 54);
		TraceIn("match_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal361 = default(IToken);
		IToken NEWLINE363 = default(IToken);
		IToken INDENT364 = default(IToken);
		IToken NEWLINE365 = default(IToken);
		IToken NEWLINE367 = default(IToken);
		IToken DEDENT368 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr362 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item366 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal361_tree = default(CommonTree);
		CommonTree NEWLINE363_tree = default(CommonTree);
		CommonTree INDENT364_tree = default(CommonTree);
		CommonTree NEWLINE365_tree = default(CommonTree);
		CommonTree NEWLINE367_tree = default(CommonTree);
		CommonTree DEDENT368_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(494, 1);
		try
		{
			// SugarCpp.g:495:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:495:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(495, 4);
			string_literal361=(IToken)Match(input,146,Follow._146_in_match_expr3783);  
			stream_146.Add(string_literal361);

			DebugLocation(495, 12);
			// SugarCpp.g:495:12: ( expr )?
			int alt162=2;
			try { DebugEnterSubRule(162);
			try { DebugEnterDecision(162, false);
			int LA162_0 = input.LA(1);

			if ((LA162_0==IDENT||LA162_0==NUMBER||LA162_0==STRING||LA162_0==79||LA162_0==84||LA162_0==86||LA162_0==88||(LA162_0>=90 && LA162_0<=91)||(LA162_0>=94 && LA162_0<=95)||(LA162_0>=121 && LA162_0<=122)||LA162_0==144||LA162_0==146||(LA162_0>=148 && LA162_0<=149)||LA162_0==168))
			{
				alt162 = 1;
			}
			} finally { DebugExitDecision(162); }
			switch (alt162)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:495:12: expr
				{
				DebugLocation(495, 12);
				PushFollow(Follow._expr_in_match_expr3785);
				expr362=expr();
				PopFollow();

				stream_expr.Add(expr362.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(162); }

			DebugLocation(495, 18);
			// SugarCpp.g:495:18: ( NEWLINE )+
			int cnt163=0;
			try { DebugEnterSubRule(163);
			while (true)
			{
				int alt163=2;
				try { DebugEnterDecision(163, false);
				int LA163_0 = input.LA(1);

				if ((LA163_0==NEWLINE))
				{
					alt163 = 1;
				}


				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:18: NEWLINE
					{
					DebugLocation(495, 18);
					NEWLINE363=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr3788);  
					stream_NEWLINE.Add(NEWLINE363);


					}
					break;

				default:
					if (cnt163 >= 1)
						goto loop163;

					EarlyExitException eee163 = new EarlyExitException( 163, input );
					DebugRecognitionException(eee163);
					throw eee163;
				}
				cnt163++;
			}
			loop163:
				;

			} finally { DebugExitSubRule(163); }

			DebugLocation(495, 27);
			INDENT364=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr3791);  
			stream_INDENT.Add(INDENT364);

			DebugLocation(495, 34);
			// SugarCpp.g:495:34: ( NEWLINE )*
			try { DebugEnterSubRule(164);
			while (true)
			{
				int alt164=2;
				try { DebugEnterDecision(164, false);
				int LA164_0 = input.LA(1);

				if ((LA164_0==NEWLINE))
				{
					alt164 = 1;
				}


				} finally { DebugExitDecision(164); }
				switch ( alt164 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:34: NEWLINE
					{
					DebugLocation(495, 34);
					NEWLINE365=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr3793);  
					stream_NEWLINE.Add(NEWLINE365);


					}
					break;

				default:
					goto loop164;
				}
			}

			loop164:
				;

			} finally { DebugExitSubRule(164); }

			DebugLocation(495, 43);
			// SugarCpp.g:495:43: ( match_item ( NEWLINE )+ )+
			int cnt166=0;
			try { DebugEnterSubRule(166);
			while (true)
			{
				int alt166=2;
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==165))
				{
					alt166 = 1;
				}


				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:44: match_item ( NEWLINE )+
					{
					DebugLocation(495, 44);
					PushFollow(Follow._match_item_in_match_expr3797);
					match_item366=match_item();
					PopFollow();

					stream_match_item.Add(match_item366.Tree);
					DebugLocation(495, 55);
					// SugarCpp.g:495:55: ( NEWLINE )+
					int cnt165=0;
					try { DebugEnterSubRule(165);
					while (true)
					{
						int alt165=2;
						try { DebugEnterDecision(165, false);
						int LA165_0 = input.LA(1);

						if ((LA165_0==NEWLINE))
						{
							alt165 = 1;
						}


						} finally { DebugExitDecision(165); }
						switch (alt165)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:495:55: NEWLINE
							{
							DebugLocation(495, 55);
							NEWLINE367=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr3799);  
							stream_NEWLINE.Add(NEWLINE367);


							}
							break;

						default:
							if (cnt165 >= 1)
								goto loop165;

							EarlyExitException eee165 = new EarlyExitException( 165, input );
							DebugRecognitionException(eee165);
							throw eee165;
						}
						cnt165++;
					}
					loop165:
						;

					} finally { DebugExitSubRule(165); }


					}
					break;

				default:
					if (cnt166 >= 1)
						goto loop166;

					EarlyExitException eee166 = new EarlyExitException( 166, input );
					DebugRecognitionException(eee166);
					throw eee166;
				}
				cnt166++;
			}
			loop166:
				;

			} finally { DebugExitSubRule(166); }

			DebugLocation(495, 66);
			DEDENT368=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr3804);  
			stream_DEDENT.Add(DEDENT368);



			{
			// AST REWRITE
			// elements: match_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 495:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(495, 76);
				// SugarCpp.g:495:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(495, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(495, 89);
				// SugarCpp.g:495:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(495, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(495, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(495, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 54);
			LeaveRule("match_expr", 54);
			LeaveRule_match_expr();
		}
		DebugLocation(496, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:498:1: expr : ( list_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 55);
		TraceIn("expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr369 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr370 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr371 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(498, 1);
		try
		{
			// SugarCpp.g:499:2: ( list_expr | match_expr | let_expr )
			int alt167=3;
			try { DebugEnterDecision(167, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 79:
			case 84:
			case 86:
			case 88:
			case 90:
			case 91:
			case 94:
			case 95:
			case 121:
			case 122:
			case 148:
			case 149:
			case 168:
				{
				alt167 = 1;
				}
				break;
			case 146:
				{
				alt167 = 2;
				}
				break;
			case 144:
				{
				alt167 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 167, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(167); }
			switch (alt167)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:499:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(499, 4);
				PushFollow(Follow._list_expr_in_expr3827);
				list_expr369=list_expr();
				PopFollow();

				adaptor.AddChild(root_0, list_expr369.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:500:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(500, 4);
				PushFollow(Follow._match_expr_in_expr3832);
				match_expr370=match_expr();
				PopFollow();

				adaptor.AddChild(root_0, match_expr370.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:501:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(501, 4);
				PushFollow(Follow._let_expr_in_expr3837);
				let_expr371=let_expr();
				PopFollow();

				adaptor.AddChild(root_0, let_expr371.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 55);
			LeaveRule("expr", 55);
			LeaveRule_expr();
		}
		DebugLocation(502, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:504:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 56);
		TraceIn("list_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal372 = default(IToken);
		IToken char_literal373 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken INDENT375 = default(IToken);
		IToken DEDENT376 = default(IToken);
		IToken char_literal378 = default(IToken);
		IToken NEWLINE379 = default(IToken);
		IToken INDENT380 = default(IToken);
		IToken DEDENT381 = default(IToken);
		IToken char_literal383 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken INDENT385 = default(IToken);
		IToken DEDENT386 = default(IToken);
		IToken char_literal387 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr377 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr382 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr388 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal372_tree = default(CommonTree);
		CommonTree char_literal373_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree INDENT375_tree = default(CommonTree);
		CommonTree DEDENT376_tree = default(CommonTree);
		CommonTree char_literal378_tree = default(CommonTree);
		CommonTree NEWLINE379_tree = default(CommonTree);
		CommonTree INDENT380_tree = default(CommonTree);
		CommonTree DEDENT381_tree = default(CommonTree);
		CommonTree char_literal383_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree INDENT385_tree = default(CommonTree);
		CommonTree DEDENT386_tree = default(CommonTree);
		CommonTree char_literal387_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(504, 1);
		try
		{
			// SugarCpp.g:505:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt173=2;
			try { DebugEnterDecision(173, false);
			int LA173_0 = input.LA(1);

			if ((LA173_0==122))
			{
				alt173 = 1;
			}
			else if ((LA173_0==IDENT||LA173_0==NUMBER||LA173_0==STRING||LA173_0==79||LA173_0==84||LA173_0==86||LA173_0==88||(LA173_0>=90 && LA173_0<=91)||(LA173_0>=94 && LA173_0<=95)||LA173_0==121||(LA173_0>=148 && LA173_0<=149)||LA173_0==168))
			{
				alt173 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 173, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(173); }
			switch (alt173)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:505:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(505, 4);
				char_literal372=(IToken)Match(input,122,Follow._122_in_list_expr3848);  
				stream_122.Add(char_literal372);

				DebugLocation(505, 8);
				// SugarCpp.g:505:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt171=2;
				try { DebugEnterSubRule(171);
				try { DebugEnterDecision(171, false);
				try
				{
					alt171 = dfa171.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(171); }
				switch (alt171)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:505:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(505, 9);
					// SugarCpp.g:505:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(168);
					while (true)
					{
						int alt168=5;
						try { DebugEnterDecision(168, false);
						switch (input.LA(1))
						{
						case 93:
							{
							alt168 = 1;
							}
							break;
						case NEWLINE:
							{
							alt168 = 2;
							}
							break;
						case INDENT:
							{
							alt168 = 3;
							}
							break;
						case DEDENT:
							{
							alt168 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(168); }
						switch ( alt168 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:505:10: ','
							{
							DebugLocation(505, 10);
							char_literal373=(IToken)Match(input,93,Follow._93_in_list_expr3852);  
							stream_93.Add(char_literal373);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:505:16: NEWLINE
							{
							DebugLocation(505, 16);
							NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3856);  
							stream_NEWLINE.Add(NEWLINE374);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:505:26: INDENT
							{
							DebugLocation(505, 26);
							INDENT375=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3860);  
							stream_INDENT.Add(INDENT375);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:505:35: DEDENT
							{
							DebugLocation(505, 35);
							DEDENT376=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3864);  
							stream_DEDENT.Add(DEDENT376);


							}
							break;

						default:
							goto loop168;
						}
					}

					loop168:
						;

					} finally { DebugExitSubRule(168); }

					DebugLocation(505, 44);
					PushFollow(Follow._list_expr_in_list_expr3868);
					list_expr377=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr377.Tree);
					DebugLocation(505, 54);
					// SugarCpp.g:505:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(170);
					while (true)
					{
						int alt170=2;
						try { DebugEnterDecision(170, false);
						try
						{
							alt170 = dfa170.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(170); }
						switch ( alt170 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:505:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(505, 55);
							// SugarCpp.g:505:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt169=0;
							try { DebugEnterSubRule(169);
							while (true)
							{
								int alt169=5;
								try { DebugEnterDecision(169, false);
								switch (input.LA(1))
								{
								case 93:
									{
									alt169 = 1;
									}
									break;
								case NEWLINE:
									{
									alt169 = 2;
									}
									break;
								case INDENT:
									{
									alt169 = 3;
									}
									break;
								case DEDENT:
									{
									alt169 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(169); }
								switch (alt169)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:505:56: ','
									{
									DebugLocation(505, 56);
									char_literal378=(IToken)Match(input,93,Follow._93_in_list_expr3872);  
									stream_93.Add(char_literal378);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:505:62: NEWLINE
									{
									DebugLocation(505, 62);
									NEWLINE379=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3876);  
									stream_NEWLINE.Add(NEWLINE379);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:505:72: INDENT
									{
									DebugLocation(505, 72);
									INDENT380=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3880);  
									stream_INDENT.Add(INDENT380);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:505:81: DEDENT
									{
									DebugLocation(505, 81);
									DEDENT381=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3884);  
									stream_DEDENT.Add(DEDENT381);


									}
									break;

								default:
									if (cnt169 >= 1)
										goto loop169;

									EarlyExitException eee169 = new EarlyExitException( 169, input );
									DebugRecognitionException(eee169);
									throw eee169;
								}
								cnt169++;
							}
							loop169:
								;

							} finally { DebugExitSubRule(169); }

							DebugLocation(505, 90);
							PushFollow(Follow._list_expr_in_list_expr3888);
							list_expr382=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr382.Tree);

							}
							break;

						default:
							goto loop170;
						}
					}

					loop170:
						;

					} finally { DebugExitSubRule(170); }


					}
					break;

				}
				} finally { DebugExitSubRule(171); }

				DebugLocation(505, 104);
				// SugarCpp.g:505:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(172);
				while (true)
				{
					int alt172=5;
					try { DebugEnterDecision(172, false);
					switch (input.LA(1))
					{
					case 93:
						{
						alt172 = 1;
						}
						break;
					case NEWLINE:
						{
						alt172 = 2;
						}
						break;
					case INDENT:
						{
						alt172 = 3;
						}
						break;
					case DEDENT:
						{
						alt172 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(172); }
					switch ( alt172 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:505:105: ','
						{
						DebugLocation(505, 105);
						char_literal383=(IToken)Match(input,93,Follow._93_in_list_expr3895);  
						stream_93.Add(char_literal383);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:505:111: NEWLINE
						{
						DebugLocation(505, 111);
						NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3899);  
						stream_NEWLINE.Add(NEWLINE384);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:505:121: INDENT
						{
						DebugLocation(505, 121);
						INDENT385=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3903);  
						stream_INDENT.Add(INDENT385);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:505:130: DEDENT
						{
						DebugLocation(505, 130);
						DEDENT386=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3907);  
						stream_DEDENT.Add(DEDENT386);


						}
						break;

					default:
						goto loop172;
					}
				}

				loop172:
					;

				} finally { DebugExitSubRule(172); }

				DebugLocation(505, 139);
				char_literal387=(IToken)Match(input,123,Follow._123_in_list_expr3911);  
				stream_123.Add(char_literal387);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 505:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(505, 146);
					// SugarCpp.g:505:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(505, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(505, 158);
					// SugarCpp.g:505:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(505, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:506:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(506, 4);
				PushFollow(Follow._lambda_expr_in_list_expr3925);
				lambda_expr388=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr388.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 56);
			LeaveRule("list_expr", 56);
			LeaveRule_list_expr();
		}
		DebugLocation(507, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:509:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 57);
		TraceIn("lambda_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal389 = default(IToken);
		IToken char_literal391 = default(IToken);
		IToken string_literal392 = default(IToken);
		IToken string_literal394 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args390 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr393 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr395 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr396 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal389_tree = default(CommonTree);
		CommonTree char_literal391_tree = default(CommonTree);
		CommonTree string_literal392_tree = default(CommonTree);
		CommonTree string_literal394_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(509, 1);
		try
		{
			// SugarCpp.g:510:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt176=2;
			try { DebugEnterDecision(176, false);
			try
			{
				alt176 = dfa176.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(176); }
			switch (alt176)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:510:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(510, 4);
				char_literal389=(IToken)Match(input,86,Follow._86_in_lambda_expr3936);  
				stream_86.Add(char_literal389);

				DebugLocation(510, 8);
				// SugarCpp.g:510:8: ( func_args )?
				int alt174=2;
				try { DebugEnterSubRule(174);
				try { DebugEnterDecision(174, false);
				int LA174_0 = input.LA(1);

				if ((LA174_0==IDENT||LA174_0==105))
				{
					alt174 = 1;
				}
				} finally { DebugExitDecision(174); }
				switch (alt174)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:510:8: func_args
					{
					DebugLocation(510, 8);
					PushFollow(Follow._func_args_in_lambda_expr3938);
					func_args390=func_args();
					PopFollow();

					stream_func_args.Add(func_args390.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(174); }

				DebugLocation(510, 19);
				char_literal391=(IToken)Match(input,87,Follow._87_in_lambda_expr3941);  
				stream_87.Add(char_literal391);

				DebugLocation(510, 23);
				// SugarCpp.g:510:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt175=2;
				try { DebugEnterSubRule(175);
				try { DebugEnterDecision(175, false);
				int LA175_0 = input.LA(1);

				if ((LA175_0==97))
				{
					alt175 = 1;
				}
				else if ((LA175_0==114))
				{
					alt175 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 175, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(175); }
				switch (alt175)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:510:25: '->' expr
					{
					DebugLocation(510, 25);
					string_literal392=(IToken)Match(input,97,Follow._97_in_lambda_expr3945);  
					stream_97.Add(string_literal392);

					DebugLocation(510, 30);
					PushFollow(Follow._expr_in_lambda_expr3947);
					expr393=expr();
					PopFollow();

					stream_expr.Add(expr393.Tree);


					{
					// AST REWRITE
					// elements: 97, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 510:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(510, 39);
						// SugarCpp.g:510:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(510, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(510, 53);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(510, 58);
						// SugarCpp.g:510:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(510, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(510, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:511:25: '=>' expr
					{
					DebugLocation(511, 25);
					string_literal394=(IToken)Match(input,114,Follow._114_in_lambda_expr3987);  
					stream_114.Add(string_literal394);

					DebugLocation(511, 30);
					PushFollow(Follow._expr_in_lambda_expr3989);
					expr395=expr();
					PopFollow();

					stream_expr.Add(expr395.Tree);


					{
					// AST REWRITE
					// elements: 114, func_args, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 511:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(511, 39);
						// SugarCpp.g:511:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(511, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(511, 53);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(511, 58);
						// SugarCpp.g:511:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(511, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(511, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(175); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:512:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(512, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4009);
				modify_expr396=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr396.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 57);
			LeaveRule("lambda_expr", 57);
			LeaveRule_lambda_expr();
		}
		DebugLocation(513, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:515:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 58);
		TraceIn("modify_expr_op", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set397 = default(IToken);

		CommonTree set397_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(515, 91);
		try
		{
			// SugarCpp.g:515:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(515, 15);

			set397=(IToken)input.LT(1);
			if (input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==102||input.LA(1)==110||input.LA(1)==112||input.LA(1)==118||input.LA(1)==125||input.LA(1)==166)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set397));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 58);
			LeaveRule("modify_expr_op", 58);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(515, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:516:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 59);
		TraceIn("modify_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set399 = default(IToken);
		IToken char_literal401 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr398 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr400 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr402 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set399_tree = default(CommonTree);
		CommonTree char_literal401_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(516, 1);
		try
		{
			// SugarCpp.g:517:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:517:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(517, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4066);
			cond_expr398=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr398.Tree);
			DebugLocation(517, 14);
			// SugarCpp.g:517:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt178=3;
			try { DebugEnterSubRule(178);
			try { DebugEnterDecision(178, false);
			int LA178_0 = input.LA(1);

			if ((LA178_0==82||LA178_0==85||LA178_0==89||LA178_0==92||LA178_0==96||LA178_0==102||LA178_0==105||LA178_0==110||LA178_0==118||LA178_0==125||LA178_0==166))
			{
				alt178 = 1;
			}
			else if ((LA178_0==112))
			{
				alt178 = 2;
			}
			} finally { DebugExitDecision(178); }
			switch (alt178)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:517:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(517, 94);

				set399=(IToken)input.LT(1);
				set399=(IToken)input.LT(1);
				if (input.LA(1)==82||input.LA(1)==85||input.LA(1)==89||input.LA(1)==92||input.LA(1)==96||input.LA(1)==102||input.LA(1)==105||input.LA(1)==110||input.LA(1)==118||input.LA(1)==125||input.LA(1)==166)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set399), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(517, 96);
				PushFollow(Follow._cond_expr_in_modify_expr4115);
				cond_expr400=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr400.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:518:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(518, 7);
				// SugarCpp.g:518:7: ( '=' ^ cond_expr )+
				int cnt177=0;
				try { DebugEnterSubRule(177);
				while (true)
				{
					int alt177=2;
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==112))
					{
						alt177 = 1;
					}


					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:518:8: '=' ^ cond_expr
						{
						DebugLocation(518, 11);
						char_literal401=(IToken)Match(input,112,Follow._112_in_modify_expr4124); 
						char_literal401_tree = (CommonTree)adaptor.Create(char_literal401);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal401_tree, root_0);
						DebugLocation(518, 13);
						PushFollow(Follow._cond_expr_in_modify_expr4127);
						cond_expr402=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr402.Tree);

						}
						break;

					default:
						if (cnt177 >= 1)
							goto loop177;

						EarlyExitException eee177 = new EarlyExitException( 177, input );
						DebugRecognitionException(eee177);
						throw eee177;
					}
					cnt177++;
				}
				loop177:
					;

				} finally { DebugExitSubRule(177); }


				}
				break;

			}
			} finally { DebugExitSubRule(178); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 59);
			LeaveRule("modify_expr", 59);
			LeaveRule_modify_expr();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:521:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 60);
		TraceIn("cond_expr_item", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr403 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(521, 24);
		try
		{
			// SugarCpp.g:521:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:521:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(521, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item4140);
			or_expr403=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr403.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 60);
			LeaveRule("cond_expr_item", 60);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(521, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:522:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 61);
		TraceIn("cond_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal404 = default(IToken);
		IToken char_literal405 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal404_tree = default(CommonTree);
		CommonTree char_literal405_tree = default(CommonTree);
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(522, 1);
		try
		{
			// SugarCpp.g:523:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:523:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(523, 4);
			// SugarCpp.g:523:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:523:5: a= or_expr
			{
			DebugLocation(523, 6);
			PushFollow(Follow._or_expr_in_cond_expr4152);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 523:15: -> $a
			{
				DebugLocation(523, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(523, 22);
			// SugarCpp.g:523:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt181=2;
			try { DebugEnterSubRule(181);
			try { DebugEnterDecision(181, false);
			int LA181_0 = input.LA(1);

			if ((LA181_0==119))
			{
				alt181 = 1;
			}
			} finally { DebugExitDecision(181); }
			switch (alt181)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:523:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(523, 23);
				char_literal404=(IToken)Match(input,119,Follow._119_in_cond_expr4161);  
				stream_119.Add(char_literal404);

				DebugLocation(523, 27);
				// SugarCpp.g:523:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt180=2;
				try { DebugEnterSubRule(180);
				try { DebugEnterDecision(180, false);
				int LA180_0 = input.LA(1);

				if ((LA180_0==IDENT||LA180_0==NUMBER||LA180_0==STRING||LA180_0==79||LA180_0==84||LA180_0==86||LA180_0==88||(LA180_0>=90 && LA180_0<=91)||(LA180_0>=94 && LA180_0<=95)||LA180_0==121||(LA180_0>=148 && LA180_0<=149)||LA180_0==168))
				{
					alt180 = 1;
				}
				else if ((LA180_0==DEDENT||LA180_0==INDENT||LA180_0==NEWLINE||LA180_0==82||LA180_0==85||LA180_0==87||LA180_0==89||(LA180_0>=92 && LA180_0<=93)||LA180_0==96||LA180_0==102||(LA180_0>=105 && LA180_0<=106)||LA180_0==110||LA180_0==112||LA180_0==114||LA180_0==118||LA180_0==123||LA180_0==125||LA180_0==129||LA180_0==134||(LA180_0>=138 && LA180_0<=139)||LA180_0==141||(LA180_0>=154 && LA180_0<=155)||LA180_0==158||LA180_0==160||(LA180_0>=163 && LA180_0<=164)||LA180_0==166))
				{
					alt180 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 180, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(180); }
				switch (alt180)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:523:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(523, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr4167);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(523, 46);
					// SugarCpp.g:523:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt179=2;
					try { DebugEnterSubRule(179);
					try { DebugEnterDecision(179, false);
					int LA179_0 = input.LA(1);

					if ((LA179_0==103))
					{
						alt179 = 1;
					}
					else if ((LA179_0==DEDENT||LA179_0==INDENT||LA179_0==NEWLINE||LA179_0==82||LA179_0==85||LA179_0==87||LA179_0==89||(LA179_0>=92 && LA179_0<=93)||LA179_0==96||LA179_0==102||(LA179_0>=105 && LA179_0<=106)||LA179_0==110||LA179_0==112||LA179_0==114||LA179_0==118||LA179_0==123||LA179_0==125||LA179_0==129||LA179_0==134||(LA179_0>=138 && LA179_0<=139)||LA179_0==141||(LA179_0>=154 && LA179_0<=155)||LA179_0==158||LA179_0==160||(LA179_0>=163 && LA179_0<=164)||LA179_0==166))
					{
						alt179 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(179); }
					switch (alt179)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:523:48: ':' b= cond_expr_item
						{
						DebugLocation(523, 48);
						char_literal405=(IToken)Match(input,103,Follow._103_in_cond_expr4171);  
						stream_103.Add(char_literal405);

						DebugLocation(523, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr4175);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, b, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 523:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(523, 72);
							// SugarCpp.g:523:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(523, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(523, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(523, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(523, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:524:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 524:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(524, 20);
							// SugarCpp.g:524:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(524, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(524, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(524, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(179); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:526:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 526:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(526, 14);
						// SugarCpp.g:526:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(526, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(526, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(180); }


				}
				break;

			}
			} finally { DebugExitSubRule(181); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 61);
			LeaveRule("cond_expr", 61);
			LeaveRule_cond_expr();
		}
		DebugLocation(528, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:530:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 62);
		TraceIn("or_op", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set406 = default(IToken);

		CommonTree set406_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(530, 19);
		try
		{
			// SugarCpp.g:530:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(530, 6);

			set406=(IToken)input.LT(1);
			if (input.LA(1)==150||input.LA(1)==167)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set406));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 62);
			LeaveRule("or_op", 62);
			LeaveRule_or_op();
		}
		DebugLocation(530, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:531:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 63);
		TraceIn("or_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(531, 1);
		try
		{
			// SugarCpp.g:532:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:532:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(532, 4);
			// SugarCpp.g:532:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:532:5: a= and_expr
			{
			DebugLocation(532, 6);
			PushFollow(Follow._and_expr_in_or_expr4289);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 532:16: -> $a
			{
				DebugLocation(532, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(532, 23);
			// SugarCpp.g:532:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==150||LA182_0==167))
				{
					alt182 = 1;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:532:24: op= or_op b= and_expr
					{
					DebugLocation(532, 26);
					PushFollow(Follow._or_op_in_or_expr4300);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(532, 34);
					PushFollow(Follow._and_expr_in_or_expr4304);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: or_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 532:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(532, 47);
						// SugarCpp.g:532:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(532, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(532, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(532, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(532, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 63);
			LeaveRule("or_expr", 63);
			LeaveRule_or_expr();
		}
		DebugLocation(533, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:535:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 64);
		TraceIn("and_op", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set407 = default(IToken);

		CommonTree set407_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(535, 21);
		try
		{
			// SugarCpp.g:535:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(535, 7);

			set407=(IToken)input.LT(1);
			if (input.LA(1)==83||input.LA(1)==127)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set407));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 64);
			LeaveRule("and_op", 64);
			LeaveRule_and_op();
		}
		DebugLocation(535, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:536:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 65);
		TraceIn("and_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(536, 1);
		try
		{
			// SugarCpp.g:537:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:537:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(537, 4);
			// SugarCpp.g:537:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:537:5: a= bit_or
			{
			DebugLocation(537, 6);
			PushFollow(Follow._bit_or_in_and_expr4346);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 537:14: -> $a
			{
				DebugLocation(537, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(537, 21);
			// SugarCpp.g:537:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(183);
			while (true)
			{
				int alt183=2;
				try { DebugEnterDecision(183, false);
				int LA183_0 = input.LA(1);

				if ((LA183_0==83||LA183_0==127))
				{
					alt183 = 1;
				}


				} finally { DebugExitDecision(183); }
				switch ( alt183 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:537:22: op= and_op b= bit_or
					{
					DebugLocation(537, 24);
					PushFollow(Follow._and_op_in_and_expr4357);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(537, 33);
					PushFollow(Follow._bit_or_in_and_expr4361);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, and_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 537:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(537, 44);
						// SugarCpp.g:537:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(537, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(537, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(537, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(537, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop183;
				}
			}

			loop183:
				;

			} finally { DebugExitSubRule(183); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 65);
			LeaveRule("and_expr", 65);
			LeaveRule_and_expr();
		}
		DebugLocation(538, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:540:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 66);
		TraceIn("bit_or", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal408 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal408_tree = default(CommonTree);
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(540, 1);
		try
		{
			// SugarCpp.g:541:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:541:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(541, 4);
			// SugarCpp.g:541:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:541:5: a= bit_xor
			{
			DebugLocation(541, 6);
			PushFollow(Follow._bit_xor_in_bit_or4392);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 541:15: -> $a
			{
				DebugLocation(541, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(541, 22);
			// SugarCpp.g:541:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=2;
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==165))
				{
					alt184 = 1;
				}


				} finally { DebugExitDecision(184); }
				switch ( alt184 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:541:23: '|' b= bit_xor
					{
					DebugLocation(541, 23);
					char_literal408=(IToken)Match(input,165,Follow._165_in_bit_or4401);  
					stream_165.Add(char_literal408);

					DebugLocation(541, 28);
					PushFollow(Follow._bit_xor_in_bit_or4405);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 165
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 541:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(541, 40);
						// SugarCpp.g:541:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(541, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(541, 51);
						adaptor.AddChild(root_1, stream_165.NextNode());
						DebugLocation(541, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(541, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop184;
				}
			}

			loop184:
				;

			} finally { DebugExitSubRule(184); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 66);
			LeaveRule("bit_or", 66);
			LeaveRule_bit_or();
		}
		DebugLocation(542, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:544:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 67);
		TraceIn("bit_xor", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal409 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal409_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(544, 1);
		try
		{
			// SugarCpp.g:545:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:545:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(545, 4);
			// SugarCpp.g:545:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:545:5: a= bit_and
			{
			DebugLocation(545, 6);
			PushFollow(Follow._bit_and_in_bit_xor4435);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 545:15: -> $a
			{
				DebugLocation(545, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(545, 22);
			// SugarCpp.g:545:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==124))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:545:23: '^' b= bit_and
					{
					DebugLocation(545, 23);
					char_literal409=(IToken)Match(input,124,Follow._124_in_bit_xor4444);  
					stream_124.Add(char_literal409);

					DebugLocation(545, 28);
					PushFollow(Follow._bit_and_in_bit_xor4448);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 124, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 545:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(545, 40);
						// SugarCpp.g:545:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(545, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(545, 51);
						adaptor.AddChild(root_1, stream_124.NextNode());
						DebugLocation(545, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(545, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 67);
			LeaveRule("bit_xor", 67);
			LeaveRule_bit_xor();
		}
		DebugLocation(546, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:548:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 68);
		TraceIn("bit_and", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal410 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal410_tree = default(CommonTree);
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(548, 1);
		try
		{
			// SugarCpp.g:549:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:549:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(549, 4);
			// SugarCpp.g:549:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:549:5: a= cmp_expr
			{
			DebugLocation(549, 6);
			PushFollow(Follow._cmp_expr_in_bit_and4478);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 549:16: -> $a
			{
				DebugLocation(549, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(549, 23);
			// SugarCpp.g:549:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(186);
			while (true)
			{
				int alt186=2;
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==84))
				{
					alt186 = 1;
				}


				} finally { DebugExitDecision(186); }
				switch ( alt186 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:549:24: '&' b= cmp_expr
					{
					DebugLocation(549, 24);
					char_literal410=(IToken)Match(input,84,Follow._84_in_bit_and4487);  
					stream_84.Add(char_literal410);

					DebugLocation(549, 29);
					PushFollow(Follow._cmp_expr_in_bit_and4491);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, 84, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 549:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(549, 42);
						// SugarCpp.g:549:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(549, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(549, 53);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(549, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(549, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop186;
				}
			}

			loop186:
				;

			} finally { DebugExitSubRule(186); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 68);
			LeaveRule("bit_and", 68);
			LeaveRule_bit_and();
		}
		DebugLocation(550, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:552:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 69);
		TraceIn("chain_op", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set411 = default(IToken);

		CommonTree set411_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(552, 64);
		try
		{
			// SugarCpp.g:552:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(552, 9);

			set411=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==107||input.LA(1)==111||input.LA(1)==113||(input.LA(1)>=115 && input.LA(1)<=116)||(input.LA(1)>=142 && input.LA(1)<=143))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set411));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 69);
			LeaveRule("chain_op", 69);
			LeaveRule_chain_op();
		}
		DebugLocation(552, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:553:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 70);
		TraceIn("no_less_op", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set412 = default(IToken);

		CommonTree set412_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(553, 60);
		try
		{
			// SugarCpp.g:553:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(553, 11);

			set412=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==111||input.LA(1)==113||(input.LA(1)>=115 && input.LA(1)<=116)||(input.LA(1)>=142 && input.LA(1)<=143))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set412));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 70);
			LeaveRule("no_less_op", 70);
			LeaveRule_no_less_op();
		}
		DebugLocation(553, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:554:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 71);
		TraceIn("chain_list", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op413 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr414 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(554, 35);
		try
		{
			// SugarCpp.g:554:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:554:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(554, 13);
			// SugarCpp.g:554:13: ( chain_op shift_expr )+
			int cnt187=0;
			try { DebugEnterSubRule(187);
			while (true)
			{
				int alt187=2;
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==80||LA187_0==107||LA187_0==111||LA187_0==113||(LA187_0>=115 && LA187_0<=116)||(LA187_0>=142 && LA187_0<=143)))
				{
					alt187 = 1;
				}


				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:554:14: chain_op shift_expr
					{
					DebugLocation(554, 14);
					PushFollow(Follow._chain_op_in_chain_list4583);
					chain_op413=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op413.Tree);
					DebugLocation(554, 23);
					PushFollow(Follow._shift_expr_in_chain_list4585);
					shift_expr414=shift_expr();
					PopFollow();

					adaptor.AddChild(root_0, shift_expr414.Tree);

					}
					break;

				default:
					if (cnt187 >= 1)
						goto loop187;

					EarlyExitException eee187 = new EarlyExitException( 187, input );
					DebugRecognitionException(eee187);
					throw eee187;
				}
				cnt187++;
			}
			loop187:
				;

			} finally { DebugExitSubRule(187); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 71);
			LeaveRule("chain_list", 71);
			LeaveRule_chain_list();
		}
		DebugLocation(554, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:555:1: cmp_expr : (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 72);
		TraceIn("cmp_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal415 = default(IToken);
		IToken char_literal417 = default(IToken);
		IToken char_literal418 = default(IToken);
		IToken char_literal420 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident416 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list419 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list421 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list422 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal415_tree = default(CommonTree);
		CommonTree char_literal417_tree = default(CommonTree);
		CommonTree char_literal418_tree = default(CommonTree);
		CommonTree char_literal420_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(555, 1);
		try
		{
			// SugarCpp.g:556:2: ( (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:556:4: (a= shift_expr -> $a) ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(556, 4);
			// SugarCpp.g:556:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:556:5: a= shift_expr
			{
			DebugLocation(556, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr4599);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 556:18: -> $a
			{
				DebugLocation(556, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(556, 25);
			// SugarCpp.g:556:25: ( '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt192=3;
			try { DebugEnterSubRule(192);
			try { DebugEnterDecision(192, false);
			int LA192_0 = input.LA(1);

			if ((LA192_0==107))
			{
				alt192 = 1;
			}
			else if ((LA192_0==80||LA192_0==111||LA192_0==113||(LA192_0>=115 && LA192_0<=116)||(LA192_0>=142 && LA192_0<=143)))
			{
				alt192 = 2;
			}
			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:556:27: '<' b= shift_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(556, 27);
				char_literal415=(IToken)Match(input,107,Follow._107_in_cmp_expr4609);  
				stream_107.Add(char_literal415);

				DebugLocation(556, 32);
				PushFollow(Follow._shift_expr_in_cmp_expr4613);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(556, 44);
				// SugarCpp.g:556:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt190=3;
				try { DebugEnterSubRule(190);
				try { DebugEnterDecision(190, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt190 = 1;
					}
					break;
				case 115:
					{
					int LA190_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt190 = 1;
					}
					else if ((true))
					{
						alt190 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 190, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 80:
				case 107:
				case 111:
				case 113:
				case 116:
				case 142:
				case 143:
					{
					alt190 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 82:
				case 83:
				case 84:
				case 85:
				case 87:
				case 89:
				case 92:
				case 93:
				case 96:
				case 102:
				case 103:
				case 105:
				case 106:
				case 110:
				case 112:
				case 114:
				case 118:
				case 119:
				case 123:
				case 124:
				case 125:
				case 127:
				case 129:
				case 134:
				case 138:
				case 139:
				case 141:
				case 150:
				case 154:
				case 155:
				case 158:
				case 160:
				case 163:
				case 164:
				case 165:
				case 166:
				case 167:
					{
					alt190 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 190, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(190); }
				switch (alt190)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:556:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(556, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(556, 76);
					// SugarCpp.g:556:76: ( ident )*
					try { DebugEnterSubRule(188);
					while (true)
					{
						int alt188=2;
						try { DebugEnterDecision(188, false);
						int LA188_0 = input.LA(1);

						if ((LA188_0==IDENT))
						{
							alt188 = 1;
						}


						} finally { DebugExitDecision(188); }
						switch ( alt188 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:556:76: ident
							{
							DebugLocation(556, 76);
							PushFollow(Follow._ident_in_cmp_expr4619);
							ident416=ident();
							PopFollow();

							stream_ident.Add(ident416.Tree);

							}
							break;

						default:
							goto loop188;
						}
					}

					loop188:
						;

					} finally { DebugExitSubRule(188); }

					DebugLocation(556, 83);
					char_literal417=(IToken)Match(input,115,Follow._115_in_cmp_expr4622);  
					stream_115.Add(char_literal417);

					DebugLocation(556, 87);
					char_literal418=(IToken)Match(input,86,Follow._86_in_cmp_expr4624);  
					stream_86.Add(char_literal418);

					DebugLocation(556, 91);
					// SugarCpp.g:556:91: ( expr_list )?
					int alt189=2;
					try { DebugEnterSubRule(189);
					try { DebugEnterDecision(189, false);
					int LA189_0 = input.LA(1);

					if ((LA189_0==IDENT||LA189_0==NUMBER||LA189_0==STRING||LA189_0==79||LA189_0==84||LA189_0==86||LA189_0==88||(LA189_0>=90 && LA189_0<=91)||(LA189_0>=94 && LA189_0<=95)||(LA189_0>=121 && LA189_0<=122)||LA189_0==144||LA189_0==146||(LA189_0>=148 && LA189_0<=149)||LA189_0==168))
					{
						alt189 = 1;
					}
					} finally { DebugExitDecision(189); }
					switch (alt189)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:556:91: expr_list
						{
						DebugLocation(556, 91);
						PushFollow(Follow._expr_list_in_cmp_expr4626);
						expr_list419=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list419.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(189); }

					DebugLocation(556, 102);
					char_literal420=(IToken)Match(input,87,Follow._87_in_cmp_expr4629);  
					stream_87.Add(char_literal420);



					{
					// AST REWRITE
					// elements: expr_list, cmp_expr, b, ident
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 556:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(556, 109);
						// SugarCpp.g:556:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(556, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(556, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(556, 131);
						// SugarCpp.g:556:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(556, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(556, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(556, 155);
						// SugarCpp.g:556:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(556, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(556, 163);
						// SugarCpp.g:556:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(556, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:557:46: chain_list
					{
					DebugLocation(557, 46);
					PushFollow(Follow._chain_list_in_cmp_expr4698);
					chain_list421=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list421.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, chain_list, b, 107
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 557:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(557, 60);
						// SugarCpp.g:557:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(557, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(557, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(557, 84);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(557, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(557, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:558:16: 
					{

					{
					// AST REWRITE
					// elements: b, 107, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 558:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(558, 19);
						// SugarCpp.g:558:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(558, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(558, 30);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(558, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(558, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(190); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:559:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(559, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr4775);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(559, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr4779);
				b=shift_expr();
				PopFollow();

				stream_shift_expr.Add(b.Tree);
				DebugLocation(559, 54);
				// SugarCpp.g:559:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt191=2;
				try { DebugEnterSubRule(191);
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==80||LA191_0==107||LA191_0==111||LA191_0==113||(LA191_0>=115 && LA191_0<=116)||(LA191_0>=142 && LA191_0<=143)))
				{
					alt191 = 1;
				}
				else if ((LA191_0==DEDENT||LA191_0==INDENT||LA191_0==NEWLINE||(LA191_0>=82 && LA191_0<=85)||LA191_0==87||LA191_0==89||(LA191_0>=92 && LA191_0<=93)||LA191_0==96||(LA191_0>=102 && LA191_0<=103)||(LA191_0>=105 && LA191_0<=106)||LA191_0==110||LA191_0==112||LA191_0==114||(LA191_0>=118 && LA191_0<=119)||(LA191_0>=123 && LA191_0<=125)||LA191_0==127||LA191_0==129||LA191_0==134||(LA191_0>=138 && LA191_0<=139)||LA191_0==141||LA191_0==150||(LA191_0>=154 && LA191_0<=155)||LA191_0==158||LA191_0==160||(LA191_0>=163 && LA191_0<=167)))
				{
					alt191 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(191); }
				switch (alt191)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:559:56: chain_list
					{
					DebugLocation(559, 56);
					PushFollow(Follow._chain_list_in_cmp_expr4783);
					chain_list422=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list422.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, chain_list, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 559:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(559, 70);
						// SugarCpp.g:559:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(559, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(559, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(559, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(559, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(559, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:560:17: 
					{

					{
					// AST REWRITE
					// elements: b, op, cmp_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 560:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(560, 20);
						// SugarCpp.g:560:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(560, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(560, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(560, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(560, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(191); }


				}
				break;

			}
			} finally { DebugExitSubRule(192); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 72);
			LeaveRule("cmp_expr", 72);
			LeaveRule_cmp_expr();
		}
		DebugLocation(563, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:565:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 73);
		TraceIn("shift_expr_op", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set423 = default(IToken);

		CommonTree set423_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(565, 27);
		try
		{
			// SugarCpp.g:565:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(565, 14);

			set423=(IToken)input.LT(1);
			if (input.LA(1)==109||input.LA(1)==117)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set423));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 73);
			LeaveRule("shift_expr_op", 73);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(565, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:566:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 74);
		TraceIn("shift_expr", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op424 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(566, 1);
		try
		{
			// SugarCpp.g:567:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:567:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(567, 4);
			// SugarCpp.g:567:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:567:5: a= add_expr
			{
			DebugLocation(567, 6);
			PushFollow(Follow._add_expr_in_shift_expr4885);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 567:16: -> $a
			{
				DebugLocation(567, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(567, 23);
			// SugarCpp.g:567:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(193);
			while (true)
			{
				int alt193=2;
				try { DebugEnterDecision(193, false);
				int LA193_0 = input.LA(1);

				if ((LA193_0==109||LA193_0==117))
				{
					alt193 = 1;
				}


				} finally { DebugExitDecision(193); }
				switch ( alt193 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:567:24: shift_expr_op b= add_expr
					{
					DebugLocation(567, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr4894);
					shift_expr_op424=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op424.Tree);
					DebugLocation(567, 39);
					PushFollow(Follow._add_expr_in_shift_expr4898);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 567:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(567, 52);
						// SugarCpp.g:567:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(567, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(567, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(567, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(567, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop193;
				}
			}

			loop193:
				;

			} finally { DebugExitSubRule(193); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 74);
			LeaveRule("shift_expr", 74);
			LeaveRule_shift_expr();
		}
		DebugLocation(568, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:570:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 75);
		TraceIn("add_expr", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal425 = default(IToken);
		IToken char_literal426 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal425_tree = default(CommonTree);
		CommonTree char_literal426_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(570, 1);
		try
		{
			// SugarCpp.g:571:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:571:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(571, 4);
			// SugarCpp.g:571:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:571:5: a= mul_expr
			{
			DebugLocation(571, 6);
			PushFollow(Follow._mul_expr_in_add_expr4928);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 571:16: -> $a
			{
				DebugLocation(571, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(571, 23);
			// SugarCpp.g:571:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(194);
			while (true)
			{
				int alt194=3;
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==90))
				{
					alt194 = 1;
				}
				else if ((LA194_0==94))
				{
					alt194 = 2;
				}


				} finally { DebugExitDecision(194); }
				switch ( alt194 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:571:25: '+' b= mul_expr
					{
					DebugLocation(571, 25);
					char_literal425=(IToken)Match(input,90,Follow._90_in_add_expr4938);  
					stream_90.Add(char_literal425);

					DebugLocation(571, 30);
					PushFollow(Follow._mul_expr_in_add_expr4942);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 90
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 571:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(571, 43);
						// SugarCpp.g:571:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(571, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(571, 54);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(571, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(571, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:572:10: '-' b= mul_expr
					{
					DebugLocation(572, 10);
					char_literal426=(IToken)Match(input,94,Follow._94_in_add_expr4967);  
					stream_94.Add(char_literal426);

					DebugLocation(572, 15);
					PushFollow(Follow._mul_expr_in_add_expr4971);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 94, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 572:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(572, 28);
						// SugarCpp.g:572:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(572, 39);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(572, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(572, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop194;
				}
			}

			loop194:
				;

			} finally { DebugExitSubRule(194); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 75);
			LeaveRule("add_expr", 75);
			LeaveRule_add_expr();
		}
		DebugLocation(574, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:576:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 76);
		TraceIn("mul_expr", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal427 = default(IToken);
		IToken char_literal428 = default(IToken);
		IToken char_literal429 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal427_tree = default(CommonTree);
		CommonTree char_literal428_tree = default(CommonTree);
		CommonTree char_literal429_tree = default(CommonTree);
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(576, 1);
		try
		{
			// SugarCpp.g:577:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:577:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(577, 4);
			// SugarCpp.g:577:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:577:5: a= infix_expr
			{
			DebugLocation(577, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5009);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 577:18: -> $a
			{
				DebugLocation(577, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(577, 25);
			// SugarCpp.g:577:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(195);
			while (true)
			{
				int alt195=4;
				try { DebugEnterDecision(195, false);
				switch (input.LA(1))
				{
				case 88:
					{
					alt195 = 1;
					}
					break;
				case 101:
					{
					alt195 = 2;
					}
					break;
				case 81:
					{
					alt195 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(195); }
				switch ( alt195 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:577:27: '*' b= infix_expr
					{
					DebugLocation(577, 27);
					char_literal427=(IToken)Match(input,88,Follow._88_in_mul_expr5019);  
					stream_88.Add(char_literal427);

					DebugLocation(577, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5023);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 88
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 577:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(577, 47);
						// SugarCpp.g:577:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(577, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(577, 58);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(577, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(577, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:578:12: '/' b= infix_expr
					{
					DebugLocation(578, 12);
					char_literal428=(IToken)Match(input,101,Follow._101_in_mul_expr5050);  
					stream_101.Add(char_literal428);

					DebugLocation(578, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5054);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 101, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 578:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(578, 32);
						// SugarCpp.g:578:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(578, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(578, 43);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(578, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(578, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:579:12: '%' b= infix_expr
					{
					DebugLocation(579, 12);
					char_literal429=(IToken)Match(input,81,Follow._81_in_mul_expr5081);  
					stream_81.Add(char_literal429);

					DebugLocation(579, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5085);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 81
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 579:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(579, 32);
						// SugarCpp.g:579:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(579, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(579, 43);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(579, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(579, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop195;
				}
			}

			loop195:
				;

			} finally { DebugExitSubRule(195); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 76);
			LeaveRule("mul_expr", 76);
			LeaveRule_mul_expr();
		}
		DebugLocation(581, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:583:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 77);
		TraceIn("infix_expr", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func430 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(583, 1);
		try
		{
			// SugarCpp.g:584:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:584:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(584, 4);
			// SugarCpp.g:584:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:584:5: a= selector_expr
			{
			DebugLocation(584, 6);
			PushFollow(Follow._selector_expr_in_infix_expr5125);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 584:21: -> $a
			{
				DebugLocation(584, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(584, 28);
			// SugarCpp.g:584:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(196);
			while (true)
			{
				int alt196=2;
				try { DebugEnterDecision(196, false);
				int LA196_0 = input.LA(1);

				if ((LA196_0==126))
				{
					alt196 = 1;
				}


				} finally { DebugExitDecision(196); }
				switch ( alt196 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:584:30: infix_func b= selector_expr
					{
					DebugLocation(584, 30);
					PushFollow(Follow._infix_func_in_infix_expr5135);
					infix_func430=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func430.Tree);
					DebugLocation(584, 42);
					PushFollow(Follow._selector_expr_in_infix_expr5139);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, b, infix_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 584:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(584, 61);
						// SugarCpp.g:584:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(584, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(584, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(584, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(584, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop196;
				}
			}

			loop196:
				;

			} finally { DebugExitSubRule(196); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 77);
			LeaveRule("infix_expr", 77);
			LeaveRule_infix_expr();
		}
		DebugLocation(585, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:587:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 78);
		TraceIn("selector_expr", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal431 = default(IToken);
		IToken string_literal432 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal431_tree = default(CommonTree);
		CommonTree string_literal432_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(587, 1);
		try
		{
			// SugarCpp.g:588:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:588:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(588, 4);
			// SugarCpp.g:588:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:588:5: a= cast_expr
			{
			DebugLocation(588, 6);
			PushFollow(Follow._cast_expr_in_selector_expr5171);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 588:17: -> $a
			{
				DebugLocation(588, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(588, 24);
			// SugarCpp.g:588:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(197);
			while (true)
			{
				int alt197=3;
				try { DebugEnterDecision(197, false);
				int LA197_0 = input.LA(1);

				if ((LA197_0==98))
				{
					alt197 = 1;
				}
				else if ((LA197_0==100))
				{
					alt197 = 2;
				}


				} finally { DebugExitDecision(197); }
				switch ( alt197 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:588:26: '->*' b= ident
					{
					DebugLocation(588, 26);
					string_literal431=(IToken)Match(input,98,Follow._98_in_selector_expr5181);  
					stream_98.Add(string_literal431);

					DebugLocation(588, 33);
					PushFollow(Follow._ident_in_selector_expr5185);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 98, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 588:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(588, 43);
						// SugarCpp.g:588:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(588, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(588, 57);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(588, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(588, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:589:11: '.*' b= ident
					{
					DebugLocation(589, 11);
					string_literal432=(IToken)Match(input,100,Follow._100_in_selector_expr5211);  
					stream_100.Add(string_literal432);

					DebugLocation(589, 18);
					PushFollow(Follow._ident_in_selector_expr5216);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 100
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 589:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(589, 28);
						// SugarCpp.g:589:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(589, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(589, 42);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(589, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(589, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop197;
				}
			}

			loop197:
				;

			} finally { DebugExitSubRule(197); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 78);
			LeaveRule("selector_expr", 78);
			LeaveRule_selector_expr();
		}
		DebugLocation(591, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:593:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 79);
		TraceIn("cast_expr", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal433 = default(IToken);
		IToken char_literal434 = default(IToken);
		IToken char_literal436 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name435 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal433_tree = default(CommonTree);
		CommonTree char_literal434_tree = default(CommonTree);
		CommonTree char_literal436_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(593, 1);
		try
		{
			// SugarCpp.g:594:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:594:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(594, 4);
			// SugarCpp.g:594:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:594:5: a= prefix_expr
			{
			DebugLocation(594, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5256);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 594:19: -> $a
			{
				DebugLocation(594, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(594, 26);
			// SugarCpp.g:594:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt198=2;
			try { DebugEnterSubRule(198);
			try { DebugEnterDecision(198, false);
			int LA198_0 = input.LA(1);

			if ((LA198_0==128))
			{
				alt198 = 1;
			}
			} finally { DebugExitDecision(198); }
			switch (alt198)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:594:27: 'as' '(' type_name ')'
				{
				DebugLocation(594, 27);
				string_literal433=(IToken)Match(input,128,Follow._128_in_cast_expr5265);  
				stream_128.Add(string_literal433);

				DebugLocation(594, 32);
				char_literal434=(IToken)Match(input,86,Follow._86_in_cast_expr5267);  
				stream_86.Add(char_literal434);

				DebugLocation(594, 36);
				PushFollow(Follow._type_name_in_cast_expr5269);
				type_name435=type_name();
				PopFollow();

				stream_type_name.Add(type_name435.Tree);
				DebugLocation(594, 46);
				char_literal436=(IToken)Match(input,87,Follow._87_in_cast_expr5271);  
				stream_87.Add(char_literal436);



				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 594:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(594, 53);
					// SugarCpp.g:594:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(594, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(594, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(594, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(198); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 79);
			LeaveRule("cast_expr", 79);
			LeaveRule_cast_expr();
		}
		DebugLocation(595, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:597:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 80);
		TraceIn("prefix_expr_op", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set437 = default(IToken);

		CommonTree set437_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(597, 71);
		try
		{
			// SugarCpp.g:597:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(597, 15);

			set437=(IToken)input.LT(1);
			if (input.LA(1)==79||input.LA(1)==84||input.LA(1)==88||(input.LA(1)>=90 && input.LA(1)<=91)||(input.LA(1)>=94 && input.LA(1)<=95)||input.LA(1)==149||input.LA(1)==168)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set437));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 80);
			LeaveRule("prefix_expr_op", 80);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(597, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:598:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 81);
		TraceIn("prefix_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal440 = default(IToken);
		IToken char_literal442 = default(IToken);
		IToken char_literal444 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op438 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list443 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr445 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal440_tree = default(CommonTree);
		CommonTree char_literal442_tree = default(CommonTree);
		CommonTree char_literal444_tree = default(CommonTree);
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(598, 1);
		try
		{
			// SugarCpp.g:599:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | suffix_expr )
			int alt200=3;
			try { DebugEnterDecision(200, false);
			switch (input.LA(1))
			{
			case 79:
			case 84:
			case 88:
			case 90:
			case 91:
			case 94:
			case 95:
			case 149:
			case 168:
				{
				alt200 = 1;
				}
				break;
			case 148:
				{
				alt200 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 86:
			case 121:
				{
				alt200 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 200, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(200); }
			switch (alt200)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:599:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(599, 4);
				// SugarCpp.g:599:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:599:5: prefix_expr_op prefix_expr
				{
				DebugLocation(599, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5333);
				prefix_expr_op438=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op438.Tree);
				DebugLocation(599, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5335);
				prefix_expr439=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr439.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 599:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(599, 36);
					// SugarCpp.g:599:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(599, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(599, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(599, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:600:4: 'new' type_name '(' ( expr_list )? ')'
				{
				DebugLocation(600, 4);
				string_literal440=(IToken)Match(input,148,Follow._148_in_prefix_expr5351);  
				stream_148.Add(string_literal440);

				DebugLocation(600, 10);
				PushFollow(Follow._type_name_in_prefix_expr5353);
				type_name441=type_name();
				PopFollow();

				stream_type_name.Add(type_name441.Tree);
				DebugLocation(600, 20);
				char_literal442=(IToken)Match(input,86,Follow._86_in_prefix_expr5355);  
				stream_86.Add(char_literal442);

				DebugLocation(600, 24);
				// SugarCpp.g:600:24: ( expr_list )?
				int alt199=2;
				try { DebugEnterSubRule(199);
				try { DebugEnterDecision(199, false);
				int LA199_0 = input.LA(1);

				if ((LA199_0==IDENT||LA199_0==NUMBER||LA199_0==STRING||LA199_0==79||LA199_0==84||LA199_0==86||LA199_0==88||(LA199_0>=90 && LA199_0<=91)||(LA199_0>=94 && LA199_0<=95)||(LA199_0>=121 && LA199_0<=122)||LA199_0==144||LA199_0==146||(LA199_0>=148 && LA199_0<=149)||LA199_0==168))
				{
					alt199 = 1;
				}
				} finally { DebugExitDecision(199); }
				switch (alt199)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:600:24: expr_list
					{
					DebugLocation(600, 24);
					PushFollow(Follow._expr_list_in_prefix_expr5357);
					expr_list443=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list443.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(199); }

				DebugLocation(600, 35);
				char_literal444=(IToken)Match(input,87,Follow._87_in_prefix_expr5360);  
				stream_87.Add(char_literal444);



				{
				// AST REWRITE
				// elements: expr_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 600:39: -> ^( Expr_New_Type type_name ( expr_list )? )
				{
					DebugLocation(600, 42);
					// SugarCpp.g:600:42: ^( Expr_New_Type type_name ( expr_list )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(600, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

					DebugLocation(600, 58);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(600, 68);
					// SugarCpp.g:600:68: ( expr_list )?
					if (stream_expr_list.HasNext)
					{
						DebugLocation(600, 68);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

					}
					stream_expr_list.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:601:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(601, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr5376);
				suffix_expr445=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr445.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 81);
			LeaveRule("prefix_expr", 81);
			LeaveRule_prefix_expr();
		}
		DebugLocation(602, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:604:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 82);
		TraceIn("expr_list", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal447 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr446 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr448 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal447_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(604, 1);
		try
		{
			// SugarCpp.g:605:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:605:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(605, 4);
			PushFollow(Follow._expr_in_expr_list5388);
			expr446=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr446.Tree);
			DebugLocation(605, 9);
			// SugarCpp.g:605:9: ( ',' ! expr )*
			try { DebugEnterSubRule(201);
			while (true)
			{
				int alt201=2;
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==93))
				{
					alt201 = 1;
				}


				} finally { DebugExitDecision(201); }
				switch ( alt201 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:605:10: ',' ! expr
					{
					DebugLocation(605, 13);
					char_literal447=(IToken)Match(input,93,Follow._93_in_expr_list5391); 
					DebugLocation(605, 15);
					PushFollow(Follow._expr_in_expr_list5394);
					expr448=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr448.Tree);

					}
					break;

				default:
					goto loop201;
				}
			}

			loop201:
				;

			} finally { DebugExitSubRule(201); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 82);
			LeaveRule("expr_list", 82);
			LeaveRule_expr_list();
		}
		DebugLocation(606, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:608:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 83);
		TraceIn("suffix_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal449 = default(IToken);
		IToken string_literal450 = default(IToken);
		IToken char_literal451 = default(IToken);
		IToken string_literal453 = default(IToken);
		IToken char_literal455 = default(IToken);
		IToken char_literal457 = default(IToken);
		IToken char_literal458 = default(IToken);
		IToken char_literal459 = default(IToken);
		IToken char_literal461 = default(IToken);
		IToken char_literal462 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident452 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident454 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list456 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list460 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal449_tree = default(CommonTree);
		CommonTree string_literal450_tree = default(CommonTree);
		CommonTree char_literal451_tree = default(CommonTree);
		CommonTree string_literal453_tree = default(CommonTree);
		CommonTree char_literal455_tree = default(CommonTree);
		CommonTree char_literal457_tree = default(CommonTree);
		CommonTree char_literal458_tree = default(CommonTree);
		CommonTree char_literal459_tree = default(CommonTree);
		CommonTree char_literal461_tree = default(CommonTree);
		CommonTree char_literal462_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(608, 1);
		try
		{
			// SugarCpp.g:609:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:609:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			{
			DebugLocation(609, 4);
			// SugarCpp.g:609:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:609:5: a= atom_expr
			{
			DebugLocation(609, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr5410);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 609:17: -> $a
			{
				DebugLocation(609, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(609, 24);
			// SugarCpp.g:609:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) ) | '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) ) )*
			try { DebugEnterSubRule(204);
			while (true)
			{
				int alt204=7;
				try { DebugEnterDecision(204, false);
				switch (input.LA(1))
				{
				case 91:
					{
					alt204 = 1;
					}
					break;
				case 95:
					{
					alt204 = 2;
					}
					break;
				case 99:
					{
					alt204 = 3;
					}
					break;
				case 97:
					{
					alt204 = 4;
					}
					break;
				case 86:
					{
					alt204 = 5;
					}
					break;
				case 122:
					{
					alt204 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(204); }
				switch ( alt204 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:609:26: '++'
					{
					DebugLocation(609, 26);
					string_literal449=(IToken)Match(input,91,Follow._91_in_suffix_expr5420);  
					stream_91.Add(string_literal449);



					{
					// AST REWRITE
					// elements: suffix_expr, 91
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 609:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(609, 34);
						// SugarCpp.g:609:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(609, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(609, 48);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(609, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:610:14: '--'
					{
					DebugLocation(610, 14);
					string_literal450=(IToken)Match(input,95,Follow._95_in_suffix_expr5446);  
					stream_95.Add(string_literal450);



					{
					// AST REWRITE
					// elements: 95, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(610, 22);
						// SugarCpp.g:610:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(610, 36);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(610, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:611:11: '.' ident
					{
					DebugLocation(611, 11);
					char_literal451=(IToken)Match(input,99,Follow._99_in_suffix_expr5469);  
					stream_99.Add(char_literal451);

					DebugLocation(611, 15);
					PushFollow(Follow._ident_in_suffix_expr5471);
					ident452=ident();
					PopFollow();

					stream_ident.Add(ident452.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, 99, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 611:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(611, 24);
						// SugarCpp.g:611:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(611, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(611, 38);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(611, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(611, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:612:11: '->' ident
					{
					DebugLocation(612, 11);
					string_literal453=(IToken)Match(input,97,Follow._97_in_suffix_expr5496);  
					stream_97.Add(string_literal453);

					DebugLocation(612, 16);
					PushFollow(Follow._ident_in_suffix_expr5498);
					ident454=ident();
					PopFollow();

					stream_ident.Add(ident454.Tree);


					{
					// AST REWRITE
					// elements: 97, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 612:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(612, 25);
						// SugarCpp.g:612:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(612, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(612, 39);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(612, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(612, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:613:11: '(' ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					{
					DebugLocation(613, 11);
					char_literal455=(IToken)Match(input,86,Follow._86_in_suffix_expr5523);  
					stream_86.Add(char_literal455);

					DebugLocation(613, 15);
					// SugarCpp.g:613:15: ( expr_list ')' -> ^( Expr_Call $suffix_expr expr_list ) | ')' -> ^( Expr_Call $suffix_expr) )
					int alt202=2;
					try { DebugEnterSubRule(202);
					try { DebugEnterDecision(202, false);
					int LA202_0 = input.LA(1);

					if ((LA202_0==IDENT||LA202_0==NUMBER||LA202_0==STRING||LA202_0==79||LA202_0==84||LA202_0==86||LA202_0==88||(LA202_0>=90 && LA202_0<=91)||(LA202_0>=94 && LA202_0<=95)||(LA202_0>=121 && LA202_0<=122)||LA202_0==144||LA202_0==146||(LA202_0>=148 && LA202_0<=149)||LA202_0==168))
					{
						alt202 = 1;
					}
					else if ((LA202_0==87))
					{
						alt202 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 202, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(202); }
					switch (alt202)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:613:17: expr_list ')'
						{
						DebugLocation(613, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5527);
						expr_list456=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list456.Tree);
						DebugLocation(613, 27);
						char_literal457=(IToken)Match(input,87,Follow._87_in_suffix_expr5529);  
						stream_87.Add(char_literal457);



						{
						// AST REWRITE
						// elements: suffix_expr, expr_list
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 613:31: -> ^( Expr_Call $suffix_expr expr_list )
						{
							DebugLocation(613, 34);
							// SugarCpp.g:613:34: ^( Expr_Call $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(613, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(613, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(613, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:614:17: ')'
						{
						DebugLocation(614, 17);
						char_literal458=(IToken)Match(input,87,Follow._87_in_suffix_expr5558);  
						stream_87.Add(char_literal458);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 614:21: -> ^( Expr_Call $suffix_expr)
						{
							DebugLocation(614, 24);
							// SugarCpp.g:614:24: ^( Expr_Call $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(614, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(614, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(202); }


					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:616:11: '[' ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					{
					DebugLocation(616, 11);
					char_literal459=(IToken)Match(input,122,Follow._122_in_suffix_expr5589);  
					stream_122.Add(char_literal459);

					DebugLocation(616, 15);
					// SugarCpp.g:616:15: ( expr_list ']' -> ^( Expr_Dict $suffix_expr expr_list ) | ']' -> ^( Expr_Dict $suffix_expr) )
					int alt203=2;
					try { DebugEnterSubRule(203);
					try { DebugEnterDecision(203, false);
					int LA203_0 = input.LA(1);

					if ((LA203_0==IDENT||LA203_0==NUMBER||LA203_0==STRING||LA203_0==79||LA203_0==84||LA203_0==86||LA203_0==88||(LA203_0>=90 && LA203_0<=91)||(LA203_0>=94 && LA203_0<=95)||(LA203_0>=121 && LA203_0<=122)||LA203_0==144||LA203_0==146||(LA203_0>=148 && LA203_0<=149)||LA203_0==168))
					{
						alt203 = 1;
					}
					else if ((LA203_0==123))
					{
						alt203 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 203, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(203); }
					switch (alt203)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:616:17: expr_list ']'
						{
						DebugLocation(616, 17);
						PushFollow(Follow._expr_list_in_suffix_expr5593);
						expr_list460=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list460.Tree);
						DebugLocation(616, 27);
						char_literal461=(IToken)Match(input,123,Follow._123_in_suffix_expr5595);  
						stream_123.Add(char_literal461);



						{
						// AST REWRITE
						// elements: expr_list, suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 616:31: -> ^( Expr_Dict $suffix_expr expr_list )
						{
							DebugLocation(616, 34);
							// SugarCpp.g:616:34: ^( Expr_Dict $suffix_expr expr_list )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(616, 36);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(616, 47);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(616, 59);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:617:17: ']'
						{
						DebugLocation(617, 17);
						char_literal462=(IToken)Match(input,123,Follow._123_in_suffix_expr5624);  
						stream_123.Add(char_literal462);



						{
						// AST REWRITE
						// elements: suffix_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 617:21: -> ^( Expr_Dict $suffix_expr)
						{
							DebugLocation(617, 24);
							// SugarCpp.g:617:24: ^( Expr_Dict $suffix_expr)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(617, 26);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

							DebugLocation(617, 37);
							adaptor.AddChild(root_1, stream_retval.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(203); }


					}
					break;

				default:
					goto loop204;
				}
			}

			loop204:
				;

			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 83);
			LeaveRule("suffix_expr", 83);
			LeaveRule_suffix_expr();
		}
		DebugLocation(621, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:623:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 84);
		TraceIn("atom_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER463 = default(IToken);
		IToken STRING465 = default(IToken);
		IToken char_literal466 = default(IToken);
		IToken char_literal468 = default(IToken);
		IToken char_literal469 = default(IToken);
		IToken char_literal471 = default(IToken);
		IToken char_literal472 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident467 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr470 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER463_tree = default(CommonTree);
		CommonTree STRING465_tree = default(CommonTree);
		CommonTree char_literal466_tree = default(CommonTree);
		CommonTree char_literal468_tree = default(CommonTree);
		CommonTree char_literal469_tree = default(CommonTree);
		CommonTree char_literal471_tree = default(CommonTree);
		CommonTree char_literal472_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(623, 1);
		try
		{
			// SugarCpp.g:624:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt207=5;
			try { DebugEnterDecision(207, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt207 = 1;
				}
				break;
			case IDENT:
				{
				alt207 = 2;
				}
				break;
			case STRING:
				{
				alt207 = 3;
				}
				break;
			case 121:
				{
				alt207 = 4;
				}
				break;
			case 86:
				{
				alt207 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 207, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:624:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(624, 4);
				NUMBER463=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr5677); 
				NUMBER463_tree = (CommonTree)adaptor.Create(NUMBER463);
				adaptor.AddChild(root_0, NUMBER463_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:625:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(625, 4);
				PushFollow(Follow._ident_in_atom_expr5682);
				ident464=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident464.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:626:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(626, 4);
				STRING465=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr5687); 
				STRING465_tree = (CommonTree)adaptor.Create(STRING465);
				adaptor.AddChild(root_0, STRING465_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:627:4: '@' ident
				{
				DebugLocation(627, 4);
				char_literal466=(IToken)Match(input,121,Follow._121_in_atom_expr5692);  
				stream_121.Add(char_literal466);

				DebugLocation(627, 8);
				PushFollow(Follow._ident_in_atom_expr5694);
				ident467=ident();
				PopFollow();

				stream_ident.Add(ident467.Tree);


				{
				// AST REWRITE
				// elements: ident, 121
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 627:14: -> ^( '@' ident )
				{
					DebugLocation(627, 17);
					// SugarCpp.g:627:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(627, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_121.NextNode(), root_1);

					DebugLocation(627, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:628:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(628, 4);
				char_literal468=(IToken)Match(input,86,Follow._86_in_atom_expr5707);  
				stream_86.Add(char_literal468);

				DebugLocation(628, 9);
				PushFollow(Follow._expr_in_atom_expr5711);
				a=expr();
				PopFollow();

				stream_expr.Add(a.Tree);
				DebugLocation(628, 15);
				// SugarCpp.g:628:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt206=2;
				try { DebugEnterSubRule(206);
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==93))
				{
					alt206 = 1;
				}
				else if ((LA206_0==87))
				{
					alt206 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 206, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(206); }
				switch (alt206)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:628:17: ( ',' expr )+ ')'
					{
					DebugLocation(628, 17);
					// SugarCpp.g:628:17: ( ',' expr )+
					int cnt205=0;
					try { DebugEnterSubRule(205);
					while (true)
					{
						int alt205=2;
						try { DebugEnterDecision(205, false);
						int LA205_0 = input.LA(1);

						if ((LA205_0==93))
						{
							alt205 = 1;
						}


						} finally { DebugExitDecision(205); }
						switch (alt205)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:628:18: ',' expr
							{
							DebugLocation(628, 18);
							char_literal469=(IToken)Match(input,93,Follow._93_in_atom_expr5716);  
							stream_93.Add(char_literal469);

							DebugLocation(628, 22);
							PushFollow(Follow._expr_in_atom_expr5718);
							expr470=expr();
							PopFollow();

							stream_expr.Add(expr470.Tree);

							}
							break;

						default:
							if (cnt205 >= 1)
								goto loop205;

							EarlyExitException eee205 = new EarlyExitException( 205, input );
							DebugRecognitionException(eee205);
							throw eee205;
						}
						cnt205++;
					}
					loop205:
						;

					} finally { DebugExitSubRule(205); }

					DebugLocation(628, 29);
					char_literal471=(IToken)Match(input,87,Follow._87_in_atom_expr5722);  
					stream_87.Add(char_literal471);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 628:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(628, 36);
						// SugarCpp.g:628:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(628, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(628, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(628, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:629:17: ')' {...}?
					{
					DebugLocation(629, 17);
					char_literal472=(IToken)Match(input,87,Follow._87_in_atom_expr5749);  
					stream_87.Add(char_literal472);

					DebugLocation(629, 21);
					if (!(( true&&true )))
					{
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 629:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(629, 40);
						// SugarCpp.g:629:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(629, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(629, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(206); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 84);
			LeaveRule("atom_expr", 84);
			LeaveRule_atom_expr();
		}
		DebugLocation(631, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:633:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 85);
		TraceIn("lvalue_item", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix473 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(633, 1);
		try
		{
			// SugarCpp.g:634:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:634:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(634, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item5780);
			lvalue_prefix473=lvalue_prefix();
			PopFollow();

			adaptor.AddChild(root_0, lvalue_prefix473.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 85);
			LeaveRule("lvalue_item", 85);
			LeaveRule_lvalue_item();
		}
		DebugLocation(635, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:637:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 86);
		TraceIn("lvalue_prefix", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op474 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix475 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix476 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(637, 1);
		try
		{
			// SugarCpp.g:638:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt208=2;
			try { DebugEnterDecision(208, false);
			int LA208_0 = input.LA(1);

			if ((LA208_0==79||LA208_0==84||LA208_0==88||(LA208_0>=90 && LA208_0<=91)||(LA208_0>=94 && LA208_0<=95)||LA208_0==149||LA208_0==168))
			{
				alt208 = 1;
			}
			else if ((LA208_0==IDENT||LA208_0==121))
			{
				alt208 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(208); }
			switch (alt208)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:638:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(638, 4);
				// SugarCpp.g:638:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:638:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(638, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix5792);
				prefix_expr_op474=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op474.Tree);
				DebugLocation(638, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix5794);
				lvalue_prefix475=lvalue_prefix();
				PopFollow();

				stream_lvalue_prefix.Add(lvalue_prefix475.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 638:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(638, 38);
					// SugarCpp.g:638:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(638, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(638, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(638, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:639:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(639, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix5810);
				lvalue_suffix476=lvalue_suffix();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_suffix476.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 86);
			LeaveRule("lvalue_prefix", 86);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(640, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:642:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 87);
		TraceIn("lvalue_suffix", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal477 = default(IToken);
		IToken string_literal478 = default(IToken);
		IToken char_literal479 = default(IToken);
		IToken string_literal481 = default(IToken);
		IToken char_literal484 = default(IToken);
		IToken char_literal486 = default(IToken);
		IToken char_literal487 = default(IToken);
		IToken char_literal489 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident480 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident482 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter483 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list485 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list488 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal477_tree = default(CommonTree);
		CommonTree string_literal478_tree = default(CommonTree);
		CommonTree char_literal479_tree = default(CommonTree);
		CommonTree string_literal481_tree = default(CommonTree);
		CommonTree char_literal484_tree = default(CommonTree);
		CommonTree char_literal486_tree = default(CommonTree);
		CommonTree char_literal487_tree = default(CommonTree);
		CommonTree char_literal489_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(642, 1);
		try
		{
			// SugarCpp.g:643:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:643:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			{
			DebugLocation(643, 4);
			// SugarCpp.g:643:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:643:5: a= lvalue_atom
			{
			DebugLocation(643, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix5824);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 643:19: -> $a
			{
				DebugLocation(643, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(643, 26);
			// SugarCpp.g:643:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_suffix ( expr_list )? ) )*
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=7;
				try { DebugEnterDecision(212, false);
				switch (input.LA(1))
				{
				case 91:
					{
					alt212 = 1;
					}
					break;
				case 95:
					{
					alt212 = 2;
					}
					break;
				case 99:
					{
					alt212 = 3;
					}
					break;
				case 97:
					{
					alt212 = 4;
					}
					break;
				case 86:
				case 107:
					{
					alt212 = 5;
					}
					break;
				case 122:
					{
					alt212 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(212); }
				switch ( alt212 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:643:28: '++'
					{
					DebugLocation(643, 28);
					string_literal477=(IToken)Match(input,91,Follow._91_in_lvalue_suffix5834);  
					stream_91.Add(string_literal477);



					{
					// AST REWRITE
					// elements: 91, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 643:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(643, 36);
						// SugarCpp.g:643:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(643, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(643, 50);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(643, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:644:16: '--'
					{
					DebugLocation(644, 16);
					string_literal478=(IToken)Match(input,95,Follow._95_in_lvalue_suffix5862);  
					stream_95.Add(string_literal478);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 95
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 644:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(644, 24);
						// SugarCpp.g:644:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(644, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(644, 38);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(644, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:645:13: '.' ident
					{
					DebugLocation(645, 13);
					char_literal479=(IToken)Match(input,99,Follow._99_in_lvalue_suffix5887);  
					stream_99.Add(char_literal479);

					DebugLocation(645, 17);
					PushFollow(Follow._ident_in_lvalue_suffix5889);
					ident480=ident();
					PopFollow();

					stream_ident.Add(ident480.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, ident, 99
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 645:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(645, 26);
						// SugarCpp.g:645:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(645, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(645, 40);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(645, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(645, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:646:13: '->' ident
					{
					DebugLocation(646, 13);
					string_literal481=(IToken)Match(input,97,Follow._97_in_lvalue_suffix5916);  
					stream_97.Add(string_literal481);

					DebugLocation(646, 18);
					PushFollow(Follow._ident_in_lvalue_suffix5918);
					ident482=ident();
					PopFollow();

					stream_ident.Add(ident482.Tree);


					{
					// AST REWRITE
					// elements: ident, 97, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 646:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(646, 27);
						// SugarCpp.g:646:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(646, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(646, 41);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(646, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(646, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:647:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(647, 13);
					// SugarCpp.g:647:13: ( generic_parameter )?
					int alt209=2;
					try { DebugEnterSubRule(209);
					try { DebugEnterDecision(209, false);
					int LA209_0 = input.LA(1);

					if ((LA209_0==107))
					{
						alt209 = 1;
					}
					} finally { DebugExitDecision(209); }
					switch (alt209)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:647:13: generic_parameter
						{
						DebugLocation(647, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix5945);
						generic_parameter483=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter483.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(209); }

					DebugLocation(647, 32);
					char_literal484=(IToken)Match(input,86,Follow._86_in_lvalue_suffix5948);  
					stream_86.Add(char_literal484);

					DebugLocation(647, 36);
					// SugarCpp.g:647:36: ( expr_list )?
					int alt210=2;
					try { DebugEnterSubRule(210);
					try { DebugEnterDecision(210, false);
					int LA210_0 = input.LA(1);

					if ((LA210_0==IDENT||LA210_0==NUMBER||LA210_0==STRING||LA210_0==79||LA210_0==84||LA210_0==86||LA210_0==88||(LA210_0>=90 && LA210_0<=91)||(LA210_0>=94 && LA210_0<=95)||(LA210_0>=121 && LA210_0<=122)||LA210_0==144||LA210_0==146||(LA210_0>=148 && LA210_0<=149)||LA210_0==168))
					{
						alt210 = 1;
					}
					} finally { DebugExitDecision(210); }
					switch (alt210)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:647:36: expr_list
						{
						DebugLocation(647, 36);
						PushFollow(Follow._expr_list_in_lvalue_suffix5950);
						expr_list485=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list485.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(210); }

					DebugLocation(647, 47);
					char_literal486=(IToken)Match(input,87,Follow._87_in_lvalue_suffix5953);  
					stream_87.Add(char_literal486);



					{
					// AST REWRITE
					// elements: lvalue_suffix, generic_parameter, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 647:51: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(647, 54);
						// SugarCpp.g:647:54: ^( Expr_Call $lvalue_suffix ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(647, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(647, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(647, 81);
						// SugarCpp.g:647:81: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(647, 81);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(647, 100);
						// SugarCpp.g:647:100: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(647, 100);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:648:13: '[' ( expr_list )? ']'
					{
					DebugLocation(648, 13);
					char_literal487=(IToken)Match(input,122,Follow._122_in_lvalue_suffix5982);  
					stream_122.Add(char_literal487);

					DebugLocation(648, 17);
					// SugarCpp.g:648:17: ( expr_list )?
					int alt211=2;
					try { DebugEnterSubRule(211);
					try { DebugEnterDecision(211, false);
					int LA211_0 = input.LA(1);

					if ((LA211_0==IDENT||LA211_0==NUMBER||LA211_0==STRING||LA211_0==79||LA211_0==84||LA211_0==86||LA211_0==88||(LA211_0>=90 && LA211_0<=91)||(LA211_0>=94 && LA211_0<=95)||(LA211_0>=121 && LA211_0<=122)||LA211_0==144||LA211_0==146||(LA211_0>=148 && LA211_0<=149)||LA211_0==168))
					{
						alt211 = 1;
					}
					} finally { DebugExitDecision(211); }
					switch (alt211)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:648:17: expr_list
						{
						DebugLocation(648, 17);
						PushFollow(Follow._expr_list_in_lvalue_suffix5984);
						expr_list488=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list488.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(211); }

					DebugLocation(648, 28);
					char_literal489=(IToken)Match(input,123,Follow._123_in_lvalue_suffix5987);  
					stream_123.Add(char_literal489);



					{
					// AST REWRITE
					// elements: expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 648:32: -> ^( Expr_Dict $lvalue_suffix ( expr_list )? )
					{
						DebugLocation(648, 35);
						// SugarCpp.g:648:35: ^( Expr_Dict $lvalue_suffix ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(648, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(648, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(648, 62);
						// SugarCpp.g:648:62: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(648, 62);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop212;
				}
			}

			loop212:
				;

			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 87);
			LeaveRule("lvalue_suffix", 87);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(650, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:652:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 88);
		TraceIn("lvalue_atom", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal491 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident490 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident492 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal491_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(652, 1);
		try
		{
			// SugarCpp.g:653:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt213=2;
			try { DebugEnterDecision(213, false);
			int LA213_0 = input.LA(1);

			if ((LA213_0==IDENT))
			{
				alt213 = 1;
			}
			else if ((LA213_0==121))
			{
				alt213 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 213, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(213); }
			switch (alt213)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:653:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(653, 4);
				PushFollow(Follow._ident_in_lvalue_atom6026);
				ident490=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident490.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:654:4: '@' ident
				{
				DebugLocation(654, 4);
				char_literal491=(IToken)Match(input,121,Follow._121_in_lvalue_atom6031);  
				stream_121.Add(char_literal491);

				DebugLocation(654, 8);
				PushFollow(Follow._ident_in_lvalue_atom6033);
				ident492=ident();
				PopFollow();

				stream_ident.Add(ident492.Tree);


				{
				// AST REWRITE
				// elements: 121, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 654:14: -> ^( '@' ident )
				{
					DebugLocation(654, 17);
					// SugarCpp.g:654:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(654, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_121.NextNode(), root_1);

					DebugLocation(654, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 88);
			LeaveRule("lvalue_atom", 88);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(655, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:657:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 89);
		TraceIn("lvalue", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal493 = default(IToken);
		IToken char_literal495 = default(IToken);
		IToken char_literal497 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item494 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item496 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item498 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal493_tree = default(CommonTree);
		CommonTree char_literal495_tree = default(CommonTree);
		CommonTree char_literal497_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(657, 1);
		try
		{
			// SugarCpp.g:658:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt215=2;
			try { DebugEnterDecision(215, false);
			int LA215_0 = input.LA(1);

			if ((LA215_0==86))
			{
				alt215 = 1;
			}
			else if ((LA215_0==IDENT||LA215_0==79||LA215_0==84||LA215_0==88||(LA215_0>=90 && LA215_0<=91)||(LA215_0>=94 && LA215_0<=95)||LA215_0==121||LA215_0==149||LA215_0==168))
			{
				alt215 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 215, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(215); }
			switch (alt215)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:658:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(658, 4);
				char_literal493=(IToken)Match(input,86,Follow._86_in_lvalue6052);  
				stream_86.Add(char_literal493);

				DebugLocation(658, 8);
				PushFollow(Follow._lvalue_item_in_lvalue6054);
				lvalue_item494=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item494.Tree);
				DebugLocation(658, 20);
				// SugarCpp.g:658:20: ( ',' lvalue_item )+
				int cnt214=0;
				try { DebugEnterSubRule(214);
				while (true)
				{
					int alt214=2;
					try { DebugEnterDecision(214, false);
					int LA214_0 = input.LA(1);

					if ((LA214_0==93))
					{
						alt214 = 1;
					}


					} finally { DebugExitDecision(214); }
					switch (alt214)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:658:21: ',' lvalue_item
						{
						DebugLocation(658, 21);
						char_literal495=(IToken)Match(input,93,Follow._93_in_lvalue6057);  
						stream_93.Add(char_literal495);

						DebugLocation(658, 25);
						PushFollow(Follow._lvalue_item_in_lvalue6059);
						lvalue_item496=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item496.Tree);

						}
						break;

					default:
						if (cnt214 >= 1)
							goto loop214;

						EarlyExitException eee214 = new EarlyExitException( 214, input );
						DebugRecognitionException(eee214);
						throw eee214;
					}
					cnt214++;
				}
				loop214:
					;

				} finally { DebugExitSubRule(214); }

				DebugLocation(658, 39);
				char_literal497=(IToken)Match(input,87,Follow._87_in_lvalue6063);  
				stream_87.Add(char_literal497);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 658:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(658, 46);
					// SugarCpp.g:658:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(658, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(658, 60);
					// SugarCpp.g:658:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(658, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:659:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(659, 4);
				PushFollow(Follow._lvalue_item_in_lvalue6077);
				lvalue_item498=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item498.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 89);
			LeaveRule("lvalue", 89);
			LeaveRule_lvalue();
		}
		DebugLocation(660, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:662:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 90);
		TraceIn("ident", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT499 = default(IToken);
		IToken string_literal500 = default(IToken);
		IToken IDENT501 = default(IToken);

		CommonTree IDENT499_tree = default(CommonTree);
		CommonTree string_literal500_tree = default(CommonTree);
		CommonTree IDENT501_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(662, 1);
		try
		{
			// SugarCpp.g:663:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:663:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(663, 4);
			IDENT499=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6088); 
			IDENT499_tree = (CommonTree)adaptor.Create(IDENT499);
			adaptor.AddChild(root_0, IDENT499_tree);
			DebugLocation(663, 10);
			// SugarCpp.g:663:10: ( '::' IDENT )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==104))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:663:11: '::' IDENT
					{
					DebugLocation(663, 11);
					string_literal500=(IToken)Match(input,104,Follow._104_in_ident6091); 
					string_literal500_tree = (CommonTree)adaptor.Create(string_literal500);
					adaptor.AddChild(root_0, string_literal500_tree);
					DebugLocation(663, 16);
					IDENT501=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6093); 
					IDENT501_tree = (CommonTree)adaptor.Create(IDENT501);
					adaptor.AddChild(root_0, IDENT501_tree);

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 90);
			LeaveRule("ident", 90);
			LeaveRule_ident();
		}
		DebugLocation(664, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:666:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 91);
		TraceIn("infix_func", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal502 = default(IToken);
		IToken char_literal504 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident503 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal502_tree = default(CommonTree);
		CommonTree char_literal504_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(666, 1);
		try
		{
			// SugarCpp.g:667:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:667:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(667, 7);
			char_literal502=(IToken)Match(input,126,Follow._126_in_infix_func6106); 
			DebugLocation(667, 9);
			PushFollow(Follow._ident_in_infix_func6109);
			ident503=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident503.Tree);
			DebugLocation(667, 18);
			char_literal504=(IToken)Match(input,126,Follow._126_in_infix_func6111); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 91);
			LeaveRule("infix_func", 91);
			LeaveRule_infix_func();
		}
		DebugLocation(668, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA29 dfa29;
	private DFA36 dfa36;
	private DFA44 dfa44;
	private DFA63 dfa63;
	private DFA80 dfa80;
	private DFA89 dfa89;
	private DFA94 dfa94;
	private DFA107 dfa107;
	private DFA150 dfa150;
	private DFA139 dfa139;
	private DFA171 dfa171;
	private DFA170 dfa170;
	private DFA176 dfa176;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa29 = new DFA29( this );
		dfa36 = new DFA36( this );
		dfa44 = new DFA44( this );
		dfa63 = new DFA63( this );
		dfa80 = new DFA80( this );
		dfa89 = new DFA89( this );
		dfa94 = new DFA94( this );
		dfa107 = new DFA107( this );
		dfa150 = new DFA150( this );
		dfa139 = new DFA139( this );
		dfa171 = new DFA171( this );
		dfa170 = new DFA170( this );
		dfa176 = new DFA176( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2A\x1\xFFFF\x1\x2A\x6\xFFFF\x2\x56\x1\x2A\x1\xFFFF\x3\x2A\x1\x33"+
			"\x2\x2A\x1\x56\x3\x57\x2\x56\x1\x2A\x3\x57\x1\x2A\x1\x5D\x5\x2A\x1\x5D"+
			"\x1\x2A\x4\x57\x1\x56\xA\x57\x2\x2A\x1\x5D\x2\x2A\x1\x5D\x2\x2A\xA\x57"+
			"\x2\x2A\x2\x57";
		private const string DFA4_maxS =
			"\x1\xA8\x1\x84\x1\xFFFF\x1\xA8\x6\xFFFF\x2\x7B\x1\x2A\x1\xFFFF\x1\x2A"+
			"\x1\x39\x1\x84\x1\x33\x1\x39\x1\xA8\x1\x7B\x2\x5D\x1\x68\x2\x7B\x1\xA8"+
			"\x2\x5D\x1\x68\x1\x39\x1\x7B\x2\x2A\x3\x39\x1\x7B\x1\x2A\x2\x5D\x2\x68"+
			"\x1\x7B\x2\x5D\x1\x68\x2\x5D\x1\x68\x2\x5D\x2\x68\x1\x2A\x1\x39\x1\x7B"+
			"\x1\x2A\x1\x39\x1\x7B\x2\x2A\x1\x68\x2\x5D\x2\x68\x2\x5D\x3\x68\x2\x2A"+
			"\x2\x68";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2B\xFFFF\x1\x2\x23\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x1"+
				"\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\xA\x59\xFFFF\x1\xB",
				"",
				"\x1\x2\x29\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x2D\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x59\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x29\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x2D\xFFFF"+
				"\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x22\xFFFF\x1\x2\x23\xFFFF\x1\x1\x8\xFFFF\x1"+
				"\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x6\xFFFF\x1\x9\x4\xFFFF\x1\x2"+
				"\x4\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "211:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA29_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x33\x1\xA8\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x22\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "255:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA36 : DFA
	{
		private const string DFA36_eotS =
			"\x4\xFFFF";
		private const string DFA36_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA36_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA36_maxS =
			"\x1\x33\x1\xA8\x2\xFFFF";
		private const string DFA36_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA36_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA36_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x22\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA36_eot = DFA.UnpackEncodedString(DFA36_eotS);
		private static readonly short[] DFA36_eof = DFA.UnpackEncodedString(DFA36_eofS);
		private static readonly char[] DFA36_min = DFA.UnpackEncodedStringToUnsignedChars(DFA36_minS);
		private static readonly char[] DFA36_max = DFA.UnpackEncodedStringToUnsignedChars(DFA36_maxS);
		private static readonly short[] DFA36_accept = DFA.UnpackEncodedString(DFA36_acceptS);
		private static readonly short[] DFA36_special = DFA.UnpackEncodedString(DFA36_specialS);
		private static readonly short[][] DFA36_transition;

		static DFA36()
		{
			int numStates = DFA36_transitionS.Length;
			DFA36_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA36_transition[i] = DFA.UnpackEncodedString(DFA36_transitionS[i]);
			}
		}

		public DFA36( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 36;
			this.eot = DFA36_eot;
			this.eof = DFA36_eof;
			this.min = DFA36_min;
			this.max = DFA36_max;
			this.accept = DFA36_accept;
			this.special = DFA36_special;
			this.transition = DFA36_transition;
		}

		public override string Description { get { return "263:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x33\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x33\x1\xA8\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x22\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x8\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x6\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x6\xFFFF\x1"+
				"\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "267:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA63 : DFA
	{
		private const string DFA63_eotS =
			"\x10\xFFFF";
		private const string DFA63_eofS =
			"\x10\xFFFF";
		private const string DFA63_minS =
			"\x1\x2A\x1\xFFFF\x1\x2A\x1\xFFFF\x4\x2A\x1\x54\x3\x2A\x2\x54\x1\x2A\x1"+
			"\x54";
		private const string DFA63_maxS =
			"\x1\xA8\x1\xFFFF\x1\xA8\x1\xFFFF\x1\x2A\x1\x9F\x1\x69\x1\xA8\x1\x7A\x1"+
			"\x2A\x1\x9F\x1\xA8\x2\x7A\x1\x2A\x1\x7A";
		private const string DFA63_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA63_specialS =
			"\x10\xFFFF}>";
		private static readonly string[] DFA63_transitionS =
			{
				"\x1\x2\x2B\xFFFF\x1\x3\x2D\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1\x1"+
				"\x8\xFFFF\x1\x3",
				"",
				"\x1\x1\x29\xFFFF\x1\x1\x1\xFFFF\x1\x6\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"",
				"\x1\x7",
				"\x1\x8\x48\xFFFF\x1\x1\x10\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x1",
				"\x1\x3\x2C\xFFFF\x1\x3\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x6\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x3",
				"\x1\x1\x29\xFFFF\x1\x1\x1\xFFFF\x1\x6\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x2D\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xA\xA\xFFFF\x1\x9\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xB\x6\xFFFF\x1\x1",
				"\x1\xC",
				"\x1\xD\x59\xFFFF\x1\x1\x13\xFFFF\x1\x1\x6\xFFFF\x1\x1",
				"\x1\x1\x29\xFFFF\x1\x1\x1\xFFFF\x1\x6\x1\xFFFF\x1\x1\x21\xFFFF\x1\x1"+
				"\x2D\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xA\xA\xFFFF\x1\x9\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xB\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xA\xA\xFFFF\x1\xE\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xB\x6\xFFFF\x1\x1",
				"\x1\xF",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xA\xA\xFFFF\x1\xE\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xB\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA63_eot = DFA.UnpackEncodedString(DFA63_eotS);
		private static readonly short[] DFA63_eof = DFA.UnpackEncodedString(DFA63_eofS);
		private static readonly char[] DFA63_min = DFA.UnpackEncodedStringToUnsignedChars(DFA63_minS);
		private static readonly char[] DFA63_max = DFA.UnpackEncodedStringToUnsignedChars(DFA63_maxS);
		private static readonly short[] DFA63_accept = DFA.UnpackEncodedString(DFA63_acceptS);
		private static readonly short[] DFA63_special = DFA.UnpackEncodedString(DFA63_specialS);
		private static readonly short[][] DFA63_transition;

		static DFA63()
		{
			int numStates = DFA63_transitionS.Length;
			DFA63_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA63_transition[i] = DFA.UnpackEncodedString(DFA63_transitionS[i]);
			}
		}

		public DFA63( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 63;
			this.eot = DFA63_eot;
			this.eof = DFA63_eof;
			this.min = DFA63_min;
			this.max = DFA63_max;
			this.accept = DFA63_accept;
			this.special = DFA63_special;
			this.transition = DFA63_transition;
		}

		public override string Description { get { return "323:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA80 : DFA
	{
		private const string DFA80_eotS =
			"\x9\xFFFF";
		private const string DFA80_eofS =
			"\x9\xFFFF";
		private const string DFA80_minS =
			"\x1\x2A\x1\x8\x4\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA80_maxS =
			"\x1\xA8\x1\xA6\x4\xFFFF\x1\x2A\x1\xFFFF\x1\xA6";
		private const string DFA80_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA80_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA80_transitionS =
			{
				"\x1\x1\x24\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x1B\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x3\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2A\xFFFF\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2A\xFFFF\x1\x5\x1E\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x10\xFFFF\x1\x5\x1\xFFFF\x1\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA80_eot = DFA.UnpackEncodedString(DFA80_eotS);
		private static readonly short[] DFA80_eof = DFA.UnpackEncodedString(DFA80_eofS);
		private static readonly char[] DFA80_min = DFA.UnpackEncodedStringToUnsignedChars(DFA80_minS);
		private static readonly char[] DFA80_max = DFA.UnpackEncodedStringToUnsignedChars(DFA80_maxS);
		private static readonly short[] DFA80_accept = DFA.UnpackEncodedString(DFA80_acceptS);
		private static readonly short[] DFA80_special = DFA.UnpackEncodedString(DFA80_specialS);
		private static readonly short[][] DFA80_transition;

		static DFA80()
		{
			int numStates = DFA80_transitionS.Length;
			DFA80_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA80_transition[i] = DFA.UnpackEncodedString(DFA80_transitionS[i]);
			}
		}

		public DFA80( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 80;
			this.eot = DFA80_eot;
			this.eof = DFA80_eof;
			this.min = DFA80_min;
			this.max = DFA80_max;
			this.accept = DFA80_accept;
			this.special = DFA80_special;
			this.transition = DFA80_transition;
		}

		public override string Description { get { return "363:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA89 : DFA
	{
		private const string DFA89_eotS =
			"\x4\xFFFF";
		private const string DFA89_eofS =
			"\x4\xFFFF";
		private const string DFA89_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA89_maxS =
			"\x1\x8D\x1\xA8\x2\xFFFF";
		private const string DFA89_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA89_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA89_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x53\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA89_eot = DFA.UnpackEncodedString(DFA89_eotS);
		private static readonly short[] DFA89_eof = DFA.UnpackEncodedString(DFA89_eofS);
		private static readonly char[] DFA89_min = DFA.UnpackEncodedStringToUnsignedChars(DFA89_minS);
		private static readonly char[] DFA89_max = DFA.UnpackEncodedStringToUnsignedChars(DFA89_maxS);
		private static readonly short[] DFA89_accept = DFA.UnpackEncodedString(DFA89_acceptS);
		private static readonly short[] DFA89_special = DFA.UnpackEncodedString(DFA89_specialS);
		private static readonly short[][] DFA89_transition;

		static DFA89()
		{
			int numStates = DFA89_transitionS.Length;
			DFA89_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA89_transition[i] = DFA.UnpackEncodedString(DFA89_transitionS[i]);
			}
		}

		public DFA89( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 89;
			this.eot = DFA89_eot;
			this.eof = DFA89_eof;
			this.min = DFA89_min;
			this.max = DFA89_max;
			this.accept = DFA89_accept;
			this.special = DFA89_special;
			this.transition = DFA89_transition;
		}

		public override string Description { get { return "394:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA94 : DFA
	{
		private const string DFA94_eotS =
			"\x4\xFFFF";
		private const string DFA94_eofS =
			"\x4\xFFFF";
		private const string DFA94_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA94_maxS =
			"\x1\x8D\x1\xA8\x2\xFFFF";
		private const string DFA94_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA94_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA94_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x53\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x3"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3"+
				"\x3\x1\xFFFF\x2\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA94_eot = DFA.UnpackEncodedString(DFA94_eotS);
		private static readonly short[] DFA94_eof = DFA.UnpackEncodedString(DFA94_eofS);
		private static readonly char[] DFA94_min = DFA.UnpackEncodedStringToUnsignedChars(DFA94_minS);
		private static readonly char[] DFA94_max = DFA.UnpackEncodedStringToUnsignedChars(DFA94_maxS);
		private static readonly short[] DFA94_accept = DFA.UnpackEncodedString(DFA94_acceptS);
		private static readonly short[] DFA94_special = DFA.UnpackEncodedString(DFA94_specialS);
		private static readonly short[][] DFA94_transition;

		static DFA94()
		{
			int numStates = DFA94_transitionS.Length;
			DFA94_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA94_transition[i] = DFA.UnpackEncodedString(DFA94_transitionS[i]);
			}
		}

		public DFA94( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 94;
			this.eot = DFA94_eot;
			this.eof = DFA94_eof;
			this.min = DFA94_min;
			this.max = DFA94_max;
			this.accept = DFA94_accept;
			this.special = DFA94_special;
			this.transition = DFA94_transition;
		}

		public override string Description { get { return "397:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA107 : DFA
	{
		private const string DFA107_eotS =
			"\x6\xFFFF";
		private const string DFA107_eofS =
			"\x6\xFFFF";
		private const string DFA107_minS =
			"\x1\x2A\x1\x8\x1\xFFFF\x1\x2A\x1\xFFFF\x1\x8";
		private const string DFA107_maxS =
			"\x1\xA8\x1\xA7\x1\xFFFF\x1\x2A\x1\xFFFF\x1\xA7";
		private const string DFA107_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA107_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA107_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x2\x2A\xFFFF\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2",
				"",
				"\x1\x5",
				"",
				"\x1\x2\x2A\xFFFF\x1\x2\x1C\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\x9\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x6\xFFFF\x1\x2\x7\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3"+
				"\xFFFF\x4\x2"
			};

		private static readonly short[] DFA107_eot = DFA.UnpackEncodedString(DFA107_eotS);
		private static readonly short[] DFA107_eof = DFA.UnpackEncodedString(DFA107_eofS);
		private static readonly char[] DFA107_min = DFA.UnpackEncodedStringToUnsignedChars(DFA107_minS);
		private static readonly char[] DFA107_max = DFA.UnpackEncodedStringToUnsignedChars(DFA107_maxS);
		private static readonly short[] DFA107_accept = DFA.UnpackEncodedString(DFA107_acceptS);
		private static readonly short[] DFA107_special = DFA.UnpackEncodedString(DFA107_specialS);
		private static readonly short[][] DFA107_transition;

		static DFA107()
		{
			int numStates = DFA107_transitionS.Length;
			DFA107_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA107_transition[i] = DFA.UnpackEncodedString(DFA107_transitionS[i]);
			}
		}

		public DFA107( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 107;
			this.eot = DFA107_eot;
			this.eof = DFA107_eof;
			this.min = DFA107_min;
			this.max = DFA107_max;
			this.accept = DFA107_accept;
			this.special = DFA107_special;
			this.transition = DFA107_transition;
		}

		public override string Description { get { return "423:1: for_item : ( for_range | for_when );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA150 : DFA
	{
		private const string DFA150_eotS =
			"\x7\xFFFF";
		private const string DFA150_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA150_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA150_maxS =
			"\x1\xA4\x1\xA8\x2\xFFFF\x2\xA8\x1\xFFFF";
		private const string DFA150_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA150_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA150_transitionS =
			{
				"\x1\x3\x2A\xFFFF\x1\x1\x29\xFFFF\x1\x3\xC\xFFFF\x1\x3\x1F\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x10\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1B\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x8\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x7\x3\x1\xFFFF\x2\x3\x2\xFFFF"+
				"\x1\x3",
				"",
				"",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				"\x1\x3\x21\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1B\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x5\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x6\x1\x3\x3\xFFFF\x1\x3",
				""
			};

		private static readonly short[] DFA150_eot = DFA.UnpackEncodedString(DFA150_eotS);
		private static readonly short[] DFA150_eof = DFA.UnpackEncodedString(DFA150_eofS);
		private static readonly char[] DFA150_min = DFA.UnpackEncodedStringToUnsignedChars(DFA150_minS);
		private static readonly char[] DFA150_max = DFA.UnpackEncodedStringToUnsignedChars(DFA150_maxS);
		private static readonly short[] DFA150_accept = DFA.UnpackEncodedString(DFA150_acceptS);
		private static readonly short[] DFA150_special = DFA.UnpackEncodedString(DFA150_specialS);
		private static readonly short[][] DFA150_transition;

		static DFA150()
		{
			int numStates = DFA150_transitionS.Length;
			DFA150_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA150_transition[i] = DFA.UnpackEncodedString(DFA150_transitionS[i]);
			}
		}

		public DFA150( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 150;
			this.eot = DFA150_eot;
			this.eof = DFA150_eof;
			this.min = DFA150_min;
			this.max = DFA150_max;
			this.accept = DFA150_accept;
			this.special = DFA150_special;
			this.transition = DFA150_transition;
		}

		public override string Description { get { return "470:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA139 : DFA
	{
		private const string DFA139_eotS =
			"\x4\xFFFF";
		private const string DFA139_eofS =
			"\x4\xFFFF";
		private const string DFA139_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA139_maxS =
			"\x2\x33\x2\xFFFF";
		private const string DFA139_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA139_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA139_transitionS =
			{
				"\x1\x2\x2A\xFFFF\x1\x1",
				"\x1\x2\x22\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA139_eot = DFA.UnpackEncodedString(DFA139_eotS);
		private static readonly short[] DFA139_eof = DFA.UnpackEncodedString(DFA139_eofS);
		private static readonly char[] DFA139_min = DFA.UnpackEncodedStringToUnsignedChars(DFA139_minS);
		private static readonly char[] DFA139_max = DFA.UnpackEncodedStringToUnsignedChars(DFA139_maxS);
		private static readonly short[] DFA139_accept = DFA.UnpackEncodedString(DFA139_acceptS);
		private static readonly short[] DFA139_special = DFA.UnpackEncodedString(DFA139_specialS);
		private static readonly short[][] DFA139_transition;

		static DFA139()
		{
			int numStates = DFA139_transitionS.Length;
			DFA139_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA139_transition[i] = DFA.UnpackEncodedString(DFA139_transitionS[i]);
			}
		}

		public DFA139( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 139;
			this.eot = DFA139_eot;
			this.eof = DFA139_eof;
			this.min = DFA139_min;
			this.max = DFA139_max;
			this.accept = DFA139_accept;
			this.special = DFA139_special;
			this.transition = DFA139_transition;
		}

		public override string Description { get { return "470:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA171 : DFA
	{
		private const string DFA171_eotS =
			"\x7\xFFFF";
		private const string DFA171_eofS =
			"\x7\xFFFF";
		private const string DFA171_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA171_maxS =
			"\x5\xA8\x2\xFFFF";
		private const string DFA171_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA171_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA171_transitionS =
			{
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x15"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x12\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA171_eot = DFA.UnpackEncodedString(DFA171_eotS);
		private static readonly short[] DFA171_eof = DFA.UnpackEncodedString(DFA171_eofS);
		private static readonly char[] DFA171_min = DFA.UnpackEncodedStringToUnsignedChars(DFA171_minS);
		private static readonly char[] DFA171_max = DFA.UnpackEncodedStringToUnsignedChars(DFA171_maxS);
		private static readonly short[] DFA171_accept = DFA.UnpackEncodedString(DFA171_acceptS);
		private static readonly short[] DFA171_special = DFA.UnpackEncodedString(DFA171_specialS);
		private static readonly short[][] DFA171_transition;

		static DFA171()
		{
			int numStates = DFA171_transitionS.Length;
			DFA171_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA171_transition[i] = DFA.UnpackEncodedString(DFA171_transitionS[i]);
			}
		}

		public DFA171( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 171;
			this.eot = DFA171_eot;
			this.eof = DFA171_eof;
			this.min = DFA171_min;
			this.max = DFA171_max;
			this.accept = DFA171_accept;
			this.special = DFA171_special;
			this.transition = DFA171_transition;
		}

		public override string Description { get { return "505:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA170 : DFA
	{
		private const string DFA170_eotS =
			"\x7\xFFFF";
		private const string DFA170_eofS =
			"\x7\xFFFF";
		private const string DFA170_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA170_maxS =
			"\x1\x7B\x4\xA8\x2\xFFFF";
		private const string DFA170_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA170_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA170_transitionS =
			{
				"\x1\x4\x22\xFFFF\x1\x3\x7\xFFFF\x1\x2\x29\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"\x1\x4\x21\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x15"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x12\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA170_eot = DFA.UnpackEncodedString(DFA170_eotS);
		private static readonly short[] DFA170_eof = DFA.UnpackEncodedString(DFA170_eofS);
		private static readonly char[] DFA170_min = DFA.UnpackEncodedStringToUnsignedChars(DFA170_minS);
		private static readonly char[] DFA170_max = DFA.UnpackEncodedStringToUnsignedChars(DFA170_maxS);
		private static readonly short[] DFA170_accept = DFA.UnpackEncodedString(DFA170_acceptS);
		private static readonly short[] DFA170_special = DFA.UnpackEncodedString(DFA170_specialS);
		private static readonly short[][] DFA170_transition;

		static DFA170()
		{
			int numStates = DFA170_transitionS.Length;
			DFA170_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA170_transition[i] = DFA.UnpackEncodedString(DFA170_transitionS[i]);
			}
		}

		public DFA170( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 170;
			this.eot = DFA170_eot;
			this.eof = DFA170_eof;
			this.min = DFA170_min;
			this.max = DFA170_max;
			this.accept = DFA170_accept;
			this.special = DFA170_special;
			this.transition = DFA170_transition;
		}

		public override string Description { get { return "()* loopback of 505:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA176 : DFA
	{
		private const string DFA176_eotS =
			"\xB\xFFFF";
		private const string DFA176_eofS =
			"\xB\xFFFF";
		private const string DFA176_minS =
			"\x2\x2A\x1\xFFFF\x1\x50\x1\xFFFF\x2\x2A\x2\x50\x1\x2A\x1\x50";
		private const string DFA176_maxS =
			"\x2\xA8\x1\xFFFF\x1\xA7\x1\xFFFF\x1\x2A\x1\xA8\x2\xA7\x1\x2A\x1\xA7";
		private const string DFA176_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA176_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA176_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1A\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12"+
				"\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x15\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x12\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xD\xFFFF\x2\x2\x6\xFFFF"+
				"\x1\x2\xE\xFFFF\x3\x2"
			};

		private static readonly short[] DFA176_eot = DFA.UnpackEncodedString(DFA176_eotS);
		private static readonly short[] DFA176_eof = DFA.UnpackEncodedString(DFA176_eofS);
		private static readonly char[] DFA176_min = DFA.UnpackEncodedStringToUnsignedChars(DFA176_minS);
		private static readonly char[] DFA176_max = DFA.UnpackEncodedStringToUnsignedChars(DFA176_maxS);
		private static readonly short[] DFA176_accept = DFA.UnpackEncodedString(DFA176_acceptS);
		private static readonly short[] DFA176_special = DFA.UnpackEncodedString(DFA176_specialS);
		private static readonly short[][] DFA176_transition;

		static DFA176()
		{
			int numStates = DFA176_transitionS.Length;
			DFA176_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA176_transition[i] = DFA.UnpackEncodedString(DFA176_transitionS[i]);
			}
		}

		public DFA176( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 176;
			this.eot = DFA176_eot;
			this.eof = DFA176_eof;
			this.min = DFA176_min;
			this.max = DFA176_max;
			this.accept = DFA176_accept;
			this.special = DFA176_special;
			this.transition = DFA176_transition;
		}

		public override string Description { get { return "509:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root546 = new BitSet(new ulong[]{0x8040000000000UL,0x400000000400000UL,0x102A1081118UL});
		public static readonly BitSet _global_block_in_root549 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root551 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block571 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block573 = new BitSet(new ulong[]{0x8040000000002UL,0x400000000400000UL,0x102A1081118UL});
		public static readonly BitSet _func_def_in_node596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args643 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item664 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_attribute_item667 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item669 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _93_in_attribute_item672 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item674 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_attribute_item678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_attribute_item696 = new BitSet(new ulong[]{0x2UL,0x400000UL});
		public static readonly BitSet _86_in_attribute_item699 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item701 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _93_in_attribute_item704 = new BitSet(new ulong[]{0x210040000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item706 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_attribute_item710 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_attribute735 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _attribute_item_in_attribute737 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _93_in_attribute740 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _attribute_item_in_attribute742 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _123_in_attribute746 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute748 = new BitSet(new ulong[]{0x8000000000002UL,0x400000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc767 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc770 = new BitSet(new ulong[]{0x0UL,0x28000000000UL});
		public static readonly BitSet _103_in_global_alloc774 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_global_alloc776 = new BitSet(new ulong[]{0x2UL,0x1020000400000UL});
		public static readonly BitSet _112_in_global_alloc781 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _105_in_global_alloc785 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_global_alloc788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_global_alloc848 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_global_alloc850 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_global_alloc853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_global_alloc926 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_global_alloc929 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_global_alloc932 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_global_alloc934 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _attribute_in_global_using971 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200000000UL});
		public static readonly BitSet _161_in_global_using974 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x80000UL});
		public static readonly BitSet _stmt_using_item_in_global_using976 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x80000UL});
		public static readonly BitSet _attribute_in_global_typedef1000 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_global_typedef1003 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_global_typedef1005 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_global_typedef1007 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_global_typedef1009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1033 = new BitSet(new ulong[]{0x0UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_import_def1036 = new BitSet(new ulong[]{0x208000000000002UL});
		public static readonly BitSet _STRING_in_import_def1038 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1042 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_import_def1045 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1047 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _STRING_in_import_def1052 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1054 = new BitSet(new ulong[]{0x208000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1084 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_enum_def1087 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1089 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_enum_def1091 = new BitSet(new ulong[]{0x40000000002UL});
		public static readonly BitSet _ident_in_enum_def1094 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_enum_def1097 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_enum_def1099 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1132 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_namespace_def1135 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_namespace_def1137 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1140 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1143 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000400000UL,0x102A1081118UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1145 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000400000UL,0x102A1081118UL});
		public static readonly BitSet _global_block_in_namespace_def1148 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1178 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_class_def1181 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1183 = new BitSet(new ulong[]{0x8000000000002UL,0x88000400000UL});
		public static readonly BitSet _generic_parameter_in_class_def1186 = new BitSet(new ulong[]{0x8000000000002UL,0x8000400000UL});
		public static readonly BitSet _86_in_class_def1191 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000UL});
		public static readonly BitSet _func_args_in_class_def1193 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_class_def1195 = new BitSet(new ulong[]{0x8000000000002UL,0x8000000000UL});
		public static readonly BitSet _103_in_class_def1200 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1202 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000UL});
		public static readonly BitSet _93_in_class_def1205 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_class_def1207 = new BitSet(new ulong[]{0x8000000000002UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1214 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_class_def1217 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000400000UL,0x102A1081118UL});
		public static readonly BitSet _NEWLINE_in_class_def1219 = new BitSet(new ulong[]{0x8040000000100UL,0x400000000400000UL,0x102A1081118UL});
		public static readonly BitSet _global_block_in_class_def1222 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_name1267 = new BitSet(new ulong[]{0x2UL,0x400000000100000UL});
		public static readonly BitSet _84_in_type_name1271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_type_name1287 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_type_name1289 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _93_in_type_name1292 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_type_name1294 = new BitSet(new ulong[]{0x0UL,0x800000020000000UL});
		public static readonly BitSet _123_in_type_name1298 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1336 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_type_star1340 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1386 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _107_in_type_template_type1390 = new BitSet(new ulong[]{0x40000000000UL,0x8000000000000UL,0x81000010UL});
		public static readonly BitSet _type_name_in_type_template_type1393 = new BitSet(new ulong[]{0x0UL,0x8000020000000UL});
		public static readonly BitSet _93_in_type_template_type1396 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_type_template_type1398 = new BitSet(new ulong[]{0x0UL,0x8000020000000UL});
		public static readonly BitSet _115_in_type_template_type1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_type_ident1444 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000000UL});
		public static readonly BitSet _159_in_type_ident1447 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_type_ident1450 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_type_ident1453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1481 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_generic_parameter_inside1484 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1486 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _107_in_generic_parameter1508 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1510 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_generic_parameter1512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1527 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_func_args1530 = new BitSet(new ulong[]{0x40000000000UL,0x20000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1532 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1554 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _103_in_func_args_item1556 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_func_args_item1558 = new BitSet(new ulong[]{0x2UL,0x1020000400000UL});
		public static readonly BitSet _112_in_func_args_item1563 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _105_in_func_args_item1567 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_func_args_item1570 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_func_args_item1618 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_func_args_item1620 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_func_args_item1623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_func_args_item1680 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name1718 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_func_name1727 = new BitSet(new ulong[]{0x0UL,0x2045000000UL});
		public static readonly BitSet _operator_in_func_name1729 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_func_name1731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1746 = new BitSet(new ulong[]{0x40000000000UL,0x400000UL,0x10081000010UL});
		public static readonly BitSet _type_name_in_func_def1749 = new BitSet(new ulong[]{0x40000000000UL,0x400000UL,0x10000000000UL});
		public static readonly BitSet _168_in_func_def1752 = new BitSet(new ulong[]{0x40000000000UL,0x400000UL});
		public static readonly BitSet _func_name_in_func_def1755 = new BitSet(new ulong[]{0x0UL,0x80000400000UL});
		public static readonly BitSet _generic_parameter_in_func_def1757 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_func_def1760 = new BitSet(new ulong[]{0x40000000000UL,0x20000800000UL});
		public static readonly BitSet _func_args_in_func_def1762 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_func_def1765 = new BitSet(new ulong[]{0x8000000000000UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1768 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1771 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_func_def1824 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _where_expr_in_func_def1826 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item1867 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1869 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item1879 = new BitSet(new ulong[]{0x8000000000000UL,0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1882 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _106_in_stmt_block_item1887 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item1889 = new BitSet(new ulong[]{0x8000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block1906 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1908 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block1911 = new BitSet(new ulong[]{0x40000000100UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _DEDENT_in_stmt_block1914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt1934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt1939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple1950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex1961 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex1966 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex1971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex1976 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex1981 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex1986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2000 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1140000C00UL});
		public static readonly BitSet _139_in_stmt_expr2010 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_expr2012 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1140000C00UL});
		public static readonly BitSet _158_in_stmt_expr2041 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_expr2043 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1140000C00UL});
		public static readonly BitSet _164_in_stmt_expr2072 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_expr2074 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1140000C00UL});
		public static readonly BitSet _160_in_stmt_expr2103 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_expr2105 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1140000C00UL});
		public static readonly BitSet _138_in_stmt_expr2134 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _for_item_in_stmt_expr2136 = new BitSet(new ulong[]{0x2UL,0x20000000UL,0x1140000C00UL});
		public static readonly BitSet _93_in_stmt_expr2139 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _for_item_in_stmt_expr2141 = new BitSet(new ulong[]{0x2UL,0x20000000UL,0x1140000C00UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2203 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_defer2214 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _stmt_in_stmt_defer2216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_stmt_defer2229 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _stmt_in_stmt_defer2231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_stmt_typedef2250 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2252 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_stmt_typedef2254 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_stmt_typedef2256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_using_item2279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_stmt_using2287 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x80000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2289 = new BitSet(new ulong[]{0x40000000002UL,0x0UL,0x80000UL});
		public static readonly BitSet _151_in_stmt_return2310 = new BitSet(new ulong[]{0x210040000000002UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_return2312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2333 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_inline_stmt_block2336 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x10220A00000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2338 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _139_in_stmt_if2360 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_if2362 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2365 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2368 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x80UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2371 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_stmt_if2374 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2376 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_if2411 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x10220A00000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2413 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _158_in_stmt_if2434 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_if2436 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2439 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2442 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x80UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2445 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_stmt_if2448 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2450 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2453 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_if2489 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x10220A00000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2491 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_while2522 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_while2524 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2528 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_while2555 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x10220A00000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2557 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_while2581 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_while2583 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2587 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_while2614 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x10220A00000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while2616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_while2640 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_while2642 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2645 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range2670 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_for_range2672 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_for_range2676 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000040UL});
		public static readonly BitSet _155_in_for_range2679 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_for_range2683 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_for_range2686 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_for_range2690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_for_range2719 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_for_range2723 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2UL});
		public static readonly BitSet _129_in_for_range2726 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_for_range2730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when2788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item2807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item2812 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_for2823 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _for_item_in_stmt_for2827 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL});
		public static readonly BitSet _93_in_stmt_for2830 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _for_item_in_stmt_for2832 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2836 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_try2870 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2872 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2875 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2877 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_stmt_try2880 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2882 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try2884 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2887 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_switch_item2910 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_switch_item2912 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL,0x4000000UL});
		public static readonly BitSet _93_in_switch_item2915 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_switch_item2917 = new BitSet(new ulong[]{0x8000000000000UL,0x20000000UL,0x4000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item2923 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item2926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_switch_item2968 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x10220A00000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item2970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_stmt_switch3006 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_stmt_switch3008 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3011 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3014 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3016 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x400000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3020 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3022 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x400000080UL});
		public static readonly BitSet _135_in_stmt_switch3028 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3030 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3033 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3035 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3066 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_ident_list3069 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_ident_list3071 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3093 = new BitSet(new ulong[]{0x0UL,0x28000000000UL});
		public static readonly BitSet _103_in_stmt_alloc3097 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_stmt_alloc3099 = new BitSet(new ulong[]{0x2UL,0x1020000400000UL});
		public static readonly BitSet _112_in_stmt_alloc3104 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _105_in_stmt_alloc3108 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3111 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_stmt_alloc3159 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3161 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_stmt_alloc3164 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_stmt_alloc3225 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3229 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_stmt_alloc3232 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3234 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3260 = new BitSet(new ulong[]{0x2UL,0x2141404112240000UL,0x4000000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3264 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3267 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_stmt_modify3281 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3311 = new BitSet(new ulong[]{0x8000000000002UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3321 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3324 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3326 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_where_expr3329 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _where_item_in_where_expr3333 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3337 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3373 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3376 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _NEWLINE_in_where_expr3378 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _where_item_in_where_expr3382 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3384 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _DEDENT_in_where_expr3389 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3391 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3394 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3444 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3447 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _NEWLINE_in_where_expr3449 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _where_item_in_where_expr3453 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3455 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _DEDENT_in_where_expr3460 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3462 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_where_expr3503 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3505 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3508 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _NEWLINE_in_where_expr3510 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _where_item_in_where_expr3514 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3516 = new BitSet(new ulong[]{0x8040000000100UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _DEDENT_in_where_expr3521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_let_expr3579 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _where_item_in_let_expr3581 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_let_expr3585 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_let_expr3589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr3613 = new BitSet(new ulong[]{0x2180C0000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _INDENT_in_let_expr3618 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3620 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_let_expr3623 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3625 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr3628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr3654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr3701 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_let_expr3704 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _NEWLINE_in_let_expr3706 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A20E20UL});
		public static readonly BitSet _where_item_in_let_expr3710 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3712 = new BitSet(new ulong[]{0x8040000000000UL,0x2000000CD508000UL,0x11372A22E20UL});
		public static readonly BitSet _141_in_let_expr3717 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_let_expr3719 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr3721 = new BitSet(new ulong[]{0x8000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr3724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_match_item3756 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_match_item3758 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_match_item3760 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _where_expr_in_match_item3762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_match_expr3783 = new BitSet(new ulong[]{0x218040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_match_expr3785 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr3788 = new BitSet(new ulong[]{0x8080000000000UL});
		public static readonly BitSet _INDENT_in_match_expr3791 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr3793 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _match_item_in_match_expr3797 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr3799 = new BitSet(new ulong[]{0x8000000000100UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr3804 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr3832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr3837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_list_expr3848 = new BitSet(new ulong[]{0x2180C0000000100UL,0xE000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _93_in_list_expr3852 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3856 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _INDENT_in_list_expr3860 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _DEDENT_in_list_expr3864 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _list_expr_in_list_expr3868 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _93_in_list_expr3872 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3876 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _INDENT_in_list_expr3880 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _DEDENT_in_list_expr3884 = new BitSet(new ulong[]{0x2180C0000000100UL,0x6000000ED508000UL,0x10000300000UL});
		public static readonly BitSet _list_expr_in_list_expr3888 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _93_in_list_expr3895 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3899 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _INDENT_in_list_expr3903 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _DEDENT_in_list_expr3907 = new BitSet(new ulong[]{0x8080000000100UL,0x800000020000000UL});
		public static readonly BitSet _123_in_list_expr3911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr3925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_lambda_expr3936 = new BitSet(new ulong[]{0x40000000000UL,0x20000800000UL});
		public static readonly BitSet _func_args_in_lambda_expr3938 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lambda_expr3941 = new BitSet(new ulong[]{0x0UL,0x4000200000000UL});
		public static readonly BitSet _97_in_lambda_expr3945 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_lambda_expr3947 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_lambda_expr3987 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_lambda_expr3989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4066 = new BitSet(new ulong[]{0x2UL,0x2041424112240000UL,0x4000000000UL});
		public static readonly BitSet _set_in_modify_expr4070 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4115 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_modify_expr4124 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4127 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item4140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr4152 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _119_in_cond_expr4161 = new BitSet(new ulong[]{0x210040000000002UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4167 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_cond_expr4171 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4175 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4289 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000400000UL});
		public static readonly BitSet _or_op_in_or_expr4300 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _and_expr_in_or_expr4304 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8000400000UL});
		public static readonly BitSet _bit_or_in_and_expr4346 = new BitSet(new ulong[]{0x2UL,0x8000000000080000UL});
		public static readonly BitSet _and_op_in_and_expr4357 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _bit_or_in_and_expr4361 = new BitSet(new ulong[]{0x2UL,0x8000000000080000UL});
		public static readonly BitSet _bit_xor_in_bit_or4392 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _165_in_bit_or4401 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _bit_xor_in_bit_or4405 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor4435 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_bit_xor4444 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _bit_and_in_bit_xor4448 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4478 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_bit_and4487 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _cmp_expr_in_bit_and4491 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _chain_op_in_chain_list4583 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _shift_expr_in_chain_list4585 = new BitSet(new ulong[]{0x2UL,0x1A880000010000UL,0xC000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4599 = new BitSet(new ulong[]{0x2UL,0x1A880000010000UL,0xC000UL});
		public static readonly BitSet _107_in_cmp_expr4609 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4613 = new BitSet(new ulong[]{0x40000000002UL,0x1A880000010000UL,0xC000UL});
		public static readonly BitSet _ident_in_cmp_expr4619 = new BitSet(new ulong[]{0x40000000000UL,0x8000000000000UL});
		public static readonly BitSet _115_in_cmp_expr4622 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_cmp_expr4624 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_cmp_expr4626 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_cmp_expr4629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr4698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr4775 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr4779 = new BitSet(new ulong[]{0x2UL,0x1A880000010000UL,0xC000UL});
		public static readonly BitSet _chain_list_in_cmp_expr4783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr4885 = new BitSet(new ulong[]{0x2UL,0x20200000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr4894 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _add_expr_in_shift_expr4898 = new BitSet(new ulong[]{0x2UL,0x20200000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr4928 = new BitSet(new ulong[]{0x2UL,0x44000000UL});
		public static readonly BitSet _90_in_add_expr4938 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _mul_expr_in_add_expr4942 = new BitSet(new ulong[]{0x2UL,0x44000000UL});
		public static readonly BitSet _94_in_add_expr4967 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _mul_expr_in_add_expr4971 = new BitSet(new ulong[]{0x2UL,0x44000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5009 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _88_in_mul_expr5019 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5023 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _101_in_mul_expr5050 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5054 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _81_in_mul_expr5081 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5085 = new BitSet(new ulong[]{0x2UL,0x2001020000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5125 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr5135 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5139 = new BitSet(new ulong[]{0x2UL,0x4000000000000000UL});
		public static readonly BitSet _cast_expr_in_selector_expr5171 = new BitSet(new ulong[]{0x2UL,0x1400000000UL});
		public static readonly BitSet _98_in_selector_expr5181 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5185 = new BitSet(new ulong[]{0x2UL,0x1400000000UL});
		public static readonly BitSet _100_in_selector_expr5211 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_selector_expr5216 = new BitSet(new ulong[]{0x2UL,0x1400000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5256 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_cast_expr5265 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_cast_expr5267 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_cast_expr5269 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_cast_expr5271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5333 = new BitSet(new ulong[]{0x210040000000000UL,0x2000000CD508000UL,0x10000300000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_prefix_expr5351 = new BitSet(new ulong[]{0x40000000000UL,0x0UL,0x81000010UL});
		public static readonly BitSet _type_name_in_prefix_expr5353 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_prefix_expr5355 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_prefix_expr5357 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_prefix_expr5360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr5376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list5388 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_expr_list5391 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_expr_list5394 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr5410 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _91_in_suffix_expr5420 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _95_in_suffix_expr5446 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _99_in_suffix_expr5469 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5471 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _97_in_suffix_expr5496 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_suffix_expr5498 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _86_in_suffix_expr5523 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5527 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_suffix_expr5529 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _87_in_suffix_expr5558 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _122_in_suffix_expr5589 = new BitSet(new ulong[]{0x210040000000000UL,0xE000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_suffix_expr5593 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_suffix_expr5595 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _123_in_suffix_expr5624 = new BitSet(new ulong[]{0x2UL,0x400000A88400000UL});
		public static readonly BitSet _NUMBER_in_atom_expr5677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr5682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr5687 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_atom_expr5692 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_atom_expr5694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_atom_expr5707 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_atom_expr5711 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _93_in_atom_expr5716 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_in_atom_expr5718 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_atom_expr5722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _87_in_atom_expr5749 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item5780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix5792 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD108000UL,0x10000200000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix5794 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix5810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix5824 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _91_in_lvalue_suffix5834 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _95_in_lvalue_suffix5862 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _99_in_lvalue_suffix5887 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5889 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _97_in_lvalue_suffix5916 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix5918 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix5945 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_lvalue_suffix5948 = new BitSet(new ulong[]{0x210040000000000UL,0x6000000CDD08000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5950 = new BitSet(new ulong[]{0x0UL,0x800000UL});
		public static readonly BitSet _87_in_lvalue_suffix5953 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _122_in_lvalue_suffix5982 = new BitSet(new ulong[]{0x210040000000000UL,0xE000000CD508000UL,0x10000350000UL});
		public static readonly BitSet _expr_list_in_lvalue_suffix5984 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_lvalue_suffix5987 = new BitSet(new ulong[]{0x2UL,0x400080A88400000UL});
		public static readonly BitSet _ident_in_lvalue_atom6026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_lvalue_atom6031 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6033 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _86_in_lvalue6052 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD108000UL,0x10000200000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6054 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lvalue6057 = new BitSet(new ulong[]{0x40000000000UL,0x2000000CD108000UL,0x10000200000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6059 = new BitSet(new ulong[]{0x0UL,0x20800000UL});
		public static readonly BitSet _87_in_lvalue6063 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue6077 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident6088 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _104_in_ident6091 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _IDENT_in_ident6093 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _126_in_infix_func6106 = new BitSet(new ulong[]{0x40000000000UL});
		public static readonly BitSet _ident_in_infix_func6109 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_infix_func6111 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
