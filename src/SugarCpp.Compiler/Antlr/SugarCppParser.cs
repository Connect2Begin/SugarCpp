//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-29 15:08:36

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'static'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_To=39;
	public const int For_Item_When=40;
	public const int Func_Args=41;
	public const int Func_Def=42;
	public const int Generic_Patameters=43;
	public const int Global_Block=44;
	public const int IDENT=45;
	public const int INDENT=46;
	public const int Ident_List=47;
	public const int Import=48;
	public const int Left_Bracket=49;
	public const int LineComment=50;
	public const int Match_Expr=51;
	public const int Match_Expr_Item=52;
	public const int Match_Tuple=53;
	public const int NEWLINE=54;
	public const int NUMBER=55;
	public const int Namespace=56;
	public const int Right_Bracket=57;
	public const int Root=58;
	public const int SP=59;
	public const int STRING=60;
	public const int Stmt_Block=61;
	public const int Stmt_Defer=62;
	public const int Stmt_Finally=63;
	public const int Stmt_For=64;
	public const int Stmt_If=65;
	public const int Stmt_Loop=66;
	public const int Stmt_Return=67;
	public const int Stmt_Switch=68;
	public const int Stmt_Try=69;
	public const int Stmt_Typedef=70;
	public const int Stmt_Unless=71;
	public const int Stmt_Until=72;
	public const int Stmt_Using=73;
	public const int Stmt_While=74;
	public const int Switch_Item=75;
	public const int Type_Array=76;
	public const int Type_Func=77;
	public const int Type_Ident=78;
	public const int Type_List=79;
	public const int Type_Ref=80;
	public const int Type_Star=81;
	public const int Type_Template=82;
	public const int White_Space=83;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:211:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(211, 1);
		try
		{
			// SugarCpp.g:212:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:212:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(212, 4);
			// SugarCpp.g:212:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:212:4: NEWLINE
					{
					DebugLocation(212, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root581); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(212, 13);
			PushFollow(Follow._global_block_in_root584);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(212, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 212:30: -> ^( Root global_block )
			{
				DebugLocation(212, 33);
				// SugarCpp.g:212:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(212, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(212, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:215:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(215, 1);
		try
		{
			// SugarCpp.g:216:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:216:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(216, 4);
			// SugarCpp.g:216:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==91||LA3_0==130||LA3_0==137||(LA3_0>=139 && LA3_0<=140)||LA3_0==144||LA3_0==148||LA3_0==153||LA3_0==156||(LA3_0>=161 && LA3_0<=162)||LA3_0==167||LA3_0==170||LA3_0==178))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:216:5: node ( NEWLINE )+
					{
					DebugLocation(216, 5);
					PushFollow(Follow._node_in_global_block606);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(216, 10);
					// SugarCpp.g:216:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:216:10: NEWLINE
							{
							DebugLocation(216, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block608); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 216:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(216, 24);
				// SugarCpp.g:216:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(216, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(216, 39);
				// SugarCpp.g:216:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(216, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:219:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(219, 1);
		try
		{
			// SugarCpp.g:220:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:220:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._func_def_in_node631);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:221:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._class_def_in_node636);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:222:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._enum_def_in_node641);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:223:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._global_alloc_in_node646);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:224:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._global_using_in_node651);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:225:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._global_typedef_in_node656);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:226:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._import_def_in_node661);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:227:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._namespace_def_in_node666);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:230:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args678); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:232:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(232, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:233:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				PushFollow(Follow._ident_in_attribute_args688);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(234, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:236:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken char_literal30 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args33 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(236, 1);
		try
		{
			// SugarCpp.g:237:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) )
			int alt12=3;
			try { DebugEnterDecision(12, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt12 = 1;
				}
				break;
			case 140:
				{
				alt12 = 2;
				}
				break;
			case 161:
				{
				alt12 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 12, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:237:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(237, 4);
				PushFollow(Follow._ident_in_attribute_item699);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(237, 10);
				// SugarCpp.g:237:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==91))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:237:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(237, 11);
					char_literal18=(IToken)Match(input,91,Follow._91_in_attribute_item702); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal18);

					DebugLocation(237, 15);
					PushFollow(Follow._attribute_args_in_attribute_item704);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(237, 30);
					// SugarCpp.g:237:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==98))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:237:31: ',' attribute_args
							{
							DebugLocation(237, 31);
							char_literal20=(IToken)Match(input,98,Follow._98_in_attribute_item707); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal20);

							DebugLocation(237, 35);
							PushFollow(Follow._attribute_args_in_attribute_item709);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(237, 52);
					char_literal22=(IToken)Match(input,92,Follow._92_in_attribute_item713); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 237:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(237, 61);
					// SugarCpp.g:237:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(237, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(237, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(237, 79);
					// SugarCpp.g:237:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(237, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:238:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(238, 4);
				string_literal23=(IToken)Match(input,140,Follow._140_in_attribute_item731); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal23);

				DebugLocation(238, 12);
				// SugarCpp.g:238:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==91))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(238, 13);
					char_literal24=(IToken)Match(input,91,Follow._91_in_attribute_item734); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal24);

					DebugLocation(238, 17);
					PushFollow(Follow._attribute_args_in_attribute_item736);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(238, 32);
					// SugarCpp.g:238:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==98))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:238:33: ',' attribute_args
							{
							DebugLocation(238, 33);
							char_literal26=(IToken)Match(input,98,Follow._98_in_attribute_item739); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal26);

							DebugLocation(238, 37);
							PushFollow(Follow._attribute_args_in_attribute_item741);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(238, 54);
					char_literal28=(IToken)Match(input,92,Follow._92_in_attribute_item745); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 140
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 238:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(238, 63);
					// SugarCpp.g:238:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(238, 75);
					adaptor.AddChild(root_1, stream_140.NextNode());
					DebugLocation(238, 83);
					// SugarCpp.g:238:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(238, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:239:4: 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(239, 4);
				string_literal29=(IToken)Match(input,161,Follow._161_in_attribute_item763); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_161.Add(string_literal29);

				DebugLocation(239, 13);
				// SugarCpp.g:239:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==91))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:239:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(239, 14);
					char_literal30=(IToken)Match(input,91,Follow._91_in_attribute_item766); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal30);

					DebugLocation(239, 18);
					PushFollow(Follow._attribute_args_in_attribute_item768);
					attribute_args31=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args31.Tree);
					DebugLocation(239, 33);
					// SugarCpp.g:239:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==98))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:239:34: ',' attribute_args
							{
							DebugLocation(239, 34);
							char_literal32=(IToken)Match(input,98,Follow._98_in_attribute_item771); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal32);

							DebugLocation(239, 38);
							PushFollow(Follow._attribute_args_in_attribute_item773);
							attribute_args33=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args33.Tree);

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(239, 55);
					char_literal34=(IToken)Match(input,92,Follow._92_in_attribute_item777); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal34);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: 161, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:61: -> ^( Attribute 'static' ( attribute_args )* )
				{
					DebugLocation(239, 64);
					// SugarCpp.g:239:64: ^( Attribute 'static' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(239, 76);
					adaptor.AddChild(root_1, stream_161.NextNode());
					DebugLocation(239, 85);
					// SugarCpp.g:239:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(239, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:242:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal35 = default(IToken);
		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken NEWLINE40 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item38 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree NEWLINE40_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(242, 1);
		try
		{
			// SugarCpp.g:243:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:243:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(243, 4);
			// SugarCpp.g:243:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt15=0;
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==130))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:243:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(243, 5);
					char_literal35=(IToken)Match(input,130,Follow._130_in_attribute802); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_130.Add(char_literal35);

					DebugLocation(243, 9);
					PushFollow(Follow._attribute_item_in_attribute804);
					attribute_item36=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item36.Tree);
					DebugLocation(243, 24);
					// SugarCpp.g:243:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if ((LA13_0==98))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:243:25: ',' attribute_item
							{
							DebugLocation(243, 25);
							char_literal37=(IToken)Match(input,98,Follow._98_in_attribute807); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal37);

							DebugLocation(243, 29);
							PushFollow(Follow._attribute_item_in_attribute809);
							attribute_item38=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item38.Tree);

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }

					DebugLocation(243, 46);
					char_literal39=(IToken)Match(input,131,Follow._131_in_attribute813); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal39);

					DebugLocation(243, 50);
					// SugarCpp.g:243:50: ( NEWLINE )+
					int cnt14=0;
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==NEWLINE))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch (alt14)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:243:50: NEWLINE
							{
							DebugLocation(243, 50);
							NEWLINE40=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute815); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE40);


							}
							break;

						default:
							if (cnt14 >= 1)
								goto loop14;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee14 = new EarlyExitException( 14, input );
							DebugRecognitionException(eee14);
							throw eee14;
						}
						cnt14++;
					}
					loop14:
						;

					} finally { DebugExitSubRule(14); }


					}
					break;

				default:
					if (cnt15 >= 1)
						goto loop15;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee15 = new EarlyExitException( 15, input );
					DebugRecognitionException(eee15);
					throw eee15;
				}
				cnt15++;
			}
			loop15:
				;

			} finally { DebugExitSubRule(15); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 243:61: -> ( attribute_item )+
			{
				DebugLocation(243, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(243, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(244, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:246:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		IToken string_literal46 = default(IToken);
		IToken string_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr52 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal43_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		CommonTree string_literal46_tree = default(CommonTree);
		CommonTree string_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(246, 1);
		try
		{
			// SugarCpp.g:247:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(247, 4);
			// SugarCpp.g:247:4: ( attribute )?
			int alt16=2;
			try { DebugEnterSubRule(16);
			try { DebugEnterDecision(16, false);
			int LA16_0 = input.LA(1);

			if ((LA16_0==130))
			{
				alt16 = 1;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:4: attribute
				{
				DebugLocation(247, 4);
				PushFollow(Follow._attribute_in_global_alloc834);
				attribute41=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute41.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(16); }

			DebugLocation(247, 15);
			PushFollow(Follow._ident_list_in_global_alloc837);
			ident_list42=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list42.Tree);
			DebugLocation(247, 26);
			// SugarCpp.g:247:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==109))
			{
				alt20 = 1;
			}
			else if ((LA20_0==111))
			{
				alt20 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 20, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(247, 28);
				char_literal43=(IToken)Match(input,109,Follow._109_in_global_alloc841); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal43);

				DebugLocation(247, 32);
				PushFollow(Follow._type_name_in_global_alloc843);
				type_name44=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name44.Tree);
				DebugLocation(247, 42);
				// SugarCpp.g:247:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				int alt18=3;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				switch (input.LA(1))
				{
				case 111:
				case 119:
					{
					alt18 = 1;
					}
					break;
				case 91:
					{
					alt18 = 2;
					}
					break;
				case NEWLINE:
					{
					alt18 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:247:44: ( '=' | ':=' ) expr
					{
					DebugLocation(247, 44);
					// SugarCpp.g:247:44: ( '=' | ':=' )
					int alt17=2;
					try { DebugEnterSubRule(17);
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==119))
					{
						alt17 = 1;
					}
					else if ((LA17_0==111))
					{
						alt17 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:247:45: '='
						{
						DebugLocation(247, 45);
						char_literal45=(IToken)Match(input,119,Follow._119_in_global_alloc848); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_119.Add(char_literal45);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:247:51: ':='
						{
						DebugLocation(247, 51);
						string_literal46=(IToken)Match(input,111,Follow._111_in_global_alloc852); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(string_literal46);


						}
						break;

					}
					} finally { DebugExitSubRule(17); }

					DebugLocation(247, 57);
					PushFollow(Follow._expr_in_global_alloc855);
					expr47=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr47.Tree);


					{
					// AST REWRITE
					// elements: attribute, ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 247:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(247, 65);
						// SugarCpp.g:247:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(247, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(247, 84);
						// SugarCpp.g:247:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(247, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(247, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(247, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(247, 116);
						// SugarCpp.g:247:116: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(247, 118);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(247, 128);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:248:43: bracket_expr_list
					{
					DebugLocation(248, 43);
					PushFollow(Follow._bracket_expr_list_in_global_alloc918);
					bracket_expr_list48=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list48.Tree);


					{
					// AST REWRITE
					// elements: ident_list, bracket_expr_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 248:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(248, 64);
						// SugarCpp.g:248:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(248, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(248, 85);
						// SugarCpp.g:248:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(248, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(248, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(248, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(248, 117);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:249:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 249:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(249, 20);
						// SugarCpp.g:249:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(249, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(249, 39);
						// SugarCpp.g:249:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(249, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(249, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(249, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(249, 71);
						// SugarCpp.g:249:71: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(249, 73);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:251:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(251, 10);
				string_literal49=(IToken)Match(input,111,Follow._111_in_global_alloc994); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(string_literal49);

				DebugLocation(251, 15);
				// SugarCpp.g:251:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:251:16: expr ( ',' expr )*
				{
				DebugLocation(251, 16);
				PushFollow(Follow._expr_in_global_alloc997);
				expr50=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr50.Tree);
				DebugLocation(251, 21);
				// SugarCpp.g:251:21: ( ',' expr )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==98))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:251:22: ',' expr
						{
						DebugLocation(251, 22);
						char_literal51=(IToken)Match(input,98,Follow._98_in_global_alloc1000); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal51);

						DebugLocation(251, 26);
						PushFollow(Follow._expr_in_global_alloc1002);
						expr52=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr52.Tree);

						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }


				}



				{
				// AST REWRITE
				// elements: attribute, ident_list, 111, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 251:34: -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(251, 37);
					// SugarCpp.g:251:37: ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(251, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_111.NextNode(), root_1);

					DebugLocation(251, 44);
					// SugarCpp.g:251:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(251, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(251, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(251, 66);
					// SugarCpp.g:251:66: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(251, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(251, 78);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(251, 78);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:255:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal54 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal54_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(255, 1);
		try
		{
			// SugarCpp.g:256:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:256:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(256, 4);
			// SugarCpp.g:256:4: ( attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==130))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:4: attribute
				{
				DebugLocation(256, 4);
				PushFollow(Follow._attribute_in_global_using1043);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(256, 15);
			string_literal54=(IToken)Match(input,170,Follow._170_in_global_using1046); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(string_literal54);

			DebugLocation(256, 23);
			// SugarCpp.g:256:23: ( stmt_using_item )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==IDENT||LA22_0==156))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:256:23: stmt_using_item
					{
					DebugLocation(256, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1048);
					stmt_using_item55=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item55.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 256:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(256, 43);
				// SugarCpp.g:256:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(256, 56);
				// SugarCpp.g:256:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(256, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(256, 67);
				// SugarCpp.g:256:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(256, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:259:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal57 = default(IToken);
		IToken char_literal59 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident58 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name60 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal57_tree = default(CommonTree);
		CommonTree char_literal59_tree = default(CommonTree);
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(259, 1);
		try
		{
			// SugarCpp.g:260:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:260:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(260, 4);
			// SugarCpp.g:260:4: ( attribute )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==130))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:260:4: attribute
				{
				DebugLocation(260, 4);
				PushFollow(Follow._attribute_in_global_typedef1072);
				attribute56=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute56.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(260, 15);
			string_literal57=(IToken)Match(input,167,Follow._167_in_global_typedef1075); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(string_literal57);

			DebugLocation(260, 22);
			PushFollow(Follow._ident_in_global_typedef1077);
			ident58=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident58.Tree);
			DebugLocation(260, 28);
			char_literal59=(IToken)Match(input,119,Follow._119_in_global_typedef1079); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal59);

			DebugLocation(260, 32);
			PushFollow(Follow._type_name_in_global_typedef1081);
			type_name60=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name60.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 260:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(260, 45);
				// SugarCpp.g:260:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(260, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(260, 60);
				// SugarCpp.g:260:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(260, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(260, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(260, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:263:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal62 = default(IToken);
		IToken STRING63 = default(IToken);
		IToken NEWLINE64 = default(IToken);
		IToken INDENT65 = default(IToken);
		IToken NEWLINE66 = default(IToken);
		IToken STRING67 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken DEDENT69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal62_tree = default(CommonTree);
		CommonTree STRING63_tree = default(CommonTree);
		CommonTree NEWLINE64_tree = default(CommonTree);
		CommonTree INDENT65_tree = default(CommonTree);
		CommonTree NEWLINE66_tree = default(CommonTree);
		CommonTree STRING67_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree DEDENT69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(263, 1);
		try
		{
			// SugarCpp.g:264:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:264:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(264, 4);
			// SugarCpp.g:264:4: ( attribute )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==130))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:4: attribute
				{
				DebugLocation(264, 4);
				PushFollow(Follow._attribute_in_import_def1105);
				attribute61=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute61.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(264, 15);
			string_literal62=(IToken)Match(input,148,Follow._148_in_import_def1108); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_148.Add(string_literal62);

			DebugLocation(264, 24);
			// SugarCpp.g:264:24: ( STRING )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==STRING))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:24: STRING
				{
				DebugLocation(264, 24);
				STRING63=(IToken)Match(input,STRING,Follow._STRING_in_import_def1110); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING63);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(264, 32);
			// SugarCpp.g:264:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt30=2;
			try { DebugEnterSubRule(30);
			try { DebugEnterDecision(30, false);
			try
			{
				alt30 = dfa30.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(264, 33);
				// SugarCpp.g:264:33: ( NEWLINE )+
				int cnt26=0;
				try { DebugEnterSubRule(26);
				while (true)
				{
					int alt26=2;
					try { DebugEnterDecision(26, false);
					int LA26_0 = input.LA(1);

					if ((LA26_0==NEWLINE))
					{
						alt26 = 1;
					}


					} finally { DebugExitDecision(26); }
					switch (alt26)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:33: NEWLINE
						{
						DebugLocation(264, 33);
						NEWLINE64=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1114); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE64);


						}
						break;

					default:
						if (cnt26 >= 1)
							goto loop26;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee26 = new EarlyExitException( 26, input );
						DebugRecognitionException(eee26);
						throw eee26;
					}
					cnt26++;
				}
				loop26:
					;

				} finally { DebugExitSubRule(26); }

				DebugLocation(264, 42);
				INDENT65=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1117); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT65);

				DebugLocation(264, 49);
				// SugarCpp.g:264:49: ( NEWLINE )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==NEWLINE))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:49: NEWLINE
						{
						DebugLocation(264, 49);
						NEWLINE66=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1119); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE66);


						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(264, 59);
				// SugarCpp.g:264:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(29);
				while (true)
				{
					int alt29=2;
					try { DebugEnterDecision(29, false);
					int LA29_0 = input.LA(1);

					if ((LA29_0==STRING))
					{
						alt29 = 1;
					}


					} finally { DebugExitDecision(29); }
					switch ( alt29 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:60: STRING ( NEWLINE )+
						{
						DebugLocation(264, 60);
						STRING67=(IToken)Match(input,STRING,Follow._STRING_in_import_def1124); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING67);

						DebugLocation(264, 67);
						// SugarCpp.g:264:67: ( NEWLINE )+
						int cnt28=0;
						try { DebugEnterSubRule(28);
						while (true)
						{
							int alt28=2;
							try { DebugEnterDecision(28, false);
							int LA28_0 = input.LA(1);

							if ((LA28_0==NEWLINE))
							{
								alt28 = 1;
							}


							} finally { DebugExitDecision(28); }
							switch (alt28)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:264:67: NEWLINE
								{
								DebugLocation(264, 67);
								NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1126); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE68);


								}
								break;

							default:
								if (cnt28 >= 1)
									goto loop28;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee28 = new EarlyExitException( 28, input );
								DebugRecognitionException(eee28);
								throw eee28;
							}
							cnt28++;
						}
						loop28:
							;

						} finally { DebugExitSubRule(28); }


						}
						break;

					default:
						goto loop29;
					}
				}

				loop29:
					;

				} finally { DebugExitSubRule(29); }

				DebugLocation(264, 78);
				DEDENT69=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1131); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT69);


				}
				break;

			}
			} finally { DebugExitSubRule(30); }



			{
			// AST REWRITE
			// elements: attribute, STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 264:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(264, 90);
				// SugarCpp.g:264:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(264, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(264, 99);
				// SugarCpp.g:264:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(264, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(264, 110);
				// SugarCpp.g:264:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(264, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(265, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:267:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal71 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident76 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal71_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(267, 1);
		try
		{
			// SugarCpp.g:268:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:268:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(268, 4);
			// SugarCpp.g:268:4: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==130))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:268:4: attribute
				{
				DebugLocation(268, 4);
				PushFollow(Follow._attribute_in_enum_def1156);
				attribute70=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute70.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(268, 15);
			string_literal71=(IToken)Match(input,144,Follow._144_in_enum_def1159); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_144.Add(string_literal71);

			DebugLocation(268, 22);
			PushFollow(Follow._ident_in_enum_def1161);
			ident72=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident72.Tree);
			DebugLocation(268, 28);
			char_literal73=(IToken)Match(input,119,Follow._119_in_enum_def1163); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal73);

			DebugLocation(268, 32);
			// SugarCpp.g:268:32: ( ident ( '|' ident )* )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==IDENT))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:268:33: ident ( '|' ident )*
				{
				DebugLocation(268, 33);
				PushFollow(Follow._ident_in_enum_def1166);
				ident74=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident74.Tree);
				DebugLocation(268, 39);
				// SugarCpp.g:268:39: ( '|' ident )*
				try { DebugEnterSubRule(32);
				while (true)
				{
					int alt32=2;
					try { DebugEnterDecision(32, false);
					int LA32_0 = input.LA(1);

					if ((LA32_0==174))
					{
						alt32 = 1;
					}


					} finally { DebugExitDecision(32); }
					switch ( alt32 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:268:40: '|' ident
						{
						DebugLocation(268, 40);
						char_literal75=(IToken)Match(input,174,Follow._174_in_enum_def1169); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_174.Add(char_literal75);

						DebugLocation(268, 44);
						PushFollow(Follow._ident_in_enum_def1171);
						ident76=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident76.Tree);

						}
						break;

					default:
						goto loop32;
					}
				}

				loop32:
					;

				} finally { DebugExitSubRule(32); }


				}
				break;

			}
			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 268:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(268, 57);
				// SugarCpp.g:268:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(268, 64);
				// SugarCpp.g:268:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(268, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(268, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(268, 81);
				// SugarCpp.g:268:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(268, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(268, 94);
				// SugarCpp.g:268:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(268, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(269, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:271:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal78 = default(IToken);
		IToken NEWLINE80 = default(IToken);
		IToken INDENT81 = default(IToken);
		IToken NEWLINE82 = default(IToken);
		IToken DEDENT84 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block83 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal78_tree = default(CommonTree);
		CommonTree NEWLINE80_tree = default(CommonTree);
		CommonTree INDENT81_tree = default(CommonTree);
		CommonTree NEWLINE82_tree = default(CommonTree);
		CommonTree DEDENT84_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(271, 1);
		try
		{
			// SugarCpp.g:272:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:272:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(272, 4);
			// SugarCpp.g:272:4: ( attribute )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			int LA34_0 = input.LA(1);

			if ((LA34_0==130))
			{
				alt34 = 1;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:272:4: attribute
				{
				DebugLocation(272, 4);
				PushFollow(Follow._attribute_in_namespace_def1204);
				attribute77=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute77.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(34); }

			DebugLocation(272, 15);
			string_literal78=(IToken)Match(input,156,Follow._156_in_namespace_def1207); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_156.Add(string_literal78);

			DebugLocation(272, 27);
			PushFollow(Follow._ident_in_namespace_def1209);
			ident79=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident79.Tree);
			DebugLocation(272, 33);
			// SugarCpp.g:272:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:272:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(272, 34);
				// SugarCpp.g:272:34: ( NEWLINE )+
				int cnt35=0;
				try { DebugEnterSubRule(35);
				while (true)
				{
					int alt35=2;
					try { DebugEnterDecision(35, false);
					int LA35_0 = input.LA(1);

					if ((LA35_0==NEWLINE))
					{
						alt35 = 1;
					}


					} finally { DebugExitDecision(35); }
					switch (alt35)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:272:34: NEWLINE
						{
						DebugLocation(272, 34);
						NEWLINE80=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1212); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE80);


						}
						break;

					default:
						if (cnt35 >= 1)
							goto loop35;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee35 = new EarlyExitException( 35, input );
						DebugRecognitionException(eee35);
						throw eee35;
					}
					cnt35++;
				}
				loop35:
					;

				} finally { DebugExitSubRule(35); }

				DebugLocation(272, 43);
				INDENT81=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1215); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT81);

				DebugLocation(272, 50);
				// SugarCpp.g:272:50: ( NEWLINE )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:272:50: NEWLINE
						{
						DebugLocation(272, 50);
						NEWLINE82=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1217); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE82);


						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(272, 59);
				PushFollow(Follow._global_block_in_namespace_def1220);
				global_block83=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block83.Tree);
				DebugLocation(272, 72);
				DEDENT84=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1222); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT84);


				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: global_block, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 272:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(272, 84);
				// SugarCpp.g:272:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(272, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(272, 96);
				// SugarCpp.g:272:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(272, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(272, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(272, 113);
				// SugarCpp.g:272:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(272, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(273, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:275:1: class_def : ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal86 = default(IToken);
		IToken char_literal89 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken NEWLINE93 = default(IToken);
		IToken INDENT94 = default(IToken);
		IToken NEWLINE95 = default(IToken);
		IToken DEDENT97 = default(IToken);
		IToken string_literal98 = default(IToken);
		IToken string_literal99 = default(IToken);
		IToken char_literal102 = default(IToken);
		IToken char_literal104 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken NEWLINE109 = default(IToken);
		IToken INDENT110 = default(IToken);
		IToken NEWLINE111 = default(IToken);
		IToken DEDENT113 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident92 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args103 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block112 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal86_tree = default(CommonTree);
		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree NEWLINE93_tree = default(CommonTree);
		CommonTree INDENT94_tree = default(CommonTree);
		CommonTree NEWLINE95_tree = default(CommonTree);
		CommonTree DEDENT97_tree = default(CommonTree);
		CommonTree string_literal98_tree = default(CommonTree);
		CommonTree string_literal99_tree = default(CommonTree);
		CommonTree char_literal102_tree = default(CommonTree);
		CommonTree char_literal104_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree NEWLINE109_tree = default(CommonTree);
		CommonTree INDENT110_tree = default(CommonTree);
		CommonTree NEWLINE111_tree = default(CommonTree);
		CommonTree DEDENT113_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:5: ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(276, 5);
			// SugarCpp.g:276:5: ( attribute )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==130))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:276:5: attribute
				{
				DebugLocation(276, 5);
				PushFollow(Follow._attribute_in_class_def1250);
				attribute85=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute85.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(276, 16);
			// SugarCpp.g:276:16: ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==139))
			{
				alt52 = 1;
			}
			else if ((LA52_0==137))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:276:18: 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(276, 18);
				string_literal86=(IToken)Match(input,139,Follow._139_in_class_def1255); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_139.Add(string_literal86);

				DebugLocation(276, 26);
				PushFollow(Follow._ident_in_class_def1257);
				ident87=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident87.Tree);
				DebugLocation(276, 32);
				// SugarCpp.g:276:32: ( generic_parameter )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==113))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:33: generic_parameter
					{
					DebugLocation(276, 33);
					PushFollow(Follow._generic_parameter_in_class_def1260);
					generic_parameter88=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter88.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(276, 53);
				// SugarCpp.g:276:53: ( ':' ident ( ',' ident )* )?
				int alt41=2;
				try { DebugEnterSubRule(41);
				try { DebugEnterDecision(41, false);
				int LA41_0 = input.LA(1);

				if ((LA41_0==109))
				{
					alt41 = 1;
				}
				} finally { DebugExitDecision(41); }
				switch (alt41)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:54: ':' ident ( ',' ident )*
					{
					DebugLocation(276, 54);
					char_literal89=(IToken)Match(input,109,Follow._109_in_class_def1265); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(char_literal89);

					DebugLocation(276, 58);
					PushFollow(Follow._ident_in_class_def1267);
					ident90=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident90.Tree);
					DebugLocation(276, 64);
					// SugarCpp.g:276:64: ( ',' ident )*
					try { DebugEnterSubRule(40);
					while (true)
					{
						int alt40=2;
						try { DebugEnterDecision(40, false);
						int LA40_0 = input.LA(1);

						if ((LA40_0==98))
						{
							alt40 = 1;
						}


						} finally { DebugExitDecision(40); }
						switch ( alt40 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:276:65: ',' ident
							{
							DebugLocation(276, 65);
							char_literal91=(IToken)Match(input,98,Follow._98_in_class_def1270); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal91);

							DebugLocation(276, 69);
							PushFollow(Follow._ident_in_class_def1272);
							ident92=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident92.Tree);

							}
							break;

						default:
							goto loop40;
						}
					}

					loop40:
						;

					} finally { DebugExitSubRule(40); }


					}
					break;

				}
				} finally { DebugExitSubRule(41); }

				DebugLocation(276, 79);
				// SugarCpp.g:276:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				try
				{
					alt44 = dfa44.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:80: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(276, 80);
					// SugarCpp.g:276:80: ( NEWLINE )+
					int cnt42=0;
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==NEWLINE))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch (alt42)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:276:80: NEWLINE
							{
							DebugLocation(276, 80);
							NEWLINE93=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1279); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE93);


							}
							break;

						default:
							if (cnt42 >= 1)
								goto loop42;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee42 = new EarlyExitException( 42, input );
							DebugRecognitionException(eee42);
							throw eee42;
						}
						cnt42++;
					}
					loop42:
						;

					} finally { DebugExitSubRule(42); }

					DebugLocation(276, 89);
					INDENT94=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1282); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT94);

					DebugLocation(276, 96);
					// SugarCpp.g:276:96: ( NEWLINE )*
					try { DebugEnterSubRule(43);
					while (true)
					{
						int alt43=2;
						try { DebugEnterDecision(43, false);
						int LA43_0 = input.LA(1);

						if ((LA43_0==NEWLINE))
						{
							alt43 = 1;
						}


						} finally { DebugExitDecision(43); }
						switch ( alt43 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:276:96: NEWLINE
							{
							DebugLocation(276, 96);
							NEWLINE95=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1284); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE95);


							}
							break;

						default:
							goto loop43;
						}
					}

					loop43:
						;

					} finally { DebugExitSubRule(43); }

					DebugLocation(276, 105);
					PushFollow(Follow._global_block_in_class_def1287);
					global_block96=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block96.Tree);
					DebugLocation(276, 118);
					DEDENT97=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1289); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT97);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }



				{
				// AST REWRITE
				// elements: global_block, ident, ident, generic_parameter, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 276:127: -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(276, 130);
					// SugarCpp.g:276:130: ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(276, 132);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(276, 138);
					// SugarCpp.g:276:138: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(276, 138);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(276, 149);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(276, 155);
					// SugarCpp.g:276:155: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(276, 155);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(276, 174);
					// SugarCpp.g:276:174: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(276, 175);
						// SugarCpp.g:276:175: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(276, 177);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(276, 188);
						// SugarCpp.g:276:188: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(276, 188);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(276, 198);
					// SugarCpp.g:276:198: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(276, 198);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:277:12: 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(277, 12);
				string_literal98=(IToken)Match(input,137,Follow._137_in_class_def1331); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_137.Add(string_literal98);

				DebugLocation(277, 19);
				string_literal99=(IToken)Match(input,139,Follow._139_in_class_def1333); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_139.Add(string_literal99);

				DebugLocation(277, 27);
				PushFollow(Follow._ident_in_class_def1335);
				ident100=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident100.Tree);
				DebugLocation(277, 33);
				// SugarCpp.g:277:33: ( generic_parameter )?
				int alt45=2;
				try { DebugEnterSubRule(45);
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==113))
				{
					alt45 = 1;
				}
				} finally { DebugExitDecision(45); }
				switch (alt45)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:34: generic_parameter
					{
					DebugLocation(277, 34);
					PushFollow(Follow._generic_parameter_in_class_def1338);
					generic_parameter101=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter101.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(45); }

				DebugLocation(277, 54);
				// SugarCpp.g:277:54: ( '(' func_args ')' )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==91))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:55: '(' func_args ')'
					{
					DebugLocation(277, 55);
					char_literal102=(IToken)Match(input,91,Follow._91_in_class_def1343); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal102);

					DebugLocation(277, 59);
					PushFollow(Follow._func_args_in_class_def1345);
					func_args103=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args103.Tree);
					DebugLocation(277, 69);
					char_literal104=(IToken)Match(input,92,Follow._92_in_class_def1347); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal104);


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(277, 75);
				// SugarCpp.g:277:75: ( ':' ident ( ',' ident )* )?
				int alt48=2;
				try { DebugEnterSubRule(48);
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==109))
				{
					alt48 = 1;
				}
				} finally { DebugExitDecision(48); }
				switch (alt48)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:76: ':' ident ( ',' ident )*
					{
					DebugLocation(277, 76);
					char_literal105=(IToken)Match(input,109,Follow._109_in_class_def1352); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_109.Add(char_literal105);

					DebugLocation(277, 80);
					PushFollow(Follow._ident_in_class_def1354);
					ident106=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident106.Tree);
					DebugLocation(277, 86);
					// SugarCpp.g:277:86: ( ',' ident )*
					try { DebugEnterSubRule(47);
					while (true)
					{
						int alt47=2;
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==98))
						{
							alt47 = 1;
						}


						} finally { DebugExitDecision(47); }
						switch ( alt47 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:277:87: ',' ident
							{
							DebugLocation(277, 87);
							char_literal107=(IToken)Match(input,98,Follow._98_in_class_def1357); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal107);

							DebugLocation(277, 91);
							PushFollow(Follow._ident_in_class_def1359);
							ident108=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident108.Tree);

							}
							break;

						default:
							goto loop47;
						}
					}

					loop47:
						;

					} finally { DebugExitSubRule(47); }


					}
					break;

				}
				} finally { DebugExitSubRule(48); }

				DebugLocation(277, 101);
				// SugarCpp.g:277:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt51=2;
				try { DebugEnterSubRule(51);
				try { DebugEnterDecision(51, false);
				try
				{
					alt51 = dfa51.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(51); }
				switch (alt51)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:277:102: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(277, 102);
					// SugarCpp.g:277:102: ( NEWLINE )+
					int cnt49=0;
					try { DebugEnterSubRule(49);
					while (true)
					{
						int alt49=2;
						try { DebugEnterDecision(49, false);
						int LA49_0 = input.LA(1);

						if ((LA49_0==NEWLINE))
						{
							alt49 = 1;
						}


						} finally { DebugExitDecision(49); }
						switch (alt49)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:277:102: NEWLINE
							{
							DebugLocation(277, 102);
							NEWLINE109=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1366); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE109);


							}
							break;

						default:
							if (cnt49 >= 1)
								goto loop49;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee49 = new EarlyExitException( 49, input );
							DebugRecognitionException(eee49);
							throw eee49;
						}
						cnt49++;
					}
					loop49:
						;

					} finally { DebugExitSubRule(49); }

					DebugLocation(277, 111);
					INDENT110=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1369); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT110);

					DebugLocation(277, 118);
					// SugarCpp.g:277:118: ( NEWLINE )*
					try { DebugEnterSubRule(50);
					while (true)
					{
						int alt50=2;
						try { DebugEnterDecision(50, false);
						int LA50_0 = input.LA(1);

						if ((LA50_0==NEWLINE))
						{
							alt50 = 1;
						}


						} finally { DebugExitDecision(50); }
						switch ( alt50 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:277:118: NEWLINE
							{
							DebugLocation(277, 118);
							NEWLINE111=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1371); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE111);


							}
							break;

						default:
							goto loop50;
						}
					}

					loop50:
						;

					} finally { DebugExitSubRule(50); }

					DebugLocation(277, 127);
					PushFollow(Follow._global_block_in_class_def1374);
					global_block112=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block112.Tree);
					DebugLocation(277, 140);
					DEDENT113=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1376); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT113);


					}
					break;

				}
				} finally { DebugExitSubRule(51); }



				{
				// AST REWRITE
				// elements: 137, global_block, func_args, ident, ident, generic_parameter, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 277:149: -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(277, 152);
					// SugarCpp.g:277:152: ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(277, 154);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(277, 160);
					adaptor.AddChild(root_1, stream_137.NextNode());
					DebugLocation(277, 167);
					// SugarCpp.g:277:167: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(277, 167);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(277, 178);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(277, 184);
					// SugarCpp.g:277:184: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(277, 184);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(277, 203);
					// SugarCpp.g:277:203: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(277, 203);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(277, 214);
					// SugarCpp.g:277:214: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(277, 215);
						// SugarCpp.g:277:215: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(277, 217);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(277, 228);
						// SugarCpp.g:277:228: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(277, 228);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(277, 238);
					// SugarCpp.g:277:238: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(277, 238);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:281:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal115 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal115_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(281, 1);
		try
		{
			// SugarCpp.g:282:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:282:4: type_name ( ',' type_name )*
			{
			DebugLocation(282, 4);
			PushFollow(Follow._type_name_in_type_list1429);
			type_name114=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name114.Tree);
			DebugLocation(282, 14);
			// SugarCpp.g:282:14: ( ',' type_name )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==98))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:282:15: ',' type_name
					{
					DebugLocation(282, 15);
					char_literal115=(IToken)Match(input,98,Follow._98_in_type_list1432); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal115);

					DebugLocation(282, 19);
					PushFollow(Follow._type_name_in_type_list1434);
					type_name116=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name116.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 282:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(282, 34);
				// SugarCpp.g:282:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(282, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(282, 46);
				// SugarCpp.g:282:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(282, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(283, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:285:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal118 = default(IToken);
		IToken char_literal120 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken char_literal124 = default(IToken);
		IToken string_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal128 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal118_tree = default(CommonTree);
		CommonTree char_literal120_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree string_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(285, 1);
		try
		{
			// SugarCpp.g:286:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==IDENT||LA58_0==140||LA58_0==153||(LA58_0>=161 && LA58_0<=162)))
			{
				alt58 = 1;
			}
			else if ((LA58_0==91))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:286:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(286, 4);
				PushFollow(Follow._type_single_in_type_name1456);
				type_single117=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single117.Tree);
				DebugLocation(286, 16);
				// SugarCpp.g:286:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==103))
				{
					alt55 = 1;
				}
				else if ((LA55_0==DEDENT||(LA55_0>=IDENT && LA55_0<=INDENT)||LA55_0==NEWLINE||(LA55_0>=91 && LA55_0<=92)||LA55_0==98||(LA55_0>=111 && LA55_0<=112)||LA55_0==119||(LA55_0>=122 && LA55_0<=123)||LA55_0==131||LA55_0==136||LA55_0==142||(LA55_0>=146 && LA55_0<=147)||LA55_0==149||(LA55_0>=164 && LA55_0<=165)||(LA55_0>=168 && LA55_0<=169)||(LA55_0>=172 && LA55_0<=173)||LA55_0==178))
				{
					alt55 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:286:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(286, 18);
					string_literal118=(IToken)Match(input,103,Follow._103_in_type_name1460); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal118);

					DebugLocation(286, 23);
					// SugarCpp.g:286:23: ( type_name | '(' ')' )
					int alt54=2;
					try { DebugEnterSubRule(54);
					try { DebugEnterDecision(54, false);
					int LA54_0 = input.LA(1);

					if ((LA54_0==IDENT||LA54_0==140||LA54_0==153||(LA54_0>=161 && LA54_0<=162)))
					{
						alt54 = 1;
					}
					else if ((LA54_0==91))
					{
						int LA54_2 = input.LA(2);

						if ((LA54_2==92))
						{
							int LA54_3 = input.LA(3);

							if ((LA54_3==103))
							{
								alt54 = 1;
							}
							else if ((LA54_3==DEDENT||(LA54_3>=IDENT && LA54_3<=INDENT)||LA54_3==NEWLINE||(LA54_3>=91 && LA54_3<=92)||LA54_3==98||(LA54_3>=111 && LA54_3<=112)||LA54_3==119||(LA54_3>=122 && LA54_3<=123)||LA54_3==131||LA54_3==136||LA54_3==142||(LA54_3>=146 && LA54_3<=147)||LA54_3==149||(LA54_3>=164 && LA54_3<=165)||(LA54_3>=168 && LA54_3<=169)||(LA54_3>=172 && LA54_3<=173)||LA54_3==178))
							{
								alt54 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 54, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA54_2==IDENT||LA54_2==91||LA54_2==140||LA54_2==153||(LA54_2>=161 && LA54_2<=162)))
						{
							alt54 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 54, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(54); }
					switch (alt54)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:286:24: type_name
						{
						DebugLocation(286, 24);
						PushFollow(Follow._type_name_in_type_name1463);
						type_name119=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name119.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:286:36: '(' ')'
						{
						DebugLocation(286, 36);
						char_literal120=(IToken)Match(input,91,Follow._91_in_type_name1467); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_91.Add(char_literal120);

						DebugLocation(286, 40);
						char_literal121=(IToken)Match(input,92,Follow._92_in_type_name1469); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal121);


						}
						break;

					}
					} finally { DebugExitSubRule(54); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 286:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(286, 48);
						// SugarCpp.g:286:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(286, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(286, 60);
						// SugarCpp.g:286:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(286, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(286, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(286, 85);
						// SugarCpp.g:286:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(286, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:287:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 287:9: -> type_single
					{
						DebugLocation(287, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(55); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:289:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(289, 4);
				char_literal122=(IToken)Match(input,91,Follow._91_in_type_name1510); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal122);

				DebugLocation(289, 8);
				// SugarCpp.g:289:8: ( type_list )?
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==91||LA56_0==140||LA56_0==153||(LA56_0>=161 && LA56_0<=162)))
				{
					alt56 = 1;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:289:8: type_list
					{
					DebugLocation(289, 8);
					PushFollow(Follow._type_list_in_type_name1512);
					type_list123=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list123.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(56); }

				DebugLocation(289, 19);
				char_literal124=(IToken)Match(input,92,Follow._92_in_type_name1515); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal124);

				DebugLocation(289, 23);
				string_literal125=(IToken)Match(input,103,Follow._103_in_type_name1517); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(string_literal125);

				DebugLocation(289, 28);
				// SugarCpp.g:289:28: ( type_name | '(' ')' )
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT||LA57_0==140||LA57_0==153||(LA57_0>=161 && LA57_0<=162)))
				{
					alt57 = 1;
				}
				else if ((LA57_0==91))
				{
					int LA57_2 = input.LA(2);

					if ((LA57_2==92))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==103))
						{
							alt57 = 1;
						}
						else if ((LA57_3==DEDENT||(LA57_3>=IDENT && LA57_3<=INDENT)||LA57_3==NEWLINE||(LA57_3>=91 && LA57_3<=92)||LA57_3==98||(LA57_3>=111 && LA57_3<=112)||LA57_3==119||(LA57_3>=122 && LA57_3<=123)||LA57_3==131||LA57_3==136||LA57_3==142||(LA57_3>=146 && LA57_3<=147)||LA57_3==149||(LA57_3>=164 && LA57_3<=165)||(LA57_3>=168 && LA57_3<=169)||(LA57_3>=172 && LA57_3<=173)||LA57_3==178))
						{
							alt57 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 57, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA57_2==IDENT||LA57_2==91||LA57_2==140||LA57_2==153||(LA57_2>=161 && LA57_2<=162)))
					{
						alt57 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 57, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:289:29: type_name
					{
					DebugLocation(289, 29);
					PushFollow(Follow._type_name_in_type_name1520);
					type_name126=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name126.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:289:41: '(' ')'
					{
					DebugLocation(289, 41);
					char_literal127=(IToken)Match(input,91,Follow._91_in_type_name1524); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal127);

					DebugLocation(289, 45);
					char_literal128=(IToken)Match(input,92,Follow._92_in_type_name1526); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal128);


					}
					break;

				}
				} finally { DebugExitSubRule(57); }



				{
				// AST REWRITE
				// elements: type_list, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 289:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(289, 53);
					// SugarCpp.g:289:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(289, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(289, 65);
					// SugarCpp.g:289:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(289, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(289, 76);
					// SugarCpp.g:289:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(289, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:292:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal136 = default(IToken);
		IToken char_literal137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(292, 1);
		try
		{
			// SugarCpp.g:293:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:293:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(293, 4);
			PushFollow(Follow._type_star_in_type_single1550);
			type_star129=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star129.Tree);
			DebugLocation(293, 14);
			// SugarCpp.g:293:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt62=3;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case 89:
				{
				alt62 = 1;
				}
				break;
			case 130:
				{
				alt62 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case INDENT:
			case NEWLINE:
			case 91:
			case 92:
			case 98:
			case 103:
			case 111:
			case 112:
			case 119:
			case 122:
			case 123:
			case 131:
			case 136:
			case 142:
			case 146:
			case 147:
			case 149:
			case 164:
			case 165:
			case 168:
			case 169:
			case 172:
			case 173:
			case 178:
				{
				alt62 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:293:16: '&'
				{
				DebugLocation(293, 16);
				char_literal130=(IToken)Match(input,89,Follow._89_in_type_single1554); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal130);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(293, 23);
					// SugarCpp.g:293:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(293, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(293, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:294:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(294, 7);
				char_literal131=(IToken)Match(input,130,Follow._130_in_type_single1570); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal131);

				DebugLocation(294, 11);
				// SugarCpp.g:294:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt61=2;
				try { DebugEnterSubRule(61);
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==NUMBER||LA61_0==STRING||LA61_0==84||LA61_0==89||LA61_0==91||LA61_0==93||(LA61_0>=95 && LA61_0<=96)||(LA61_0>=99 && LA61_0<=100)||(LA61_0>=129 && LA61_0<=130)||LA61_0==152||LA61_0==155||(LA61_0>=157 && LA61_0<=158)||LA61_0==178))
				{
					alt61 = 1;
				}
				else if ((LA61_0==98||LA61_0==131))
				{
					alt61 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(61); }
				switch (alt61)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:294:13: expr ( ',' expr )* ']'
					{
					DebugLocation(294, 13);
					PushFollow(Follow._expr_in_type_single1574);
					expr132=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr132.Tree);
					DebugLocation(294, 18);
					// SugarCpp.g:294:18: ( ',' expr )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==98))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:294:19: ',' expr
							{
							DebugLocation(294, 19);
							char_literal133=(IToken)Match(input,98,Follow._98_in_type_single1577); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal133);

							DebugLocation(294, 23);
							PushFollow(Follow._expr_in_type_single1579);
							expr134=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr134.Tree);

							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(294, 30);
					char_literal135=(IToken)Match(input,131,Follow._131_in_type_single1583); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal135);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 294:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(294, 37);
						// SugarCpp.g:294:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(294, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(294, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(294, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(294, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:295:13: ( ',' )* ']'
					{
					DebugLocation(295, 13);
					// SugarCpp.g:295:13: ( ',' )*
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==98))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch ( alt60 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:295:13: ','
							{
							DebugLocation(295, 13);
							char_literal136=(IToken)Match(input,98,Follow._98_in_type_single1608); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal136);


							}
							break;

						default:
							goto loop60;
						}
					}

					loop60:
						;

					} finally { DebugExitSubRule(60); }

					DebugLocation(295, 18);
					char_literal137=(IToken)Match(input,131,Follow._131_in_type_single1611); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal137);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 295:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(295, 25);
						// SugarCpp.g:295:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(295, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(295, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(295, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(295, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(61); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:297:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:7: -> type_star
				{
					DebugLocation(297, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:301:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal139 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(302, 4);
			PushFollow(Follow._type_star_in_type_no_array1658);
			type_star138=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star138.Tree);
			DebugLocation(302, 14);
			// SugarCpp.g:302:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==89))
			{
				alt63 = 1;
			}
			else if ((LA63_0==91||LA63_0==130))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:302:16: '&'
				{
				DebugLocation(302, 16);
				char_literal139=(IToken)Match(input,89,Follow._89_in_type_no_array1662); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_89.Add(char_literal139);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 302:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(302, 23);
					// SugarCpp.g:302:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(302, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(302, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:303:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 303:7: -> type_star
				{
					DebugLocation(303, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:307:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(307, 1);
		try
		{
			// SugarCpp.g:308:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:308:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(308, 4);
			PushFollow(Follow._type_template_type_in_type_star1697);
			type_template_type140=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type140.Tree);
			DebugLocation(308, 23);
			// SugarCpp.g:308:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt65=2;
			try { DebugEnterSubRule(65);
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==93))
			{
				alt65 = 1;
			}
			else if ((LA65_0==DEDENT||(LA65_0>=IDENT && LA65_0<=INDENT)||LA65_0==NEWLINE||LA65_0==89||(LA65_0>=91 && LA65_0<=92)||LA65_0==98||LA65_0==103||(LA65_0>=111 && LA65_0<=112)||LA65_0==119||(LA65_0>=122 && LA65_0<=123)||(LA65_0>=130 && LA65_0<=131)||LA65_0==136||LA65_0==142||(LA65_0>=146 && LA65_0<=147)||LA65_0==149||(LA65_0>=164 && LA65_0<=165)||(LA65_0>=168 && LA65_0<=169)||(LA65_0>=172 && LA65_0<=173)||LA65_0==178))
			{
				alt65 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:25: ( '*' )+
				{
				DebugLocation(308, 25);
				// SugarCpp.g:308:25: ( '*' )+
				int cnt64=0;
				try { DebugEnterSubRule(64);
				while (true)
				{
					int alt64=2;
					try { DebugEnterDecision(64, false);
					int LA64_0 = input.LA(1);

					if ((LA64_0==93))
					{
						alt64 = 1;
					}


					} finally { DebugExitDecision(64); }
					switch (alt64)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:308:25: '*'
						{
						DebugLocation(308, 25);
						char_literal141=(IToken)Match(input,93,Follow._93_in_type_star1701); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal141);


						}
						break;

					default:
						if (cnt64 >= 1)
							goto loop64;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee64 = new EarlyExitException( 64, input );
						DebugRecognitionException(eee64);
						throw eee64;
					}
					cnt64++;
				}
				loop64:
					;

				} finally { DebugExitSubRule(64); }



				{
				// AST REWRITE
				// elements: 93, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 308:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(308, 33);
					// SugarCpp.g:308:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(308, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(308, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(308, 64);
					if (!(stream_93.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_93.HasNext )
					{
						DebugLocation(308, 64);
						adaptor.AddChild(root_1, stream_93.NextNode());

					}
					stream_93.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:309:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 309:10: -> type_template_type
				{
					DebugLocation(309, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(311, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:313:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal143 = default(IToken);
		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name146 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal143_tree = default(CommonTree);
		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(313, 1);
		try
		{
			// SugarCpp.g:314:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:314:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(314, 4);
			PushFollow(Follow._type_ident_in_type_template_type1747);
			type_ident142=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident142.Tree);
			DebugLocation(314, 15);
			// SugarCpp.g:314:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==113))
			{
				alt68 = 1;
			}
			else if ((LA68_0==DEDENT||(LA68_0>=IDENT && LA68_0<=INDENT)||LA68_0==NEWLINE||LA68_0==89||(LA68_0>=91 && LA68_0<=93)||LA68_0==98||LA68_0==103||(LA68_0>=111 && LA68_0<=112)||LA68_0==119||(LA68_0>=122 && LA68_0<=123)||(LA68_0>=130 && LA68_0<=131)||LA68_0==136||LA68_0==142||(LA68_0>=146 && LA68_0<=147)||LA68_0==149||(LA68_0>=164 && LA68_0<=165)||(LA68_0>=168 && LA68_0<=169)||(LA68_0>=172 && LA68_0<=173)||LA68_0==178))
			{
				alt68 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(314, 17);
				char_literal143=(IToken)Match(input,113,Follow._113_in_type_template_type1751); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(char_literal143);

				DebugLocation(314, 21);
				// SugarCpp.g:314:21: ( type_name ( ',' type_name )* )?
				int alt67=2;
				try { DebugEnterSubRule(67);
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==91||LA67_0==140||LA67_0==153||(LA67_0>=161 && LA67_0<=162)))
				{
					alt67 = 1;
				}
				} finally { DebugExitDecision(67); }
				switch (alt67)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:314:22: type_name ( ',' type_name )*
					{
					DebugLocation(314, 22);
					PushFollow(Follow._type_name_in_type_template_type1754);
					type_name144=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name144.Tree);
					DebugLocation(314, 32);
					// SugarCpp.g:314:32: ( ',' type_name )*
					try { DebugEnterSubRule(66);
					while (true)
					{
						int alt66=2;
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==98))
						{
							alt66 = 1;
						}


						} finally { DebugExitDecision(66); }
						switch ( alt66 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:314:33: ',' type_name
							{
							DebugLocation(314, 33);
							char_literal145=(IToken)Match(input,98,Follow._98_in_type_template_type1757); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal145);

							DebugLocation(314, 37);
							PushFollow(Follow._type_name_in_type_template_type1759);
							type_name146=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name146.Tree);

							}
							break;

						default:
							goto loop66;
						}
					}

					loop66:
						;

					} finally { DebugExitSubRule(66); }


					}
					break;

				}
				} finally { DebugExitSubRule(67); }

				DebugLocation(314, 51);
				char_literal147=(IToken)Match(input,123,Follow._123_in_type_template_type1765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal147);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 314:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(314, 58);
					// SugarCpp.g:314:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(314, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(314, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(314, 85);
					// SugarCpp.g:314:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(314, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:315:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:8: -> type_ident
				{
					DebugLocation(315, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:319:1: type_ident : ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal148 = default(IToken);
		IToken string_literal149 = default(IToken);
		IToken string_literal150 = default(IToken);
		IToken string_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident152 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal148_tree = default(CommonTree);
		CommonTree string_literal149_tree = default(CommonTree);
		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree string_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(319, 1);
		try
		{
			// SugarCpp.g:320:2: ( ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:320:4: ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(320, 4);
			// SugarCpp.g:320:4: ( 'static' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==161))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:4: 'static'
				{
				DebugLocation(320, 4);
				string_literal148=(IToken)Match(input,161,Follow._161_in_type_ident1805); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_161.Add(string_literal148);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(320, 14);
			// SugarCpp.g:320:14: ( 'const' )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==140))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:14: 'const'
				{
				DebugLocation(320, 14);
				string_literal149=(IToken)Match(input,140,Follow._140_in_type_ident1808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal149);


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(320, 23);
			// SugarCpp.g:320:23: ( 'struct' )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==162))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:23: 'struct'
				{
				DebugLocation(320, 23);
				string_literal150=(IToken)Match(input,162,Follow._162_in_type_ident1811); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal150);


				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(320, 33);
			// SugarCpp.g:320:33: ( 'long' )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==153))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:320:33: 'long'
				{
				DebugLocation(320, 33);
				string_literal151=(IToken)Match(input,153,Follow._153_in_type_ident1814); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_153.Add(string_literal151);


				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(320, 41);
			PushFollow(Follow._ident_in_type_ident1817);
			ident152=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident152.Tree);


			{
			// AST REWRITE
			// elements: 140, 161, ident, 153, 162
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 320:47: -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(320, 50);
				// SugarCpp.g:320:50: ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(320, 52);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(320, 63);
				// SugarCpp.g:320:63: ( 'static' )?
				if (stream_161.HasNext)
				{
					DebugLocation(320, 63);
					adaptor.AddChild(root_1, stream_161.NextNode());

				}
				stream_161.Reset();
				DebugLocation(320, 73);
				// SugarCpp.g:320:73: ( 'const' )?
				if (stream_140.HasNext)
				{
					DebugLocation(320, 73);
					adaptor.AddChild(root_1, stream_140.NextNode());

				}
				stream_140.Reset();
				DebugLocation(320, 82);
				// SugarCpp.g:320:82: ( 'struct' )?
				if (stream_162.HasNext)
				{
					DebugLocation(320, 82);
					adaptor.AddChild(root_1, stream_162.NextNode());

				}
				stream_162.Reset();
				DebugLocation(320, 92);
				// SugarCpp.g:320:92: ( 'long' )?
				if (stream_153.HasNext)
				{
					DebugLocation(320, 92);
					adaptor.AddChild(root_1, stream_153.NextNode());

				}
				stream_153.Reset();
				DebugLocation(320, 100);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(321, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:323:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal154 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident155 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal154_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(323, 1);
		try
		{
			// SugarCpp.g:324:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:324:4: ident ( ',' ident )*
			{
			DebugLocation(324, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1848);
			ident153=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident153.Tree);
			DebugLocation(324, 10);
			// SugarCpp.g:324:10: ( ',' ident )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==98))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:324:11: ',' ident
					{
					DebugLocation(324, 11);
					char_literal154=(IToken)Match(input,98,Follow._98_in_generic_parameter_inside1851); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal154);

					DebugLocation(324, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1853);
					ident155=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident155.Tree);

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 324:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(324, 26);
				// SugarCpp.g:324:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(324, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(324, 47);
				// SugarCpp.g:324:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(324, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:327:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		IToken char_literal158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(327, 1);
		try
		{
			// SugarCpp.g:328:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:328:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(328, 4);
			char_literal156=(IToken)Match(input,113,Follow._113_in_generic_parameter1875); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_113.Add(char_literal156);

			DebugLocation(328, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1877);
			generic_parameter_inside157=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside157.Tree);
			DebugLocation(328, 33);
			char_literal158=(IToken)Match(input,123,Follow._123_in_generic_parameter1879); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(char_literal158);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 328:37: -> generic_parameter_inside
			{
				DebugLocation(328, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:331:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal160 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item159 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item161 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(331, 1);
		try
		{
			// SugarCpp.g:332:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:332:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(332, 4);
			PushFollow(Follow._func_args_item_in_func_args1894);
			func_args_item159=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item159.Tree);
			DebugLocation(332, 19);
			// SugarCpp.g:332:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==98))
				{
					alt74 = 1;
				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:332:20: ',' func_args_item
					{
					DebugLocation(332, 20);
					char_literal160=(IToken)Match(input,98,Follow._98_in_func_args1897); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal160);

					DebugLocation(332, 24);
					PushFollow(Follow._func_args_item_in_func_args1899);
					func_args_item161=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item161.Tree);

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 332:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(332, 44);
				// SugarCpp.g:332:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(332, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(332, 56);
				// SugarCpp.g:332:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(332, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(333, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:335:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal163 = default(IToken);
		IToken char_literal165 = default(IToken);
		IToken string_literal166 = default(IToken);
		IToken string_literal169 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr167 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree char_literal165_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		CommonTree string_literal169_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(335, 1);
		try
		{
			// SugarCpp.g:336:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==IDENT))
			{
				alt77 = 1;
			}
			else if ((LA77_0==111))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:336:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(336, 4);
				PushFollow(Follow._ident_list_in_func_args_item1921);
				ident_list162=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list162.Tree);
				DebugLocation(336, 15);
				char_literal163=(IToken)Match(input,109,Follow._109_in_func_args_item1923); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal163);

				DebugLocation(336, 19);
				PushFollow(Follow._type_name_in_func_args_item1925);
				type_name164=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name164.Tree);
				DebugLocation(336, 29);
				// SugarCpp.g:336:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt76=3;
				try { DebugEnterSubRule(76);
				try { DebugEnterDecision(76, false);
				switch (input.LA(1))
				{
				case 111:
				case 119:
					{
					alt76 = 1;
					}
					break;
				case 91:
					{
					alt76 = 2;
					}
					break;
				case 92:
				case 98:
					{
					alt76 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(76); }
				switch (alt76)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:336:31: ( '=' | ':=' ) expr
					{
					DebugLocation(336, 31);
					// SugarCpp.g:336:31: ( '=' | ':=' )
					int alt75=2;
					try { DebugEnterSubRule(75);
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==119))
					{
						alt75 = 1;
					}
					else if ((LA75_0==111))
					{
						alt75 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:336:32: '='
						{
						DebugLocation(336, 32);
						char_literal165=(IToken)Match(input,119,Follow._119_in_func_args_item1930); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_119.Add(char_literal165);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:336:38: ':='
						{
						DebugLocation(336, 38);
						string_literal166=(IToken)Match(input,111,Follow._111_in_func_args_item1934); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(string_literal166);


						}
						break;

					}
					} finally { DebugExitSubRule(75); }

					DebugLocation(336, 44);
					PushFollow(Follow._expr_in_func_args_item1937);
					expr167=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr167.Tree);


					{
					// AST REWRITE
					// elements: expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 336:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(336, 53);
						// SugarCpp.g:336:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(336, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(336, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(336, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(336, 93);
						// SugarCpp.g:336:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(336, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(336, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:337:33: bracket_expr_list
					{
					DebugLocation(337, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item1988);
					bracket_expr_list168=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list168.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 337:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(337, 55);
						// SugarCpp.g:337:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(337, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(337, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(337, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(337, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:338:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 338:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(338, 18);
						// SugarCpp.g:338:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(338, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(338, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(338, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(338, 58);
						// SugarCpp.g:338:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(338, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(76); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:340:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(340, 8);
				string_literal169=(IToken)Match(input,111,Follow._111_in_func_args_item2048); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal169_tree = (CommonTree)adaptor.Create(string_literal169);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal169_tree, root_0);
				}
				DebugLocation(340, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2052);
				modify_expr170=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr170.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(341, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:343:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set171 = default(IToken);

		CommonTree set171_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(343, 1);
		try
		{
			// SugarCpp.g:344:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(344, 2);

			set171=(IToken)input.LT(1);
			if (input.LA(1)==93||input.LA(1)==95||input.LA(1)==99||input.LA(1)==107)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set171));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:347:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal173 = default(IToken);
		IToken char_literal175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator174 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(347, 1);
		try
		{
			// SugarCpp.g:348:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt78=2;
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==IDENT))
			{
				alt78 = 1;
			}
			else if ((LA78_0==91))
			{
				alt78 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:348:4: ident
				{
				DebugLocation(348, 4);
				PushFollow(Follow._ident_in_func_name2086);
				ident172=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident172.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 348:10: -> ident
				{
					DebugLocation(348, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:349:4: '(' operator ')'
				{
				DebugLocation(349, 4);
				char_literal173=(IToken)Match(input,91,Follow._91_in_func_name2095); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal173);

				DebugLocation(349, 8);
				PushFollow(Follow._operator_in_func_name2097);
				operator174=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator174.Tree);
				DebugLocation(349, 17);
				char_literal175=(IToken)Match(input,92,Follow._92_in_func_name2099); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal175);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 349:21: -> operator
				{
					DebugLocation(349, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:352:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 27);
		TraceIn("func_type", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(352, 1);
		try
		{
			// SugarCpp.g:353:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:353:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(353, 4);
			PushFollow(Follow._type_name_in_func_type2114);
			type_name176=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name176.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 27);
			LeaveRule("func_type", 27);
			LeaveRule_func_type();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:356:1: func_def : ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 28);
		TraceIn("func_def", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal179 = default(IToken);
		IToken char_literal182 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken NEWLINE185 = default(IToken);
		IToken char_literal187 = default(IToken);
		IToken NEWLINE189 = default(IToken);
		IToken INDENT190 = default(IToken);
		IToken NEWLINE191 = default(IToken);
		IToken NEWLINE193 = default(IToken);
		IToken DEDENT194 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal179_tree = default(CommonTree);
		CommonTree char_literal182_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree NEWLINE185_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		CommonTree NEWLINE189_tree = default(CommonTree);
		CommonTree INDENT190_tree = default(CommonTree);
		CommonTree NEWLINE191_tree = default(CommonTree);
		CommonTree NEWLINE193_tree = default(CommonTree);
		CommonTree DEDENT194_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_178=new RewriteRuleITokenStream(adaptor,"token 178");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(356, 4);
		try
		{
			// SugarCpp.g:357:2: ( ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:357:4: ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			{
			DebugLocation(357, 4);
			// SugarCpp.g:357:4: ( attribute )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==130))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:4: attribute
				{
				DebugLocation(357, 4);
				PushFollow(Follow._attribute_in_func_def2125);
				attribute177=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute177.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(357, 15);
			// SugarCpp.g:357:15: ( func_type )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			try
			{
				alt80 = dfa80.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:15: func_type
				{
				DebugLocation(357, 15);
				PushFollow(Follow._func_type_in_func_def2128);
				func_type178=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type178.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(357, 26);
			// SugarCpp.g:357:26: ( '~' )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_0 = input.LA(1);

			if ((LA81_0==178))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:26: '~'
				{
				DebugLocation(357, 26);
				char_literal179=(IToken)Match(input,178,Follow._178_in_func_def2131); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_178.Add(char_literal179);


				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(357, 31);
			PushFollow(Follow._func_name_in_func_def2134);
			func_name180=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name180.Tree);
			DebugLocation(357, 41);
			// SugarCpp.g:357:41: ( generic_parameter )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==113))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:41: generic_parameter
				{
				DebugLocation(357, 41);
				PushFollow(Follow._generic_parameter_in_func_def2136);
				generic_parameter181=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter181.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(357, 60);
			char_literal182=(IToken)Match(input,91,Follow._91_in_func_def2139); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal182);

			DebugLocation(357, 64);
			// SugarCpp.g:357:64: ( func_args )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==IDENT||LA83_0==111))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:64: func_args
				{
				DebugLocation(357, 64);
				PushFollow(Follow._func_args_in_func_def2141);
				func_args183=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args183.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(357, 75);
			char_literal184=(IToken)Match(input,92,Follow._92_in_func_def2144); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal184);

			DebugLocation(357, 79);
			// SugarCpp.g:357:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==NEWLINE))
			{
				alt90 = 1;
			}
			else if ((LA90_0==119))
			{
				alt90 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:81: ( NEWLINE )+ stmt_block
				{
				DebugLocation(357, 81);
				// SugarCpp.g:357:81: ( NEWLINE )+
				int cnt84=0;
				try { DebugEnterSubRule(84);
				while (true)
				{
					int alt84=2;
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==NEWLINE))
					{
						alt84 = 1;
					}


					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:357:81: NEWLINE
						{
						DebugLocation(357, 81);
						NEWLINE185=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2148); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE185);


						}
						break;

					default:
						if (cnt84 >= 1)
							goto loop84;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee84 = new EarlyExitException( 84, input );
						DebugRecognitionException(eee84);
						throw eee84;
					}
					cnt84++;
				}
				loop84:
					;

				} finally { DebugExitSubRule(84); }

				DebugLocation(357, 90);
				PushFollow(Follow._stmt_block_in_func_def2151);
				stmt_block186=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block186.Tree);


				{
				// AST REWRITE
				// elements: 178, attribute, generic_parameter, func_args, stmt_block, func_name, func_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 357:101: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(357, 104);
					// SugarCpp.g:357:104: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(357, 106);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(357, 115);
					// SugarCpp.g:357:115: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(357, 115);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(357, 126);
					// SugarCpp.g:357:126: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(357, 126);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(357, 137);
					// SugarCpp.g:357:137: ( '~' )?
					if (stream_178.HasNext)
					{
						DebugLocation(357, 137);
						adaptor.AddChild(root_1, stream_178.NextNode());

					}
					stream_178.Reset();
					DebugLocation(357, 142);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(357, 152);
					// SugarCpp.g:357:152: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(357, 152);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(357, 171);
					// SugarCpp.g:357:171: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(357, 171);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(357, 182);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:358:24: '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(358, 24);
				char_literal187=(IToken)Match(input,119,Follow._119_in_func_def2201); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(char_literal187);

				DebugLocation(358, 28);
				// SugarCpp.g:358:28: ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==NUMBER||LA89_0==STRING||LA89_0==84||LA89_0==89||LA89_0==91||LA89_0==93||(LA89_0>=95 && LA89_0<=96)||(LA89_0>=99 && LA89_0<=100)||(LA89_0>=129 && LA89_0<=130)||LA89_0==152||LA89_0==155||(LA89_0>=157 && LA89_0<=158)||LA89_0==178))
				{
					alt89 = 1;
				}
				else if ((LA89_0==NEWLINE))
				{
					alt89 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:358:30: where_expr
					{
					DebugLocation(358, 30);
					PushFollow(Follow._where_expr_in_func_def2205);
					where_expr188=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr188.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter, func_args, func_name, func_type, where_expr, 178, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 358:42: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
						DebugLocation(358, 45);
						// SugarCpp.g:358:45: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(358, 56);
						// SugarCpp.g:358:56: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(358, 56);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(358, 67);
						// SugarCpp.g:358:67: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(358, 67);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(358, 78);
						// SugarCpp.g:358:78: ( '~' )?
						if (stream_178.HasNext)
						{
							DebugLocation(358, 78);
							adaptor.AddChild(root_1, stream_178.NextNode());

						}
						stream_178.Reset();
						DebugLocation(358, 83);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(358, 93);
						// SugarCpp.g:358:93: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(358, 93);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(358, 112);
						// SugarCpp.g:358:112: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(358, 112);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(358, 123);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:359:27: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(359, 27);
					// SugarCpp.g:359:27: ( NEWLINE )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==NEWLINE))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:359:27: NEWLINE
							{
							DebugLocation(359, 27);
							NEWLINE189=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2259); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE189);


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(359, 36);
					INDENT190=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2262); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT190);

					DebugLocation(359, 43);
					// SugarCpp.g:359:43: ( NEWLINE )*
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==NEWLINE))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch ( alt86 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:359:43: NEWLINE
							{
							DebugLocation(359, 43);
							NEWLINE191=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2264); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE191);


							}
							break;

						default:
							goto loop86;
						}
					}

					loop86:
						;

					} finally { DebugExitSubRule(86); }

					DebugLocation(359, 52);
					// SugarCpp.g:359:52: ( match_item ( NEWLINE )+ )+
					int cnt88=0;
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==174))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch (alt88)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:359:53: match_item ( NEWLINE )+
							{
							DebugLocation(359, 53);
							PushFollow(Follow._match_item_in_func_def2268);
							match_item192=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item192.Tree);
							DebugLocation(359, 64);
							// SugarCpp.g:359:64: ( NEWLINE )+
							int cnt87=0;
							try { DebugEnterSubRule(87);
							while (true)
							{
								int alt87=2;
								try { DebugEnterDecision(87, false);
								int LA87_0 = input.LA(1);

								if ((LA87_0==NEWLINE))
								{
									alt87 = 1;
								}


								} finally { DebugExitDecision(87); }
								switch (alt87)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:359:64: NEWLINE
									{
									DebugLocation(359, 64);
									NEWLINE193=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2270); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE193);


									}
									break;

								default:
									if (cnt87 >= 1)
										goto loop87;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee87 = new EarlyExitException( 87, input );
									DebugRecognitionException(eee87);
									throw eee87;
								}
								cnt87++;
							}
							loop87:
								;

							} finally { DebugExitSubRule(87); }


							}
							break;

						default:
							if (cnt88 >= 1)
								goto loop88;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee88 = new EarlyExitException( 88, input );
							DebugRecognitionException(eee88);
							throw eee88;
						}
						cnt88++;
					}
					loop88:
						;

					} finally { DebugExitSubRule(88); }

					DebugLocation(359, 75);
					DEDENT194=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2275); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT194);



					{
					// AST REWRITE
					// elements: 178, func_type, func_args, generic_parameter, func_name, attribute, match_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 359:82: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(359, 85);
						// SugarCpp.g:359:85: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 87);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(359, 96);
						// SugarCpp.g:359:96: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(359, 96);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(359, 107);
						// SugarCpp.g:359:107: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(359, 107);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(359, 118);
						// SugarCpp.g:359:118: ( '~' )?
						if (stream_178.HasNext)
						{
							DebugLocation(359, 118);
							adaptor.AddChild(root_1, stream_178.NextNode());

						}
						stream_178.Reset();
						DebugLocation(359, 123);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(359, 133);
						// SugarCpp.g:359:133: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(359, 133);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(359, 152);
						// SugarCpp.g:359:152: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(359, 152);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(359, 163);
						// SugarCpp.g:359:163: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 165);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(359, 176);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(359, 176);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(89); }


				}
				break;

			}
			} finally { DebugExitSubRule(90); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 28);
			LeaveRule("func_def", 28);
			LeaveRule_func_def();
		}
		DebugLocation(362, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:364:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 29);
		TraceIn("stmt_block_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE196 = default(IToken);
		IToken NEWLINE198 = default(IToken);
		IToken char_literal199 = default(IToken);
		IToken NEWLINE200 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple197 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE196_tree = default(CommonTree);
		CommonTree NEWLINE198_tree = default(CommonTree);
		CommonTree char_literal199_tree = default(CommonTree);
		CommonTree NEWLINE200_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==141||(LA95_0>=145 && LA95_0<=147)||LA95_0==154||LA95_0==163||LA95_0==166||(LA95_0>=168 && LA95_0<=169)||LA95_0==173))
			{
				alt95 = 1;
			}
			else if ((LA95_0==IDENT||LA95_0==84||LA95_0==89||LA95_0==91||LA95_0==93||(LA95_0>=95 && LA95_0<=96)||(LA95_0>=99 && LA95_0<=100)||LA95_0==129||LA95_0==158||LA95_0==160||LA95_0==167||LA95_0==170||LA95_0==178))
			{
				alt95 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:365:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(365, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2368);
				stmt_complex195=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex195.Tree);
				DebugLocation(365, 17);
				// SugarCpp.g:365:17: ( NEWLINE )+
				int cnt91=0;
				try { DebugEnterSubRule(91);
				while (true)
				{
					int alt91=2;
					try { DebugEnterDecision(91, false);
					int LA91_0 = input.LA(1);

					if ((LA91_0==NEWLINE))
					{
						alt91 = 1;
					}


					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:365:17: NEWLINE
						{
						DebugLocation(365, 17);
						NEWLINE196=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2370); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE196);


						}
						break;

					default:
						if (cnt91 >= 1)
							goto loop91;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee91 = new EarlyExitException( 91, input );
						DebugRecognitionException(eee91);
						throw eee91;
					}
					cnt91++;
				}
				loop91:
					;

				} finally { DebugExitSubRule(91); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 365:26: -> stmt_complex
				{
					DebugLocation(365, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:366:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(366, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2380);
				stmt_simple197=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple197.Tree);
				DebugLocation(366, 16);
				// SugarCpp.g:366:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==NEWLINE))
				{
					alt94 = 1;
				}
				else if ((LA94_0==112))
				{
					alt94 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 94, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:366:17: ( NEWLINE )+
					{
					DebugLocation(366, 17);
					// SugarCpp.g:366:17: ( NEWLINE )+
					int cnt92=0;
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==NEWLINE))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch (alt92)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:366:17: NEWLINE
							{
							DebugLocation(366, 17);
							NEWLINE198=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2383); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE198);


							}
							break;

						default:
							if (cnt92 >= 1)
								goto loop92;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee92 = new EarlyExitException( 92, input );
							DebugRecognitionException(eee92);
							throw eee92;
						}
						cnt92++;
					}
					loop92:
						;

					} finally { DebugExitSubRule(92); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:366:28: ';' ( NEWLINE )*
					{
					DebugLocation(366, 28);
					char_literal199=(IToken)Match(input,112,Follow._112_in_stmt_block_item2388); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_112.Add(char_literal199);

					DebugLocation(366, 32);
					// SugarCpp.g:366:32: ( NEWLINE )*
					try { DebugEnterSubRule(93);
					while (true)
					{
						int alt93=2;
						try { DebugEnterDecision(93, false);
						int LA93_0 = input.LA(1);

						if ((LA93_0==NEWLINE))
						{
							alt93 = 1;
						}


						} finally { DebugExitDecision(93); }
						switch ( alt93 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:366:32: NEWLINE
							{
							DebugLocation(366, 32);
							NEWLINE200=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2390); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE200);


							}
							break;

						default:
							goto loop93;
						}
					}

					loop93:
						;

					} finally { DebugExitSubRule(93); }


					}
					break;

				}
				} finally { DebugExitSubRule(94); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 366:42: -> stmt_simple
				{
					DebugLocation(366, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 29);
			LeaveRule("stmt_block_item", 29);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:369:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 30);
		TraceIn("stmt_block", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT201 = default(IToken);
		IToken NEWLINE202 = default(IToken);
		IToken DEDENT204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item203 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT201_tree = default(CommonTree);
		CommonTree NEWLINE202_tree = default(CommonTree);
		CommonTree DEDENT204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(369, 1);
		try
		{
			// SugarCpp.g:370:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:370:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(370, 4);
			INDENT201=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2407); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT201);

			DebugLocation(370, 11);
			// SugarCpp.g:370:11: ( NEWLINE )*
			try { DebugEnterSubRule(96);
			while (true)
			{
				int alt96=2;
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==NEWLINE))
				{
					alt96 = 1;
				}


				} finally { DebugExitDecision(96); }
				switch ( alt96 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:370:11: NEWLINE
					{
					DebugLocation(370, 11);
					NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2409); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE202);


					}
					break;

				default:
					goto loop96;
				}
			}

			loop96:
				;

			} finally { DebugExitSubRule(96); }

			DebugLocation(370, 20);
			// SugarCpp.g:370:20: ( stmt_block_item )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==IDENT||LA97_0==84||LA97_0==89||LA97_0==91||LA97_0==93||(LA97_0>=95 && LA97_0<=96)||(LA97_0>=99 && LA97_0<=100)||LA97_0==129||LA97_0==141||(LA97_0>=145 && LA97_0<=147)||LA97_0==154||LA97_0==158||LA97_0==160||LA97_0==163||(LA97_0>=166 && LA97_0<=170)||LA97_0==173||LA97_0==178))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:370:20: stmt_block_item
					{
					DebugLocation(370, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2412);
					stmt_block_item203=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item203.Tree);

					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }

			DebugLocation(370, 37);
			DEDENT204=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2415); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT204);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 370:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(370, 47);
				// SugarCpp.g:370:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(370, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(370, 60);
				// SugarCpp.g:370:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(370, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 30);
			LeaveRule("stmt_block", 30);
			LeaveRule_stmt_block();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:373:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 31);
		TraceIn("stmt", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(373, 1);
		try
		{
			// SugarCpp.g:374:2: ( stmt_simple | stmt_complex )
			int alt98=2;
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==IDENT||LA98_0==84||LA98_0==89||LA98_0==91||LA98_0==93||(LA98_0>=95 && LA98_0<=96)||(LA98_0>=99 && LA98_0<=100)||LA98_0==129||LA98_0==158||LA98_0==160||LA98_0==167||LA98_0==170||LA98_0==178))
			{
				alt98 = 1;
			}
			else if ((LA98_0==141||(LA98_0>=145 && LA98_0<=147)||LA98_0==154||LA98_0==163||LA98_0==166||(LA98_0>=168 && LA98_0<=169)||LA98_0==173))
			{
				alt98 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:374:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(374, 4);
				PushFollow(Follow._stmt_simple_in_stmt2435);
				stmt_simple205=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple205.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:375:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(375, 4);
				PushFollow(Follow._stmt_complex_in_stmt2440);
				stmt_complex206=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex206.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 31);
			LeaveRule("stmt", 31);
			LeaveRule_stmt();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:378:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 32);
		TraceIn("stmt_simple", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(378, 1);
		try
		{
			// SugarCpp.g:379:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:379:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(379, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2451);
			stmt_expr207=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr207.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 32);
			LeaveRule("stmt_simple", 32);
			LeaveRule_stmt_simple();
		}
		DebugLocation(380, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:382:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 33);
		TraceIn("stmt_complex", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer213 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(382, 1);
		try
		{
			// SugarCpp.g:383:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt99=6;
			try { DebugEnterDecision(99, false);
			switch (input.LA(1))
			{
			case 147:
			case 168:
				{
				alt99 = 1;
				}
				break;
			case 146:
				{
				alt99 = 2;
				}
				break;
			case 154:
			case 169:
			case 173:
				{
				alt99 = 3;
				}
				break;
			case 166:
				{
				alt99 = 4;
				}
				break;
			case 163:
				{
				alt99 = 5;
				}
				break;
			case 141:
			case 145:
				{
				alt99 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:383:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(383, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2462);
				stmt_if208=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if208.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:384:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2467);
				stmt_for209=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for209.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:385:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2472);
				stmt_while210=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while210.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:386:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(386, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2477);
				stmt_try211=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try211.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:387:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(387, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2482);
				stmt_switch212=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch212.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:388:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(388, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2487);
				stmt_defer213=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer213.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 33);
			LeaveRule("stmt_complex", 33);
			LeaveRule_stmt_complex();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:391:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 34);
		TraceIn("stmt_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal214 = default(IToken);
		IToken string_literal216 = default(IToken);
		IToken string_literal218 = default(IToken);
		IToken string_literal220 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken char_literal224 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal214_tree = default(CommonTree);
		CommonTree string_literal216_tree = default(CommonTree);
		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree char_literal224_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(391, 1);
		try
		{
			// SugarCpp.g:392:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:392:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(392, 4);
			// SugarCpp.g:392:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:392:5: a= stmt_expr_item
			{
			DebugLocation(392, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2501);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 392:22: -> $a
			{
				DebugLocation(392, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(392, 29);
			// SugarCpp.g:392:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=6;
				try { DebugEnterDecision(101, false);
				switch (input.LA(1))
				{
				case 147:
					{
					alt101 = 1;
					}
					break;
				case 168:
					{
					alt101 = 2;
					}
					break;
				case 173:
					{
					alt101 = 3;
					}
					break;
				case 169:
					{
					alt101 = 4;
					}
					break;
				case 146:
					{
					alt101 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:392:31: 'if' expr
					{
					DebugLocation(392, 31);
					string_literal214=(IToken)Match(input,147,Follow._147_in_stmt_expr2511); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_147.Add(string_literal214);

					DebugLocation(392, 36);
					PushFollow(Follow._expr_in_stmt_expr2513);
					expr215=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr215.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(392, 44);
						// SugarCpp.g:392:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(392, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(392, 59);
						// SugarCpp.g:392:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(392, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:393:13: 'unless' expr
					{
					DebugLocation(393, 13);
					string_literal216=(IToken)Match(input,168,Follow._168_in_stmt_expr2542); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_168.Add(string_literal216);

					DebugLocation(393, 22);
					PushFollow(Follow._expr_in_stmt_expr2544);
					expr217=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr217.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(393, 30);
						// SugarCpp.g:393:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(393, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(393, 49);
						// SugarCpp.g:393:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(393, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:394:13: 'while' expr
					{
					DebugLocation(394, 13);
					string_literal218=(IToken)Match(input,173,Follow._173_in_stmt_expr2573); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_173.Add(string_literal218);

					DebugLocation(394, 21);
					PushFollow(Follow._expr_in_stmt_expr2575);
					expr219=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr219.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(394, 29);
						// SugarCpp.g:394:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(394, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(394, 47);
						// SugarCpp.g:394:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(394, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:395:13: 'until' expr
					{
					DebugLocation(395, 13);
					string_literal220=(IToken)Match(input,169,Follow._169_in_stmt_expr2604); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_169.Add(string_literal220);

					DebugLocation(395, 21);
					PushFollow(Follow._expr_in_stmt_expr2606);
					expr221=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr221.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(395, 29);
						// SugarCpp.g:395:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(395, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(395, 47);
						// SugarCpp.g:395:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(395, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:396:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(396, 13);
					string_literal222=(IToken)Match(input,146,Follow._146_in_stmt_expr2635); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_146.Add(string_literal222);

					DebugLocation(396, 19);
					PushFollow(Follow._for_item_in_stmt_expr2637);
					for_item223=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item223.Tree);
					DebugLocation(396, 28);
					// SugarCpp.g:396:28: ( ',' for_item )*
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==98))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch ( alt100 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:396:29: ',' for_item
							{
							DebugLocation(396, 29);
							char_literal224=(IToken)Match(input,98,Follow._98_in_stmt_expr2640); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal224);

							DebugLocation(396, 33);
							PushFollow(Follow._for_item_in_stmt_expr2642);
							for_item225=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item225.Tree);

							}
							break;

						default:
							goto loop100;
						}
					}

					loop100:
						;

					} finally { DebugExitSubRule(100); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(396, 47);
						// SugarCpp.g:396:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(396, 58);
						// SugarCpp.g:396:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(396, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(396, 68);
						// SugarCpp.g:396:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(396, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 34);
			LeaveRule("stmt_expr", 34);
			LeaveRule_stmt_expr();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:400:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 35);
		TraceIn("stmt_expr_item", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify230 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(400, 1);
		try
		{
			// SugarCpp.g:401:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt102=5;
			try { DebugEnterDecision(102, false);
			try
			{
				alt102 = dfa102.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:401:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2684);
				stmt_alloc226=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc226.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:402:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2689);
				stmt_return227=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return227.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:403:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(403, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2694);
				stmt_using228=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using228.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:404:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2699);
				stmt_typedef229=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef229.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:405:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(405, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2704);
				stmt_modify230=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify230.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 35);
			LeaveRule("stmt_expr_item", 35);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:408:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 36);
		TraceIn("stmt_defer", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal231 = default(IToken);
		IToken string_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(408, 1);
		try
		{
			// SugarCpp.g:409:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt103=2;
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==141))
			{
				alt103 = 1;
			}
			else if ((LA103_0==145))
			{
				alt103 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 103, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:409:4: 'defer' stmt
				{
				DebugLocation(409, 4);
				string_literal231=(IToken)Match(input,141,Follow._141_in_stmt_defer2715); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal231);

				DebugLocation(409, 12);
				PushFollow(Follow._stmt_in_stmt_defer2717);
				stmt232=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt232.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 409:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(409, 20);
					// SugarCpp.g:409:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(409, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(409, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:410:4: 'finally' stmt
				{
				DebugLocation(410, 4);
				string_literal233=(IToken)Match(input,145,Follow._145_in_stmt_defer2730); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_145.Add(string_literal233);

				DebugLocation(410, 14);
				PushFollow(Follow._stmt_in_stmt_defer2732);
				stmt234=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt234.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 410:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(410, 22);
					// SugarCpp.g:410:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(410, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(410, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 36);
			LeaveRule("stmt_defer", 36);
			LeaveRule_stmt_defer();
		}
		DebugLocation(411, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:413:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 37);
		TraceIn("stmt_typedef", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal235 = default(IToken);
		IToken char_literal237 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name238 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree char_literal237_tree = default(CommonTree);
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(413, 1);
		try
		{
			// SugarCpp.g:414:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:414:4: 'type' ident '=' type_name
			{
			DebugLocation(414, 4);
			string_literal235=(IToken)Match(input,167,Follow._167_in_stmt_typedef2751); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(string_literal235);

			DebugLocation(414, 11);
			PushFollow(Follow._ident_in_stmt_typedef2753);
			ident236=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident236.Tree);
			DebugLocation(414, 17);
			char_literal237=(IToken)Match(input,119,Follow._119_in_stmt_typedef2755); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal237);

			DebugLocation(414, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2757);
			type_name238=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name238.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 414:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(414, 34);
				// SugarCpp.g:414:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(414, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(414, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(414, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 37);
			LeaveRule("stmt_typedef", 37);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(415, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:417:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 38);
		TraceIn("stmt_using_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal240_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(417, 36);
		try
		{
			// SugarCpp.g:417:16: ( ident | 'namespace' )
			int alt104=2;
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if ((LA104_0==IDENT))
			{
				alt104 = 1;
			}
			else if ((LA104_0==156))
			{
				alt104 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:417:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(417, 18);
				PushFollow(Follow._ident_in_stmt_using_item2776);
				ident239=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident239.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:417:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(417, 26);
				string_literal240=(IToken)Match(input,156,Follow._156_in_stmt_using_item2780); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal240_tree = (CommonTree)adaptor.Create(string_literal240);
				adaptor.AddChild(root_0, string_literal240_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 38);
			LeaveRule("stmt_using_item", 38);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(417, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:418:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 39);
		TraceIn("stmt_using", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(418, 1);
		try
		{
			// SugarCpp.g:419:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:419:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(419, 4);
			string_literal241=(IToken)Match(input,170,Follow._170_in_stmt_using2788); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(string_literal241);

			DebugLocation(419, 12);
			// SugarCpp.g:419:12: ( stmt_using_item )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==IDENT||LA105_0==156))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:419:12: stmt_using_item
					{
					DebugLocation(419, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2790);
					stmt_using_item242=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item242.Tree);

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 419:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(419, 32);
				// SugarCpp.g:419:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(419, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(419, 45);
				// SugarCpp.g:419:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(419, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 39);
			LeaveRule("stmt_using", 39);
			LeaveRule_stmt_using();
		}
		DebugLocation(420, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:422:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 40);
		TraceIn("stmt_return", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal243 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal243_tree = default(CommonTree);
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:423:4: 'return' ( expr )?
			{
			DebugLocation(423, 4);
			string_literal243=(IToken)Match(input,160,Follow._160_in_stmt_return2811); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_160.Add(string_literal243);

			DebugLocation(423, 13);
			// SugarCpp.g:423:13: ( expr )?
			int alt106=2;
			try { DebugEnterSubRule(106);
			try { DebugEnterDecision(106, false);
			int LA106_0 = input.LA(1);

			if ((LA106_0==IDENT||LA106_0==NUMBER||LA106_0==STRING||LA106_0==84||LA106_0==89||LA106_0==91||LA106_0==93||(LA106_0>=95 && LA106_0<=96)||(LA106_0>=99 && LA106_0<=100)||(LA106_0>=129 && LA106_0<=130)||LA106_0==152||LA106_0==155||(LA106_0>=157 && LA106_0<=158)||LA106_0==178))
			{
				alt106 = 1;
			}
			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:423:13: expr
				{
				DebugLocation(423, 13);
				PushFollow(Follow._expr_in_stmt_return2813);
				expr244=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr244.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(106); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 423:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(423, 22);
				// SugarCpp.g:423:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(423, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(423, 36);
				// SugarCpp.g:423:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(423, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 40);
			LeaveRule("stmt_return", 40);
			LeaveRule_stmt_return();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:426:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 41);
		TraceIn("inline_stmt_block", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal246 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple245 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal246_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(426, 1);
		try
		{
			// SugarCpp.g:427:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:427:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(427, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2834);
			stmt_simple245=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple245.Tree);
			DebugLocation(427, 16);
			// SugarCpp.g:427:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==112))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:427:17: ';' stmt_simple
					{
					DebugLocation(427, 17);
					char_literal246=(IToken)Match(input,112,Follow._112_in_inline_stmt_block2837); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_112.Add(char_literal246);

					DebugLocation(427, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2839);
					stmt_simple247=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple247.Tree);

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 427:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(427, 38);
				// SugarCpp.g:427:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(427, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(427, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(427, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 41);
			LeaveRule("inline_stmt_block", 41);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(428, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:430:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 42);
		TraceIn("stmt_if", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal248 = default(IToken);
		IToken NEWLINE250 = default(IToken);
		IToken NEWLINE252 = default(IToken);
		IToken string_literal253 = default(IToken);
		IToken NEWLINE254 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken string_literal258 = default(IToken);
		IToken NEWLINE260 = default(IToken);
		IToken NEWLINE262 = default(IToken);
		IToken string_literal263 = default(IToken);
		IToken NEWLINE264 = default(IToken);
		IToken string_literal266 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block267 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal248_tree = default(CommonTree);
		CommonTree NEWLINE250_tree = default(CommonTree);
		CommonTree NEWLINE252_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		CommonTree NEWLINE254_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree string_literal258_tree = default(CommonTree);
		CommonTree NEWLINE260_tree = default(CommonTree);
		CommonTree NEWLINE262_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree NEWLINE264_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(430, 1);
		try
		{
			// SugarCpp.g:431:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt118=2;
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==147))
			{
				alt118 = 1;
			}
			else if ((LA118_0==168))
			{
				alt118 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 118, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:431:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(431, 4);
				string_literal248=(IToken)Match(input,147,Follow._147_in_stmt_if2861); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal248);

				DebugLocation(431, 9);
				PushFollow(Follow._expr_in_stmt_if2863);
				expr249=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr249.Tree);
				DebugLocation(431, 14);
				// SugarCpp.g:431:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt112=2;
				try { DebugEnterSubRule(112);
				try { DebugEnterDecision(112, false);
				int LA112_0 = input.LA(1);

				if ((LA112_0==NEWLINE))
				{
					alt112 = 1;
				}
				else if ((LA112_0==164))
				{
					alt112 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 112, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(112); }
				switch (alt112)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:431:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(431, 15);
					// SugarCpp.g:431:15: ( NEWLINE )+
					int cnt108=0;
					try { DebugEnterSubRule(108);
					while (true)
					{
						int alt108=2;
						try { DebugEnterDecision(108, false);
						int LA108_0 = input.LA(1);

						if ((LA108_0==NEWLINE))
						{
							alt108 = 1;
						}


						} finally { DebugExitDecision(108); }
						switch (alt108)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:431:15: NEWLINE
							{
							DebugLocation(431, 15);
							NEWLINE250=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2866); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE250);


							}
							break;

						default:
							if (cnt108 >= 1)
								goto loop108;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee108 = new EarlyExitException( 108, input );
							DebugRecognitionException(eee108);
							throw eee108;
						}
						cnt108++;
					}
					loop108:
						;

					} finally { DebugExitSubRule(108); }

					DebugLocation(431, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2869);
					stmt_block251=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block251.Tree);
					DebugLocation(431, 35);
					// SugarCpp.g:431:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt111=2;
					try { DebugEnterSubRule(111);
					try { DebugEnterDecision(111, false);
					try
					{
						alt111 = dfa111.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(111); }
					switch (alt111)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:431:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(431, 36);
						// SugarCpp.g:431:36: ( NEWLINE )*
						try { DebugEnterSubRule(109);
						while (true)
						{
							int alt109=2;
							try { DebugEnterDecision(109, false);
							int LA109_0 = input.LA(1);

							if ((LA109_0==NEWLINE))
							{
								alt109 = 1;
							}


							} finally { DebugExitDecision(109); }
							switch ( alt109 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:431:36: NEWLINE
								{
								DebugLocation(431, 36);
								NEWLINE252=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2872); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE252);


								}
								break;

							default:
								goto loop109;
							}
						}

						loop109:
							;

						} finally { DebugExitSubRule(109); }

						DebugLocation(431, 45);
						string_literal253=(IToken)Match(input,143,Follow._143_in_stmt_if2875); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_143.Add(string_literal253);

						DebugLocation(431, 52);
						// SugarCpp.g:431:52: ( NEWLINE )+
						int cnt110=0;
						try { DebugEnterSubRule(110);
						while (true)
						{
							int alt110=2;
							try { DebugEnterDecision(110, false);
							int LA110_0 = input.LA(1);

							if ((LA110_0==NEWLINE))
							{
								alt110 = 1;
							}


							} finally { DebugExitDecision(110); }
							switch (alt110)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:431:52: NEWLINE
								{
								DebugLocation(431, 52);
								NEWLINE254=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2877); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE254);


								}
								break;

							default:
								if (cnt110 >= 1)
									goto loop110;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee110 = new EarlyExitException( 110, input );
								DebugRecognitionException(eee110);
								throw eee110;
							}
							cnt110++;
						}
						loop110:
							;

						} finally { DebugExitSubRule(110); }

						DebugLocation(431, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2880);
						stmt_block255=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block255.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(111); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 431:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(431, 77);
						// SugarCpp.g:431:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(431, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(431, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(431, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(431, 103);
						// SugarCpp.g:431:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(431, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:432:16: 'then' inline_stmt_block
					{
					DebugLocation(432, 16);
					string_literal256=(IToken)Match(input,164,Follow._164_in_stmt_if2912); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_164.Add(string_literal256);

					DebugLocation(432, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2914);
					inline_stmt_block257=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block257.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(432, 44);
						// SugarCpp.g:432:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(432, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(432, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(112); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:434:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(434, 4);
				string_literal258=(IToken)Match(input,168,Follow._168_in_stmt_if2935); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal258);

				DebugLocation(434, 13);
				PushFollow(Follow._expr_in_stmt_if2937);
				expr259=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr259.Tree);
				DebugLocation(434, 18);
				// SugarCpp.g:434:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}
				else if ((LA117_0==164))
				{
					alt117 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(434, 19);
					// SugarCpp.g:434:19: ( NEWLINE )+
					int cnt113=0;
					try { DebugEnterSubRule(113);
					while (true)
					{
						int alt113=2;
						try { DebugEnterDecision(113, false);
						int LA113_0 = input.LA(1);

						if ((LA113_0==NEWLINE))
						{
							alt113 = 1;
						}


						} finally { DebugExitDecision(113); }
						switch (alt113)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:434:19: NEWLINE
							{
							DebugLocation(434, 19);
							NEWLINE260=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2940); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE260);


							}
							break;

						default:
							if (cnt113 >= 1)
								goto loop113;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee113 = new EarlyExitException( 113, input );
							DebugRecognitionException(eee113);
							throw eee113;
						}
						cnt113++;
					}
					loop113:
						;

					} finally { DebugExitSubRule(113); }

					DebugLocation(434, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2943);
					stmt_block261=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block261.Tree);
					DebugLocation(434, 39);
					// SugarCpp.g:434:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt116=2;
					try { DebugEnterSubRule(116);
					try { DebugEnterDecision(116, false);
					try
					{
						alt116 = dfa116.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(116); }
					switch (alt116)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:434:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(434, 40);
						// SugarCpp.g:434:40: ( NEWLINE )*
						try { DebugEnterSubRule(114);
						while (true)
						{
							int alt114=2;
							try { DebugEnterDecision(114, false);
							int LA114_0 = input.LA(1);

							if ((LA114_0==NEWLINE))
							{
								alt114 = 1;
							}


							} finally { DebugExitDecision(114); }
							switch ( alt114 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:434:40: NEWLINE
								{
								DebugLocation(434, 40);
								NEWLINE262=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2946); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE262);


								}
								break;

							default:
								goto loop114;
							}
						}

						loop114:
							;

						} finally { DebugExitSubRule(114); }

						DebugLocation(434, 49);
						string_literal263=(IToken)Match(input,143,Follow._143_in_stmt_if2949); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_143.Add(string_literal263);

						DebugLocation(434, 56);
						// SugarCpp.g:434:56: ( NEWLINE )+
						int cnt115=0;
						try { DebugEnterSubRule(115);
						while (true)
						{
							int alt115=2;
							try { DebugEnterDecision(115, false);
							int LA115_0 = input.LA(1);

							if ((LA115_0==NEWLINE))
							{
								alt115 = 1;
							}


							} finally { DebugExitDecision(115); }
							switch (alt115)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:434:56: NEWLINE
								{
								DebugLocation(434, 56);
								NEWLINE264=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2951); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE264);


								}
								break;

							default:
								if (cnt115 >= 1)
									goto loop115;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee115 = new EarlyExitException( 115, input );
								DebugRecognitionException(eee115);
								throw eee115;
							}
							cnt115++;
						}
						loop115:
							;

						} finally { DebugExitSubRule(115); }

						DebugLocation(434, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2954);
						stmt_block265=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block265.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(116); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 434:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(434, 81);
						// SugarCpp.g:434:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(434, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(434, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(434, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(434, 111);
						// SugarCpp.g:434:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(434, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:435:20: 'then' inline_stmt_block
					{
					DebugLocation(435, 20);
					string_literal266=(IToken)Match(input,164,Follow._164_in_stmt_if2990); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_164.Add(string_literal266);

					DebugLocation(435, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2992);
					inline_stmt_block267=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block267.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 435:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(435, 48);
						// SugarCpp.g:435:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(435, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(435, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(435, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(117); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 42);
			LeaveRule("stmt_if", 42);
			LeaveRule_stmt_if();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:439:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 43);
		TraceIn("stmt_while", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal268 = default(IToken);
		IToken NEWLINE270 = default(IToken);
		IToken string_literal272 = default(IToken);
		IToken string_literal274 = default(IToken);
		IToken NEWLINE276 = default(IToken);
		IToken string_literal278 = default(IToken);
		IToken string_literal280 = default(IToken);
		IToken NEWLINE282 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal268_tree = default(CommonTree);
		CommonTree NEWLINE270_tree = default(CommonTree);
		CommonTree string_literal272_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		CommonTree NEWLINE276_tree = default(CommonTree);
		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree string_literal280_tree = default(CommonTree);
		CommonTree NEWLINE282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(439, 1);
		try
		{
			// SugarCpp.g:440:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt125=3;
			try { DebugEnterDecision(125, false);
			switch (input.LA(1))
			{
			case 173:
				{
				alt125 = 1;
				}
				break;
			case 169:
				{
				alt125 = 2;
				}
				break;
			case 154:
				{
				alt125 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:440:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(440, 4);
				string_literal268=(IToken)Match(input,173,Follow._173_in_stmt_while3023); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(string_literal268);

				DebugLocation(440, 12);
				PushFollow(Follow._expr_in_stmt_while3025);
				expr269=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr269.Tree);
				DebugLocation(440, 17);
				// SugarCpp.g:440:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==NEWLINE))
				{
					alt120 = 1;
				}
				else if ((LA120_0==164))
				{
					alt120 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:440:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(440, 19);
					// SugarCpp.g:440:19: ( NEWLINE )+
					int cnt119=0;
					try { DebugEnterSubRule(119);
					while (true)
					{
						int alt119=2;
						try { DebugEnterDecision(119, false);
						int LA119_0 = input.LA(1);

						if ((LA119_0==NEWLINE))
						{
							alt119 = 1;
						}


						} finally { DebugExitDecision(119); }
						switch (alt119)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:440:19: NEWLINE
							{
							DebugLocation(440, 19);
							NEWLINE270=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3029); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE270);


							}
							break;

						default:
							if (cnt119 >= 1)
								goto loop119;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee119 = new EarlyExitException( 119, input );
							DebugRecognitionException(eee119);
							throw eee119;
						}
						cnt119++;
					}
					loop119:
						;

					} finally { DebugExitSubRule(119); }

					DebugLocation(440, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3032);
					stmt_block271=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block271.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(440, 42);
						// SugarCpp.g:440:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(440, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(440, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:441:13: 'then' inline_stmt_block
					{
					DebugLocation(441, 13);
					string_literal272=(IToken)Match(input,164,Follow._164_in_stmt_while3056); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_164.Add(string_literal272);

					DebugLocation(441, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3058);
					inline_stmt_block273=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block273.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(441, 41);
						// SugarCpp.g:441:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(441, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(441, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(120); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:443:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(443, 4);
				string_literal274=(IToken)Match(input,169,Follow._169_in_stmt_while3082); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal274);

				DebugLocation(443, 12);
				PushFollow(Follow._expr_in_stmt_while3084);
				expr275=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr275.Tree);
				DebugLocation(443, 17);
				// SugarCpp.g:443:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==NEWLINE))
				{
					alt122 = 1;
				}
				else if ((LA122_0==164))
				{
					alt122 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:443:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(443, 19);
					// SugarCpp.g:443:19: ( NEWLINE )+
					int cnt121=0;
					try { DebugEnterSubRule(121);
					while (true)
					{
						int alt121=2;
						try { DebugEnterDecision(121, false);
						int LA121_0 = input.LA(1);

						if ((LA121_0==NEWLINE))
						{
							alt121 = 1;
						}


						} finally { DebugExitDecision(121); }
						switch (alt121)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:443:19: NEWLINE
							{
							DebugLocation(443, 19);
							NEWLINE276=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3088); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE276);


							}
							break;

						default:
							if (cnt121 >= 1)
								goto loop121;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee121 = new EarlyExitException( 121, input );
							DebugRecognitionException(eee121);
							throw eee121;
						}
						cnt121++;
					}
					loop121:
						;

					} finally { DebugExitSubRule(121); }

					DebugLocation(443, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3091);
					stmt_block277=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block277.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(443, 42);
						// SugarCpp.g:443:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(443, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(443, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:444:13: 'then' inline_stmt_block
					{
					DebugLocation(444, 13);
					string_literal278=(IToken)Match(input,164,Follow._164_in_stmt_while3115); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_164.Add(string_literal278);

					DebugLocation(444, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3117);
					inline_stmt_block279=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block279.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 444:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(444, 41);
						// SugarCpp.g:444:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(444, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(444, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(444, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(122); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:446:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(446, 4);
				string_literal280=(IToken)Match(input,154,Follow._154_in_stmt_while3141); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal280);

				DebugLocation(446, 11);
				// SugarCpp.g:446:11: ( expr )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==IDENT||LA123_0==NUMBER||LA123_0==STRING||LA123_0==84||LA123_0==89||LA123_0==91||LA123_0==93||(LA123_0>=95 && LA123_0<=96)||(LA123_0>=99 && LA123_0<=100)||(LA123_0>=129 && LA123_0<=130)||LA123_0==152||LA123_0==155||(LA123_0>=157 && LA123_0<=158)||LA123_0==178))
				{
					alt123 = 1;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:446:11: expr
					{
					DebugLocation(446, 11);
					PushFollow(Follow._expr_in_stmt_while3143);
					expr281=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr281.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(123); }

				DebugLocation(446, 17);
				// SugarCpp.g:446:17: ( NEWLINE )+
				int cnt124=0;
				try { DebugEnterSubRule(124);
				while (true)
				{
					int alt124=2;
					try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0==NEWLINE))
					{
						alt124 = 1;
					}


					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:446:17: NEWLINE
						{
						DebugLocation(446, 17);
						NEWLINE282=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3146); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE282);


						}
						break;

					default:
						if (cnt124 >= 1)
							goto loop124;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee124 = new EarlyExitException( 124, input );
						DebugRecognitionException(eee124);
						throw eee124;
					}
					cnt124++;
				}
				loop124:
					;

				} finally { DebugExitSubRule(124); }

				DebugLocation(446, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3149);
				stmt_block283=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block283.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 446:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(446, 40);
					// SugarCpp.g:446:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(446, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(446, 52);
					// SugarCpp.g:446:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(446, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(446, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 43);
			LeaveRule("stmt_while", 43);
			LeaveRule_stmt_while();
		}
		DebugLocation(447, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:449:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 44);
		TraceIn("for_range", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal285 = default(IToken);
		IToken string_literal286 = default(IToken);
		IToken string_literal287 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken string_literal289 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal285_tree = default(CommonTree);
		CommonTree string_literal286_tree = default(CommonTree);
		CommonTree string_literal287_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree string_literal289_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(449, 1);
		try
		{
			// SugarCpp.g:450:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:450:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(450, 4);
			PushFollow(Follow._ident_in_for_range3171);
			ident284=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident284.Tree);
			DebugLocation(450, 10);
			string_literal285=(IToken)Match(input,114,Follow._114_in_for_range3173); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(string_literal285);

			DebugLocation(450, 16);
			PushFollow(Follow._expr_in_for_range3177);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(450, 22);
			// SugarCpp.g:450:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt128=3;
			try { DebugEnterSubRule(128);
			try { DebugEnterDecision(128, false);
			switch (input.LA(1))
			{
			case 165:
				{
				alt128 = 1;
				}
				break;
			case 142:
				{
				alt128 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 98:
			case 112:
			case 131:
			case 146:
			case 147:
			case 149:
			case 168:
			case 169:
			case 173:
				{
				alt128 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:450:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(450, 23);
				string_literal286=(IToken)Match(input,165,Follow._165_in_for_range3180); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal286);

				DebugLocation(450, 29);
				PushFollow(Follow._expr_in_for_range3184);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(450, 35);
				// SugarCpp.g:450:35: ( 'by' c= expr )?
				int alt126=2;
				try { DebugEnterSubRule(126);
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==136))
				{
					alt126 = 1;
				}
				} finally { DebugExitDecision(126); }
				switch (alt126)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:450:36: 'by' c= expr
					{
					DebugLocation(450, 36);
					string_literal287=(IToken)Match(input,136,Follow._136_in_for_range3187); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_136.Add(string_literal287);

					DebugLocation(450, 42);
					PushFollow(Follow._expr_in_for_range3191);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(126); }



				{
				// AST REWRITE
				// elements: ident, c, a, b
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 450:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(450, 53);
					// SugarCpp.g:450:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(450, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(450, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(450, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(450, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(450, 80);
					// SugarCpp.g:450:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(450, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:451:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(451, 8);
				string_literal288=(IToken)Match(input,142,Follow._142_in_for_range3220); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal288);

				DebugLocation(451, 18);
				PushFollow(Follow._expr_in_for_range3224);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(451, 24);
				// SugarCpp.g:451:24: ( 'by' c= expr )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==136))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:451:25: 'by' c= expr
					{
					DebugLocation(451, 25);
					string_literal289=(IToken)Match(input,136,Follow._136_in_for_range3227); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_136.Add(string_literal289);

					DebugLocation(451, 31);
					PushFollow(Follow._expr_in_for_range3231);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(127); }



				{
				// AST REWRITE
				// elements: c, b, a, ident
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 451:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(451, 42);
					// SugarCpp.g:451:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(451, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(451, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(451, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(451, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(451, 74);
					// SugarCpp.g:451:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(451, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:452:9: 
				{

				{
				// AST REWRITE
				// elements: ident, a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 452:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(452, 12);
					// SugarCpp.g:452:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(452, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(452, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(452, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 44);
			LeaveRule("for_range", 44);
			LeaveRule_for_range();
		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:456:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 45);
		TraceIn("for_when", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr290 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: expr
			{
			DebugLocation(457, 4);
			PushFollow(Follow._expr_in_for_when3289);
			expr290=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr290.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 457:9: -> ^( For_Item_When expr )
			{
				DebugLocation(457, 12);
				// SugarCpp.g:457:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(457, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(457, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 45);
			LeaveRule("for_when", 45);
			LeaveRule_for_when();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:460:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 46);
		TraceIn("for_map", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal292 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr293 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal292_tree = default(CommonTree);
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(460, 1);
		try
		{
			// SugarCpp.g:461:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:461:4: ident '=>' expr
			{
			DebugLocation(461, 4);
			PushFollow(Follow._ident_in_for_map3308);
			ident291=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident291.Tree);
			DebugLocation(461, 10);
			string_literal292=(IToken)Match(input,122,Follow._122_in_for_map3310); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_122.Add(string_literal292);

			DebugLocation(461, 15);
			PushFollow(Follow._expr_in_for_map3312);
			expr293=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr293.Tree);


			{
			// AST REWRITE
			// elements: ident, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 461:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(461, 23);
				// SugarCpp.g:461:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(461, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(461, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(461, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 46);
			LeaveRule("for_map", 46);
			LeaveRule_for_map();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:464:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 47);
		TraceIn("for_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range294 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when295 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(464, 1);
		try
		{
			// SugarCpp.g:465:2: ( for_range | for_when | for_map )
			int alt129=3;
			try { DebugEnterDecision(129, false);
			try
			{
				alt129 = dfa129.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(129); }
			switch (alt129)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:465:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(465, 4);
				PushFollow(Follow._for_range_in_for_item3333);
				for_range294=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range294.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:466:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(466, 4);
				PushFollow(Follow._for_when_in_for_item3338);
				for_when295=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when295.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:467:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(467, 4);
				PushFollow(Follow._for_map_in_for_item3343);
				for_map296=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map296.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 47);
			LeaveRule("for_item", 47);
			LeaveRule_for_item();
		}
		DebugLocation(468, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:470:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 48);
		TraceIn("stmt_for", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal297 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken NEWLINE301 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block302 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal297_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		CommonTree NEWLINE301_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(470, 1);
		try
		{
			// SugarCpp.g:471:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:471:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(471, 4);
			string_literal297=(IToken)Match(input,146,Follow._146_in_stmt_for3354); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_146.Add(string_literal297);

			DebugLocation(471, 10);
			// SugarCpp.g:471:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:471:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(471, 12);
			PushFollow(Follow._for_item_in_stmt_for3358);
			for_item298=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item298.Tree);
			DebugLocation(471, 21);
			// SugarCpp.g:471:21: ( ',' for_item )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==98))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:22: ',' for_item
					{
					DebugLocation(471, 22);
					char_literal299=(IToken)Match(input,98,Follow._98_in_stmt_for3361); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal299);

					DebugLocation(471, 26);
					PushFollow(Follow._for_item_in_stmt_for3363);
					for_item300=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item300.Tree);

					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }

			DebugLocation(471, 37);
			// SugarCpp.g:471:37: ( NEWLINE )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==NEWLINE))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:471:37: NEWLINE
					{
					DebugLocation(471, 37);
					NEWLINE301=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3367); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE301);


					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(471, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3370);
			stmt_block302=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block302.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 471:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(471, 60);
				// SugarCpp.g:471:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(471, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(471, 71);
				// SugarCpp.g:471:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(471, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(471, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 48);
			LeaveRule("stmt_for", 48);
			LeaveRule_stmt_for();
		}
		DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:476:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 49);
		TraceIn("stmt_try", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal303 = default(IToken);
		IToken NEWLINE304 = default(IToken);
		IToken NEWLINE306 = default(IToken);
		IToken string_literal307 = default(IToken);
		IToken NEWLINE309 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block310 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal303_tree = default(CommonTree);
		CommonTree NEWLINE304_tree = default(CommonTree);
		CommonTree NEWLINE306_tree = default(CommonTree);
		CommonTree string_literal307_tree = default(CommonTree);
		CommonTree NEWLINE309_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(476, 1);
		try
		{
			// SugarCpp.g:477:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:477:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(477, 4);
			string_literal303=(IToken)Match(input,166,Follow._166_in_stmt_try3401); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_166.Add(string_literal303);

			DebugLocation(477, 10);
			// SugarCpp.g:477:10: ( NEWLINE )+
			int cnt132=0;
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==NEWLINE))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:10: NEWLINE
					{
					DebugLocation(477, 10);
					NEWLINE304=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3403); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE304);


					}
					break;

				default:
					if (cnt132 >= 1)
						goto loop132;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee132 = new EarlyExitException( 132, input );
					DebugRecognitionException(eee132);
					throw eee132;
				}
				cnt132++;
			}
			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(477, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3406);
			stmt_block305=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block305.Tree);
			DebugLocation(477, 30);
			// SugarCpp.g:477:30: ( NEWLINE )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==NEWLINE))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:30: NEWLINE
					{
					DebugLocation(477, 30);
					NEWLINE306=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3408); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE306);


					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }

			DebugLocation(477, 39);
			string_literal307=(IToken)Match(input,138,Follow._138_in_stmt_try3411); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_138.Add(string_literal307);

			DebugLocation(477, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3413);
			stmt_alloc308=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc308.Tree);
			DebugLocation(477, 58);
			// SugarCpp.g:477:58: ( NEWLINE )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==NEWLINE))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:58: NEWLINE
					{
					DebugLocation(477, 58);
					NEWLINE309=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3415); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE309);


					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(477, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3418);
			stmt_block310=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block310.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 477:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(477, 81);
				// SugarCpp.g:477:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(477, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(477, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(477, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(477, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 49);
			LeaveRule("stmt_try", 49);
			LeaveRule_stmt_try();
		}
		DebugLocation(478, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:480:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 50);
		TraceIn("switch_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal311 = default(IToken);
		IToken char_literal313 = default(IToken);
		IToken NEWLINE315 = default(IToken);
		IToken string_literal317 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr312 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block318 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal311_tree = default(CommonTree);
		CommonTree char_literal313_tree = default(CommonTree);
		CommonTree NEWLINE315_tree = default(CommonTree);
		CommonTree string_literal317_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(480, 1);
		try
		{
			// SugarCpp.g:481:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:481:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(481, 4);
			string_literal311=(IToken)Match(input,171,Follow._171_in_switch_item3441); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_171.Add(string_literal311);

			DebugLocation(481, 11);
			PushFollow(Follow._expr_in_switch_item3443);
			expr312=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr312.Tree);
			DebugLocation(481, 16);
			// SugarCpp.g:481:16: ( ',' expr )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==98))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:481:17: ',' expr
					{
					DebugLocation(481, 17);
					char_literal313=(IToken)Match(input,98,Follow._98_in_switch_item3446); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal313);

					DebugLocation(481, 21);
					PushFollow(Follow._expr_in_switch_item3448);
					expr314=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr314.Tree);

					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }

			DebugLocation(481, 28);
			// SugarCpp.g:481:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt137=2;
			try { DebugEnterSubRule(137);
			try { DebugEnterDecision(137, false);
			int LA137_0 = input.LA(1);

			if ((LA137_0==NEWLINE))
			{
				alt137 = 1;
			}
			else if ((LA137_0==164))
			{
				alt137 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 137, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(137); }
			switch (alt137)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:481:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(481, 30);
				// SugarCpp.g:481:30: ( NEWLINE )+
				int cnt136=0;
				try { DebugEnterSubRule(136);
				while (true)
				{
					int alt136=2;
					try { DebugEnterDecision(136, false);
					int LA136_0 = input.LA(1);

					if ((LA136_0==NEWLINE))
					{
						alt136 = 1;
					}


					} finally { DebugExitDecision(136); }
					switch (alt136)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:481:30: NEWLINE
						{
						DebugLocation(481, 30);
						NEWLINE315=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3454); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE315);


						}
						break;

					default:
						if (cnt136 >= 1)
							goto loop136;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee136 = new EarlyExitException( 136, input );
						DebugRecognitionException(eee136);
						throw eee136;
					}
					cnt136++;
				}
				loop136:
					;

				} finally { DebugExitSubRule(136); }

				DebugLocation(481, 39);
				PushFollow(Follow._stmt_block_in_switch_item3457);
				stmt_block316=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block316.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 481:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(481, 53);
					// SugarCpp.g:481:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(481, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(481, 67);
					// SugarCpp.g:481:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(481, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(481, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(481, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(481, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:482:30: 'then' inline_stmt_block
				{
				DebugLocation(482, 30);
				string_literal317=(IToken)Match(input,164,Follow._164_in_switch_item3503); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal317);

				DebugLocation(482, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3505);
				inline_stmt_block318=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block318.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 482:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(482, 58);
					// SugarCpp.g:482:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(482, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(482, 72);
					// SugarCpp.g:482:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(482, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(482, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(482, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(482, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 50);
			LeaveRule("switch_item", 50);
			LeaveRule_switch_item();
		}
		DebugLocation(484, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:486:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 51);
		TraceIn("stmt_switch", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal319 = default(IToken);
		IToken NEWLINE321 = default(IToken);
		IToken INDENT322 = default(IToken);
		IToken NEWLINE323 = default(IToken);
		IToken NEWLINE325 = default(IToken);
		IToken string_literal326 = default(IToken);
		IToken NEWLINE327 = default(IToken);
		IToken NEWLINE329 = default(IToken);
		IToken DEDENT330 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block328 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal319_tree = default(CommonTree);
		CommonTree NEWLINE321_tree = default(CommonTree);
		CommonTree INDENT322_tree = default(CommonTree);
		CommonTree NEWLINE323_tree = default(CommonTree);
		CommonTree NEWLINE325_tree = default(CommonTree);
		CommonTree string_literal326_tree = default(CommonTree);
		CommonTree NEWLINE327_tree = default(CommonTree);
		CommonTree NEWLINE329_tree = default(CommonTree);
		CommonTree DEDENT330_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(486, 1);
		try
		{
			// SugarCpp.g:487:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:487:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(487, 4);
			string_literal319=(IToken)Match(input,163,Follow._163_in_stmt_switch3545); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_163.Add(string_literal319);

			DebugLocation(487, 13);
			// SugarCpp.g:487:13: ( expr )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			int LA138_0 = input.LA(1);

			if ((LA138_0==IDENT||LA138_0==NUMBER||LA138_0==STRING||LA138_0==84||LA138_0==89||LA138_0==91||LA138_0==93||(LA138_0>=95 && LA138_0<=96)||(LA138_0>=99 && LA138_0<=100)||(LA138_0>=129 && LA138_0<=130)||LA138_0==152||LA138_0==155||(LA138_0>=157 && LA138_0<=158)||LA138_0==178))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:487:13: expr
				{
				DebugLocation(487, 13);
				PushFollow(Follow._expr_in_stmt_switch3547);
				expr320=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr320.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(138); }

			DebugLocation(487, 19);
			// SugarCpp.g:487:19: ( NEWLINE )+
			int cnt139=0;
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==NEWLINE))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:487:19: NEWLINE
					{
					DebugLocation(487, 19);
					NEWLINE321=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3550); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE321);


					}
					break;

				default:
					if (cnt139 >= 1)
						goto loop139;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee139 = new EarlyExitException( 139, input );
					DebugRecognitionException(eee139);
					throw eee139;
				}
				cnt139++;
			}
			loop139:
				;

			} finally { DebugExitSubRule(139); }

			DebugLocation(487, 28);
			INDENT322=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3553); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT322);

			DebugLocation(487, 35);
			// SugarCpp.g:487:35: ( NEWLINE )*
			try { DebugEnterSubRule(140);
			while (true)
			{
				int alt140=2;
				try { DebugEnterDecision(140, false);
				int LA140_0 = input.LA(1);

				if ((LA140_0==NEWLINE))
				{
					alt140 = 1;
				}


				} finally { DebugExitDecision(140); }
				switch ( alt140 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:487:35: NEWLINE
					{
					DebugLocation(487, 35);
					NEWLINE323=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3555); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE323);


					}
					break;

				default:
					goto loop140;
				}
			}

			loop140:
				;

			} finally { DebugExitSubRule(140); }

			DebugLocation(487, 44);
			// SugarCpp.g:487:44: ( switch_item ( NEWLINE )+ )+
			int cnt142=0;
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==171))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:487:45: switch_item ( NEWLINE )+
					{
					DebugLocation(487, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3559);
					switch_item324=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item324.Tree);
					DebugLocation(487, 57);
					// SugarCpp.g:487:57: ( NEWLINE )+
					int cnt141=0;
					try { DebugEnterSubRule(141);
					while (true)
					{
						int alt141=2;
						try { DebugEnterDecision(141, false);
						int LA141_0 = input.LA(1);

						if ((LA141_0==NEWLINE))
						{
							alt141 = 1;
						}


						} finally { DebugExitDecision(141); }
						switch (alt141)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:487:57: NEWLINE
							{
							DebugLocation(487, 57);
							NEWLINE325=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3561); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE325);


							}
							break;

						default:
							if (cnt141 >= 1)
								goto loop141;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee141 = new EarlyExitException( 141, input );
							DebugRecognitionException(eee141);
							throw eee141;
						}
						cnt141++;
					}
					loop141:
						;

					} finally { DebugExitSubRule(141); }


					}
					break;

				default:
					if (cnt142 >= 1)
						goto loop142;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee142 = new EarlyExitException( 142, input );
					DebugRecognitionException(eee142);
					throw eee142;
				}
				cnt142++;
			}
			loop142:
				;

			} finally { DebugExitSubRule(142); }

			DebugLocation(487, 68);
			// SugarCpp.g:487:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt145=2;
			try { DebugEnterSubRule(145);
			try { DebugEnterDecision(145, false);
			int LA145_0 = input.LA(1);

			if ((LA145_0==143))
			{
				alt145 = 1;
			}
			} finally { DebugExitDecision(145); }
			switch (alt145)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:487:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(487, 69);
				string_literal326=(IToken)Match(input,143,Follow._143_in_stmt_switch3567); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal326);

				DebugLocation(487, 76);
				// SugarCpp.g:487:76: ( NEWLINE )+
				int cnt143=0;
				try { DebugEnterSubRule(143);
				while (true)
				{
					int alt143=2;
					try { DebugEnterDecision(143, false);
					int LA143_0 = input.LA(1);

					if ((LA143_0==NEWLINE))
					{
						alt143 = 1;
					}


					} finally { DebugExitDecision(143); }
					switch (alt143)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:487:76: NEWLINE
						{
						DebugLocation(487, 76);
						NEWLINE327=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3569); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE327);


						}
						break;

					default:
						if (cnt143 >= 1)
							goto loop143;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee143 = new EarlyExitException( 143, input );
						DebugRecognitionException(eee143);
						throw eee143;
					}
					cnt143++;
				}
				loop143:
					;

				} finally { DebugExitSubRule(143); }

				DebugLocation(487, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3572);
				stmt_block328=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block328.Tree);
				DebugLocation(487, 96);
				// SugarCpp.g:487:96: ( NEWLINE )*
				try { DebugEnterSubRule(144);
				while (true)
				{
					int alt144=2;
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==NEWLINE))
					{
						alt144 = 1;
					}


					} finally { DebugExitDecision(144); }
					switch ( alt144 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:487:96: NEWLINE
						{
						DebugLocation(487, 96);
						NEWLINE329=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3574); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE329);


						}
						break;

					default:
						goto loop144;
					}
				}

				loop144:
					;

				} finally { DebugExitSubRule(144); }


				}
				break;

			}
			} finally { DebugExitSubRule(145); }

			DebugLocation(487, 107);
			DEDENT330=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3579); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT330);



			{
			// AST REWRITE
			// elements: expr, stmt_block, switch_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 487:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(487, 117);
				// SugarCpp.g:487:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(487, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(487, 131);
				// SugarCpp.g:487:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(487, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(487, 137);
				// SugarCpp.g:487:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(487, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(487, 150);
				// SugarCpp.g:487:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(487, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 51);
			LeaveRule("stmt_switch", 51);
			LeaveRule_stmt_switch();
		}
		DebugLocation(488, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:490:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 52);
		TraceIn("ident_list", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal332 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident331 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident333 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal332_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(490, 1);
		try
		{
			// SugarCpp.g:491:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:491:4: ident ( ',' ident )*
			{
			DebugLocation(491, 4);
			PushFollow(Follow._ident_in_ident_list3605);
			ident331=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident331.Tree);
			DebugLocation(491, 10);
			// SugarCpp.g:491:10: ( ',' ident )*
			try { DebugEnterSubRule(146);
			while (true)
			{
				int alt146=2;
				try { DebugEnterDecision(146, false);
				int LA146_0 = input.LA(1);

				if ((LA146_0==98))
				{
					alt146 = 1;
				}


				} finally { DebugExitDecision(146); }
				switch ( alt146 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:491:11: ',' ident
					{
					DebugLocation(491, 11);
					char_literal332=(IToken)Match(input,98,Follow._98_in_ident_list3608); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal332);

					DebugLocation(491, 15);
					PushFollow(Follow._ident_in_ident_list3610);
					ident333=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident333.Tree);

					}
					break;

				default:
					goto loop146;
				}
			}

			loop146:
				;

			} finally { DebugExitSubRule(146); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 491:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(491, 26);
				// SugarCpp.g:491:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(491, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(491, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(491, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 52);
			LeaveRule("ident_list", 52);
			LeaveRule_ident_list();
		}
		DebugLocation(492, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:494:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 53);
		TraceIn("stmt_alloc", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal335 = default(IToken);
		IToken char_literal337 = default(IToken);
		IToken string_literal338 = default(IToken);
		IToken string_literal341 = default(IToken);
		IToken char_literal343 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list334 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name336 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr339 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal335_tree = default(CommonTree);
		CommonTree char_literal337_tree = default(CommonTree);
		CommonTree string_literal338_tree = default(CommonTree);
		CommonTree string_literal341_tree = default(CommonTree);
		CommonTree char_literal343_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(494, 1);
		try
		{
			// SugarCpp.g:495:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:495:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(495, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3632);
			ident_list334=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list334.Tree);
			DebugLocation(495, 15);
			// SugarCpp.g:495:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt150=2;
			try { DebugEnterSubRule(150);
			try { DebugEnterDecision(150, false);
			int LA150_0 = input.LA(1);

			if ((LA150_0==109))
			{
				alt150 = 1;
			}
			else if ((LA150_0==111))
			{
				alt150 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:495:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(495, 17);
				char_literal335=(IToken)Match(input,109,Follow._109_in_stmt_alloc3636); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal335);

				DebugLocation(495, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3638);
				type_name336=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name336.Tree);
				DebugLocation(495, 31);
				// SugarCpp.g:495:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt148=3;
				try { DebugEnterSubRule(148);
				try { DebugEnterDecision(148, false);
				switch (input.LA(1))
				{
				case 111:
				case 119:
					{
					alt148 = 1;
					}
					break;
				case 91:
					{
					alt148 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 112:
				case 146:
				case 147:
				case 149:
				case 168:
				case 169:
				case 173:
					{
					alt148 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 148, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(148); }
				switch (alt148)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(495, 33);
					// SugarCpp.g:495:33: ( '=' | ':=' )
					int alt147=2;
					try { DebugEnterSubRule(147);
					try { DebugEnterDecision(147, false);
					int LA147_0 = input.LA(1);

					if ((LA147_0==119))
					{
						alt147 = 1;
					}
					else if ((LA147_0==111))
					{
						alt147 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 147, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(147); }
					switch (alt147)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:495:34: '='
						{
						DebugLocation(495, 34);
						char_literal337=(IToken)Match(input,119,Follow._119_in_stmt_alloc3643); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_119.Add(char_literal337);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:495:40: ':='
						{
						DebugLocation(495, 40);
						string_literal338=(IToken)Match(input,111,Follow._111_in_stmt_alloc3647); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_111.Add(string_literal338);


						}
						break;

					}
					} finally { DebugExitSubRule(147); }

					DebugLocation(495, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3650);
					where_expr339=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr339.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 495:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(495, 61);
						// SugarCpp.g:495:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(495, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(495, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(495, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(495, 101);
						// SugarCpp.g:495:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(495, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(495, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:496:33: bracket_expr_list
					{
					DebugLocation(496, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3701);
					bracket_expr_list340=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list340.Tree);


					{
					// AST REWRITE
					// elements: ident_list, bracket_expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 496:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(496, 55);
						// SugarCpp.g:496:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(496, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(496, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(496, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(496, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:497:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 497:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(497, 18);
						// SugarCpp.g:497:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(497, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(497, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(497, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(497, 58);
						// SugarCpp.g:497:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(497, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(148); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:499:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(499, 8);
				string_literal341=(IToken)Match(input,111,Follow._111_in_stmt_alloc3765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(string_literal341);

				DebugLocation(499, 14);
				// SugarCpp.g:499:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:499:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(499, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3769);
				where_expr342=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr342.Tree);
				DebugLocation(499, 26);
				// SugarCpp.g:499:26: ( ',' where_expr )*
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==98))
					{
						alt149 = 1;
					}


					} finally { DebugExitDecision(149); }
					switch ( alt149 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:499:27: ',' where_expr
						{
						DebugLocation(499, 27);
						char_literal343=(IToken)Match(input,98,Follow._98_in_stmt_alloc3772); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal343);

						DebugLocation(499, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3774);
						where_expr344=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr344.Tree);

						}
						break;

					default:
						goto loop149;
					}
				}

				loop149:
					;

				} finally { DebugExitSubRule(149); }


				}



				{
				// AST REWRITE
				// elements: where_expr, 111, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 499:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(499, 48);
					// SugarCpp.g:499:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(499, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_111.NextNode(), root_1);

					DebugLocation(499, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(499, 66);
					// SugarCpp.g:499:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(499, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(499, 78);
					// SugarCpp.g:499:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(499, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(150); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 53);
			LeaveRule("stmt_alloc", 53);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(500, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:502:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 54);
		TraceIn("stmt_modify", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal348 = default(IToken);
		IToken string_literal350 = default(IToken);
		IToken string_literal352 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue345 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr349 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr353 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal348_tree = default(CommonTree);
		CommonTree string_literal350_tree = default(CommonTree);
		CommonTree string_literal352_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(502, 1);
		try
		{
			// SugarCpp.g:503:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:503:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(503, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3804);
			lvalue345=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue345.Tree);
			DebugLocation(503, 11);
			// SugarCpp.g:503:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt151=5;
			try { DebugEnterSubRule(151);
			try { DebugEnterDecision(151, false);
			switch (input.LA(1))
			{
			case 87:
			case 90:
			case 94:
			case 97:
			case 102:
			case 108:
			case 116:
			case 119:
			case 126:
			case 133:
			case 175:
				{
				alt151 = 1;
				}
				break;
			case 128:
				{
				alt151 = 2;
				}
				break;
			case 115:
				{
				alt151 = 3;
				}
				break;
			case 125:
				{
				alt151 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 112:
			case 146:
			case 147:
			case 149:
			case 168:
			case 169:
			case 173:
				{
				alt151 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 151, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(151); }
			switch (alt151)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:503:13: modify_expr_op where_expr
				{
				DebugLocation(503, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3808);
				modify_expr_op346=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op346.Tree);
				DebugLocation(503, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3810);
				where_expr347=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr347.Tree);


				{
				// AST REWRITE
				// elements: modify_expr_op, lvalue, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 503:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(503, 42);
					// SugarCpp.g:503:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(503, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(503, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:504:13: '?=' where_expr
				{
				DebugLocation(504, 13);
				string_literal348=(IToken)Match(input,128,Follow._128_in_stmt_modify3834); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_128.Add(string_literal348);

				DebugLocation(504, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3836);
				where_expr349=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr349.Tree);


				{
				// AST REWRITE
				// elements: where_expr, 128, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 504:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(504, 32);
					// SugarCpp.g:504:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(504, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_128.NextNode(), root_1);

					DebugLocation(504, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(504, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:505:16: '<<' where_expr
				{
				DebugLocation(505, 16);
				string_literal350=(IToken)Match(input,115,Follow._115_in_stmt_modify3863); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_115.Add(string_literal350);

				DebugLocation(505, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3865);
				where_expr351=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr351.Tree);


				{
				// AST REWRITE
				// elements: 115, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 505:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(505, 35);
					// SugarCpp.g:505:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(505, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(505, 46);
					adaptor.AddChild(root_1, stream_115.NextNode());
					DebugLocation(505, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(505, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:506:16: '>>' where_expr
				{
				DebugLocation(506, 16);
				string_literal352=(IToken)Match(input,125,Follow._125_in_stmt_modify3894); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(string_literal352);

				DebugLocation(506, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3896);
				where_expr353=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr353.Tree);


				{
				// AST REWRITE
				// elements: 125, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 506:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(506, 35);
					// SugarCpp.g:506:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(506, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(506, 46);
					adaptor.AddChild(root_1, stream_125.NextNode());
					DebugLocation(506, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(506, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:507:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 507:7: -> lvalue
				{
					DebugLocation(507, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(151); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 54);
			LeaveRule("stmt_modify", 54);
			LeaveRule_stmt_modify();
		}
		DebugLocation(508, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:510:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 55);
		TraceIn("where_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt354 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(510, 1);
		try
		{
			// SugarCpp.g:511:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:511:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(511, 4);
			PushFollow(Follow._stmt_in_where_item3930);
			stmt354=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt354.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 55);
			LeaveRule("where_item", 55);
			LeaveRule_where_item();
		}
		DebugLocation(512, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:514:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE355 = default(IToken);
		IToken INDENT356 = default(IToken);
		IToken NEWLINE357 = default(IToken);
		IToken string_literal358 = default(IToken);
		IToken NEWLINE360 = default(IToken);
		IToken DEDENT361 = default(IToken);
		IToken NEWLINE362 = default(IToken);
		IToken INDENT363 = default(IToken);
		IToken NEWLINE364 = default(IToken);
		IToken NEWLINE366 = default(IToken);
		IToken DEDENT367 = default(IToken);
		IToken NEWLINE368 = default(IToken);
		IToken DEDENT369 = default(IToken);
		IToken NEWLINE370 = default(IToken);
		IToken INDENT371 = default(IToken);
		IToken NEWLINE372 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken DEDENT375 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken DEDENT377 = default(IToken);
		IToken string_literal378 = default(IToken);
		IToken NEWLINE379 = default(IToken);
		IToken INDENT380 = default(IToken);
		IToken NEWLINE381 = default(IToken);
		IToken NEWLINE383 = default(IToken);
		IToken DEDENT384 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item359 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item373 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item382 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE355_tree = default(CommonTree);
		CommonTree INDENT356_tree = default(CommonTree);
		CommonTree NEWLINE357_tree = default(CommonTree);
		CommonTree string_literal358_tree = default(CommonTree);
		CommonTree NEWLINE360_tree = default(CommonTree);
		CommonTree DEDENT361_tree = default(CommonTree);
		CommonTree NEWLINE362_tree = default(CommonTree);
		CommonTree INDENT363_tree = default(CommonTree);
		CommonTree NEWLINE364_tree = default(CommonTree);
		CommonTree NEWLINE366_tree = default(CommonTree);
		CommonTree DEDENT367_tree = default(CommonTree);
		CommonTree NEWLINE368_tree = default(CommonTree);
		CommonTree DEDENT369_tree = default(CommonTree);
		CommonTree NEWLINE370_tree = default(CommonTree);
		CommonTree INDENT371_tree = default(CommonTree);
		CommonTree NEWLINE372_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree DEDENT375_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree DEDENT377_tree = default(CommonTree);
		CommonTree string_literal378_tree = default(CommonTree);
		CommonTree NEWLINE379_tree = default(CommonTree);
		CommonTree INDENT380_tree = default(CommonTree);
		CommonTree NEWLINE381_tree = default(CommonTree);
		CommonTree NEWLINE383_tree = default(CommonTree);
		CommonTree DEDENT384_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(514, 1);
		try
		{
			// SugarCpp.g:515:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:515:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(515, 4);
			// SugarCpp.g:515:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:515:5: a= expr
			{
			DebugLocation(515, 6);
			PushFollow(Follow._expr_in_where_expr3944);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 515:12: -> $a
			{
				DebugLocation(515, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(515, 19);
			// SugarCpp.g:515:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt171=3;
			try { DebugEnterSubRule(171);
			try { DebugEnterDecision(171, false);
			try
			{
				alt171 = dfa171.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(171); }
			switch (alt171)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:515:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(515, 21);
				// SugarCpp.g:515:21: ( NEWLINE )+
				int cnt152=0;
				try { DebugEnterSubRule(152);
				while (true)
				{
					int alt152=2;
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==NEWLINE))
					{
						alt152 = 1;
					}


					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:515:21: NEWLINE
						{
						DebugLocation(515, 21);
						NEWLINE355=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3954); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE355);


						}
						break;

					default:
						if (cnt152 >= 1)
							goto loop152;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee152 = new EarlyExitException( 152, input );
						DebugRecognitionException(eee152);
						throw eee152;
					}
					cnt152++;
				}
				loop152:
					;

				} finally { DebugExitSubRule(152); }

				DebugLocation(515, 30);
				INDENT356=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3957); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT356);

				DebugLocation(515, 37);
				// SugarCpp.g:515:37: ( NEWLINE )*
				try { DebugEnterSubRule(153);
				while (true)
				{
					int alt153=2;
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==NEWLINE))
					{
						alt153 = 1;
					}


					} finally { DebugExitDecision(153); }
					switch ( alt153 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:515:37: NEWLINE
						{
						DebugLocation(515, 37);
						NEWLINE357=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3959); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE357);


						}
						break;

					default:
						goto loop153;
					}
				}

				loop153:
					;

				} finally { DebugExitSubRule(153); }

				DebugLocation(515, 46);
				string_literal358=(IToken)Match(input,172,Follow._172_in_where_expr3962); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(string_literal358);

				DebugLocation(515, 54);
				// SugarCpp.g:515:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt166=2;
				try { DebugEnterSubRule(166);
				try { DebugEnterDecision(166, false);
				int LA166_0 = input.LA(1);

				if ((LA166_0==IDENT||LA166_0==84||LA166_0==89||LA166_0==91||LA166_0==93||(LA166_0>=95 && LA166_0<=96)||(LA166_0>=99 && LA166_0<=100)||LA166_0==129||LA166_0==141||(LA166_0>=145 && LA166_0<=147)||LA166_0==154||LA166_0==158||LA166_0==160||LA166_0==163||(LA166_0>=166 && LA166_0<=170)||LA166_0==173||LA166_0==178))
				{
					alt166 = 1;
				}
				else if ((LA166_0==NEWLINE))
				{
					alt166 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 166, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(166); }
				switch (alt166)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:515:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(515, 56);
					PushFollow(Follow._where_item_in_where_expr3966);
					where_item359=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item359.Tree);
					DebugLocation(515, 67);
					// SugarCpp.g:515:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt160=2;
					try { DebugEnterSubRule(160);
					try { DebugEnterDecision(160, false);
					try
					{
						alt160 = dfa160.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(160); }
					switch (alt160)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:515:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(515, 69);
						// SugarCpp.g:515:69: ( NEWLINE )*
						try { DebugEnterSubRule(154);
						while (true)
						{
							int alt154=2;
							try { DebugEnterDecision(154, false);
							int LA154_0 = input.LA(1);

							if ((LA154_0==NEWLINE))
							{
								alt154 = 1;
							}


							} finally { DebugExitDecision(154); }
							switch ( alt154 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:515:69: NEWLINE
								{
								DebugLocation(515, 69);
								NEWLINE360=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3970); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE360);


								}
								break;

							default:
								goto loop154;
							}
						}

						loop154:
							;

						} finally { DebugExitSubRule(154); }

						DebugLocation(515, 78);
						DEDENT361=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3973); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT361);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 515:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(515, 88);
							// SugarCpp.g:515:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(515, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(515, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(515, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:516:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(516, 21);
						// SugarCpp.g:516:21: ( NEWLINE )+
						int cnt155=0;
						try { DebugEnterSubRule(155);
						while (true)
						{
							int alt155=2;
							try { DebugEnterDecision(155, false);
							int LA155_0 = input.LA(1);

							if ((LA155_0==NEWLINE))
							{
								alt155 = 1;
							}


							} finally { DebugExitDecision(155); }
							switch (alt155)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:516:21: NEWLINE
								{
								DebugLocation(516, 21);
								NEWLINE362=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4006); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE362);


								}
								break;

							default:
								if (cnt155 >= 1)
									goto loop155;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee155 = new EarlyExitException( 155, input );
								DebugRecognitionException(eee155);
								throw eee155;
							}
							cnt155++;
						}
						loop155:
							;

						} finally { DebugExitSubRule(155); }

						DebugLocation(516, 30);
						INDENT363=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4009); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT363);

						DebugLocation(516, 37);
						// SugarCpp.g:516:37: ( NEWLINE )*
						try { DebugEnterSubRule(156);
						while (true)
						{
							int alt156=2;
							try { DebugEnterDecision(156, false);
							int LA156_0 = input.LA(1);

							if ((LA156_0==NEWLINE))
							{
								alt156 = 1;
							}


							} finally { DebugExitDecision(156); }
							switch ( alt156 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:516:37: NEWLINE
								{
								DebugLocation(516, 37);
								NEWLINE364=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4011); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE364);


								}
								break;

							default:
								goto loop156;
							}
						}

						loop156:
							;

						} finally { DebugExitSubRule(156); }

						DebugLocation(516, 46);
						// SugarCpp.g:516:46: ( where_item ( NEWLINE )+ )+
						int cnt158=0;
						try { DebugEnterSubRule(158);
						while (true)
						{
							int alt158=2;
							try { DebugEnterDecision(158, false);
							int LA158_0 = input.LA(1);

							if ((LA158_0==IDENT||LA158_0==84||LA158_0==89||LA158_0==91||LA158_0==93||(LA158_0>=95 && LA158_0<=96)||(LA158_0>=99 && LA158_0<=100)||LA158_0==129||LA158_0==141||(LA158_0>=145 && LA158_0<=147)||LA158_0==154||LA158_0==158||LA158_0==160||LA158_0==163||(LA158_0>=166 && LA158_0<=170)||LA158_0==173||LA158_0==178))
							{
								alt158 = 1;
							}


							} finally { DebugExitDecision(158); }
							switch (alt158)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:516:47: where_item ( NEWLINE )+
								{
								DebugLocation(516, 47);
								PushFollow(Follow._where_item_in_where_expr4015);
								where_item365=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item365.Tree);
								DebugLocation(516, 58);
								// SugarCpp.g:516:58: ( NEWLINE )+
								int cnt157=0;
								try { DebugEnterSubRule(157);
								while (true)
								{
									int alt157=2;
									try { DebugEnterDecision(157, false);
									int LA157_0 = input.LA(1);

									if ((LA157_0==NEWLINE))
									{
										alt157 = 1;
									}


									} finally { DebugExitDecision(157); }
									switch (alt157)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:516:58: NEWLINE
										{
										DebugLocation(516, 58);
										NEWLINE366=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4017); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE366);


										}
										break;

									default:
										if (cnt157 >= 1)
											goto loop157;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee157 = new EarlyExitException( 157, input );
										DebugRecognitionException(eee157);
										throw eee157;
									}
									cnt157++;
								}
								loop157:
									;

								} finally { DebugExitSubRule(157); }


								}
								break;

							default:
								if (cnt158 >= 1)
									goto loop158;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee158 = new EarlyExitException( 158, input );
								DebugRecognitionException(eee158);
								throw eee158;
							}
							cnt158++;
						}
						loop158:
							;

						} finally { DebugExitSubRule(158); }

						DebugLocation(516, 69);
						DEDENT367=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4022); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT367);

						DebugLocation(516, 76);
						// SugarCpp.g:516:76: ( NEWLINE )*
						try { DebugEnterSubRule(159);
						while (true)
						{
							int alt159=2;
							try { DebugEnterDecision(159, false);
							int LA159_0 = input.LA(1);

							if ((LA159_0==NEWLINE))
							{
								alt159 = 1;
							}


							} finally { DebugExitDecision(159); }
							switch ( alt159 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:516:76: NEWLINE
								{
								DebugLocation(516, 76);
								NEWLINE368=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4024); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE368);


								}
								break;

							default:
								goto loop159;
							}
						}

						loop159:
							;

						} finally { DebugExitSubRule(159); }

						DebugLocation(516, 85);
						DEDENT369=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4027); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT369);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 516:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(516, 95);
							// SugarCpp.g:516:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(516, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(516, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(516, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(516, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(160); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:518:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(518, 17);
					// SugarCpp.g:518:17: ( NEWLINE )+
					int cnt161=0;
					try { DebugEnterSubRule(161);
					while (true)
					{
						int alt161=2;
						try { DebugEnterDecision(161, false);
						int LA161_0 = input.LA(1);

						if ((LA161_0==NEWLINE))
						{
							alt161 = 1;
						}


						} finally { DebugExitDecision(161); }
						switch (alt161)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:518:17: NEWLINE
							{
							DebugLocation(518, 17);
							NEWLINE370=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4077); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE370);


							}
							break;

						default:
							if (cnt161 >= 1)
								goto loop161;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee161 = new EarlyExitException( 161, input );
							DebugRecognitionException(eee161);
							throw eee161;
						}
						cnt161++;
					}
					loop161:
						;

					} finally { DebugExitSubRule(161); }

					DebugLocation(518, 26);
					INDENT371=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4080); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT371);

					DebugLocation(518, 33);
					// SugarCpp.g:518:33: ( NEWLINE )*
					try { DebugEnterSubRule(162);
					while (true)
					{
						int alt162=2;
						try { DebugEnterDecision(162, false);
						int LA162_0 = input.LA(1);

						if ((LA162_0==NEWLINE))
						{
							alt162 = 1;
						}


						} finally { DebugExitDecision(162); }
						switch ( alt162 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:518:33: NEWLINE
							{
							DebugLocation(518, 33);
							NEWLINE372=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4082); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE372);


							}
							break;

						default:
							goto loop162;
						}
					}

					loop162:
						;

					} finally { DebugExitSubRule(162); }

					DebugLocation(518, 42);
					// SugarCpp.g:518:42: ( where_item ( NEWLINE )+ )+
					int cnt164=0;
					try { DebugEnterSubRule(164);
					while (true)
					{
						int alt164=2;
						try { DebugEnterDecision(164, false);
						int LA164_0 = input.LA(1);

						if ((LA164_0==IDENT||LA164_0==84||LA164_0==89||LA164_0==91||LA164_0==93||(LA164_0>=95 && LA164_0<=96)||(LA164_0>=99 && LA164_0<=100)||LA164_0==129||LA164_0==141||(LA164_0>=145 && LA164_0<=147)||LA164_0==154||LA164_0==158||LA164_0==160||LA164_0==163||(LA164_0>=166 && LA164_0<=170)||LA164_0==173||LA164_0==178))
						{
							alt164 = 1;
						}


						} finally { DebugExitDecision(164); }
						switch (alt164)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:518:43: where_item ( NEWLINE )+
							{
							DebugLocation(518, 43);
							PushFollow(Follow._where_item_in_where_expr4086);
							where_item373=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item373.Tree);
							DebugLocation(518, 54);
							// SugarCpp.g:518:54: ( NEWLINE )+
							int cnt163=0;
							try { DebugEnterSubRule(163);
							while (true)
							{
								int alt163=2;
								try { DebugEnterDecision(163, false);
								int LA163_0 = input.LA(1);

								if ((LA163_0==NEWLINE))
								{
									alt163 = 1;
								}


								} finally { DebugExitDecision(163); }
								switch (alt163)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:518:54: NEWLINE
									{
									DebugLocation(518, 54);
									NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4088); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE374);


									}
									break;

								default:
									if (cnt163 >= 1)
										goto loop163;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee163 = new EarlyExitException( 163, input );
									DebugRecognitionException(eee163);
									throw eee163;
								}
								cnt163++;
							}
							loop163:
								;

							} finally { DebugExitSubRule(163); }


							}
							break;

						default:
							if (cnt164 >= 1)
								goto loop164;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee164 = new EarlyExitException( 164, input );
							DebugRecognitionException(eee164);
							throw eee164;
						}
						cnt164++;
					}
					loop164:
						;

					} finally { DebugExitSubRule(164); }

					DebugLocation(518, 65);
					DEDENT375=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4093); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT375);

					DebugLocation(518, 72);
					// SugarCpp.g:518:72: ( NEWLINE )*
					try { DebugEnterSubRule(165);
					while (true)
					{
						int alt165=2;
						try { DebugEnterDecision(165, false);
						int LA165_0 = input.LA(1);

						if ((LA165_0==NEWLINE))
						{
							alt165 = 1;
						}


						} finally { DebugExitDecision(165); }
						switch ( alt165 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:518:72: NEWLINE
							{
							DebugLocation(518, 72);
							NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4095); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE376);


							}
							break;

						default:
							goto loop165;
						}
					}

					loop165:
						;

					} finally { DebugExitSubRule(165); }

					DebugLocation(518, 81);
					DEDENT377=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4098); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT377);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 518:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(518, 91);
						// SugarCpp.g:518:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(518, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(518, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(518, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(518, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(166); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:520:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(520, 9);
				string_literal378=(IToken)Match(input,172,Follow._172_in_where_expr4136); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_172.Add(string_literal378);

				DebugLocation(520, 17);
				// SugarCpp.g:520:17: ( NEWLINE )+
				int cnt167=0;
				try { DebugEnterSubRule(167);
				while (true)
				{
					int alt167=2;
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==NEWLINE))
					{
						alt167 = 1;
					}


					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:520:17: NEWLINE
						{
						DebugLocation(520, 17);
						NEWLINE379=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4138); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE379);


						}
						break;

					default:
						if (cnt167 >= 1)
							goto loop167;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee167 = new EarlyExitException( 167, input );
						DebugRecognitionException(eee167);
						throw eee167;
					}
					cnt167++;
				}
				loop167:
					;

				} finally { DebugExitSubRule(167); }

				DebugLocation(520, 26);
				INDENT380=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4141); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT380);

				DebugLocation(520, 33);
				// SugarCpp.g:520:33: ( NEWLINE )*
				try { DebugEnterSubRule(168);
				while (true)
				{
					int alt168=2;
					try { DebugEnterDecision(168, false);
					int LA168_0 = input.LA(1);

					if ((LA168_0==NEWLINE))
					{
						alt168 = 1;
					}


					} finally { DebugExitDecision(168); }
					switch ( alt168 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:520:33: NEWLINE
						{
						DebugLocation(520, 33);
						NEWLINE381=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4143); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE381);


						}
						break;

					default:
						goto loop168;
					}
				}

				loop168:
					;

				} finally { DebugExitSubRule(168); }

				DebugLocation(520, 42);
				// SugarCpp.g:520:42: ( where_item ( NEWLINE )+ )+
				int cnt170=0;
				try { DebugEnterSubRule(170);
				while (true)
				{
					int alt170=2;
					try { DebugEnterDecision(170, false);
					int LA170_0 = input.LA(1);

					if ((LA170_0==IDENT||LA170_0==84||LA170_0==89||LA170_0==91||LA170_0==93||(LA170_0>=95 && LA170_0<=96)||(LA170_0>=99 && LA170_0<=100)||LA170_0==129||LA170_0==141||(LA170_0>=145 && LA170_0<=147)||LA170_0==154||LA170_0==158||LA170_0==160||LA170_0==163||(LA170_0>=166 && LA170_0<=170)||LA170_0==173||LA170_0==178))
					{
						alt170 = 1;
					}


					} finally { DebugExitDecision(170); }
					switch (alt170)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:520:43: where_item ( NEWLINE )+
						{
						DebugLocation(520, 43);
						PushFollow(Follow._where_item_in_where_expr4147);
						where_item382=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item382.Tree);
						DebugLocation(520, 54);
						// SugarCpp.g:520:54: ( NEWLINE )+
						int cnt169=0;
						try { DebugEnterSubRule(169);
						while (true)
						{
							int alt169=2;
							try { DebugEnterDecision(169, false);
							int LA169_0 = input.LA(1);

							if ((LA169_0==NEWLINE))
							{
								alt169 = 1;
							}


							} finally { DebugExitDecision(169); }
							switch (alt169)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:520:54: NEWLINE
								{
								DebugLocation(520, 54);
								NEWLINE383=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4149); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE383);


								}
								break;

							default:
								if (cnt169 >= 1)
									goto loop169;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee169 = new EarlyExitException( 169, input );
								DebugRecognitionException(eee169);
								throw eee169;
							}
							cnt169++;
						}
						loop169:
							;

						} finally { DebugExitSubRule(169); }


						}
						break;

					default:
						if (cnt170 >= 1)
							goto loop170;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee170 = new EarlyExitException( 170, input );
						DebugRecognitionException(eee170);
						throw eee170;
					}
					cnt170++;
				}
				loop170:
					;

				} finally { DebugExitSubRule(170); }

				DebugLocation(520, 65);
				DEDENT384=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4154); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT384);



				{
				// AST REWRITE
				// elements: where_expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 520:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(520, 75);
					// SugarCpp.g:520:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(520, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(520, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(520, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(520, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:521:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 521:15: -> expr
				{
					DebugLocation(521, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(171); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(523, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:525:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 57);
		TraceIn("let_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal385 = default(IToken);
		IToken string_literal387 = default(IToken);
		IToken NEWLINE389 = default(IToken);
		IToken INDENT390 = default(IToken);
		IToken NEWLINE391 = default(IToken);
		IToken NEWLINE393 = default(IToken);
		IToken DEDENT394 = default(IToken);
		IToken NEWLINE396 = default(IToken);
		IToken INDENT397 = default(IToken);
		IToken NEWLINE398 = default(IToken);
		IToken NEWLINE400 = default(IToken);
		IToken string_literal401 = default(IToken);
		IToken NEWLINE403 = default(IToken);
		IToken DEDENT404 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item386 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr388 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr392 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr395 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr402 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal385_tree = default(CommonTree);
		CommonTree string_literal387_tree = default(CommonTree);
		CommonTree NEWLINE389_tree = default(CommonTree);
		CommonTree INDENT390_tree = default(CommonTree);
		CommonTree NEWLINE391_tree = default(CommonTree);
		CommonTree NEWLINE393_tree = default(CommonTree);
		CommonTree DEDENT394_tree = default(CommonTree);
		CommonTree NEWLINE396_tree = default(CommonTree);
		CommonTree INDENT397_tree = default(CommonTree);
		CommonTree NEWLINE398_tree = default(CommonTree);
		CommonTree NEWLINE400_tree = default(CommonTree);
		CommonTree string_literal401_tree = default(CommonTree);
		CommonTree NEWLINE403_tree = default(CommonTree);
		CommonTree DEDENT404_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(525, 1);
		try
		{
			// SugarCpp.g:526:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:526:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(526, 4);
			string_literal385=(IToken)Match(input,152,Follow._152_in_let_expr4212); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_152.Add(string_literal385);

			DebugLocation(526, 10);
			PushFollow(Follow._where_item_in_let_expr4214);
			where_item386=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item386.Tree);
			DebugLocation(526, 21);
			// SugarCpp.g:526:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt182=2;
			try { DebugEnterSubRule(182);
			try { DebugEnterDecision(182, false);
			int LA182_0 = input.LA(1);

			if ((LA182_0==149))
			{
				alt182 = 1;
			}
			else if ((LA182_0==NEWLINE))
			{
				alt182 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 182, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(182); }
			switch (alt182)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:526:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(526, 23);
				string_literal387=(IToken)Match(input,149,Follow._149_in_let_expr4218); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal387);

				DebugLocation(526, 28);
				// SugarCpp.g:526:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt176=2;
				try { DebugEnterSubRule(176);
				try { DebugEnterDecision(176, false);
				int LA176_0 = input.LA(1);

				if ((LA176_0==IDENT||LA176_0==NUMBER||LA176_0==STRING||LA176_0==84||LA176_0==89||LA176_0==91||LA176_0==93||(LA176_0>=95 && LA176_0<=96)||(LA176_0>=99 && LA176_0<=100)||(LA176_0>=129 && LA176_0<=130)||LA176_0==152||LA176_0==155||(LA176_0>=157 && LA176_0<=158)||LA176_0==178))
				{
					alt176 = 1;
				}
				else if ((LA176_0==NEWLINE))
				{
					alt176 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 176, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(176); }
				switch (alt176)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:526:30: expr
					{
					DebugLocation(526, 30);
					PushFollow(Follow._expr_in_let_expr4222);
					expr388=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr388.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 526:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(526, 38);
						// SugarCpp.g:526:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(526, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(526, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(526, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(526, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:527:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(527, 12);
					// SugarCpp.g:527:12: ( NEWLINE )+
					int cnt172=0;
					try { DebugEnterSubRule(172);
					while (true)
					{
						int alt172=2;
						try { DebugEnterDecision(172, false);
						int LA172_0 = input.LA(1);

						if ((LA172_0==NEWLINE))
						{
							alt172 = 1;
						}


						} finally { DebugExitDecision(172); }
						switch (alt172)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:527:12: NEWLINE
							{
							DebugLocation(527, 12);
							NEWLINE389=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4246); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE389);


							}
							break;

						default:
							if (cnt172 >= 1)
								goto loop172;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee172 = new EarlyExitException( 172, input );
							DebugRecognitionException(eee172);
							throw eee172;
						}
						cnt172++;
					}
					loop172:
						;

					} finally { DebugExitSubRule(172); }

					DebugLocation(527, 21);
					// SugarCpp.g:527:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt175=2;
					try { DebugEnterSubRule(175);
					try { DebugEnterDecision(175, false);
					int LA175_0 = input.LA(1);

					if ((LA175_0==INDENT))
					{
						alt175 = 1;
					}
					else if ((LA175_0==IDENT||LA175_0==NUMBER||LA175_0==STRING||LA175_0==84||LA175_0==89||LA175_0==91||LA175_0==93||(LA175_0>=95 && LA175_0<=96)||(LA175_0>=99 && LA175_0<=100)||(LA175_0>=129 && LA175_0<=130)||LA175_0==152||LA175_0==155||(LA175_0>=157 && LA175_0<=158)||LA175_0==178))
					{
						alt175 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 175, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(175); }
					switch (alt175)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:527:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(527, 23);
						INDENT390=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4251); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT390);

						DebugLocation(527, 30);
						// SugarCpp.g:527:30: ( NEWLINE )*
						try { DebugEnterSubRule(173);
						while (true)
						{
							int alt173=2;
							try { DebugEnterDecision(173, false);
							int LA173_0 = input.LA(1);

							if ((LA173_0==NEWLINE))
							{
								alt173 = 1;
							}


							} finally { DebugExitDecision(173); }
							switch ( alt173 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:527:30: NEWLINE
								{
								DebugLocation(527, 30);
								NEWLINE391=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4253); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE391);


								}
								break;

							default:
								goto loop173;
							}
						}

						loop173:
							;

						} finally { DebugExitSubRule(173); }

						DebugLocation(527, 39);
						PushFollow(Follow._expr_in_let_expr4256);
						expr392=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr392.Tree);
						DebugLocation(527, 44);
						// SugarCpp.g:527:44: ( NEWLINE )+
						int cnt174=0;
						try { DebugEnterSubRule(174);
						while (true)
						{
							int alt174=2;
							try { DebugEnterDecision(174, false);
							int LA174_0 = input.LA(1);

							if ((LA174_0==NEWLINE))
							{
								alt174 = 1;
							}


							} finally { DebugExitDecision(174); }
							switch (alt174)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:527:44: NEWLINE
								{
								DebugLocation(527, 44);
								NEWLINE393=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4258); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE393);


								}
								break;

							default:
								if (cnt174 >= 1)
									goto loop174;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee174 = new EarlyExitException( 174, input );
								DebugRecognitionException(eee174);
								throw eee174;
							}
							cnt174++;
						}
						loop174:
							;

						} finally { DebugExitSubRule(174); }

						DebugLocation(527, 53);
						DEDENT394=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4261); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT394);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 527:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(527, 63);
							// SugarCpp.g:527:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(527, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(527, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(527, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(527, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:528:14: expr
						{
						DebugLocation(528, 14);
						PushFollow(Follow._expr_in_let_expr4287);
						expr395=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr395.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 528:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(528, 22);
							// SugarCpp.g:528:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(528, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(528, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(528, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(528, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(175); }


					}
					break;

				}
				} finally { DebugExitSubRule(176); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:531:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(531, 11);
				// SugarCpp.g:531:11: ( NEWLINE )+
				int cnt177=0;
				try { DebugEnterSubRule(177);
				while (true)
				{
					int alt177=2;
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==NEWLINE))
					{
						alt177 = 1;
					}


					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:11: NEWLINE
						{
						DebugLocation(531, 11);
						NEWLINE396=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4334); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE396);


						}
						break;

					default:
						if (cnt177 >= 1)
							goto loop177;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee177 = new EarlyExitException( 177, input );
						DebugRecognitionException(eee177);
						throw eee177;
					}
					cnt177++;
				}
				loop177:
					;

				} finally { DebugExitSubRule(177); }

				DebugLocation(531, 20);
				INDENT397=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4337); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT397);

				DebugLocation(531, 27);
				// SugarCpp.g:531:27: ( NEWLINE )*
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=2;
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==NEWLINE))
					{
						alt178 = 1;
					}


					} finally { DebugExitDecision(178); }
					switch ( alt178 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:27: NEWLINE
						{
						DebugLocation(531, 27);
						NEWLINE398=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4339); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE398);


						}
						break;

					default:
						goto loop178;
					}
				}

				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(531, 36);
				// SugarCpp.g:531:36: ( where_item ( NEWLINE )+ )+
				int cnt180=0;
				try { DebugEnterSubRule(180);
				while (true)
				{
					int alt180=2;
					try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0==IDENT||LA180_0==84||LA180_0==89||LA180_0==91||LA180_0==93||(LA180_0>=95 && LA180_0<=96)||(LA180_0>=99 && LA180_0<=100)||LA180_0==129||LA180_0==141||(LA180_0>=145 && LA180_0<=147)||LA180_0==154||LA180_0==158||LA180_0==160||LA180_0==163||(LA180_0>=166 && LA180_0<=170)||LA180_0==173||LA180_0==178))
					{
						alt180 = 1;
					}


					} finally { DebugExitDecision(180); }
					switch (alt180)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:37: where_item ( NEWLINE )+
						{
						DebugLocation(531, 37);
						PushFollow(Follow._where_item_in_let_expr4343);
						where_item399=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item399.Tree);
						DebugLocation(531, 48);
						// SugarCpp.g:531:48: ( NEWLINE )+
						int cnt179=0;
						try { DebugEnterSubRule(179);
						while (true)
						{
							int alt179=2;
							try { DebugEnterDecision(179, false);
							int LA179_0 = input.LA(1);

							if ((LA179_0==NEWLINE))
							{
								alt179 = 1;
							}


							} finally { DebugExitDecision(179); }
							switch (alt179)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:531:48: NEWLINE
								{
								DebugLocation(531, 48);
								NEWLINE400=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4345); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE400);


								}
								break;

							default:
								if (cnt179 >= 1)
									goto loop179;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee179 = new EarlyExitException( 179, input );
								DebugRecognitionException(eee179);
								throw eee179;
							}
							cnt179++;
						}
						loop179:
							;

						} finally { DebugExitSubRule(179); }


						}
						break;

					default:
						if (cnt180 >= 1)
							goto loop180;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee180 = new EarlyExitException( 180, input );
						DebugRecognitionException(eee180);
						throw eee180;
					}
					cnt180++;
				}
				loop180:
					;

				} finally { DebugExitSubRule(180); }

				DebugLocation(531, 59);
				string_literal401=(IToken)Match(input,149,Follow._149_in_let_expr4350); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal401);

				DebugLocation(531, 64);
				PushFollow(Follow._expr_in_let_expr4352);
				expr402=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr402.Tree);
				DebugLocation(531, 69);
				// SugarCpp.g:531:69: ( NEWLINE )+
				int cnt181=0;
				try { DebugEnterSubRule(181);
				while (true)
				{
					int alt181=2;
					try { DebugEnterDecision(181, false);
					int LA181_0 = input.LA(1);

					if ((LA181_0==NEWLINE))
					{
						alt181 = 1;
					}


					} finally { DebugExitDecision(181); }
					switch (alt181)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:531:69: NEWLINE
						{
						DebugLocation(531, 69);
						NEWLINE403=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4354); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE403);


						}
						break;

					default:
						if (cnt181 >= 1)
							goto loop181;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee181 = new EarlyExitException( 181, input );
						DebugRecognitionException(eee181);
						throw eee181;
					}
					cnt181++;
				}
				loop181:
					;

				} finally { DebugExitSubRule(181); }

				DebugLocation(531, 78);
				DEDENT404=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4357); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT404);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 531:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(531, 88);
					// SugarCpp.g:531:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(531, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(531, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(531, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(531, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(182); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 57);
			LeaveRule("let_expr", 57);
			LeaveRule_let_expr();
		}
		DebugLocation(533, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:535:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal405 = default(IToken);
		IToken string_literal407 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr406 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr408 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal405_tree = default(CommonTree);
		CommonTree string_literal407_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(535, 1);
		try
		{
			// SugarCpp.g:536:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:536:4: '|' expr '=>' where_expr
			{
			DebugLocation(536, 4);
			char_literal405=(IToken)Match(input,174,Follow._174_in_match_item4389); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_174.Add(char_literal405);

			DebugLocation(536, 8);
			PushFollow(Follow._expr_in_match_item4391);
			expr406=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr406.Tree);
			DebugLocation(536, 13);
			string_literal407=(IToken)Match(input,122,Follow._122_in_match_item4393); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_122.Add(string_literal407);

			DebugLocation(536, 18);
			PushFollow(Follow._where_expr_in_match_item4395);
			where_expr408=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr408.Tree);


			{
			// AST REWRITE
			// elements: expr, where_expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 536:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(536, 32);
				// SugarCpp.g:536:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(536, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(536, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(536, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(537, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:539:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal409 = default(IToken);
		IToken NEWLINE411 = default(IToken);
		IToken INDENT412 = default(IToken);
		IToken NEWLINE413 = default(IToken);
		IToken NEWLINE415 = default(IToken);
		IToken DEDENT416 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr410 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item414 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal409_tree = default(CommonTree);
		CommonTree NEWLINE411_tree = default(CommonTree);
		CommonTree INDENT412_tree = default(CommonTree);
		CommonTree NEWLINE413_tree = default(CommonTree);
		CommonTree NEWLINE415_tree = default(CommonTree);
		CommonTree DEDENT416_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(539, 1);
		try
		{
			// SugarCpp.g:540:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:540:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(540, 4);
			string_literal409=(IToken)Match(input,155,Follow._155_in_match_expr4416); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_155.Add(string_literal409);

			DebugLocation(540, 12);
			// SugarCpp.g:540:12: ( expr )?
			int alt183=2;
			try { DebugEnterSubRule(183);
			try { DebugEnterDecision(183, false);
			int LA183_0 = input.LA(1);

			if ((LA183_0==IDENT||LA183_0==NUMBER||LA183_0==STRING||LA183_0==84||LA183_0==89||LA183_0==91||LA183_0==93||(LA183_0>=95 && LA183_0<=96)||(LA183_0>=99 && LA183_0<=100)||(LA183_0>=129 && LA183_0<=130)||LA183_0==152||LA183_0==155||(LA183_0>=157 && LA183_0<=158)||LA183_0==178))
			{
				alt183 = 1;
			}
			} finally { DebugExitDecision(183); }
			switch (alt183)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:540:12: expr
				{
				DebugLocation(540, 12);
				PushFollow(Follow._expr_in_match_expr4418);
				expr410=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr410.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(183); }

			DebugLocation(540, 18);
			// SugarCpp.g:540:18: ( NEWLINE )+
			int cnt184=0;
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=2;
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==NEWLINE))
				{
					alt184 = 1;
				}


				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:540:18: NEWLINE
					{
					DebugLocation(540, 18);
					NEWLINE411=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4421); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE411);


					}
					break;

				default:
					if (cnt184 >= 1)
						goto loop184;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee184 = new EarlyExitException( 184, input );
					DebugRecognitionException(eee184);
					throw eee184;
				}
				cnt184++;
			}
			loop184:
				;

			} finally { DebugExitSubRule(184); }

			DebugLocation(540, 27);
			INDENT412=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4424); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT412);

			DebugLocation(540, 34);
			// SugarCpp.g:540:34: ( NEWLINE )*
			try { DebugEnterSubRule(185);
			while (true)
			{
				int alt185=2;
				try { DebugEnterDecision(185, false);
				int LA185_0 = input.LA(1);

				if ((LA185_0==NEWLINE))
				{
					alt185 = 1;
				}


				} finally { DebugExitDecision(185); }
				switch ( alt185 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:540:34: NEWLINE
					{
					DebugLocation(540, 34);
					NEWLINE413=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4426); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE413);


					}
					break;

				default:
					goto loop185;
				}
			}

			loop185:
				;

			} finally { DebugExitSubRule(185); }

			DebugLocation(540, 43);
			// SugarCpp.g:540:43: ( match_item ( NEWLINE )+ )+
			int cnt187=0;
			try { DebugEnterSubRule(187);
			while (true)
			{
				int alt187=2;
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==174))
				{
					alt187 = 1;
				}


				} finally { DebugExitDecision(187); }
				switch (alt187)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:540:44: match_item ( NEWLINE )+
					{
					DebugLocation(540, 44);
					PushFollow(Follow._match_item_in_match_expr4430);
					match_item414=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item414.Tree);
					DebugLocation(540, 55);
					// SugarCpp.g:540:55: ( NEWLINE )+
					int cnt186=0;
					try { DebugEnterSubRule(186);
					while (true)
					{
						int alt186=2;
						try { DebugEnterDecision(186, false);
						int LA186_0 = input.LA(1);

						if ((LA186_0==NEWLINE))
						{
							alt186 = 1;
						}


						} finally { DebugExitDecision(186); }
						switch (alt186)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:540:55: NEWLINE
							{
							DebugLocation(540, 55);
							NEWLINE415=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4432); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE415);


							}
							break;

						default:
							if (cnt186 >= 1)
								goto loop186;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee186 = new EarlyExitException( 186, input );
							DebugRecognitionException(eee186);
							throw eee186;
						}
						cnt186++;
					}
					loop186:
						;

					} finally { DebugExitSubRule(186); }


					}
					break;

				default:
					if (cnt187 >= 1)
						goto loop187;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee187 = new EarlyExitException( 187, input );
					DebugRecognitionException(eee187);
					throw eee187;
				}
				cnt187++;
			}
			loop187:
				;

			} finally { DebugExitSubRule(187); }

			DebugLocation(540, 66);
			DEDENT416=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4437); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT416);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 540:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(540, 76);
				// SugarCpp.g:540:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(540, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(540, 89);
				// SugarCpp.g:540:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(540, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(540, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(540, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(541, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:543:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr417 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr418 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr419 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(543, 1);
		try
		{
			// SugarCpp.g:544:2: ( feed_expr | match_expr | let_expr )
			int alt188=3;
			try { DebugEnterDecision(188, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 84:
			case 89:
			case 91:
			case 93:
			case 95:
			case 96:
			case 99:
			case 100:
			case 129:
			case 130:
			case 157:
			case 158:
			case 178:
				{
				alt188 = 1;
				}
				break;
			case 155:
				{
				alt188 = 2;
				}
				break;
			case 152:
				{
				alt188 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 188, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(188); }
			switch (alt188)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:544:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(544, 4);
				PushFollow(Follow._feed_expr_in_expr4460);
				feed_expr417=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr417.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:545:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(545, 4);
				PushFollow(Follow._match_expr_in_expr4465);
				match_expr418=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr418.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:546:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(546, 4);
				PushFollow(Follow._let_expr_in_expr4470);
				let_expr419=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr419.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(547, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:549:1: feed_expr : ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 61);
		TraceIn("feed_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal420 = default(IToken);
		IToken string_literal422 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr421 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr424 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal420_tree = default(CommonTree);
		CommonTree string_literal422_tree = default(CommonTree);
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(549, 1);
		try
		{
			// SugarCpp.g:550:2: ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt190=2;
			try { DebugEnterDecision(190, false);
			switch (input.LA(1))
			{
			case 91:
				{
				int LA190_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 84:
			case 89:
			case 93:
			case 95:
			case 96:
			case 99:
			case 100:
			case 158:
			case 178:
				{
				int LA190_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 157:
				{
				int LA190_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA190_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA190_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA190_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 129:
				{
				int LA190_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt190 = 1;
				}
				else if ((true))
				{
					alt190 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				alt190 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:550:4: ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(550, 36);
				// SugarCpp.g:550:36: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:550:37: a= modify_expr
				{
				DebugLocation(550, 38);
				PushFollow(Follow._modify_expr_in_feed_expr4499);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 550:51: -> $a
				{
					DebugLocation(550, 55);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(550, 58);
				// SugarCpp.g:550:58: ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt189=2;
				try { DebugEnterSubRule(189);
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==118))
				{
					alt189 = 1;
				}
				else if ((LA189_0==176))
				{
					alt189 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 189, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(189); }
				switch (alt189)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:550:60: '<|' list_expr
					{
					DebugLocation(550, 60);
					string_literal420=(IToken)Match(input,118,Follow._118_in_feed_expr4509); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_118.Add(string_literal420);

					DebugLocation(550, 65);
					PushFollow(Follow._list_expr_in_feed_expr4511);
					list_expr421=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr421.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 550:75: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(550, 78);
						// SugarCpp.g:550:78: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(550, 80);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(550, 91);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(550, 101);
						// SugarCpp.g:550:101: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(550, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(550, 113);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:551:18: '|>' list_expr
					{
					DebugLocation(551, 18);
					string_literal422=(IToken)Match(input,176,Follow._176_in_feed_expr4545); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(string_literal422);

					DebugLocation(551, 23);
					PushFollow(Follow._list_expr_in_feed_expr4547);
					list_expr423=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr423.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 551:33: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(551, 36);
						// SugarCpp.g:551:36: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(551, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(551, 48);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(551, 58);
						// SugarCpp.g:551:58: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(551, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(551, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(189); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:553:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(553, 4);
				PushFollow(Follow._list_expr_in_feed_expr4584);
				list_expr424=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr424.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 61);
			LeaveRule("feed_expr", 61);
			LeaveRule_feed_expr();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:556:1: list_expr : ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 62);
		TraceIn("list_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal425 = default(IToken);
		IToken string_literal427 = default(IToken);
		IToken char_literal429 = default(IToken);
		IToken char_literal431 = default(IToken);
		IToken char_literal432 = default(IToken);
		IToken char_literal434 = default(IToken);
		IToken char_literal435 = default(IToken);
		IToken NEWLINE436 = default(IToken);
		IToken INDENT437 = default(IToken);
		IToken DEDENT438 = default(IToken);
		IToken char_literal440 = default(IToken);
		IToken NEWLINE441 = default(IToken);
		IToken INDENT442 = default(IToken);
		IToken DEDENT443 = default(IToken);
		IToken char_literal445 = default(IToken);
		IToken NEWLINE446 = default(IToken);
		IToken INDENT447 = default(IToken);
		IToken DEDENT448 = default(IToken);
		IToken char_literal449 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr426 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item428 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name433 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr444 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr450 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal425_tree = default(CommonTree);
		CommonTree string_literal427_tree = default(CommonTree);
		CommonTree char_literal429_tree = default(CommonTree);
		CommonTree char_literal431_tree = default(CommonTree);
		CommonTree char_literal432_tree = default(CommonTree);
		CommonTree char_literal434_tree = default(CommonTree);
		CommonTree char_literal435_tree = default(CommonTree);
		CommonTree NEWLINE436_tree = default(CommonTree);
		CommonTree INDENT437_tree = default(CommonTree);
		CommonTree DEDENT438_tree = default(CommonTree);
		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree NEWLINE441_tree = default(CommonTree);
		CommonTree INDENT442_tree = default(CommonTree);
		CommonTree DEDENT443_tree = default(CommonTree);
		CommonTree char_literal445_tree = default(CommonTree);
		CommonTree NEWLINE446_tree = default(CommonTree);
		CommonTree INDENT447_tree = default(CommonTree);
		CommonTree DEDENT448_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(556, 1);
		try
		{
			// SugarCpp.g:557:2: ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt197=3;
			try { DebugEnterDecision(197, false);
			int LA197_0 = input.LA(1);

			if ((LA197_0==130))
			{
				int LA197_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt197 = 1;
				}
				else if ((true))
				{
					alt197 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 197, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA197_0==IDENT||LA197_0==NUMBER||LA197_0==STRING||LA197_0==84||LA197_0==89||LA197_0==91||LA197_0==93||(LA197_0>=95 && LA197_0<=96)||(LA197_0>=99 && LA197_0<=100)||LA197_0==129||(LA197_0>=157 && LA197_0<=158)||LA197_0==178))
			{
				alt197 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 197, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:557:4: ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name
				{
				DebugLocation(557, 29);
				char_literal425=(IToken)Match(input,130,Follow._130_in_list_expr4605); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal425);

				DebugLocation(557, 33);
				PushFollow(Follow._feed_expr_in_list_expr4607);
				feed_expr426=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr426.Tree);
				DebugLocation(557, 43);
				string_literal427=(IToken)Match(input,146,Follow._146_in_list_expr4609); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal427);

				DebugLocation(557, 49);
				PushFollow(Follow._for_item_in_list_expr4611);
				for_item428=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item428.Tree);
				DebugLocation(557, 58);
				// SugarCpp.g:557:58: ( ',' for_item )*
				try { DebugEnterSubRule(191);
				while (true)
				{
					int alt191=2;
					try { DebugEnterDecision(191, false);
					int LA191_0 = input.LA(1);

					if ((LA191_0==98))
					{
						alt191 = 1;
					}


					} finally { DebugExitDecision(191); }
					switch ( alt191 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:557:59: ',' for_item
						{
						DebugLocation(557, 59);
						char_literal429=(IToken)Match(input,98,Follow._98_in_list_expr4614); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal429);

						DebugLocation(557, 63);
						PushFollow(Follow._for_item_in_list_expr4616);
						for_item430=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item430.Tree);

						}
						break;

					default:
						goto loop191;
					}
				}

				loop191:
					;

				} finally { DebugExitSubRule(191); }

				DebugLocation(557, 74);
				char_literal431=(IToken)Match(input,131,Follow._131_in_list_expr4620); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal431);

				DebugLocation(557, 78);
				char_literal432=(IToken)Match(input,109,Follow._109_in_list_expr4622); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(char_literal432);

				DebugLocation(557, 82);
				PushFollow(Follow._type_name_in_list_expr4624);
				type_name433=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name433.Tree);


				{
				// AST REWRITE
				// elements: type_name, feed_expr, for_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 557:93: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(557, 96);
					// SugarCpp.g:557:96: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(557, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(557, 119);
					// SugarCpp.g:557:119: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(557, 119);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(557, 130);
					// SugarCpp.g:557:130: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(557, 132);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(557, 141);
					// SugarCpp.g:557:141: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(557, 141);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(557, 151);
					// SugarCpp.g:557:151: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(557, 153);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(557, 166);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:558:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(558, 4);
				char_literal434=(IToken)Match(input,130,Follow._130_in_list_expr4652); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal434);

				DebugLocation(558, 8);
				// SugarCpp.g:558:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?
				int alt195=2;
				try { DebugEnterSubRule(195);
				try { DebugEnterDecision(195, false);
				try
				{
					alt195 = dfa195.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(195); }
				switch (alt195)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:558:9: ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					{
					DebugLocation(558, 9);
					// SugarCpp.g:558:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(192);
					while (true)
					{
						int alt192=5;
						try { DebugEnterDecision(192, false);
						switch (input.LA(1))
						{
						case 98:
							{
							alt192 = 1;
							}
							break;
						case NEWLINE:
							{
							alt192 = 2;
							}
							break;
						case INDENT:
							{
							alt192 = 3;
							}
							break;
						case DEDENT:
							{
							alt192 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(192); }
						switch ( alt192 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:558:10: ','
							{
							DebugLocation(558, 10);
							char_literal435=(IToken)Match(input,98,Follow._98_in_list_expr4656); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal435);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:558:16: NEWLINE
							{
							DebugLocation(558, 16);
							NEWLINE436=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4660); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE436);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:558:26: INDENT
							{
							DebugLocation(558, 26);
							INDENT437=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4664); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT437);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:558:35: DEDENT
							{
							DebugLocation(558, 35);
							DEDENT438=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4668); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT438);


							}
							break;

						default:
							goto loop192;
						}
					}

					loop192:
						;

					} finally { DebugExitSubRule(192); }

					DebugLocation(558, 44);
					PushFollow(Follow._feed_expr_in_list_expr4672);
					feed_expr439=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr439.Tree);
					DebugLocation(558, 54);
					// SugarCpp.g:558:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					try { DebugEnterSubRule(194);
					while (true)
					{
						int alt194=2;
						try { DebugEnterDecision(194, false);
						try
						{
							alt194 = dfa194.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(194); }
						switch ( alt194 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:558:55: ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr
							{
							DebugLocation(558, 55);
							// SugarCpp.g:558:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt193=0;
							try { DebugEnterSubRule(193);
							while (true)
							{
								int alt193=5;
								try { DebugEnterDecision(193, false);
								switch (input.LA(1))
								{
								case 98:
									{
									alt193 = 1;
									}
									break;
								case NEWLINE:
									{
									alt193 = 2;
									}
									break;
								case INDENT:
									{
									alt193 = 3;
									}
									break;
								case DEDENT:
									{
									alt193 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(193); }
								switch (alt193)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:558:56: ','
									{
									DebugLocation(558, 56);
									char_literal440=(IToken)Match(input,98,Follow._98_in_list_expr4676); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_98.Add(char_literal440);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:558:62: NEWLINE
									{
									DebugLocation(558, 62);
									NEWLINE441=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4680); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE441);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:558:72: INDENT
									{
									DebugLocation(558, 72);
									INDENT442=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4684); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT442);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:558:81: DEDENT
									{
									DebugLocation(558, 81);
									DEDENT443=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4688); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT443);


									}
									break;

								default:
									if (cnt193 >= 1)
										goto loop193;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee193 = new EarlyExitException( 193, input );
									DebugRecognitionException(eee193);
									throw eee193;
								}
								cnt193++;
							}
							loop193:
								;

							} finally { DebugExitSubRule(193); }

							DebugLocation(558, 90);
							PushFollow(Follow._feed_expr_in_list_expr4692);
							feed_expr444=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr444.Tree);

							}
							break;

						default:
							goto loop194;
						}
					}

					loop194:
						;

					} finally { DebugExitSubRule(194); }


					}
					break;

				}
				} finally { DebugExitSubRule(195); }

				DebugLocation(558, 104);
				// SugarCpp.g:558:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(196);
				while (true)
				{
					int alt196=5;
					try { DebugEnterDecision(196, false);
					switch (input.LA(1))
					{
					case 98:
						{
						alt196 = 1;
						}
						break;
					case NEWLINE:
						{
						alt196 = 2;
						}
						break;
					case INDENT:
						{
						alt196 = 3;
						}
						break;
					case DEDENT:
						{
						alt196 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(196); }
					switch ( alt196 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:558:105: ','
						{
						DebugLocation(558, 105);
						char_literal445=(IToken)Match(input,98,Follow._98_in_list_expr4699); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal445);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:558:111: NEWLINE
						{
						DebugLocation(558, 111);
						NEWLINE446=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4703); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE446);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:558:121: INDENT
						{
						DebugLocation(558, 121);
						INDENT447=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4707); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT447);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:558:130: DEDENT
						{
						DebugLocation(558, 130);
						DEDENT448=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4711); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT448);


						}
						break;

					default:
						goto loop196;
					}
				}

				loop196:
					;

				} finally { DebugExitSubRule(196); }

				DebugLocation(558, 139);
				char_literal449=(IToken)Match(input,131,Follow._131_in_list_expr4715); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal449);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 558:143: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(558, 146);
					// SugarCpp.g:558:146: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(558, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(558, 158);
					// SugarCpp.g:558:158: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(558, 158);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:559:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(559, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4729);
				lambda_expr450=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr450.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 62);
			LeaveRule("list_expr", 62);
			LeaveRule_list_expr();
		}
		DebugLocation(560, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:562:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 63);
		TraceIn("lambda_value", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE452 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr451 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block453 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE452_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(562, 1);
		try
		{
			// SugarCpp.g:563:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt199=2;
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==IDENT||LA199_0==NUMBER||LA199_0==STRING||LA199_0==84||LA199_0==89||LA199_0==91||LA199_0==93||(LA199_0>=95 && LA199_0<=96)||(LA199_0>=99 && LA199_0<=100)||(LA199_0>=129 && LA199_0<=130)||LA199_0==152||LA199_0==155||(LA199_0>=157 && LA199_0<=158)||LA199_0==178))
			{
				alt199 = 1;
			}
			else if ((LA199_0==NEWLINE))
			{
				alt199 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 199, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:563:4: expr
				{
				DebugLocation(563, 4);
				PushFollow(Follow._expr_in_lambda_value4740);
				expr451=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr451.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 563:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(563, 12);
					// SugarCpp.g:563:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(563, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(563, 25);
					// SugarCpp.g:563:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(563, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(563, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:564:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(564, 4);
				// SugarCpp.g:564:4: ( NEWLINE )+
				int cnt198=0;
				try { DebugEnterSubRule(198);
				while (true)
				{
					int alt198=2;
					try { DebugEnterDecision(198, false);
					int LA198_0 = input.LA(1);

					if ((LA198_0==NEWLINE))
					{
						alt198 = 1;
					}


					} finally { DebugExitDecision(198); }
					switch (alt198)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:564:4: NEWLINE
						{
						DebugLocation(564, 4);
						NEWLINE452=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4757); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE452);


						}
						break;

					default:
						if (cnt198 >= 1)
							goto loop198;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee198 = new EarlyExitException( 198, input );
						DebugRecognitionException(eee198);
						throw eee198;
					}
					cnt198++;
				}
				loop198:
					;

				} finally { DebugExitSubRule(198); }

				DebugLocation(564, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4760);
				stmt_block453=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block453.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 564:24: -> stmt_block
				{
					DebugLocation(564, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 63);
			LeaveRule("lambda_value", 63);
			LeaveRule_lambda_value();
		}
		DebugLocation(565, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:567:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 64);
		TraceIn("lambda_type", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal454 = default(IToken);
		IToken char_literal456 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name455 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal454_tree = default(CommonTree);
		CommonTree char_literal456_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: '(' type_name ')'
			{
			DebugLocation(568, 4);
			char_literal454=(IToken)Match(input,91,Follow._91_in_lambda_type4775); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal454);

			DebugLocation(568, 8);
			PushFollow(Follow._type_name_in_lambda_type4777);
			type_name455=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name455.Tree);
			DebugLocation(568, 18);
			char_literal456=(IToken)Match(input,92,Follow._92_in_lambda_type4779); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal456);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 568:22: -> type_name
			{
				DebugLocation(568, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 64);
			LeaveRule("lambda_type", 64);
			LeaveRule_lambda_type();
		}
		DebugLocation(569, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:571:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 65);
		TraceIn("lambda_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal457 = default(IToken);
		IToken char_literal459 = default(IToken);
		IToken string_literal461 = default(IToken);
		IToken string_literal463 = default(IToken);
		IToken string_literal465 = default(IToken);
		IToken string_literal467 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args458 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type460 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value462 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value468 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr469 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal457_tree = default(CommonTree);
		CommonTree char_literal459_tree = default(CommonTree);
		CommonTree string_literal461_tree = default(CommonTree);
		CommonTree string_literal463_tree = default(CommonTree);
		CommonTree string_literal465_tree = default(CommonTree);
		CommonTree string_literal467_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(571, 1);
		try
		{
			// SugarCpp.g:572:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt203=2;
			try { DebugEnterDecision(203, false);
			try
			{
				alt203 = dfa203.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(203); }
			switch (alt203)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:572:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(572, 4);
				char_literal457=(IToken)Match(input,91,Follow._91_in_lambda_expr4794); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal457);

				DebugLocation(572, 8);
				// SugarCpp.g:572:8: ( func_args )?
				int alt200=2;
				try { DebugEnterSubRule(200);
				try { DebugEnterDecision(200, false);
				int LA200_0 = input.LA(1);

				if ((LA200_0==IDENT||LA200_0==111))
				{
					alt200 = 1;
				}
				} finally { DebugExitDecision(200); }
				switch (alt200)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:572:8: func_args
					{
					DebugLocation(572, 8);
					PushFollow(Follow._func_args_in_lambda_expr4796);
					func_args458=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args458.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(200); }

				DebugLocation(572, 19);
				char_literal459=(IToken)Match(input,92,Follow._92_in_lambda_expr4799); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal459);

				DebugLocation(572, 23);
				// SugarCpp.g:572:23: ( lambda_type )?
				int alt201=2;
				try { DebugEnterSubRule(201);
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==91))
				{
					alt201 = 1;
				}
				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:572:23: lambda_type
					{
					DebugLocation(572, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4801);
					lambda_type460=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type460.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(201); }

				DebugLocation(572, 36);
				// SugarCpp.g:572:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt202=4;
				try { DebugEnterSubRule(202);
				try { DebugEnterDecision(202, false);
				switch (input.LA(1))
				{
				case 103:
					{
					alt202 = 1;
					}
					break;
				case 122:
					{
					alt202 = 2;
					}
					break;
				case 101:
					{
					alt202 = 3;
					}
					break;
				case 121:
					{
					alt202 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 202, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(202); }
				switch (alt202)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:572:38: '->' lambda_value
					{
					DebugLocation(572, 38);
					string_literal461=(IToken)Match(input,103,Follow._103_in_lambda_expr4806); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal461);

					DebugLocation(572, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4808);
					lambda_value462=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value462.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, 103, func_args, lambda_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 572:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(572, 60);
						// SugarCpp.g:572:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(572, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(572, 74);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(572, 79);
						// SugarCpp.g:572:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(572, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(572, 90);
						// SugarCpp.g:572:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(572, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(572, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:573:17: '=>' lambda_value
					{
					DebugLocation(573, 17);
					string_literal463=(IToken)Match(input,122,Follow._122_in_lambda_expr4843); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_122.Add(string_literal463);

					DebugLocation(573, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr4845);
					lambda_value464=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value464.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, func_args, lambda_type, 122
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 573:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(573, 39);
						// SugarCpp.g:573:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(573, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(573, 53);
						adaptor.AddChild(root_1, stream_122.NextNode());
						DebugLocation(573, 58);
						// SugarCpp.g:573:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(573, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(573, 69);
						// SugarCpp.g:573:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(573, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(573, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:574:14: '-->' lambda_value
					{
					DebugLocation(574, 14);
					string_literal465=(IToken)Match(input,101,Follow._101_in_lambda_expr4877); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal465);

					DebugLocation(574, 20);
					PushFollow(Follow._lambda_value_in_lambda_expr4879);
					lambda_value466=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value466.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, lambda_value, func_args, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 574:34: -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(574, 37);
						// SugarCpp.g:574:37: ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(574, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(574, 51);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(574, 57);
						// SugarCpp.g:574:57: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(574, 57);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(574, 68);
						// SugarCpp.g:574:68: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(574, 68);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(574, 81);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:575:17: '==>' lambda_value
					{
					DebugLocation(575, 17);
					string_literal467=(IToken)Match(input,121,Follow._121_in_lambda_expr4914); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_121.Add(string_literal467);

					DebugLocation(575, 23);
					PushFollow(Follow._lambda_value_in_lambda_expr4916);
					lambda_value468=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value468.Tree);


					{
					// AST REWRITE
					// elements: 121, func_args, lambda_value, lambda_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 575:37: -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(575, 40);
						// SugarCpp.g:575:40: ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(575, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(575, 54);
						adaptor.AddChild(root_1, stream_121.NextNode());
						DebugLocation(575, 60);
						// SugarCpp.g:575:60: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(575, 60);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(575, 71);
						// SugarCpp.g:575:71: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(575, 71);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(575, 84);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(202); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:577:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(577, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4951);
				modify_expr469=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr469.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 65);
			LeaveRule("lambda_expr", 65);
			LeaveRule_lambda_expr();
		}
		DebugLocation(578, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:580:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 66);
		TraceIn("modify_expr_op", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set470 = default(IToken);

		CommonTree set470_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(580, 91);
		try
		{
			// SugarCpp.g:580:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(580, 15);

			set470=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==97||input.LA(1)==102||input.LA(1)==108||input.LA(1)==116||input.LA(1)==119||input.LA(1)==126||input.LA(1)==133||input.LA(1)==175)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set470));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 66);
			LeaveRule("modify_expr_op", 66);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(580, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:581:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 67);
		TraceIn("modify_expr", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set472 = default(IToken);
		IToken char_literal474 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr471 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr473 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr475 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set472_tree = default(CommonTree);
		CommonTree char_literal474_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(581, 1);
		try
		{
			// SugarCpp.g:582:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:582:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(582, 4);
			PushFollow(Follow._cond_expr_in_modify_expr5008);
			cond_expr471=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr471.Tree);
			DebugLocation(582, 14);
			// SugarCpp.g:582:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt205=3;
			try { DebugEnterSubRule(205);
			try { DebugEnterDecision(205, false);
			int LA205_0 = input.LA(1);

			if ((LA205_0==87||LA205_0==90||LA205_0==94||LA205_0==97||LA205_0==102||LA205_0==108||LA205_0==111||LA205_0==116||LA205_0==126||LA205_0==133||LA205_0==175))
			{
				alt205 = 1;
			}
			else if ((LA205_0==119))
			{
				alt205 = 2;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:582:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(582, 94);

				set472=(IToken)input.LT(1);
				set472=(IToken)input.LT(1);
				if (input.LA(1)==87||input.LA(1)==90||input.LA(1)==94||input.LA(1)==97||input.LA(1)==102||input.LA(1)==108||input.LA(1)==111||input.LA(1)==116||input.LA(1)==126||input.LA(1)==133||input.LA(1)==175)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set472), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(582, 96);
				PushFollow(Follow._cond_expr_in_modify_expr5057);
				cond_expr473=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr473.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:583:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(583, 7);
				// SugarCpp.g:583:7: ( '=' ^ cond_expr )+
				int cnt204=0;
				try { DebugEnterSubRule(204);
				while (true)
				{
					int alt204=2;
					try { DebugEnterDecision(204, false);
					int LA204_0 = input.LA(1);

					if ((LA204_0==119))
					{
						alt204 = 1;
					}


					} finally { DebugExitDecision(204); }
					switch (alt204)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:583:8: '=' ^ cond_expr
						{
						DebugLocation(583, 11);
						char_literal474=(IToken)Match(input,119,Follow._119_in_modify_expr5066); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal474_tree = (CommonTree)adaptor.Create(char_literal474);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal474_tree, root_0);
						}
						DebugLocation(583, 13);
						PushFollow(Follow._cond_expr_in_modify_expr5069);
						cond_expr475=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr475.Tree);

						}
						break;

					default:
						if (cnt204 >= 1)
							goto loop204;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee204 = new EarlyExitException( 204, input );
						DebugRecognitionException(eee204);
						throw eee204;
					}
					cnt204++;
				}
				loop204:
					;

				} finally { DebugExitSubRule(204); }


				}
				break;

			}
			} finally { DebugExitSubRule(205); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 67);
			LeaveRule("modify_expr", 67);
			LeaveRule_modify_expr();
		}
		DebugLocation(584, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:586:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 68);
		TraceIn("cond_expr_item", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr476 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(586, 24);
		try
		{
			// SugarCpp.g:586:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:586:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(586, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item5082);
			or_expr476=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr476.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 68);
			LeaveRule("cond_expr_item", 68);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(586, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:587:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 69);
		TraceIn("cond_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal477 = default(IToken);
		IToken char_literal478 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal477_tree = default(CommonTree);
		CommonTree char_literal478_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(587, 1);
		try
		{
			// SugarCpp.g:588:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:588:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(588, 4);
			// SugarCpp.g:588:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:588:5: a= or_expr
			{
			DebugLocation(588, 6);
			PushFollow(Follow._or_expr_in_cond_expr5094);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 588:15: -> $a
			{
				DebugLocation(588, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(588, 22);
			// SugarCpp.g:588:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt208=2;
			try { DebugEnterSubRule(208);
			try { DebugEnterDecision(208, false);
			int LA208_0 = input.LA(1);

			if ((LA208_0==127))
			{
				alt208 = 1;
			}
			} finally { DebugExitDecision(208); }
			switch (alt208)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:588:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(588, 23);
				char_literal477=(IToken)Match(input,127,Follow._127_in_cond_expr5103); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(char_literal477);

				DebugLocation(588, 27);
				// SugarCpp.g:588:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt207=2;
				try { DebugEnterSubRule(207);
				try { DebugEnterDecision(207, false);
				int LA207_0 = input.LA(1);

				if ((LA207_0==IDENT||LA207_0==NUMBER||LA207_0==STRING||LA207_0==84||LA207_0==89||LA207_0==91||LA207_0==93||(LA207_0>=95 && LA207_0<=96)||(LA207_0>=99 && LA207_0<=100)||LA207_0==129||(LA207_0>=157 && LA207_0<=158)||LA207_0==178))
				{
					alt207 = 1;
				}
				else if ((LA207_0==DEDENT||LA207_0==INDENT||LA207_0==NEWLINE||LA207_0==87||LA207_0==90||LA207_0==92||LA207_0==94||(LA207_0>=97 && LA207_0<=98)||LA207_0==102||LA207_0==108||(LA207_0>=111 && LA207_0<=112)||LA207_0==116||(LA207_0>=118 && LA207_0<=119)||LA207_0==122||LA207_0==126||LA207_0==131||LA207_0==133||LA207_0==136||LA207_0==142||(LA207_0>=146 && LA207_0<=147)||LA207_0==149||(LA207_0>=164 && LA207_0<=165)||(LA207_0>=168 && LA207_0<=169)||(LA207_0>=172 && LA207_0<=173)||(LA207_0>=175 && LA207_0<=176)))
				{
					alt207 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 207, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(207); }
				switch (alt207)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:588:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(588, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr5109);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(588, 46);
					// SugarCpp.g:588:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt206=2;
					try { DebugEnterSubRule(206);
					try { DebugEnterDecision(206, false);
					int LA206_0 = input.LA(1);

					if ((LA206_0==109))
					{
						alt206 = 1;
					}
					else if ((LA206_0==DEDENT||LA206_0==INDENT||LA206_0==NEWLINE||LA206_0==87||LA206_0==90||LA206_0==92||LA206_0==94||(LA206_0>=97 && LA206_0<=98)||LA206_0==102||LA206_0==108||(LA206_0>=111 && LA206_0<=112)||LA206_0==116||(LA206_0>=118 && LA206_0<=119)||LA206_0==122||LA206_0==126||LA206_0==131||LA206_0==133||LA206_0==136||LA206_0==142||(LA206_0>=146 && LA206_0<=147)||LA206_0==149||(LA206_0>=164 && LA206_0<=165)||(LA206_0>=168 && LA206_0<=169)||(LA206_0>=172 && LA206_0<=173)||(LA206_0>=175 && LA206_0<=176)))
					{
						alt206 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 206, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(206); }
					switch (alt206)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:588:48: ':' b= cond_expr_item
						{
						DebugLocation(588, 48);
						char_literal478=(IToken)Match(input,109,Follow._109_in_cond_expr5113); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_109.Add(char_literal478);

						DebugLocation(588, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr5117);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, cond_expr, b
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 588:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(588, 72);
							// SugarCpp.g:588:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(588, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(588, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(588, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(588, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:589:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 589:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(589, 20);
							// SugarCpp.g:589:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(589, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(589, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(589, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(206); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:591:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 591:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(591, 14);
						// SugarCpp.g:591:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(591, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(591, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(207); }


				}
				break;

			}
			} finally { DebugExitSubRule(208); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 69);
			LeaveRule("cond_expr", 69);
			LeaveRule_cond_expr();
		}
		DebugLocation(593, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:595:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 70);
		TraceIn("or_op", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set479 = default(IToken);

		CommonTree set479_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(595, 19);
		try
		{
			// SugarCpp.g:595:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(595, 6);

			set479=(IToken)input.LT(1);
			if (input.LA(1)==159||input.LA(1)==177)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set479));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 70);
			LeaveRule("or_op", 70);
			LeaveRule_or_op();
		}
		DebugLocation(595, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:596:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 71);
		TraceIn("or_expr", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(596, 1);
		try
		{
			// SugarCpp.g:597:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:597:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(597, 4);
			// SugarCpp.g:597:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:597:5: a= and_expr
			{
			DebugLocation(597, 6);
			PushFollow(Follow._and_expr_in_or_expr5231);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 597:16: -> $a
			{
				DebugLocation(597, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(597, 23);
			// SugarCpp.g:597:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(209);
			while (true)
			{
				int alt209=2;
				try { DebugEnterDecision(209, false);
				int LA209_0 = input.LA(1);

				if ((LA209_0==159||LA209_0==177))
				{
					alt209 = 1;
				}


				} finally { DebugExitDecision(209); }
				switch ( alt209 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:597:24: op= or_op b= and_expr
					{
					DebugLocation(597, 26);
					PushFollow(Follow._or_op_in_or_expr5242);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(597, 34);
					PushFollow(Follow._and_expr_in_or_expr5246);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op, or_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 597:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(597, 47);
						// SugarCpp.g:597:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(597, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(597, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(597, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(597, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop209;
				}
			}

			loop209:
				;

			} finally { DebugExitSubRule(209); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 71);
			LeaveRule("or_expr", 71);
			LeaveRule_or_expr();
		}
		DebugLocation(598, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:600:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 72);
		TraceIn("and_op", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set480 = default(IToken);

		CommonTree set480_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(600, 21);
		try
		{
			// SugarCpp.g:600:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(600, 7);

			set480=(IToken)input.LT(1);
			if (input.LA(1)==88||input.LA(1)==135)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set480));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 72);
			LeaveRule("and_op", 72);
			LeaveRule_and_op();
		}
		DebugLocation(600, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:601:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 73);
		TraceIn("and_expr", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(601, 1);
		try
		{
			// SugarCpp.g:602:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:602:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(602, 4);
			// SugarCpp.g:602:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:602:5: a= bit_or
			{
			DebugLocation(602, 6);
			PushFollow(Follow._bit_or_in_and_expr5288);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 602:14: -> $a
			{
				DebugLocation(602, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(602, 21);
			// SugarCpp.g:602:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(210);
			while (true)
			{
				int alt210=2;
				try { DebugEnterDecision(210, false);
				int LA210_0 = input.LA(1);

				if ((LA210_0==88||LA210_0==135))
				{
					alt210 = 1;
				}


				} finally { DebugExitDecision(210); }
				switch ( alt210 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:602:22: op= and_op b= bit_or
					{
					DebugLocation(602, 24);
					PushFollow(Follow._and_op_in_and_expr5299);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(602, 33);
					PushFollow(Follow._bit_or_in_and_expr5303);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, and_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 602:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(602, 44);
						// SugarCpp.g:602:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(602, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(602, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(602, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(602, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop210;
				}
			}

			loop210:
				;

			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 73);
			LeaveRule("and_expr", 73);
			LeaveRule_and_expr();
		}
		DebugLocation(603, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:605:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 74);
		TraceIn("bit_or", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal481 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal481_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(605, 1);
		try
		{
			// SugarCpp.g:606:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:606:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(606, 4);
			// SugarCpp.g:606:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:606:5: a= bit_xor
			{
			DebugLocation(606, 6);
			PushFollow(Follow._bit_xor_in_bit_or5334);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 606:15: -> $a
			{
				DebugLocation(606, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(606, 22);
			// SugarCpp.g:606:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=2;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==174))
				{
					alt211 = 1;
				}


				} finally { DebugExitDecision(211); }
				switch ( alt211 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:606:23: '|' b= bit_xor
					{
					DebugLocation(606, 23);
					char_literal481=(IToken)Match(input,174,Follow._174_in_bit_or5343); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_174.Add(char_literal481);

					DebugLocation(606, 28);
					PushFollow(Follow._bit_xor_in_bit_or5347);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_or, 174
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 606:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(606, 40);
						// SugarCpp.g:606:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(606, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(606, 51);
						adaptor.AddChild(root_1, stream_174.NextNode());
						DebugLocation(606, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(606, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop211;
				}
			}

			loop211:
				;

			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 74);
			LeaveRule("bit_or", 74);
			LeaveRule_bit_or();
		}
		DebugLocation(607, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:609:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 75);
		TraceIn("bit_xor", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal482 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal482_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(609, 1);
		try
		{
			// SugarCpp.g:610:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:610:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(610, 4);
			// SugarCpp.g:610:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:610:5: a= bit_and
			{
			DebugLocation(610, 6);
			PushFollow(Follow._bit_and_in_bit_xor5377);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 610:15: -> $a
			{
				DebugLocation(610, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(610, 22);
			// SugarCpp.g:610:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=2;
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==132))
				{
					alt212 = 1;
				}


				} finally { DebugExitDecision(212); }
				switch ( alt212 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:610:23: '^' b= bit_and
					{
					DebugLocation(610, 23);
					char_literal482=(IToken)Match(input,132,Follow._132_in_bit_xor5386); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal482);

					DebugLocation(610, 28);
					PushFollow(Follow._bit_and_in_bit_xor5390);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 132, b, bit_xor
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(610, 40);
						// SugarCpp.g:610:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(610, 51);
						adaptor.AddChild(root_1, stream_132.NextNode());
						DebugLocation(610, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(610, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop212;
				}
			}

			loop212:
				;

			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 75);
			LeaveRule("bit_xor", 75);
			LeaveRule_bit_xor();
		}
		DebugLocation(611, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:613:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 76);
		TraceIn("bit_and", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal483 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal483_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(613, 1);
		try
		{
			// SugarCpp.g:614:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:614:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(614, 4);
			// SugarCpp.g:614:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:614:5: a= cmp_expr
			{
			DebugLocation(614, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5420);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 614:16: -> $a
			{
				DebugLocation(614, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(614, 23);
			// SugarCpp.g:614:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=2;
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==89))
				{
					alt213 = 1;
				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:614:24: '&' b= cmp_expr
					{
					DebugLocation(614, 24);
					char_literal483=(IToken)Match(input,89,Follow._89_in_bit_and5429); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_89.Add(char_literal483);

					DebugLocation(614, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5433);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, 89, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 614:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(614, 42);
						// SugarCpp.g:614:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(614, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(614, 53);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(614, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(614, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 76);
			LeaveRule("bit_and", 76);
			LeaveRule_bit_and();
		}
		DebugLocation(615, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:617:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 77);
		TraceIn("chain_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set484 = default(IToken);

		CommonTree set484_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(617, 64);
		try
		{
			// SugarCpp.g:617:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(617, 9);

			set484=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==113||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=123 && input.LA(1)<=124)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set484));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 77);
			LeaveRule("chain_op", 77);
			LeaveRule_chain_op();
		}
		DebugLocation(617, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:618:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 78);
		TraceIn("no_less_op", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set485 = default(IToken);

		CommonTree set485_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(618, 60);
		try
		{
			// SugarCpp.g:618:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(618, 11);

			set485=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==117||input.LA(1)==120||(input.LA(1)>=123 && input.LA(1)<=124)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set485));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 78);
			LeaveRule("no_less_op", 78);
			LeaveRule_no_less_op();
		}
		DebugLocation(618, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:619:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 79);
		TraceIn("chain_list", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op486 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr487 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(619, 35);
		try
		{
			// SugarCpp.g:619:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:619:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(619, 13);
			// SugarCpp.g:619:13: ( chain_op shift_expr )+
			int cnt214=0;
			try { DebugEnterSubRule(214);
			while (true)
			{
				int alt214=2;
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==85||LA214_0==113||LA214_0==117||LA214_0==120||(LA214_0>=123 && LA214_0<=124)||(LA214_0>=150 && LA214_0<=151)))
				{
					alt214 = 1;
				}


				} finally { DebugExitDecision(214); }
				switch (alt214)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:619:14: chain_op shift_expr
					{
					DebugLocation(619, 14);
					PushFollow(Follow._chain_op_in_chain_list5525);
					chain_op486=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op486.Tree);
					DebugLocation(619, 23);
					PushFollow(Follow._shift_expr_in_chain_list5527);
					shift_expr487=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr487.Tree);

					}
					break;

				default:
					if (cnt214 >= 1)
						goto loop214;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee214 = new EarlyExitException( 214, input );
					DebugRecognitionException(eee214);
					throw eee214;
				}
				cnt214++;
			}
			loop214:
				;

			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 79);
			LeaveRule("chain_list", 79);
			LeaveRule_chain_list();
		}
		DebugLocation(619, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:620:1: cmp_expr : (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 80);
		TraceIn("cmp_expr", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal488 = default(IToken);
		IToken char_literal490 = default(IToken);
		IToken char_literal492 = default(IToken);
		IToken char_literal494 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident489 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list493 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list496 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal488_tree = default(CommonTree);
		CommonTree char_literal490_tree = default(CommonTree);
		CommonTree char_literal492_tree = default(CommonTree);
		CommonTree char_literal494_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(620, 1);
		try
		{
			// SugarCpp.g:621:2: ( (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:621:4: (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(621, 4);
			// SugarCpp.g:621:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:621:5: a= shift_expr
			{
			DebugLocation(621, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5541);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 621:18: -> $a
			{
				DebugLocation(621, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(621, 25);
			// SugarCpp.g:621:25: ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt218=4;
			try { DebugEnterSubRule(218);
			try { DebugEnterDecision(218, false);
			int LA218_0 = input.LA(1);

			if ((LA218_0==113))
			{
				int LA218_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt218 = 1;
				}
				else if ((true))
				{
					alt218 = 2;
				}
			}
			else if ((LA218_0==85||LA218_0==117||LA218_0==120||(LA218_0>=123 && LA218_0<=124)||(LA218_0>=150 && LA218_0<=151)))
			{
				alt218 = 3;
			}
			} finally { DebugExitDecision(218); }
			switch (alt218)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:621:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list
				{
				DebugLocation(621, 77);
				char_literal488=(IToken)Match(input,113,Follow._113_in_cmp_expr5570); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(char_literal488);

				DebugLocation(621, 81);
				PushFollow(Follow._ident_in_cmp_expr5572);
				ident489=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident489.Tree);
				DebugLocation(621, 87);
				// SugarCpp.g:621:87: ( ',' ident )*
				try { DebugEnterSubRule(215);
				while (true)
				{
					int alt215=2;
					try { DebugEnterDecision(215, false);
					int LA215_0 = input.LA(1);

					if ((LA215_0==98))
					{
						alt215 = 1;
					}


					} finally { DebugExitDecision(215); }
					switch ( alt215 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:621:88: ',' ident
						{
						DebugLocation(621, 88);
						char_literal490=(IToken)Match(input,98,Follow._98_in_cmp_expr5575); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal490);

						DebugLocation(621, 92);
						PushFollow(Follow._ident_in_cmp_expr5577);
						ident491=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident491.Tree);

						}
						break;

					default:
						goto loop215;
					}
				}

				loop215:
					;

				} finally { DebugExitSubRule(215); }

				DebugLocation(621, 100);
				char_literal492=(IToken)Match(input,123,Follow._123_in_cmp_expr5581); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal492);

				DebugLocation(621, 104);
				PushFollow(Follow._bracket_expr_list_in_cmp_expr5583);
				bracket_expr_list493=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list493.Tree);


				{
				// AST REWRITE
				// elements: bracket_expr_list, ident, cmp_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 621:122: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
				{
					DebugLocation(621, 125);
					// SugarCpp.g:621:125: ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(621, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(621, 138);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(621, 147);
					// SugarCpp.g:621:147: ^( Generic_Patameters ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(621, 149);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

					DebugLocation(621, 168);
					// SugarCpp.g:621:168: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(621, 168);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(621, 176);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:622:12: '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(622, 12);
				char_literal494=(IToken)Match(input,113,Follow._113_in_cmp_expr5614); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(char_literal494);

				DebugLocation(622, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr5618);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(622, 29);
				// SugarCpp.g:622:29: ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt216=2;
				try { DebugEnterSubRule(216);
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==85||LA216_0==113||LA216_0==117||LA216_0==120||(LA216_0>=123 && LA216_0<=124)||(LA216_0>=150 && LA216_0<=151)))
				{
					alt216 = 1;
				}
				else if ((LA216_0==DEDENT||LA216_0==INDENT||LA216_0==NEWLINE||(LA216_0>=87 && LA216_0<=90)||LA216_0==92||LA216_0==94||(LA216_0>=97 && LA216_0<=98)||LA216_0==102||(LA216_0>=108 && LA216_0<=109)||(LA216_0>=111 && LA216_0<=112)||LA216_0==116||(LA216_0>=118 && LA216_0<=119)||LA216_0==122||(LA216_0>=126 && LA216_0<=127)||(LA216_0>=131 && LA216_0<=133)||(LA216_0>=135 && LA216_0<=136)||LA216_0==142||(LA216_0>=146 && LA216_0<=147)||LA216_0==149||LA216_0==159||(LA216_0>=164 && LA216_0<=165)||(LA216_0>=168 && LA216_0<=169)||(LA216_0>=172 && LA216_0<=177)))
				{
					alt216 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 216, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(216); }
				switch (alt216)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:622:31: chain_list
					{
					DebugLocation(622, 31);
					PushFollow(Follow._chain_list_in_cmp_expr5622);
					chain_list495=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list495.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, 113, chain_list, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 622:42: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(622, 45);
						// SugarCpp.g:622:45: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(622, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(622, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(622, 69);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(622, 74);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(622, 76);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:623:16: 
					{

					{
					// AST REWRITE
					// elements: 113, cmp_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 623:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(623, 19);
						// SugarCpp.g:623:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(623, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(623, 30);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(623, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(623, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(216); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:624:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(624, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5699);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(624, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5703);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(624, 54);
				// SugarCpp.g:624:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt217=2;
				try { DebugEnterSubRule(217);
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==85||LA217_0==113||LA217_0==117||LA217_0==120||(LA217_0>=123 && LA217_0<=124)||(LA217_0>=150 && LA217_0<=151)))
				{
					alt217 = 1;
				}
				else if ((LA217_0==DEDENT||LA217_0==INDENT||LA217_0==NEWLINE||(LA217_0>=87 && LA217_0<=90)||LA217_0==92||LA217_0==94||(LA217_0>=97 && LA217_0<=98)||LA217_0==102||(LA217_0>=108 && LA217_0<=109)||(LA217_0>=111 && LA217_0<=112)||LA217_0==116||(LA217_0>=118 && LA217_0<=119)||LA217_0==122||(LA217_0>=126 && LA217_0<=127)||(LA217_0>=131 && LA217_0<=133)||(LA217_0>=135 && LA217_0<=136)||LA217_0==142||(LA217_0>=146 && LA217_0<=147)||LA217_0==149||LA217_0==159||(LA217_0>=164 && LA217_0<=165)||(LA217_0>=168 && LA217_0<=169)||(LA217_0>=172 && LA217_0<=177)))
				{
					alt217 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 217, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(217); }
				switch (alt217)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:624:56: chain_list
					{
					DebugLocation(624, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5707);
					chain_list496=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list496.Tree);


					{
					// AST REWRITE
					// elements: op, cmp_expr, b, chain_list
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 624:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(624, 70);
						// SugarCpp.g:624:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(624, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(624, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(624, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(624, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(624, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:625:17: 
					{

					{
					// AST REWRITE
					// elements: cmp_expr, op, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 625:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(625, 20);
						// SugarCpp.g:625:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(625, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(625, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(625, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(625, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(217); }


				}
				break;

			}
			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 80);
			LeaveRule("cmp_expr", 80);
			LeaveRule_cmp_expr();
		}
		DebugLocation(628, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:630:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 81);
		TraceIn("shift_expr_op", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set497 = default(IToken);

		CommonTree set497_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(630, 27);
		try
		{
			// SugarCpp.g:630:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(630, 14);

			set497=(IToken)input.LT(1);
			if (input.LA(1)==115||input.LA(1)==125)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set497));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 81);
			LeaveRule("shift_expr_op", 81);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(630, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:631:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 82);
		TraceIn("shift_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op498 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(631, 1);
		try
		{
			// SugarCpp.g:632:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:632:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(632, 4);
			// SugarCpp.g:632:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:632:5: a= add_expr
			{
			DebugLocation(632, 6);
			PushFollow(Follow._add_expr_in_shift_expr5809);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 632:16: -> $a
			{
				DebugLocation(632, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(632, 23);
			// SugarCpp.g:632:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(219);
			while (true)
			{
				int alt219=2;
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==115||LA219_0==125))
				{
					alt219 = 1;
				}


				} finally { DebugExitDecision(219); }
				switch ( alt219 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:632:24: shift_expr_op b= add_expr
					{
					DebugLocation(632, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5818);
					shift_expr_op498=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op498.Tree);
					DebugLocation(632, 39);
					PushFollow(Follow._add_expr_in_shift_expr5822);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, b, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 632:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(632, 52);
						// SugarCpp.g:632:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(632, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(632, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(632, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(632, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop219;
				}
			}

			loop219:
				;

			} finally { DebugExitSubRule(219); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 82);
			LeaveRule("shift_expr", 82);
			LeaveRule_shift_expr();
		}
		DebugLocation(633, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:635:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 83);
		TraceIn("add_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal499 = default(IToken);
		IToken char_literal500 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal499_tree = default(CommonTree);
		CommonTree char_literal500_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(635, 1);
		try
		{
			// SugarCpp.g:636:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:636:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(636, 4);
			// SugarCpp.g:636:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:636:5: a= mul_expr
			{
			DebugLocation(636, 6);
			PushFollow(Follow._mul_expr_in_add_expr5852);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 636:16: -> $a
			{
				DebugLocation(636, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(636, 23);
			// SugarCpp.g:636:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(220);
			while (true)
			{
				int alt220=3;
				try { DebugEnterDecision(220, false);
				int LA220_0 = input.LA(1);

				if ((LA220_0==95))
				{
					alt220 = 1;
				}
				else if ((LA220_0==99))
				{
					alt220 = 2;
				}


				} finally { DebugExitDecision(220); }
				switch ( alt220 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:636:25: '+' b= mul_expr
					{
					DebugLocation(636, 25);
					char_literal499=(IToken)Match(input,95,Follow._95_in_add_expr5862); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal499);

					DebugLocation(636, 30);
					PushFollow(Follow._mul_expr_in_add_expr5866);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 95, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 636:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(636, 43);
						// SugarCpp.g:636:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(636, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(636, 54);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(636, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(636, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:637:10: '-' b= mul_expr
					{
					DebugLocation(637, 10);
					char_literal500=(IToken)Match(input,99,Follow._99_in_add_expr5891); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal500);

					DebugLocation(637, 15);
					PushFollow(Follow._mul_expr_in_add_expr5895);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 99
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 637:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(637, 28);
						// SugarCpp.g:637:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(637, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(637, 39);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(637, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(637, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop220;
				}
			}

			loop220:
				;

			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 83);
			LeaveRule("add_expr", 83);
			LeaveRule_add_expr();
		}
		DebugLocation(639, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:641:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 84);
		TraceIn("mul_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal501 = default(IToken);
		IToken char_literal502 = default(IToken);
		IToken char_literal503 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal501_tree = default(CommonTree);
		CommonTree char_literal502_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(641, 1);
		try
		{
			// SugarCpp.g:642:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:642:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(642, 4);
			// SugarCpp.g:642:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:642:5: a= infix_expr
			{
			DebugLocation(642, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5933);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 642:18: -> $a
			{
				DebugLocation(642, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(642, 25);
			// SugarCpp.g:642:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=4;
				try { DebugEnterDecision(221, false);
				switch (input.LA(1))
				{
				case 93:
					{
					alt221 = 1;
					}
					break;
				case 107:
					{
					alt221 = 2;
					}
					break;
				case 86:
					{
					alt221 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:642:27: '*' b= infix_expr
					{
					DebugLocation(642, 27);
					char_literal501=(IToken)Match(input,93,Follow._93_in_mul_expr5943); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal501);

					DebugLocation(642, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5947);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 93, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 642:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(642, 47);
						// SugarCpp.g:642:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(642, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(642, 58);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(642, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(642, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:643:12: '/' b= infix_expr
					{
					DebugLocation(643, 12);
					char_literal502=(IToken)Match(input,107,Follow._107_in_mul_expr5974); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal502);

					DebugLocation(643, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5978);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 107, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 643:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(643, 32);
						// SugarCpp.g:643:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(643, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(643, 43);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(643, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(643, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:644:12: '%' b= infix_expr
					{
					DebugLocation(644, 12);
					char_literal503=(IToken)Match(input,86,Follow._86_in_mul_expr6005); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_86.Add(char_literal503);

					DebugLocation(644, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6009);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 86, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 644:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(644, 32);
						// SugarCpp.g:644:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(644, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(644, 43);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(644, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(644, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 84);
			LeaveRule("mul_expr", 84);
			LeaveRule_mul_expr();
		}
		DebugLocation(646, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:648:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 85);
		TraceIn("infix_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func504 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(648, 1);
		try
		{
			// SugarCpp.g:649:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:649:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(649, 4);
			// SugarCpp.g:649:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:649:5: a= selector_expr
			{
			DebugLocation(649, 6);
			PushFollow(Follow._selector_expr_in_infix_expr6049);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 649:21: -> $a
			{
				DebugLocation(649, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(649, 28);
			// SugarCpp.g:649:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(222);
			while (true)
			{
				int alt222=2;
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==134))
				{
					alt222 = 1;
				}


				} finally { DebugExitDecision(222); }
				switch ( alt222 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:649:30: infix_func b= selector_expr
					{
					DebugLocation(649, 30);
					PushFollow(Follow._infix_func_in_infix_expr6059);
					infix_func504=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func504.Tree);
					DebugLocation(649, 42);
					PushFollow(Follow._selector_expr_in_infix_expr6063);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, infix_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 649:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(649, 61);
						// SugarCpp.g:649:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(649, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(649, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(649, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(649, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop222;
				}
			}

			loop222:
				;

			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 85);
			LeaveRule("infix_expr", 85);
			LeaveRule_infix_expr();
		}
		DebugLocation(650, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:652:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 86);
		TraceIn("selector_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal505 = default(IToken);
		IToken string_literal506 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal505_tree = default(CommonTree);
		CommonTree string_literal506_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(652, 1);
		try
		{
			// SugarCpp.g:653:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:653:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(653, 4);
			// SugarCpp.g:653:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:653:5: a= cast_expr
			{
			DebugLocation(653, 6);
			PushFollow(Follow._cast_expr_in_selector_expr6095);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 653:17: -> $a
			{
				DebugLocation(653, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(653, 24);
			// SugarCpp.g:653:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=3;
				try { DebugEnterDecision(223, false);
				int LA223_0 = input.LA(1);

				if ((LA223_0==104))
				{
					alt223 = 1;
				}
				else if ((LA223_0==106))
				{
					alt223 = 2;
				}


				} finally { DebugExitDecision(223); }
				switch ( alt223 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:653:26: '->*' b= ident
					{
					DebugLocation(653, 26);
					string_literal505=(IToken)Match(input,104,Follow._104_in_selector_expr6105); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal505);

					DebugLocation(653, 33);
					PushFollow(Follow._ident_in_selector_expr6109);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 104, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 653:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(653, 43);
						// SugarCpp.g:653:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(653, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(653, 57);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(653, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(653, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:654:11: '.*' b= ident
					{
					DebugLocation(654, 11);
					string_literal506=(IToken)Match(input,106,Follow._106_in_selector_expr6135); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(string_literal506);

					DebugLocation(654, 18);
					PushFollow(Follow._ident_in_selector_expr6140);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 106, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 654:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(654, 28);
						// SugarCpp.g:654:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(654, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(654, 42);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(654, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(654, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop223;
				}
			}

			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 86);
			LeaveRule("selector_expr", 86);
			LeaveRule_selector_expr();
		}
		DebugLocation(656, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:658:1: cast_expr : ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 87);
		TraceIn("cast_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal507 = default(IToken);
		IToken char_literal509 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name508 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr510 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr511 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal507_tree = default(CommonTree);
		CommonTree char_literal509_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(658, 1);
		try
		{
			// SugarCpp.g:659:2: ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt224=2;
			try { DebugEnterDecision(224, false);
			int LA224_0 = input.LA(1);

			if ((LA224_0==91))
			{
				int LA224_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_SugarCpp_fragment)))
				{
					alt224 = 1;
				}
				else if ((true))
				{
					alt224 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 224, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA224_0==IDENT||LA224_0==NUMBER||LA224_0==STRING||LA224_0==84||LA224_0==89||LA224_0==93||(LA224_0>=95 && LA224_0<=96)||(LA224_0>=99 && LA224_0<=100)||LA224_0==129||(LA224_0>=157 && LA224_0<=158)||LA224_0==178))
			{
				alt224 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 224, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(224); }
			switch (alt224)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:659:4: ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr
				{
				DebugLocation(659, 39);
				char_literal507=(IToken)Match(input,91,Follow._91_in_cast_expr6189); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal507);

				DebugLocation(659, 43);
				PushFollow(Follow._type_name_in_cast_expr6191);
				type_name508=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name508.Tree);
				DebugLocation(659, 53);
				char_literal509=(IToken)Match(input,92,Follow._92_in_cast_expr6193); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal509);

				DebugLocation(659, 57);
				PushFollow(Follow._prefix_expr_in_cast_expr6195);
				prefix_expr510=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr510.Tree);


				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 659:69: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(659, 72);
					// SugarCpp.g:659:72: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(659, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(659, 84);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(659, 94);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:660:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(660, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr6210);
				prefix_expr511=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr511.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 87);
			LeaveRule("cast_expr", 87);
			LeaveRule_cast_expr();
		}
		DebugLocation(661, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:663:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 88);
		TraceIn("prefix_expr_op", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set512 = default(IToken);

		CommonTree set512_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(663, 71);
		try
		{
			// SugarCpp.g:663:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(663, 15);

			set512=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==89||input.LA(1)==93||(input.LA(1)>=95 && input.LA(1)<=96)||(input.LA(1)>=99 && input.LA(1)<=100)||input.LA(1)==158||input.LA(1)==178)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set512));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 88);
			LeaveRule("prefix_expr_op", 88);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(663, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:664:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 89);
		TraceIn("prefix_expr", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal515 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op513 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr514 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array516 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list517 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list518 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr519 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal515_tree = default(CommonTree);
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(664, 1);
		try
		{
			// SugarCpp.g:665:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt226=3;
			try { DebugEnterDecision(226, false);
			switch (input.LA(1))
			{
			case 84:
			case 89:
			case 93:
			case 95:
			case 96:
			case 99:
			case 100:
			case 158:
			case 178:
				{
				alt226 = 1;
				}
				break;
			case 157:
				{
				alt226 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 91:
			case 129:
				{
				alt226 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 226, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(226); }
			switch (alt226)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:665:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(665, 4);
				// SugarCpp.g:665:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:665:5: prefix_expr_op prefix_expr
				{
				DebugLocation(665, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr6260);
				prefix_expr_op513=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op513.Tree);
				DebugLocation(665, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr6262);
				prefix_expr514=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr514.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 665:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(665, 36);
					// SugarCpp.g:665:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(665, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(665, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(665, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:666:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(666, 4);
				string_literal515=(IToken)Match(input,157,Follow._157_in_prefix_expr6278); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_157.Add(string_literal515);

				DebugLocation(666, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr6280);
				type_no_array516=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array516.Tree);
				DebugLocation(666, 24);
				// SugarCpp.g:666:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt225=2;
				try { DebugEnterSubRule(225);
				try { DebugEnterDecision(225, false);
				int LA225_0 = input.LA(1);

				if ((LA225_0==91))
				{
					alt225 = 1;
				}
				else if ((LA225_0==130))
				{
					alt225 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 225, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(225); }
				switch (alt225)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:666:26: bracket_expr_list
					{
					DebugLocation(666, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr6284);
					bracket_expr_list517=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list517.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 666:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(666, 47);
						// SugarCpp.g:666:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(666, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(666, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(666, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:667:11: square_expr_list
					{
					DebugLocation(667, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6306);
					square_expr_list518=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list518.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 667:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(667, 31);
						// SugarCpp.g:667:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(667, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(667, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(667, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(225); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:669:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(669, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6331);
				suffix_expr519=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr519.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 89);
			LeaveRule("prefix_expr", 89);
			LeaveRule_prefix_expr();
		}
		DebugLocation(670, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:672:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 90);
		TraceIn("square_expr_list", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal520 = default(IToken);
		IToken char_literal522 = default(IToken);
		IToken char_literal524 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr521 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr523 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal520_tree = default(CommonTree);
		CommonTree char_literal522_tree = default(CommonTree);
		CommonTree char_literal524_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(672, 1);
		try
		{
			// SugarCpp.g:673:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:673:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(673, 4);
			char_literal520=(IToken)Match(input,130,Follow._130_in_square_expr_list6343); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_130.Add(char_literal520);

			DebugLocation(673, 8);
			PushFollow(Follow._expr_in_square_expr_list6345);
			expr521=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr521.Tree);
			DebugLocation(673, 13);
			// SugarCpp.g:673:13: ( ',' expr )*
			try { DebugEnterSubRule(227);
			while (true)
			{
				int alt227=2;
				try { DebugEnterDecision(227, false);
				int LA227_0 = input.LA(1);

				if ((LA227_0==98))
				{
					alt227 = 1;
				}


				} finally { DebugExitDecision(227); }
				switch ( alt227 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:673:14: ',' expr
					{
					DebugLocation(673, 14);
					char_literal522=(IToken)Match(input,98,Follow._98_in_square_expr_list6348); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal522);

					DebugLocation(673, 18);
					PushFollow(Follow._expr_in_square_expr_list6350);
					expr523=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr523.Tree);

					}
					break;

				default:
					goto loop227;
				}
			}

			loop227:
				;

			} finally { DebugExitSubRule(227); }

			DebugLocation(673, 25);
			char_literal524=(IToken)Match(input,131,Follow._131_in_square_expr_list6354); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_131.Add(char_literal524);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 673:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(673, 32);
				// SugarCpp.g:673:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(673, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(673, 44);
				// SugarCpp.g:673:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(673, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 90);
			LeaveRule("square_expr_list", 90);
			LeaveRule_square_expr_list();
		}
		DebugLocation(674, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:676:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 91);
		TraceIn("bracket_expr_list", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal525 = default(IToken);
		IToken char_literal527 = default(IToken);
		IToken char_literal529 = default(IToken);
		IToken NEWLINE530 = default(IToken);
		IToken INDENT531 = default(IToken);
		IToken NEWLINE532 = default(IToken);
		IToken char_literal534 = default(IToken);
		IToken NEWLINE535 = default(IToken);
		IToken NEWLINE537 = default(IToken);
		IToken char_literal538 = default(IToken);
		IToken NEWLINE539 = default(IToken);
		IToken DEDENT540 = default(IToken);
		IToken DEDENT541 = default(IToken);
		IToken NEWLINE542 = default(IToken);
		IToken char_literal543 = default(IToken);
		IToken char_literal545 = default(IToken);
		IToken NEWLINE546 = default(IToken);
		IToken char_literal548 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr533 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr536 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr544 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr547 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal525_tree = default(CommonTree);
		CommonTree char_literal527_tree = default(CommonTree);
		CommonTree char_literal529_tree = default(CommonTree);
		CommonTree NEWLINE530_tree = default(CommonTree);
		CommonTree INDENT531_tree = default(CommonTree);
		CommonTree NEWLINE532_tree = default(CommonTree);
		CommonTree char_literal534_tree = default(CommonTree);
		CommonTree NEWLINE535_tree = default(CommonTree);
		CommonTree NEWLINE537_tree = default(CommonTree);
		CommonTree char_literal538_tree = default(CommonTree);
		CommonTree NEWLINE539_tree = default(CommonTree);
		CommonTree DEDENT540_tree = default(CommonTree);
		CommonTree DEDENT541_tree = default(CommonTree);
		CommonTree NEWLINE542_tree = default(CommonTree);
		CommonTree char_literal543_tree = default(CommonTree);
		CommonTree char_literal545_tree = default(CommonTree);
		CommonTree NEWLINE546_tree = default(CommonTree);
		CommonTree char_literal548_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(676, 1);
		try
		{
			// SugarCpp.g:677:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:677:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(677, 4);
			char_literal525=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6374); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal525);

			DebugLocation(677, 8);
			// SugarCpp.g:677:8: ( expr ( ',' expr )* )?
			int alt229=2;
			try { DebugEnterSubRule(229);
			try { DebugEnterDecision(229, false);
			int LA229_0 = input.LA(1);

			if ((LA229_0==IDENT||LA229_0==NUMBER||LA229_0==STRING||LA229_0==84||LA229_0==89||LA229_0==91||LA229_0==93||(LA229_0>=95 && LA229_0<=96)||(LA229_0>=99 && LA229_0<=100)||(LA229_0>=129 && LA229_0<=130)||LA229_0==152||LA229_0==155||(LA229_0>=157 && LA229_0<=158)||LA229_0==178))
			{
				alt229 = 1;
			}
			} finally { DebugExitDecision(229); }
			switch (alt229)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:677:9: expr ( ',' expr )*
				{
				DebugLocation(677, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6377);
				expr526=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr526.Tree);
				DebugLocation(677, 14);
				// SugarCpp.g:677:14: ( ',' expr )*
				try { DebugEnterSubRule(228);
				while (true)
				{
					int alt228=2;
					try { DebugEnterDecision(228, false);
					int LA228_0 = input.LA(1);

					if ((LA228_0==98))
					{
						alt228 = 1;
					}


					} finally { DebugExitDecision(228); }
					switch ( alt228 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:677:15: ',' expr
						{
						DebugLocation(677, 15);
						char_literal527=(IToken)Match(input,98,Follow._98_in_bracket_expr_list6380); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal527);

						DebugLocation(677, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6382);
						expr528=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr528.Tree);

						}
						break;

					default:
						goto loop228;
					}
				}

				loop228:
					;

				} finally { DebugExitSubRule(228); }


				}
				break;

			}
			} finally { DebugExitSubRule(229); }

			DebugLocation(677, 28);
			// SugarCpp.g:677:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt242=2;
			try { DebugEnterSubRule(242);
			try { DebugEnterDecision(242, false);
			int LA242_0 = input.LA(1);

			if ((LA242_0==92))
			{
				alt242 = 1;
			}
			else if ((LA242_0==NEWLINE))
			{
				alt242 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 242, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(242); }
			switch (alt242)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:677:30: ')'
				{
				DebugLocation(677, 30);
				char_literal529=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6390); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal529);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 677:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(677, 37);
					// SugarCpp.g:677:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(677, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(677, 49);
					// SugarCpp.g:677:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(677, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:678:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(678, 12);
				// SugarCpp.g:678:12: ( NEWLINE )+
				int cnt230=0;
				try { DebugEnterSubRule(230);
				while (true)
				{
					int alt230=2;
					try { DebugEnterDecision(230, false);
					int LA230_0 = input.LA(1);

					if ((LA230_0==NEWLINE))
					{
						alt230 = 1;
					}


					} finally { DebugExitDecision(230); }
					switch (alt230)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:678:12: NEWLINE
						{
						DebugLocation(678, 12);
						NEWLINE530=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6412); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE530);


						}
						break;

					default:
						if (cnt230 >= 1)
							goto loop230;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee230 = new EarlyExitException( 230, input );
						DebugRecognitionException(eee230);
						throw eee230;
					}
					cnt230++;
				}
				loop230:
					;

				} finally { DebugExitSubRule(230); }

				DebugLocation(678, 21);
				// SugarCpp.g:678:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt241=2;
				try { DebugEnterSubRule(241);
				try { DebugEnterDecision(241, false);
				int LA241_0 = input.LA(1);

				if ((LA241_0==INDENT))
				{
					alt241 = 1;
				}
				else if ((LA241_0==IDENT||LA241_0==NUMBER||LA241_0==STRING||LA241_0==84||LA241_0==89||(LA241_0>=91 && LA241_0<=93)||(LA241_0>=95 && LA241_0<=96)||(LA241_0>=99 && LA241_0<=100)||(LA241_0>=129 && LA241_0<=130)||LA241_0==152||LA241_0==155||(LA241_0>=157 && LA241_0<=158)||LA241_0==178))
				{
					alt241 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(241); }
				switch (alt241)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:678:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(678, 23);
					INDENT531=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6417); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT531);

					DebugLocation(678, 30);
					// SugarCpp.g:678:30: ( NEWLINE )*
					try { DebugEnterSubRule(231);
					while (true)
					{
						int alt231=2;
						try { DebugEnterDecision(231, false);
						int LA231_0 = input.LA(1);

						if ((LA231_0==NEWLINE))
						{
							alt231 = 1;
						}


						} finally { DebugExitDecision(231); }
						switch ( alt231 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:678:30: NEWLINE
							{
							DebugLocation(678, 30);
							NEWLINE532=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6419); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE532);


							}
							break;

						default:
							goto loop231;
						}
					}

					loop231:
						;

					} finally { DebugExitSubRule(231); }

					DebugLocation(678, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6422);
					expr533=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr533.Tree);
					DebugLocation(678, 44);
					// SugarCpp.g:678:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(233);
					while (true)
					{
						int alt233=2;
						try { DebugEnterDecision(233, false);
						try
						{
							alt233 = dfa233.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(233); }
						switch ( alt233 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:678:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(678, 45);
							// SugarCpp.g:678:45: ( ',' | NEWLINE )+
							int cnt232=0;
							try { DebugEnterSubRule(232);
							while (true)
							{
								int alt232=3;
								try { DebugEnterDecision(232, false);
								int LA232_0 = input.LA(1);

								if ((LA232_0==98))
								{
									alt232 = 1;
								}
								else if ((LA232_0==NEWLINE))
								{
									alt232 = 2;
								}


								} finally { DebugExitDecision(232); }
								switch (alt232)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:678:46: ','
									{
									DebugLocation(678, 46);
									char_literal534=(IToken)Match(input,98,Follow._98_in_bracket_expr_list6426); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_98.Add(char_literal534);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:678:52: NEWLINE
									{
									DebugLocation(678, 52);
									NEWLINE535=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6430); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE535);


									}
									break;

								default:
									if (cnt232 >= 1)
										goto loop232;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee232 = new EarlyExitException( 232, input );
									DebugRecognitionException(eee232);
									throw eee232;
								}
								cnt232++;
							}
							loop232:
								;

							} finally { DebugExitSubRule(232); }

							DebugLocation(678, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6434);
							expr536=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr536.Tree);

							}
							break;

						default:
							goto loop233;
						}
					}

					loop233:
						;

					} finally { DebugExitSubRule(233); }

					DebugLocation(678, 69);
					// SugarCpp.g:678:69: ( NEWLINE )*
					try { DebugEnterSubRule(234);
					while (true)
					{
						int alt234=2;
						try { DebugEnterDecision(234, false);
						int LA234_0 = input.LA(1);

						if ((LA234_0==NEWLINE))
						{
							alt234 = 1;
						}


						} finally { DebugExitDecision(234); }
						switch ( alt234 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:678:69: NEWLINE
							{
							DebugLocation(678, 69);
							NEWLINE537=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6438); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE537);


							}
							break;

						default:
							goto loop234;
						}
					}

					loop234:
						;

					} finally { DebugExitSubRule(234); }

					DebugLocation(678, 78);
					// SugarCpp.g:678:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt237=2;
					try { DebugEnterSubRule(237);
					try { DebugEnterDecision(237, false);
					int LA237_0 = input.LA(1);

					if ((LA237_0==92))
					{
						alt237 = 1;
					}
					else if ((LA237_0==DEDENT))
					{
						alt237 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 237, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(237); }
					switch (alt237)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:678:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(678, 80);
						char_literal538=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6443); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal538);

						DebugLocation(678, 84);
						// SugarCpp.g:678:84: ( NEWLINE )*
						try { DebugEnterSubRule(235);
						while (true)
						{
							int alt235=2;
							try { DebugEnterDecision(235, false);
							int LA235_0 = input.LA(1);

							if ((LA235_0==NEWLINE))
							{
								alt235 = 1;
							}


							} finally { DebugExitDecision(235); }
							switch ( alt235 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:678:84: NEWLINE
								{
								DebugLocation(678, 84);
								NEWLINE539=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6445); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE539);


								}
								break;

							default:
								goto loop235;
							}
						}

						loop235:
							;

						} finally { DebugExitSubRule(235); }

						DebugLocation(678, 93);
						DEDENT540=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6448); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT540);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:678:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(678, 102);
						DEDENT541=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6452); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT541);

						DebugLocation(678, 109);
						// SugarCpp.g:678:109: ( NEWLINE )*
						try { DebugEnterSubRule(236);
						while (true)
						{
							int alt236=2;
							try { DebugEnterDecision(236, false);
							int LA236_0 = input.LA(1);

							if ((LA236_0==NEWLINE))
							{
								alt236 = 1;
							}


							} finally { DebugExitDecision(236); }
							switch ( alt236 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:678:109: NEWLINE
								{
								DebugLocation(678, 109);
								NEWLINE542=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6454); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE542);


								}
								break;

							default:
								goto loop236;
							}
						}

						loop236:
							;

						} finally { DebugExitSubRule(236); }

						DebugLocation(678, 118);
						char_literal543=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6457); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal543);


						}
						break;

					}
					} finally { DebugExitSubRule(237); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 678:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(678, 127);
						// SugarCpp.g:678:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(678, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(678, 139);
						// SugarCpp.g:678:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(678, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:679:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(679, 14);
					// SugarCpp.g:679:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt240=2;
					try { DebugEnterSubRule(240);
					try { DebugEnterDecision(240, false);
					int LA240_0 = input.LA(1);

					if ((LA240_0==IDENT||LA240_0==NUMBER||LA240_0==STRING||LA240_0==84||LA240_0==89||LA240_0==91||LA240_0==93||(LA240_0>=95 && LA240_0<=96)||(LA240_0>=99 && LA240_0<=100)||(LA240_0>=129 && LA240_0<=130)||LA240_0==152||LA240_0==155||(LA240_0>=157 && LA240_0<=158)||LA240_0==178))
					{
						alt240 = 1;
					}
					} finally { DebugExitDecision(240); }
					switch (alt240)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:679:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(679, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6484);
						expr544=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr544.Tree);
						DebugLocation(679, 20);
						// SugarCpp.g:679:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(239);
						while (true)
						{
							int alt239=2;
							try { DebugEnterDecision(239, false);
							int LA239_0 = input.LA(1);

							if ((LA239_0==NEWLINE||LA239_0==98))
							{
								alt239 = 1;
							}


							} finally { DebugExitDecision(239); }
							switch ( alt239 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:679:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(679, 21);
								// SugarCpp.g:679:21: ( ',' | NEWLINE )+
								int cnt238=0;
								try { DebugEnterSubRule(238);
								while (true)
								{
									int alt238=3;
									try { DebugEnterDecision(238, false);
									int LA238_0 = input.LA(1);

									if ((LA238_0==98))
									{
										alt238 = 1;
									}
									else if ((LA238_0==NEWLINE))
									{
										alt238 = 2;
									}


									} finally { DebugExitDecision(238); }
									switch (alt238)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:679:22: ','
										{
										DebugLocation(679, 22);
										char_literal545=(IToken)Match(input,98,Follow._98_in_bracket_expr_list6488); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_98.Add(char_literal545);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:679:28: NEWLINE
										{
										DebugLocation(679, 28);
										NEWLINE546=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6492); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE546);


										}
										break;

									default:
										if (cnt238 >= 1)
											goto loop238;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee238 = new EarlyExitException( 238, input );
										DebugRecognitionException(eee238);
										throw eee238;
									}
									cnt238++;
								}
								loop238:
									;

								} finally { DebugExitSubRule(238); }

								DebugLocation(679, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6496);
								expr547=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr547.Tree);

								}
								break;

							default:
								goto loop239;
							}
						}

						loop239:
							;

						} finally { DebugExitSubRule(239); }


						}
						break;

					}
					} finally { DebugExitSubRule(240); }

					DebugLocation(679, 47);
					char_literal548=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6502); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal548);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 679:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(679, 54);
						// SugarCpp.g:679:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(679, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(679, 66);
						// SugarCpp.g:679:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(679, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(241); }


				}
				break;

			}
			} finally { DebugExitSubRule(242); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 91);
			LeaveRule("bracket_expr_list", 91);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(682, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:684:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 92);
		TraceIn("suffix_expr", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal549 = default(IToken);
		IToken string_literal550 = default(IToken);
		IToken char_literal551 = default(IToken);
		IToken string_literal553 = default(IToken);
		IToken char_literal557 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident552 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list555 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list556 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident558 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list559 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal549_tree = default(CommonTree);
		CommonTree string_literal550_tree = default(CommonTree);
		CommonTree char_literal551_tree = default(CommonTree);
		CommonTree string_literal553_tree = default(CommonTree);
		CommonTree char_literal557_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(684, 1);
		try
		{
			// SugarCpp.g:685:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:685:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(685, 4);
			// SugarCpp.g:685:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:685:5: a= atom_expr
			{
			DebugLocation(685, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6549);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 685:17: -> $a
			{
				DebugLocation(685, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(685, 24);
			// SugarCpp.g:685:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(243);
			while (true)
			{
				int alt243=8;
				try { DebugEnterDecision(243, false);
				switch (input.LA(1))
				{
				case 96:
					{
					alt243 = 1;
					}
					break;
				case 100:
					{
					alt243 = 2;
					}
					break;
				case 105:
					{
					alt243 = 3;
					}
					break;
				case 103:
					{
					alt243 = 4;
					}
					break;
				case 91:
					{
					alt243 = 5;
					}
					break;
				case 130:
					{
					alt243 = 6;
					}
					break;
				case 129:
					{
					alt243 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(243); }
				switch ( alt243 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:685:26: '++'
					{
					DebugLocation(685, 26);
					string_literal549=(IToken)Match(input,96,Follow._96_in_suffix_expr6559); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(string_literal549);



					{
					// AST REWRITE
					// elements: 96, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 685:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(685, 34);
						// SugarCpp.g:685:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(685, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(685, 48);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(685, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:686:14: '--'
					{
					DebugLocation(686, 14);
					string_literal550=(IToken)Match(input,100,Follow._100_in_suffix_expr6585); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(string_literal550);



					{
					// AST REWRITE
					// elements: 100, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 686:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(686, 22);
						// SugarCpp.g:686:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(686, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(686, 36);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(686, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:687:11: '.' ident
					{
					DebugLocation(687, 11);
					char_literal551=(IToken)Match(input,105,Follow._105_in_suffix_expr6608); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal551);

					DebugLocation(687, 15);
					PushFollow(Follow._ident_in_suffix_expr6610);
					ident552=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident552.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 105
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 687:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(687, 24);
						// SugarCpp.g:687:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(687, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(687, 38);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(687, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(687, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:688:11: '->' ident
					{
					DebugLocation(688, 11);
					string_literal553=(IToken)Match(input,103,Follow._103_in_suffix_expr6635); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal553);

					DebugLocation(688, 16);
					PushFollow(Follow._ident_in_suffix_expr6637);
					ident554=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident554.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 103
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 688:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(688, 25);
						// SugarCpp.g:688:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(688, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(688, 39);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(688, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(688, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:689:11: bracket_expr_list
					{
					DebugLocation(689, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6662);
					bracket_expr_list555=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list555.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 689:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(689, 32);
						// SugarCpp.g:689:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(689, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(689, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(689, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:690:11: square_expr_list
					{
					DebugLocation(690, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6685);
					square_expr_list556=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list556.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 690:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(690, 31);
						// SugarCpp.g:690:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(690, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(690, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(690, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:691:11: '@' ident bracket_expr_list
					{
					DebugLocation(691, 11);
					char_literal557=(IToken)Match(input,129,Follow._129_in_suffix_expr6708); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_129.Add(char_literal557);

					DebugLocation(691, 15);
					PushFollow(Follow._ident_in_suffix_expr6710);
					ident558=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident558.Tree);
					DebugLocation(691, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6712);
					bracket_expr_list559=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list559.Tree);


					{
					// AST REWRITE
					// elements: ident, bracket_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 691:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(691, 42);
						// SugarCpp.g:691:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(691, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(691, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(691, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(691, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop243;
				}
			}

			loop243:
				;

			} finally { DebugExitSubRule(243); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 92);
			LeaveRule("suffix_expr", 92);
			LeaveRule_suffix_expr();
		}
		DebugLocation(693, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:695:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 93);
		TraceIn("atom_expr", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER560 = default(IToken);
		IToken STRING562 = default(IToken);
		IToken char_literal563 = default(IToken);
		IToken char_literal565 = default(IToken);
		IToken char_literal566 = default(IToken);
		IToken char_literal568 = default(IToken);
		IToken char_literal569 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident564 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr567 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER560_tree = default(CommonTree);
		CommonTree STRING562_tree = default(CommonTree);
		CommonTree char_literal563_tree = default(CommonTree);
		CommonTree char_literal565_tree = default(CommonTree);
		CommonTree char_literal566_tree = default(CommonTree);
		CommonTree char_literal568_tree = default(CommonTree);
		CommonTree char_literal569_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(695, 1);
		try
		{
			// SugarCpp.g:696:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt246=5;
			try { DebugEnterDecision(246, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt246 = 1;
				}
				break;
			case IDENT:
				{
				alt246 = 2;
				}
				break;
			case STRING:
				{
				alt246 = 3;
				}
				break;
			case 129:
				{
				alt246 = 4;
				}
				break;
			case 91:
				{
				alt246 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 246, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(246); }
			switch (alt246)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:696:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(696, 4);
				NUMBER560=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6750); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER560_tree = (CommonTree)adaptor.Create(NUMBER560);
				adaptor.AddChild(root_0, NUMBER560_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:697:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(697, 4);
				PushFollow(Follow._ident_in_atom_expr6755);
				ident561=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident561.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:698:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(698, 4);
				STRING562=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6760); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING562_tree = (CommonTree)adaptor.Create(STRING562);
				adaptor.AddChild(root_0, STRING562_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:699:4: '@' ident
				{
				DebugLocation(699, 4);
				char_literal563=(IToken)Match(input,129,Follow._129_in_atom_expr6765); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(char_literal563);

				DebugLocation(699, 8);
				PushFollow(Follow._ident_in_atom_expr6767);
				ident564=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident564.Tree);


				{
				// AST REWRITE
				// elements: ident, 129
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 699:14: -> ^( '@' ident )
				{
					DebugLocation(699, 17);
					// SugarCpp.g:699:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(699, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_129.NextNode(), root_1);

					DebugLocation(699, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:700:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(700, 4);
				char_literal565=(IToken)Match(input,91,Follow._91_in_atom_expr6780); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal565);

				DebugLocation(700, 9);
				PushFollow(Follow._expr_in_atom_expr6784);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(700, 15);
				// SugarCpp.g:700:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt245=2;
				try { DebugEnterSubRule(245);
				try { DebugEnterDecision(245, false);
				int LA245_0 = input.LA(1);

				if ((LA245_0==98))
				{
					alt245 = 1;
				}
				else if ((LA245_0==92))
				{
					alt245 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 245, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(245); }
				switch (alt245)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:700:17: ( ',' expr )+ ')'
					{
					DebugLocation(700, 17);
					// SugarCpp.g:700:17: ( ',' expr )+
					int cnt244=0;
					try { DebugEnterSubRule(244);
					while (true)
					{
						int alt244=2;
						try { DebugEnterDecision(244, false);
						int LA244_0 = input.LA(1);

						if ((LA244_0==98))
						{
							alt244 = 1;
						}


						} finally { DebugExitDecision(244); }
						switch (alt244)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:700:18: ',' expr
							{
							DebugLocation(700, 18);
							char_literal566=(IToken)Match(input,98,Follow._98_in_atom_expr6789); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_98.Add(char_literal566);

							DebugLocation(700, 22);
							PushFollow(Follow._expr_in_atom_expr6791);
							expr567=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr567.Tree);

							}
							break;

						default:
							if (cnt244 >= 1)
								goto loop244;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee244 = new EarlyExitException( 244, input );
							DebugRecognitionException(eee244);
							throw eee244;
						}
						cnt244++;
					}
					loop244:
						;

					} finally { DebugExitSubRule(244); }

					DebugLocation(700, 29);
					char_literal568=(IToken)Match(input,92,Follow._92_in_atom_expr6795); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal568);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 700:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(700, 36);
						// SugarCpp.g:700:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(700, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(700, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(700, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:701:17: ')' {...}?
					{
					DebugLocation(701, 17);
					char_literal569=(IToken)Match(input,92,Follow._92_in_atom_expr6822); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal569);

					DebugLocation(701, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 701:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(701, 40);
						// SugarCpp.g:701:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(701, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(701, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(245); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 93);
			LeaveRule("atom_expr", 93);
			LeaveRule_atom_expr();
		}
		DebugLocation(703, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:705:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 94);
		TraceIn("lvalue_item", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix570 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(705, 1);
		try
		{
			// SugarCpp.g:706:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:706:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(706, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6853);
			lvalue_prefix570=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix570.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 94);
			LeaveRule("lvalue_item", 94);
			LeaveRule_lvalue_item();
		}
		DebugLocation(707, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:709:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 95);
		TraceIn("lvalue_prefix", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op571 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix572 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix573 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(709, 1);
		try
		{
			// SugarCpp.g:710:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt247=2;
			try { DebugEnterDecision(247, false);
			int LA247_0 = input.LA(1);

			if ((LA247_0==84||LA247_0==89||LA247_0==93||(LA247_0>=95 && LA247_0<=96)||(LA247_0>=99 && LA247_0<=100)||LA247_0==158||LA247_0==178))
			{
				alt247 = 1;
			}
			else if ((LA247_0==IDENT||LA247_0==129))
			{
				alt247 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 247, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(247); }
			switch (alt247)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:710:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(710, 4);
				// SugarCpp.g:710:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:710:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(710, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6865);
				prefix_expr_op571=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op571.Tree);
				DebugLocation(710, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6867);
				lvalue_prefix572=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix572.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 710:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(710, 38);
					// SugarCpp.g:710:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(710, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(710, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(710, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:711:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(711, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6883);
				lvalue_suffix573=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix573.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 95);
			LeaveRule("lvalue_prefix", 95);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(712, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:714:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 96);
		TraceIn("lvalue_suffix", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal574 = default(IToken);
		IToken string_literal575 = default(IToken);
		IToken char_literal576 = default(IToken);
		IToken string_literal578 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident577 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident579 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter580 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list581 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list582 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal574_tree = default(CommonTree);
		CommonTree string_literal575_tree = default(CommonTree);
		CommonTree char_literal576_tree = default(CommonTree);
		CommonTree string_literal578_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(714, 1);
		try
		{
			// SugarCpp.g:715:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:715:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(715, 4);
			// SugarCpp.g:715:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:715:5: a= lvalue_atom
			{
			DebugLocation(715, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6897);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 715:19: -> $a
			{
				DebugLocation(715, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(715, 26);
			// SugarCpp.g:715:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(249);
			while (true)
			{
				int alt249=7;
				try { DebugEnterDecision(249, false);
				switch (input.LA(1))
				{
				case 96:
					{
					alt249 = 1;
					}
					break;
				case 100:
					{
					alt249 = 2;
					}
					break;
				case 105:
					{
					alt249 = 3;
					}
					break;
				case 103:
					{
					alt249 = 4;
					}
					break;
				case 91:
				case 113:
					{
					alt249 = 5;
					}
					break;
				case 130:
					{
					alt249 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(249); }
				switch ( alt249 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:715:28: '++'
					{
					DebugLocation(715, 28);
					string_literal574=(IToken)Match(input,96,Follow._96_in_lvalue_suffix6907); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(string_literal574);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 96
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 715:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(715, 36);
						// SugarCpp.g:715:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(715, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(715, 50);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(715, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:716:16: '--'
					{
					DebugLocation(716, 16);
					string_literal575=(IToken)Match(input,100,Follow._100_in_lvalue_suffix6935); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(string_literal575);



					{
					// AST REWRITE
					// elements: lvalue_suffix, 100
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 716:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(716, 24);
						// SugarCpp.g:716:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(716, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(716, 38);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(716, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:717:13: '.' ident
					{
					DebugLocation(717, 13);
					char_literal576=(IToken)Match(input,105,Follow._105_in_lvalue_suffix6960); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal576);

					DebugLocation(717, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6962);
					ident577=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident577.Tree);


					{
					// AST REWRITE
					// elements: ident, 105, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 717:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(717, 26);
						// SugarCpp.g:717:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(717, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(717, 40);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(717, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(717, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:718:13: '->' ident
					{
					DebugLocation(718, 13);
					string_literal578=(IToken)Match(input,103,Follow._103_in_lvalue_suffix6989); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(string_literal578);

					DebugLocation(718, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6991);
					ident579=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident579.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, ident, 103
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 718:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(718, 27);
						// SugarCpp.g:718:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(718, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(718, 41);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(718, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(718, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:719:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(719, 13);
					// SugarCpp.g:719:13: ( generic_parameter )?
					int alt248=2;
					try { DebugEnterSubRule(248);
					try { DebugEnterDecision(248, false);
					int LA248_0 = input.LA(1);

					if ((LA248_0==113))
					{
						alt248 = 1;
					}
					} finally { DebugExitDecision(248); }
					switch (alt248)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:719:13: generic_parameter
						{
						DebugLocation(719, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix7018);
						generic_parameter580=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter580.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(248); }

					DebugLocation(719, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix7021);
					bracket_expr_list581=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list581.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, bracket_expr_list, generic_parameter
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 719:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(719, 53);
						// SugarCpp.g:719:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(719, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(719, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(719, 80);
						// SugarCpp.g:719:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(719, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(719, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:720:13: square_expr_list
					{
					DebugLocation(720, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix7049);
					square_expr_list582=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list582.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 720:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(720, 33);
						// SugarCpp.g:720:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(720, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(720, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(720, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop249;
				}
			}

			loop249:
				;

			} finally { DebugExitSubRule(249); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 96);
			LeaveRule("lvalue_suffix", 96);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(722, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:724:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 97);
		TraceIn("lvalue_atom", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal584 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident583 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident585 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal584_tree = default(CommonTree);
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(724, 1);
		try
		{
			// SugarCpp.g:725:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt250=2;
			try { DebugEnterDecision(250, false);
			int LA250_0 = input.LA(1);

			if ((LA250_0==IDENT))
			{
				alt250 = 1;
			}
			else if ((LA250_0==129))
			{
				alt250 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 250, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(250); }
			switch (alt250)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:725:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(725, 4);
				PushFollow(Follow._ident_in_lvalue_atom7087);
				ident583=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident583.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:726:4: '@' ident
				{
				DebugLocation(726, 4);
				char_literal584=(IToken)Match(input,129,Follow._129_in_lvalue_atom7092); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(char_literal584);

				DebugLocation(726, 8);
				PushFollow(Follow._ident_in_lvalue_atom7094);
				ident585=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident585.Tree);


				{
				// AST REWRITE
				// elements: ident, 129
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 726:14: -> ^( '@' ident )
				{
					DebugLocation(726, 17);
					// SugarCpp.g:726:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(726, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_129.NextNode(), root_1);

					DebugLocation(726, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 97);
			LeaveRule("lvalue_atom", 97);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(727, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:729:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 98);
		TraceIn("lvalue", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal586 = default(IToken);
		IToken char_literal588 = default(IToken);
		IToken char_literal590 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item587 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item589 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item591 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal586_tree = default(CommonTree);
		CommonTree char_literal588_tree = default(CommonTree);
		CommonTree char_literal590_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(729, 1);
		try
		{
			// SugarCpp.g:730:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt252=2;
			try { DebugEnterDecision(252, false);
			int LA252_0 = input.LA(1);

			if ((LA252_0==91))
			{
				alt252 = 1;
			}
			else if ((LA252_0==IDENT||LA252_0==84||LA252_0==89||LA252_0==93||(LA252_0>=95 && LA252_0<=96)||(LA252_0>=99 && LA252_0<=100)||LA252_0==129||LA252_0==158||LA252_0==178))
			{
				alt252 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 252, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(252); }
			switch (alt252)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:730:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(730, 4);
				char_literal586=(IToken)Match(input,91,Follow._91_in_lvalue7113); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal586);

				DebugLocation(730, 8);
				PushFollow(Follow._lvalue_item_in_lvalue7115);
				lvalue_item587=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item587.Tree);
				DebugLocation(730, 20);
				// SugarCpp.g:730:20: ( ',' lvalue_item )+
				int cnt251=0;
				try { DebugEnterSubRule(251);
				while (true)
				{
					int alt251=2;
					try { DebugEnterDecision(251, false);
					int LA251_0 = input.LA(1);

					if ((LA251_0==98))
					{
						alt251 = 1;
					}


					} finally { DebugExitDecision(251); }
					switch (alt251)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:730:21: ',' lvalue_item
						{
						DebugLocation(730, 21);
						char_literal588=(IToken)Match(input,98,Follow._98_in_lvalue7118); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_98.Add(char_literal588);

						DebugLocation(730, 25);
						PushFollow(Follow._lvalue_item_in_lvalue7120);
						lvalue_item589=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item589.Tree);

						}
						break;

					default:
						if (cnt251 >= 1)
							goto loop251;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee251 = new EarlyExitException( 251, input );
						DebugRecognitionException(eee251);
						throw eee251;
					}
					cnt251++;
				}
				loop251:
					;

				} finally { DebugExitSubRule(251); }

				DebugLocation(730, 39);
				char_literal590=(IToken)Match(input,92,Follow._92_in_lvalue7124); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal590);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 730:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(730, 46);
					// SugarCpp.g:730:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(730, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(730, 60);
					// SugarCpp.g:730:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(730, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:731:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(731, 4);
				PushFollow(Follow._lvalue_item_in_lvalue7138);
				lvalue_item591=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item591.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 98);
			LeaveRule("lvalue", 98);
			LeaveRule_lvalue();
		}
		DebugLocation(732, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:734:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 99);
		TraceIn("ident", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT592 = default(IToken);
		IToken string_literal593 = default(IToken);
		IToken IDENT594 = default(IToken);

		CommonTree IDENT592_tree = default(CommonTree);
		CommonTree string_literal593_tree = default(CommonTree);
		CommonTree IDENT594_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(734, 1);
		try
		{
			// SugarCpp.g:735:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:735:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(735, 4);
			IDENT592=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7149); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT592_tree = (CommonTree)adaptor.Create(IDENT592);
			adaptor.AddChild(root_0, IDENT592_tree);
			}
			DebugLocation(735, 10);
			// SugarCpp.g:735:10: ( '::' IDENT )*
			try { DebugEnterSubRule(253);
			while (true)
			{
				int alt253=2;
				try { DebugEnterDecision(253, false);
				int LA253_0 = input.LA(1);

				if ((LA253_0==110))
				{
					alt253 = 1;
				}


				} finally { DebugExitDecision(253); }
				switch ( alt253 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:735:11: '::' IDENT
					{
					DebugLocation(735, 11);
					string_literal593=(IToken)Match(input,110,Follow._110_in_ident7152); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal593_tree = (CommonTree)adaptor.Create(string_literal593);
					adaptor.AddChild(root_0, string_literal593_tree);
					}
					DebugLocation(735, 16);
					IDENT594=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7154); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT594_tree = (CommonTree)adaptor.Create(IDENT594);
					adaptor.AddChild(root_0, IDENT594_tree);
					}

					}
					break;

				default:
					goto loop253;
				}
			}

			loop253:
				;

			} finally { DebugExitSubRule(253); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 99);
			LeaveRule("ident", 99);
			LeaveRule_ident();
		}
		DebugLocation(736, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:738:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 100);
		TraceIn("infix_func", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal595 = default(IToken);
		IToken char_literal597 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident596 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal595_tree = default(CommonTree);
		CommonTree char_literal597_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(738, 1);
		try
		{
			// SugarCpp.g:739:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:739:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(739, 7);
			char_literal595=(IToken)Match(input,134,Follow._134_in_infix_func7167); if (state.failed) return retval;
			DebugLocation(739, 9);
			PushFollow(Follow._ident_in_infix_func7170);
			ident596=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident596.Tree);
			DebugLocation(739, 18);
			char_literal597=(IToken)Match(input,134,Follow._134_in_infix_func7172); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 100);
			LeaveRule("infix_func", 100);
			LeaveRule_infix_func();
		}
		DebugLocation(740, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 101);
		TraceIn("synpred1_SugarCpp_fragment", 101);
		try
		{
			// SugarCpp.g:550:4: ( modify_expr ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:550:5: modify_expr ( '<|' | '|>' )
			{
			DebugLocation(550, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp4482);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(550, 17);
			if (input.LA(1)==118||input.LA(1)==176)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 101);
			LeaveRule("synpred1_SugarCpp_fragment", 101);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 102);
		TraceIn("synpred2_SugarCpp_fragment", 102);
		try
		{
			// SugarCpp.g:557:4: ( '[' feed_expr 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:557:5: '[' feed_expr 'for'
			{
			DebugLocation(557, 5);
			Match(input,130,Follow._130_in_synpred2_SugarCpp4596); if (state.failed) return;
			DebugLocation(557, 9);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp4598);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(557, 19);
			Match(input,146,Follow._146_in_synpred2_SugarCpp4600); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 102);
			LeaveRule("synpred2_SugarCpp_fragment", 102);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 103);
		TraceIn("synpred3_SugarCpp_fragment", 103);
		try
		{
			// SugarCpp.g:621:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )
			DebugEnterAlt(1);
			// SugarCpp.g:621:28: '<' ident ( ',' ident )* '>' bracket_expr_list
			{
			DebugLocation(621, 28);
			Match(input,113,Follow._113_in_synpred3_SugarCpp5552); if (state.failed) return;
			DebugLocation(621, 32);
			PushFollow(Follow._ident_in_synpred3_SugarCpp5554);
			ident();
			PopFollow();
			if (state.failed) return;
			DebugLocation(621, 38);
			// SugarCpp.g:621:38: ( ',' ident )*
			try { DebugEnterSubRule(254);
			while (true)
			{
				int alt254=2;
				try { DebugEnterDecision(254, false);
				int LA254_0 = input.LA(1);

				if ((LA254_0==98))
				{
					alt254 = 1;
				}


				} finally { DebugExitDecision(254); }
				switch ( alt254 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:621:39: ',' ident
					{
					DebugLocation(621, 39);
					Match(input,98,Follow._98_in_synpred3_SugarCpp5557); if (state.failed) return;
					DebugLocation(621, 43);
					PushFollow(Follow._ident_in_synpred3_SugarCpp5559);
					ident();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop254;
				}
			}

			loop254:
				;

			} finally { DebugExitSubRule(254); }

			DebugLocation(621, 51);
			Match(input,123,Follow._123_in_synpred3_SugarCpp5563); if (state.failed) return;
			DebugLocation(621, 55);
			PushFollow(Follow._bracket_expr_list_in_synpred3_SugarCpp5565);
			bracket_expr_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 103);
			LeaveRule("synpred3_SugarCpp_fragment", 103);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp

	partial void EnterRule_synpred4_SugarCpp_fragment();
	partial void LeaveRule_synpred4_SugarCpp_fragment();

	// $ANTLR start synpred4_SugarCpp
	public void synpred4_SugarCpp_fragment()
	{
		EnterRule_synpred4_SugarCpp_fragment();
		EnterRule("synpred4_SugarCpp_fragment", 104);
		TraceIn("synpred4_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:659:4: ( '(' type_name ')' prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:659:5: '(' type_name ')' prefix_expr
			{
			DebugLocation(659, 5);
			Match(input,91,Follow._91_in_synpred4_SugarCpp6178); if (state.failed) return;
			DebugLocation(659, 9);
			PushFollow(Follow._type_name_in_synpred4_SugarCpp6180);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(659, 19);
			Match(input,92,Follow._92_in_synpred4_SugarCpp6182); if (state.failed) return;
			DebugLocation(659, 23);
			PushFollow(Follow._prefix_expr_in_synpred4_SugarCpp6184);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_SugarCpp_fragment", 104);
			LeaveRule("synpred4_SugarCpp_fragment", 104);
			LeaveRule_synpred4_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred4_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA30 dfa30;
	private DFA37 dfa37;
	private DFA44 dfa44;
	private DFA51 dfa51;
	private DFA80 dfa80;
	private DFA102 dfa102;
	private DFA111 dfa111;
	private DFA116 dfa116;
	private DFA129 dfa129;
	private DFA171 dfa171;
	private DFA160 dfa160;
	private DFA195 dfa195;
	private DFA194 dfa194;
	private DFA203 dfa203;
	private DFA233 dfa233;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa30 = new DFA30( this );
		dfa37 = new DFA37( this );
		dfa44 = new DFA44( this );
		dfa51 = new DFA51( this );
		dfa80 = new DFA80( this );
		dfa102 = new DFA102( this );
		dfa111 = new DFA111( this );
		dfa116 = new DFA116( this );
		dfa129 = new DFA129( this );
		dfa171 = new DFA171( this );
		dfa160 = new DFA160( this );
		dfa195 = new DFA195( this );
		dfa194 = new DFA194( this );
		dfa203 = new DFA203( this );
		dfa233 = new DFA233( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x68\xFFFF";
		private const string DFA4_eofS =
			"\x68\xFFFF";
		private const string DFA4_minS =
			"\x2\x2D\x1\xFFFF\x1\x2D\x6\xFFFF\x3\x5B\x1\x2D\x1\xFFFF\x3\x2D\x1\x36"+
			"\x3\x2D\x1\x5B\x3\x5C\x3\x5B\x1\x2D\x6\x5C\x1\x2D\x1\x62\x6\x2D\x1\x62"+
			"\x2\x2D\x1\x62\x1\x2D\x4\x5C\x1\x5B\x11\x5C\x2\x2D\x1\x62\x2\x2D\x1\x62"+
			"\x2\x2D\x1\x62\x3\x2D\xF\x5C\x3\x2D\x3\x5C";
		private const string DFA4_maxS =
			"\x1\xB2\x1\xA1\x1\xFFFF\x1\xB2\x6\xFFFF\x3\x83\x1\x2D\x1\xFFFF\x1\x2D"+
			"\x1\x3C\x1\xA1\x1\x36\x2\x3C\x1\xB2\x1\x83\x2\x62\x1\x6E\x3\x83\x1\xB2"+
			"\x2\x62\x1\x6E\x2\x62\x1\x6E\x1\x3C\x1\x83\x2\x2D\x4\x3C\x1\x83\x1\x2D"+
			"\x1\x3C\x1\x83\x1\x2D\x2\x62\x2\x6E\x1\x83\x2\x62\x1\x6E\x2\x62\x1\x6E"+
			"\x2\x62\x1\x6E\x2\x62\x2\x6E\x2\x62\x2\x6E\x1\x2D\x1\x3C\x1\x83\x1\x2D"+
			"\x1\x3C\x1\x83\x1\x2D\x1\x3C\x1\x83\x3\x2D\x1\x6E\x2\x62\x2\x6E\x2\x62"+
			"\x2\x6E\x2\x62\x4\x6E\x3\x2D\x3\x6E";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x4\xFFFF"+
			"\x1\x4\x59\xFFFF";
		private const string DFA4_specialS =
			"\x68\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x26\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2\x2\xFFFF\x1\x9\x4"+
				"\xFFFF\x2\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x7\xFFFF\x1\x2",
				"\x1\xA\x5E\xFFFF\x1\xB\x14\xFFFF\x1\xC",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xE"+
				"\x4\xFFFF\x1\x2\x5\xFFFF\x1\xE\x1\xD\x1\xE\x1\xFFFF\x1\x2\x10\xFFFF"+
				"\x1\x2\x2F\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x10\x6\xFFFF\x1\x11\xB\xFFFF\x1\xF\x14\xFFFF\x1\x12",
				"\x1\x13\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x14\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x15",
				"",
				"\x1\x16",
				"\x1\x19\x9\xFFFF\x1\x17\x4\xFFFF\x1\x18",
				"\x1\x1A\x5E\xFFFF\x1\x1B\x14\xFFFF\x1\x1C",
				"\x1\x1D",
				"\x1\x20\x9\xFFFF\x1\x1E\x4\xFFFF\x1\x1F",
				"\x1\x23\x9\xFFFF\x1\x21\x4\xFFFF\x1\x22",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xE"+
				"\x4\xFFFF\x1\x2\x5\xFFFF\x1\xE\x1\xD\x1\xE\x1\xFFFF\x1\x2\x10\xFFFF"+
				"\x1\x2\x2F\xFFFF\x1\x2",
				"\x1\x10\x6\xFFFF\x1\x11\xB\xFFFF\x1\xF\x14\xFFFF\x1\x12",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x26",
				"\x1\x28\x6\xFFFF\x1\x11\xB\xFFFF\x1\x27\x14\xFFFF\x1\x12",
				"\x1\x29\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x2A\x6\xFFFF\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x3\x8\xFFFF\x1\x1D\x24\xFFFF\x1\x2\x26\xFFFF\x1\x1\x6\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x9\x4\xFFFF\x2\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x7\xFFFF"+
				"\x1\x2",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x2D",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x30",
				"\x1\x33\x9\xFFFF\x1\x31\x4\xFFFF\x1\x32",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x34",
				"\x1\x35",
				"\x1\x38\x9\xFFFF\x1\x36\x4\xFFFF\x1\x37",
				"\x1\x3B\x9\xFFFF\x1\x39\x4\xFFFF\x1\x3A",
				"\x1\x3E\x9\xFFFF\x1\x3C\x4\xFFFF\x1\x3D",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x46",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x47",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x26",
				"\x1\x28\x6\xFFFF\x1\x11\xB\xFFFF\x1\x27\x14\xFFFF\x1\x12",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x4A",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x4D",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x50",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x51",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x2D",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x52",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x30",
				"\x1\x53",
				"\x1\x56\x9\xFFFF\x1\x54\x4\xFFFF\x1\x55",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x57",
				"\x1\x5A\x9\xFFFF\x1\x58\x4\xFFFF\x1\x59",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x5B",
				"\x1\x5E\x9\xFFFF\x1\x5C\x4\xFFFF\x1\x5D",
				"\x1\x11\x20\xFFFF\x1\x12",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x25\x5\xFFFF\x1\x24\xB\xFFFF\x1\x47",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x62",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x4A",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x63",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x4D",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x64",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x50",
				"\x1\x2C\x5\xFFFF\x1\x2B\xB\xFFFF\x1\x51",
				"\x1\x2F\x5\xFFFF\x1\x2E\xB\xFFFF\x1\x52",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x49\x5\xFFFF\x1\x48\xB\xFFFF\x1\x62",
				"\x1\x4C\x5\xFFFF\x1\x4B\xB\xFFFF\x1\x63",
				"\x1\x4F\x5\xFFFF\x1\x4E\xB\xFFFF\x1\x64"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "219:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA30 : DFA
	{
		private const string DFA30_eotS =
			"\x4\xFFFF";
		private const string DFA30_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA30_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA30_maxS =
			"\x1\x36\x1\xB2\x2\xFFFF";
		private const string DFA30_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA30_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA30_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA30_eot = DFA.UnpackEncodedString(DFA30_eotS);
		private static readonly short[] DFA30_eof = DFA.UnpackEncodedString(DFA30_eofS);
		private static readonly char[] DFA30_min = DFA.UnpackEncodedStringToUnsignedChars(DFA30_minS);
		private static readonly char[] DFA30_max = DFA.UnpackEncodedStringToUnsignedChars(DFA30_maxS);
		private static readonly short[] DFA30_accept = DFA.UnpackEncodedString(DFA30_acceptS);
		private static readonly short[] DFA30_special = DFA.UnpackEncodedString(DFA30_specialS);
		private static readonly short[][] DFA30_transition;

		static DFA30()
		{
			int numStates = DFA30_transitionS.Length;
			DFA30_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA30_transition[i] = DFA.UnpackEncodedString(DFA30_transitionS[i]);
			}
		}

		public DFA30( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 30;
			this.eot = DFA30_eot;
			this.eof = DFA30_eof;
			this.min = DFA30_min;
			this.max = DFA30_max;
			this.accept = DFA30_accept;
			this.special = DFA30_special;
			this.transition = DFA30_transition;
		}

		public override string Description { get { return "264:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\x4\xFFFF";
		private const string DFA37_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA37_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA37_maxS =
			"\x1\x36\x1\xB2\x2\xFFFF";
		private const string DFA37_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA37_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "272:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA44 : DFA
	{
		private const string DFA44_eotS =
			"\x4\xFFFF";
		private const string DFA44_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA44_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA44_maxS =
			"\x1\x36\x1\xB2\x2\xFFFF";
		private const string DFA44_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA44_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA44_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA44_eot = DFA.UnpackEncodedString(DFA44_eotS);
		private static readonly short[] DFA44_eof = DFA.UnpackEncodedString(DFA44_eofS);
		private static readonly char[] DFA44_min = DFA.UnpackEncodedStringToUnsignedChars(DFA44_minS);
		private static readonly char[] DFA44_max = DFA.UnpackEncodedStringToUnsignedChars(DFA44_maxS);
		private static readonly short[] DFA44_accept = DFA.UnpackEncodedString(DFA44_acceptS);
		private static readonly short[] DFA44_special = DFA.UnpackEncodedString(DFA44_specialS);
		private static readonly short[][] DFA44_transition;

		static DFA44()
		{
			int numStates = DFA44_transitionS.Length;
			DFA44_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA44_transition[i] = DFA.UnpackEncodedString(DFA44_transitionS[i]);
			}
		}

		public DFA44( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}

		public override string Description { get { return "276:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x4\xFFFF";
		private const string DFA51_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA51_minS =
			"\x1\x36\x1\x8\x2\xFFFF";
		private const string DFA51_maxS =
			"\x1\x36\x1\xB2\x2\xFFFF";
		private const string DFA51_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA51_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x6\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x2\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "277:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA80 : DFA
	{
		private const string DFA80_eotS =
			"\x11\xFFFF";
		private const string DFA80_eofS =
			"\x11\xFFFF";
		private const string DFA80_minS =
			"\x1\x2D\x1\xFFFF\x2\x2D\x1\xFFFF\x4\x2D\x1\x59\x3\x2D\x2\x59\x1\x2D\x1"+
			"\x59";
		private const string DFA80_maxS =
			"\x1\xB2\x1\xFFFF\x1\xB2\x1\xA2\x1\xFFFF\x1\x2D\x1\xA2\x1\x6F\x1\xB2\x1"+
			"\x82\x1\x2D\x1\xA2\x1\xB2\x2\x82\x1\x2D\x1\x82";
		private const string DFA80_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA80_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA80_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x2\x1"+
				"\xF\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x2F\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x20\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x2\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1F\xFFFF\x1\x1\x10\xFFFF\x1\x1\xC\xFFFF\x1"+
				"\x1\x7\xFFFF\x2\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x7\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x2F\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x30\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x2\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x1A\xFFFF\x1\x1\x2F\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA80_eot = DFA.UnpackEncodedString(DFA80_eotS);
		private static readonly short[] DFA80_eof = DFA.UnpackEncodedString(DFA80_eofS);
		private static readonly char[] DFA80_min = DFA.UnpackEncodedStringToUnsignedChars(DFA80_minS);
		private static readonly char[] DFA80_max = DFA.UnpackEncodedStringToUnsignedChars(DFA80_maxS);
		private static readonly short[] DFA80_accept = DFA.UnpackEncodedString(DFA80_acceptS);
		private static readonly short[] DFA80_special = DFA.UnpackEncodedString(DFA80_specialS);
		private static readonly short[][] DFA80_transition;

		static DFA80()
		{
			int numStates = DFA80_transitionS.Length;
			DFA80_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA80_transition[i] = DFA.UnpackEncodedString(DFA80_transitionS[i]);
			}
		}

		public DFA80( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 80;
			this.eot = DFA80_eot;
			this.eof = DFA80_eof;
			this.min = DFA80_min;
			this.max = DFA80_max;
			this.accept = DFA80_accept;
			this.special = DFA80_special;
			this.transition = DFA80_transition;
		}

		public override string Description { get { return "357:15: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA102 : DFA
	{
		private const string DFA102_eotS =
			"\x9\xFFFF";
		private const string DFA102_eofS =
			"\x9\xFFFF";
		private const string DFA102_minS =
			"\x1\x2D\x1\x8\x4\xFFFF\x1\x2D\x1\xFFFF\x1\x8";
		private const string DFA102_maxS =
			"\x1\xB2\x1\xAF\x4\xFFFF\x1\x2D\x1\xFFFF\x1\xAF";
		private const string DFA102_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA102_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA102_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1C\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x6\xFFFF\x1\x4\x2\xFFFF\x1\x3\x7\xFFFF\x1\x5",
				"\x1\x5\x2D\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x12\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2D\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x12\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA102_eot = DFA.UnpackEncodedString(DFA102_eotS);
		private static readonly short[] DFA102_eof = DFA.UnpackEncodedString(DFA102_eofS);
		private static readonly char[] DFA102_min = DFA.UnpackEncodedStringToUnsignedChars(DFA102_minS);
		private static readonly char[] DFA102_max = DFA.UnpackEncodedStringToUnsignedChars(DFA102_maxS);
		private static readonly short[] DFA102_accept = DFA.UnpackEncodedString(DFA102_acceptS);
		private static readonly short[] DFA102_special = DFA.UnpackEncodedString(DFA102_specialS);
		private static readonly short[][] DFA102_transition;

		static DFA102()
		{
			int numStates = DFA102_transitionS.Length;
			DFA102_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA102_transition[i] = DFA.UnpackEncodedString(DFA102_transitionS[i]);
			}
		}

		public DFA102( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 102;
			this.eot = DFA102_eot;
			this.eof = DFA102_eof;
			this.min = DFA102_min;
			this.max = DFA102_max;
			this.accept = DFA102_accept;
			this.special = DFA102_special;
			this.transition = DFA102_transition;
		}

		public override string Description { get { return "400:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA111 : DFA
	{
		private const string DFA111_eotS =
			"\x4\xFFFF";
		private const string DFA111_eofS =
			"\x4\xFFFF";
		private const string DFA111_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA111_maxS =
			"\x1\x95\x1\xB2\x2\xFFFF";
		private const string DFA111_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA111_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA111_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x24\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA111_eot = DFA.UnpackEncodedString(DFA111_eotS);
		private static readonly short[] DFA111_eof = DFA.UnpackEncodedString(DFA111_eofS);
		private static readonly char[] DFA111_min = DFA.UnpackEncodedStringToUnsignedChars(DFA111_minS);
		private static readonly char[] DFA111_max = DFA.UnpackEncodedStringToUnsignedChars(DFA111_maxS);
		private static readonly short[] DFA111_accept = DFA.UnpackEncodedString(DFA111_acceptS);
		private static readonly short[] DFA111_special = DFA.UnpackEncodedString(DFA111_specialS);
		private static readonly short[][] DFA111_transition;

		static DFA111()
		{
			int numStates = DFA111_transitionS.Length;
			DFA111_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA111_transition[i] = DFA.UnpackEncodedString(DFA111_transitionS[i]);
			}
		}

		public DFA111( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 111;
			this.eot = DFA111_eot;
			this.eof = DFA111_eof;
			this.min = DFA111_min;
			this.max = DFA111_max;
			this.accept = DFA111_accept;
			this.special = DFA111_special;
			this.transition = DFA111_transition;
		}

		public override string Description { get { return "431:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA116 : DFA
	{
		private const string DFA116_eotS =
			"\x4\xFFFF";
		private const string DFA116_eofS =
			"\x4\xFFFF";
		private const string DFA116_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA116_maxS =
			"\x1\x95\x1\xB2\x2\xFFFF";
		private const string DFA116_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA116_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA116_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x1\x58\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x24\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA116_eot = DFA.UnpackEncodedString(DFA116_eotS);
		private static readonly short[] DFA116_eof = DFA.UnpackEncodedString(DFA116_eofS);
		private static readonly char[] DFA116_min = DFA.UnpackEncodedStringToUnsignedChars(DFA116_minS);
		private static readonly char[] DFA116_max = DFA.UnpackEncodedStringToUnsignedChars(DFA116_maxS);
		private static readonly short[] DFA116_accept = DFA.UnpackEncodedString(DFA116_acceptS);
		private static readonly short[] DFA116_special = DFA.UnpackEncodedString(DFA116_specialS);
		private static readonly short[][] DFA116_transition;

		static DFA116()
		{
			int numStates = DFA116_transitionS.Length;
			DFA116_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA116_transition[i] = DFA.UnpackEncodedString(DFA116_transitionS[i]);
			}
		}

		public DFA116( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 116;
			this.eot = DFA116_eot;
			this.eof = DFA116_eof;
			this.min = DFA116_min;
			this.max = DFA116_max;
			this.accept = DFA116_accept;
			this.special = DFA116_special;
			this.transition = DFA116_transition;
		}

		public override string Description { get { return "434:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA129 : DFA
	{
		private const string DFA129_eotS =
			"\x7\xFFFF";
		private const string DFA129_eofS =
			"\x7\xFFFF";
		private const string DFA129_minS =
			"\x1\x2D\x1\x8\x1\xFFFF\x1\x2D\x2\xFFFF\x1\x8";
		private const string DFA129_maxS =
			"\x1\xB2\x1\xB1\x1\xFFFF\x1\x2D\x2\xFFFF\x1\xB1";
		private const string DFA129_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA129_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA129_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x13\xFFFF\x1\x2",
				"\x1\x2\x2D\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x8\xFFFF\x2\x2\x3\xFFFF"+
				"\x5\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2D\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\xA\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x8\xFFFF\x2\x2\x3\xFFFF"+
				"\x5\x2"
			};

		private static readonly short[] DFA129_eot = DFA.UnpackEncodedString(DFA129_eotS);
		private static readonly short[] DFA129_eof = DFA.UnpackEncodedString(DFA129_eofS);
		private static readonly char[] DFA129_min = DFA.UnpackEncodedStringToUnsignedChars(DFA129_minS);
		private static readonly char[] DFA129_max = DFA.UnpackEncodedStringToUnsignedChars(DFA129_maxS);
		private static readonly short[] DFA129_accept = DFA.UnpackEncodedString(DFA129_acceptS);
		private static readonly short[] DFA129_special = DFA.UnpackEncodedString(DFA129_specialS);
		private static readonly short[][] DFA129_transition;

		static DFA129()
		{
			int numStates = DFA129_transitionS.Length;
			DFA129_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA129_transition[i] = DFA.UnpackEncodedString(DFA129_transitionS[i]);
			}
		}

		public DFA129( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 129;
			this.eot = DFA129_eot;
			this.eof = DFA129_eof;
			this.min = DFA129_min;
			this.max = DFA129_max;
			this.accept = DFA129_accept;
			this.special = DFA129_special;
			this.transition = DFA129_transition;
		}

		public override string Description { get { return "464:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA171 : DFA
	{
		private const string DFA171_eotS =
			"\x7\xFFFF";
		private const string DFA171_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA171_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA171_maxS =
			"\x1\xAD\x1\xB2\x2\xFFFF\x2\xB2\x1\xFFFF";
		private const string DFA171_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA171_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA171_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xD\xFFFF\x1\x3\x21\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x12\xFFFF\x2\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x24\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C"+
				"\xFFFF\x2\x3\x6\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x4\x3\x2\xFFFF\x6\x3\x1\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x24\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x3\x24\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xB\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA171_eot = DFA.UnpackEncodedString(DFA171_eotS);
		private static readonly short[] DFA171_eof = DFA.UnpackEncodedString(DFA171_eofS);
		private static readonly char[] DFA171_min = DFA.UnpackEncodedStringToUnsignedChars(DFA171_minS);
		private static readonly char[] DFA171_max = DFA.UnpackEncodedStringToUnsignedChars(DFA171_maxS);
		private static readonly short[] DFA171_accept = DFA.UnpackEncodedString(DFA171_acceptS);
		private static readonly short[] DFA171_special = DFA.UnpackEncodedString(DFA171_specialS);
		private static readonly short[][] DFA171_transition;

		static DFA171()
		{
			int numStates = DFA171_transitionS.Length;
			DFA171_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA171_transition[i] = DFA.UnpackEncodedString(DFA171_transitionS[i]);
			}
		}

		public DFA171( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 171;
			this.eot = DFA171_eot;
			this.eof = DFA171_eof;
			this.min = DFA171_min;
			this.max = DFA171_max;
			this.accept = DFA171_accept;
			this.special = DFA171_special;
			this.transition = DFA171_transition;
		}

		public override string Description { get { return "515:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA160 : DFA
	{
		private const string DFA160_eotS =
			"\x4\xFFFF";
		private const string DFA160_eofS =
			"\x4\xFFFF";
		private const string DFA160_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA160_maxS =
			"\x2\x36\x2\xFFFF";
		private const string DFA160_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA160_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA160_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x1",
				"\x1\x2\x25\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA160_eot = DFA.UnpackEncodedString(DFA160_eotS);
		private static readonly short[] DFA160_eof = DFA.UnpackEncodedString(DFA160_eofS);
		private static readonly char[] DFA160_min = DFA.UnpackEncodedStringToUnsignedChars(DFA160_minS);
		private static readonly char[] DFA160_max = DFA.UnpackEncodedStringToUnsignedChars(DFA160_maxS);
		private static readonly short[] DFA160_accept = DFA.UnpackEncodedString(DFA160_acceptS);
		private static readonly short[] DFA160_special = DFA.UnpackEncodedString(DFA160_specialS);
		private static readonly short[][] DFA160_transition;

		static DFA160()
		{
			int numStates = DFA160_transitionS.Length;
			DFA160_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA160_transition[i] = DFA.UnpackEncodedString(DFA160_transitionS[i]);
			}
		}

		public DFA160( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 160;
			this.eot = DFA160_eot;
			this.eof = DFA160_eof;
			this.min = DFA160_min;
			this.max = DFA160_max;
			this.accept = DFA160_accept;
			this.special = DFA160_special;
			this.transition = DFA160_transition;
		}

		public override string Description { get { return "515:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA195 : DFA
	{
		private const string DFA195_eotS =
			"\x7\xFFFF";
		private const string DFA195_eofS =
			"\x7\xFFFF";
		private const string DFA195_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA195_maxS =
			"\x5\xB2\x2\xFFFF";
		private const string DFA195_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA195_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA195_transitionS =
			{
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x13\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x13\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x13\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x13\xFFFF"+
				"\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x19\xFFFF\x2\x5\x13\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA195_eot = DFA.UnpackEncodedString(DFA195_eotS);
		private static readonly short[] DFA195_eof = DFA.UnpackEncodedString(DFA195_eofS);
		private static readonly char[] DFA195_min = DFA.UnpackEncodedStringToUnsignedChars(DFA195_minS);
		private static readonly char[] DFA195_max = DFA.UnpackEncodedStringToUnsignedChars(DFA195_maxS);
		private static readonly short[] DFA195_accept = DFA.UnpackEncodedString(DFA195_acceptS);
		private static readonly short[] DFA195_special = DFA.UnpackEncodedString(DFA195_specialS);
		private static readonly short[][] DFA195_transition;

		static DFA195()
		{
			int numStates = DFA195_transitionS.Length;
			DFA195_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA195_transition[i] = DFA.UnpackEncodedString(DFA195_transitionS[i]);
			}
		}

		public DFA195( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 195;
			this.eot = DFA195_eot;
			this.eof = DFA195_eof;
			this.min = DFA195_min;
			this.max = DFA195_max;
			this.accept = DFA195_accept;
			this.special = DFA195_special;
			this.transition = DFA195_transition;
		}

		public override string Description { get { return "558:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA194 : DFA
	{
		private const string DFA194_eotS =
			"\x7\xFFFF";
		private const string DFA194_eofS =
			"\x7\xFFFF";
		private const string DFA194_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA194_maxS =
			"\x1\x83\x4\xB2\x2\xFFFF";
		private const string DFA194_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA194_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA194_transitionS =
			{
				"\x1\x4\x25\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x20\xFFFF\x1\x5",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x13\xFFFF"+
				"\x1\x6",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x13\xFFFF"+
				"\x1\x6",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x13\xFFFF"+
				"\x1\x6",
				"\x1\x4\x24\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x19\xFFFF\x2\x6\x13\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA194_eot = DFA.UnpackEncodedString(DFA194_eotS);
		private static readonly short[] DFA194_eof = DFA.UnpackEncodedString(DFA194_eofS);
		private static readonly char[] DFA194_min = DFA.UnpackEncodedStringToUnsignedChars(DFA194_minS);
		private static readonly char[] DFA194_max = DFA.UnpackEncodedStringToUnsignedChars(DFA194_maxS);
		private static readonly short[] DFA194_accept = DFA.UnpackEncodedString(DFA194_acceptS);
		private static readonly short[] DFA194_special = DFA.UnpackEncodedString(DFA194_specialS);
		private static readonly short[][] DFA194_transition;

		static DFA194()
		{
			int numStates = DFA194_transitionS.Length;
			DFA194_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA194_transition[i] = DFA.UnpackEncodedString(DFA194_transitionS[i]);
			}
		}

		public DFA194( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 194;
			this.eot = DFA194_eot;
			this.eof = DFA194_eof;
			this.min = DFA194_min;
			this.max = DFA194_max;
			this.accept = DFA194_accept;
			this.special = DFA194_special;
			this.transition = DFA194_transition;
		}

		public override string Description { get { return "()* loopback of 558:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA203 : DFA
	{
		private const string DFA203_eotS =
			"\xB\xFFFF";
		private const string DFA203_eofS =
			"\xB\xFFFF";
		private const string DFA203_minS =
			"\x2\x2D\x1\xFFFF\x1\x55\x1\xFFFF\x2\x2D\x2\x55\x1\x2D\x1\x55";
		private const string DFA203_maxS =
			"\x2\xB2\x1\xFFFF\x1\xB1\x1\xFFFF\x1\x2D\x1\xB2\x2\xB1\x1\x2D\x1\xB1";
		private const string DFA203_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA203_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA203_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1B\xFFFF\x2\x2\x13\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\xA\xFFFF\x1"+
				"\x4\x11\xFFFF\x2\x2\x9\xFFFF\x1\x2\xB\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x2\xFFFF\x2\x2\xF\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xE\xFFFF\x4\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x15\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x13\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xE\xFFFF\x4\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xE\xFFFF\x4\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xE\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\xE\xFFFF\x4\x2"
			};

		private static readonly short[] DFA203_eot = DFA.UnpackEncodedString(DFA203_eotS);
		private static readonly short[] DFA203_eof = DFA.UnpackEncodedString(DFA203_eofS);
		private static readonly char[] DFA203_min = DFA.UnpackEncodedStringToUnsignedChars(DFA203_minS);
		private static readonly char[] DFA203_max = DFA.UnpackEncodedStringToUnsignedChars(DFA203_maxS);
		private static readonly short[] DFA203_accept = DFA.UnpackEncodedString(DFA203_acceptS);
		private static readonly short[] DFA203_special = DFA.UnpackEncodedString(DFA203_specialS);
		private static readonly short[][] DFA203_transition;

		static DFA203()
		{
			int numStates = DFA203_transitionS.Length;
			DFA203_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA203_transition[i] = DFA.UnpackEncodedString(DFA203_transitionS[i]);
			}
		}

		public DFA203( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}

		public override string Description { get { return "571:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA233 : DFA
	{
		private const string DFA233_eotS =
			"\x4\xFFFF";
		private const string DFA233_eofS =
			"\x4\xFFFF";
		private const string DFA233_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA233_maxS =
			"\x1\x62\x1\xB2\x2\xFFFF";
		private const string DFA233_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA233_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA233_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x24\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x1C\xFFFF\x2\x3\x15\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x13\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA233_eot = DFA.UnpackEncodedString(DFA233_eotS);
		private static readonly short[] DFA233_eof = DFA.UnpackEncodedString(DFA233_eofS);
		private static readonly char[] DFA233_min = DFA.UnpackEncodedStringToUnsignedChars(DFA233_minS);
		private static readonly char[] DFA233_max = DFA.UnpackEncodedStringToUnsignedChars(DFA233_maxS);
		private static readonly short[] DFA233_accept = DFA.UnpackEncodedString(DFA233_acceptS);
		private static readonly short[] DFA233_special = DFA.UnpackEncodedString(DFA233_specialS);
		private static readonly short[][] DFA233_transition;

		static DFA233()
		{
			int numStates = DFA233_transitionS.Length;
			DFA233_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA233_transition[i] = DFA.UnpackEncodedString(DFA233_transitionS[i]);
			}
		}

		public DFA233( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 233;
			this.eot = DFA233_eot;
			this.eof = DFA233_eof;
			this.min = DFA233_min;
			this.max = DFA233_max;
			this.accept = DFA233_accept;
			this.special = DFA233_special;
			this.transition = DFA233_transition;
		}

		public override string Description { get { return "()* loopback of 678:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root581 = new BitSet(new ulong[]{0x40200000000000UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _global_block_in_root584 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block606 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block608 = new BitSet(new ulong[]{0x40200000000002UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _func_def_in_node631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node661 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node666 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args688 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item699 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_item702 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item704 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _98_in_attribute_item707 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item709 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_attribute_item713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_attribute_item731 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_item734 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item736 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _98_in_attribute_item739 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item741 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_attribute_item745 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_attribute_item763 = new BitSet(new ulong[]{0x2UL,0x8000000UL});
		public static readonly BitSet _91_in_attribute_item766 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item768 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _98_in_attribute_item771 = new BitSet(new ulong[]{0x1080200000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item773 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_attribute_item777 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_attribute802 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x200001000UL});
		public static readonly BitSet _attribute_item_in_attribute804 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_attribute807 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x200001000UL});
		public static readonly BitSet _attribute_item_in_attribute809 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_attribute813 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute815 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x4UL});
		public static readonly BitSet _attribute_in_global_alloc834 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc837 = new BitSet(new ulong[]{0x0UL,0xA00000000000UL});
		public static readonly BitSet _109_in_global_alloc841 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_global_alloc843 = new BitSet(new ulong[]{0x2UL,0x80800008000000UL});
		public static readonly BitSet _119_in_global_alloc848 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _111_in_global_alloc852 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_global_alloc855 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc918 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_global_alloc994 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_global_alloc997 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_global_alloc1000 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_global_alloc1002 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _attribute_in_global_using1043 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_global_using1046 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1048 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _attribute_in_global_typedef1072 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _167_in_global_typedef1075 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_global_typedef1077 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_global_typedef1079 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_global_typedef1081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1105 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_import_def1108 = new BitSet(new ulong[]{0x1040000000000002UL});
		public static readonly BitSet _STRING_in_import_def1110 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1114 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_import_def1117 = new BitSet(new ulong[]{0x1040000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1119 = new BitSet(new ulong[]{0x1040000000000100UL});
		public static readonly BitSet _STRING_in_import_def1124 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1126 = new BitSet(new ulong[]{0x1040000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1131 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1156 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_enum_def1159 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_enum_def1161 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_enum_def1163 = new BitSet(new ulong[]{0x200000000002UL});
		public static readonly BitSet _ident_in_enum_def1166 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_enum_def1169 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_enum_def1171 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1204 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_namespace_def1207 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_namespace_def1209 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1212 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1215 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1217 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _global_block_in_namespace_def1220 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1250 = new BitSet(new ulong[]{0x0UL,0x0UL,0xA00UL});
		public static readonly BitSet _139_in_class_def1255 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1257 = new BitSet(new ulong[]{0x40000000000002UL,0x2200000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1260 = new BitSet(new ulong[]{0x40000000000002UL,0x200000000000UL});
		public static readonly BitSet _109_in_class_def1265 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1267 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _98_in_class_def1270 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1272 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1279 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_class_def1282 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _NEWLINE_in_class_def1284 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _global_block_in_class_def1287 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_class_def1331 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_class_def1333 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1335 = new BitSet(new ulong[]{0x40000000000002UL,0x2200008000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1338 = new BitSet(new ulong[]{0x40000000000002UL,0x200008000000UL});
		public static readonly BitSet _91_in_class_def1343 = new BitSet(new ulong[]{0x200000000000UL,0x800000000000UL});
		public static readonly BitSet _func_args_in_class_def1345 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_class_def1347 = new BitSet(new ulong[]{0x40000000000002UL,0x200000000000UL});
		public static readonly BitSet _109_in_class_def1352 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1354 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _98_in_class_def1357 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_class_def1359 = new BitSet(new ulong[]{0x40000000000002UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1366 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_class_def1369 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _NEWLINE_in_class_def1371 = new BitSet(new ulong[]{0x40200000000100UL,0x8000000UL,0x4048612111A04UL});
		public static readonly BitSet _global_block_in_class_def1374 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1429 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_type_list1432 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_type_list1434 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _type_single_in_type_name1456 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_type_name1460 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_type_name1463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_name1467 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name1469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_name1510 = new BitSet(new ulong[]{0x200000000000UL,0x18000000UL,0x602001000UL});
		public static readonly BitSet _type_list_in_type_name1512 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name1515 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _103_in_type_name1517 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_type_name1520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_name1524 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name1526 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1550 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x4UL});
		public static readonly BitSet _89_in_type_single1554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_type_single1570 = new BitSet(new ulong[]{0x1080200000000000UL,0x1DAA100000UL,0x400006900000EUL});
		public static readonly BitSet _expr_in_type_single1574 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_type_single1577 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_type_single1579 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_type_single1583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _98_in_type_single1608 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_type_single1611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1658 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_type_no_array1662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1697 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_type_star1701 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1747 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_type_template_type1751 = new BitSet(new ulong[]{0x200000000000UL,0x800000008000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_type_template_type1754 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _98_in_type_template_type1757 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_type_template_type1759 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _123_in_type_template_type1765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _161_in_type_ident1805 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x402001000UL});
		public static readonly BitSet _140_in_type_ident1808 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x402000000UL});
		public static readonly BitSet _162_in_type_ident1811 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_type_ident1814 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_type_ident1817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1848 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_generic_parameter_inside1851 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1853 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _113_in_generic_parameter1875 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1877 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_generic_parameter1879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1894 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_func_args1897 = new BitSet(new ulong[]{0x200000000000UL,0x800000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1899 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1921 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_func_args_item1923 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_func_args_item1925 = new BitSet(new ulong[]{0x2UL,0x80800008000000UL});
		public static readonly BitSet _119_in_func_args_item1930 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _111_in_func_args_item1934 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_func_args_item1937 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item1988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_func_args_item2048 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _modify_expr_in_func_args_item2052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_func_name2095 = new BitSet(new ulong[]{0x0UL,0x808A0000000UL});
		public static readonly BitSet _operator_in_func_name2097 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_name2099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2125 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x4000602001000UL});
		public static readonly BitSet _func_type_in_func_def2128 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x4000000000000UL});
		public static readonly BitSet _178_in_func_def2131 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL});
		public static readonly BitSet _func_name_in_func_def2134 = new BitSet(new ulong[]{0x0UL,0x2000008000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2136 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_func_def2139 = new BitSet(new ulong[]{0x200000000000UL,0x800010000000UL});
		public static readonly BitSet _func_args_in_func_def2141 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_def2144 = new BitSet(new ulong[]{0x40000000000000UL,0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2148 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_func_def2201 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_func_def2205 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2259 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_func_def2262 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2264 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _match_item_in_func_def2268 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2270 = new BitSet(new ulong[]{0x40000000000100UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2368 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2370 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2380 = new BitSet(new ulong[]{0x40000000000000UL,0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2383 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _112_in_stmt_block_item2388 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2390 = new BitSet(new ulong[]{0x40000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2407 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2409 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2412 = new BitSet(new ulong[]{0x200000000100UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _DEDENT_in_stmt_block2415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2435 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2451 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2482 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2501 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2300000C0000UL});
		public static readonly BitSet _147_in_stmt_expr2511 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2513 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2300000C0000UL});
		public static readonly BitSet _168_in_stmt_expr2542 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2544 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2300000C0000UL});
		public static readonly BitSet _173_in_stmt_expr2573 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2575 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2300000C0000UL});
		public static readonly BitSet _169_in_stmt_expr2604 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_expr2606 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2300000C0000UL});
		public static readonly BitSet _146_in_stmt_expr2635 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _for_item_in_stmt_expr2637 = new BitSet(new ulong[]{0x2UL,0x400000000UL,0x2300000C0000UL});
		public static readonly BitSet _98_in_stmt_expr2640 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _for_item_in_stmt_expr2642 = new BitSet(new ulong[]{0x2UL,0x400000000UL,0x2300000C0000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_defer2715 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _stmt_in_stmt_defer2717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_defer2730 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _stmt_in_stmt_defer2732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_stmt_typedef2751 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2753 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_stmt_typedef2755 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2776 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_using_item2780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_stmt_using2788 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2790 = new BitSet(new ulong[]{0x200000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _160_in_stmt_return2811 = new BitSet(new ulong[]{0x1080200000000002UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_return2813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2834 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _112_in_inline_stmt_block2837 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x4048140000002UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2839 = new BitSet(new ulong[]{0x2UL,0x1000000000000UL});
		public static readonly BitSet _147_in_stmt_if2861 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_if2863 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2866 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2869 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2872 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_stmt_if2875 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2877 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_if2912 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x4048140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_if2935 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_if2937 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2940 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2943 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2946 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_stmt_if2949 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2951 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_if2990 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x4048140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2992 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_stmt_while3023 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_while3025 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3029 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3032 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_while3056 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x4048140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3058 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_stmt_while3082 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_while3084 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3088 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3091 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_while3115 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x4048140000002UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_while3141 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_while3143 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3146 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3149 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3171 = new BitSet(new ulong[]{0x0UL,0x4000000000000UL});
		public static readonly BitSet _114_in_for_range3173 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_for_range3177 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000004000UL});
		public static readonly BitSet _165_in_for_range3180 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_for_range3184 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_for_range3187 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_for_range3191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_for_range3220 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_for_range3224 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_for_range3227 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_for_range3231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3289 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3308 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_for_map3310 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_for_map3312 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3338 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_for3354 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _for_item_in_stmt_for3358 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_for3361 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _for_item_in_stmt_for3363 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3367 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_try3401 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3403 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3406 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3408 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_stmt_try3411 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3413 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3415 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_switch_item3441 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_switch_item3443 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL,0x1000000000UL});
		public static readonly BitSet _98_in_switch_item3446 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_switch_item3448 = new BitSet(new ulong[]{0x40000000000000UL,0x400000000UL,0x1000000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3454 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_switch_item3503 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x4048140000002UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3505 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_switch3545 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_stmt_switch3547 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3550 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3553 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3555 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x80000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3559 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3561 = new BitSet(new ulong[]{0x40000000000100UL,0x0UL,0x80000008000UL});
		public static readonly BitSet _143_in_stmt_switch3567 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3569 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3572 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3574 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3605 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_ident_list3608 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_ident_list3610 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3632 = new BitSet(new ulong[]{0x0UL,0xA00000000000UL});
		public static readonly BitSet _109_in_stmt_alloc3636 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_stmt_alloc3638 = new BitSet(new ulong[]{0x2UL,0x80800008000000UL});
		public static readonly BitSet _119_in_stmt_alloc3643 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _111_in_stmt_alloc3647 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_stmt_alloc3765 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3769 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_alloc3772 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3774 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3804 = new BitSet(new ulong[]{0x2UL,0x6098104244800000UL,0x800000000021UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3808 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_stmt_modify3834 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_stmt_modify3863 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_modify3894 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_stmt_modify3896 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3930 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3944 = new BitSet(new ulong[]{0x40000000000002UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3954 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3957 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3959 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_where_expr3962 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _where_item_in_where_expr3966 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3970 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4006 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4009 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _NEWLINE_in_where_expr4011 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _where_item_in_where_expr4015 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4017 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _DEDENT_in_where_expr4022 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4024 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4027 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4077 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4080 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _NEWLINE_in_where_expr4082 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _where_item_in_where_expr4086 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4088 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _DEDENT_in_where_expr4093 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4095 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4098 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_where_expr4136 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4138 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4141 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _NEWLINE_in_where_expr4143 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _where_item_in_where_expr4147 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4149 = new BitSet(new ulong[]{0x40200000000100UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _DEDENT_in_where_expr4154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_let_expr4212 = new BitSet(new ulong[]{0x200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _where_item_in_let_expr4214 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_let_expr4218 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_let_expr4222 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4246 = new BitSet(new ulong[]{0x10C0600000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _INDENT_in_let_expr4251 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _NEWLINE_in_let_expr4253 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_let_expr4256 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4258 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4287 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4334 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4337 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _NEWLINE_in_let_expr4339 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9440E2002UL});
		public static readonly BitSet _where_item_in_let_expr4343 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4345 = new BitSet(new ulong[]{0x40200000000000UL,0x19AA100000UL,0x427C9442E2002UL});
		public static readonly BitSet _149_in_let_expr4350 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_let_expr4352 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4354 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_match_item4389 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_match_item4391 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_match_item4393 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _where_expr_in_match_item4395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_match_expr4416 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_match_expr4418 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4421 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4424 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4426 = new BitSet(new ulong[]{0x40000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _match_item_in_match_expr4430 = new BitSet(new ulong[]{0x40000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4432 = new BitSet(new ulong[]{0x40000000000100UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr4460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4470 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr4499 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x1000000000000UL});
		public static readonly BitSet _118_in_feed_expr4509 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000006UL});
		public static readonly BitSet _list_expr_in_feed_expr4511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_feed_expr4545 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000006UL});
		public static readonly BitSet _list_expr_in_feed_expr4547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr4584 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_list_expr4605 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000006UL});
		public static readonly BitSet _feed_expr_in_list_expr4607 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_list_expr4609 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _for_item_in_list_expr4611 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_list_expr4614 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _for_item_in_list_expr4616 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_list_expr4620 = new BitSet(new ulong[]{0x0UL,0x200000000000UL});
		public static readonly BitSet _109_in_list_expr4622 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_list_expr4624 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_list_expr4652 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x400006000000EUL});
		public static readonly BitSet _98_in_list_expr4656 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _NEWLINE_in_list_expr4660 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _INDENT_in_list_expr4664 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _DEDENT_in_list_expr4668 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _feed_expr_in_list_expr4672 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_list_expr4676 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _NEWLINE_in_list_expr4680 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _INDENT_in_list_expr4684 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _DEDENT_in_list_expr4688 = new BitSet(new ulong[]{0x10C0600000000100UL,0x1DAA100000UL,0x4000060000006UL});
		public static readonly BitSet _feed_expr_in_list_expr4692 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_list_expr4699 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _NEWLINE_in_list_expr4703 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _INDENT_in_list_expr4707 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _DEDENT_in_list_expr4711 = new BitSet(new ulong[]{0x40400000000100UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_list_expr4715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4740 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4757 = new BitSet(new ulong[]{0x40400000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_lambda_type4775 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_lambda_type4777 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_lambda_type4779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_lambda_expr4794 = new BitSet(new ulong[]{0x200000000000UL,0x800010000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4796 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_lambda_expr4799 = new BitSet(new ulong[]{0x0UL,0x60000A008000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4801 = new BitSet(new ulong[]{0x0UL,0x60000A000000000UL});
		public static readonly BitSet _103_in_lambda_expr4806 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4808 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_lambda_expr4843 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_lambda_expr4877 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_lambda_expr4914 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr5008 = new BitSet(new ulong[]{0x2UL,0x4090904244800000UL,0x800000000020UL});
		public static readonly BitSet _set_in_modify_expr5012 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _cond_expr_in_modify_expr5057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _119_in_modify_expr5066 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _cond_expr_in_modify_expr5069 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item5082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr5094 = new BitSet(new ulong[]{0x2UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_cond_expr5103 = new BitSet(new ulong[]{0x1080200000000002UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5109 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_cond_expr5113 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5117 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr5231 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000080000000UL});
		public static readonly BitSet _or_op_in_or_expr5242 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _and_expr_in_or_expr5246 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000080000000UL});
		public static readonly BitSet _bit_or_in_and_expr5288 = new BitSet(new ulong[]{0x2UL,0x1000000UL,0x80UL});
		public static readonly BitSet _and_op_in_and_expr5299 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _bit_or_in_and_expr5303 = new BitSet(new ulong[]{0x2UL,0x1000000UL,0x80UL});
		public static readonly BitSet _bit_xor_in_bit_or5334 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _174_in_bit_or5343 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _bit_xor_in_bit_or5347 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5377 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_bit_xor5386 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _bit_and_in_bit_xor5390 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _cmp_expr_in_bit_and5420 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_bit_and5429 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _cmp_expr_in_bit_and5433 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _chain_op_in_chain_list5525 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _shift_expr_in_chain_list5527 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5541 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _113_in_cmp_expr5570 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5572 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _98_in_cmp_expr5575 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5577 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _123_in_cmp_expr5581 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_cmp_expr5614 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5618 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5699 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5703 = new BitSet(new ulong[]{0x2UL,0x1922000000200000UL,0xC00000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5707 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5809 = new BitSet(new ulong[]{0x2UL,0x2008000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5818 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _add_expr_in_shift_expr5822 = new BitSet(new ulong[]{0x2UL,0x2008000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5852 = new BitSet(new ulong[]{0x2UL,0x880000000UL});
		public static readonly BitSet _95_in_add_expr5862 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _mul_expr_in_add_expr5866 = new BitSet(new ulong[]{0x2UL,0x880000000UL});
		public static readonly BitSet _99_in_add_expr5891 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _mul_expr_in_add_expr5895 = new BitSet(new ulong[]{0x2UL,0x880000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5933 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _93_in_mul_expr5943 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _infix_expr_in_mul_expr5947 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _107_in_mul_expr5974 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _infix_expr_in_mul_expr5978 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _86_in_mul_expr6005 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _infix_expr_in_mul_expr6009 = new BitSet(new ulong[]{0x2UL,0x80020400000UL});
		public static readonly BitSet _selector_expr_in_infix_expr6049 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _infix_func_in_infix_expr6059 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _selector_expr_in_infix_expr6063 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40UL});
		public static readonly BitSet _cast_expr_in_selector_expr6095 = new BitSet(new ulong[]{0x2UL,0x50000000000UL});
		public static readonly BitSet _104_in_selector_expr6105 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_selector_expr6109 = new BitSet(new ulong[]{0x2UL,0x50000000000UL});
		public static readonly BitSet _106_in_selector_expr6135 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_selector_expr6140 = new BitSet(new ulong[]{0x2UL,0x50000000000UL});
		public static readonly BitSet _91_in_cast_expr6189 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_cast_expr6191 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_cast_expr6193 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6210 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr6260 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr6262 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_prefix_expr6278 = new BitSet(new ulong[]{0x200000000000UL,0x0UL,0x602001000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr6280 = new BitSet(new ulong[]{0x0UL,0x8000000UL,0x4UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr6284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_square_expr_list6343 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_square_expr_list6345 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _98_in_square_expr_list6348 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_square_expr_list6350 = new BitSet(new ulong[]{0x0UL,0x400000000UL,0x8UL});
		public static readonly BitSet _131_in_square_expr_list6354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_bracket_expr_list6374 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19BA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6377 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _98_in_bracket_expr_list6380 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6382 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6412 = new BitSet(new ulong[]{0x10C0600000000000UL,0x19BA100000UL,0x4000069000006UL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6417 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6419 = new BitSet(new ulong[]{0x10C0200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6422 = new BitSet(new ulong[]{0x40000000000100UL,0x410000000UL});
		public static readonly BitSet _98_in_bracket_expr_list6426 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x4000069000006UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6430 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6434 = new BitSet(new ulong[]{0x40000000000100UL,0x410000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6438 = new BitSet(new ulong[]{0x40000000000100UL,0x10000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6443 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6445 = new BitSet(new ulong[]{0x40000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6448 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6452 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6454 = new BitSet(new ulong[]{0x40000000000000UL,0x10000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6484 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _98_in_bracket_expr_list6488 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x4000069000006UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6492 = new BitSet(new ulong[]{0x10C0200000000000UL,0x1DAA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_bracket_expr_list6496 = new BitSet(new ulong[]{0x40000000000000UL,0x410000000UL});
		public static readonly BitSet _92_in_bracket_expr_list6502 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6549 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _96_in_suffix_expr6559 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _100_in_suffix_expr6585 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _105_in_suffix_expr6608 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6610 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _103_in_suffix_expr6635 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6637 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6662 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6685 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _129_in_suffix_expr6708 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6710 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6712 = new BitSet(new ulong[]{0x2UL,0x29108000000UL,0x6UL});
		public static readonly BitSet _NUMBER_in_atom_expr6750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6760 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_atom_expr6765 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_atom_expr6767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_atom_expr6780 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_atom_expr6784 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _98_in_atom_expr6789 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000069000006UL});
		public static readonly BitSet _expr_in_atom_expr6791 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_atom_expr6795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_atom_expr6822 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6865 = new BitSet(new ulong[]{0x200000000000UL,0x19A2100000UL,0x4000040000002UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6897 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _96_in_lvalue_suffix6907 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _100_in_lvalue_suffix6935 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _105_in_lvalue_suffix6960 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6962 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _103_in_lvalue_suffix6989 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6991 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix7018 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix7021 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix7049 = new BitSet(new ulong[]{0x2UL,0x2029108000000UL,0x4UL});
		public static readonly BitSet _ident_in_lvalue_atom7087 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_lvalue_atom7092 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom7094 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_lvalue7113 = new BitSet(new ulong[]{0x200000000000UL,0x19A2100000UL,0x4000040000002UL});
		public static readonly BitSet _lvalue_item_in_lvalue7115 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_lvalue7118 = new BitSet(new ulong[]{0x200000000000UL,0x19A2100000UL,0x4000040000002UL});
		public static readonly BitSet _lvalue_item_in_lvalue7120 = new BitSet(new ulong[]{0x0UL,0x410000000UL});
		public static readonly BitSet _92_in_lvalue7124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue7138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident7149 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_ident7152 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _IDENT_in_ident7154 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _134_in_infix_func7167 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_infix_func7170 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40UL});
		public static readonly BitSet _134_in_infix_func7172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp4482 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x1000000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp4484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_synpred2_SugarCpp4596 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000006UL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp4598 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_synpred2_SugarCpp4600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_synpred3_SugarCpp5552 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5554 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _98_in_synpred3_SugarCpp5557 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5559 = new BitSet(new ulong[]{0x0UL,0x800000400000000UL});
		public static readonly BitSet _123_in_synpred3_SugarCpp5563 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _bracket_expr_list_in_synpred3_SugarCpp5565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_synpred4_SugarCpp6178 = new BitSet(new ulong[]{0x200000000000UL,0x8000000UL,0x602001000UL});
		public static readonly BitSet _type_name_in_synpred4_SugarCpp6180 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_synpred4_SugarCpp6182 = new BitSet(new ulong[]{0x1080200000000000UL,0x19AA100000UL,0x4000060000002UL});
		public static readonly BitSet _prefix_expr_in_synpred4_SugarCpp6184 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
