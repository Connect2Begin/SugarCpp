//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-28 17:09:10

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'case'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'return'", "'struct'", "'switch'", "'then'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'when'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_New_Array=28;
	public const int Expr_New_Type=29;
	public const int Expr_Not_Null=30;
	public const int Expr_Prefix=31;
	public const int Expr_Suffix=32;
	public const int Expr_Tuple=33;
	public const int Expr_Where=34;
	public const int For_Item_Down_To=35;
	public const int For_Item_Each=36;
	public const int For_Item_Map=37;
	public const int For_Item_To=38;
	public const int For_Item_When=39;
	public const int Func_Args=40;
	public const int Func_Def=41;
	public const int Generic_Patameters=42;
	public const int Global_Block=43;
	public const int IDENT=44;
	public const int INDENT=45;
	public const int Ident_List=46;
	public const int Import=47;
	public const int Left_Bracket=48;
	public const int LineComment=49;
	public const int Match_Expr=50;
	public const int Match_Expr_Item=51;
	public const int Match_Tuple=52;
	public const int NEWLINE=53;
	public const int NUMBER=54;
	public const int Namespace=55;
	public const int Right_Bracket=56;
	public const int Root=57;
	public const int SP=58;
	public const int STRING=59;
	public const int Stmt_Block=60;
	public const int Stmt_Defer=61;
	public const int Stmt_Finally=62;
	public const int Stmt_For=63;
	public const int Stmt_If=64;
	public const int Stmt_Loop=65;
	public const int Stmt_Return=66;
	public const int Stmt_Switch=67;
	public const int Stmt_Try=68;
	public const int Stmt_Typedef=69;
	public const int Stmt_Unless=70;
	public const int Stmt_Until=71;
	public const int Stmt_Using=72;
	public const int Stmt_While=73;
	public const int Switch_Item=74;
	public const int Type_Array=75;
	public const int Type_Func=76;
	public const int Type_Ident=77;
	public const int Type_List=78;
	public const int Type_Ref=79;
	public const int Type_Star=80;
	public const int Type_Template=81;
	public const int White_Space=82;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:209:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(209, 1);
		try
		{
			// SugarCpp.g:210:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:210:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(210, 4);
			// SugarCpp.g:210:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:210:4: NEWLINE
					{
					DebugLocation(210, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root571); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(210, 13);
			PushFollow(Follow._global_block_in_root574);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(210, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root576); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 210:30: -> ^( Root global_block )
			{
				DebugLocation(210, 33);
				// SugarCpp.g:210:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(210, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(210, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:213:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(213, 1);
		try
		{
			// SugarCpp.g:214:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:214:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(214, 4);
			// SugarCpp.g:214:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==90||LA3_0==126||LA3_0==134||(LA3_0>=136 && LA3_0<=137)||LA3_0==141||LA3_0==145||LA3_0==150||LA3_0==153||LA3_0==158||LA3_0==163||LA3_0==166||LA3_0==173))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:214:5: node ( NEWLINE )+
					{
					DebugLocation(214, 5);
					PushFollow(Follow._node_in_global_block596);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(214, 10);
					// SugarCpp.g:214:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:214:10: NEWLINE
							{
							DebugLocation(214, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block598); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 214:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(214, 24);
				// SugarCpp.g:214:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(214, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(214, 39);
				// SugarCpp.g:214:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(214, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:217:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(217, 1);
		try
		{
			// SugarCpp.g:218:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:218:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._func_def_in_node621);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:219:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._class_def_in_node626);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:220:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(220, 4);
				PushFollow(Follow._enum_def_in_node631);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:221:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._global_alloc_in_node636);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:222:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._global_using_in_node641);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:223:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._global_typedef_in_node646);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:224:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._import_def_in_node651);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:225:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._namespace_def_in_node656);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(226, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:228:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(228, 1);
		try
		{
			// SugarCpp.g:229:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:229:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(229, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args668); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:230:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(230, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args673); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:231:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(231, 4);
				PushFollow(Follow._ident_in_attribute_args678);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:234:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==137))
			{
				alt10 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(235, 4);
				PushFollow(Follow._ident_in_attribute_item689);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(235, 10);
				// SugarCpp.g:235:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==90))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:235:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(235, 11);
					char_literal18=(IToken)Match(input,90,Follow._90_in_attribute_item692); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal18);

					DebugLocation(235, 15);
					PushFollow(Follow._attribute_args_in_attribute_item694);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(235, 30);
					// SugarCpp.g:235:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==97))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:235:31: ',' attribute_args
							{
							DebugLocation(235, 31);
							char_literal20=(IToken)Match(input,97,Follow._97_in_attribute_item697); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal20);

							DebugLocation(235, 35);
							PushFollow(Follow._attribute_args_in_attribute_item699);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(235, 52);
					char_literal22=(IToken)Match(input,91,Follow._91_in_attribute_item703); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 235:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(235, 61);
					// SugarCpp.g:235:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(235, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(235, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(235, 79);
					// SugarCpp.g:235:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(235, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:236:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(236, 4);
				string_literal23=(IToken)Match(input,137,Follow._137_in_attribute_item721); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_137.Add(string_literal23);

				DebugLocation(236, 12);
				// SugarCpp.g:236:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==90))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(236, 13);
					char_literal24=(IToken)Match(input,90,Follow._90_in_attribute_item724); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal24);

					DebugLocation(236, 17);
					PushFollow(Follow._attribute_args_in_attribute_item726);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(236, 32);
					// SugarCpp.g:236:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==97))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:236:33: ',' attribute_args
							{
							DebugLocation(236, 33);
							char_literal26=(IToken)Match(input,97,Follow._97_in_attribute_item729); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal26);

							DebugLocation(236, 37);
							PushFollow(Follow._attribute_args_in_attribute_item731);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(236, 54);
					char_literal28=(IToken)Match(input,91,Follow._91_in_attribute_item735); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 137, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 236:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(236, 63);
					// SugarCpp.g:236:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(236, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(236, 75);
					adaptor.AddChild(root_1, stream_137.NextNode());
					DebugLocation(236, 83);
					// SugarCpp.g:236:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(236, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:239:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(240, 4);
			// SugarCpp.g:240:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==126))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(240, 5);
					char_literal29=(IToken)Match(input,126,Follow._126_in_attribute760); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_126.Add(char_literal29);

					DebugLocation(240, 9);
					PushFollow(Follow._attribute_item_in_attribute762);
					attribute_item30=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(240, 24);
					// SugarCpp.g:240:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==97))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:25: ',' attribute_item
							{
							DebugLocation(240, 25);
							char_literal31=(IToken)Match(input,97,Follow._97_in_attribute765); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal31);

							DebugLocation(240, 29);
							PushFollow(Follow._attribute_item_in_attribute767);
							attribute_item32=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(240, 46);
					char_literal33=(IToken)Match(input,127,Follow._127_in_attribute771); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_127.Add(char_literal33);

					DebugLocation(240, 50);
					// SugarCpp.g:240:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:50: NEWLINE
							{
							DebugLocation(240, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute773); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:61: -> ( attribute_item )+
			{
				DebugLocation(240, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(240, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:243:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken string_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr44 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree string_literal43_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(244, 4);
			// SugarCpp.g:244:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==126))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:4: attribute
				{
				DebugLocation(244, 4);
				PushFollow(Follow._attribute_in_global_alloc792);
				attribute35=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(244, 15);
			PushFollow(Follow._ident_list_in_global_alloc795);
			ident_list36=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(244, 26);
			// SugarCpp.g:244:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_0 = input.LA(1);

			if ((LA18_0==107))
			{
				alt18 = 1;
			}
			else if ((LA18_0==109))
			{
				alt18 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(244, 28);
				char_literal37=(IToken)Match(input,107,Follow._107_in_global_alloc799); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(char_literal37);

				DebugLocation(244, 32);
				PushFollow(Follow._type_name_in_global_alloc801);
				type_name38=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name38.Tree);
				DebugLocation(244, 42);
				// SugarCpp.g:244:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				int alt16=3;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				switch (input.LA(1))
				{
				case 109:
				case 116:
					{
					alt16 = 1;
					}
					break;
				case 90:
					{
					alt16 = 2;
					}
					break;
				case NEWLINE:
					{
					alt16 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:44: ( '=' | ':=' ) expr
					{
					DebugLocation(244, 44);
					// SugarCpp.g:244:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==116))
					{
						alt15 = 1;
					}
					else if ((LA15_0==109))
					{
						alt15 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:244:45: '='
						{
						DebugLocation(244, 45);
						char_literal39=(IToken)Match(input,116,Follow._116_in_global_alloc806); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_116.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:244:51: ':='
						{
						DebugLocation(244, 51);
						string_literal40=(IToken)Match(input,109,Follow._109_in_global_alloc810); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_109.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(244, 57);
					PushFollow(Follow._expr_in_global_alloc813);
					expr41=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 244:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(244, 65);
						// SugarCpp.g:244:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(244, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(244, 84);
						// SugarCpp.g:244:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(244, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(244, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(244, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(244, 116);
						// SugarCpp.g:244:116: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(244, 118);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(244, 128);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:245:43: bracket_expr_list
					{
					DebugLocation(245, 43);
					PushFollow(Follow._bracket_expr_list_in_global_alloc876);
					bracket_expr_list42=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list42.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, bracket_expr_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 245:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(245, 64);
						// SugarCpp.g:245:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(245, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(245, 85);
						// SugarCpp.g:245:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(245, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(245, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(245, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(245, 117);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:246:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 246:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(246, 20);
						// SugarCpp.g:246:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(246, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(246, 39);
						// SugarCpp.g:246:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(246, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(246, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(246, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(246, 71);
						// SugarCpp.g:246:71: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(246, 73);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:248:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(248, 10);
				string_literal43=(IToken)Match(input,109,Follow._109_in_global_alloc952); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(string_literal43);

				DebugLocation(248, 15);
				// SugarCpp.g:248:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:248:16: expr ( ',' expr )*
				{
				DebugLocation(248, 16);
				PushFollow(Follow._expr_in_global_alloc955);
				expr44=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr44.Tree);
				DebugLocation(248, 21);
				// SugarCpp.g:248:21: ( ',' expr )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==97))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:248:22: ',' expr
						{
						DebugLocation(248, 22);
						char_literal45=(IToken)Match(input,97,Follow._97_in_global_alloc958); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_97.Add(char_literal45);

						DebugLocation(248, 26);
						PushFollow(Follow._expr_in_global_alloc960);
						expr46=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr46.Tree);

						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }


				}



				{
				// AST REWRITE
				// elements: 109, ident_list, attribute, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 248:34: -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(248, 37);
					// SugarCpp.g:248:37: ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_109.NextNode(), root_1);

					DebugLocation(248, 44);
					// SugarCpp.g:248:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(248, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(248, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(248, 66);
					// SugarCpp.g:248:66: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(248, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(248, 78);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(248, 78);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(250, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:252:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal48 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute47 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(252, 1);
		try
		{
			// SugarCpp.g:253:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:253:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(253, 4);
			// SugarCpp.g:253:4: ( attribute )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==126))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:253:4: attribute
				{
				DebugLocation(253, 4);
				PushFollow(Follow._attribute_in_global_using1001);
				attribute47=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute47.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(253, 15);
			string_literal48=(IToken)Match(input,166,Follow._166_in_global_using1004); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_166.Add(string_literal48);

			DebugLocation(253, 23);
			// SugarCpp.g:253:23: ( stmt_using_item )*
			try { DebugEnterSubRule(20);
			while (true)
			{
				int alt20=2;
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==IDENT||LA20_0==153))
				{
					alt20 = 1;
				}


				} finally { DebugExitDecision(20); }
				switch ( alt20 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:253:23: stmt_using_item
					{
					DebugLocation(253, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1006);
					stmt_using_item49=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item49.Tree);

					}
					break;

				default:
					goto loop20;
				}
			}

			loop20:
				;

			} finally { DebugExitSubRule(20); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 253:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(253, 43);
				// SugarCpp.g:253:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(253, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(253, 56);
				// SugarCpp.g:253:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(253, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(253, 67);
				// SugarCpp.g:253:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(253, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(254, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:256:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken char_literal53 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute50 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident52 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name54 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree char_literal53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(256, 1);
		try
		{
			// SugarCpp.g:257:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:257:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(257, 4);
			// SugarCpp.g:257:4: ( attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==126))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:257:4: attribute
				{
				DebugLocation(257, 4);
				PushFollow(Follow._attribute_in_global_typedef1030);
				attribute50=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute50.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(257, 15);
			string_literal51=(IToken)Match(input,163,Follow._163_in_global_typedef1033); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_163.Add(string_literal51);

			DebugLocation(257, 22);
			PushFollow(Follow._ident_in_global_typedef1035);
			ident52=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident52.Tree);
			DebugLocation(257, 28);
			char_literal53=(IToken)Match(input,116,Follow._116_in_global_typedef1037); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(char_literal53);

			DebugLocation(257, 32);
			PushFollow(Follow._type_name_in_global_typedef1039);
			type_name54=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name54.Tree);


			{
			// AST REWRITE
			// elements: type_name, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 257:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(257, 45);
				// SugarCpp.g:257:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(257, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(257, 60);
				// SugarCpp.g:257:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(257, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(257, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(257, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(258, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:260:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal56 = default(IToken);
		IToken STRING57 = default(IToken);
		IToken NEWLINE58 = default(IToken);
		IToken INDENT59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken STRING61 = default(IToken);
		IToken NEWLINE62 = default(IToken);
		IToken DEDENT63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree STRING57_tree = default(CommonTree);
		CommonTree NEWLINE58_tree = default(CommonTree);
		CommonTree INDENT59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree STRING61_tree = default(CommonTree);
		CommonTree NEWLINE62_tree = default(CommonTree);
		CommonTree DEDENT63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(260, 1);
		try
		{
			// SugarCpp.g:261:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(261, 4);
			// SugarCpp.g:261:4: ( attribute )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==126))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:4: attribute
				{
				DebugLocation(261, 4);
				PushFollow(Follow._attribute_in_import_def1063);
				attribute55=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute55.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(261, 15);
			string_literal56=(IToken)Match(input,145,Follow._145_in_import_def1066); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_145.Add(string_literal56);

			DebugLocation(261, 24);
			// SugarCpp.g:261:24: ( STRING )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==STRING))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:24: STRING
				{
				DebugLocation(261, 24);
				STRING57=(IToken)Match(input,STRING,Follow._STRING_in_import_def1068); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING57);


				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(261, 32);
			// SugarCpp.g:261:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			try
			{
				alt28 = dfa28.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:261:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(261, 33);
				// SugarCpp.g:261:33: ( NEWLINE )+
				int cnt24=0;
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==NEWLINE))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch (alt24)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:33: NEWLINE
						{
						DebugLocation(261, 33);
						NEWLINE58=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1072); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE58);


						}
						break;

					default:
						if (cnt24 >= 1)
							goto loop24;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee24 = new EarlyExitException( 24, input );
						DebugRecognitionException(eee24);
						throw eee24;
					}
					cnt24++;
				}
				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(261, 42);
				INDENT59=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1075); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT59);

				DebugLocation(261, 49);
				// SugarCpp.g:261:49: ( NEWLINE )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_0 = input.LA(1);

					if ((LA25_0==NEWLINE))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:49: NEWLINE
						{
						DebugLocation(261, 49);
						NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1077); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE60);


						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }

				DebugLocation(261, 59);
				// SugarCpp.g:261:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==STRING))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:261:60: STRING ( NEWLINE )+
						{
						DebugLocation(261, 60);
						STRING61=(IToken)Match(input,STRING,Follow._STRING_in_import_def1082); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING61);

						DebugLocation(261, 67);
						// SugarCpp.g:261:67: ( NEWLINE )+
						int cnt26=0;
						try { DebugEnterSubRule(26);
						while (true)
						{
							int alt26=2;
							try { DebugEnterDecision(26, false);
							int LA26_0 = input.LA(1);

							if ((LA26_0==NEWLINE))
							{
								alt26 = 1;
							}


							} finally { DebugExitDecision(26); }
							switch (alt26)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:261:67: NEWLINE
								{
								DebugLocation(261, 67);
								NEWLINE62=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1084); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE62);


								}
								break;

							default:
								if (cnt26 >= 1)
									goto loop26;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee26 = new EarlyExitException( 26, input );
								DebugRecognitionException(eee26);
								throw eee26;
							}
							cnt26++;
						}
						loop26:
							;

						} finally { DebugExitSubRule(26); }


						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }

				DebugLocation(261, 78);
				DEDENT63=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1089); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT63);


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(261, 90);
				// SugarCpp.g:261:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(261, 99);
				// SugarCpp.g:261:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(261, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(261, 110);
				// SugarCpp.g:261:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(261, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:264:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal65 = default(IToken);
		IToken char_literal67 = default(IToken);
		IToken char_literal69 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute64 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident66 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal65_tree = default(CommonTree);
		CommonTree char_literal67_tree = default(CommonTree);
		CommonTree char_literal69_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(264, 1);
		try
		{
			// SugarCpp.g:265:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(265, 4);
			// SugarCpp.g:265:4: ( attribute )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==126))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:4: attribute
				{
				DebugLocation(265, 4);
				PushFollow(Follow._attribute_in_enum_def1114);
				attribute64=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute64.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(265, 15);
			string_literal65=(IToken)Match(input,141,Follow._141_in_enum_def1117); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_141.Add(string_literal65);

			DebugLocation(265, 22);
			PushFollow(Follow._ident_in_enum_def1119);
			ident66=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident66.Tree);
			DebugLocation(265, 28);
			char_literal67=(IToken)Match(input,116,Follow._116_in_enum_def1121); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(char_literal67);

			DebugLocation(265, 32);
			// SugarCpp.g:265:32: ( ident ( '|' ident )* )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==IDENT))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:33: ident ( '|' ident )*
				{
				DebugLocation(265, 33);
				PushFollow(Follow._ident_in_enum_def1124);
				ident68=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident68.Tree);
				DebugLocation(265, 39);
				// SugarCpp.g:265:39: ( '|' ident )*
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==170))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch ( alt30 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:265:40: '|' ident
						{
						DebugLocation(265, 40);
						char_literal69=(IToken)Match(input,170,Follow._170_in_enum_def1127); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_170.Add(char_literal69);

						DebugLocation(265, 44);
						PushFollow(Follow._ident_in_enum_def1129);
						ident70=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident70.Tree);

						}
						break;

					default:
						goto loop30;
					}
				}

				loop30:
					;

				} finally { DebugExitSubRule(30); }


				}
				break;

			}
			} finally { DebugExitSubRule(31); }



			{
			// AST REWRITE
			// elements: ident, attribute, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(265, 57);
				// SugarCpp.g:265:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(265, 64);
				// SugarCpp.g:265:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(265, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(265, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(265, 81);
				// SugarCpp.g:265:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(265, 94);
				// SugarCpp.g:265:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(265, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:268:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal72 = default(IToken);
		IToken NEWLINE74 = default(IToken);
		IToken INDENT75 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken DEDENT78 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute71 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block77 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal72_tree = default(CommonTree);
		CommonTree NEWLINE74_tree = default(CommonTree);
		CommonTree INDENT75_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree DEDENT78_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(269, 4);
			// SugarCpp.g:269:4: ( attribute )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==126))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:4: attribute
				{
				DebugLocation(269, 4);
				PushFollow(Follow._attribute_in_namespace_def1162);
				attribute71=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute71.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(269, 15);
			string_literal72=(IToken)Match(input,153,Follow._153_in_namespace_def1165); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_153.Add(string_literal72);

			DebugLocation(269, 27);
			PushFollow(Follow._ident_in_namespace_def1167);
			ident73=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident73.Tree);
			DebugLocation(269, 33);
			// SugarCpp.g:269:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			try
			{
				alt35 = dfa35.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(269, 34);
				// SugarCpp.g:269:34: ( NEWLINE )+
				int cnt33=0;
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==NEWLINE))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch (alt33)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:34: NEWLINE
						{
						DebugLocation(269, 34);
						NEWLINE74=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1170); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE74);


						}
						break;

					default:
						if (cnt33 >= 1)
							goto loop33;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee33 = new EarlyExitException( 33, input );
						DebugRecognitionException(eee33);
						throw eee33;
					}
					cnt33++;
				}
				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(269, 43);
				INDENT75=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1173); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT75);

				DebugLocation(269, 50);
				// SugarCpp.g:269:50: ( NEWLINE )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==NEWLINE))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:269:50: NEWLINE
						{
						DebugLocation(269, 50);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1175); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }

				DebugLocation(269, 59);
				PushFollow(Follow._global_block_in_namespace_def1178);
				global_block77=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block77.Tree);
				DebugLocation(269, 72);
				DEDENT78=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1180); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT78);


				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: global_block, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(269, 84);
				// SugarCpp.g:269:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(269, 96);
				// SugarCpp.g:269:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(269, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(269, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(269, 113);
				// SugarCpp.g:269:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(269, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:272:1: class_def : ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal80 = default(IToken);
		IToken char_literal83 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken NEWLINE87 = default(IToken);
		IToken INDENT88 = default(IToken);
		IToken NEWLINE89 = default(IToken);
		IToken DEDENT91 = default(IToken);
		IToken string_literal92 = default(IToken);
		IToken string_literal93 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal101 = default(IToken);
		IToken NEWLINE103 = default(IToken);
		IToken INDENT104 = default(IToken);
		IToken NEWLINE105 = default(IToken);
		IToken DEDENT107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident100 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal80_tree = default(CommonTree);
		CommonTree char_literal83_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree NEWLINE87_tree = default(CommonTree);
		CommonTree INDENT88_tree = default(CommonTree);
		CommonTree NEWLINE89_tree = default(CommonTree);
		CommonTree DEDENT91_tree = default(CommonTree);
		CommonTree string_literal92_tree = default(CommonTree);
		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal101_tree = default(CommonTree);
		CommonTree NEWLINE103_tree = default(CommonTree);
		CommonTree INDENT104_tree = default(CommonTree);
		CommonTree NEWLINE105_tree = default(CommonTree);
		CommonTree DEDENT107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(272, 1);
		try
		{
			// SugarCpp.g:273:2: ( ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:273:5: ( attribute )? ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			{
			DebugLocation(273, 5);
			// SugarCpp.g:273:5: ( attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==126))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:5: attribute
				{
				DebugLocation(273, 5);
				PushFollow(Follow._attribute_in_class_def1208);
				attribute79=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute79.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(273, 16);
			// SugarCpp.g:273:16: ( 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) | 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==136))
			{
				alt50 = 1;
			}
			else if ((LA50_0==134))
			{
				alt50 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:18: 'class' ident ( generic_parameter )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(273, 18);
				string_literal80=(IToken)Match(input,136,Follow._136_in_class_def1213); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_136.Add(string_literal80);

				DebugLocation(273, 26);
				PushFollow(Follow._ident_in_class_def1215);
				ident81=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident81.Tree);
				DebugLocation(273, 32);
				// SugarCpp.g:273:32: ( generic_parameter )?
				int alt37=2;
				try { DebugEnterSubRule(37);
				try { DebugEnterDecision(37, false);
				int LA37_0 = input.LA(1);

				if ((LA37_0==111))
				{
					alt37 = 1;
				}
				} finally { DebugExitDecision(37); }
				switch (alt37)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:273:33: generic_parameter
					{
					DebugLocation(273, 33);
					PushFollow(Follow._generic_parameter_in_class_def1218);
					generic_parameter82=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter82.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(37); }

				DebugLocation(273, 53);
				// SugarCpp.g:273:53: ( ':' ident ( ',' ident )* )?
				int alt39=2;
				try { DebugEnterSubRule(39);
				try { DebugEnterDecision(39, false);
				int LA39_0 = input.LA(1);

				if ((LA39_0==107))
				{
					alt39 = 1;
				}
				} finally { DebugExitDecision(39); }
				switch (alt39)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:273:54: ':' ident ( ',' ident )*
					{
					DebugLocation(273, 54);
					char_literal83=(IToken)Match(input,107,Follow._107_in_class_def1223); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal83);

					DebugLocation(273, 58);
					PushFollow(Follow._ident_in_class_def1225);
					ident84=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident84.Tree);
					DebugLocation(273, 64);
					// SugarCpp.g:273:64: ( ',' ident )*
					try { DebugEnterSubRule(38);
					while (true)
					{
						int alt38=2;
						try { DebugEnterDecision(38, false);
						int LA38_0 = input.LA(1);

						if ((LA38_0==97))
						{
							alt38 = 1;
						}


						} finally { DebugExitDecision(38); }
						switch ( alt38 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:273:65: ',' ident
							{
							DebugLocation(273, 65);
							char_literal85=(IToken)Match(input,97,Follow._97_in_class_def1228); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal85);

							DebugLocation(273, 69);
							PushFollow(Follow._ident_in_class_def1230);
							ident86=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident86.Tree);

							}
							break;

						default:
							goto loop38;
						}
					}

					loop38:
						;

					} finally { DebugExitSubRule(38); }


					}
					break;

				}
				} finally { DebugExitSubRule(39); }

				DebugLocation(273, 79);
				// SugarCpp.g:273:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt42=2;
				try { DebugEnterSubRule(42);
				try { DebugEnterDecision(42, false);
				try
				{
					alt42 = dfa42.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(42); }
				switch (alt42)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:273:80: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(273, 80);
					// SugarCpp.g:273:80: ( NEWLINE )+
					int cnt40=0;
					try { DebugEnterSubRule(40);
					while (true)
					{
						int alt40=2;
						try { DebugEnterDecision(40, false);
						int LA40_0 = input.LA(1);

						if ((LA40_0==NEWLINE))
						{
							alt40 = 1;
						}


						} finally { DebugExitDecision(40); }
						switch (alt40)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:273:80: NEWLINE
							{
							DebugLocation(273, 80);
							NEWLINE87=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1237); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE87);


							}
							break;

						default:
							if (cnt40 >= 1)
								goto loop40;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee40 = new EarlyExitException( 40, input );
							DebugRecognitionException(eee40);
							throw eee40;
						}
						cnt40++;
					}
					loop40:
						;

					} finally { DebugExitSubRule(40); }

					DebugLocation(273, 89);
					INDENT88=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1240); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT88);

					DebugLocation(273, 96);
					// SugarCpp.g:273:96: ( NEWLINE )*
					try { DebugEnterSubRule(41);
					while (true)
					{
						int alt41=2;
						try { DebugEnterDecision(41, false);
						int LA41_0 = input.LA(1);

						if ((LA41_0==NEWLINE))
						{
							alt41 = 1;
						}


						} finally { DebugExitDecision(41); }
						switch ( alt41 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:273:96: NEWLINE
							{
							DebugLocation(273, 96);
							NEWLINE89=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1242); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE89);


							}
							break;

						default:
							goto loop41;
						}
					}

					loop41:
						;

					} finally { DebugExitSubRule(41); }

					DebugLocation(273, 105);
					PushFollow(Follow._global_block_in_class_def1245);
					global_block90=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block90.Tree);
					DebugLocation(273, 118);
					DEDENT91=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1247); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT91);


					}
					break;

				}
				} finally { DebugExitSubRule(42); }



				{
				// AST REWRITE
				// elements: attribute, global_block, ident, generic_parameter, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 273:127: -> ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(273, 130);
					// SugarCpp.g:273:130: ^( Class ( attribute )? ident ( generic_parameter )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(273, 132);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(273, 138);
					// SugarCpp.g:273:138: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(273, 138);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(273, 149);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(273, 155);
					// SugarCpp.g:273:155: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(273, 155);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(273, 174);
					// SugarCpp.g:273:174: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(273, 175);
						// SugarCpp.g:273:175: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(273, 177);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(273, 188);
						// SugarCpp.g:273:188: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(273, 188);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(273, 198);
					// SugarCpp.g:273:198: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(273, 198);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:274:12: 'case' 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				{
				DebugLocation(274, 12);
				string_literal92=(IToken)Match(input,134,Follow._134_in_class_def1289); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_134.Add(string_literal92);

				DebugLocation(274, 19);
				string_literal93=(IToken)Match(input,136,Follow._136_in_class_def1291); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_136.Add(string_literal93);

				DebugLocation(274, 27);
				PushFollow(Follow._ident_in_class_def1293);
				ident94=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident94.Tree);
				DebugLocation(274, 33);
				// SugarCpp.g:274:33: ( generic_parameter )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==111))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:34: generic_parameter
					{
					DebugLocation(274, 34);
					PushFollow(Follow._generic_parameter_in_class_def1296);
					generic_parameter95=generic_parameter();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter95.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(274, 54);
				// SugarCpp.g:274:54: ( '(' func_args ')' )?
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==90))
				{
					alt44 = 1;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:55: '(' func_args ')'
					{
					DebugLocation(274, 55);
					char_literal96=(IToken)Match(input,90,Follow._90_in_class_def1301); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal96);

					DebugLocation(274, 59);
					PushFollow(Follow._func_args_in_class_def1303);
					func_args97=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args97.Tree);
					DebugLocation(274, 69);
					char_literal98=(IToken)Match(input,91,Follow._91_in_class_def1305); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal98);


					}
					break;

				}
				} finally { DebugExitSubRule(44); }

				DebugLocation(274, 75);
				// SugarCpp.g:274:75: ( ':' ident ( ',' ident )* )?
				int alt46=2;
				try { DebugEnterSubRule(46);
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==107))
				{
					alt46 = 1;
				}
				} finally { DebugExitDecision(46); }
				switch (alt46)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:76: ':' ident ( ',' ident )*
					{
					DebugLocation(274, 76);
					char_literal99=(IToken)Match(input,107,Follow._107_in_class_def1310); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(char_literal99);

					DebugLocation(274, 80);
					PushFollow(Follow._ident_in_class_def1312);
					ident100=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident100.Tree);
					DebugLocation(274, 86);
					// SugarCpp.g:274:86: ( ',' ident )*
					try { DebugEnterSubRule(45);
					while (true)
					{
						int alt45=2;
						try { DebugEnterDecision(45, false);
						int LA45_0 = input.LA(1);

						if ((LA45_0==97))
						{
							alt45 = 1;
						}


						} finally { DebugExitDecision(45); }
						switch ( alt45 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:274:87: ',' ident
							{
							DebugLocation(274, 87);
							char_literal101=(IToken)Match(input,97,Follow._97_in_class_def1315); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal101);

							DebugLocation(274, 91);
							PushFollow(Follow._ident_in_class_def1317);
							ident102=ident();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_ident.Add(ident102.Tree);

							}
							break;

						default:
							goto loop45;
						}
					}

					loop45:
						;

					} finally { DebugExitSubRule(45); }


					}
					break;

				}
				} finally { DebugExitSubRule(46); }

				DebugLocation(274, 101);
				// SugarCpp.g:274:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
				int alt49=2;
				try { DebugEnterSubRule(49);
				try { DebugEnterDecision(49, false);
				try
				{
					alt49 = dfa49.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(49); }
				switch (alt49)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:274:102: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
					{
					DebugLocation(274, 102);
					// SugarCpp.g:274:102: ( NEWLINE )+
					int cnt47=0;
					try { DebugEnterSubRule(47);
					while (true)
					{
						int alt47=2;
						try { DebugEnterDecision(47, false);
						int LA47_0 = input.LA(1);

						if ((LA47_0==NEWLINE))
						{
							alt47 = 1;
						}


						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:274:102: NEWLINE
							{
							DebugLocation(274, 102);
							NEWLINE103=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1324); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE103);


							}
							break;

						default:
							if (cnt47 >= 1)
								goto loop47;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee47 = new EarlyExitException( 47, input );
							DebugRecognitionException(eee47);
							throw eee47;
						}
						cnt47++;
					}
					loop47:
						;

					} finally { DebugExitSubRule(47); }

					DebugLocation(274, 111);
					INDENT104=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1327); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT104);

					DebugLocation(274, 118);
					// SugarCpp.g:274:118: ( NEWLINE )*
					try { DebugEnterSubRule(48);
					while (true)
					{
						int alt48=2;
						try { DebugEnterDecision(48, false);
						int LA48_0 = input.LA(1);

						if ((LA48_0==NEWLINE))
						{
							alt48 = 1;
						}


						} finally { DebugExitDecision(48); }
						switch ( alt48 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:274:118: NEWLINE
							{
							DebugLocation(274, 118);
							NEWLINE105=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1329); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE105);


							}
							break;

						default:
							goto loop48;
						}
					}

					loop48:
						;

					} finally { DebugExitSubRule(48); }

					DebugLocation(274, 127);
					PushFollow(Follow._global_block_in_class_def1332);
					global_block106=global_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_global_block.Add(global_block106.Tree);
					DebugLocation(274, 140);
					DEDENT107=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1334); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT107);


					}
					break;

				}
				} finally { DebugExitSubRule(49); }



				{
				// AST REWRITE
				// elements: generic_parameter, global_block, ident, 134, ident, func_args, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 274:149: -> ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
					DebugLocation(274, 152);
					// SugarCpp.g:274:152: ^( Class 'case' ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(274, 154);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

					DebugLocation(274, 160);
					adaptor.AddChild(root_1, stream_134.NextNode());
					DebugLocation(274, 167);
					// SugarCpp.g:274:167: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(274, 167);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(274, 178);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(274, 184);
					// SugarCpp.g:274:184: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(274, 184);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(274, 203);
					// SugarCpp.g:274:203: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(274, 203);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(274, 214);
					// SugarCpp.g:274:214: ( ^( Ident_List ( ident )* ) )?
					if (stream_ident.HasNext)
					{
						DebugLocation(274, 215);
						// SugarCpp.g:274:215: ^( Ident_List ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(274, 217);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

						DebugLocation(274, 228);
						// SugarCpp.g:274:228: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(274, 228);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}

					}
					stream_ident.Reset();
					DebugLocation(274, 238);
					// SugarCpp.g:274:238: ( global_block )?
					if (stream_global_block.HasNext)
					{
						DebugLocation(274, 238);
						adaptor.AddChild(root_1, stream_global_block.NextTree());

					}
					stream_global_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:278:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 14);
		TraceIn("type_list", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(278, 1);
		try
		{
			// SugarCpp.g:279:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:279:4: type_name ( ',' type_name )*
			{
			DebugLocation(279, 4);
			PushFollow(Follow._type_name_in_type_list1387);
			type_name108=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name108.Tree);
			DebugLocation(279, 14);
			// SugarCpp.g:279:14: ( ',' type_name )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==97))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:279:15: ',' type_name
					{
					DebugLocation(279, 15);
					char_literal109=(IToken)Match(input,97,Follow._97_in_type_list1390); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal109);

					DebugLocation(279, 19);
					PushFollow(Follow._type_name_in_type_list1392);
					type_name110=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name110.Tree);

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 279:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(279, 34);
				// SugarCpp.g:279:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(279, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(279, 46);
				// SugarCpp.g:279:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(279, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 14);
			LeaveRule("type_list", 14);
			LeaveRule_type_list();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:282:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken char_literal115 = default(IToken);
		IToken char_literal116 = default(IToken);
		IToken char_literal118 = default(IToken);
		IToken string_literal119 = default(IToken);
		IToken char_literal121 = default(IToken);
		IToken char_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list117 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		CommonTree char_literal116_tree = default(CommonTree);
		CommonTree char_literal118_tree = default(CommonTree);
		CommonTree string_literal119_tree = default(CommonTree);
		CommonTree char_literal121_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(282, 1);
		try
		{
			// SugarCpp.g:283:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt56=2;
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==137||LA56_0==150||LA56_0==158))
			{
				alt56 = 1;
			}
			else if ((LA56_0==90))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:283:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(283, 4);
				PushFollow(Follow._type_single_in_type_name1414);
				type_single111=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single111.Tree);
				DebugLocation(283, 16);
				// SugarCpp.g:283:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt53=2;
				try { DebugEnterSubRule(53);
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==101))
				{
					alt53 = 1;
				}
				else if ((LA53_0==DEDENT||LA53_0==IDENT||LA53_0==NEWLINE||(LA53_0>=90 && LA53_0<=91)||LA53_0==97||(LA53_0>=109 && LA53_0<=110)||LA53_0==116||LA53_0==119||(LA53_0>=143 && LA53_0<=144)||LA53_0==146||(LA53_0>=164 && LA53_0<=165)||LA53_0==169||LA53_0==173))
				{
					alt53 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(53); }
				switch (alt53)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:283:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(283, 18);
					string_literal112=(IToken)Match(input,101,Follow._101_in_type_name1418); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal112);

					DebugLocation(283, 23);
					// SugarCpp.g:283:23: ( type_name | '(' ')' )
					int alt52=2;
					try { DebugEnterSubRule(52);
					try { DebugEnterDecision(52, false);
					int LA52_0 = input.LA(1);

					if ((LA52_0==IDENT||LA52_0==137||LA52_0==150||LA52_0==158))
					{
						alt52 = 1;
					}
					else if ((LA52_0==90))
					{
						int LA52_2 = input.LA(2);

						if ((LA52_2==91))
						{
							int LA52_3 = input.LA(3);

							if ((LA52_3==101))
							{
								alt52 = 1;
							}
							else if ((LA52_3==DEDENT||LA52_3==IDENT||LA52_3==NEWLINE||(LA52_3>=90 && LA52_3<=91)||LA52_3==97||(LA52_3>=109 && LA52_3<=110)||LA52_3==116||LA52_3==119||(LA52_3>=143 && LA52_3<=144)||LA52_3==146||(LA52_3>=164 && LA52_3<=165)||LA52_3==169||LA52_3==173))
							{
								alt52 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 52, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA52_2==IDENT||LA52_2==90||LA52_2==137||LA52_2==150||LA52_2==158))
						{
							alt52 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 52, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(52); }
					switch (alt52)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:283:24: type_name
						{
						DebugLocation(283, 24);
						PushFollow(Follow._type_name_in_type_name1421);
						type_name113=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name113.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:283:36: '(' ')'
						{
						DebugLocation(283, 36);
						char_literal114=(IToken)Match(input,90,Follow._90_in_type_name1425); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_90.Add(char_literal114);

						DebugLocation(283, 40);
						char_literal115=(IToken)Match(input,91,Follow._91_in_type_name1427); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_91.Add(char_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(52); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 283:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(283, 48);
						// SugarCpp.g:283:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(283, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(283, 60);
						// SugarCpp.g:283:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(283, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(283, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(283, 85);
						// SugarCpp.g:283:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(283, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:284:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 284:9: -> type_single
					{
						DebugLocation(284, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(53); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:286:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(286, 4);
				char_literal116=(IToken)Match(input,90,Follow._90_in_type_name1468); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal116);

				DebugLocation(286, 8);
				// SugarCpp.g:286:8: ( type_list )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==IDENT||LA54_0==90||LA54_0==137||LA54_0==150||LA54_0==158))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:286:8: type_list
					{
					DebugLocation(286, 8);
					PushFollow(Follow._type_list_in_type_name1470);
					type_list117=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list117.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }

				DebugLocation(286, 19);
				char_literal118=(IToken)Match(input,91,Follow._91_in_type_name1473); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal118);

				DebugLocation(286, 23);
				string_literal119=(IToken)Match(input,101,Follow._101_in_type_name1475); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(string_literal119);

				DebugLocation(286, 28);
				// SugarCpp.g:286:28: ( type_name | '(' ')' )
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==137||LA55_0==150||LA55_0==158))
				{
					alt55 = 1;
				}
				else if ((LA55_0==90))
				{
					int LA55_2 = input.LA(2);

					if ((LA55_2==91))
					{
						int LA55_3 = input.LA(3);

						if ((LA55_3==101))
						{
							alt55 = 1;
						}
						else if ((LA55_3==DEDENT||LA55_3==IDENT||LA55_3==NEWLINE||(LA55_3>=90 && LA55_3<=91)||LA55_3==97||(LA55_3>=109 && LA55_3<=110)||LA55_3==116||LA55_3==119||(LA55_3>=143 && LA55_3<=144)||LA55_3==146||(LA55_3>=164 && LA55_3<=165)||LA55_3==169||LA55_3==173))
						{
							alt55 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 55, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA55_2==IDENT||LA55_2==90||LA55_2==137||LA55_2==150||LA55_2==158))
					{
						alt55 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 55, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 55, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:286:29: type_name
					{
					DebugLocation(286, 29);
					PushFollow(Follow._type_name_in_type_name1478);
					type_name120=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name120.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:286:41: '(' ')'
					{
					DebugLocation(286, 41);
					char_literal121=(IToken)Match(input,90,Follow._90_in_type_name1482); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal121);

					DebugLocation(286, 45);
					char_literal122=(IToken)Match(input,91,Follow._91_in_type_name1484); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal122);


					}
					break;

				}
				} finally { DebugExitSubRule(55); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 286:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(286, 53);
					// SugarCpp.g:286:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(286, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(286, 65);
					// SugarCpp.g:286:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(286, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(286, 76);
					// SugarCpp.g:286:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(286, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:289:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 16);
		TraceIn("type_single", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal125 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken char_literal131 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal125_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree char_literal131_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(289, 1);
		try
		{
			// SugarCpp.g:290:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:290:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(290, 4);
			PushFollow(Follow._type_star_in_type_single1508);
			type_star123=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star123.Tree);
			DebugLocation(290, 14);
			// SugarCpp.g:290:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt60=3;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			switch (input.LA(1))
			{
			case 88:
				{
				alt60 = 1;
				}
				break;
			case 126:
				{
				alt60 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case NEWLINE:
			case 90:
			case 91:
			case 97:
			case 101:
			case 109:
			case 110:
			case 116:
			case 119:
			case 143:
			case 144:
			case 146:
			case 164:
			case 165:
			case 169:
			case 173:
				{
				alt60 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:290:16: '&'
				{
				DebugLocation(290, 16);
				char_literal124=(IToken)Match(input,88,Follow._88_in_type_single1512); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal124);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 290:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(290, 23);
					// SugarCpp.g:290:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(290, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(290, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:291:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(291, 7);
				char_literal125=(IToken)Match(input,126,Follow._126_in_type_single1528); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_126.Add(char_literal125);

				DebugLocation(291, 11);
				// SugarCpp.g:291:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt59=2;
				try { DebugEnterSubRule(59);
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==IDENT||LA59_0==NUMBER||LA59_0==STRING||LA59_0==83||LA59_0==88||LA59_0==90||LA59_0==92||(LA59_0>=94 && LA59_0<=95)||(LA59_0>=98 && LA59_0<=99)||(LA59_0>=125 && LA59_0<=126)||LA59_0==149||LA59_0==152||(LA59_0>=154 && LA59_0<=155)||LA59_0==173))
				{
					alt59 = 1;
				}
				else if ((LA59_0==97||LA59_0==127))
				{
					alt59 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 59, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(59); }
				switch (alt59)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:13: expr ( ',' expr )* ']'
					{
					DebugLocation(291, 13);
					PushFollow(Follow._expr_in_type_single1532);
					expr126=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr126.Tree);
					DebugLocation(291, 18);
					// SugarCpp.g:291:18: ( ',' expr )*
					try { DebugEnterSubRule(57);
					while (true)
					{
						int alt57=2;
						try { DebugEnterDecision(57, false);
						int LA57_0 = input.LA(1);

						if ((LA57_0==97))
						{
							alt57 = 1;
						}


						} finally { DebugExitDecision(57); }
						switch ( alt57 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:291:19: ',' expr
							{
							DebugLocation(291, 19);
							char_literal127=(IToken)Match(input,97,Follow._97_in_type_single1535); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal127);

							DebugLocation(291, 23);
							PushFollow(Follow._expr_in_type_single1537);
							expr128=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr128.Tree);

							}
							break;

						default:
							goto loop57;
						}
					}

					loop57:
						;

					} finally { DebugExitSubRule(57); }

					DebugLocation(291, 30);
					char_literal129=(IToken)Match(input,127,Follow._127_in_type_single1541); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_127.Add(char_literal129);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 291:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(291, 37);
						// SugarCpp.g:291:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(291, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(291, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(291, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(291, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:292:13: ( ',' )* ']'
					{
					DebugLocation(292, 13);
					// SugarCpp.g:292:13: ( ',' )*
					try { DebugEnterSubRule(58);
					while (true)
					{
						int alt58=2;
						try { DebugEnterDecision(58, false);
						int LA58_0 = input.LA(1);

						if ((LA58_0==97))
						{
							alt58 = 1;
						}


						} finally { DebugExitDecision(58); }
						switch ( alt58 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:292:13: ','
							{
							DebugLocation(292, 13);
							char_literal130=(IToken)Match(input,97,Follow._97_in_type_single1566); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal130);


							}
							break;

						default:
							goto loop58;
						}
					}

					loop58:
						;

					} finally { DebugExitSubRule(58); }

					DebugLocation(292, 18);
					char_literal131=(IToken)Match(input,127,Follow._127_in_type_single1569); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_127.Add(char_literal131);



					{
					// AST REWRITE
					// elements: type_star, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 292:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(292, 25);
						// SugarCpp.g:292:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(292, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(292, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(292, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(292, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(59); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:294:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 294:7: -> type_star
				{
					DebugLocation(294, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 16);
			LeaveRule("type_single", 16);
			LeaveRule_type_single();
		}
		DebugLocation(296, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:298:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 17);
		TraceIn("type_no_array", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star132 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(298, 1);
		try
		{
			// SugarCpp.g:299:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:299:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(299, 4);
			PushFollow(Follow._type_star_in_type_no_array1616);
			type_star132=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star132.Tree);
			DebugLocation(299, 14);
			// SugarCpp.g:299:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt61=2;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			int LA61_0 = input.LA(1);

			if ((LA61_0==88))
			{
				alt61 = 1;
			}
			else if ((LA61_0==90||LA61_0==126))
			{
				alt61 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:299:16: '&'
				{
				DebugLocation(299, 16);
				char_literal133=(IToken)Match(input,88,Follow._88_in_type_no_array1620); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal133);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 299:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(299, 23);
					// SugarCpp.g:299:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(299, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(299, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:300:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 300:7: -> type_star
				{
					DebugLocation(300, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 17);
			LeaveRule("type_no_array", 17);
			LeaveRule_type_no_array();
		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:304:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 18);
		TraceIn("type_star", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal135 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal135_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(304, 1);
		try
		{
			// SugarCpp.g:305:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:305:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(305, 4);
			PushFollow(Follow._type_template_type_in_type_star1655);
			type_template_type134=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type134.Tree);
			DebugLocation(305, 23);
			// SugarCpp.g:305:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==92))
			{
				alt63 = 1;
			}
			else if ((LA63_0==DEDENT||LA63_0==IDENT||LA63_0==NEWLINE||LA63_0==88||(LA63_0>=90 && LA63_0<=91)||LA63_0==97||LA63_0==101||(LA63_0>=109 && LA63_0<=110)||LA63_0==116||LA63_0==119||LA63_0==126||(LA63_0>=143 && LA63_0<=144)||LA63_0==146||(LA63_0>=164 && LA63_0<=165)||LA63_0==169||LA63_0==173))
			{
				alt63 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 63, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:305:25: ( '*' )+
				{
				DebugLocation(305, 25);
				// SugarCpp.g:305:25: ( '*' )+
				int cnt62=0;
				try { DebugEnterSubRule(62);
				while (true)
				{
					int alt62=2;
					try { DebugEnterDecision(62, false);
					int LA62_0 = input.LA(1);

					if ((LA62_0==92))
					{
						alt62 = 1;
					}


					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:305:25: '*'
						{
						DebugLocation(305, 25);
						char_literal135=(IToken)Match(input,92,Follow._92_in_type_star1659); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal135);


						}
						break;

					default:
						if (cnt62 >= 1)
							goto loop62;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee62 = new EarlyExitException( 62, input );
						DebugRecognitionException(eee62);
						throw eee62;
					}
					cnt62++;
				}
				loop62:
					;

				} finally { DebugExitSubRule(62); }



				{
				// AST REWRITE
				// elements: 92, type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 305:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(305, 33);
					// SugarCpp.g:305:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(305, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(305, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(305, 64);
					if (!(stream_92.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_92.HasNext )
					{
						DebugLocation(305, 64);
						adaptor.AddChild(root_1, stream_92.NextNode());

					}
					stream_92.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:306:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 306:10: -> type_template_type
				{
					DebugLocation(306, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 18);
			LeaveRule("type_star", 18);
			LeaveRule_type_star();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:310:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 19);
		TraceIn("type_template_type", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal137 = default(IToken);
		IToken char_literal139 = default(IToken);
		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name138 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		CommonTree char_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(311, 4);
			PushFollow(Follow._type_ident_in_type_template_type1705);
			type_ident136=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident136.Tree);
			DebugLocation(311, 15);
			// SugarCpp.g:311:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==111))
			{
				alt66 = 1;
			}
			else if ((LA66_0==DEDENT||LA66_0==IDENT||LA66_0==NEWLINE||LA66_0==88||(LA66_0>=90 && LA66_0<=92)||LA66_0==97||LA66_0==101||(LA66_0>=109 && LA66_0<=110)||LA66_0==116||LA66_0==119||LA66_0==126||(LA66_0>=143 && LA66_0<=144)||LA66_0==146||(LA66_0>=164 && LA66_0<=165)||LA66_0==169||LA66_0==173))
			{
				alt66 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(311, 17);
				char_literal137=(IToken)Match(input,111,Follow._111_in_type_template_type1709); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal137);

				DebugLocation(311, 21);
				// SugarCpp.g:311:21: ( type_name ( ',' type_name )* )?
				int alt65=2;
				try { DebugEnterSubRule(65);
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==IDENT||LA65_0==90||LA65_0==137||LA65_0==150||LA65_0==158))
				{
					alt65 = 1;
				}
				} finally { DebugExitDecision(65); }
				switch (alt65)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:311:22: type_name ( ',' type_name )*
					{
					DebugLocation(311, 22);
					PushFollow(Follow._type_name_in_type_template_type1712);
					type_name138=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name138.Tree);
					DebugLocation(311, 32);
					// SugarCpp.g:311:32: ( ',' type_name )*
					try { DebugEnterSubRule(64);
					while (true)
					{
						int alt64=2;
						try { DebugEnterDecision(64, false);
						int LA64_0 = input.LA(1);

						if ((LA64_0==97))
						{
							alt64 = 1;
						}


						} finally { DebugExitDecision(64); }
						switch ( alt64 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:311:33: ',' type_name
							{
							DebugLocation(311, 33);
							char_literal139=(IToken)Match(input,97,Follow._97_in_type_template_type1715); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal139);

							DebugLocation(311, 37);
							PushFollow(Follow._type_name_in_type_template_type1717);
							type_name140=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name140.Tree);

							}
							break;

						default:
							goto loop64;
						}
					}

					loop64:
						;

					} finally { DebugExitSubRule(64); }


					}
					break;

				}
				} finally { DebugExitSubRule(65); }

				DebugLocation(311, 51);
				char_literal141=(IToken)Match(input,119,Follow._119_in_type_template_type1723); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(char_literal141);



				{
				// AST REWRITE
				// elements: type_name, type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(311, 58);
					// SugarCpp.g:311:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(311, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(311, 85);
					// SugarCpp.g:311:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(311, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:8: -> type_ident
				{
					DebugLocation(312, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 19);
			LeaveRule("type_template_type", 19);
			LeaveRule_type_template_type();
		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:316:1: type_ident : ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 20);
		TraceIn("type_ident", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal142 = default(IToken);
		IToken string_literal143 = default(IToken);
		IToken string_literal144 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal142_tree = default(CommonTree);
		CommonTree string_literal143_tree = default(CommonTree);
		CommonTree string_literal144_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_158=new RewriteRuleITokenStream(adaptor,"token 158");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(316, 1);
		try
		{
			// SugarCpp.g:317:2: ( ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:317:4: ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(317, 4);
			// SugarCpp.g:317:4: ( 'const' )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==137))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:4: 'const'
				{
				DebugLocation(317, 4);
				string_literal142=(IToken)Match(input,137,Follow._137_in_type_ident1763); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_137.Add(string_literal142);


				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(317, 13);
			// SugarCpp.g:317:13: ( 'struct' )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==158))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:13: 'struct'
				{
				DebugLocation(317, 13);
				string_literal143=(IToken)Match(input,158,Follow._158_in_type_ident1766); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_158.Add(string_literal143);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(317, 23);
			// SugarCpp.g:317:23: ( 'long' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==150))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:317:23: 'long'
				{
				DebugLocation(317, 23);
				string_literal144=(IToken)Match(input,150,Follow._150_in_type_ident1769); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_150.Add(string_literal144);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(317, 31);
			PushFollow(Follow._ident_in_type_ident1772);
			ident145=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident145.Tree);


			{
			// AST REWRITE
			// elements: 137, ident, 150, 158
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 317:37: -> ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(317, 40);
				// SugarCpp.g:317:40: ^( Type_Ident ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(317, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(317, 53);
				// SugarCpp.g:317:53: ( 'const' )?
				if (stream_137.HasNext)
				{
					DebugLocation(317, 53);
					adaptor.AddChild(root_1, stream_137.NextNode());

				}
				stream_137.Reset();
				DebugLocation(317, 62);
				// SugarCpp.g:317:62: ( 'struct' )?
				if (stream_158.HasNext)
				{
					DebugLocation(317, 62);
					adaptor.AddChild(root_1, stream_158.NextNode());

				}
				stream_158.Reset();
				DebugLocation(317, 72);
				// SugarCpp.g:317:72: ( 'long' )?
				if (stream_150.HasNext)
				{
					DebugLocation(317, 72);
					adaptor.AddChild(root_1, stream_150.NextNode());

				}
				stream_150.Reset();
				DebugLocation(317, 80);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 20);
			LeaveRule("type_ident", 20);
			LeaveRule_type_ident();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:320:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 21);
		TraceIn("generic_parameter_inside", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: ident ( ',' ident )*
			{
			DebugLocation(321, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1800);
			ident146=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident146.Tree);
			DebugLocation(321, 10);
			// SugarCpp.g:321:10: ( ',' ident )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==97))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:11: ',' ident
					{
					DebugLocation(321, 11);
					char_literal147=(IToken)Match(input,97,Follow._97_in_generic_parameter_inside1803); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal147);

					DebugLocation(321, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1805);
					ident148=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident148.Tree);

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(321, 26);
				// SugarCpp.g:321:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(321, 47);
				// SugarCpp.g:321:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(321, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 21);
			LeaveRule("generic_parameter_inside", 21);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:324:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 22);
		TraceIn("generic_parameter", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal149 = default(IToken);
		IToken char_literal151 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside150 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal149_tree = default(CommonTree);
		CommonTree char_literal151_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(324, 1);
		try
		{
			// SugarCpp.g:325:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:325:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(325, 4);
			char_literal149=(IToken)Match(input,111,Follow._111_in_generic_parameter1827); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_111.Add(char_literal149);

			DebugLocation(325, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1829);
			generic_parameter_inside150=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside150.Tree);
			DebugLocation(325, 33);
			char_literal151=(IToken)Match(input,119,Follow._119_in_generic_parameter1831); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_119.Add(char_literal151);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 325:37: -> generic_parameter_inside
			{
				DebugLocation(325, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 22);
			LeaveRule("generic_parameter", 22);
			LeaveRule_generic_parameter();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:328:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 23);
		TraceIn("func_args", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:329:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(329, 4);
			PushFollow(Follow._func_args_item_in_func_args1846);
			func_args_item152=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item152.Tree);
			DebugLocation(329, 19);
			// SugarCpp.g:329:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_0 = input.LA(1);

				if ((LA71_0==97))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:20: ',' func_args_item
					{
					DebugLocation(329, 20);
					char_literal153=(IToken)Match(input,97,Follow._97_in_func_args1849); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal153);

					DebugLocation(329, 24);
					PushFollow(Follow._func_args_item_in_func_args1851);
					func_args_item154=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item154.Tree);

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 329:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(329, 44);
				// SugarCpp.g:329:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(329, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(329, 56);
				// SugarCpp.g:329:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(329, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 23);
			LeaveRule("func_args", 23);
			LeaveRule_func_args();
		}
		DebugLocation(330, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:332:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 24);
		TraceIn("func_args_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		IToken char_literal158 = default(IToken);
		IToken string_literal159 = default(IToken);
		IToken string_literal162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree string_literal162_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(332, 1);
		try
		{
			// SugarCpp.g:333:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt74=2;
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==IDENT))
			{
				alt74 = 1;
			}
			else if ((LA74_0==109))
			{
				alt74 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:333:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(333, 4);
				PushFollow(Follow._ident_list_in_func_args_item1873);
				ident_list155=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list155.Tree);
				DebugLocation(333, 15);
				char_literal156=(IToken)Match(input,107,Follow._107_in_func_args_item1875); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(char_literal156);

				DebugLocation(333, 19);
				PushFollow(Follow._type_name_in_func_args_item1877);
				type_name157=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name157.Tree);
				DebugLocation(333, 29);
				// SugarCpp.g:333:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt73=3;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				switch (input.LA(1))
				{
				case 109:
				case 116:
					{
					alt73 = 1;
					}
					break;
				case 90:
					{
					alt73 = 2;
					}
					break;
				case 91:
				case 97:
					{
					alt73 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:333:31: ( '=' | ':=' ) expr
					{
					DebugLocation(333, 31);
					// SugarCpp.g:333:31: ( '=' | ':=' )
					int alt72=2;
					try { DebugEnterSubRule(72);
					try { DebugEnterDecision(72, false);
					int LA72_0 = input.LA(1);

					if ((LA72_0==116))
					{
						alt72 = 1;
					}
					else if ((LA72_0==109))
					{
						alt72 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(72); }
					switch (alt72)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:333:32: '='
						{
						DebugLocation(333, 32);
						char_literal158=(IToken)Match(input,116,Follow._116_in_func_args_item1882); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_116.Add(char_literal158);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:333:38: ':='
						{
						DebugLocation(333, 38);
						string_literal159=(IToken)Match(input,109,Follow._109_in_func_args_item1886); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_109.Add(string_literal159);


						}
						break;

					}
					} finally { DebugExitSubRule(72); }

					DebugLocation(333, 44);
					PushFollow(Follow._expr_in_func_args_item1889);
					expr160=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr160.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(333, 53);
						// SugarCpp.g:333:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(333, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(333, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(333, 93);
						// SugarCpp.g:333:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(333, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:334:33: bracket_expr_list
					{
					DebugLocation(334, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item1940);
					bracket_expr_list161=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list161.Tree);


					{
					// AST REWRITE
					// elements: type_name, bracket_expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 334:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(334, 55);
						// SugarCpp.g:334:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(334, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(334, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(334, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(334, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:335:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 335:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(335, 18);
						// SugarCpp.g:335:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(335, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(335, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(335, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(335, 58);
						// SugarCpp.g:335:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(335, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:337:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(337, 8);
				string_literal162=(IToken)Match(input,109,Follow._109_in_func_args_item2000); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal162_tree = (CommonTree)adaptor.Create(string_literal162);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal162_tree, root_0);
				}
				DebugLocation(337, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2004);
				modify_expr163=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr163.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 24);
			LeaveRule("func_args_item", 24);
			LeaveRule_func_args_item();
		}
		DebugLocation(338, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:340:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 25);
		TraceIn("operator", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set164 = default(IToken);

		CommonTree set164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(340, 1);
		try
		{
			// SugarCpp.g:341:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(341, 2);

			set164=(IToken)input.LT(1);
			if (input.LA(1)==92||input.LA(1)==94||input.LA(1)==98||input.LA(1)==105)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set164));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 25);
			LeaveRule("operator", 25);
			LeaveRule_operator();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:344:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 26);
		TraceIn("func_name", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal166 = default(IToken);
		IToken char_literal168 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal166_tree = default(CommonTree);
		CommonTree char_literal168_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt75=2;
			try { DebugEnterDecision(75, false);
			int LA75_0 = input.LA(1);

			if ((LA75_0==IDENT))
			{
				alt75 = 1;
			}
			else if ((LA75_0==90))
			{
				alt75 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:345:4: ident
				{
				DebugLocation(345, 4);
				PushFollow(Follow._ident_in_func_name2038);
				ident165=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident165.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 345:10: -> ident
				{
					DebugLocation(345, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:346:4: '(' operator ')'
				{
				DebugLocation(346, 4);
				char_literal166=(IToken)Match(input,90,Follow._90_in_func_name2047); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal166);

				DebugLocation(346, 8);
				PushFollow(Follow._operator_in_func_name2049);
				operator167=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator167.Tree);
				DebugLocation(346, 17);
				char_literal168=(IToken)Match(input,91,Follow._91_in_func_name2051); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal168);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 346:21: -> operator
				{
					DebugLocation(346, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 26);
			LeaveRule("func_name", 26);
			LeaveRule_func_name();
		}
		DebugLocation(347, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:349:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 27);
		TraceIn("func_type", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name169 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(349, 1);
		try
		{
			// SugarCpp.g:350:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:350:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(350, 4);
			PushFollow(Follow._type_name_in_func_type2066);
			type_name169=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name169.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 27);
			LeaveRule("func_type", 27);
			LeaveRule_func_type();
		}
		DebugLocation(351, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:353:1: func_def : ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 28);
		TraceIn("func_def", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal172 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken char_literal177 = default(IToken);
		IToken NEWLINE178 = default(IToken);
		IToken char_literal180 = default(IToken);
		IToken NEWLINE182 = default(IToken);
		IToken INDENT183 = default(IToken);
		IToken NEWLINE184 = default(IToken);
		IToken NEWLINE186 = default(IToken);
		IToken DEDENT187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type171 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name173 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item185 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		CommonTree NEWLINE178_tree = default(CommonTree);
		CommonTree char_literal180_tree = default(CommonTree);
		CommonTree NEWLINE182_tree = default(CommonTree);
		CommonTree INDENT183_tree = default(CommonTree);
		CommonTree NEWLINE184_tree = default(CommonTree);
		CommonTree NEWLINE186_tree = default(CommonTree);
		CommonTree DEDENT187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(353, 4);
		try
		{
			// SugarCpp.g:354:2: ( ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:354:4: ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			{
			DebugLocation(354, 4);
			// SugarCpp.g:354:4: ( attribute )?
			int alt76=2;
			try { DebugEnterSubRule(76);
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==126))
			{
				alt76 = 1;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:4: attribute
				{
				DebugLocation(354, 4);
				PushFollow(Follow._attribute_in_func_def2077);
				attribute170=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute170.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(76); }

			DebugLocation(354, 15);
			// SugarCpp.g:354:15: ( func_type )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			try
			{
				alt77 = dfa77.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:15: func_type
				{
				DebugLocation(354, 15);
				PushFollow(Follow._func_type_in_func_def2080);
				func_type171=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type171.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(354, 26);
			// SugarCpp.g:354:26: ( '~' )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==173))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:26: '~'
				{
				DebugLocation(354, 26);
				char_literal172=(IToken)Match(input,173,Follow._173_in_func_def2083); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(char_literal172);


				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(354, 31);
			PushFollow(Follow._func_name_in_func_def2086);
			func_name173=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name173.Tree);
			DebugLocation(354, 41);
			// SugarCpp.g:354:41: ( generic_parameter )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==111))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:41: generic_parameter
				{
				DebugLocation(354, 41);
				PushFollow(Follow._generic_parameter_in_func_def2088);
				generic_parameter174=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter174.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(354, 60);
			char_literal175=(IToken)Match(input,90,Follow._90_in_func_def2091); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_90.Add(char_literal175);

			DebugLocation(354, 64);
			// SugarCpp.g:354:64: ( func_args )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==IDENT||LA80_0==109))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:64: func_args
				{
				DebugLocation(354, 64);
				PushFollow(Follow._func_args_in_func_def2093);
				func_args176=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args176.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(354, 75);
			char_literal177=(IToken)Match(input,91,Follow._91_in_func_def2096); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal177);

			DebugLocation(354, 79);
			// SugarCpp.g:354:79: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			int alt87=2;
			try { DebugEnterSubRule(87);
			try { DebugEnterDecision(87, false);
			int LA87_0 = input.LA(1);

			if ((LA87_0==NEWLINE))
			{
				alt87 = 1;
			}
			else if ((LA87_0==116))
			{
				alt87 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(87); }
			switch (alt87)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:354:81: ( NEWLINE )+ stmt_block
				{
				DebugLocation(354, 81);
				// SugarCpp.g:354:81: ( NEWLINE )+
				int cnt81=0;
				try { DebugEnterSubRule(81);
				while (true)
				{
					int alt81=2;
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==NEWLINE))
					{
						alt81 = 1;
					}


					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:354:81: NEWLINE
						{
						DebugLocation(354, 81);
						NEWLINE178=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2100); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE178);


						}
						break;

					default:
						if (cnt81 >= 1)
							goto loop81;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee81 = new EarlyExitException( 81, input );
						DebugRecognitionException(eee81);
						throw eee81;
					}
					cnt81++;
				}
				loop81:
					;

				} finally { DebugExitSubRule(81); }

				DebugLocation(354, 90);
				PushFollow(Follow._stmt_block_in_func_def2103);
				stmt_block179=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block179.Tree);


				{
				// AST REWRITE
				// elements: 173, func_type, func_name, func_args, generic_parameter, stmt_block, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 354:101: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(354, 104);
					// SugarCpp.g:354:104: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(354, 106);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(354, 115);
					// SugarCpp.g:354:115: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(354, 115);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(354, 126);
					// SugarCpp.g:354:126: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(354, 126);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(354, 137);
					// SugarCpp.g:354:137: ( '~' )?
					if (stream_173.HasNext)
					{
						DebugLocation(354, 137);
						adaptor.AddChild(root_1, stream_173.NextNode());

					}
					stream_173.Reset();
					DebugLocation(354, 142);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(354, 152);
					// SugarCpp.g:354:152: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(354, 152);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(354, 171);
					// SugarCpp.g:354:171: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(354, 171);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(354, 182);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:355:24: '=' ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(355, 24);
				char_literal180=(IToken)Match(input,116,Follow._116_in_func_def2153); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(char_literal180);

				DebugLocation(355, 28);
				// SugarCpp.g:355:28: ( where_expr -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt86=2;
				try { DebugEnterSubRule(86);
				try { DebugEnterDecision(86, false);
				int LA86_0 = input.LA(1);

				if ((LA86_0==IDENT||LA86_0==NUMBER||LA86_0==STRING||LA86_0==83||LA86_0==88||LA86_0==90||LA86_0==92||(LA86_0>=94 && LA86_0<=95)||(LA86_0>=98 && LA86_0<=99)||(LA86_0>=125 && LA86_0<=126)||LA86_0==149||LA86_0==152||(LA86_0>=154 && LA86_0<=155)||LA86_0==173))
				{
					alt86 = 1;
				}
				else if ((LA86_0==NEWLINE))
				{
					alt86 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 86, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(86); }
				switch (alt86)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:355:30: where_expr
					{
					DebugLocation(355, 30);
					PushFollow(Follow._where_expr_in_func_def2157);
					where_expr181=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr181.Tree);


					{
					// AST REWRITE
					// elements: func_name, func_type, func_args, attribute, where_expr, generic_parameter, 173
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 355:42: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
						DebugLocation(355, 45);
						// SugarCpp.g:355:45: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(355, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(355, 56);
						// SugarCpp.g:355:56: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(355, 56);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(355, 67);
						// SugarCpp.g:355:67: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(355, 67);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(355, 78);
						// SugarCpp.g:355:78: ( '~' )?
						if (stream_173.HasNext)
						{
							DebugLocation(355, 78);
							adaptor.AddChild(root_1, stream_173.NextNode());

						}
						stream_173.Reset();
						DebugLocation(355, 83);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(355, 93);
						// SugarCpp.g:355:93: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(355, 93);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(355, 112);
						// SugarCpp.g:355:112: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(355, 112);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(355, 123);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:356:27: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(356, 27);
					// SugarCpp.g:356:27: ( NEWLINE )+
					int cnt82=0;
					try { DebugEnterSubRule(82);
					while (true)
					{
						int alt82=2;
						try { DebugEnterDecision(82, false);
						int LA82_0 = input.LA(1);

						if ((LA82_0==NEWLINE))
						{
							alt82 = 1;
						}


						} finally { DebugExitDecision(82); }
						switch (alt82)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:356:27: NEWLINE
							{
							DebugLocation(356, 27);
							NEWLINE182=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2211); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE182);


							}
							break;

						default:
							if (cnt82 >= 1)
								goto loop82;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee82 = new EarlyExitException( 82, input );
							DebugRecognitionException(eee82);
							throw eee82;
						}
						cnt82++;
					}
					loop82:
						;

					} finally { DebugExitSubRule(82); }

					DebugLocation(356, 36);
					INDENT183=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2214); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT183);

					DebugLocation(356, 43);
					// SugarCpp.g:356:43: ( NEWLINE )*
					try { DebugEnterSubRule(83);
					while (true)
					{
						int alt83=2;
						try { DebugEnterDecision(83, false);
						int LA83_0 = input.LA(1);

						if ((LA83_0==NEWLINE))
						{
							alt83 = 1;
						}


						} finally { DebugExitDecision(83); }
						switch ( alt83 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:356:43: NEWLINE
							{
							DebugLocation(356, 43);
							NEWLINE184=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2216); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE184);


							}
							break;

						default:
							goto loop83;
						}
					}

					loop83:
						;

					} finally { DebugExitSubRule(83); }

					DebugLocation(356, 52);
					// SugarCpp.g:356:52: ( match_item ( NEWLINE )+ )+
					int cnt85=0;
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==170))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch (alt85)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:356:53: match_item ( NEWLINE )+
							{
							DebugLocation(356, 53);
							PushFollow(Follow._match_item_in_func_def2220);
							match_item185=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item185.Tree);
							DebugLocation(356, 64);
							// SugarCpp.g:356:64: ( NEWLINE )+
							int cnt84=0;
							try { DebugEnterSubRule(84);
							while (true)
							{
								int alt84=2;
								try { DebugEnterDecision(84, false);
								int LA84_0 = input.LA(1);

								if ((LA84_0==NEWLINE))
								{
									alt84 = 1;
								}


								} finally { DebugExitDecision(84); }
								switch (alt84)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:356:64: NEWLINE
									{
									DebugLocation(356, 64);
									NEWLINE186=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2222); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE186);


									}
									break;

								default:
									if (cnt84 >= 1)
										goto loop84;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee84 = new EarlyExitException( 84, input );
									DebugRecognitionException(eee84);
									throw eee84;
								}
								cnt84++;
							}
							loop84:
								;

							} finally { DebugExitSubRule(84); }


							}
							break;

						default:
							if (cnt85 >= 1)
								goto loop85;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee85 = new EarlyExitException( 85, input );
							DebugRecognitionException(eee85);
							throw eee85;
						}
						cnt85++;
					}
					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(356, 75);
					DEDENT187=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2227); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT187);



					{
					// AST REWRITE
					// elements: attribute, func_type, generic_parameter, func_args, 173, match_item, func_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 356:82: -> ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(356, 85);
						// SugarCpp.g:356:85: ^( Func_Def ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(356, 87);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(356, 96);
						// SugarCpp.g:356:96: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(356, 96);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(356, 107);
						// SugarCpp.g:356:107: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(356, 107);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(356, 118);
						// SugarCpp.g:356:118: ( '~' )?
						if (stream_173.HasNext)
						{
							DebugLocation(356, 118);
							adaptor.AddChild(root_1, stream_173.NextNode());

						}
						stream_173.Reset();
						DebugLocation(356, 123);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(356, 133);
						// SugarCpp.g:356:133: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(356, 133);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(356, 152);
						// SugarCpp.g:356:152: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(356, 152);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(356, 163);
						// SugarCpp.g:356:163: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(356, 165);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(356, 176);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(356, 176);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(86); }


				}
				break;

			}
			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 28);
			LeaveRule("func_def", 28);
			LeaveRule_func_def();
		}
		DebugLocation(359, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:361:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 29);
		TraceIn("stmt_block_item", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE189 = default(IToken);
		IToken NEWLINE191 = default(IToken);
		IToken char_literal192 = default(IToken);
		IToken NEWLINE193 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE189_tree = default(CommonTree);
		CommonTree NEWLINE191_tree = default(CommonTree);
		CommonTree char_literal192_tree = default(CommonTree);
		CommonTree NEWLINE193_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(361, 1);
		try
		{
			// SugarCpp.g:362:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt92=2;
			try { DebugEnterDecision(92, false);
			int LA92_0 = input.LA(1);

			if ((LA92_0==138||(LA92_0>=142 && LA92_0<=144)||LA92_0==151||LA92_0==159||LA92_0==162||(LA92_0>=164 && LA92_0<=165)||LA92_0==169))
			{
				alt92 = 1;
			}
			else if ((LA92_0==IDENT||LA92_0==83||LA92_0==88||LA92_0==90||LA92_0==92||(LA92_0>=94 && LA92_0<=95)||(LA92_0>=98 && LA92_0<=99)||LA92_0==125||LA92_0==155||LA92_0==157||LA92_0==163||LA92_0==166||LA92_0==173))
			{
				alt92 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 92, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(92); }
			switch (alt92)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:362:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(362, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2320);
				stmt_complex188=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex188.Tree);
				DebugLocation(362, 17);
				// SugarCpp.g:362:17: ( NEWLINE )+
				int cnt88=0;
				try { DebugEnterSubRule(88);
				while (true)
				{
					int alt88=2;
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==NEWLINE))
					{
						alt88 = 1;
					}


					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:362:17: NEWLINE
						{
						DebugLocation(362, 17);
						NEWLINE189=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2322); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE189);


						}
						break;

					default:
						if (cnt88 >= 1)
							goto loop88;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee88 = new EarlyExitException( 88, input );
						DebugRecognitionException(eee88);
						throw eee88;
					}
					cnt88++;
				}
				loop88:
					;

				} finally { DebugExitSubRule(88); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 362:26: -> stmt_complex
				{
					DebugLocation(362, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:363:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(363, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2332);
				stmt_simple190=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple190.Tree);
				DebugLocation(363, 16);
				// SugarCpp.g:363:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==NEWLINE))
				{
					alt91 = 1;
				}
				else if ((LA91_0==110))
				{
					alt91 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:363:17: ( NEWLINE )+
					{
					DebugLocation(363, 17);
					// SugarCpp.g:363:17: ( NEWLINE )+
					int cnt89=0;
					try { DebugEnterSubRule(89);
					while (true)
					{
						int alt89=2;
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==NEWLINE))
						{
							alt89 = 1;
						}


						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:363:17: NEWLINE
							{
							DebugLocation(363, 17);
							NEWLINE191=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2335); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE191);


							}
							break;

						default:
							if (cnt89 >= 1)
								goto loop89;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee89 = new EarlyExitException( 89, input );
							DebugRecognitionException(eee89);
							throw eee89;
						}
						cnt89++;
					}
					loop89:
						;

					} finally { DebugExitSubRule(89); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:363:28: ';' ( NEWLINE )*
					{
					DebugLocation(363, 28);
					char_literal192=(IToken)Match(input,110,Follow._110_in_stmt_block_item2340); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_110.Add(char_literal192);

					DebugLocation(363, 32);
					// SugarCpp.g:363:32: ( NEWLINE )*
					try { DebugEnterSubRule(90);
					while (true)
					{
						int alt90=2;
						try { DebugEnterDecision(90, false);
						int LA90_0 = input.LA(1);

						if ((LA90_0==NEWLINE))
						{
							alt90 = 1;
						}


						} finally { DebugExitDecision(90); }
						switch ( alt90 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:363:32: NEWLINE
							{
							DebugLocation(363, 32);
							NEWLINE193=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2342); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE193);


							}
							break;

						default:
							goto loop90;
						}
					}

					loop90:
						;

					} finally { DebugExitSubRule(90); }


					}
					break;

				}
				} finally { DebugExitSubRule(91); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 363:42: -> stmt_simple
				{
					DebugLocation(363, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 29);
			LeaveRule("stmt_block_item", 29);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:366:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 30);
		TraceIn("stmt_block", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT194 = default(IToken);
		IToken NEWLINE195 = default(IToken);
		IToken DEDENT197 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT194_tree = default(CommonTree);
		CommonTree NEWLINE195_tree = default(CommonTree);
		CommonTree DEDENT197_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(366, 1);
		try
		{
			// SugarCpp.g:367:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:367:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(367, 4);
			INDENT194=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2359); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT194);

			DebugLocation(367, 11);
			// SugarCpp.g:367:11: ( NEWLINE )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_0 = input.LA(1);

				if ((LA93_0==NEWLINE))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:11: NEWLINE
					{
					DebugLocation(367, 11);
					NEWLINE195=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2361); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE195);


					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }

			DebugLocation(367, 20);
			// SugarCpp.g:367:20: ( stmt_block_item )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_0 = input.LA(1);

				if ((LA94_0==IDENT||LA94_0==83||LA94_0==88||LA94_0==90||LA94_0==92||(LA94_0>=94 && LA94_0<=95)||(LA94_0>=98 && LA94_0<=99)||LA94_0==125||LA94_0==138||(LA94_0>=142 && LA94_0<=144)||LA94_0==151||LA94_0==155||LA94_0==157||LA94_0==159||(LA94_0>=162 && LA94_0<=166)||LA94_0==169||LA94_0==173))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:20: stmt_block_item
					{
					DebugLocation(367, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2364);
					stmt_block_item196=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item196.Tree);

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }

			DebugLocation(367, 37);
			DEDENT197=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2367); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT197);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 367:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(367, 47);
				// SugarCpp.g:367:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(367, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(367, 60);
				// SugarCpp.g:367:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(367, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 30);
			LeaveRule("stmt_block", 30);
			LeaveRule_stmt_block();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:370:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 31);
		TraceIn("stmt", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex199 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(370, 1);
		try
		{
			// SugarCpp.g:371:2: ( stmt_simple | stmt_complex )
			int alt95=2;
			try { DebugEnterDecision(95, false);
			int LA95_0 = input.LA(1);

			if ((LA95_0==IDENT||LA95_0==83||LA95_0==88||LA95_0==90||LA95_0==92||(LA95_0>=94 && LA95_0<=95)||(LA95_0>=98 && LA95_0<=99)||LA95_0==125||LA95_0==155||LA95_0==157||LA95_0==163||LA95_0==166||LA95_0==173))
			{
				alt95 = 1;
			}
			else if ((LA95_0==138||(LA95_0>=142 && LA95_0<=144)||LA95_0==151||LA95_0==159||LA95_0==162||(LA95_0>=164 && LA95_0<=165)||LA95_0==169))
			{
				alt95 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(95); }
			switch (alt95)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:371:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(371, 4);
				PushFollow(Follow._stmt_simple_in_stmt2387);
				stmt_simple198=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple198.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:372:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(372, 4);
				PushFollow(Follow._stmt_complex_in_stmt2392);
				stmt_complex199=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex199.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 31);
			LeaveRule("stmt", 31);
			LeaveRule_stmt();
		}
		DebugLocation(373, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:375:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 32);
		TraceIn("stmt_simple", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr200 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(375, 1);
		try
		{
			// SugarCpp.g:376:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:376:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(376, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2403);
			stmt_expr200=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr200.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 32);
			LeaveRule("stmt_simple", 32);
			LeaveRule_stmt_simple();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:379:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 33);
		TraceIn("stmt_complex", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for202 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer206 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(379, 1);
		try
		{
			// SugarCpp.g:380:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt96=6;
			try { DebugEnterDecision(96, false);
			switch (input.LA(1))
			{
			case 144:
			case 164:
				{
				alt96 = 1;
				}
				break;
			case 143:
				{
				alt96 = 2;
				}
				break;
			case 151:
			case 165:
			case 169:
				{
				alt96 = 3;
				}
				break;
			case 162:
				{
				alt96 = 4;
				}
				break;
			case 159:
				{
				alt96 = 5;
				}
				break;
			case 138:
			case 142:
				{
				alt96 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:380:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(380, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2414);
				stmt_if201=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if201.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:381:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2419);
				stmt_for202=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for202.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:382:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2424);
				stmt_while203=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while203.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:383:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(383, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2429);
				stmt_try204=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try204.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:384:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2434);
				stmt_switch205=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch205.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:385:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2439);
				stmt_defer206=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer206.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 33);
			LeaveRule("stmt_complex", 33);
			LeaveRule_stmt_complex();
		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:388:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 34);
		TraceIn("stmt_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal207 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken string_literal211 = default(IToken);
		IToken string_literal213 = default(IToken);
		IToken string_literal215 = default(IToken);
		IToken char_literal217 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr208 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item218 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal207_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree char_literal217_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(388, 1);
		try
		{
			// SugarCpp.g:389:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:389:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(389, 4);
			// SugarCpp.g:389:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:389:5: a= stmt_expr_item
			{
			DebugLocation(389, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2453);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 389:22: -> $a
			{
				DebugLocation(389, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(389, 29);
			// SugarCpp.g:389:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=6;
				try { DebugEnterDecision(98, false);
				switch (input.LA(1))
				{
				case 144:
					{
					alt98 = 1;
					}
					break;
				case 164:
					{
					alt98 = 2;
					}
					break;
				case 169:
					{
					alt98 = 3;
					}
					break;
				case 165:
					{
					alt98 = 4;
					}
					break;
				case 143:
					{
					alt98 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:389:31: 'if' expr
					{
					DebugLocation(389, 31);
					string_literal207=(IToken)Match(input,144,Follow._144_in_stmt_expr2463); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_144.Add(string_literal207);

					DebugLocation(389, 36);
					PushFollow(Follow._expr_in_stmt_expr2465);
					expr208=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr208.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 389:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(389, 44);
						// SugarCpp.g:389:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(389, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(389, 59);
						// SugarCpp.g:389:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(389, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(389, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:390:13: 'unless' expr
					{
					DebugLocation(390, 13);
					string_literal209=(IToken)Match(input,164,Follow._164_in_stmt_expr2494); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_164.Add(string_literal209);

					DebugLocation(390, 22);
					PushFollow(Follow._expr_in_stmt_expr2496);
					expr210=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr210.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(390, 30);
						// SugarCpp.g:390:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(390, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(390, 49);
						// SugarCpp.g:390:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(390, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:391:13: 'while' expr
					{
					DebugLocation(391, 13);
					string_literal211=(IToken)Match(input,169,Follow._169_in_stmt_expr2525); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_169.Add(string_literal211);

					DebugLocation(391, 21);
					PushFollow(Follow._expr_in_stmt_expr2527);
					expr212=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr212.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 391:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(391, 29);
						// SugarCpp.g:391:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(391, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(391, 47);
						// SugarCpp.g:391:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(391, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(391, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:392:13: 'until' expr
					{
					DebugLocation(392, 13);
					string_literal213=(IToken)Match(input,165,Follow._165_in_stmt_expr2556); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal213);

					DebugLocation(392, 21);
					PushFollow(Follow._expr_in_stmt_expr2558);
					expr214=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr214.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(392, 29);
						// SugarCpp.g:392:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(392, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(392, 47);
						// SugarCpp.g:392:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(392, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:393:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(393, 13);
					string_literal215=(IToken)Match(input,143,Follow._143_in_stmt_expr2587); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_143.Add(string_literal215);

					DebugLocation(393, 19);
					PushFollow(Follow._for_item_in_stmt_expr2589);
					for_item216=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item216.Tree);
					DebugLocation(393, 28);
					// SugarCpp.g:393:28: ( ',' for_item )*
					try { DebugEnterSubRule(97);
					while (true)
					{
						int alt97=2;
						try { DebugEnterDecision(97, false);
						int LA97_0 = input.LA(1);

						if ((LA97_0==97))
						{
							alt97 = 1;
						}


						} finally { DebugExitDecision(97); }
						switch ( alt97 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:393:29: ',' for_item
							{
							DebugLocation(393, 29);
							char_literal217=(IToken)Match(input,97,Follow._97_in_stmt_expr2592); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal217);

							DebugLocation(393, 33);
							PushFollow(Follow._for_item_in_stmt_expr2594);
							for_item218=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item218.Tree);

							}
							break;

						default:
							goto loop97;
						}
					}

					loop97:
						;

					} finally { DebugExitSubRule(97); }



					{
					// AST REWRITE
					// elements: stmt_expr, for_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(393, 47);
						// SugarCpp.g:393:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(393, 58);
						// SugarCpp.g:393:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(393, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(393, 68);
						// SugarCpp.g:393:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(393, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 34);
			LeaveRule("stmt_expr", 34);
			LeaveRule_stmt_expr();
		}
		DebugLocation(395, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:397:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 35);
		TraceIn("stmt_expr_item", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify223 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(397, 1);
		try
		{
			// SugarCpp.g:398:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt99=5;
			try { DebugEnterDecision(99, false);
			try
			{
				alt99 = dfa99.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:398:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(398, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2636);
				stmt_alloc219=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc219.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:399:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(399, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2641);
				stmt_return220=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return220.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:400:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(400, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2646);
				stmt_using221=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using221.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:401:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(401, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2651);
				stmt_typedef222=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef222.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:402:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(402, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2656);
				stmt_modify223=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify223.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 35);
			LeaveRule("stmt_expr_item", 35);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(403, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:405:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 36);
		TraceIn("stmt_defer", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal224 = default(IToken);
		IToken string_literal226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal224_tree = default(CommonTree);
		CommonTree string_literal226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(405, 1);
		try
		{
			// SugarCpp.g:406:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_0 = input.LA(1);

			if ((LA100_0==138))
			{
				alt100 = 1;
			}
			else if ((LA100_0==142))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:406:4: 'defer' stmt
				{
				DebugLocation(406, 4);
				string_literal224=(IToken)Match(input,138,Follow._138_in_stmt_defer2667); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_138.Add(string_literal224);

				DebugLocation(406, 12);
				PushFollow(Follow._stmt_in_stmt_defer2669);
				stmt225=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt225.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 406:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(406, 20);
					// SugarCpp.g:406:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(406, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(406, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:407:4: 'finally' stmt
				{
				DebugLocation(407, 4);
				string_literal226=(IToken)Match(input,142,Follow._142_in_stmt_defer2682); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal226);

				DebugLocation(407, 14);
				PushFollow(Follow._stmt_in_stmt_defer2684);
				stmt227=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt227.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 407:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(407, 22);
					// SugarCpp.g:407:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(407, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(407, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 36);
			LeaveRule("stmt_defer", 36);
			LeaveRule_stmt_defer();
		}
		DebugLocation(408, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:410:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 37);
		TraceIn("stmt_typedef", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name231 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(410, 1);
		try
		{
			// SugarCpp.g:411:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:411:4: 'type' ident '=' type_name
			{
			DebugLocation(411, 4);
			string_literal228=(IToken)Match(input,163,Follow._163_in_stmt_typedef2703); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_163.Add(string_literal228);

			DebugLocation(411, 11);
			PushFollow(Follow._ident_in_stmt_typedef2705);
			ident229=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident229.Tree);
			DebugLocation(411, 17);
			char_literal230=(IToken)Match(input,116,Follow._116_in_stmt_typedef2707); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_116.Add(char_literal230);

			DebugLocation(411, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2709);
			type_name231=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name231.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 411:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(411, 34);
				// SugarCpp.g:411:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(411, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(411, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(411, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 37);
			LeaveRule("stmt_typedef", 37);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(412, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:414:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 38);
		TraceIn("stmt_using_item", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal233_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(414, 36);
		try
		{
			// SugarCpp.g:414:16: ( ident | 'namespace' )
			int alt101=2;
			try { DebugEnterDecision(101, false);
			int LA101_0 = input.LA(1);

			if ((LA101_0==IDENT))
			{
				alt101 = 1;
			}
			else if ((LA101_0==153))
			{
				alt101 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(414, 18);
				PushFollow(Follow._ident_in_stmt_using_item2728);
				ident232=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident232.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:414:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(414, 26);
				string_literal233=(IToken)Match(input,153,Follow._153_in_stmt_using_item2732); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal233_tree = (CommonTree)adaptor.Create(string_literal233);
				adaptor.AddChild(root_0, string_literal233_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 38);
			LeaveRule("stmt_using_item", 38);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(414, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:415:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 39);
		TraceIn("stmt_using", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal234 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item235 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal234_tree = default(CommonTree);
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(415, 1);
		try
		{
			// SugarCpp.g:416:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:416:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(416, 4);
			string_literal234=(IToken)Match(input,166,Follow._166_in_stmt_using2740); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_166.Add(string_literal234);

			DebugLocation(416, 12);
			// SugarCpp.g:416:12: ( stmt_using_item )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==IDENT||LA102_0==153))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:416:12: stmt_using_item
					{
					DebugLocation(416, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2742);
					stmt_using_item235=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item235.Tree);

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 416:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(416, 32);
				// SugarCpp.g:416:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(416, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(416, 45);
				// SugarCpp.g:416:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(416, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 39);
			LeaveRule("stmt_using", 39);
			LeaveRule_stmt_using();
		}
		DebugLocation(417, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:419:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 40);
		TraceIn("stmt_return", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal236 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr237 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal236_tree = default(CommonTree);
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(419, 1);
		try
		{
			// SugarCpp.g:420:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:420:4: 'return' ( expr )?
			{
			DebugLocation(420, 4);
			string_literal236=(IToken)Match(input,157,Follow._157_in_stmt_return2763); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_157.Add(string_literal236);

			DebugLocation(420, 13);
			// SugarCpp.g:420:13: ( expr )?
			int alt103=2;
			try { DebugEnterSubRule(103);
			try { DebugEnterDecision(103, false);
			int LA103_0 = input.LA(1);

			if ((LA103_0==IDENT||LA103_0==NUMBER||LA103_0==STRING||LA103_0==83||LA103_0==88||LA103_0==90||LA103_0==92||(LA103_0>=94 && LA103_0<=95)||(LA103_0>=98 && LA103_0<=99)||(LA103_0>=125 && LA103_0<=126)||LA103_0==149||LA103_0==152||(LA103_0>=154 && LA103_0<=155)||LA103_0==173))
			{
				alt103 = 1;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:420:13: expr
				{
				DebugLocation(420, 13);
				PushFollow(Follow._expr_in_stmt_return2765);
				expr237=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr237.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(103); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 420:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(420, 22);
				// SugarCpp.g:420:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(420, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(420, 36);
				// SugarCpp.g:420:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(420, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 40);
			LeaveRule("stmt_return", 40);
			LeaveRule_stmt_return();
		}
		DebugLocation(421, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:423:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 41);
		TraceIn("inline_stmt_block", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal239 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple240 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal239_tree = default(CommonTree);
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(423, 1);
		try
		{
			// SugarCpp.g:424:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:424:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(424, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2786);
			stmt_simple238=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple238.Tree);
			DebugLocation(424, 16);
			// SugarCpp.g:424:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=2;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==110))
				{
					alt104 = 1;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:424:17: ';' stmt_simple
					{
					DebugLocation(424, 17);
					char_literal239=(IToken)Match(input,110,Follow._110_in_inline_stmt_block2789); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_110.Add(char_literal239);

					DebugLocation(424, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2791);
					stmt_simple240=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple240.Tree);

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 424:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(424, 38);
				// SugarCpp.g:424:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(424, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(424, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(424, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 41);
			LeaveRule("inline_stmt_block", 41);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(425, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:427:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 42);
		TraceIn("stmt_if", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal241 = default(IToken);
		IToken NEWLINE243 = default(IToken);
		IToken NEWLINE245 = default(IToken);
		IToken string_literal246 = default(IToken);
		IToken NEWLINE247 = default(IToken);
		IToken string_literal249 = default(IToken);
		IToken string_literal251 = default(IToken);
		IToken NEWLINE253 = default(IToken);
		IToken NEWLINE255 = default(IToken);
		IToken string_literal256 = default(IToken);
		IToken NEWLINE257 = default(IToken);
		IToken string_literal259 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block258 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree NEWLINE243_tree = default(CommonTree);
		CommonTree NEWLINE245_tree = default(CommonTree);
		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree NEWLINE247_tree = default(CommonTree);
		CommonTree string_literal249_tree = default(CommonTree);
		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree NEWLINE253_tree = default(CommonTree);
		CommonTree NEWLINE255_tree = default(CommonTree);
		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree NEWLINE257_tree = default(CommonTree);
		CommonTree string_literal259_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(427, 1);
		try
		{
			// SugarCpp.g:428:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt115=2;
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==144))
			{
				alt115 = 1;
			}
			else if ((LA115_0==164))
			{
				alt115 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:428:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(428, 4);
				string_literal241=(IToken)Match(input,144,Follow._144_in_stmt_if2813); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_144.Add(string_literal241);

				DebugLocation(428, 9);
				PushFollow(Follow._expr_in_stmt_if2815);
				expr242=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr242.Tree);
				DebugLocation(428, 14);
				// SugarCpp.g:428:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt109=2;
				try { DebugEnterSubRule(109);
				try { DebugEnterDecision(109, false);
				int LA109_0 = input.LA(1);

				if ((LA109_0==NEWLINE))
				{
					alt109 = 1;
				}
				else if ((LA109_0==160))
				{
					alt109 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(109); }
				switch (alt109)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:428:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(428, 15);
					// SugarCpp.g:428:15: ( NEWLINE )+
					int cnt105=0;
					try { DebugEnterSubRule(105);
					while (true)
					{
						int alt105=2;
						try { DebugEnterDecision(105, false);
						int LA105_0 = input.LA(1);

						if ((LA105_0==NEWLINE))
						{
							alt105 = 1;
						}


						} finally { DebugExitDecision(105); }
						switch (alt105)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:428:15: NEWLINE
							{
							DebugLocation(428, 15);
							NEWLINE243=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2818); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE243);


							}
							break;

						default:
							if (cnt105 >= 1)
								goto loop105;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee105 = new EarlyExitException( 105, input );
							DebugRecognitionException(eee105);
							throw eee105;
						}
						cnt105++;
					}
					loop105:
						;

					} finally { DebugExitSubRule(105); }

					DebugLocation(428, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2821);
					stmt_block244=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block244.Tree);
					DebugLocation(428, 35);
					// SugarCpp.g:428:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt108=2;
					try { DebugEnterSubRule(108);
					try { DebugEnterDecision(108, false);
					try
					{
						alt108 = dfa108.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(108); }
					switch (alt108)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:428:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(428, 36);
						// SugarCpp.g:428:36: ( NEWLINE )*
						try { DebugEnterSubRule(106);
						while (true)
						{
							int alt106=2;
							try { DebugEnterDecision(106, false);
							int LA106_0 = input.LA(1);

							if ((LA106_0==NEWLINE))
							{
								alt106 = 1;
							}


							} finally { DebugExitDecision(106); }
							switch ( alt106 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:428:36: NEWLINE
								{
								DebugLocation(428, 36);
								NEWLINE245=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2824); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE245);


								}
								break;

							default:
								goto loop106;
							}
						}

						loop106:
							;

						} finally { DebugExitSubRule(106); }

						DebugLocation(428, 45);
						string_literal246=(IToken)Match(input,140,Follow._140_in_stmt_if2827); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_140.Add(string_literal246);

						DebugLocation(428, 52);
						// SugarCpp.g:428:52: ( NEWLINE )+
						int cnt107=0;
						try { DebugEnterSubRule(107);
						while (true)
						{
							int alt107=2;
							try { DebugEnterDecision(107, false);
							int LA107_0 = input.LA(1);

							if ((LA107_0==NEWLINE))
							{
								alt107 = 1;
							}


							} finally { DebugExitDecision(107); }
							switch (alt107)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:428:52: NEWLINE
								{
								DebugLocation(428, 52);
								NEWLINE247=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2829); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE247);


								}
								break;

							default:
								if (cnt107 >= 1)
									goto loop107;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee107 = new EarlyExitException( 107, input );
								DebugRecognitionException(eee107);
								throw eee107;
							}
							cnt107++;
						}
						loop107:
							;

						} finally { DebugExitSubRule(107); }

						DebugLocation(428, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2832);
						stmt_block248=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block248.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(108); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 428:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(428, 77);
						// SugarCpp.g:428:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(428, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(428, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(428, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(428, 103);
						// SugarCpp.g:428:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(428, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:429:16: 'then' inline_stmt_block
					{
					DebugLocation(429, 16);
					string_literal249=(IToken)Match(input,160,Follow._160_in_stmt_if2864); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal249);

					DebugLocation(429, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2866);
					inline_stmt_block250=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block250.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 429:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(429, 44);
						// SugarCpp.g:429:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(429, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(429, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(429, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(109); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:431:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(431, 4);
				string_literal251=(IToken)Match(input,164,Follow._164_in_stmt_if2887); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_164.Add(string_literal251);

				DebugLocation(431, 13);
				PushFollow(Follow._expr_in_stmt_if2889);
				expr252=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr252.Tree);
				DebugLocation(431, 18);
				// SugarCpp.g:431:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt114=2;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==NEWLINE))
				{
					alt114 = 1;
				}
				else if ((LA114_0==160))
				{
					alt114 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 114, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:431:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(431, 19);
					// SugarCpp.g:431:19: ( NEWLINE )+
					int cnt110=0;
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=2;
						try { DebugEnterDecision(110, false);
						int LA110_0 = input.LA(1);

						if ((LA110_0==NEWLINE))
						{
							alt110 = 1;
						}


						} finally { DebugExitDecision(110); }
						switch (alt110)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:431:19: NEWLINE
							{
							DebugLocation(431, 19);
							NEWLINE253=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2892); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE253);


							}
							break;

						default:
							if (cnt110 >= 1)
								goto loop110;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee110 = new EarlyExitException( 110, input );
							DebugRecognitionException(eee110);
							throw eee110;
						}
						cnt110++;
					}
					loop110:
						;

					} finally { DebugExitSubRule(110); }

					DebugLocation(431, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2895);
					stmt_block254=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block254.Tree);
					DebugLocation(431, 39);
					// SugarCpp.g:431:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt113=2;
					try { DebugEnterSubRule(113);
					try { DebugEnterDecision(113, false);
					try
					{
						alt113 = dfa113.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(113); }
					switch (alt113)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:431:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(431, 40);
						// SugarCpp.g:431:40: ( NEWLINE )*
						try { DebugEnterSubRule(111);
						while (true)
						{
							int alt111=2;
							try { DebugEnterDecision(111, false);
							int LA111_0 = input.LA(1);

							if ((LA111_0==NEWLINE))
							{
								alt111 = 1;
							}


							} finally { DebugExitDecision(111); }
							switch ( alt111 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:431:40: NEWLINE
								{
								DebugLocation(431, 40);
								NEWLINE255=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2898); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE255);


								}
								break;

							default:
								goto loop111;
							}
						}

						loop111:
							;

						} finally { DebugExitSubRule(111); }

						DebugLocation(431, 49);
						string_literal256=(IToken)Match(input,140,Follow._140_in_stmt_if2901); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_140.Add(string_literal256);

						DebugLocation(431, 56);
						// SugarCpp.g:431:56: ( NEWLINE )+
						int cnt112=0;
						try { DebugEnterSubRule(112);
						while (true)
						{
							int alt112=2;
							try { DebugEnterDecision(112, false);
							int LA112_0 = input.LA(1);

							if ((LA112_0==NEWLINE))
							{
								alt112 = 1;
							}


							} finally { DebugExitDecision(112); }
							switch (alt112)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:431:56: NEWLINE
								{
								DebugLocation(431, 56);
								NEWLINE257=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2903); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE257);


								}
								break;

							default:
								if (cnt112 >= 1)
									goto loop112;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee112 = new EarlyExitException( 112, input );
								DebugRecognitionException(eee112);
								throw eee112;
							}
							cnt112++;
						}
						loop112:
							;

						} finally { DebugExitSubRule(112); }

						DebugLocation(431, 65);
						PushFollow(Follow._stmt_block_in_stmt_if2906);
						stmt_block258=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block258.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(113); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 431:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(431, 81);
						// SugarCpp.g:431:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(431, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(431, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(431, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(431, 111);
						// SugarCpp.g:431:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(431, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:432:20: 'then' inline_stmt_block
					{
					DebugLocation(432, 20);
					string_literal259=(IToken)Match(input,160,Follow._160_in_stmt_if2942); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal259);

					DebugLocation(432, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2944);
					inline_stmt_block260=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block260.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(432, 48);
						// SugarCpp.g:432:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(432, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(432, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 42);
			LeaveRule("stmt_if", 42);
			LeaveRule_stmt_if();
		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:436:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 43);
		TraceIn("stmt_while", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal261 = default(IToken);
		IToken NEWLINE263 = default(IToken);
		IToken string_literal265 = default(IToken);
		IToken string_literal267 = default(IToken);
		IToken NEWLINE269 = default(IToken);
		IToken string_literal271 = default(IToken);
		IToken string_literal273 = default(IToken);
		IToken NEWLINE275 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block270 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block272 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block276 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree NEWLINE263_tree = default(CommonTree);
		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal267_tree = default(CommonTree);
		CommonTree NEWLINE269_tree = default(CommonTree);
		CommonTree string_literal271_tree = default(CommonTree);
		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree NEWLINE275_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(436, 1);
		try
		{
			// SugarCpp.g:437:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt122=3;
			try { DebugEnterDecision(122, false);
			switch (input.LA(1))
			{
			case 169:
				{
				alt122 = 1;
				}
				break;
			case 165:
				{
				alt122 = 2;
				}
				break;
			case 151:
				{
				alt122 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:437:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(437, 4);
				string_literal261=(IToken)Match(input,169,Follow._169_in_stmt_while2975); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_169.Add(string_literal261);

				DebugLocation(437, 12);
				PushFollow(Follow._expr_in_stmt_while2977);
				expr262=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr262.Tree);
				DebugLocation(437, 17);
				// SugarCpp.g:437:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==NEWLINE))
				{
					alt117 = 1;
				}
				else if ((LA117_0==160))
				{
					alt117 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:437:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(437, 19);
					// SugarCpp.g:437:19: ( NEWLINE )+
					int cnt116=0;
					try { DebugEnterSubRule(116);
					while (true)
					{
						int alt116=2;
						try { DebugEnterDecision(116, false);
						int LA116_0 = input.LA(1);

						if ((LA116_0==NEWLINE))
						{
							alt116 = 1;
						}


						} finally { DebugExitDecision(116); }
						switch (alt116)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:437:19: NEWLINE
							{
							DebugLocation(437, 19);
							NEWLINE263=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2981); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE263);


							}
							break;

						default:
							if (cnt116 >= 1)
								goto loop116;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee116 = new EarlyExitException( 116, input );
							DebugRecognitionException(eee116);
							throw eee116;
						}
						cnt116++;
					}
					loop116:
						;

					} finally { DebugExitSubRule(116); }

					DebugLocation(437, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2984);
					stmt_block264=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block264.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 437:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(437, 42);
						// SugarCpp.g:437:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(437, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(437, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(437, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:438:13: 'then' inline_stmt_block
					{
					DebugLocation(438, 13);
					string_literal265=(IToken)Match(input,160,Follow._160_in_stmt_while3008); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal265);

					DebugLocation(438, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3010);
					inline_stmt_block266=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block266.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(438, 41);
						// SugarCpp.g:438:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(438, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(438, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(117); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:440:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(440, 4);
				string_literal267=(IToken)Match(input,165,Follow._165_in_stmt_while3034); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal267);

				DebugLocation(440, 12);
				PushFollow(Follow._expr_in_stmt_while3036);
				expr268=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr268.Tree);
				DebugLocation(440, 17);
				// SugarCpp.g:440:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt119=2;
				try { DebugEnterSubRule(119);
				try { DebugEnterDecision(119, false);
				int LA119_0 = input.LA(1);

				if ((LA119_0==NEWLINE))
				{
					alt119 = 1;
				}
				else if ((LA119_0==160))
				{
					alt119 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(119); }
				switch (alt119)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:440:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(440, 19);
					// SugarCpp.g:440:19: ( NEWLINE )+
					int cnt118=0;
					try { DebugEnterSubRule(118);
					while (true)
					{
						int alt118=2;
						try { DebugEnterDecision(118, false);
						int LA118_0 = input.LA(1);

						if ((LA118_0==NEWLINE))
						{
							alt118 = 1;
						}


						} finally { DebugExitDecision(118); }
						switch (alt118)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:440:19: NEWLINE
							{
							DebugLocation(440, 19);
							NEWLINE269=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3040); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE269);


							}
							break;

						default:
							if (cnt118 >= 1)
								goto loop118;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee118 = new EarlyExitException( 118, input );
							DebugRecognitionException(eee118);
							throw eee118;
						}
						cnt118++;
					}
					loop118:
						;

					} finally { DebugExitSubRule(118); }

					DebugLocation(440, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3043);
					stmt_block270=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block270.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(440, 42);
						// SugarCpp.g:440:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(440, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(440, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:441:13: 'then' inline_stmt_block
					{
					DebugLocation(441, 13);
					string_literal271=(IToken)Match(input,160,Follow._160_in_stmt_while3067); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_160.Add(string_literal271);

					DebugLocation(441, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3069);
					inline_stmt_block272=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block272.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(441, 41);
						// SugarCpp.g:441:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(441, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(441, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(119); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:443:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(443, 4);
				string_literal273=(IToken)Match(input,151,Follow._151_in_stmt_while3093); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_151.Add(string_literal273);

				DebugLocation(443, 11);
				// SugarCpp.g:443:11: ( expr )?
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==IDENT||LA120_0==NUMBER||LA120_0==STRING||LA120_0==83||LA120_0==88||LA120_0==90||LA120_0==92||(LA120_0>=94 && LA120_0<=95)||(LA120_0>=98 && LA120_0<=99)||(LA120_0>=125 && LA120_0<=126)||LA120_0==149||LA120_0==152||(LA120_0>=154 && LA120_0<=155)||LA120_0==173))
				{
					alt120 = 1;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:443:11: expr
					{
					DebugLocation(443, 11);
					PushFollow(Follow._expr_in_stmt_while3095);
					expr274=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr274.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(120); }

				DebugLocation(443, 17);
				// SugarCpp.g:443:17: ( NEWLINE )+
				int cnt121=0;
				try { DebugEnterSubRule(121);
				while (true)
				{
					int alt121=2;
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==NEWLINE))
					{
						alt121 = 1;
					}


					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:443:17: NEWLINE
						{
						DebugLocation(443, 17);
						NEWLINE275=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3098); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE275);


						}
						break;

					default:
						if (cnt121 >= 1)
							goto loop121;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee121 = new EarlyExitException( 121, input );
						DebugRecognitionException(eee121);
						throw eee121;
					}
					cnt121++;
				}
				loop121:
					;

				} finally { DebugExitSubRule(121); }

				DebugLocation(443, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3101);
				stmt_block276=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block276.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 443:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(443, 40);
					// SugarCpp.g:443:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(443, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(443, 52);
					// SugarCpp.g:443:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(443, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(443, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 43);
			LeaveRule("stmt_while", 43);
			LeaveRule_stmt_while();
		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:446:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 44);
		TraceIn("for_range", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal278 = default(IToken);
		IToken string_literal279 = default(IToken);
		IToken string_literal280 = default(IToken);
		IToken string_literal281 = default(IToken);
		IToken string_literal282 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident277 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree string_literal279_tree = default(CommonTree);
		CommonTree string_literal280_tree = default(CommonTree);
		CommonTree string_literal281_tree = default(CommonTree);
		CommonTree string_literal282_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(446, 1);
		try
		{
			// SugarCpp.g:447:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:447:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(447, 4);
			PushFollow(Follow._ident_in_for_range3123);
			ident277=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident277.Tree);
			DebugLocation(447, 10);
			string_literal278=(IToken)Match(input,112,Follow._112_in_for_range3125); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_112.Add(string_literal278);

			DebugLocation(447, 16);
			PushFollow(Follow._expr_in_for_range3129);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(447, 22);
			// SugarCpp.g:447:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt125=3;
			try { DebugEnterSubRule(125);
			try { DebugEnterDecision(125, false);
			switch (input.LA(1))
			{
			case 161:
				{
				alt125 = 1;
				}
				break;
			case 139:
				{
				alt125 = 2;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 97:
			case 110:
			case 143:
			case 144:
			case 146:
			case 164:
			case 165:
			case 169:
				{
				alt125 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 125, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(125); }
			switch (alt125)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:447:23: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(447, 23);
				string_literal279=(IToken)Match(input,161,Follow._161_in_for_range3132); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_161.Add(string_literal279);

				DebugLocation(447, 29);
				PushFollow(Follow._expr_in_for_range3136);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(447, 35);
				// SugarCpp.g:447:35: ( 'by' c= expr )?
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==133))
				{
					alt123 = 1;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:36: 'by' c= expr
					{
					DebugLocation(447, 36);
					string_literal280=(IToken)Match(input,133,Follow._133_in_for_range3139); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(string_literal280);

					DebugLocation(447, 42);
					PushFollow(Follow._expr_in_for_range3143);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(123); }



				{
				// AST REWRITE
				// elements: ident, c, b, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 447:50: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(447, 53);
					// SugarCpp.g:447:53: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(447, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(447, 67);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(447, 74);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(447, 77);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(447, 80);
					// SugarCpp.g:447:80: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(447, 80);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:448:8: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(448, 8);
				string_literal281=(IToken)Match(input,139,Follow._139_in_for_range3172); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_139.Add(string_literal281);

				DebugLocation(448, 18);
				PushFollow(Follow._expr_in_for_range3176);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(448, 24);
				// SugarCpp.g:448:24: ( 'by' c= expr )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==133))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:448:25: 'by' c= expr
					{
					DebugLocation(448, 25);
					string_literal282=(IToken)Match(input,133,Follow._133_in_for_range3179); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(string_literal282);

					DebugLocation(448, 31);
					PushFollow(Follow._expr_in_for_range3183);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(124); }



				{
				// AST REWRITE
				// elements: b, ident, c, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 448:39: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(448, 42);
					// SugarCpp.g:448:42: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(448, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(448, 61);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(448, 68);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(448, 71);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(448, 74);
					// SugarCpp.g:448:74: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(448, 74);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:449:9: 
				{

				{
				// AST REWRITE
				// elements: ident, a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 449:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(449, 12);
					// SugarCpp.g:449:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(449, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(449, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(449, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 44);
			LeaveRule("for_range", 44);
			LeaveRule_for_range();
		}
		DebugLocation(451, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:453:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 45);
		TraceIn("for_when", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr283 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(453, 1);
		try
		{
			// SugarCpp.g:454:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:454:4: expr
			{
			DebugLocation(454, 4);
			PushFollow(Follow._expr_in_for_when3241);
			expr283=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr283.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 454:9: -> ^( For_Item_When expr )
			{
				DebugLocation(454, 12);
				// SugarCpp.g:454:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(454, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(454, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 45);
			LeaveRule("for_when", 45);
			LeaveRule_for_when();
		}
		DebugLocation(455, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:457:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 46);
		TraceIn("for_map", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal285 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident284 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr286 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal285_tree = default(CommonTree);
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(457, 1);
		try
		{
			// SugarCpp.g:458:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:458:4: ident '=>' expr
			{
			DebugLocation(458, 4);
			PushFollow(Follow._ident_in_for_map3260);
			ident284=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident284.Tree);
			DebugLocation(458, 10);
			string_literal285=(IToken)Match(input,118,Follow._118_in_for_map3262); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_118.Add(string_literal285);

			DebugLocation(458, 15);
			PushFollow(Follow._expr_in_for_map3264);
			expr286=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr286.Tree);


			{
			// AST REWRITE
			// elements: expr, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 458:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(458, 23);
				// SugarCpp.g:458:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(458, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(458, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(458, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 46);
			LeaveRule("for_map", 46);
			LeaveRule_for_map();
		}
		DebugLocation(459, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:461:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 47);
		TraceIn("for_item", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range287 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when288 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map289 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(461, 1);
		try
		{
			// SugarCpp.g:462:2: ( for_range | for_when | for_map )
			int alt126=3;
			try { DebugEnterDecision(126, false);
			try
			{
				alt126 = dfa126.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:462:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(462, 4);
				PushFollow(Follow._for_range_in_for_item3285);
				for_range287=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range287.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:463:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(463, 4);
				PushFollow(Follow._for_when_in_for_item3290);
				for_when288=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when288.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:464:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(464, 4);
				PushFollow(Follow._for_map_in_for_item3295);
				for_map289=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map289.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 47);
			LeaveRule("for_item", 47);
			LeaveRule_for_item();
		}
		DebugLocation(465, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:467:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 48);
		TraceIn("stmt_for", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal290 = default(IToken);
		IToken char_literal292 = default(IToken);
		IToken NEWLINE294 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item291 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block295 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree char_literal292_tree = default(CommonTree);
		CommonTree NEWLINE294_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(467, 1);
		try
		{
			// SugarCpp.g:468:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:468:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(468, 4);
			string_literal290=(IToken)Match(input,143,Follow._143_in_stmt_for3306); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_143.Add(string_literal290);

			DebugLocation(468, 10);
			// SugarCpp.g:468:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:468:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(468, 12);
			PushFollow(Follow._for_item_in_stmt_for3310);
			for_item291=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item291.Tree);
			DebugLocation(468, 21);
			// SugarCpp.g:468:21: ( ',' for_item )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==97))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:22: ',' for_item
					{
					DebugLocation(468, 22);
					char_literal292=(IToken)Match(input,97,Follow._97_in_stmt_for3313); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal292);

					DebugLocation(468, 26);
					PushFollow(Follow._for_item_in_stmt_for3315);
					for_item293=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item293.Tree);

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }

			DebugLocation(468, 37);
			// SugarCpp.g:468:37: ( NEWLINE )+
			int cnt128=0;
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==NEWLINE))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:468:37: NEWLINE
					{
					DebugLocation(468, 37);
					NEWLINE294=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3319); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE294);


					}
					break;

				default:
					if (cnt128 >= 1)
						goto loop128;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee128 = new EarlyExitException( 128, input );
					DebugRecognitionException(eee128);
					throw eee128;
				}
				cnt128++;
			}
			loop128:
				;

			} finally { DebugExitSubRule(128); }

			DebugLocation(468, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3322);
			stmt_block295=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block295.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, for_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 468:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(468, 60);
				// SugarCpp.g:468:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(468, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(468, 71);
				// SugarCpp.g:468:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(468, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(468, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 48);
			LeaveRule("stmt_for", 48);
			LeaveRule_stmt_for();
		}
		DebugLocation(471, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:473:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 49);
		TraceIn("stmt_try", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal296 = default(IToken);
		IToken NEWLINE297 = default(IToken);
		IToken NEWLINE299 = default(IToken);
		IToken string_literal300 = default(IToken);
		IToken NEWLINE302 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block298 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block303 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal296_tree = default(CommonTree);
		CommonTree NEWLINE297_tree = default(CommonTree);
		CommonTree NEWLINE299_tree = default(CommonTree);
		CommonTree string_literal300_tree = default(CommonTree);
		CommonTree NEWLINE302_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(473, 1);
		try
		{
			// SugarCpp.g:474:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:474:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(474, 4);
			string_literal296=(IToken)Match(input,162,Follow._162_in_stmt_try3353); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_162.Add(string_literal296);

			DebugLocation(474, 10);
			// SugarCpp.g:474:10: ( NEWLINE )+
			int cnt129=0;
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==NEWLINE))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:474:10: NEWLINE
					{
					DebugLocation(474, 10);
					NEWLINE297=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3355); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE297);


					}
					break;

				default:
					if (cnt129 >= 1)
						goto loop129;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee129 = new EarlyExitException( 129, input );
					DebugRecognitionException(eee129);
					throw eee129;
				}
				cnt129++;
			}
			loop129:
				;

			} finally { DebugExitSubRule(129); }

			DebugLocation(474, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3358);
			stmt_block298=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block298.Tree);
			DebugLocation(474, 30);
			// SugarCpp.g:474:30: ( NEWLINE )*
			try { DebugEnterSubRule(130);
			while (true)
			{
				int alt130=2;
				try { DebugEnterDecision(130, false);
				int LA130_0 = input.LA(1);

				if ((LA130_0==NEWLINE))
				{
					alt130 = 1;
				}


				} finally { DebugExitDecision(130); }
				switch ( alt130 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:474:30: NEWLINE
					{
					DebugLocation(474, 30);
					NEWLINE299=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3360); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE299);


					}
					break;

				default:
					goto loop130;
				}
			}

			loop130:
				;

			} finally { DebugExitSubRule(130); }

			DebugLocation(474, 39);
			string_literal300=(IToken)Match(input,135,Follow._135_in_stmt_try3363); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_135.Add(string_literal300);

			DebugLocation(474, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3365);
			stmt_alloc301=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc301.Tree);
			DebugLocation(474, 58);
			// SugarCpp.g:474:58: ( NEWLINE )+
			int cnt131=0;
			try { DebugEnterSubRule(131);
			while (true)
			{
				int alt131=2;
				try { DebugEnterDecision(131, false);
				int LA131_0 = input.LA(1);

				if ((LA131_0==NEWLINE))
				{
					alt131 = 1;
				}


				} finally { DebugExitDecision(131); }
				switch (alt131)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:474:58: NEWLINE
					{
					DebugLocation(474, 58);
					NEWLINE302=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3367); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE302);


					}
					break;

				default:
					if (cnt131 >= 1)
						goto loop131;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee131 = new EarlyExitException( 131, input );
					DebugRecognitionException(eee131);
					throw eee131;
				}
				cnt131++;
			}
			loop131:
				;

			} finally { DebugExitSubRule(131); }

			DebugLocation(474, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3370);
			stmt_block303=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block303.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 474:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(474, 81);
				// SugarCpp.g:474:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(474, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(474, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(474, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(474, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 49);
			LeaveRule("stmt_try", 49);
			LeaveRule_stmt_try();
		}
		DebugLocation(475, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:477:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 50);
		TraceIn("switch_item", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal304 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken NEWLINE308 = default(IToken);
		IToken string_literal310 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr305 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block309 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block311 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal304_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree NEWLINE308_tree = default(CommonTree);
		CommonTree string_literal310_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(477, 1);
		try
		{
			// SugarCpp.g:478:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:478:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(478, 4);
			string_literal304=(IToken)Match(input,167,Follow._167_in_switch_item3393); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_167.Add(string_literal304);

			DebugLocation(478, 11);
			PushFollow(Follow._expr_in_switch_item3395);
			expr305=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr305.Tree);
			DebugLocation(478, 16);
			// SugarCpp.g:478:16: ( ',' expr )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==97))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:478:17: ',' expr
					{
					DebugLocation(478, 17);
					char_literal306=(IToken)Match(input,97,Follow._97_in_switch_item3398); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal306);

					DebugLocation(478, 21);
					PushFollow(Follow._expr_in_switch_item3400);
					expr307=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr307.Tree);

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(478, 28);
			// SugarCpp.g:478:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_0 = input.LA(1);

			if ((LA134_0==NEWLINE))
			{
				alt134 = 1;
			}
			else if ((LA134_0==160))
			{
				alt134 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:478:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(478, 30);
				// SugarCpp.g:478:30: ( NEWLINE )+
				int cnt133=0;
				try { DebugEnterSubRule(133);
				while (true)
				{
					int alt133=2;
					try { DebugEnterDecision(133, false);
					int LA133_0 = input.LA(1);

					if ((LA133_0==NEWLINE))
					{
						alt133 = 1;
					}


					} finally { DebugExitDecision(133); }
					switch (alt133)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:478:30: NEWLINE
						{
						DebugLocation(478, 30);
						NEWLINE308=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3406); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE308);


						}
						break;

					default:
						if (cnt133 >= 1)
							goto loop133;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee133 = new EarlyExitException( 133, input );
						DebugRecognitionException(eee133);
						throw eee133;
					}
					cnt133++;
				}
				loop133:
					;

				} finally { DebugExitSubRule(133); }

				DebugLocation(478, 39);
				PushFollow(Follow._stmt_block_in_switch_item3409);
				stmt_block309=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block309.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 478:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(478, 53);
					// SugarCpp.g:478:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(478, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(478, 67);
					// SugarCpp.g:478:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(478, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(478, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(478, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(478, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:479:30: 'then' inline_stmt_block
				{
				DebugLocation(479, 30);
				string_literal310=(IToken)Match(input,160,Follow._160_in_switch_item3455); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_160.Add(string_literal310);

				DebugLocation(479, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3457);
				inline_stmt_block311=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block311.Tree);


				{
				// AST REWRITE
				// elements: expr, inline_stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 479:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(479, 58);
					// SugarCpp.g:479:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(479, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(479, 72);
					// SugarCpp.g:479:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(479, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(479, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(479, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(479, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 50);
			LeaveRule("switch_item", 50);
			LeaveRule_switch_item();
		}
		DebugLocation(481, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:483:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 51);
		TraceIn("stmt_switch", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal312 = default(IToken);
		IToken NEWLINE314 = default(IToken);
		IToken INDENT315 = default(IToken);
		IToken NEWLINE316 = default(IToken);
		IToken NEWLINE318 = default(IToken);
		IToken string_literal319 = default(IToken);
		IToken NEWLINE320 = default(IToken);
		IToken NEWLINE322 = default(IToken);
		IToken DEDENT323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr313 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item317 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block321 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal312_tree = default(CommonTree);
		CommonTree NEWLINE314_tree = default(CommonTree);
		CommonTree INDENT315_tree = default(CommonTree);
		CommonTree NEWLINE316_tree = default(CommonTree);
		CommonTree NEWLINE318_tree = default(CommonTree);
		CommonTree string_literal319_tree = default(CommonTree);
		CommonTree NEWLINE320_tree = default(CommonTree);
		CommonTree NEWLINE322_tree = default(CommonTree);
		CommonTree DEDENT323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_159=new RewriteRuleITokenStream(adaptor,"token 159");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(483, 1);
		try
		{
			// SugarCpp.g:484:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:484:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(484, 4);
			string_literal312=(IToken)Match(input,159,Follow._159_in_stmt_switch3497); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_159.Add(string_literal312);

			DebugLocation(484, 13);
			// SugarCpp.g:484:13: ( expr )?
			int alt135=2;
			try { DebugEnterSubRule(135);
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==IDENT||LA135_0==NUMBER||LA135_0==STRING||LA135_0==83||LA135_0==88||LA135_0==90||LA135_0==92||(LA135_0>=94 && LA135_0<=95)||(LA135_0>=98 && LA135_0<=99)||(LA135_0>=125 && LA135_0<=126)||LA135_0==149||LA135_0==152||(LA135_0>=154 && LA135_0<=155)||LA135_0==173))
			{
				alt135 = 1;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:484:13: expr
				{
				DebugLocation(484, 13);
				PushFollow(Follow._expr_in_stmt_switch3499);
				expr313=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr313.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(135); }

			DebugLocation(484, 19);
			// SugarCpp.g:484:19: ( NEWLINE )+
			int cnt136=0;
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==NEWLINE))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:484:19: NEWLINE
					{
					DebugLocation(484, 19);
					NEWLINE314=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3502); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE314);


					}
					break;

				default:
					if (cnt136 >= 1)
						goto loop136;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee136 = new EarlyExitException( 136, input );
					DebugRecognitionException(eee136);
					throw eee136;
				}
				cnt136++;
			}
			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(484, 28);
			INDENT315=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3505); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT315);

			DebugLocation(484, 35);
			// SugarCpp.g:484:35: ( NEWLINE )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==NEWLINE))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:484:35: NEWLINE
					{
					DebugLocation(484, 35);
					NEWLINE316=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3507); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE316);


					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }

			DebugLocation(484, 44);
			// SugarCpp.g:484:44: ( switch_item ( NEWLINE )+ )+
			int cnt139=0;
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=2;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==167))
				{
					alt139 = 1;
				}


				} finally { DebugExitDecision(139); }
				switch (alt139)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:484:45: switch_item ( NEWLINE )+
					{
					DebugLocation(484, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3511);
					switch_item317=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item317.Tree);
					DebugLocation(484, 57);
					// SugarCpp.g:484:57: ( NEWLINE )+
					int cnt138=0;
					try { DebugEnterSubRule(138);
					while (true)
					{
						int alt138=2;
						try { DebugEnterDecision(138, false);
						int LA138_0 = input.LA(1);

						if ((LA138_0==NEWLINE))
						{
							alt138 = 1;
						}


						} finally { DebugExitDecision(138); }
						switch (alt138)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:484:57: NEWLINE
							{
							DebugLocation(484, 57);
							NEWLINE318=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3513); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE318);


							}
							break;

						default:
							if (cnt138 >= 1)
								goto loop138;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee138 = new EarlyExitException( 138, input );
							DebugRecognitionException(eee138);
							throw eee138;
						}
						cnt138++;
					}
					loop138:
						;

					} finally { DebugExitSubRule(138); }


					}
					break;

				default:
					if (cnt139 >= 1)
						goto loop139;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee139 = new EarlyExitException( 139, input );
					DebugRecognitionException(eee139);
					throw eee139;
				}
				cnt139++;
			}
			loop139:
				;

			} finally { DebugExitSubRule(139); }

			DebugLocation(484, 68);
			// SugarCpp.g:484:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_0 = input.LA(1);

			if ((LA142_0==140))
			{
				alt142 = 1;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:484:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(484, 69);
				string_literal319=(IToken)Match(input,140,Follow._140_in_stmt_switch3519); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal319);

				DebugLocation(484, 76);
				// SugarCpp.g:484:76: ( NEWLINE )+
				int cnt140=0;
				try { DebugEnterSubRule(140);
				while (true)
				{
					int alt140=2;
					try { DebugEnterDecision(140, false);
					int LA140_0 = input.LA(1);

					if ((LA140_0==NEWLINE))
					{
						alt140 = 1;
					}


					} finally { DebugExitDecision(140); }
					switch (alt140)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:484:76: NEWLINE
						{
						DebugLocation(484, 76);
						NEWLINE320=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3521); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE320);


						}
						break;

					default:
						if (cnt140 >= 1)
							goto loop140;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee140 = new EarlyExitException( 140, input );
						DebugRecognitionException(eee140);
						throw eee140;
					}
					cnt140++;
				}
				loop140:
					;

				} finally { DebugExitSubRule(140); }

				DebugLocation(484, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3524);
				stmt_block321=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block321.Tree);
				DebugLocation(484, 96);
				// SugarCpp.g:484:96: ( NEWLINE )*
				try { DebugEnterSubRule(141);
				while (true)
				{
					int alt141=2;
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==NEWLINE))
					{
						alt141 = 1;
					}


					} finally { DebugExitDecision(141); }
					switch ( alt141 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:484:96: NEWLINE
						{
						DebugLocation(484, 96);
						NEWLINE322=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3526); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE322);


						}
						break;

					default:
						goto loop141;
					}
				}

				loop141:
					;

				} finally { DebugExitSubRule(141); }


				}
				break;

			}
			} finally { DebugExitSubRule(142); }

			DebugLocation(484, 107);
			DEDENT323=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3531); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT323);



			{
			// AST REWRITE
			// elements: expr, switch_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 484:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(484, 117);
				// SugarCpp.g:484:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(484, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(484, 131);
				// SugarCpp.g:484:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(484, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(484, 137);
				// SugarCpp.g:484:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(484, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(484, 150);
				// SugarCpp.g:484:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(484, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 51);
			LeaveRule("stmt_switch", 51);
			LeaveRule_stmt_switch();
		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:487:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 52);
		TraceIn("ident_list", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal325 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident326 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal325_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(487, 1);
		try
		{
			// SugarCpp.g:488:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:488:4: ident ( ',' ident )*
			{
			DebugLocation(488, 4);
			PushFollow(Follow._ident_in_ident_list3557);
			ident324=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident324.Tree);
			DebugLocation(488, 10);
			// SugarCpp.g:488:10: ( ',' ident )*
			try { DebugEnterSubRule(143);
			while (true)
			{
				int alt143=2;
				try { DebugEnterDecision(143, false);
				int LA143_0 = input.LA(1);

				if ((LA143_0==97))
				{
					alt143 = 1;
				}


				} finally { DebugExitDecision(143); }
				switch ( alt143 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:488:11: ',' ident
					{
					DebugLocation(488, 11);
					char_literal325=(IToken)Match(input,97,Follow._97_in_ident_list3560); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal325);

					DebugLocation(488, 15);
					PushFollow(Follow._ident_in_ident_list3562);
					ident326=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident326.Tree);

					}
					break;

				default:
					goto loop143;
				}
			}

			loop143:
				;

			} finally { DebugExitSubRule(143); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 488:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(488, 26);
				// SugarCpp.g:488:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(488, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(488, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(488, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 52);
			LeaveRule("ident_list", 52);
			LeaveRule_ident_list();
		}
		DebugLocation(489, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:491:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 53);
		TraceIn("stmt_alloc", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken string_literal331 = default(IToken);
		IToken string_literal334 = default(IToken);
		IToken char_literal336 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list327 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr332 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list333 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr335 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr337 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree string_literal331_tree = default(CommonTree);
		CommonTree string_literal334_tree = default(CommonTree);
		CommonTree char_literal336_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(491, 1);
		try
		{
			// SugarCpp.g:492:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:492:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(492, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3584);
			ident_list327=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list327.Tree);
			DebugLocation(492, 15);
			// SugarCpp.g:492:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_0 = input.LA(1);

			if ((LA147_0==107))
			{
				alt147 = 1;
			}
			else if ((LA147_0==109))
			{
				alt147 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 147, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:492:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(492, 17);
				char_literal328=(IToken)Match(input,107,Follow._107_in_stmt_alloc3588); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_107.Add(char_literal328);

				DebugLocation(492, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3590);
				type_name329=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name329.Tree);
				DebugLocation(492, 31);
				// SugarCpp.g:492:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt145=3;
				try { DebugEnterSubRule(145);
				try { DebugEnterDecision(145, false);
				switch (input.LA(1))
				{
				case 109:
				case 116:
					{
					alt145 = 1;
					}
					break;
				case 90:
					{
					alt145 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 110:
				case 143:
				case 144:
				case 146:
				case 164:
				case 165:
				case 169:
					{
					alt145 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 145, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(492, 33);
					// SugarCpp.g:492:33: ( '=' | ':=' )
					int alt144=2;
					try { DebugEnterSubRule(144);
					try { DebugEnterDecision(144, false);
					int LA144_0 = input.LA(1);

					if ((LA144_0==116))
					{
						alt144 = 1;
					}
					else if ((LA144_0==109))
					{
						alt144 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 144, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(144); }
					switch (alt144)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:492:34: '='
						{
						DebugLocation(492, 34);
						char_literal330=(IToken)Match(input,116,Follow._116_in_stmt_alloc3595); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_116.Add(char_literal330);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:492:40: ':='
						{
						DebugLocation(492, 40);
						string_literal331=(IToken)Match(input,109,Follow._109_in_stmt_alloc3599); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_109.Add(string_literal331);


						}
						break;

					}
					} finally { DebugExitSubRule(144); }

					DebugLocation(492, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3602);
					where_expr332=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr332.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 492:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(492, 61);
						// SugarCpp.g:492:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(492, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(492, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(492, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(492, 101);
						// SugarCpp.g:492:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(492, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(492, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:493:33: bracket_expr_list
					{
					DebugLocation(493, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3653);
					bracket_expr_list333=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list333.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 493:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(493, 55);
						// SugarCpp.g:493:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(493, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(493, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(493, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(493, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:494:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 494:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(494, 18);
						// SugarCpp.g:494:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(494, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(494, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(494, 58);
						// SugarCpp.g:494:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(494, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(145); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:496:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(496, 8);
				string_literal334=(IToken)Match(input,109,Follow._109_in_stmt_alloc3717); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_109.Add(string_literal334);

				DebugLocation(496, 14);
				// SugarCpp.g:496:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:496:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(496, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3721);
				where_expr335=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr335.Tree);
				DebugLocation(496, 26);
				// SugarCpp.g:496:26: ( ',' where_expr )*
				try { DebugEnterSubRule(146);
				while (true)
				{
					int alt146=2;
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==97))
					{
						alt146 = 1;
					}


					} finally { DebugExitDecision(146); }
					switch ( alt146 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:496:27: ',' where_expr
						{
						DebugLocation(496, 27);
						char_literal336=(IToken)Match(input,97,Follow._97_in_stmt_alloc3724); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_97.Add(char_literal336);

						DebugLocation(496, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3726);
						where_expr337=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr337.Tree);

						}
						break;

					default:
						goto loop146;
					}
				}

				loop146:
					;

				} finally { DebugExitSubRule(146); }


				}



				{
				// AST REWRITE
				// elements: 109, ident_list, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 496:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(496, 48);
					// SugarCpp.g:496:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(496, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_109.NextNode(), root_1);

					DebugLocation(496, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(496, 66);
					// SugarCpp.g:496:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(496, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(496, 78);
					// SugarCpp.g:496:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(496, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 53);
			LeaveRule("stmt_alloc", 53);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(497, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:499:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 54);
		TraceIn("stmt_modify", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal341 = default(IToken);
		IToken string_literal343 = default(IToken);
		IToken string_literal345 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue338 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op339 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr346 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal341_tree = default(CommonTree);
		CommonTree string_literal343_tree = default(CommonTree);
		CommonTree string_literal345_tree = default(CommonTree);
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(499, 1);
		try
		{
			// SugarCpp.g:500:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:500:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(500, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3756);
			lvalue338=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue338.Tree);
			DebugLocation(500, 11);
			// SugarCpp.g:500:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt148=5;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			switch (input.LA(1))
			{
			case 86:
			case 89:
			case 93:
			case 96:
			case 100:
			case 106:
			case 114:
			case 116:
			case 122:
			case 129:
			case 171:
				{
				alt148 = 1;
				}
				break;
			case 124:
				{
				alt148 = 2;
				}
				break;
			case 113:
				{
				alt148 = 3;
				}
				break;
			case 121:
				{
				alt148 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 110:
			case 143:
			case 144:
			case 146:
			case 164:
			case 165:
			case 169:
				{
				alt148 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 148, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:500:13: modify_expr_op where_expr
				{
				DebugLocation(500, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3760);
				modify_expr_op339=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op339.Tree);
				DebugLocation(500, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3762);
				where_expr340=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr340.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, modify_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 500:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(500, 42);
					// SugarCpp.g:500:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(500, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(500, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(500, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:501:13: '?=' where_expr
				{
				DebugLocation(501, 13);
				string_literal341=(IToken)Match(input,124,Follow._124_in_stmt_modify3786); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(string_literal341);

				DebugLocation(501, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3788);
				where_expr342=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr342.Tree);


				{
				// AST REWRITE
				// elements: where_expr, 124, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 501:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(501, 32);
					// SugarCpp.g:501:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(501, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_124.NextNode(), root_1);

					DebugLocation(501, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(501, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:502:16: '<<' where_expr
				{
				DebugLocation(502, 16);
				string_literal343=(IToken)Match(input,113,Follow._113_in_stmt_modify3815); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_113.Add(string_literal343);

				DebugLocation(502, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3817);
				where_expr344=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr344.Tree);


				{
				// AST REWRITE
				// elements: where_expr, lvalue, 113
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 502:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(502, 35);
					// SugarCpp.g:502:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(502, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(502, 46);
					adaptor.AddChild(root_1, stream_113.NextNode());
					DebugLocation(502, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(502, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:503:16: '>>' where_expr
				{
				DebugLocation(503, 16);
				string_literal345=(IToken)Match(input,121,Follow._121_in_stmt_modify3846); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_121.Add(string_literal345);

				DebugLocation(503, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3848);
				where_expr346=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr346.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 121
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 503:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(503, 35);
					// SugarCpp.g:503:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(503, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(503, 46);
					adaptor.AddChild(root_1, stream_121.NextNode());
					DebugLocation(503, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(503, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:504:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 504:7: -> lvalue
				{
					DebugLocation(504, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(148); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 54);
			LeaveRule("stmt_modify", 54);
			LeaveRule_stmt_modify();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:507:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 55);
		TraceIn("where_item", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt347 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(507, 1);
		try
		{
			// SugarCpp.g:508:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:508:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(508, 4);
			PushFollow(Follow._stmt_in_where_item3882);
			stmt347=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt347.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 55);
			LeaveRule("where_item", 55);
			LeaveRule_where_item();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:511:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 56);
		TraceIn("where_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE348 = default(IToken);
		IToken INDENT349 = default(IToken);
		IToken NEWLINE350 = default(IToken);
		IToken string_literal351 = default(IToken);
		IToken NEWLINE353 = default(IToken);
		IToken DEDENT354 = default(IToken);
		IToken NEWLINE355 = default(IToken);
		IToken INDENT356 = default(IToken);
		IToken NEWLINE357 = default(IToken);
		IToken NEWLINE359 = default(IToken);
		IToken DEDENT360 = default(IToken);
		IToken NEWLINE361 = default(IToken);
		IToken DEDENT362 = default(IToken);
		IToken NEWLINE363 = default(IToken);
		IToken INDENT364 = default(IToken);
		IToken NEWLINE365 = default(IToken);
		IToken NEWLINE367 = default(IToken);
		IToken DEDENT368 = default(IToken);
		IToken NEWLINE369 = default(IToken);
		IToken DEDENT370 = default(IToken);
		IToken string_literal371 = default(IToken);
		IToken NEWLINE372 = default(IToken);
		IToken INDENT373 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken DEDENT377 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item358 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item366 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item375 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE348_tree = default(CommonTree);
		CommonTree INDENT349_tree = default(CommonTree);
		CommonTree NEWLINE350_tree = default(CommonTree);
		CommonTree string_literal351_tree = default(CommonTree);
		CommonTree NEWLINE353_tree = default(CommonTree);
		CommonTree DEDENT354_tree = default(CommonTree);
		CommonTree NEWLINE355_tree = default(CommonTree);
		CommonTree INDENT356_tree = default(CommonTree);
		CommonTree NEWLINE357_tree = default(CommonTree);
		CommonTree NEWLINE359_tree = default(CommonTree);
		CommonTree DEDENT360_tree = default(CommonTree);
		CommonTree NEWLINE361_tree = default(CommonTree);
		CommonTree DEDENT362_tree = default(CommonTree);
		CommonTree NEWLINE363_tree = default(CommonTree);
		CommonTree INDENT364_tree = default(CommonTree);
		CommonTree NEWLINE365_tree = default(CommonTree);
		CommonTree NEWLINE367_tree = default(CommonTree);
		CommonTree DEDENT368_tree = default(CommonTree);
		CommonTree NEWLINE369_tree = default(CommonTree);
		CommonTree DEDENT370_tree = default(CommonTree);
		CommonTree string_literal371_tree = default(CommonTree);
		CommonTree NEWLINE372_tree = default(CommonTree);
		CommonTree INDENT373_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree DEDENT377_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:512:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(512, 4);
			// SugarCpp.g:512:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:512:5: a= expr
			{
			DebugLocation(512, 6);
			PushFollow(Follow._expr_in_where_expr3896);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 512:12: -> $a
			{
				DebugLocation(512, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(512, 19);
			// SugarCpp.g:512:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt168=3;
			try { DebugEnterSubRule(168);
			try { DebugEnterDecision(168, false);
			try
			{
				alt168 = dfa168.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(168); }
			switch (alt168)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:512:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(512, 21);
				// SugarCpp.g:512:21: ( NEWLINE )+
				int cnt149=0;
				try { DebugEnterSubRule(149);
				while (true)
				{
					int alt149=2;
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==NEWLINE))
					{
						alt149 = 1;
					}


					} finally { DebugExitDecision(149); }
					switch (alt149)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:512:21: NEWLINE
						{
						DebugLocation(512, 21);
						NEWLINE348=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3906); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE348);


						}
						break;

					default:
						if (cnt149 >= 1)
							goto loop149;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee149 = new EarlyExitException( 149, input );
						DebugRecognitionException(eee149);
						throw eee149;
					}
					cnt149++;
				}
				loop149:
					;

				} finally { DebugExitSubRule(149); }

				DebugLocation(512, 30);
				INDENT349=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3909); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT349);

				DebugLocation(512, 37);
				// SugarCpp.g:512:37: ( NEWLINE )*
				try { DebugEnterSubRule(150);
				while (true)
				{
					int alt150=2;
					try { DebugEnterDecision(150, false);
					int LA150_0 = input.LA(1);

					if ((LA150_0==NEWLINE))
					{
						alt150 = 1;
					}


					} finally { DebugExitDecision(150); }
					switch ( alt150 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:512:37: NEWLINE
						{
						DebugLocation(512, 37);
						NEWLINE350=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3911); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE350);


						}
						break;

					default:
						goto loop150;
					}
				}

				loop150:
					;

				} finally { DebugExitSubRule(150); }

				DebugLocation(512, 46);
				string_literal351=(IToken)Match(input,168,Follow._168_in_where_expr3914); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal351);

				DebugLocation(512, 54);
				// SugarCpp.g:512:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt163=2;
				try { DebugEnterSubRule(163);
				try { DebugEnterDecision(163, false);
				int LA163_0 = input.LA(1);

				if ((LA163_0==IDENT||LA163_0==83||LA163_0==88||LA163_0==90||LA163_0==92||(LA163_0>=94 && LA163_0<=95)||(LA163_0>=98 && LA163_0<=99)||LA163_0==125||LA163_0==138||(LA163_0>=142 && LA163_0<=144)||LA163_0==151||LA163_0==155||LA163_0==157||LA163_0==159||(LA163_0>=162 && LA163_0<=166)||LA163_0==169||LA163_0==173))
				{
					alt163 = 1;
				}
				else if ((LA163_0==NEWLINE))
				{
					alt163 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 163, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(163); }
				switch (alt163)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:512:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(512, 56);
					PushFollow(Follow._where_item_in_where_expr3918);
					where_item352=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item352.Tree);
					DebugLocation(512, 67);
					// SugarCpp.g:512:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt157=2;
					try { DebugEnterSubRule(157);
					try { DebugEnterDecision(157, false);
					try
					{
						alt157 = dfa157.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(157); }
					switch (alt157)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:512:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(512, 69);
						// SugarCpp.g:512:69: ( NEWLINE )*
						try { DebugEnterSubRule(151);
						while (true)
						{
							int alt151=2;
							try { DebugEnterDecision(151, false);
							int LA151_0 = input.LA(1);

							if ((LA151_0==NEWLINE))
							{
								alt151 = 1;
							}


							} finally { DebugExitDecision(151); }
							switch ( alt151 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:512:69: NEWLINE
								{
								DebugLocation(512, 69);
								NEWLINE353=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3922); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE353);


								}
								break;

							default:
								goto loop151;
							}
						}

						loop151:
							;

						} finally { DebugExitSubRule(151); }

						DebugLocation(512, 78);
						DEDENT354=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3925); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT354);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 512:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(512, 88);
							// SugarCpp.g:512:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(512, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(512, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(512, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:513:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(513, 21);
						// SugarCpp.g:513:21: ( NEWLINE )+
						int cnt152=0;
						try { DebugEnterSubRule(152);
						while (true)
						{
							int alt152=2;
							try { DebugEnterDecision(152, false);
							int LA152_0 = input.LA(1);

							if ((LA152_0==NEWLINE))
							{
								alt152 = 1;
							}


							} finally { DebugExitDecision(152); }
							switch (alt152)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:513:21: NEWLINE
								{
								DebugLocation(513, 21);
								NEWLINE355=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3958); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE355);


								}
								break;

							default:
								if (cnt152 >= 1)
									goto loop152;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee152 = new EarlyExitException( 152, input );
								DebugRecognitionException(eee152);
								throw eee152;
							}
							cnt152++;
						}
						loop152:
							;

						} finally { DebugExitSubRule(152); }

						DebugLocation(513, 30);
						INDENT356=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr3961); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT356);

						DebugLocation(513, 37);
						// SugarCpp.g:513:37: ( NEWLINE )*
						try { DebugEnterSubRule(153);
						while (true)
						{
							int alt153=2;
							try { DebugEnterDecision(153, false);
							int LA153_0 = input.LA(1);

							if ((LA153_0==NEWLINE))
							{
								alt153 = 1;
							}


							} finally { DebugExitDecision(153); }
							switch ( alt153 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:513:37: NEWLINE
								{
								DebugLocation(513, 37);
								NEWLINE357=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3963); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE357);


								}
								break;

							default:
								goto loop153;
							}
						}

						loop153:
							;

						} finally { DebugExitSubRule(153); }

						DebugLocation(513, 46);
						// SugarCpp.g:513:46: ( where_item ( NEWLINE )+ )+
						int cnt155=0;
						try { DebugEnterSubRule(155);
						while (true)
						{
							int alt155=2;
							try { DebugEnterDecision(155, false);
							int LA155_0 = input.LA(1);

							if ((LA155_0==IDENT||LA155_0==83||LA155_0==88||LA155_0==90||LA155_0==92||(LA155_0>=94 && LA155_0<=95)||(LA155_0>=98 && LA155_0<=99)||LA155_0==125||LA155_0==138||(LA155_0>=142 && LA155_0<=144)||LA155_0==151||LA155_0==155||LA155_0==157||LA155_0==159||(LA155_0>=162 && LA155_0<=166)||LA155_0==169||LA155_0==173))
							{
								alt155 = 1;
							}


							} finally { DebugExitDecision(155); }
							switch (alt155)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:513:47: where_item ( NEWLINE )+
								{
								DebugLocation(513, 47);
								PushFollow(Follow._where_item_in_where_expr3967);
								where_item358=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item358.Tree);
								DebugLocation(513, 58);
								// SugarCpp.g:513:58: ( NEWLINE )+
								int cnt154=0;
								try { DebugEnterSubRule(154);
								while (true)
								{
									int alt154=2;
									try { DebugEnterDecision(154, false);
									int LA154_0 = input.LA(1);

									if ((LA154_0==NEWLINE))
									{
										alt154 = 1;
									}


									} finally { DebugExitDecision(154); }
									switch (alt154)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:513:58: NEWLINE
										{
										DebugLocation(513, 58);
										NEWLINE359=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3969); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE359);


										}
										break;

									default:
										if (cnt154 >= 1)
											goto loop154;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee154 = new EarlyExitException( 154, input );
										DebugRecognitionException(eee154);
										throw eee154;
									}
									cnt154++;
								}
								loop154:
									;

								} finally { DebugExitSubRule(154); }


								}
								break;

							default:
								if (cnt155 >= 1)
									goto loop155;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee155 = new EarlyExitException( 155, input );
								DebugRecognitionException(eee155);
								throw eee155;
							}
							cnt155++;
						}
						loop155:
							;

						} finally { DebugExitSubRule(155); }

						DebugLocation(513, 69);
						DEDENT360=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3974); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT360);

						DebugLocation(513, 76);
						// SugarCpp.g:513:76: ( NEWLINE )*
						try { DebugEnterSubRule(156);
						while (true)
						{
							int alt156=2;
							try { DebugEnterDecision(156, false);
							int LA156_0 = input.LA(1);

							if ((LA156_0==NEWLINE))
							{
								alt156 = 1;
							}


							} finally { DebugExitDecision(156); }
							switch ( alt156 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:513:76: NEWLINE
								{
								DebugLocation(513, 76);
								NEWLINE361=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr3976); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE361);


								}
								break;

							default:
								goto loop156;
							}
						}

						loop156:
							;

						} finally { DebugExitSubRule(156); }

						DebugLocation(513, 85);
						DEDENT362=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr3979); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT362);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 513:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(513, 95);
							// SugarCpp.g:513:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(513, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(513, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(513, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(513, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(157); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:515:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(515, 17);
					// SugarCpp.g:515:17: ( NEWLINE )+
					int cnt158=0;
					try { DebugEnterSubRule(158);
					while (true)
					{
						int alt158=2;
						try { DebugEnterDecision(158, false);
						int LA158_0 = input.LA(1);

						if ((LA158_0==NEWLINE))
						{
							alt158 = 1;
						}


						} finally { DebugExitDecision(158); }
						switch (alt158)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:515:17: NEWLINE
							{
							DebugLocation(515, 17);
							NEWLINE363=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4029); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE363);


							}
							break;

						default:
							if (cnt158 >= 1)
								goto loop158;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee158 = new EarlyExitException( 158, input );
							DebugRecognitionException(eee158);
							throw eee158;
						}
						cnt158++;
					}
					loop158:
						;

					} finally { DebugExitSubRule(158); }

					DebugLocation(515, 26);
					INDENT364=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4032); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT364);

					DebugLocation(515, 33);
					// SugarCpp.g:515:33: ( NEWLINE )*
					try { DebugEnterSubRule(159);
					while (true)
					{
						int alt159=2;
						try { DebugEnterDecision(159, false);
						int LA159_0 = input.LA(1);

						if ((LA159_0==NEWLINE))
						{
							alt159 = 1;
						}


						} finally { DebugExitDecision(159); }
						switch ( alt159 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:515:33: NEWLINE
							{
							DebugLocation(515, 33);
							NEWLINE365=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4034); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE365);


							}
							break;

						default:
							goto loop159;
						}
					}

					loop159:
						;

					} finally { DebugExitSubRule(159); }

					DebugLocation(515, 42);
					// SugarCpp.g:515:42: ( where_item ( NEWLINE )+ )+
					int cnt161=0;
					try { DebugEnterSubRule(161);
					while (true)
					{
						int alt161=2;
						try { DebugEnterDecision(161, false);
						int LA161_0 = input.LA(1);

						if ((LA161_0==IDENT||LA161_0==83||LA161_0==88||LA161_0==90||LA161_0==92||(LA161_0>=94 && LA161_0<=95)||(LA161_0>=98 && LA161_0<=99)||LA161_0==125||LA161_0==138||(LA161_0>=142 && LA161_0<=144)||LA161_0==151||LA161_0==155||LA161_0==157||LA161_0==159||(LA161_0>=162 && LA161_0<=166)||LA161_0==169||LA161_0==173))
						{
							alt161 = 1;
						}


						} finally { DebugExitDecision(161); }
						switch (alt161)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:515:43: where_item ( NEWLINE )+
							{
							DebugLocation(515, 43);
							PushFollow(Follow._where_item_in_where_expr4038);
							where_item366=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item366.Tree);
							DebugLocation(515, 54);
							// SugarCpp.g:515:54: ( NEWLINE )+
							int cnt160=0;
							try { DebugEnterSubRule(160);
							while (true)
							{
								int alt160=2;
								try { DebugEnterDecision(160, false);
								int LA160_0 = input.LA(1);

								if ((LA160_0==NEWLINE))
								{
									alt160 = 1;
								}


								} finally { DebugExitDecision(160); }
								switch (alt160)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:515:54: NEWLINE
									{
									DebugLocation(515, 54);
									NEWLINE367=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4040); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE367);


									}
									break;

								default:
									if (cnt160 >= 1)
										goto loop160;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee160 = new EarlyExitException( 160, input );
									DebugRecognitionException(eee160);
									throw eee160;
								}
								cnt160++;
							}
							loop160:
								;

							} finally { DebugExitSubRule(160); }


							}
							break;

						default:
							if (cnt161 >= 1)
								goto loop161;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee161 = new EarlyExitException( 161, input );
							DebugRecognitionException(eee161);
							throw eee161;
						}
						cnt161++;
					}
					loop161:
						;

					} finally { DebugExitSubRule(161); }

					DebugLocation(515, 65);
					DEDENT368=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4045); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT368);

					DebugLocation(515, 72);
					// SugarCpp.g:515:72: ( NEWLINE )*
					try { DebugEnterSubRule(162);
					while (true)
					{
						int alt162=2;
						try { DebugEnterDecision(162, false);
						int LA162_0 = input.LA(1);

						if ((LA162_0==NEWLINE))
						{
							alt162 = 1;
						}


						} finally { DebugExitDecision(162); }
						switch ( alt162 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:515:72: NEWLINE
							{
							DebugLocation(515, 72);
							NEWLINE369=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4047); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE369);


							}
							break;

						default:
							goto loop162;
						}
					}

					loop162:
						;

					} finally { DebugExitSubRule(162); }

					DebugLocation(515, 81);
					DEDENT370=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4050); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT370);



					{
					// AST REWRITE
					// elements: where_item, where_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 515:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(515, 91);
						// SugarCpp.g:515:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(515, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(515, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(515, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(515, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(163); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:517:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(517, 9);
				string_literal371=(IToken)Match(input,168,Follow._168_in_where_expr4088); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_168.Add(string_literal371);

				DebugLocation(517, 17);
				// SugarCpp.g:517:17: ( NEWLINE )+
				int cnt164=0;
				try { DebugEnterSubRule(164);
				while (true)
				{
					int alt164=2;
					try { DebugEnterDecision(164, false);
					int LA164_0 = input.LA(1);

					if ((LA164_0==NEWLINE))
					{
						alt164 = 1;
					}


					} finally { DebugExitDecision(164); }
					switch (alt164)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:17: NEWLINE
						{
						DebugLocation(517, 17);
						NEWLINE372=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4090); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE372);


						}
						break;

					default:
						if (cnt164 >= 1)
							goto loop164;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee164 = new EarlyExitException( 164, input );
						DebugRecognitionException(eee164);
						throw eee164;
					}
					cnt164++;
				}
				loop164:
					;

				} finally { DebugExitSubRule(164); }

				DebugLocation(517, 26);
				INDENT373=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4093); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT373);

				DebugLocation(517, 33);
				// SugarCpp.g:517:33: ( NEWLINE )*
				try { DebugEnterSubRule(165);
				while (true)
				{
					int alt165=2;
					try { DebugEnterDecision(165, false);
					int LA165_0 = input.LA(1);

					if ((LA165_0==NEWLINE))
					{
						alt165 = 1;
					}


					} finally { DebugExitDecision(165); }
					switch ( alt165 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:33: NEWLINE
						{
						DebugLocation(517, 33);
						NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4095); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE374);


						}
						break;

					default:
						goto loop165;
					}
				}

				loop165:
					;

				} finally { DebugExitSubRule(165); }

				DebugLocation(517, 42);
				// SugarCpp.g:517:42: ( where_item ( NEWLINE )+ )+
				int cnt167=0;
				try { DebugEnterSubRule(167);
				while (true)
				{
					int alt167=2;
					try { DebugEnterDecision(167, false);
					int LA167_0 = input.LA(1);

					if ((LA167_0==IDENT||LA167_0==83||LA167_0==88||LA167_0==90||LA167_0==92||(LA167_0>=94 && LA167_0<=95)||(LA167_0>=98 && LA167_0<=99)||LA167_0==125||LA167_0==138||(LA167_0>=142 && LA167_0<=144)||LA167_0==151||LA167_0==155||LA167_0==157||LA167_0==159||(LA167_0>=162 && LA167_0<=166)||LA167_0==169||LA167_0==173))
					{
						alt167 = 1;
					}


					} finally { DebugExitDecision(167); }
					switch (alt167)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:517:43: where_item ( NEWLINE )+
						{
						DebugLocation(517, 43);
						PushFollow(Follow._where_item_in_where_expr4099);
						where_item375=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item375.Tree);
						DebugLocation(517, 54);
						// SugarCpp.g:517:54: ( NEWLINE )+
						int cnt166=0;
						try { DebugEnterSubRule(166);
						while (true)
						{
							int alt166=2;
							try { DebugEnterDecision(166, false);
							int LA166_0 = input.LA(1);

							if ((LA166_0==NEWLINE))
							{
								alt166 = 1;
							}


							} finally { DebugExitDecision(166); }
							switch (alt166)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:517:54: NEWLINE
								{
								DebugLocation(517, 54);
								NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4101); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE376);


								}
								break;

							default:
								if (cnt166 >= 1)
									goto loop166;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee166 = new EarlyExitException( 166, input );
								DebugRecognitionException(eee166);
								throw eee166;
							}
							cnt166++;
						}
						loop166:
							;

						} finally { DebugExitSubRule(166); }


						}
						break;

					default:
						if (cnt167 >= 1)
							goto loop167;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee167 = new EarlyExitException( 167, input );
						DebugRecognitionException(eee167);
						throw eee167;
					}
					cnt167++;
				}
				loop167:
					;

				} finally { DebugExitSubRule(167); }

				DebugLocation(517, 65);
				DEDENT377=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4106); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT377);



				{
				// AST REWRITE
				// elements: where_item, where_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 517:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(517, 75);
					// SugarCpp.g:517:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(517, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(517, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(517, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(517, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:518:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 518:15: -> expr
				{
					DebugLocation(518, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(168); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 56);
			LeaveRule("where_expr", 56);
			LeaveRule_where_expr();
		}
		DebugLocation(520, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:522:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 57);
		TraceIn("let_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal378 = default(IToken);
		IToken string_literal380 = default(IToken);
		IToken NEWLINE382 = default(IToken);
		IToken INDENT383 = default(IToken);
		IToken NEWLINE384 = default(IToken);
		IToken NEWLINE386 = default(IToken);
		IToken DEDENT387 = default(IToken);
		IToken NEWLINE389 = default(IToken);
		IToken INDENT390 = default(IToken);
		IToken NEWLINE391 = default(IToken);
		IToken NEWLINE393 = default(IToken);
		IToken string_literal394 = default(IToken);
		IToken NEWLINE396 = default(IToken);
		IToken DEDENT397 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item379 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr381 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr385 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr388 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item392 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr395 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal378_tree = default(CommonTree);
		CommonTree string_literal380_tree = default(CommonTree);
		CommonTree NEWLINE382_tree = default(CommonTree);
		CommonTree INDENT383_tree = default(CommonTree);
		CommonTree NEWLINE384_tree = default(CommonTree);
		CommonTree NEWLINE386_tree = default(CommonTree);
		CommonTree DEDENT387_tree = default(CommonTree);
		CommonTree NEWLINE389_tree = default(CommonTree);
		CommonTree INDENT390_tree = default(CommonTree);
		CommonTree NEWLINE391_tree = default(CommonTree);
		CommonTree NEWLINE393_tree = default(CommonTree);
		CommonTree string_literal394_tree = default(CommonTree);
		CommonTree NEWLINE396_tree = default(CommonTree);
		CommonTree DEDENT397_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(522, 1);
		try
		{
			// SugarCpp.g:523:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:523:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(523, 4);
			string_literal378=(IToken)Match(input,149,Follow._149_in_let_expr4164); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_149.Add(string_literal378);

			DebugLocation(523, 10);
			PushFollow(Follow._where_item_in_let_expr4166);
			where_item379=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item379.Tree);
			DebugLocation(523, 21);
			// SugarCpp.g:523:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt179=2;
			try { DebugEnterSubRule(179);
			try { DebugEnterDecision(179, false);
			int LA179_0 = input.LA(1);

			if ((LA179_0==146))
			{
				alt179 = 1;
			}
			else if ((LA179_0==NEWLINE))
			{
				alt179 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 179, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(179); }
			switch (alt179)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:523:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(523, 23);
				string_literal380=(IToken)Match(input,146,Follow._146_in_let_expr4170); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal380);

				DebugLocation(523, 28);
				// SugarCpp.g:523:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt173=2;
				try { DebugEnterSubRule(173);
				try { DebugEnterDecision(173, false);
				int LA173_0 = input.LA(1);

				if ((LA173_0==IDENT||LA173_0==NUMBER||LA173_0==STRING||LA173_0==83||LA173_0==88||LA173_0==90||LA173_0==92||(LA173_0>=94 && LA173_0<=95)||(LA173_0>=98 && LA173_0<=99)||(LA173_0>=125 && LA173_0<=126)||LA173_0==149||LA173_0==152||(LA173_0>=154 && LA173_0<=155)||LA173_0==173))
				{
					alt173 = 1;
				}
				else if ((LA173_0==NEWLINE))
				{
					alt173 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 173, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(173); }
				switch (alt173)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:523:30: expr
					{
					DebugLocation(523, 30);
					PushFollow(Follow._expr_in_let_expr4174);
					expr381=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr381.Tree);


					{
					// AST REWRITE
					// elements: expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 523:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(523, 38);
						// SugarCpp.g:523:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(523, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(523, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(523, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(523, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:524:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(524, 12);
					// SugarCpp.g:524:12: ( NEWLINE )+
					int cnt169=0;
					try { DebugEnterSubRule(169);
					while (true)
					{
						int alt169=2;
						try { DebugEnterDecision(169, false);
						int LA169_0 = input.LA(1);

						if ((LA169_0==NEWLINE))
						{
							alt169 = 1;
						}


						} finally { DebugExitDecision(169); }
						switch (alt169)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:524:12: NEWLINE
							{
							DebugLocation(524, 12);
							NEWLINE382=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4198); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE382);


							}
							break;

						default:
							if (cnt169 >= 1)
								goto loop169;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee169 = new EarlyExitException( 169, input );
							DebugRecognitionException(eee169);
							throw eee169;
						}
						cnt169++;
					}
					loop169:
						;

					} finally { DebugExitSubRule(169); }

					DebugLocation(524, 21);
					// SugarCpp.g:524:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt172=2;
					try { DebugEnterSubRule(172);
					try { DebugEnterDecision(172, false);
					int LA172_0 = input.LA(1);

					if ((LA172_0==INDENT))
					{
						alt172 = 1;
					}
					else if ((LA172_0==IDENT||LA172_0==NUMBER||LA172_0==STRING||LA172_0==83||LA172_0==88||LA172_0==90||LA172_0==92||(LA172_0>=94 && LA172_0<=95)||(LA172_0>=98 && LA172_0<=99)||(LA172_0>=125 && LA172_0<=126)||LA172_0==149||LA172_0==152||(LA172_0>=154 && LA172_0<=155)||LA172_0==173))
					{
						alt172 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 172, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(172); }
					switch (alt172)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:524:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(524, 23);
						INDENT383=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4203); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT383);

						DebugLocation(524, 30);
						// SugarCpp.g:524:30: ( NEWLINE )*
						try { DebugEnterSubRule(170);
						while (true)
						{
							int alt170=2;
							try { DebugEnterDecision(170, false);
							int LA170_0 = input.LA(1);

							if ((LA170_0==NEWLINE))
							{
								alt170 = 1;
							}


							} finally { DebugExitDecision(170); }
							switch ( alt170 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:524:30: NEWLINE
								{
								DebugLocation(524, 30);
								NEWLINE384=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4205); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE384);


								}
								break;

							default:
								goto loop170;
							}
						}

						loop170:
							;

						} finally { DebugExitSubRule(170); }

						DebugLocation(524, 39);
						PushFollow(Follow._expr_in_let_expr4208);
						expr385=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr385.Tree);
						DebugLocation(524, 44);
						// SugarCpp.g:524:44: ( NEWLINE )+
						int cnt171=0;
						try { DebugEnterSubRule(171);
						while (true)
						{
							int alt171=2;
							try { DebugEnterDecision(171, false);
							int LA171_0 = input.LA(1);

							if ((LA171_0==NEWLINE))
							{
								alt171 = 1;
							}


							} finally { DebugExitDecision(171); }
							switch (alt171)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:524:44: NEWLINE
								{
								DebugLocation(524, 44);
								NEWLINE386=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4210); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE386);


								}
								break;

							default:
								if (cnt171 >= 1)
									goto loop171;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee171 = new EarlyExitException( 171, input );
								DebugRecognitionException(eee171);
								throw eee171;
							}
							cnt171++;
						}
						loop171:
							;

						} finally { DebugExitSubRule(171); }

						DebugLocation(524, 53);
						DEDENT387=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4213); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT387);



						{
						// AST REWRITE
						// elements: expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 524:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(524, 63);
							// SugarCpp.g:524:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(524, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(524, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(524, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(524, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:525:14: expr
						{
						DebugLocation(525, 14);
						PushFollow(Follow._expr_in_let_expr4239);
						expr388=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr388.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 525:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(525, 22);
							// SugarCpp.g:525:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(525, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(525, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(525, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(525, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(172); }


					}
					break;

				}
				} finally { DebugExitSubRule(173); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:528:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(528, 11);
				// SugarCpp.g:528:11: ( NEWLINE )+
				int cnt174=0;
				try { DebugEnterSubRule(174);
				while (true)
				{
					int alt174=2;
					try { DebugEnterDecision(174, false);
					int LA174_0 = input.LA(1);

					if ((LA174_0==NEWLINE))
					{
						alt174 = 1;
					}


					} finally { DebugExitDecision(174); }
					switch (alt174)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:11: NEWLINE
						{
						DebugLocation(528, 11);
						NEWLINE389=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4286); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE389);


						}
						break;

					default:
						if (cnt174 >= 1)
							goto loop174;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee174 = new EarlyExitException( 174, input );
						DebugRecognitionException(eee174);
						throw eee174;
					}
					cnt174++;
				}
				loop174:
					;

				} finally { DebugExitSubRule(174); }

				DebugLocation(528, 20);
				INDENT390=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4289); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT390);

				DebugLocation(528, 27);
				// SugarCpp.g:528:27: ( NEWLINE )*
				try { DebugEnterSubRule(175);
				while (true)
				{
					int alt175=2;
					try { DebugEnterDecision(175, false);
					int LA175_0 = input.LA(1);

					if ((LA175_0==NEWLINE))
					{
						alt175 = 1;
					}


					} finally { DebugExitDecision(175); }
					switch ( alt175 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:27: NEWLINE
						{
						DebugLocation(528, 27);
						NEWLINE391=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4291); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE391);


						}
						break;

					default:
						goto loop175;
					}
				}

				loop175:
					;

				} finally { DebugExitSubRule(175); }

				DebugLocation(528, 36);
				// SugarCpp.g:528:36: ( where_item ( NEWLINE )+ )+
				int cnt177=0;
				try { DebugEnterSubRule(177);
				while (true)
				{
					int alt177=2;
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==IDENT||LA177_0==83||LA177_0==88||LA177_0==90||LA177_0==92||(LA177_0>=94 && LA177_0<=95)||(LA177_0>=98 && LA177_0<=99)||LA177_0==125||LA177_0==138||(LA177_0>=142 && LA177_0<=144)||LA177_0==151||LA177_0==155||LA177_0==157||LA177_0==159||(LA177_0>=162 && LA177_0<=166)||LA177_0==169||LA177_0==173))
					{
						alt177 = 1;
					}


					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:37: where_item ( NEWLINE )+
						{
						DebugLocation(528, 37);
						PushFollow(Follow._where_item_in_let_expr4295);
						where_item392=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item392.Tree);
						DebugLocation(528, 48);
						// SugarCpp.g:528:48: ( NEWLINE )+
						int cnt176=0;
						try { DebugEnterSubRule(176);
						while (true)
						{
							int alt176=2;
							try { DebugEnterDecision(176, false);
							int LA176_0 = input.LA(1);

							if ((LA176_0==NEWLINE))
							{
								alt176 = 1;
							}


							} finally { DebugExitDecision(176); }
							switch (alt176)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:528:48: NEWLINE
								{
								DebugLocation(528, 48);
								NEWLINE393=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4297); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE393);


								}
								break;

							default:
								if (cnt176 >= 1)
									goto loop176;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee176 = new EarlyExitException( 176, input );
								DebugRecognitionException(eee176);
								throw eee176;
							}
							cnt176++;
						}
						loop176:
							;

						} finally { DebugExitSubRule(176); }


						}
						break;

					default:
						if (cnt177 >= 1)
							goto loop177;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee177 = new EarlyExitException( 177, input );
						DebugRecognitionException(eee177);
						throw eee177;
					}
					cnt177++;
				}
				loop177:
					;

				} finally { DebugExitSubRule(177); }

				DebugLocation(528, 59);
				string_literal394=(IToken)Match(input,146,Follow._146_in_let_expr4302); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal394);

				DebugLocation(528, 64);
				PushFollow(Follow._expr_in_let_expr4304);
				expr395=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr395.Tree);
				DebugLocation(528, 69);
				// SugarCpp.g:528:69: ( NEWLINE )+
				int cnt178=0;
				try { DebugEnterSubRule(178);
				while (true)
				{
					int alt178=2;
					try { DebugEnterDecision(178, false);
					int LA178_0 = input.LA(1);

					if ((LA178_0==NEWLINE))
					{
						alt178 = 1;
					}


					} finally { DebugExitDecision(178); }
					switch (alt178)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:69: NEWLINE
						{
						DebugLocation(528, 69);
						NEWLINE396=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4306); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE396);


						}
						break;

					default:
						if (cnt178 >= 1)
							goto loop178;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee178 = new EarlyExitException( 178, input );
						DebugRecognitionException(eee178);
						throw eee178;
					}
					cnt178++;
				}
				loop178:
					;

				} finally { DebugExitSubRule(178); }

				DebugLocation(528, 78);
				DEDENT397=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4309); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT397);



				{
				// AST REWRITE
				// elements: where_item, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 528:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(528, 88);
					// SugarCpp.g:528:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(528, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(528, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(528, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(528, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(179); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 57);
			LeaveRule("let_expr", 57);
			LeaveRule_let_expr();
		}
		DebugLocation(530, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:532:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 58);
		TraceIn("match_item", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal398 = default(IToken);
		IToken string_literal400 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr399 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr401 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal398_tree = default(CommonTree);
		CommonTree string_literal400_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(532, 1);
		try
		{
			// SugarCpp.g:533:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:533:4: '|' expr '=>' where_expr
			{
			DebugLocation(533, 4);
			char_literal398=(IToken)Match(input,170,Follow._170_in_match_item4341); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_170.Add(char_literal398);

			DebugLocation(533, 8);
			PushFollow(Follow._expr_in_match_item4343);
			expr399=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr399.Tree);
			DebugLocation(533, 13);
			string_literal400=(IToken)Match(input,118,Follow._118_in_match_item4345); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_118.Add(string_literal400);

			DebugLocation(533, 18);
			PushFollow(Follow._where_expr_in_match_item4347);
			where_expr401=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr401.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 533:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(533, 32);
				// SugarCpp.g:533:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(533, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(533, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(533, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 58);
			LeaveRule("match_item", 58);
			LeaveRule_match_item();
		}
		DebugLocation(534, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:536:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 59);
		TraceIn("match_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal402 = default(IToken);
		IToken NEWLINE404 = default(IToken);
		IToken INDENT405 = default(IToken);
		IToken NEWLINE406 = default(IToken);
		IToken NEWLINE408 = default(IToken);
		IToken DEDENT409 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr403 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item407 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal402_tree = default(CommonTree);
		CommonTree NEWLINE404_tree = default(CommonTree);
		CommonTree INDENT405_tree = default(CommonTree);
		CommonTree NEWLINE406_tree = default(CommonTree);
		CommonTree NEWLINE408_tree = default(CommonTree);
		CommonTree DEDENT409_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(536, 1);
		try
		{
			// SugarCpp.g:537:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:537:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(537, 4);
			string_literal402=(IToken)Match(input,152,Follow._152_in_match_expr4368); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_152.Add(string_literal402);

			DebugLocation(537, 12);
			// SugarCpp.g:537:12: ( expr )?
			int alt180=2;
			try { DebugEnterSubRule(180);
			try { DebugEnterDecision(180, false);
			int LA180_0 = input.LA(1);

			if ((LA180_0==IDENT||LA180_0==NUMBER||LA180_0==STRING||LA180_0==83||LA180_0==88||LA180_0==90||LA180_0==92||(LA180_0>=94 && LA180_0<=95)||(LA180_0>=98 && LA180_0<=99)||(LA180_0>=125 && LA180_0<=126)||LA180_0==149||LA180_0==152||(LA180_0>=154 && LA180_0<=155)||LA180_0==173))
			{
				alt180 = 1;
			}
			} finally { DebugExitDecision(180); }
			switch (alt180)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:537:12: expr
				{
				DebugLocation(537, 12);
				PushFollow(Follow._expr_in_match_expr4370);
				expr403=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr403.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(180); }

			DebugLocation(537, 18);
			// SugarCpp.g:537:18: ( NEWLINE )+
			int cnt181=0;
			try { DebugEnterSubRule(181);
			while (true)
			{
				int alt181=2;
				try { DebugEnterDecision(181, false);
				int LA181_0 = input.LA(1);

				if ((LA181_0==NEWLINE))
				{
					alt181 = 1;
				}


				} finally { DebugExitDecision(181); }
				switch (alt181)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:537:18: NEWLINE
					{
					DebugLocation(537, 18);
					NEWLINE404=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4373); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE404);


					}
					break;

				default:
					if (cnt181 >= 1)
						goto loop181;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee181 = new EarlyExitException( 181, input );
					DebugRecognitionException(eee181);
					throw eee181;
				}
				cnt181++;
			}
			loop181:
				;

			} finally { DebugExitSubRule(181); }

			DebugLocation(537, 27);
			INDENT405=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4376); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT405);

			DebugLocation(537, 34);
			// SugarCpp.g:537:34: ( NEWLINE )*
			try { DebugEnterSubRule(182);
			while (true)
			{
				int alt182=2;
				try { DebugEnterDecision(182, false);
				int LA182_0 = input.LA(1);

				if ((LA182_0==NEWLINE))
				{
					alt182 = 1;
				}


				} finally { DebugExitDecision(182); }
				switch ( alt182 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:537:34: NEWLINE
					{
					DebugLocation(537, 34);
					NEWLINE406=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4378); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE406);


					}
					break;

				default:
					goto loop182;
				}
			}

			loop182:
				;

			} finally { DebugExitSubRule(182); }

			DebugLocation(537, 43);
			// SugarCpp.g:537:43: ( match_item ( NEWLINE )+ )+
			int cnt184=0;
			try { DebugEnterSubRule(184);
			while (true)
			{
				int alt184=2;
				try { DebugEnterDecision(184, false);
				int LA184_0 = input.LA(1);

				if ((LA184_0==170))
				{
					alt184 = 1;
				}


				} finally { DebugExitDecision(184); }
				switch (alt184)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:537:44: match_item ( NEWLINE )+
					{
					DebugLocation(537, 44);
					PushFollow(Follow._match_item_in_match_expr4382);
					match_item407=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item407.Tree);
					DebugLocation(537, 55);
					// SugarCpp.g:537:55: ( NEWLINE )+
					int cnt183=0;
					try { DebugEnterSubRule(183);
					while (true)
					{
						int alt183=2;
						try { DebugEnterDecision(183, false);
						int LA183_0 = input.LA(1);

						if ((LA183_0==NEWLINE))
						{
							alt183 = 1;
						}


						} finally { DebugExitDecision(183); }
						switch (alt183)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:537:55: NEWLINE
							{
							DebugLocation(537, 55);
							NEWLINE408=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4384); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE408);


							}
							break;

						default:
							if (cnt183 >= 1)
								goto loop183;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee183 = new EarlyExitException( 183, input );
							DebugRecognitionException(eee183);
							throw eee183;
						}
						cnt183++;
					}
					loop183:
						;

					} finally { DebugExitSubRule(183); }


					}
					break;

				default:
					if (cnt184 >= 1)
						goto loop184;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee184 = new EarlyExitException( 184, input );
					DebugRecognitionException(eee184);
					throw eee184;
				}
				cnt184++;
			}
			loop184:
				;

			} finally { DebugExitSubRule(184); }

			DebugLocation(537, 66);
			DEDENT409=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4389); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT409);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 537:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(537, 76);
				// SugarCpp.g:537:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(537, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(537, 89);
				// SugarCpp.g:537:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(537, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(537, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(537, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 59);
			LeaveRule("match_expr", 59);
			LeaveRule_match_expr();
		}
		DebugLocation(538, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:540:1: expr : ( list_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 60);
		TraceIn("expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr410 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr411 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr412 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(540, 1);
		try
		{
			// SugarCpp.g:541:2: ( list_expr | match_expr | let_expr )
			int alt185=3;
			try { DebugEnterDecision(185, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 83:
			case 88:
			case 90:
			case 92:
			case 94:
			case 95:
			case 98:
			case 99:
			case 125:
			case 126:
			case 154:
			case 155:
			case 173:
				{
				alt185 = 1;
				}
				break;
			case 152:
				{
				alt185 = 2;
				}
				break;
			case 149:
				{
				alt185 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 185, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(185); }
			switch (alt185)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:541:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(541, 4);
				PushFollow(Follow._list_expr_in_expr4412);
				list_expr410=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr410.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:542:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(542, 4);
				PushFollow(Follow._match_expr_in_expr4417);
				match_expr411=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr411.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:543:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(543, 4);
				PushFollow(Follow._let_expr_in_expr4422);
				let_expr412=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr412.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 60);
			LeaveRule("expr", 60);
			LeaveRule_expr();
		}
		DebugLocation(544, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:546:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 61);
		TraceIn("list_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal413 = default(IToken);
		IToken char_literal414 = default(IToken);
		IToken NEWLINE415 = default(IToken);
		IToken INDENT416 = default(IToken);
		IToken DEDENT417 = default(IToken);
		IToken char_literal419 = default(IToken);
		IToken NEWLINE420 = default(IToken);
		IToken INDENT421 = default(IToken);
		IToken DEDENT422 = default(IToken);
		IToken char_literal424 = default(IToken);
		IToken NEWLINE425 = default(IToken);
		IToken INDENT426 = default(IToken);
		IToken DEDENT427 = default(IToken);
		IToken char_literal428 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr418 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr429 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal413_tree = default(CommonTree);
		CommonTree char_literal414_tree = default(CommonTree);
		CommonTree NEWLINE415_tree = default(CommonTree);
		CommonTree INDENT416_tree = default(CommonTree);
		CommonTree DEDENT417_tree = default(CommonTree);
		CommonTree char_literal419_tree = default(CommonTree);
		CommonTree NEWLINE420_tree = default(CommonTree);
		CommonTree INDENT421_tree = default(CommonTree);
		CommonTree DEDENT422_tree = default(CommonTree);
		CommonTree char_literal424_tree = default(CommonTree);
		CommonTree NEWLINE425_tree = default(CommonTree);
		CommonTree INDENT426_tree = default(CommonTree);
		CommonTree DEDENT427_tree = default(CommonTree);
		CommonTree char_literal428_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(546, 1);
		try
		{
			// SugarCpp.g:547:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt191=2;
			try { DebugEnterDecision(191, false);
			int LA191_0 = input.LA(1);

			if ((LA191_0==126))
			{
				alt191 = 1;
			}
			else if ((LA191_0==IDENT||LA191_0==NUMBER||LA191_0==STRING||LA191_0==83||LA191_0==88||LA191_0==90||LA191_0==92||(LA191_0>=94 && LA191_0<=95)||(LA191_0>=98 && LA191_0<=99)||LA191_0==125||(LA191_0>=154 && LA191_0<=155)||LA191_0==173))
			{
				alt191 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(191); }
			switch (alt191)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:547:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(547, 4);
				char_literal413=(IToken)Match(input,126,Follow._126_in_list_expr4433); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_126.Add(char_literal413);

				DebugLocation(547, 8);
				// SugarCpp.g:547:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt189=2;
				try { DebugEnterSubRule(189);
				try { DebugEnterDecision(189, false);
				try
				{
					alt189 = dfa189.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(189); }
				switch (alt189)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:547:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(547, 9);
					// SugarCpp.g:547:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(186);
					while (true)
					{
						int alt186=5;
						try { DebugEnterDecision(186, false);
						switch (input.LA(1))
						{
						case 97:
							{
							alt186 = 1;
							}
							break;
						case NEWLINE:
							{
							alt186 = 2;
							}
							break;
						case INDENT:
							{
							alt186 = 3;
							}
							break;
						case DEDENT:
							{
							alt186 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(186); }
						switch ( alt186 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:547:10: ','
							{
							DebugLocation(547, 10);
							char_literal414=(IToken)Match(input,97,Follow._97_in_list_expr4437); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal414);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:547:16: NEWLINE
							{
							DebugLocation(547, 16);
							NEWLINE415=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4441); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE415);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:547:26: INDENT
							{
							DebugLocation(547, 26);
							INDENT416=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4445); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT416);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:547:35: DEDENT
							{
							DebugLocation(547, 35);
							DEDENT417=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4449); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT417);


							}
							break;

						default:
							goto loop186;
						}
					}

					loop186:
						;

					} finally { DebugExitSubRule(186); }

					DebugLocation(547, 44);
					PushFollow(Follow._list_expr_in_list_expr4453);
					list_expr418=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr418.Tree);
					DebugLocation(547, 54);
					// SugarCpp.g:547:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(188);
					while (true)
					{
						int alt188=2;
						try { DebugEnterDecision(188, false);
						try
						{
							alt188 = dfa188.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(188); }
						switch ( alt188 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:547:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(547, 55);
							// SugarCpp.g:547:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt187=0;
							try { DebugEnterSubRule(187);
							while (true)
							{
								int alt187=5;
								try { DebugEnterDecision(187, false);
								switch (input.LA(1))
								{
								case 97:
									{
									alt187 = 1;
									}
									break;
								case NEWLINE:
									{
									alt187 = 2;
									}
									break;
								case INDENT:
									{
									alt187 = 3;
									}
									break;
								case DEDENT:
									{
									alt187 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(187); }
								switch (alt187)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:547:56: ','
									{
									DebugLocation(547, 56);
									char_literal419=(IToken)Match(input,97,Follow._97_in_list_expr4457); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_97.Add(char_literal419);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:547:62: NEWLINE
									{
									DebugLocation(547, 62);
									NEWLINE420=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4461); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE420);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:547:72: INDENT
									{
									DebugLocation(547, 72);
									INDENT421=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4465); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT421);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:547:81: DEDENT
									{
									DebugLocation(547, 81);
									DEDENT422=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4469); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT422);


									}
									break;

								default:
									if (cnt187 >= 1)
										goto loop187;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee187 = new EarlyExitException( 187, input );
									DebugRecognitionException(eee187);
									throw eee187;
								}
								cnt187++;
							}
							loop187:
								;

							} finally { DebugExitSubRule(187); }

							DebugLocation(547, 90);
							PushFollow(Follow._list_expr_in_list_expr4473);
							list_expr423=list_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_list_expr.Add(list_expr423.Tree);

							}
							break;

						default:
							goto loop188;
						}
					}

					loop188:
						;

					} finally { DebugExitSubRule(188); }


					}
					break;

				}
				} finally { DebugExitSubRule(189); }

				DebugLocation(547, 104);
				// SugarCpp.g:547:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(190);
				while (true)
				{
					int alt190=5;
					try { DebugEnterDecision(190, false);
					switch (input.LA(1))
					{
					case 97:
						{
						alt190 = 1;
						}
						break;
					case NEWLINE:
						{
						alt190 = 2;
						}
						break;
					case INDENT:
						{
						alt190 = 3;
						}
						break;
					case DEDENT:
						{
						alt190 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(190); }
					switch ( alt190 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:547:105: ','
						{
						DebugLocation(547, 105);
						char_literal424=(IToken)Match(input,97,Follow._97_in_list_expr4480); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_97.Add(char_literal424);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:547:111: NEWLINE
						{
						DebugLocation(547, 111);
						NEWLINE425=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4484); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE425);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:547:121: INDENT
						{
						DebugLocation(547, 121);
						INDENT426=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4488); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT426);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:547:130: DEDENT
						{
						DebugLocation(547, 130);
						DEDENT427=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4492); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT427);


						}
						break;

					default:
						goto loop190;
					}
				}

				loop190:
					;

				} finally { DebugExitSubRule(190); }

				DebugLocation(547, 139);
				char_literal428=(IToken)Match(input,127,Follow._127_in_list_expr4496); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_127.Add(char_literal428);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 547:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(547, 146);
					// SugarCpp.g:547:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(547, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(547, 158);
					// SugarCpp.g:547:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(547, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:548:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(548, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4510);
				lambda_expr429=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr429.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 61);
			LeaveRule("list_expr", 61);
			LeaveRule_list_expr();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:551:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 62);
		TraceIn("lambda_value", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE431 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr430 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block432 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE431_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(551, 1);
		try
		{
			// SugarCpp.g:552:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt193=2;
			try { DebugEnterDecision(193, false);
			int LA193_0 = input.LA(1);

			if ((LA193_0==IDENT||LA193_0==NUMBER||LA193_0==STRING||LA193_0==83||LA193_0==88||LA193_0==90||LA193_0==92||(LA193_0>=94 && LA193_0<=95)||(LA193_0>=98 && LA193_0<=99)||(LA193_0>=125 && LA193_0<=126)||LA193_0==149||LA193_0==152||(LA193_0>=154 && LA193_0<=155)||LA193_0==173))
			{
				alt193 = 1;
			}
			else if ((LA193_0==NEWLINE))
			{
				alt193 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 193, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(193); }
			switch (alt193)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:552:4: expr
				{
				DebugLocation(552, 4);
				PushFollow(Follow._expr_in_lambda_value4521);
				expr430=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr430.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 552:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(552, 12);
					// SugarCpp.g:552:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(552, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(552, 25);
					// SugarCpp.g:552:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(552, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(552, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:553:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(553, 4);
				// SugarCpp.g:553:4: ( NEWLINE )+
				int cnt192=0;
				try { DebugEnterSubRule(192);
				while (true)
				{
					int alt192=2;
					try { DebugEnterDecision(192, false);
					int LA192_0 = input.LA(1);

					if ((LA192_0==NEWLINE))
					{
						alt192 = 1;
					}


					} finally { DebugExitDecision(192); }
					switch (alt192)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:553:4: NEWLINE
						{
						DebugLocation(553, 4);
						NEWLINE431=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4538); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE431);


						}
						break;

					default:
						if (cnt192 >= 1)
							goto loop192;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee192 = new EarlyExitException( 192, input );
						DebugRecognitionException(eee192);
						throw eee192;
					}
					cnt192++;
				}
				loop192:
					;

				} finally { DebugExitSubRule(192); }

				DebugLocation(553, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4541);
				stmt_block432=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block432.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 553:24: -> stmt_block
				{
					DebugLocation(553, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 62);
			LeaveRule("lambda_value", 62);
			LeaveRule_lambda_value();
		}
		DebugLocation(554, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:556:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 63);
		TraceIn("lambda_type", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal433 = default(IToken);
		IToken char_literal435 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name434 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal433_tree = default(CommonTree);
		CommonTree char_literal435_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(556, 1);
		try
		{
			// SugarCpp.g:557:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:557:4: '(' type_name ')'
			{
			DebugLocation(557, 4);
			char_literal433=(IToken)Match(input,90,Follow._90_in_lambda_type4556); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_90.Add(char_literal433);

			DebugLocation(557, 8);
			PushFollow(Follow._type_name_in_lambda_type4558);
			type_name434=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name434.Tree);
			DebugLocation(557, 18);
			char_literal435=(IToken)Match(input,91,Follow._91_in_lambda_type4560); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal435);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 557:22: -> type_name
			{
				DebugLocation(557, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 63);
			LeaveRule("lambda_type", 63);
			LeaveRule_lambda_type();
		}
		DebugLocation(558, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:560:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 64);
		TraceIn("lambda_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal436 = default(IToken);
		IToken char_literal438 = default(IToken);
		IToken string_literal440 = default(IToken);
		IToken string_literal442 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args437 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value441 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value443 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr444 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal436_tree = default(CommonTree);
		CommonTree char_literal438_tree = default(CommonTree);
		CommonTree string_literal440_tree = default(CommonTree);
		CommonTree string_literal442_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(560, 1);
		try
		{
			// SugarCpp.g:561:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt197=2;
			try { DebugEnterDecision(197, false);
			try
			{
				alt197 = dfa197.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(197); }
			switch (alt197)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:561:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(561, 4);
				char_literal436=(IToken)Match(input,90,Follow._90_in_lambda_expr4575); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal436);

				DebugLocation(561, 8);
				// SugarCpp.g:561:8: ( func_args )?
				int alt194=2;
				try { DebugEnterSubRule(194);
				try { DebugEnterDecision(194, false);
				int LA194_0 = input.LA(1);

				if ((LA194_0==IDENT||LA194_0==109))
				{
					alt194 = 1;
				}
				} finally { DebugExitDecision(194); }
				switch (alt194)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:8: func_args
					{
					DebugLocation(561, 8);
					PushFollow(Follow._func_args_in_lambda_expr4577);
					func_args437=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args437.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(194); }

				DebugLocation(561, 19);
				char_literal438=(IToken)Match(input,91,Follow._91_in_lambda_expr4580); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal438);

				DebugLocation(561, 23);
				// SugarCpp.g:561:23: ( lambda_type )?
				int alt195=2;
				try { DebugEnterSubRule(195);
				try { DebugEnterDecision(195, false);
				int LA195_0 = input.LA(1);

				if ((LA195_0==90))
				{
					alt195 = 1;
				}
				} finally { DebugExitDecision(195); }
				switch (alt195)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:23: lambda_type
					{
					DebugLocation(561, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4582);
					lambda_type439=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type439.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(195); }

				DebugLocation(561, 36);
				// SugarCpp.g:561:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt196=2;
				try { DebugEnterSubRule(196);
				try { DebugEnterDecision(196, false);
				int LA196_0 = input.LA(1);

				if ((LA196_0==101))
				{
					alt196 = 1;
				}
				else if ((LA196_0==118))
				{
					alt196 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 196, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(196); }
				switch (alt196)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:561:38: '->' lambda_value
					{
					DebugLocation(561, 38);
					string_literal440=(IToken)Match(input,101,Follow._101_in_lambda_expr4587); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal440);

					DebugLocation(561, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4589);
					lambda_value441=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value441.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, lambda_value, func_args, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 561:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(561, 60);
						// SugarCpp.g:561:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(561, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(561, 74);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(561, 79);
						// SugarCpp.g:561:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(561, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(561, 90);
						// SugarCpp.g:561:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(561, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(561, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:562:17: '=>' lambda_value
					{
					DebugLocation(562, 17);
					string_literal442=(IToken)Match(input,118,Follow._118_in_lambda_expr4624); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_118.Add(string_literal442);

					DebugLocation(562, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr4626);
					lambda_value443=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value443.Tree);


					{
					// AST REWRITE
					// elements: lambda_type, lambda_value, func_args, 118
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 562:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(562, 39);
						// SugarCpp.g:562:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(562, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(562, 53);
						adaptor.AddChild(root_1, stream_118.NextNode());
						DebugLocation(562, 58);
						// SugarCpp.g:562:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(562, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(562, 69);
						// SugarCpp.g:562:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(562, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(562, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(196); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:563:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(563, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr4649);
				modify_expr444=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr444.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 64);
			LeaveRule("lambda_expr", 64);
			LeaveRule_lambda_expr();
		}
		DebugLocation(564, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:566:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 65);
		TraceIn("modify_expr_op", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set445 = default(IToken);

		CommonTree set445_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(566, 91);
		try
		{
			// SugarCpp.g:566:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(566, 15);

			set445=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==96||input.LA(1)==100||input.LA(1)==106||input.LA(1)==114||input.LA(1)==116||input.LA(1)==122||input.LA(1)==129||input.LA(1)==171)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set445));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 65);
			LeaveRule("modify_expr_op", 65);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(566, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:567:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 66);
		TraceIn("modify_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set447 = default(IToken);
		IToken char_literal449 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr446 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr448 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr450 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set447_tree = default(CommonTree);
		CommonTree char_literal449_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(567, 1);
		try
		{
			// SugarCpp.g:568:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:568:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(568, 4);
			PushFollow(Follow._cond_expr_in_modify_expr4706);
			cond_expr446=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr446.Tree);
			DebugLocation(568, 14);
			// SugarCpp.g:568:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt199=3;
			try { DebugEnterSubRule(199);
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==86||LA199_0==89||LA199_0==93||LA199_0==96||LA199_0==100||LA199_0==106||LA199_0==109||LA199_0==114||LA199_0==122||LA199_0==129||LA199_0==171))
			{
				alt199 = 1;
			}
			else if ((LA199_0==116))
			{
				alt199 = 2;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:568:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(568, 94);

				set447=(IToken)input.LT(1);
				set447=(IToken)input.LT(1);
				if (input.LA(1)==86||input.LA(1)==89||input.LA(1)==93||input.LA(1)==96||input.LA(1)==100||input.LA(1)==106||input.LA(1)==109||input.LA(1)==114||input.LA(1)==122||input.LA(1)==129||input.LA(1)==171)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set447), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(568, 96);
				PushFollow(Follow._cond_expr_in_modify_expr4755);
				cond_expr448=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr448.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:569:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(569, 7);
				// SugarCpp.g:569:7: ( '=' ^ cond_expr )+
				int cnt198=0;
				try { DebugEnterSubRule(198);
				while (true)
				{
					int alt198=2;
					try { DebugEnterDecision(198, false);
					int LA198_0 = input.LA(1);

					if ((LA198_0==116))
					{
						alt198 = 1;
					}


					} finally { DebugExitDecision(198); }
					switch (alt198)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:569:8: '=' ^ cond_expr
						{
						DebugLocation(569, 11);
						char_literal449=(IToken)Match(input,116,Follow._116_in_modify_expr4764); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal449_tree = (CommonTree)adaptor.Create(char_literal449);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal449_tree, root_0);
						}
						DebugLocation(569, 13);
						PushFollow(Follow._cond_expr_in_modify_expr4767);
						cond_expr450=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr450.Tree);

						}
						break;

					default:
						if (cnt198 >= 1)
							goto loop198;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee198 = new EarlyExitException( 198, input );
						DebugRecognitionException(eee198);
						throw eee198;
					}
					cnt198++;
				}
				loop198:
					;

				} finally { DebugExitSubRule(198); }


				}
				break;

			}
			} finally { DebugExitSubRule(199); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 66);
			LeaveRule("modify_expr", 66);
			LeaveRule_modify_expr();
		}
		DebugLocation(570, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:572:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 67);
		TraceIn("cond_expr_item", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr451 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(572, 24);
		try
		{
			// SugarCpp.g:572:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:572:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(572, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item4780);
			or_expr451=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr451.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 67);
			LeaveRule("cond_expr_item", 67);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(572, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:573:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 68);
		TraceIn("cond_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal452 = default(IToken);
		IToken char_literal453 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal452_tree = default(CommonTree);
		CommonTree char_literal453_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(573, 1);
		try
		{
			// SugarCpp.g:574:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:574:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(574, 4);
			// SugarCpp.g:574:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:574:5: a= or_expr
			{
			DebugLocation(574, 6);
			PushFollow(Follow._or_expr_in_cond_expr4792);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 574:15: -> $a
			{
				DebugLocation(574, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(574, 22);
			// SugarCpp.g:574:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt202=2;
			try { DebugEnterSubRule(202);
			try { DebugEnterDecision(202, false);
			int LA202_0 = input.LA(1);

			if ((LA202_0==123))
			{
				alt202 = 1;
			}
			} finally { DebugExitDecision(202); }
			switch (alt202)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:574:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(574, 23);
				char_literal452=(IToken)Match(input,123,Follow._123_in_cond_expr4801); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_123.Add(char_literal452);

				DebugLocation(574, 27);
				// SugarCpp.g:574:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt201=2;
				try { DebugEnterSubRule(201);
				try { DebugEnterDecision(201, false);
				int LA201_0 = input.LA(1);

				if ((LA201_0==IDENT||LA201_0==NUMBER||LA201_0==STRING||LA201_0==83||LA201_0==88||LA201_0==90||LA201_0==92||(LA201_0>=94 && LA201_0<=95)||(LA201_0>=98 && LA201_0<=99)||LA201_0==125||(LA201_0>=154 && LA201_0<=155)||LA201_0==173))
				{
					alt201 = 1;
				}
				else if ((LA201_0==DEDENT||LA201_0==INDENT||LA201_0==NEWLINE||LA201_0==86||LA201_0==89||LA201_0==91||LA201_0==93||(LA201_0>=96 && LA201_0<=97)||LA201_0==100||LA201_0==106||(LA201_0>=109 && LA201_0<=110)||LA201_0==114||LA201_0==116||LA201_0==118||LA201_0==122||LA201_0==127||LA201_0==129||LA201_0==133||LA201_0==139||(LA201_0>=143 && LA201_0<=144)||LA201_0==146||(LA201_0>=160 && LA201_0<=161)||(LA201_0>=164 && LA201_0<=165)||(LA201_0>=168 && LA201_0<=169)||LA201_0==171))
				{
					alt201 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 201, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(201); }
				switch (alt201)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:574:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(574, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr4807);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(574, 46);
					// SugarCpp.g:574:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt200=2;
					try { DebugEnterSubRule(200);
					try { DebugEnterDecision(200, false);
					int LA200_0 = input.LA(1);

					if ((LA200_0==107))
					{
						alt200 = 1;
					}
					else if ((LA200_0==DEDENT||LA200_0==INDENT||LA200_0==NEWLINE||LA200_0==86||LA200_0==89||LA200_0==91||LA200_0==93||(LA200_0>=96 && LA200_0<=97)||LA200_0==100||LA200_0==106||(LA200_0>=109 && LA200_0<=110)||LA200_0==114||LA200_0==116||LA200_0==118||LA200_0==122||LA200_0==127||LA200_0==129||LA200_0==133||LA200_0==139||(LA200_0>=143 && LA200_0<=144)||LA200_0==146||(LA200_0>=160 && LA200_0<=161)||(LA200_0>=164 && LA200_0<=165)||(LA200_0>=168 && LA200_0<=169)||LA200_0==171))
					{
						alt200 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 200, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(200); }
					switch (alt200)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:574:48: ':' b= cond_expr_item
						{
						DebugLocation(574, 48);
						char_literal453=(IToken)Match(input,107,Follow._107_in_cond_expr4811); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_107.Add(char_literal453);

						DebugLocation(574, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr4815);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, b, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 574:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(574, 72);
							// SugarCpp.g:574:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(574, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(574, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(574, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(574, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:575:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 575:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(575, 20);
							// SugarCpp.g:575:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(575, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(575, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(575, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(200); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:577:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 577:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(577, 14);
						// SugarCpp.g:577:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(577, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(577, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(201); }


				}
				break;

			}
			} finally { DebugExitSubRule(202); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 68);
			LeaveRule("cond_expr", 68);
			LeaveRule_cond_expr();
		}
		DebugLocation(579, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:581:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 69);
		TraceIn("or_op", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set454 = default(IToken);

		CommonTree set454_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(581, 19);
		try
		{
			// SugarCpp.g:581:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(581, 6);

			set454=(IToken)input.LT(1);
			if (input.LA(1)==156||input.LA(1)==172)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set454));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 69);
			LeaveRule("or_op", 69);
			LeaveRule_or_op();
		}
		DebugLocation(581, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:582:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 70);
		TraceIn("or_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(582, 1);
		try
		{
			// SugarCpp.g:583:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:583:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(583, 4);
			// SugarCpp.g:583:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:583:5: a= and_expr
			{
			DebugLocation(583, 6);
			PushFollow(Follow._and_expr_in_or_expr4929);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 583:16: -> $a
			{
				DebugLocation(583, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(583, 23);
			// SugarCpp.g:583:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(203);
			while (true)
			{
				int alt203=2;
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==156||LA203_0==172))
				{
					alt203 = 1;
				}


				} finally { DebugExitDecision(203); }
				switch ( alt203 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:583:24: op= or_op b= and_expr
					{
					DebugLocation(583, 26);
					PushFollow(Follow._or_op_in_or_expr4940);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(583, 34);
					PushFollow(Follow._and_expr_in_or_expr4944);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, or_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 583:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(583, 47);
						// SugarCpp.g:583:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(583, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(583, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(583, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(583, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop203;
				}
			}

			loop203:
				;

			} finally { DebugExitSubRule(203); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 70);
			LeaveRule("or_expr", 70);
			LeaveRule_or_expr();
		}
		DebugLocation(584, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:586:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 71);
		TraceIn("and_op", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set455 = default(IToken);

		CommonTree set455_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(586, 21);
		try
		{
			// SugarCpp.g:586:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(586, 7);

			set455=(IToken)input.LT(1);
			if (input.LA(1)==87||input.LA(1)==131)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set455));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 71);
			LeaveRule("and_op", 71);
			LeaveRule_and_op();
		}
		DebugLocation(586, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:587:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 72);
		TraceIn("and_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(587, 1);
		try
		{
			// SugarCpp.g:588:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:588:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(588, 4);
			// SugarCpp.g:588:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:588:5: a= bit_or
			{
			DebugLocation(588, 6);
			PushFollow(Follow._bit_or_in_and_expr4986);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 588:14: -> $a
			{
				DebugLocation(588, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(588, 21);
			// SugarCpp.g:588:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(204);
			while (true)
			{
				int alt204=2;
				try { DebugEnterDecision(204, false);
				int LA204_0 = input.LA(1);

				if ((LA204_0==87||LA204_0==131))
				{
					alt204 = 1;
				}


				} finally { DebugExitDecision(204); }
				switch ( alt204 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:588:22: op= and_op b= bit_or
					{
					DebugLocation(588, 24);
					PushFollow(Follow._and_op_in_and_expr4997);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(588, 33);
					PushFollow(Follow._bit_or_in_and_expr5001);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 588:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(588, 44);
						// SugarCpp.g:588:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(588, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(588, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(588, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(588, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop204;
				}
			}

			loop204:
				;

			} finally { DebugExitSubRule(204); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 72);
			LeaveRule("and_expr", 72);
			LeaveRule_and_expr();
		}
		DebugLocation(589, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:591:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 73);
		TraceIn("bit_or", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal456 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal456_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(591, 1);
		try
		{
			// SugarCpp.g:592:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:592:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(592, 4);
			// SugarCpp.g:592:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:592:5: a= bit_xor
			{
			DebugLocation(592, 6);
			PushFollow(Follow._bit_xor_in_bit_or5032);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 592:15: -> $a
			{
				DebugLocation(592, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(592, 22);
			// SugarCpp.g:592:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(205);
			while (true)
			{
				int alt205=2;
				try { DebugEnterDecision(205, false);
				int LA205_0 = input.LA(1);

				if ((LA205_0==170))
				{
					alt205 = 1;
				}


				} finally { DebugExitDecision(205); }
				switch ( alt205 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:592:23: '|' b= bit_xor
					{
					DebugLocation(592, 23);
					char_literal456=(IToken)Match(input,170,Follow._170_in_bit_or5041); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_170.Add(char_literal456);

					DebugLocation(592, 28);
					PushFollow(Follow._bit_xor_in_bit_or5045);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 170, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 592:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(592, 40);
						// SugarCpp.g:592:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(592, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(592, 51);
						adaptor.AddChild(root_1, stream_170.NextNode());
						DebugLocation(592, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(592, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop205;
				}
			}

			loop205:
				;

			} finally { DebugExitSubRule(205); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 73);
			LeaveRule("bit_or", 73);
			LeaveRule_bit_or();
		}
		DebugLocation(593, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:595:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 74);
		TraceIn("bit_xor", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal457 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal457_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(595, 1);
		try
		{
			// SugarCpp.g:596:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:596:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(596, 4);
			// SugarCpp.g:596:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:596:5: a= bit_and
			{
			DebugLocation(596, 6);
			PushFollow(Follow._bit_and_in_bit_xor5075);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 596:15: -> $a
			{
				DebugLocation(596, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(596, 22);
			// SugarCpp.g:596:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(206);
			while (true)
			{
				int alt206=2;
				try { DebugEnterDecision(206, false);
				int LA206_0 = input.LA(1);

				if ((LA206_0==128))
				{
					alt206 = 1;
				}


				} finally { DebugExitDecision(206); }
				switch ( alt206 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:596:23: '^' b= bit_and
					{
					DebugLocation(596, 23);
					char_literal457=(IToken)Match(input,128,Follow._128_in_bit_xor5084); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_128.Add(char_literal457);

					DebugLocation(596, 28);
					PushFollow(Follow._bit_and_in_bit_xor5088);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, b, 128
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 596:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(596, 40);
						// SugarCpp.g:596:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(596, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(596, 51);
						adaptor.AddChild(root_1, stream_128.NextNode());
						DebugLocation(596, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(596, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop206;
				}
			}

			loop206:
				;

			} finally { DebugExitSubRule(206); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 74);
			LeaveRule("bit_xor", 74);
			LeaveRule_bit_xor();
		}
		DebugLocation(597, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:599:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 75);
		TraceIn("bit_and", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal458 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal458_tree = default(CommonTree);
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(599, 1);
		try
		{
			// SugarCpp.g:600:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:600:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(600, 4);
			// SugarCpp.g:600:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:600:5: a= cmp_expr
			{
			DebugLocation(600, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5118);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 600:16: -> $a
			{
				DebugLocation(600, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(600, 23);
			// SugarCpp.g:600:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(207);
			while (true)
			{
				int alt207=2;
				try { DebugEnterDecision(207, false);
				int LA207_0 = input.LA(1);

				if ((LA207_0==88))
				{
					alt207 = 1;
				}


				} finally { DebugExitDecision(207); }
				switch ( alt207 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:600:24: '&' b= cmp_expr
					{
					DebugLocation(600, 24);
					char_literal458=(IToken)Match(input,88,Follow._88_in_bit_and5127); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal458);

					DebugLocation(600, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5131);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_and, 88, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 600:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(600, 42);
						// SugarCpp.g:600:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(600, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(600, 53);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(600, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(600, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop207;
				}
			}

			loop207:
				;

			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 75);
			LeaveRule("bit_and", 75);
			LeaveRule_bit_and();
		}
		DebugLocation(601, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:603:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 76);
		TraceIn("chain_op", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set459 = default(IToken);

		CommonTree set459_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(603, 64);
		try
		{
			// SugarCpp.g:603:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(603, 9);

			set459=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==111||input.LA(1)==115||input.LA(1)==117||(input.LA(1)>=119 && input.LA(1)<=120)||(input.LA(1)>=147 && input.LA(1)<=148))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set459));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 76);
			LeaveRule("chain_op", 76);
			LeaveRule_chain_op();
		}
		DebugLocation(603, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:604:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 77);
		TraceIn("no_less_op", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set460 = default(IToken);

		CommonTree set460_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(604, 60);
		try
		{
			// SugarCpp.g:604:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(604, 11);

			set460=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==115||input.LA(1)==117||(input.LA(1)>=119 && input.LA(1)<=120)||(input.LA(1)>=147 && input.LA(1)<=148))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set460));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 77);
			LeaveRule("no_less_op", 77);
			LeaveRule_no_less_op();
		}
		DebugLocation(604, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:605:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 78);
		TraceIn("chain_list", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op461 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr462 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(605, 35);
		try
		{
			// SugarCpp.g:605:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:605:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(605, 13);
			// SugarCpp.g:605:13: ( chain_op shift_expr )+
			int cnt208=0;
			try { DebugEnterSubRule(208);
			while (true)
			{
				int alt208=2;
				try { DebugEnterDecision(208, false);
				int LA208_0 = input.LA(1);

				if ((LA208_0==84||LA208_0==111||LA208_0==115||LA208_0==117||(LA208_0>=119 && LA208_0<=120)||(LA208_0>=147 && LA208_0<=148)))
				{
					alt208 = 1;
				}


				} finally { DebugExitDecision(208); }
				switch (alt208)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:605:14: chain_op shift_expr
					{
					DebugLocation(605, 14);
					PushFollow(Follow._chain_op_in_chain_list5223);
					chain_op461=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op461.Tree);
					DebugLocation(605, 23);
					PushFollow(Follow._shift_expr_in_chain_list5225);
					shift_expr462=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr462.Tree);

					}
					break;

				default:
					if (cnt208 >= 1)
						goto loop208;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee208 = new EarlyExitException( 208, input );
					DebugRecognitionException(eee208);
					throw eee208;
				}
				cnt208++;
			}
			loop208:
				;

			} finally { DebugExitSubRule(208); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 78);
			LeaveRule("chain_list", 78);
			LeaveRule_chain_list();
		}
		DebugLocation(605, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:606:1: cmp_expr : (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 79);
		TraceIn("cmp_expr", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal463 = default(IToken);
		IToken char_literal465 = default(IToken);
		IToken char_literal467 = default(IToken);
		IToken char_literal469 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list468 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list470 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list471 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal463_tree = default(CommonTree);
		CommonTree char_literal465_tree = default(CommonTree);
		CommonTree char_literal467_tree = default(CommonTree);
		CommonTree char_literal469_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(606, 1);
		try
		{
			// SugarCpp.g:607:2: ( (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:607:4: (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(607, 4);
			// SugarCpp.g:607:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:607:5: a= shift_expr
			{
			DebugLocation(607, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5239);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 607:18: -> $a
			{
				DebugLocation(607, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(607, 25);
			// SugarCpp.g:607:25: ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt212=4;
			try { DebugEnterSubRule(212);
			try { DebugEnterDecision(212, false);
			int LA212_0 = input.LA(1);

			if ((LA212_0==111))
			{
				int LA212_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt212 = 1;
				}
				else if ((true))
				{
					alt212 = 2;
				}
			}
			else if ((LA212_0==84||LA212_0==115||LA212_0==117||(LA212_0>=119 && LA212_0<=120)||(LA212_0>=147 && LA212_0<=148)))
			{
				alt212 = 3;
			}
			} finally { DebugExitDecision(212); }
			switch (alt212)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:607:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list
				{
				DebugLocation(607, 77);
				char_literal463=(IToken)Match(input,111,Follow._111_in_cmp_expr5268); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal463);

				DebugLocation(607, 81);
				PushFollow(Follow._ident_in_cmp_expr5270);
				ident464=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident464.Tree);
				DebugLocation(607, 87);
				// SugarCpp.g:607:87: ( ',' ident )*
				try { DebugEnterSubRule(209);
				while (true)
				{
					int alt209=2;
					try { DebugEnterDecision(209, false);
					int LA209_0 = input.LA(1);

					if ((LA209_0==97))
					{
						alt209 = 1;
					}


					} finally { DebugExitDecision(209); }
					switch ( alt209 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:607:88: ',' ident
						{
						DebugLocation(607, 88);
						char_literal465=(IToken)Match(input,97,Follow._97_in_cmp_expr5273); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_97.Add(char_literal465);

						DebugLocation(607, 92);
						PushFollow(Follow._ident_in_cmp_expr5275);
						ident466=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident466.Tree);

						}
						break;

					default:
						goto loop209;
					}
				}

				loop209:
					;

				} finally { DebugExitSubRule(209); }

				DebugLocation(607, 100);
				char_literal467=(IToken)Match(input,119,Follow._119_in_cmp_expr5279); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(char_literal467);

				DebugLocation(607, 104);
				PushFollow(Follow._bracket_expr_list_in_cmp_expr5281);
				bracket_expr_list468=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list468.Tree);


				{
				// AST REWRITE
				// elements: bracket_expr_list, cmp_expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 607:122: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
				{
					DebugLocation(607, 125);
					// SugarCpp.g:607:125: ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(607, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(607, 138);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(607, 147);
					// SugarCpp.g:607:147: ^( Generic_Patameters ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(607, 149);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

					DebugLocation(607, 168);
					// SugarCpp.g:607:168: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(607, 168);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(607, 176);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:608:12: '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(608, 12);
				char_literal469=(IToken)Match(input,111,Follow._111_in_cmp_expr5312); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_111.Add(char_literal469);

				DebugLocation(608, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr5316);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(608, 29);
				// SugarCpp.g:608:29: ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt210=2;
				try { DebugEnterSubRule(210);
				try { DebugEnterDecision(210, false);
				int LA210_0 = input.LA(1);

				if ((LA210_0==84||LA210_0==111||LA210_0==115||LA210_0==117||(LA210_0>=119 && LA210_0<=120)||(LA210_0>=147 && LA210_0<=148)))
				{
					alt210 = 1;
				}
				else if ((LA210_0==DEDENT||LA210_0==INDENT||LA210_0==NEWLINE||(LA210_0>=86 && LA210_0<=89)||LA210_0==91||LA210_0==93||(LA210_0>=96 && LA210_0<=97)||LA210_0==100||(LA210_0>=106 && LA210_0<=107)||(LA210_0>=109 && LA210_0<=110)||LA210_0==114||LA210_0==116||LA210_0==118||(LA210_0>=122 && LA210_0<=123)||(LA210_0>=127 && LA210_0<=129)||LA210_0==131||LA210_0==133||LA210_0==139||(LA210_0>=143 && LA210_0<=144)||LA210_0==146||LA210_0==156||(LA210_0>=160 && LA210_0<=161)||(LA210_0>=164 && LA210_0<=165)||(LA210_0>=168 && LA210_0<=172)))
				{
					alt210 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 210, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(210); }
				switch (alt210)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:608:31: chain_list
					{
					DebugLocation(608, 31);
					PushFollow(Follow._chain_list_in_cmp_expr5320);
					chain_list470=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list470.Tree);


					{
					// AST REWRITE
					// elements: b, chain_list, 111, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 608:42: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(608, 45);
						// SugarCpp.g:608:45: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(608, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(608, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(608, 69);
						adaptor.AddChild(root_1, stream_111.NextNode());
						DebugLocation(608, 74);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(608, 76);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:609:16: 
					{

					{
					// AST REWRITE
					// elements: b, cmp_expr, 111
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 609:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(609, 19);
						// SugarCpp.g:609:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(609, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(609, 30);
						adaptor.AddChild(root_1, stream_111.NextNode());
						DebugLocation(609, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(609, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(210); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:610:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(610, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5397);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(610, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5401);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(610, 54);
				// SugarCpp.g:610:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt211=2;
				try { DebugEnterSubRule(211);
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==84||LA211_0==111||LA211_0==115||LA211_0==117||(LA211_0>=119 && LA211_0<=120)||(LA211_0>=147 && LA211_0<=148)))
				{
					alt211 = 1;
				}
				else if ((LA211_0==DEDENT||LA211_0==INDENT||LA211_0==NEWLINE||(LA211_0>=86 && LA211_0<=89)||LA211_0==91||LA211_0==93||(LA211_0>=96 && LA211_0<=97)||LA211_0==100||(LA211_0>=106 && LA211_0<=107)||(LA211_0>=109 && LA211_0<=110)||LA211_0==114||LA211_0==116||LA211_0==118||(LA211_0>=122 && LA211_0<=123)||(LA211_0>=127 && LA211_0<=129)||LA211_0==131||LA211_0==133||LA211_0==139||(LA211_0>=143 && LA211_0<=144)||LA211_0==146||LA211_0==156||(LA211_0>=160 && LA211_0<=161)||(LA211_0>=164 && LA211_0<=165)||(LA211_0>=168 && LA211_0<=172)))
				{
					alt211 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 211, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(211); }
				switch (alt211)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:610:56: chain_list
					{
					DebugLocation(610, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5405);
					chain_list471=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list471.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, b, op, chain_list
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(610, 70);
						// SugarCpp.g:610:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(610, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(610, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(610, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(610, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:611:17: 
					{

					{
					// AST REWRITE
					// elements: op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 611:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(611, 20);
						// SugarCpp.g:611:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(611, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(611, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(611, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(611, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(211); }


				}
				break;

			}
			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 79);
			LeaveRule("cmp_expr", 79);
			LeaveRule_cmp_expr();
		}
		DebugLocation(614, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:616:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 80);
		TraceIn("shift_expr_op", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set472 = default(IToken);

		CommonTree set472_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(616, 27);
		try
		{
			// SugarCpp.g:616:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(616, 14);

			set472=(IToken)input.LT(1);
			if (input.LA(1)==113||input.LA(1)==121)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set472));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 80);
			LeaveRule("shift_expr_op", 80);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(616, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:617:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 81);
		TraceIn("shift_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op473 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(617, 1);
		try
		{
			// SugarCpp.g:618:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:618:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(618, 4);
			// SugarCpp.g:618:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:618:5: a= add_expr
			{
			DebugLocation(618, 6);
			PushFollow(Follow._add_expr_in_shift_expr5507);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 618:16: -> $a
			{
				DebugLocation(618, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(618, 23);
			// SugarCpp.g:618:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=2;
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==113||LA213_0==121))
				{
					alt213 = 1;
				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:618:24: shift_expr_op b= add_expr
					{
					DebugLocation(618, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5516);
					shift_expr_op473=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op473.Tree);
					DebugLocation(618, 39);
					PushFollow(Follow._add_expr_in_shift_expr5520);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr_op, b, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 618:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(618, 52);
						// SugarCpp.g:618:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(618, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(618, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(618, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(618, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 81);
			LeaveRule("shift_expr", 81);
			LeaveRule_shift_expr();
		}
		DebugLocation(619, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:621:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 82);
		TraceIn("add_expr", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal474 = default(IToken);
		IToken char_literal475 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal474_tree = default(CommonTree);
		CommonTree char_literal475_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(621, 1);
		try
		{
			// SugarCpp.g:622:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:622:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(622, 4);
			// SugarCpp.g:622:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:622:5: a= mul_expr
			{
			DebugLocation(622, 6);
			PushFollow(Follow._mul_expr_in_add_expr5550);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 622:16: -> $a
			{
				DebugLocation(622, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(622, 23);
			// SugarCpp.g:622:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(214);
			while (true)
			{
				int alt214=3;
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==94))
				{
					alt214 = 1;
				}
				else if ((LA214_0==98))
				{
					alt214 = 2;
				}


				} finally { DebugExitDecision(214); }
				switch ( alt214 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:622:25: '+' b= mul_expr
					{
					DebugLocation(622, 25);
					char_literal474=(IToken)Match(input,94,Follow._94_in_add_expr5560); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal474);

					DebugLocation(622, 30);
					PushFollow(Follow._mul_expr_in_add_expr5564);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 94, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 622:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(622, 43);
						// SugarCpp.g:622:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(622, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(622, 54);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(622, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(622, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:623:10: '-' b= mul_expr
					{
					DebugLocation(623, 10);
					char_literal475=(IToken)Match(input,98,Follow._98_in_add_expr5589); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal475);

					DebugLocation(623, 15);
					PushFollow(Follow._mul_expr_in_add_expr5593);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 98
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 623:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(623, 28);
						// SugarCpp.g:623:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(623, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(623, 39);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(623, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(623, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop214;
				}
			}

			loop214:
				;

			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 82);
			LeaveRule("add_expr", 82);
			LeaveRule_add_expr();
		}
		DebugLocation(625, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:627:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 83);
		TraceIn("mul_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal476 = default(IToken);
		IToken char_literal477 = default(IToken);
		IToken char_literal478 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal476_tree = default(CommonTree);
		CommonTree char_literal477_tree = default(CommonTree);
		CommonTree char_literal478_tree = default(CommonTree);
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(627, 1);
		try
		{
			// SugarCpp.g:628:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:628:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(628, 4);
			// SugarCpp.g:628:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:628:5: a= infix_expr
			{
			DebugLocation(628, 6);
			PushFollow(Follow._infix_expr_in_mul_expr5631);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 628:18: -> $a
			{
				DebugLocation(628, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(628, 25);
			// SugarCpp.g:628:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(215);
			while (true)
			{
				int alt215=4;
				try { DebugEnterDecision(215, false);
				switch (input.LA(1))
				{
				case 92:
					{
					alt215 = 1;
					}
					break;
				case 105:
					{
					alt215 = 2;
					}
					break;
				case 85:
					{
					alt215 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(215); }
				switch ( alt215 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:628:27: '*' b= infix_expr
					{
					DebugLocation(628, 27);
					char_literal476=(IToken)Match(input,92,Follow._92_in_mul_expr5641); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal476);

					DebugLocation(628, 32);
					PushFollow(Follow._infix_expr_in_mul_expr5645);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 92
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 628:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(628, 47);
						// SugarCpp.g:628:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(628, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(628, 58);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(628, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(628, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:629:12: '/' b= infix_expr
					{
					DebugLocation(629, 12);
					char_literal477=(IToken)Match(input,105,Follow._105_in_mul_expr5672); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(char_literal477);

					DebugLocation(629, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5676);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 105, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 629:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(629, 32);
						// SugarCpp.g:629:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(629, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(629, 43);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(629, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(629, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:630:12: '%' b= infix_expr
					{
					DebugLocation(630, 12);
					char_literal478=(IToken)Match(input,85,Follow._85_in_mul_expr5703); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_85.Add(char_literal478);

					DebugLocation(630, 17);
					PushFollow(Follow._infix_expr_in_mul_expr5707);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 85, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 630:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(630, 32);
						// SugarCpp.g:630:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(630, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(630, 43);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(630, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(630, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop215;
				}
			}

			loop215:
				;

			} finally { DebugExitSubRule(215); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 83);
			LeaveRule("mul_expr", 83);
			LeaveRule_mul_expr();
		}
		DebugLocation(632, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:634:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 84);
		TraceIn("infix_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func479 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(634, 1);
		try
		{
			// SugarCpp.g:635:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:635:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(635, 4);
			// SugarCpp.g:635:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:635:5: a= selector_expr
			{
			DebugLocation(635, 6);
			PushFollow(Follow._selector_expr_in_infix_expr5747);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 635:21: -> $a
			{
				DebugLocation(635, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(635, 28);
			// SugarCpp.g:635:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==130))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch ( alt216 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:635:30: infix_func b= selector_expr
					{
					DebugLocation(635, 30);
					PushFollow(Follow._infix_func_in_infix_expr5757);
					infix_func479=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func479.Tree);
					DebugLocation(635, 42);
					PushFollow(Follow._selector_expr_in_infix_expr5761);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_func, infix_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 635:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(635, 61);
						// SugarCpp.g:635:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(635, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(635, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(635, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(635, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop216;
				}
			}

			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 84);
			LeaveRule("infix_expr", 84);
			LeaveRule_infix_expr();
		}
		DebugLocation(636, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:638:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 85);
		TraceIn("selector_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal480 = default(IToken);
		IToken string_literal481 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal480_tree = default(CommonTree);
		CommonTree string_literal481_tree = default(CommonTree);
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(638, 1);
		try
		{
			// SugarCpp.g:639:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:639:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(639, 4);
			// SugarCpp.g:639:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:639:5: a= cast_expr
			{
			DebugLocation(639, 6);
			PushFollow(Follow._cast_expr_in_selector_expr5793);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 639:17: -> $a
			{
				DebugLocation(639, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(639, 24);
			// SugarCpp.g:639:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(217);
			while (true)
			{
				int alt217=3;
				try { DebugEnterDecision(217, false);
				int LA217_0 = input.LA(1);

				if ((LA217_0==102))
				{
					alt217 = 1;
				}
				else if ((LA217_0==104))
				{
					alt217 = 2;
				}


				} finally { DebugExitDecision(217); }
				switch ( alt217 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:639:26: '->*' b= ident
					{
					DebugLocation(639, 26);
					string_literal480=(IToken)Match(input,102,Follow._102_in_selector_expr5803); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal480);

					DebugLocation(639, 33);
					PushFollow(Follow._ident_in_selector_expr5807);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 102, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 639:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(639, 43);
						// SugarCpp.g:639:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(639, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(639, 57);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(639, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(639, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:640:11: '.*' b= ident
					{
					DebugLocation(640, 11);
					string_literal481=(IToken)Match(input,104,Follow._104_in_selector_expr5833); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal481);

					DebugLocation(640, 18);
					PushFollow(Follow._ident_in_selector_expr5838);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 104, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 640:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(640, 28);
						// SugarCpp.g:640:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(640, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(640, 42);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(640, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(640, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop217;
				}
			}

			loop217:
				;

			} finally { DebugExitSubRule(217); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 85);
			LeaveRule("selector_expr", 85);
			LeaveRule_selector_expr();
		}
		DebugLocation(642, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:644:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 86);
		TraceIn("cast_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal482 = default(IToken);
		IToken char_literal483 = default(IToken);
		IToken char_literal485 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name484 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal482_tree = default(CommonTree);
		CommonTree char_literal483_tree = default(CommonTree);
		CommonTree char_literal485_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(644, 1);
		try
		{
			// SugarCpp.g:645:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:645:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(645, 4);
			// SugarCpp.g:645:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:645:5: a= prefix_expr
			{
			DebugLocation(645, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr5878);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 645:19: -> $a
			{
				DebugLocation(645, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(645, 26);
			// SugarCpp.g:645:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt218=2;
			try { DebugEnterSubRule(218);
			try { DebugEnterDecision(218, false);
			int LA218_0 = input.LA(1);

			if ((LA218_0==132))
			{
				alt218 = 1;
			}
			} finally { DebugExitDecision(218); }
			switch (alt218)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:645:27: 'as' '(' type_name ')'
				{
				DebugLocation(645, 27);
				string_literal482=(IToken)Match(input,132,Follow._132_in_cast_expr5887); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(string_literal482);

				DebugLocation(645, 32);
				char_literal483=(IToken)Match(input,90,Follow._90_in_cast_expr5889); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal483);

				DebugLocation(645, 36);
				PushFollow(Follow._type_name_in_cast_expr5891);
				type_name484=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name484.Tree);
				DebugLocation(645, 46);
				char_literal485=(IToken)Match(input,91,Follow._91_in_cast_expr5893); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal485);



				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 645:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(645, 53);
					// SugarCpp.g:645:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(645, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(645, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(645, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(218); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 86);
			LeaveRule("cast_expr", 86);
			LeaveRule_cast_expr();
		}
		DebugLocation(646, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:648:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 87);
		TraceIn("prefix_expr_op", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set486 = default(IToken);

		CommonTree set486_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(648, 71);
		try
		{
			// SugarCpp.g:648:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(648, 15);

			set486=(IToken)input.LT(1);
			if (input.LA(1)==83||input.LA(1)==88||input.LA(1)==92||(input.LA(1)>=94 && input.LA(1)<=95)||(input.LA(1)>=98 && input.LA(1)<=99)||input.LA(1)==155||input.LA(1)==173)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set486));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 87);
			LeaveRule("prefix_expr_op", 87);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(648, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:649:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 88);
		TraceIn("prefix_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal489 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op487 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr488 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array490 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list491 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list492 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr493 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal489_tree = default(CommonTree);
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(649, 1);
		try
		{
			// SugarCpp.g:650:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt220=3;
			try { DebugEnterDecision(220, false);
			switch (input.LA(1))
			{
			case 83:
			case 88:
			case 92:
			case 94:
			case 95:
			case 98:
			case 99:
			case 155:
			case 173:
				{
				alt220 = 1;
				}
				break;
			case 154:
				{
				alt220 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 90:
			case 125:
				{
				alt220 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 220, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(220); }
			switch (alt220)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:650:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(650, 4);
				// SugarCpp.g:650:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:650:5: prefix_expr_op prefix_expr
				{
				DebugLocation(650, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr5955);
				prefix_expr_op487=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op487.Tree);
				DebugLocation(650, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr5957);
				prefix_expr488=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr488.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 650:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(650, 36);
					// SugarCpp.g:650:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(650, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(650, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(650, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:651:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(651, 4);
				string_literal489=(IToken)Match(input,154,Follow._154_in_prefix_expr5973); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal489);

				DebugLocation(651, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr5975);
				type_no_array490=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array490.Tree);
				DebugLocation(651, 24);
				// SugarCpp.g:651:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt219=2;
				try { DebugEnterSubRule(219);
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==90))
				{
					alt219 = 1;
				}
				else if ((LA219_0==126))
				{
					alt219 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 219, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(219); }
				switch (alt219)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:651:26: bracket_expr_list
					{
					DebugLocation(651, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr5979);
					bracket_expr_list491=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list491.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 651:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(651, 47);
						// SugarCpp.g:651:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(651, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(651, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(651, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:652:11: square_expr_list
					{
					DebugLocation(652, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6001);
					square_expr_list492=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list492.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 652:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(652, 31);
						// SugarCpp.g:652:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(652, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(652, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(652, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(219); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:654:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(654, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6026);
				suffix_expr493=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr493.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 88);
			LeaveRule("prefix_expr", 88);
			LeaveRule_prefix_expr();
		}
		DebugLocation(655, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:657:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 89);
		TraceIn("square_expr_list", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal494 = default(IToken);
		IToken char_literal496 = default(IToken);
		IToken char_literal498 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr497 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal494_tree = default(CommonTree);
		CommonTree char_literal496_tree = default(CommonTree);
		CommonTree char_literal498_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(657, 1);
		try
		{
			// SugarCpp.g:658:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:658:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(658, 4);
			char_literal494=(IToken)Match(input,126,Follow._126_in_square_expr_list6038); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_126.Add(char_literal494);

			DebugLocation(658, 8);
			PushFollow(Follow._expr_in_square_expr_list6040);
			expr495=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr495.Tree);
			DebugLocation(658, 13);
			// SugarCpp.g:658:13: ( ',' expr )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=2;
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==97))
				{
					alt221 = 1;
				}


				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:658:14: ',' expr
					{
					DebugLocation(658, 14);
					char_literal496=(IToken)Match(input,97,Follow._97_in_square_expr_list6043); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal496);

					DebugLocation(658, 18);
					PushFollow(Follow._expr_in_square_expr_list6045);
					expr497=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr497.Tree);

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }

			DebugLocation(658, 25);
			char_literal498=(IToken)Match(input,127,Follow._127_in_square_expr_list6049); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_127.Add(char_literal498);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 658:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(658, 32);
				// SugarCpp.g:658:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(658, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(658, 44);
				// SugarCpp.g:658:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(658, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 89);
			LeaveRule("square_expr_list", 89);
			LeaveRule_square_expr_list();
		}
		DebugLocation(659, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:661:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 90);
		TraceIn("bracket_expr_list", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal499 = default(IToken);
		IToken char_literal501 = default(IToken);
		IToken char_literal503 = default(IToken);
		IToken NEWLINE504 = default(IToken);
		IToken INDENT505 = default(IToken);
		IToken NEWLINE506 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken NEWLINE509 = default(IToken);
		IToken NEWLINE511 = default(IToken);
		IToken char_literal512 = default(IToken);
		IToken NEWLINE513 = default(IToken);
		IToken DEDENT514 = default(IToken);
		IToken DEDENT515 = default(IToken);
		IToken NEWLINE516 = default(IToken);
		IToken char_literal517 = default(IToken);
		IToken char_literal519 = default(IToken);
		IToken NEWLINE520 = default(IToken);
		IToken char_literal522 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr500 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr502 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr507 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr510 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr518 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr521 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal499_tree = default(CommonTree);
		CommonTree char_literal501_tree = default(CommonTree);
		CommonTree char_literal503_tree = default(CommonTree);
		CommonTree NEWLINE504_tree = default(CommonTree);
		CommonTree INDENT505_tree = default(CommonTree);
		CommonTree NEWLINE506_tree = default(CommonTree);
		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree NEWLINE509_tree = default(CommonTree);
		CommonTree NEWLINE511_tree = default(CommonTree);
		CommonTree char_literal512_tree = default(CommonTree);
		CommonTree NEWLINE513_tree = default(CommonTree);
		CommonTree DEDENT514_tree = default(CommonTree);
		CommonTree DEDENT515_tree = default(CommonTree);
		CommonTree NEWLINE516_tree = default(CommonTree);
		CommonTree char_literal517_tree = default(CommonTree);
		CommonTree char_literal519_tree = default(CommonTree);
		CommonTree NEWLINE520_tree = default(CommonTree);
		CommonTree char_literal522_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(661, 1);
		try
		{
			// SugarCpp.g:662:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:662:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(662, 4);
			char_literal499=(IToken)Match(input,90,Follow._90_in_bracket_expr_list6069); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_90.Add(char_literal499);

			DebugLocation(662, 8);
			// SugarCpp.g:662:8: ( expr ( ',' expr )* )?
			int alt223=2;
			try { DebugEnterSubRule(223);
			try { DebugEnterDecision(223, false);
			int LA223_0 = input.LA(1);

			if ((LA223_0==IDENT||LA223_0==NUMBER||LA223_0==STRING||LA223_0==83||LA223_0==88||LA223_0==90||LA223_0==92||(LA223_0>=94 && LA223_0<=95)||(LA223_0>=98 && LA223_0<=99)||(LA223_0>=125 && LA223_0<=126)||LA223_0==149||LA223_0==152||(LA223_0>=154 && LA223_0<=155)||LA223_0==173))
			{
				alt223 = 1;
			}
			} finally { DebugExitDecision(223); }
			switch (alt223)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:662:9: expr ( ',' expr )*
				{
				DebugLocation(662, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6072);
				expr500=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr500.Tree);
				DebugLocation(662, 14);
				// SugarCpp.g:662:14: ( ',' expr )*
				try { DebugEnterSubRule(222);
				while (true)
				{
					int alt222=2;
					try { DebugEnterDecision(222, false);
					int LA222_0 = input.LA(1);

					if ((LA222_0==97))
					{
						alt222 = 1;
					}


					} finally { DebugExitDecision(222); }
					switch ( alt222 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:662:15: ',' expr
						{
						DebugLocation(662, 15);
						char_literal501=(IToken)Match(input,97,Follow._97_in_bracket_expr_list6075); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_97.Add(char_literal501);

						DebugLocation(662, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6077);
						expr502=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr502.Tree);

						}
						break;

					default:
						goto loop222;
					}
				}

				loop222:
					;

				} finally { DebugExitSubRule(222); }


				}
				break;

			}
			} finally { DebugExitSubRule(223); }

			DebugLocation(662, 28);
			// SugarCpp.g:662:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt236=2;
			try { DebugEnterSubRule(236);
			try { DebugEnterDecision(236, false);
			int LA236_0 = input.LA(1);

			if ((LA236_0==91))
			{
				alt236 = 1;
			}
			else if ((LA236_0==NEWLINE))
			{
				alt236 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 236, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(236); }
			switch (alt236)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:662:30: ')'
				{
				DebugLocation(662, 30);
				char_literal503=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6085); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal503);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 662:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(662, 37);
					// SugarCpp.g:662:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(662, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(662, 49);
					// SugarCpp.g:662:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(662, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:663:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(663, 12);
				// SugarCpp.g:663:12: ( NEWLINE )+
				int cnt224=0;
				try { DebugEnterSubRule(224);
				while (true)
				{
					int alt224=2;
					try { DebugEnterDecision(224, false);
					int LA224_0 = input.LA(1);

					if ((LA224_0==NEWLINE))
					{
						alt224 = 1;
					}


					} finally { DebugExitDecision(224); }
					switch (alt224)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:663:12: NEWLINE
						{
						DebugLocation(663, 12);
						NEWLINE504=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6107); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE504);


						}
						break;

					default:
						if (cnt224 >= 1)
							goto loop224;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee224 = new EarlyExitException( 224, input );
						DebugRecognitionException(eee224);
						throw eee224;
					}
					cnt224++;
				}
				loop224:
					;

				} finally { DebugExitSubRule(224); }

				DebugLocation(663, 21);
				// SugarCpp.g:663:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt235=2;
				try { DebugEnterSubRule(235);
				try { DebugEnterDecision(235, false);
				int LA235_0 = input.LA(1);

				if ((LA235_0==INDENT))
				{
					alt235 = 1;
				}
				else if ((LA235_0==IDENT||LA235_0==NUMBER||LA235_0==STRING||LA235_0==83||LA235_0==88||(LA235_0>=90 && LA235_0<=92)||(LA235_0>=94 && LA235_0<=95)||(LA235_0>=98 && LA235_0<=99)||(LA235_0>=125 && LA235_0<=126)||LA235_0==149||LA235_0==152||(LA235_0>=154 && LA235_0<=155)||LA235_0==173))
				{
					alt235 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 235, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(235); }
				switch (alt235)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:663:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(663, 23);
					INDENT505=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6112); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT505);

					DebugLocation(663, 30);
					// SugarCpp.g:663:30: ( NEWLINE )*
					try { DebugEnterSubRule(225);
					while (true)
					{
						int alt225=2;
						try { DebugEnterDecision(225, false);
						int LA225_0 = input.LA(1);

						if ((LA225_0==NEWLINE))
						{
							alt225 = 1;
						}


						} finally { DebugExitDecision(225); }
						switch ( alt225 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:663:30: NEWLINE
							{
							DebugLocation(663, 30);
							NEWLINE506=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6114); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE506);


							}
							break;

						default:
							goto loop225;
						}
					}

					loop225:
						;

					} finally { DebugExitSubRule(225); }

					DebugLocation(663, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6117);
					expr507=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr507.Tree);
					DebugLocation(663, 44);
					// SugarCpp.g:663:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(227);
					while (true)
					{
						int alt227=2;
						try { DebugEnterDecision(227, false);
						try
						{
							alt227 = dfa227.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(227); }
						switch ( alt227 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:663:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(663, 45);
							// SugarCpp.g:663:45: ( ',' | NEWLINE )+
							int cnt226=0;
							try { DebugEnterSubRule(226);
							while (true)
							{
								int alt226=3;
								try { DebugEnterDecision(226, false);
								int LA226_0 = input.LA(1);

								if ((LA226_0==97))
								{
									alt226 = 1;
								}
								else if ((LA226_0==NEWLINE))
								{
									alt226 = 2;
								}


								} finally { DebugExitDecision(226); }
								switch (alt226)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:663:46: ','
									{
									DebugLocation(663, 46);
									char_literal508=(IToken)Match(input,97,Follow._97_in_bracket_expr_list6121); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_97.Add(char_literal508);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:663:52: NEWLINE
									{
									DebugLocation(663, 52);
									NEWLINE509=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6125); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE509);


									}
									break;

								default:
									if (cnt226 >= 1)
										goto loop226;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee226 = new EarlyExitException( 226, input );
									DebugRecognitionException(eee226);
									throw eee226;
								}
								cnt226++;
							}
							loop226:
								;

							} finally { DebugExitSubRule(226); }

							DebugLocation(663, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6129);
							expr510=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr510.Tree);

							}
							break;

						default:
							goto loop227;
						}
					}

					loop227:
						;

					} finally { DebugExitSubRule(227); }

					DebugLocation(663, 69);
					// SugarCpp.g:663:69: ( NEWLINE )*
					try { DebugEnterSubRule(228);
					while (true)
					{
						int alt228=2;
						try { DebugEnterDecision(228, false);
						int LA228_0 = input.LA(1);

						if ((LA228_0==NEWLINE))
						{
							alt228 = 1;
						}


						} finally { DebugExitDecision(228); }
						switch ( alt228 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:663:69: NEWLINE
							{
							DebugLocation(663, 69);
							NEWLINE511=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6133); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE511);


							}
							break;

						default:
							goto loop228;
						}
					}

					loop228:
						;

					} finally { DebugExitSubRule(228); }

					DebugLocation(663, 78);
					// SugarCpp.g:663:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt231=2;
					try { DebugEnterSubRule(231);
					try { DebugEnterDecision(231, false);
					int LA231_0 = input.LA(1);

					if ((LA231_0==91))
					{
						alt231 = 1;
					}
					else if ((LA231_0==DEDENT))
					{
						alt231 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 231, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(231); }
					switch (alt231)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:663:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(663, 80);
						char_literal512=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6138); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_91.Add(char_literal512);

						DebugLocation(663, 84);
						// SugarCpp.g:663:84: ( NEWLINE )*
						try { DebugEnterSubRule(229);
						while (true)
						{
							int alt229=2;
							try { DebugEnterDecision(229, false);
							int LA229_0 = input.LA(1);

							if ((LA229_0==NEWLINE))
							{
								alt229 = 1;
							}


							} finally { DebugExitDecision(229); }
							switch ( alt229 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:663:84: NEWLINE
								{
								DebugLocation(663, 84);
								NEWLINE513=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6140); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE513);


								}
								break;

							default:
								goto loop229;
							}
						}

						loop229:
							;

						} finally { DebugExitSubRule(229); }

						DebugLocation(663, 93);
						DEDENT514=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6143); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT514);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:663:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(663, 102);
						DEDENT515=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6147); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT515);

						DebugLocation(663, 109);
						// SugarCpp.g:663:109: ( NEWLINE )*
						try { DebugEnterSubRule(230);
						while (true)
						{
							int alt230=2;
							try { DebugEnterDecision(230, false);
							int LA230_0 = input.LA(1);

							if ((LA230_0==NEWLINE))
							{
								alt230 = 1;
							}


							} finally { DebugExitDecision(230); }
							switch ( alt230 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:663:109: NEWLINE
								{
								DebugLocation(663, 109);
								NEWLINE516=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6149); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE516);


								}
								break;

							default:
								goto loop230;
							}
						}

						loop230:
							;

						} finally { DebugExitSubRule(230); }

						DebugLocation(663, 118);
						char_literal517=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6152); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_91.Add(char_literal517);


						}
						break;

					}
					} finally { DebugExitSubRule(231); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 663:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(663, 127);
						// SugarCpp.g:663:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(663, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(663, 139);
						// SugarCpp.g:663:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(663, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:664:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(664, 14);
					// SugarCpp.g:664:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt234=2;
					try { DebugEnterSubRule(234);
					try { DebugEnterDecision(234, false);
					int LA234_0 = input.LA(1);

					if ((LA234_0==IDENT||LA234_0==NUMBER||LA234_0==STRING||LA234_0==83||LA234_0==88||LA234_0==90||LA234_0==92||(LA234_0>=94 && LA234_0<=95)||(LA234_0>=98 && LA234_0<=99)||(LA234_0>=125 && LA234_0<=126)||LA234_0==149||LA234_0==152||(LA234_0>=154 && LA234_0<=155)||LA234_0==173))
					{
						alt234 = 1;
					}
					} finally { DebugExitDecision(234); }
					switch (alt234)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:664:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(664, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6179);
						expr518=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr518.Tree);
						DebugLocation(664, 20);
						// SugarCpp.g:664:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(233);
						while (true)
						{
							int alt233=2;
							try { DebugEnterDecision(233, false);
							int LA233_0 = input.LA(1);

							if ((LA233_0==NEWLINE||LA233_0==97))
							{
								alt233 = 1;
							}


							} finally { DebugExitDecision(233); }
							switch ( alt233 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:664:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(664, 21);
								// SugarCpp.g:664:21: ( ',' | NEWLINE )+
								int cnt232=0;
								try { DebugEnterSubRule(232);
								while (true)
								{
									int alt232=3;
									try { DebugEnterDecision(232, false);
									int LA232_0 = input.LA(1);

									if ((LA232_0==97))
									{
										alt232 = 1;
									}
									else if ((LA232_0==NEWLINE))
									{
										alt232 = 2;
									}


									} finally { DebugExitDecision(232); }
									switch (alt232)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:664:22: ','
										{
										DebugLocation(664, 22);
										char_literal519=(IToken)Match(input,97,Follow._97_in_bracket_expr_list6183); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_97.Add(char_literal519);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:664:28: NEWLINE
										{
										DebugLocation(664, 28);
										NEWLINE520=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6187); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE520);


										}
										break;

									default:
										if (cnt232 >= 1)
											goto loop232;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee232 = new EarlyExitException( 232, input );
										DebugRecognitionException(eee232);
										throw eee232;
									}
									cnt232++;
								}
								loop232:
									;

								} finally { DebugExitSubRule(232); }

								DebugLocation(664, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6191);
								expr521=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr521.Tree);

								}
								break;

							default:
								goto loop233;
							}
						}

						loop233:
							;

						} finally { DebugExitSubRule(233); }


						}
						break;

					}
					} finally { DebugExitSubRule(234); }

					DebugLocation(664, 47);
					char_literal522=(IToken)Match(input,91,Follow._91_in_bracket_expr_list6197); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal522);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 664:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(664, 54);
						// SugarCpp.g:664:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(664, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(664, 66);
						// SugarCpp.g:664:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(664, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(235); }


				}
				break;

			}
			} finally { DebugExitSubRule(236); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 90);
			LeaveRule("bracket_expr_list", 90);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(667, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:669:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 91);
		TraceIn("suffix_expr", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal523 = default(IToken);
		IToken string_literal524 = default(IToken);
		IToken char_literal525 = default(IToken);
		IToken string_literal527 = default(IToken);
		IToken char_literal531 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident526 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident528 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list529 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list530 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident532 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list533 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal523_tree = default(CommonTree);
		CommonTree string_literal524_tree = default(CommonTree);
		CommonTree char_literal525_tree = default(CommonTree);
		CommonTree string_literal527_tree = default(CommonTree);
		CommonTree char_literal531_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(669, 1);
		try
		{
			// SugarCpp.g:670:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:670:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(670, 4);
			// SugarCpp.g:670:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:670:5: a= atom_expr
			{
			DebugLocation(670, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6244);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 670:17: -> $a
			{
				DebugLocation(670, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(670, 24);
			// SugarCpp.g:670:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(237);
			while (true)
			{
				int alt237=8;
				try { DebugEnterDecision(237, false);
				switch (input.LA(1))
				{
				case 95:
					{
					alt237 = 1;
					}
					break;
				case 99:
					{
					alt237 = 2;
					}
					break;
				case 103:
					{
					alt237 = 3;
					}
					break;
				case 101:
					{
					alt237 = 4;
					}
					break;
				case 90:
					{
					alt237 = 5;
					}
					break;
				case 126:
					{
					alt237 = 6;
					}
					break;
				case 125:
					{
					alt237 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(237); }
				switch ( alt237 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:670:26: '++'
					{
					DebugLocation(670, 26);
					string_literal523=(IToken)Match(input,95,Follow._95_in_suffix_expr6254); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(string_literal523);



					{
					// AST REWRITE
					// elements: 95, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 670:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(670, 34);
						// SugarCpp.g:670:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(670, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(670, 48);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(670, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:671:14: '--'
					{
					DebugLocation(671, 14);
					string_literal524=(IToken)Match(input,99,Follow._99_in_suffix_expr6280); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(string_literal524);



					{
					// AST REWRITE
					// elements: 99, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 671:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(671, 22);
						// SugarCpp.g:671:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(671, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(671, 36);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(671, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:672:11: '.' ident
					{
					DebugLocation(672, 11);
					char_literal525=(IToken)Match(input,103,Follow._103_in_suffix_expr6303); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal525);

					DebugLocation(672, 15);
					PushFollow(Follow._ident_in_suffix_expr6305);
					ident526=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident526.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 103
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 672:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(672, 24);
						// SugarCpp.g:672:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(672, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(672, 38);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(672, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(672, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:673:11: '->' ident
					{
					DebugLocation(673, 11);
					string_literal527=(IToken)Match(input,101,Follow._101_in_suffix_expr6330); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal527);

					DebugLocation(673, 16);
					PushFollow(Follow._ident_in_suffix_expr6332);
					ident528=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident528.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 101
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 673:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(673, 25);
						// SugarCpp.g:673:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(673, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(673, 39);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(673, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(673, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:674:11: bracket_expr_list
					{
					DebugLocation(674, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6357);
					bracket_expr_list529=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list529.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 674:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(674, 32);
						// SugarCpp.g:674:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(674, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(674, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(674, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:675:11: square_expr_list
					{
					DebugLocation(675, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6380);
					square_expr_list530=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list530.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 675:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(675, 31);
						// SugarCpp.g:675:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(675, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(675, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(675, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:676:11: '@' ident bracket_expr_list
					{
					DebugLocation(676, 11);
					char_literal531=(IToken)Match(input,125,Follow._125_in_suffix_expr6403); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_125.Add(char_literal531);

					DebugLocation(676, 15);
					PushFollow(Follow._ident_in_suffix_expr6405);
					ident532=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident532.Tree);
					DebugLocation(676, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6407);
					bracket_expr_list533=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list533.Tree);


					{
					// AST REWRITE
					// elements: ident, bracket_expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 676:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(676, 42);
						// SugarCpp.g:676:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(676, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(676, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(676, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(676, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop237;
				}
			}

			loop237:
				;

			} finally { DebugExitSubRule(237); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 91);
			LeaveRule("suffix_expr", 91);
			LeaveRule_suffix_expr();
		}
		DebugLocation(678, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:680:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 92);
		TraceIn("atom_expr", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER534 = default(IToken);
		IToken STRING536 = default(IToken);
		IToken char_literal537 = default(IToken);
		IToken char_literal539 = default(IToken);
		IToken char_literal540 = default(IToken);
		IToken char_literal542 = default(IToken);
		IToken char_literal543 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident535 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident538 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr541 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER534_tree = default(CommonTree);
		CommonTree STRING536_tree = default(CommonTree);
		CommonTree char_literal537_tree = default(CommonTree);
		CommonTree char_literal539_tree = default(CommonTree);
		CommonTree char_literal540_tree = default(CommonTree);
		CommonTree char_literal542_tree = default(CommonTree);
		CommonTree char_literal543_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(680, 1);
		try
		{
			// SugarCpp.g:681:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt240=5;
			try { DebugEnterDecision(240, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt240 = 1;
				}
				break;
			case IDENT:
				{
				alt240 = 2;
				}
				break;
			case STRING:
				{
				alt240 = 3;
				}
				break;
			case 125:
				{
				alt240 = 4;
				}
				break;
			case 90:
				{
				alt240 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 240, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(240); }
			switch (alt240)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:681:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(681, 4);
				NUMBER534=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6445); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER534_tree = (CommonTree)adaptor.Create(NUMBER534);
				adaptor.AddChild(root_0, NUMBER534_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:682:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(682, 4);
				PushFollow(Follow._ident_in_atom_expr6450);
				ident535=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident535.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:683:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(683, 4);
				STRING536=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6455); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING536_tree = (CommonTree)adaptor.Create(STRING536);
				adaptor.AddChild(root_0, STRING536_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:684:4: '@' ident
				{
				DebugLocation(684, 4);
				char_literal537=(IToken)Match(input,125,Follow._125_in_atom_expr6460); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal537);

				DebugLocation(684, 8);
				PushFollow(Follow._ident_in_atom_expr6462);
				ident538=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident538.Tree);


				{
				// AST REWRITE
				// elements: ident, 125
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 684:14: -> ^( '@' ident )
				{
					DebugLocation(684, 17);
					// SugarCpp.g:684:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(684, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_125.NextNode(), root_1);

					DebugLocation(684, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:685:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(685, 4);
				char_literal539=(IToken)Match(input,90,Follow._90_in_atom_expr6475); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal539);

				DebugLocation(685, 9);
				PushFollow(Follow._expr_in_atom_expr6479);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(685, 15);
				// SugarCpp.g:685:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt239=2;
				try { DebugEnterSubRule(239);
				try { DebugEnterDecision(239, false);
				int LA239_0 = input.LA(1);

				if ((LA239_0==97))
				{
					alt239 = 1;
				}
				else if ((LA239_0==91))
				{
					alt239 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(239); }
				switch (alt239)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:685:17: ( ',' expr )+ ')'
					{
					DebugLocation(685, 17);
					// SugarCpp.g:685:17: ( ',' expr )+
					int cnt238=0;
					try { DebugEnterSubRule(238);
					while (true)
					{
						int alt238=2;
						try { DebugEnterDecision(238, false);
						int LA238_0 = input.LA(1);

						if ((LA238_0==97))
						{
							alt238 = 1;
						}


						} finally { DebugExitDecision(238); }
						switch (alt238)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:685:18: ',' expr
							{
							DebugLocation(685, 18);
							char_literal540=(IToken)Match(input,97,Follow._97_in_atom_expr6484); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_97.Add(char_literal540);

							DebugLocation(685, 22);
							PushFollow(Follow._expr_in_atom_expr6486);
							expr541=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr541.Tree);

							}
							break;

						default:
							if (cnt238 >= 1)
								goto loop238;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee238 = new EarlyExitException( 238, input );
							DebugRecognitionException(eee238);
							throw eee238;
						}
						cnt238++;
					}
					loop238:
						;

					} finally { DebugExitSubRule(238); }

					DebugLocation(685, 29);
					char_literal542=(IToken)Match(input,91,Follow._91_in_atom_expr6490); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal542);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 685:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(685, 36);
						// SugarCpp.g:685:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(685, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(685, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(685, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:686:17: ')' {...}?
					{
					DebugLocation(686, 17);
					char_literal543=(IToken)Match(input,91,Follow._91_in_atom_expr6517); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal543);

					DebugLocation(686, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 686:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(686, 40);
						// SugarCpp.g:686:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(686, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(686, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(239); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 92);
			LeaveRule("atom_expr", 92);
			LeaveRule_atom_expr();
		}
		DebugLocation(688, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:690:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 93);
		TraceIn("lvalue_item", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix544 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(690, 1);
		try
		{
			// SugarCpp.g:691:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:691:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(691, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6548);
			lvalue_prefix544=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix544.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 93);
			LeaveRule("lvalue_item", 93);
			LeaveRule_lvalue_item();
		}
		DebugLocation(692, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:694:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 94);
		TraceIn("lvalue_prefix", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op545 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix546 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix547 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(694, 1);
		try
		{
			// SugarCpp.g:695:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt241=2;
			try { DebugEnterDecision(241, false);
			int LA241_0 = input.LA(1);

			if ((LA241_0==83||LA241_0==88||LA241_0==92||(LA241_0>=94 && LA241_0<=95)||(LA241_0>=98 && LA241_0<=99)||LA241_0==155||LA241_0==173))
			{
				alt241 = 1;
			}
			else if ((LA241_0==IDENT||LA241_0==125))
			{
				alt241 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 241, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(241); }
			switch (alt241)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:695:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(695, 4);
				// SugarCpp.g:695:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:695:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(695, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6560);
				prefix_expr_op545=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op545.Tree);
				DebugLocation(695, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6562);
				lvalue_prefix546=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix546.Tree);

				}



				{
				// AST REWRITE
				// elements: lvalue_prefix, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 695:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(695, 38);
					// SugarCpp.g:695:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(695, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(695, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(695, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:696:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(696, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6578);
				lvalue_suffix547=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix547.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 94);
			LeaveRule("lvalue_prefix", 94);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(697, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:699:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 95);
		TraceIn("lvalue_suffix", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal548 = default(IToken);
		IToken string_literal549 = default(IToken);
		IToken char_literal550 = default(IToken);
		IToken string_literal552 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident551 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident553 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter554 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list555 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list556 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal548_tree = default(CommonTree);
		CommonTree string_literal549_tree = default(CommonTree);
		CommonTree char_literal550_tree = default(CommonTree);
		CommonTree string_literal552_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(699, 1);
		try
		{
			// SugarCpp.g:700:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:700:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(700, 4);
			// SugarCpp.g:700:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:700:5: a= lvalue_atom
			{
			DebugLocation(700, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix6592);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 700:19: -> $a
			{
				DebugLocation(700, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(700, 26);
			// SugarCpp.g:700:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(243);
			while (true)
			{
				int alt243=7;
				try { DebugEnterDecision(243, false);
				switch (input.LA(1))
				{
				case 95:
					{
					alt243 = 1;
					}
					break;
				case 99:
					{
					alt243 = 2;
					}
					break;
				case 103:
					{
					alt243 = 3;
					}
					break;
				case 101:
					{
					alt243 = 4;
					}
					break;
				case 90:
				case 111:
					{
					alt243 = 5;
					}
					break;
				case 126:
					{
					alt243 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(243); }
				switch ( alt243 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:700:28: '++'
					{
					DebugLocation(700, 28);
					string_literal548=(IToken)Match(input,95,Follow._95_in_lvalue_suffix6602); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(string_literal548);



					{
					// AST REWRITE
					// elements: 95, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 700:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(700, 36);
						// SugarCpp.g:700:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(700, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(700, 50);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(700, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:701:16: '--'
					{
					DebugLocation(701, 16);
					string_literal549=(IToken)Match(input,99,Follow._99_in_lvalue_suffix6630); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(string_literal549);



					{
					// AST REWRITE
					// elements: 99, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 701:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(701, 24);
						// SugarCpp.g:701:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(701, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(701, 38);
						adaptor.AddChild(root_1, stream_99.NextNode());
						DebugLocation(701, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:702:13: '.' ident
					{
					DebugLocation(702, 13);
					char_literal550=(IToken)Match(input,103,Follow._103_in_lvalue_suffix6655); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_103.Add(char_literal550);

					DebugLocation(702, 17);
					PushFollow(Follow._ident_in_lvalue_suffix6657);
					ident551=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident551.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, ident, 103
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 702:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(702, 26);
						// SugarCpp.g:702:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(702, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(702, 40);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(702, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(702, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:703:13: '->' ident
					{
					DebugLocation(703, 13);
					string_literal552=(IToken)Match(input,101,Follow._101_in_lvalue_suffix6684); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal552);

					DebugLocation(703, 18);
					PushFollow(Follow._ident_in_lvalue_suffix6686);
					ident553=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident553.Tree);


					{
					// AST REWRITE
					// elements: 101, lvalue_suffix, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 703:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(703, 27);
						// SugarCpp.g:703:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(703, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(703, 41);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(703, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(703, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:704:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(704, 13);
					// SugarCpp.g:704:13: ( generic_parameter )?
					int alt242=2;
					try { DebugEnterSubRule(242);
					try { DebugEnterDecision(242, false);
					int LA242_0 = input.LA(1);

					if ((LA242_0==111))
					{
						alt242 = 1;
					}
					} finally { DebugExitDecision(242); }
					switch (alt242)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:704:13: generic_parameter
						{
						DebugLocation(704, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix6713);
						generic_parameter554=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter554.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(242); }

					DebugLocation(704, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix6716);
					bracket_expr_list555=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list555.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter, bracket_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 704:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(704, 53);
						// SugarCpp.g:704:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(704, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(704, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(704, 80);
						// SugarCpp.g:704:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(704, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(704, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:705:13: square_expr_list
					{
					DebugLocation(705, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix6744);
					square_expr_list556=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list556.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 705:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(705, 33);
						// SugarCpp.g:705:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(705, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(705, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(705, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop243;
				}
			}

			loop243:
				;

			} finally { DebugExitSubRule(243); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 95);
			LeaveRule("lvalue_suffix", 95);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(707, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:709:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 96);
		TraceIn("lvalue_atom", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal558 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident557 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident559 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal558_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(709, 1);
		try
		{
			// SugarCpp.g:710:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt244=2;
			try { DebugEnterDecision(244, false);
			int LA244_0 = input.LA(1);

			if ((LA244_0==IDENT))
			{
				alt244 = 1;
			}
			else if ((LA244_0==125))
			{
				alt244 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 244, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(244); }
			switch (alt244)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:710:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(710, 4);
				PushFollow(Follow._ident_in_lvalue_atom6782);
				ident557=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident557.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:711:4: '@' ident
				{
				DebugLocation(711, 4);
				char_literal558=(IToken)Match(input,125,Follow._125_in_lvalue_atom6787); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_125.Add(char_literal558);

				DebugLocation(711, 8);
				PushFollow(Follow._ident_in_lvalue_atom6789);
				ident559=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident559.Tree);


				{
				// AST REWRITE
				// elements: ident, 125
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 711:14: -> ^( '@' ident )
				{
					DebugLocation(711, 17);
					// SugarCpp.g:711:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(711, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_125.NextNode(), root_1);

					DebugLocation(711, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 96);
			LeaveRule("lvalue_atom", 96);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(712, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:714:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 97);
		TraceIn("lvalue", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal560 = default(IToken);
		IToken char_literal562 = default(IToken);
		IToken char_literal564 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item563 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item565 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal560_tree = default(CommonTree);
		CommonTree char_literal562_tree = default(CommonTree);
		CommonTree char_literal564_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(714, 1);
		try
		{
			// SugarCpp.g:715:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt246=2;
			try { DebugEnterDecision(246, false);
			int LA246_0 = input.LA(1);

			if ((LA246_0==90))
			{
				alt246 = 1;
			}
			else if ((LA246_0==IDENT||LA246_0==83||LA246_0==88||LA246_0==92||(LA246_0>=94 && LA246_0<=95)||(LA246_0>=98 && LA246_0<=99)||LA246_0==125||LA246_0==155||LA246_0==173))
			{
				alt246 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 246, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(246); }
			switch (alt246)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:715:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(715, 4);
				char_literal560=(IToken)Match(input,90,Follow._90_in_lvalue6808); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal560);

				DebugLocation(715, 8);
				PushFollow(Follow._lvalue_item_in_lvalue6810);
				lvalue_item561=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item561.Tree);
				DebugLocation(715, 20);
				// SugarCpp.g:715:20: ( ',' lvalue_item )+
				int cnt245=0;
				try { DebugEnterSubRule(245);
				while (true)
				{
					int alt245=2;
					try { DebugEnterDecision(245, false);
					int LA245_0 = input.LA(1);

					if ((LA245_0==97))
					{
						alt245 = 1;
					}


					} finally { DebugExitDecision(245); }
					switch (alt245)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:715:21: ',' lvalue_item
						{
						DebugLocation(715, 21);
						char_literal562=(IToken)Match(input,97,Follow._97_in_lvalue6813); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_97.Add(char_literal562);

						DebugLocation(715, 25);
						PushFollow(Follow._lvalue_item_in_lvalue6815);
						lvalue_item563=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item563.Tree);

						}
						break;

					default:
						if (cnt245 >= 1)
							goto loop245;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee245 = new EarlyExitException( 245, input );
						DebugRecognitionException(eee245);
						throw eee245;
					}
					cnt245++;
				}
				loop245:
					;

				} finally { DebugExitSubRule(245); }

				DebugLocation(715, 39);
				char_literal564=(IToken)Match(input,91,Follow._91_in_lvalue6819); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal564);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 715:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(715, 46);
					// SugarCpp.g:715:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(715, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(715, 60);
					// SugarCpp.g:715:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(715, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:716:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(716, 4);
				PushFollow(Follow._lvalue_item_in_lvalue6833);
				lvalue_item565=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item565.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 97);
			LeaveRule("lvalue", 97);
			LeaveRule_lvalue();
		}
		DebugLocation(717, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:719:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 98);
		TraceIn("ident", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT566 = default(IToken);
		IToken string_literal567 = default(IToken);
		IToken IDENT568 = default(IToken);

		CommonTree IDENT566_tree = default(CommonTree);
		CommonTree string_literal567_tree = default(CommonTree);
		CommonTree IDENT568_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(719, 1);
		try
		{
			// SugarCpp.g:720:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:720:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(720, 4);
			IDENT566=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6844); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT566_tree = (CommonTree)adaptor.Create(IDENT566);
			adaptor.AddChild(root_0, IDENT566_tree);
			}
			DebugLocation(720, 10);
			// SugarCpp.g:720:10: ( '::' IDENT )*
			try { DebugEnterSubRule(247);
			while (true)
			{
				int alt247=2;
				try { DebugEnterDecision(247, false);
				int LA247_0 = input.LA(1);

				if ((LA247_0==108))
				{
					alt247 = 1;
				}


				} finally { DebugExitDecision(247); }
				switch ( alt247 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:720:11: '::' IDENT
					{
					DebugLocation(720, 11);
					string_literal567=(IToken)Match(input,108,Follow._108_in_ident6847); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal567_tree = (CommonTree)adaptor.Create(string_literal567);
					adaptor.AddChild(root_0, string_literal567_tree);
					}
					DebugLocation(720, 16);
					IDENT568=(IToken)Match(input,IDENT,Follow._IDENT_in_ident6849); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT568_tree = (CommonTree)adaptor.Create(IDENT568);
					adaptor.AddChild(root_0, IDENT568_tree);
					}

					}
					break;

				default:
					goto loop247;
				}
			}

			loop247:
				;

			} finally { DebugExitSubRule(247); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 98);
			LeaveRule("ident", 98);
			LeaveRule_ident();
		}
		DebugLocation(721, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:723:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 99);
		TraceIn("infix_func", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal569 = default(IToken);
		IToken char_literal571 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident570 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal569_tree = default(CommonTree);
		CommonTree char_literal571_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(723, 1);
		try
		{
			// SugarCpp.g:724:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:724:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(724, 7);
			char_literal569=(IToken)Match(input,130,Follow._130_in_infix_func6862); if (state.failed) return retval;
			DebugLocation(724, 9);
			PushFollow(Follow._ident_in_infix_func6865);
			ident570=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident570.Tree);
			DebugLocation(724, 18);
			char_literal571=(IToken)Match(input,130,Follow._130_in_infix_func6867); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 99);
			LeaveRule("infix_func", 99);
			LeaveRule_infix_func();
		}
		DebugLocation(725, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 100);
		TraceIn("synpred1_SugarCpp_fragment", 100);
		try
		{
			// SugarCpp.g:607:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )
			DebugEnterAlt(1);
			// SugarCpp.g:607:28: '<' ident ( ',' ident )* '>' bracket_expr_list
			{
			DebugLocation(607, 28);
			Match(input,111,Follow._111_in_synpred1_SugarCpp5250); if (state.failed) return;
			DebugLocation(607, 32);
			PushFollow(Follow._ident_in_synpred1_SugarCpp5252);
			ident();
			PopFollow();
			if (state.failed) return;
			DebugLocation(607, 38);
			// SugarCpp.g:607:38: ( ',' ident )*
			try { DebugEnterSubRule(248);
			while (true)
			{
				int alt248=2;
				try { DebugEnterDecision(248, false);
				int LA248_0 = input.LA(1);

				if ((LA248_0==97))
				{
					alt248 = 1;
				}


				} finally { DebugExitDecision(248); }
				switch ( alt248 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:607:39: ',' ident
					{
					DebugLocation(607, 39);
					Match(input,97,Follow._97_in_synpred1_SugarCpp5255); if (state.failed) return;
					DebugLocation(607, 43);
					PushFollow(Follow._ident_in_synpred1_SugarCpp5257);
					ident();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop248;
				}
			}

			loop248:
				;

			} finally { DebugExitSubRule(248); }

			DebugLocation(607, 51);
			Match(input,119,Follow._119_in_synpred1_SugarCpp5261); if (state.failed) return;
			DebugLocation(607, 55);
			PushFollow(Follow._bracket_expr_list_in_synpred1_SugarCpp5263);
			bracket_expr_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 100);
			LeaveRule("synpred1_SugarCpp_fragment", 100);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA28 dfa28;
	private DFA35 dfa35;
	private DFA42 dfa42;
	private DFA49 dfa49;
	private DFA77 dfa77;
	private DFA99 dfa99;
	private DFA108 dfa108;
	private DFA113 dfa113;
	private DFA126 dfa126;
	private DFA168 dfa168;
	private DFA157 dfa157;
	private DFA189 dfa189;
	private DFA188 dfa188;
	private DFA197 dfa197;
	private DFA227 dfa227;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa28 = new DFA28( this );
		dfa35 = new DFA35( this );
		dfa42 = new DFA42( this );
		dfa49 = new DFA49( this );
		dfa77 = new DFA77( this );
		dfa99 = new DFA99( this );
		dfa108 = new DFA108( this );
		dfa113 = new DFA113( this );
		dfa126 = new DFA126( this );
		dfa168 = new DFA168( this );
		dfa157 = new DFA157( this );
		dfa189 = new DFA189( this );
		dfa188 = new DFA188( this );
		dfa197 = new DFA197( this );
		dfa227 = new DFA227( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x2C\x1\xFFFF\x1\x2C\x6\xFFFF\x2\x5A\x1\x2C\x1\xFFFF\x3\x2C\x1\x35"+
			"\x2\x2C\x1\x5A\x3\x5B\x2\x5A\x1\x2C\x3\x5B\x1\x2C\x1\x61\x5\x2C\x1\x61"+
			"\x1\x2C\x4\x5B\x1\x5A\xA\x5B\x2\x2C\x1\x61\x2\x2C\x1\x61\x2\x2C\xA\x5B"+
			"\x2\x2C\x2\x5B";
		private const string DFA4_maxS =
			"\x1\xAD\x1\x89\x1\xFFFF\x1\xAD\x6\xFFFF\x2\x7F\x1\x2C\x1\xFFFF\x1\x2C"+
			"\x1\x3B\x1\x89\x1\x35\x1\x3B\x1\xAD\x1\x7F\x2\x61\x1\x6C\x2\x7F\x1\xAD"+
			"\x2\x61\x1\x6C\x1\x3B\x1\x7F\x2\x2C\x3\x3B\x1\x7F\x1\x2C\x2\x61\x2\x6C"+
			"\x1\x7F\x2\x61\x1\x6C\x2\x61\x1\x6C\x2\x61\x2\x6C\x1\x2C\x1\x3B\x1\x7F"+
			"\x1\x2C\x1\x3B\x1\x7F\x2\x2C\x1\x6C\x2\x61\x2\x6C\x2\x61\x3\x6C\x2\x2C"+
			"\x2\x6C";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x2D\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1\x4\x1\xFFFF\x1\x4"+
				"\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2\x2\xFFFF\x1\x9\x4"+
				"\xFFFF\x1\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x6\xFFFF\x1\x2",
				"\x1\xA\x5C\xFFFF\x1\xB",
				"",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2E\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\x9\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5C\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\x9\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2B\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x3\xFFFF\x1\x2\x5\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1"+
				"\x2\x2E\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\x8\xFFFF\x1\x1A\x24\xFFFF\x1\x2\x23\xFFFF\x1\x1\x7\xFFFF\x1"+
				"\x4\x1\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x3\xFFFF\x1\x8\x4\xFFFF\x1\x2"+
				"\x2\xFFFF\x1\x9\x4\xFFFF\x1\x2\x4\xFFFF\x1\x7\x2\xFFFF\x1\x6\x6\xFFFF"+
				"\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\x9\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\x9\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\x9\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\x9\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\x9\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\x9\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "217:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA28 : DFA
	{
		private const string DFA28_eotS =
			"\x4\xFFFF";
		private const string DFA28_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA28_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA28_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA28_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA28_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA28_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA28_eot = DFA.UnpackEncodedString(DFA28_eotS);
		private static readonly short[] DFA28_eof = DFA.UnpackEncodedString(DFA28_eofS);
		private static readonly char[] DFA28_min = DFA.UnpackEncodedStringToUnsignedChars(DFA28_minS);
		private static readonly char[] DFA28_max = DFA.UnpackEncodedStringToUnsignedChars(DFA28_maxS);
		private static readonly short[] DFA28_accept = DFA.UnpackEncodedString(DFA28_acceptS);
		private static readonly short[] DFA28_special = DFA.UnpackEncodedString(DFA28_specialS);
		private static readonly short[][] DFA28_transition;

		static DFA28()
		{
			int numStates = DFA28_transitionS.Length;
			DFA28_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA28_transition[i] = DFA.UnpackEncodedString(DFA28_transitionS[i]);
			}
		}

		public DFA28( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 28;
			this.eot = DFA28_eot;
			this.eof = DFA28_eof;
			this.min = DFA28_min;
			this.max = DFA28_max;
			this.accept = DFA28_accept;
			this.special = DFA28_special;
			this.transition = DFA28_transition;
		}

		public override string Description { get { return "261:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA35 : DFA
	{
		private const string DFA35_eotS =
			"\x4\xFFFF";
		private const string DFA35_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA35_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA35_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA35_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA35_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA35_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA35_eot = DFA.UnpackEncodedString(DFA35_eotS);
		private static readonly short[] DFA35_eof = DFA.UnpackEncodedString(DFA35_eofS);
		private static readonly char[] DFA35_min = DFA.UnpackEncodedStringToUnsignedChars(DFA35_minS);
		private static readonly char[] DFA35_max = DFA.UnpackEncodedStringToUnsignedChars(DFA35_maxS);
		private static readonly short[] DFA35_accept = DFA.UnpackEncodedString(DFA35_acceptS);
		private static readonly short[] DFA35_special = DFA.UnpackEncodedString(DFA35_specialS);
		private static readonly short[][] DFA35_transition;

		static DFA35()
		{
			int numStates = DFA35_transitionS.Length;
			DFA35_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA35_transition[i] = DFA.UnpackEncodedString(DFA35_transitionS[i]);
			}
		}

		public DFA35( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 35;
			this.eot = DFA35_eot;
			this.eof = DFA35_eof;
			this.min = DFA35_min;
			this.max = DFA35_max;
			this.accept = DFA35_accept;
			this.special = DFA35_special;
			this.transition = DFA35_transition;
		}

		public override string Description { get { return "269:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA42 : DFA
	{
		private const string DFA42_eotS =
			"\x4\xFFFF";
		private const string DFA42_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA42_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA42_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA42_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA42_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA42_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA42_eot = DFA.UnpackEncodedString(DFA42_eotS);
		private static readonly short[] DFA42_eof = DFA.UnpackEncodedString(DFA42_eofS);
		private static readonly char[] DFA42_min = DFA.UnpackEncodedStringToUnsignedChars(DFA42_minS);
		private static readonly char[] DFA42_max = DFA.UnpackEncodedStringToUnsignedChars(DFA42_maxS);
		private static readonly short[] DFA42_accept = DFA.UnpackEncodedString(DFA42_acceptS);
		private static readonly short[] DFA42_special = DFA.UnpackEncodedString(DFA42_specialS);
		private static readonly short[][] DFA42_transition;

		static DFA42()
		{
			int numStates = DFA42_transitionS.Length;
			DFA42_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA42_transition[i] = DFA.UnpackEncodedString(DFA42_transitionS[i]);
			}
		}

		public DFA42( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 42;
			this.eot = DFA42_eot;
			this.eof = DFA42_eof;
			this.min = DFA42_min;
			this.max = DFA42_max;
			this.accept = DFA42_accept;
			this.special = DFA42_special;
			this.transition = DFA42_transition;
		}

		public override string Description { get { return "273:79: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA49 : DFA
	{
		private const string DFA49_eotS =
			"\x4\xFFFF";
		private const string DFA49_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA49_minS =
			"\x1\x35\x1\x8\x2\xFFFF";
		private const string DFA49_maxS =
			"\x1\x35\x1\xAD\x2\xFFFF";
		private const string DFA49_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA49_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA49_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x23\xFFFF"+
				"\x1\x3\x7\xFFFF\x1\x3\x1\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2\xFFFF\x1"+
				"\x3\x6\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA49_eot = DFA.UnpackEncodedString(DFA49_eotS);
		private static readonly short[] DFA49_eof = DFA.UnpackEncodedString(DFA49_eofS);
		private static readonly char[] DFA49_min = DFA.UnpackEncodedStringToUnsignedChars(DFA49_minS);
		private static readonly char[] DFA49_max = DFA.UnpackEncodedStringToUnsignedChars(DFA49_maxS);
		private static readonly short[] DFA49_accept = DFA.UnpackEncodedString(DFA49_acceptS);
		private static readonly short[] DFA49_special = DFA.UnpackEncodedString(DFA49_specialS);
		private static readonly short[][] DFA49_transition;

		static DFA49()
		{
			int numStates = DFA49_transitionS.Length;
			DFA49_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA49_transition[i] = DFA.UnpackEncodedString(DFA49_transitionS[i]);
			}
		}

		public DFA49( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 49;
			this.eot = DFA49_eot;
			this.eof = DFA49_eof;
			this.min = DFA49_min;
			this.max = DFA49_max;
			this.accept = DFA49_accept;
			this.special = DFA49_special;
			this.transition = DFA49_transition;
		}

		public override string Description { get { return "274:101: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA77 : DFA
	{
		private const string DFA77_eotS =
			"\x11\xFFFF";
		private const string DFA77_eofS =
			"\x11\xFFFF";
		private const string DFA77_minS =
			"\x1\x2C\x1\xFFFF\x2\x2C\x1\xFFFF\x4\x2C\x1\x58\x3\x2C\x2\x58\x1\x2C\x1"+
			"\x58";
		private const string DFA77_maxS =
			"\x1\xAD\x1\xFFFF\x1\xAD\x1\x9E\x1\xFFFF\x1\x2C\x1\x9E\x1\x6D\x1\xAD\x1"+
			"\x7E\x1\x2C\x1\x9E\x1\xAD\x2\x7E\x1\x2C\x1\x7E";
		private const string DFA77_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA77_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA77_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2E\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1"+
				"\xE\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x6\xFFFF"+
				"\x1\x4\x1F\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1C\xFFFF\x1\x1\x11\xFFFF\x1\x1\xC\xFFFF\x1"+
				"\x1\x7\xFFFF\x1\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x6\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\xE\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x2E\xFFFF\x1\x1\xC\xFFFF\x1\x1\x7\xFFFF\x1\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x8\xFFFF\x1\x1"+
				"\x18\xFFFF\x1\x1\x2E\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x3\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x7\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA77_eot = DFA.UnpackEncodedString(DFA77_eotS);
		private static readonly short[] DFA77_eof = DFA.UnpackEncodedString(DFA77_eofS);
		private static readonly char[] DFA77_min = DFA.UnpackEncodedStringToUnsignedChars(DFA77_minS);
		private static readonly char[] DFA77_max = DFA.UnpackEncodedStringToUnsignedChars(DFA77_maxS);
		private static readonly short[] DFA77_accept = DFA.UnpackEncodedString(DFA77_acceptS);
		private static readonly short[] DFA77_special = DFA.UnpackEncodedString(DFA77_specialS);
		private static readonly short[][] DFA77_transition;

		static DFA77()
		{
			int numStates = DFA77_transitionS.Length;
			DFA77_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA77_transition[i] = DFA.UnpackEncodedString(DFA77_transitionS[i]);
			}
		}

		public DFA77( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 77;
			this.eot = DFA77_eot;
			this.eof = DFA77_eof;
			this.min = DFA77_min;
			this.max = DFA77_max;
			this.accept = DFA77_accept;
			this.special = DFA77_special;
			this.transition = DFA77_transition;
		}

		public override string Description { get { return "354:15: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA99 : DFA
	{
		private const string DFA99_eotS =
			"\x9\xFFFF";
		private const string DFA99_eofS =
			"\x9\xFFFF";
		private const string DFA99_minS =
			"\x1\x2C\x1\x8\x4\xFFFF\x1\x2C\x1\xFFFF\x1\x8";
		private const string DFA99_maxS =
			"\x1\xAD\x1\xAB\x4\xFFFF\x1\x2C\x1\xFFFF\x1\xAB";
		private const string DFA99_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA99_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA99_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x19\xFFFF\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x2\x5\xFFFF\x1\x4\x2\xFFFF\x1\x3\x6\xFFFF\x1\x5",
				"\x1\x5\x2C\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x11\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2C\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x4\xFFFF\x2\x5\x1"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xD\xFFFF\x2\x5\x1\xFFFF\x1"+
				"\x5\x11\xFFFF\x2\x5\x3\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA99_eot = DFA.UnpackEncodedString(DFA99_eotS);
		private static readonly short[] DFA99_eof = DFA.UnpackEncodedString(DFA99_eofS);
		private static readonly char[] DFA99_min = DFA.UnpackEncodedStringToUnsignedChars(DFA99_minS);
		private static readonly char[] DFA99_max = DFA.UnpackEncodedStringToUnsignedChars(DFA99_maxS);
		private static readonly short[] DFA99_accept = DFA.UnpackEncodedString(DFA99_acceptS);
		private static readonly short[] DFA99_special = DFA.UnpackEncodedString(DFA99_specialS);
		private static readonly short[][] DFA99_transition;

		static DFA99()
		{
			int numStates = DFA99_transitionS.Length;
			DFA99_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA99_transition[i] = DFA.UnpackEncodedString(DFA99_transitionS[i]);
			}
		}

		public DFA99( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 99;
			this.eot = DFA99_eot;
			this.eof = DFA99_eof;
			this.min = DFA99_min;
			this.max = DFA99_max;
			this.accept = DFA99_accept;
			this.special = DFA99_special;
			this.transition = DFA99_transition;
		}

		public override string Description { get { return "397:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA108 : DFA
	{
		private const string DFA108_eotS =
			"\x4\xFFFF";
		private const string DFA108_eofS =
			"\x4\xFFFF";
		private const string DFA108_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA108_maxS =
			"\x1\x92\x1\xAD\x2\xFFFF";
		private const string DFA108_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA108_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA108_transitionS =
			{
				"\x1\x3\x2C\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x23\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA108_eot = DFA.UnpackEncodedString(DFA108_eotS);
		private static readonly short[] DFA108_eof = DFA.UnpackEncodedString(DFA108_eofS);
		private static readonly char[] DFA108_min = DFA.UnpackEncodedStringToUnsignedChars(DFA108_minS);
		private static readonly char[] DFA108_max = DFA.UnpackEncodedStringToUnsignedChars(DFA108_maxS);
		private static readonly short[] DFA108_accept = DFA.UnpackEncodedString(DFA108_acceptS);
		private static readonly short[] DFA108_special = DFA.UnpackEncodedString(DFA108_specialS);
		private static readonly short[][] DFA108_transition;

		static DFA108()
		{
			int numStates = DFA108_transitionS.Length;
			DFA108_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA108_transition[i] = DFA.UnpackEncodedString(DFA108_transitionS[i]);
			}
		}

		public DFA108( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 108;
			this.eot = DFA108_eot;
			this.eof = DFA108_eof;
			this.min = DFA108_min;
			this.max = DFA108_max;
			this.accept = DFA108_accept;
			this.special = DFA108_special;
			this.transition = DFA108_transition;
		}

		public override string Description { get { return "428:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA113 : DFA
	{
		private const string DFA113_eotS =
			"\x4\xFFFF";
		private const string DFA113_eofS =
			"\x4\xFFFF";
		private const string DFA113_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA113_maxS =
			"\x1\x92\x1\xAD\x2\xFFFF";
		private const string DFA113_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA113_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA113_transitionS =
			{
				"\x1\x3\x2C\xFFFF\x1\x1\x56\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x23\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5"+
				"\x3\x2\xFFFF\x1\x3\x3\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
		private static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
		private static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
		private static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
		private static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
		private static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
		private static readonly short[][] DFA113_transition;

		static DFA113()
		{
			int numStates = DFA113_transitionS.Length;
			DFA113_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA113_transition[i] = DFA.UnpackEncodedString(DFA113_transitionS[i]);
			}
		}

		public DFA113( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 113;
			this.eot = DFA113_eot;
			this.eof = DFA113_eof;
			this.min = DFA113_min;
			this.max = DFA113_max;
			this.accept = DFA113_accept;
			this.special = DFA113_special;
			this.transition = DFA113_transition;
		}

		public override string Description { get { return "431:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA126 : DFA
	{
		private const string DFA126_eotS =
			"\x7\xFFFF";
		private const string DFA126_eofS =
			"\x7\xFFFF";
		private const string DFA126_minS =
			"\x1\x2C\x1\x8\x1\xFFFF\x1\x2C\x2\xFFFF\x1\x8";
		private const string DFA126_maxS =
			"\x1\xAD\x1\xAC\x1\xFFFF\x1\x2C\x2\xFFFF\x1\xAC";
		private const string DFA126_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA126_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA126_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x2\x2C\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\x5\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF\x4\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2C\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\xF\x2\x1\xFFFF\x1\x3"+
				"\x3\x2\x1\x4\x5\x2\x1\x5\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xA\xFFFF"+
				"\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\x7\xFFFF\x2\x2\x3\xFFFF\x4\x2"
			};

		private static readonly short[] DFA126_eot = DFA.UnpackEncodedString(DFA126_eotS);
		private static readonly short[] DFA126_eof = DFA.UnpackEncodedString(DFA126_eofS);
		private static readonly char[] DFA126_min = DFA.UnpackEncodedStringToUnsignedChars(DFA126_minS);
		private static readonly char[] DFA126_max = DFA.UnpackEncodedStringToUnsignedChars(DFA126_maxS);
		private static readonly short[] DFA126_accept = DFA.UnpackEncodedString(DFA126_acceptS);
		private static readonly short[] DFA126_special = DFA.UnpackEncodedString(DFA126_specialS);
		private static readonly short[][] DFA126_transition;

		static DFA126()
		{
			int numStates = DFA126_transitionS.Length;
			DFA126_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA126_transition[i] = DFA.UnpackEncodedString(DFA126_transitionS[i]);
			}
		}

		public DFA126( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 126;
			this.eot = DFA126_eot;
			this.eof = DFA126_eof;
			this.min = DFA126_min;
			this.max = DFA126_max;
			this.accept = DFA126_accept;
			this.special = DFA126_special;
			this.transition = DFA126_transition;
		}

		public override string Description { get { return "461:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA168 : DFA
	{
		private const string DFA168_eotS =
			"\x7\xFFFF";
		private const string DFA168_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA168_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA168_maxS =
			"\x1\xA9\x1\xAD\x2\xFFFF\x2\xAD\x1\xFFFF";
		private const string DFA168_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA168_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA168_transitionS =
			{
				"\x1\x3\x2C\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xC\xFFFF\x1\x3\x20\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x11\xFFFF\x2\x3\x2\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x23\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19"+
				"\xFFFF\x2\x3\x7\xFFFF\x1\x3\x1\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x3\x3\x2\xFFFF\x6\x3\x1\xFFFF"+
				"\x2\x3\x2\xFFFF\x1\x3",
				"",
				"",
				"\x1\x3\x23\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x3\xFFFF"+
				"\x1\x3",
				"\x1\x3\x23\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x19\xFFFF"+
				"\x1\x3\xC\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x2\xFFFF\x5\x3\x1\xFFFF\x1\x6\x1\x3\x3\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA168_eot = DFA.UnpackEncodedString(DFA168_eotS);
		private static readonly short[] DFA168_eof = DFA.UnpackEncodedString(DFA168_eofS);
		private static readonly char[] DFA168_min = DFA.UnpackEncodedStringToUnsignedChars(DFA168_minS);
		private static readonly char[] DFA168_max = DFA.UnpackEncodedStringToUnsignedChars(DFA168_maxS);
		private static readonly short[] DFA168_accept = DFA.UnpackEncodedString(DFA168_acceptS);
		private static readonly short[] DFA168_special = DFA.UnpackEncodedString(DFA168_specialS);
		private static readonly short[][] DFA168_transition;

		static DFA168()
		{
			int numStates = DFA168_transitionS.Length;
			DFA168_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA168_transition[i] = DFA.UnpackEncodedString(DFA168_transitionS[i]);
			}
		}

		public DFA168( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 168;
			this.eot = DFA168_eot;
			this.eof = DFA168_eof;
			this.min = DFA168_min;
			this.max = DFA168_max;
			this.accept = DFA168_accept;
			this.special = DFA168_special;
			this.transition = DFA168_transition;
		}

		public override string Description { get { return "512:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA157 : DFA
	{
		private const string DFA157_eotS =
			"\x4\xFFFF";
		private const string DFA157_eofS =
			"\x4\xFFFF";
		private const string DFA157_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA157_maxS =
			"\x2\x35\x2\xFFFF";
		private const string DFA157_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA157_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA157_transitionS =
			{
				"\x1\x2\x2C\xFFFF\x1\x1",
				"\x1\x2\x24\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA157_eot = DFA.UnpackEncodedString(DFA157_eotS);
		private static readonly short[] DFA157_eof = DFA.UnpackEncodedString(DFA157_eofS);
		private static readonly char[] DFA157_min = DFA.UnpackEncodedStringToUnsignedChars(DFA157_minS);
		private static readonly char[] DFA157_max = DFA.UnpackEncodedStringToUnsignedChars(DFA157_maxS);
		private static readonly short[] DFA157_accept = DFA.UnpackEncodedString(DFA157_acceptS);
		private static readonly short[] DFA157_special = DFA.UnpackEncodedString(DFA157_specialS);
		private static readonly short[][] DFA157_transition;

		static DFA157()
		{
			int numStates = DFA157_transitionS.Length;
			DFA157_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA157_transition[i] = DFA.UnpackEncodedString(DFA157_transitionS[i]);
			}
		}

		public DFA157( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 157;
			this.eot = DFA157_eot;
			this.eof = DFA157_eof;
			this.min = DFA157_min;
			this.max = DFA157_max;
			this.accept = DFA157_accept;
			this.special = DFA157_special;
			this.transition = DFA157_transition;
		}

		public override string Description { get { return "512:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA189 : DFA
	{
		private const string DFA189_eotS =
			"\x7\xFFFF";
		private const string DFA189_eofS =
			"\x7\xFFFF";
		private const string DFA189_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA189_maxS =
			"\x5\xAD\x2\xFFFF";
		private const string DFA189_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA189_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA189_transitionS =
			{
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x1A\xFFFF\x2\x5\x11\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA189_eot = DFA.UnpackEncodedString(DFA189_eotS);
		private static readonly short[] DFA189_eof = DFA.UnpackEncodedString(DFA189_eofS);
		private static readonly char[] DFA189_min = DFA.UnpackEncodedStringToUnsignedChars(DFA189_minS);
		private static readonly char[] DFA189_max = DFA.UnpackEncodedStringToUnsignedChars(DFA189_maxS);
		private static readonly short[] DFA189_accept = DFA.UnpackEncodedString(DFA189_acceptS);
		private static readonly short[] DFA189_special = DFA.UnpackEncodedString(DFA189_specialS);
		private static readonly short[][] DFA189_transition;

		static DFA189()
		{
			int numStates = DFA189_transitionS.Length;
			DFA189_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA189_transition[i] = DFA.UnpackEncodedString(DFA189_transitionS[i]);
			}
		}

		public DFA189( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 189;
			this.eot = DFA189_eot;
			this.eof = DFA189_eof;
			this.min = DFA189_min;
			this.max = DFA189_max;
			this.accept = DFA189_accept;
			this.special = DFA189_special;
			this.transition = DFA189_transition;
		}

		public override string Description { get { return "547:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA188 : DFA
	{
		private const string DFA188_eotS =
			"\x7\xFFFF";
		private const string DFA188_eofS =
			"\x7\xFFFF";
		private const string DFA188_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA188_maxS =
			"\x1\x7F\x4\xAD\x2\xFFFF";
		private const string DFA188_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA188_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA188_transitionS =
			{
				"\x1\x4\x24\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"\x1\x4\x23\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x1A\xFFFF\x2\x6\x11\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA188_eot = DFA.UnpackEncodedString(DFA188_eotS);
		private static readonly short[] DFA188_eof = DFA.UnpackEncodedString(DFA188_eofS);
		private static readonly char[] DFA188_min = DFA.UnpackEncodedStringToUnsignedChars(DFA188_minS);
		private static readonly char[] DFA188_max = DFA.UnpackEncodedStringToUnsignedChars(DFA188_maxS);
		private static readonly short[] DFA188_accept = DFA.UnpackEncodedString(DFA188_acceptS);
		private static readonly short[] DFA188_special = DFA.UnpackEncodedString(DFA188_specialS);
		private static readonly short[][] DFA188_transition;

		static DFA188()
		{
			int numStates = DFA188_transitionS.Length;
			DFA188_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA188_transition[i] = DFA.UnpackEncodedString(DFA188_transitionS[i]);
			}
		}

		public DFA188( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 188;
			this.eot = DFA188_eot;
			this.eof = DFA188_eof;
			this.min = DFA188_min;
			this.max = DFA188_max;
			this.accept = DFA188_accept;
			this.special = DFA188_special;
			this.transition = DFA188_transition;
		}

		public override string Description { get { return "()* loopback of 547:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA197 : DFA
	{
		private const string DFA197_eotS =
			"\xB\xFFFF";
		private const string DFA197_eofS =
			"\xB\xFFFF";
		private const string DFA197_minS =
			"\x2\x2C\x1\xFFFF\x1\x54\x1\xFFFF\x2\x2C\x2\x54\x1\x2C\x1\x54";
		private const string DFA197_maxS =
			"\x2\xAD\x1\xFFFF\x1\xAC\x1\xFFFF\x1\x2C\x1\xAD\x2\xAC\x1\x2C\x1\xAC";
		private const string DFA197_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA197_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA197_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1C\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11"+
				"\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x2\x2\x16\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x5\x2\xE\xFFFF\x2\x2\x7\xFFFF"+
				"\x1\x2\xD\xFFFF\x3\x2"
			};

		private static readonly short[] DFA197_eot = DFA.UnpackEncodedString(DFA197_eotS);
		private static readonly short[] DFA197_eof = DFA.UnpackEncodedString(DFA197_eofS);
		private static readonly char[] DFA197_min = DFA.UnpackEncodedStringToUnsignedChars(DFA197_minS);
		private static readonly char[] DFA197_max = DFA.UnpackEncodedStringToUnsignedChars(DFA197_maxS);
		private static readonly short[] DFA197_accept = DFA.UnpackEncodedString(DFA197_acceptS);
		private static readonly short[] DFA197_special = DFA.UnpackEncodedString(DFA197_specialS);
		private static readonly short[][] DFA197_transition;

		static DFA197()
		{
			int numStates = DFA197_transitionS.Length;
			DFA197_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA197_transition[i] = DFA.UnpackEncodedString(DFA197_transitionS[i]);
			}
		}

		public DFA197( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 197;
			this.eot = DFA197_eot;
			this.eof = DFA197_eof;
			this.min = DFA197_min;
			this.max = DFA197_max;
			this.accept = DFA197_accept;
			this.special = DFA197_special;
			this.transition = DFA197_transition;
		}

		public override string Description { get { return "560:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA227 : DFA
	{
		private const string DFA227_eotS =
			"\x4\xFFFF";
		private const string DFA227_eofS =
			"\x4\xFFFF";
		private const string DFA227_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA227_maxS =
			"\x1\x61\x1\xAD\x2\xFFFF";
		private const string DFA227_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA227_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA227_transitionS =
			{
				"\x1\x2\x2C\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x23\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x19\xFFFF\x2\x3\x16\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x11\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA227_eot = DFA.UnpackEncodedString(DFA227_eotS);
		private static readonly short[] DFA227_eof = DFA.UnpackEncodedString(DFA227_eofS);
		private static readonly char[] DFA227_min = DFA.UnpackEncodedStringToUnsignedChars(DFA227_minS);
		private static readonly char[] DFA227_max = DFA.UnpackEncodedStringToUnsignedChars(DFA227_maxS);
		private static readonly short[] DFA227_accept = DFA.UnpackEncodedString(DFA227_acceptS);
		private static readonly short[] DFA227_special = DFA.UnpackEncodedString(DFA227_specialS);
		private static readonly short[][] DFA227_transition;

		static DFA227()
		{
			int numStates = DFA227_transitionS.Length;
			DFA227_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA227_transition[i] = DFA.UnpackEncodedString(DFA227_transitionS[i]);
			}
		}

		public DFA227( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 227;
			this.eot = DFA227_eot;
			this.eof = DFA227_eof;
			this.min = DFA227_min;
			this.max = DFA227_max;
			this.accept = DFA227_accept;
			this.special = DFA227_special;
			this.transition = DFA227_transition;
		}

		public override string Description { get { return "()* loopback of 663:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root571 = new BitSet(new ulong[]{0x20100000000000UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_root574 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block596 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block598 = new BitSet(new ulong[]{0x20100000000002UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _func_def_in_node621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node631 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args673 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args678 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item689 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_attribute_item692 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item694 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _97_in_attribute_item697 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item699 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_attribute_item703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_attribute_item721 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_attribute_item724 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item726 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _97_in_attribute_item729 = new BitSet(new ulong[]{0x840100000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item731 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_attribute_item735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_attribute760 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _attribute_item_in_attribute762 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_attribute765 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x200UL});
		public static readonly BitSet _attribute_item_in_attribute767 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_attribute771 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute773 = new BitSet(new ulong[]{0x20000000000002UL,0x4000000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc792 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc795 = new BitSet(new ulong[]{0x0UL,0x280000000000UL});
		public static readonly BitSet _107_in_global_alloc799 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_global_alloc801 = new BitSet(new ulong[]{0x2UL,0x10200004000000UL});
		public static readonly BitSet _116_in_global_alloc806 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _109_in_global_alloc810 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_global_alloc813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_global_alloc952 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_global_alloc955 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_global_alloc958 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_global_alloc960 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _attribute_in_global_using1001 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4000000000UL});
		public static readonly BitSet _166_in_global_using1004 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1006 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _attribute_in_global_typedef1030 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800000000UL});
		public static readonly BitSet _163_in_global_typedef1033 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_global_typedef1035 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_global_typedef1037 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_global_typedef1039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1063 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000UL});
		public static readonly BitSet _145_in_import_def1066 = new BitSet(new ulong[]{0x820000000000002UL});
		public static readonly BitSet _STRING_in_import_def1068 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1072 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_import_def1075 = new BitSet(new ulong[]{0x820000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1077 = new BitSet(new ulong[]{0x820000000000100UL});
		public static readonly BitSet _STRING_in_import_def1082 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1084 = new BitSet(new ulong[]{0x820000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1114 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000UL});
		public static readonly BitSet _141_in_enum_def1117 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_enum_def1119 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_enum_def1121 = new BitSet(new ulong[]{0x100000000002UL});
		public static readonly BitSet _ident_in_enum_def1124 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_enum_def1127 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_enum_def1129 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1162 = new BitSet(new ulong[]{0x0UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_namespace_def1165 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_namespace_def1167 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1170 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1173 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1175 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_namespace_def1178 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1208 = new BitSet(new ulong[]{0x0UL,0x0UL,0x140UL});
		public static readonly BitSet _136_in_class_def1213 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1215 = new BitSet(new ulong[]{0x20000000000002UL,0x880000000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1218 = new BitSet(new ulong[]{0x20000000000002UL,0x80000000000UL});
		public static readonly BitSet _107_in_class_def1223 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1225 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _97_in_class_def1228 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1230 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1237 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_class_def1240 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _NEWLINE_in_class_def1242 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_class_def1245 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1247 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_class_def1289 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_class_def1291 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1293 = new BitSet(new ulong[]{0x20000000000002UL,0x880004000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1296 = new BitSet(new ulong[]{0x20000000000002UL,0x80004000000UL});
		public static readonly BitSet _90_in_class_def1301 = new BitSet(new ulong[]{0x100000000000UL,0x200000000000UL});
		public static readonly BitSet _func_args_in_class_def1303 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_class_def1305 = new BitSet(new ulong[]{0x20000000000002UL,0x80000000000UL});
		public static readonly BitSet _107_in_class_def1310 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1312 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _97_in_class_def1315 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_class_def1317 = new BitSet(new ulong[]{0x20000000000002UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1324 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_class_def1327 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _NEWLINE_in_class_def1329 = new BitSet(new ulong[]{0x20100000000100UL,0x4000000004000000UL,0x204842422340UL});
		public static readonly BitSet _global_block_in_class_def1332 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1334 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1387 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_type_list1390 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_list1392 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _type_single_in_type_name1414 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_type_name1418 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_name1421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_type_name1425 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name1427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_type_name1468 = new BitSet(new ulong[]{0x100000000000UL,0xC000000UL,0x40400200UL});
		public static readonly BitSet _type_list_in_type_name1470 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name1473 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_type_name1475 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_name1478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_type_name1482 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_type_name1484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1508 = new BitSet(new ulong[]{0x2UL,0x4000000001000000UL});
		public static readonly BitSet _88_in_type_single1512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_type_single1528 = new BitSet(new ulong[]{0x840100000000000UL,0xE000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_type_single1532 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_type_single1535 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_type_single1537 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_type_single1541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_type_single1566 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_type_single1569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1616 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_type_no_array1620 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1655 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_type_star1659 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1705 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_type_template_type1709 = new BitSet(new ulong[]{0x100000000000UL,0x80000004000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_template_type1712 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _97_in_type_template_type1715 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_type_template_type1717 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _119_in_type_template_type1723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_type_ident1763 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x40400000UL});
		public static readonly BitSet _158_in_type_ident1766 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_type_ident1769 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_type_ident1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1800 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_generic_parameter_inside1803 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1805 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _111_in_generic_parameter1827 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1829 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_generic_parameter1831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1846 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_func_args1849 = new BitSet(new ulong[]{0x100000000000UL,0x200000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1851 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1873 = new BitSet(new ulong[]{0x0UL,0x80000000000UL});
		public static readonly BitSet _107_in_func_args_item1875 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_func_args_item1877 = new BitSet(new ulong[]{0x2UL,0x10200004000000UL});
		public static readonly BitSet _116_in_func_args_item1882 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _109_in_func_args_item1886 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_func_args_item1889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item1940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_func_args_item2000 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _modify_expr_in_func_args_item2004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_func_name2047 = new BitSet(new ulong[]{0x0UL,0x20450000000UL});
		public static readonly BitSet _operator_in_func_name2049 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_func_name2051 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2077 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x200040400200UL});
		public static readonly BitSet _func_type_in_func_def2080 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x200000000000UL});
		public static readonly BitSet _173_in_func_def2083 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL});
		public static readonly BitSet _func_name_in_func_def2086 = new BitSet(new ulong[]{0x0UL,0x800004000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2088 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_func_def2091 = new BitSet(new ulong[]{0x100000000000UL,0x200008000000UL});
		public static readonly BitSet _func_args_in_func_def2093 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_func_def2096 = new BitSet(new ulong[]{0x20000000000000UL,0x10000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2100 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2103 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_func_def2153 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_func_def2157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2211 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_func_def2214 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2216 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _match_item_in_func_def2220 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2222 = new BitSet(new ulong[]{0x20000000000100UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2320 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2322 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2332 = new BitSet(new ulong[]{0x20000000000000UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2335 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _110_in_stmt_block_item2340 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2342 = new BitSet(new ulong[]{0x20000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2359 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2361 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2364 = new BitSet(new ulong[]{0x100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_stmt_block2367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2424 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2453 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _144_in_stmt_expr2463 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2465 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _164_in_stmt_expr2494 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2496 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _169_in_stmt_expr2525 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2527 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _165_in_stmt_expr2556 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_expr2558 = new BitSet(new ulong[]{0x2UL,0x0UL,0x23000018000UL});
		public static readonly BitSet _143_in_stmt_expr2587 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_expr2589 = new BitSet(new ulong[]{0x2UL,0x200000000UL,0x23000018000UL});
		public static readonly BitSet _97_in_stmt_expr2592 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_expr2594 = new BitSet(new ulong[]{0x2UL,0x200000000UL,0x23000018000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2641 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2646 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2651 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_defer2667 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _stmt_in_stmt_defer2669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_defer2682 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _stmt_in_stmt_defer2684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _163_in_stmt_typedef2703 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2705 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_stmt_typedef2707 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_stmt_typedef2709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_stmt_using_item2732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_stmt_using2740 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2742 = new BitSet(new ulong[]{0x100000000002UL,0x0UL,0x2000000UL});
		public static readonly BitSet _157_in_stmt_return2763 = new BitSet(new ulong[]{0x840100000000002UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_return2765 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2786 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_inline_stmt_block2789 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2791 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _144_in_stmt_if2813 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_if2815 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2818 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2821 = new BitSet(new ulong[]{0x20000000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2824 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_stmt_if2827 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2829 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2832 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2864 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_if2887 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_if2889 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2892 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2895 = new BitSet(new ulong[]{0x20000000000002UL,0x0UL,0x1000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2898 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x1000UL});
		public static readonly BitSet _140_in_stmt_if2901 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2903 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2906 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_if2942 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_stmt_while2975 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_while2977 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2981 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_while3008 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_while3034 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_while3036 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3040 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_stmt_while3067 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_while3093 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_while3095 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3098 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3123 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _112_in_for_range3125 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3129 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200000800UL});
		public static readonly BitSet _161_in_for_range3132 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3136 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_for_range3139 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_for_range3172 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3176 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_for_range3179 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_range3183 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3260 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_for_map3262 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_for_map3264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3290 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_for3306 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_for3310 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL});
		public static readonly BitSet _97_in_stmt_for3313 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _for_item_in_stmt_for3315 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3319 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_stmt_try3353 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3355 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3358 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3360 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_stmt_try3363 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3365 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3367 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _167_in_switch_item3393 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_switch_item3395 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL,0x100000000UL});
		public static readonly BitSet _97_in_switch_item3398 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_switch_item3400 = new BitSet(new ulong[]{0x20000000000000UL,0x200000000UL,0x100000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3406 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3409 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_switch_item3455 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x204828000000UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _159_in_stmt_switch3497 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_stmt_switch3499 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3502 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3505 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3507 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x8000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3511 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3513 = new BitSet(new ulong[]{0x20000000000100UL,0x0UL,0x8000001000UL});
		public static readonly BitSet _140_in_stmt_switch3519 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3521 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3524 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3526 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3531 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3557 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_ident_list3560 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_ident_list3562 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3584 = new BitSet(new ulong[]{0x0UL,0x280000000000UL});
		public static readonly BitSet _107_in_stmt_alloc3588 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_stmt_alloc3590 = new BitSet(new ulong[]{0x2UL,0x10200004000000UL});
		public static readonly BitSet _116_in_stmt_alloc3595 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _109_in_stmt_alloc3599 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3602 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_stmt_alloc3717 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3721 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _97_in_stmt_alloc3724 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_alloc3726 = new BitSet(new ulong[]{0x2UL,0x200000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3756 = new BitSet(new ulong[]{0x2UL,0x1616041122400000UL,0x80000000002UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3760 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_stmt_modify3786 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_stmt_modify3815 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3817 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _121_in_stmt_modify3846 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_stmt_modify3848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item3882 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr3896 = new BitSet(new ulong[]{0x20000000000002UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3906 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3909 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3911 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x10000000000UL});
		public static readonly BitSet _168_in_where_expr3914 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr3918 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3922 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr3958 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr3961 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_where_expr3963 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr3967 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr3969 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_where_expr3974 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr3976 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr3979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4029 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4032 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_where_expr4034 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr4038 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4040 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_where_expr4045 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4047 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_where_expr4088 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4090 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4093 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_where_expr4095 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_where_expr4099 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4101 = new BitSet(new ulong[]{0x20100000000100UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _DEDENT_in_where_expr4106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_let_expr4164 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_let_expr4166 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_let_expr4170 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_let_expr4174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4198 = new BitSet(new ulong[]{0x860300000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _INDENT_in_let_expr4203 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4205 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_let_expr4208 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4210 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4213 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4286 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4289 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _NEWLINE_in_let_expr4291 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA881C400UL});
		public static readonly BitSet _where_item_in_let_expr4295 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4297 = new BitSet(new ulong[]{0x20100000000000UL,0x2000000CD5080000UL,0x227CA885C400UL});
		public static readonly BitSet _146_in_let_expr4302 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_let_expr4304 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4306 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4309 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_match_item4341 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_match_item4343 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL});
		public static readonly BitSet _118_in_match_item4345 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _where_expr_in_match_item4347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_match_expr4368 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_match_expr4370 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4373 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4376 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4378 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _match_item_in_match_expr4382 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4384 = new BitSet(new ulong[]{0x20000000000100UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr4412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4422 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_list_expr4433 = new BitSet(new ulong[]{0x860300000000100UL,0xE000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _97_in_list_expr4437 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4441 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _INDENT_in_list_expr4445 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4449 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _list_expr_in_list_expr4453 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_list_expr4457 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4461 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _INDENT_in_list_expr4465 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4469 = new BitSet(new ulong[]{0x860300000000100UL,0x6000000ED5080000UL,0x20000C000000UL});
		public static readonly BitSet _list_expr_in_list_expr4473 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_list_expr4480 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr4484 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _INDENT_in_list_expr4488 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _DEDENT_in_list_expr4492 = new BitSet(new ulong[]{0x20200000000100UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_list_expr4496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4538 = new BitSet(new ulong[]{0x20200000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_lambda_type4556 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_lambda_type4558 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_lambda_type4560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_lambda_expr4575 = new BitSet(new ulong[]{0x100000000000UL,0x200008000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4577 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_lambda_expr4580 = new BitSet(new ulong[]{0x0UL,0x40002004000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4582 = new BitSet(new ulong[]{0x0UL,0x40002000000000UL});
		public static readonly BitSet _101_in_lambda_expr4587 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_lambda_expr4624 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _lambda_value_in_lambda_expr4626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr4649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr4706 = new BitSet(new ulong[]{0x2UL,0x414241122400000UL,0x80000000002UL});
		public static readonly BitSet _set_in_modify_expr4710 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4755 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_modify_expr4764 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_in_modify_expr4767 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item4780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr4792 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _123_in_cond_expr4801 = new BitSet(new ulong[]{0x840100000000002UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4807 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _107_in_cond_expr4811 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr4815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr4929 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100010000000UL});
		public static readonly BitSet _or_op_in_or_expr4940 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _and_expr_in_or_expr4944 = new BitSet(new ulong[]{0x2UL,0x0UL,0x100010000000UL});
		public static readonly BitSet _bit_or_in_and_expr4986 = new BitSet(new ulong[]{0x2UL,0x800000UL,0x8UL});
		public static readonly BitSet _and_op_in_and_expr4997 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _bit_or_in_and_expr5001 = new BitSet(new ulong[]{0x2UL,0x800000UL,0x8UL});
		public static readonly BitSet _bit_xor_in_bit_or5032 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _170_in_bit_or5041 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _bit_xor_in_bit_or5045 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5075 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_bit_xor5084 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5088 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _cmp_expr_in_bit_and5118 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_bit_and5127 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and5131 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _chain_op_in_chain_list5223 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _shift_expr_in_chain_list5225 = new BitSet(new ulong[]{0x2UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5239 = new BitSet(new ulong[]{0x2UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _111_in_cmp_expr5268 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5270 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _97_in_cmp_expr5273 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5275 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _119_in_cmp_expr5279 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5281 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_cmp_expr5312 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5316 = new BitSet(new ulong[]{0x2UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5320 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5397 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5401 = new BitSet(new ulong[]{0x2UL,0x1A8800000100000UL,0x180000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5405 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5507 = new BitSet(new ulong[]{0x2UL,0x202000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5516 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _add_expr_in_shift_expr5520 = new BitSet(new ulong[]{0x2UL,0x202000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5550 = new BitSet(new ulong[]{0x2UL,0x440000000UL});
		public static readonly BitSet _94_in_add_expr5560 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5564 = new BitSet(new ulong[]{0x2UL,0x440000000UL});
		public static readonly BitSet _98_in_add_expr5589 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5593 = new BitSet(new ulong[]{0x2UL,0x440000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5631 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _92_in_mul_expr5641 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5645 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _105_in_mul_expr5672 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5676 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _85_in_mul_expr5703 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr5707 = new BitSet(new ulong[]{0x2UL,0x20010200000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5747 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _infix_func_in_infix_expr5757 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _selector_expr_in_infix_expr5761 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4UL});
		public static readonly BitSet _cast_expr_in_selector_expr5793 = new BitSet(new ulong[]{0x2UL,0x14000000000UL});
		public static readonly BitSet _102_in_selector_expr5803 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_selector_expr5807 = new BitSet(new ulong[]{0x2UL,0x14000000000UL});
		public static readonly BitSet _104_in_selector_expr5833 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_selector_expr5838 = new BitSet(new ulong[]{0x2UL,0x14000000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr5878 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_cast_expr5887 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_cast_expr5889 = new BitSet(new ulong[]{0x100000000000UL,0x4000000UL,0x40400200UL});
		public static readonly BitSet _type_name_in_cast_expr5891 = new BitSet(new ulong[]{0x0UL,0x8000000UL});
		public static readonly BitSet _91_in_cast_expr5893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr5955 = new BitSet(new ulong[]{0x840100000000000UL,0x2000000CD5080000UL,0x20000C000000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr5957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_prefix_expr5973 = new BitSet(new ulong[]{0x100000000000UL,0x0UL,0x40400200UL});
		public static readonly BitSet _type_no_array_in_prefix_expr5975 = new BitSet(new ulong[]{0x0UL,0x4000000004000000UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr5979 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_square_expr_list6038 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_square_expr_list6040 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _97_in_square_expr_list6043 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_square_expr_list6045 = new BitSet(new ulong[]{0x0UL,0x8000000200000000UL});
		public static readonly BitSet _127_in_square_expr_list6049 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_bracket_expr_list6069 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CDD080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list6072 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _97_in_bracket_expr_list6075 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list6077 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _91_in_bracket_expr_list6085 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6107 = new BitSet(new ulong[]{0x860300000000000UL,0x6000000CDD080000UL,0x20000D200000UL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6112 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6114 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list6117 = new BitSet(new ulong[]{0x20000000000100UL,0x208000000UL});
		public static readonly BitSet _97_in_bracket_expr_list6121 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6125 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list6129 = new BitSet(new ulong[]{0x20000000000100UL,0x208000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6133 = new BitSet(new ulong[]{0x20000000000100UL,0x8000000UL});
		public static readonly BitSet _91_in_bracket_expr_list6138 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6140 = new BitSet(new ulong[]{0x20000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6147 = new BitSet(new ulong[]{0x20000000000000UL,0x8000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6149 = new BitSet(new ulong[]{0x20000000000000UL,0x8000000UL});
		public static readonly BitSet _91_in_bracket_expr_list6152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6179 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _97_in_bracket_expr_list6183 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6187 = new BitSet(new ulong[]{0x860100000000000UL,0x6000000ED5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_bracket_expr_list6191 = new BitSet(new ulong[]{0x20000000000000UL,0x208000000UL});
		public static readonly BitSet _91_in_bracket_expr_list6197 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6244 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _95_in_suffix_expr6254 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _99_in_suffix_expr6280 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _103_in_suffix_expr6303 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6305 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _101_in_suffix_expr6330 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6332 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6357 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6380 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _125_in_suffix_expr6403 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6405 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6407 = new BitSet(new ulong[]{0x2UL,0x600000A884000000UL});
		public static readonly BitSet _NUMBER_in_atom_expr6445 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6455 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_atom_expr6460 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_atom_expr6462 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_atom_expr6475 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_atom_expr6479 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _97_in_atom_expr6484 = new BitSet(new ulong[]{0x840100000000000UL,0x6000000CD5080000UL,0x20000D200000UL});
		public static readonly BitSet _expr_in_atom_expr6486 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_atom_expr6490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_atom_expr6517 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6548 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6560 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD1080000UL,0x200008000000UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix6592 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _95_in_lvalue_suffix6602 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _99_in_lvalue_suffix6630 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _103_in_lvalue_suffix6655 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6657 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _101_in_lvalue_suffix6684 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix6686 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix6713 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix6716 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix6744 = new BitSet(new ulong[]{0x2UL,0x400080A884000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_lvalue_atom6787 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom6789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _90_in_lvalue6808 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD1080000UL,0x200008000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6810 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_lvalue6813 = new BitSet(new ulong[]{0x100000000000UL,0x2000000CD1080000UL,0x200008000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue6815 = new BitSet(new ulong[]{0x0UL,0x208000000UL});
		public static readonly BitSet _91_in_lvalue6819 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue6833 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident6844 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _108_in_ident6847 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _IDENT_in_ident6849 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _130_in_infix_func6862 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_infix_func6865 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _130_in_infix_func6867 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_synpred1_SugarCpp5250 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_synpred1_SugarCpp5252 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _97_in_synpred1_SugarCpp5255 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _ident_in_synpred1_SugarCpp5257 = new BitSet(new ulong[]{0x0UL,0x80000200000000UL});
		public static readonly BitSet _119_in_synpred1_SugarCpp5261 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _bracket_expr_list_in_synpred1_SugarCpp5263 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
