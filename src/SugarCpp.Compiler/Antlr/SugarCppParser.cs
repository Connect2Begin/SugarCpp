//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-06-07 20:11:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Args", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_List_Generation", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Expr_Where", "For_Item_Down_To", "For_Item_Each", "For_Item_Map", "For_Item_Til", "For_Item_To", "For_Item_When", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Expr", "Match_Expr_Item", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_If", "Stmt_Loop", "Stmt_Return", "Stmt_Switch", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Switch_Item", "Type_Array", "Type_Func", "Type_Ident", "Type_List", "Type_Ref", "Type_Star", "Type_Template", "White_Space", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-->'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'<|'", "'='", "'=='", "'==>'", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'long'", "'loop'", "'match'", "'namespace'", "'new'", "'not'", "'or'", "'public'", "'return'", "'static'", "'struct'", "'switch'", "'then'", "'til'", "'to'", "'try'", "'type'", "'unless'", "'until'", "'using'", "'virtual'", "'when'", "'where'", "'while'", "'|'", "'|='", "'|>'", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int T__161=161;
	public const int T__162=162;
	public const int T__163=163;
	public const int T__164=164;
	public const int T__165=165;
	public const int T__166=166;
	public const int T__167=167;
	public const int T__168=168;
	public const int T__169=169;
	public const int T__170=170;
	public const int T__171=171;
	public const int T__172=172;
	public const int T__173=173;
	public const int T__174=174;
	public const int T__175=175;
	public const int T__176=176;
	public const int T__177=177;
	public const int T__178=178;
	public const int T__179=179;
	public const int T__180=180;
	public const int T__181=181;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Args=15;
	public const int Expr_Bin=16;
	public const int Expr_Bracket=17;
	public const int Expr_Call=18;
	public const int Expr_Call_With=19;
	public const int Expr_Cast=20;
	public const int Expr_Chain=21;
	public const int Expr_Cond=22;
	public const int Expr_Cond_Not_Null=23;
	public const int Expr_Dict=24;
	public const int Expr_Infix=25;
	public const int Expr_Lambda=26;
	public const int Expr_List=27;
	public const int Expr_List_Generation=28;
	public const int Expr_New_Array=29;
	public const int Expr_New_Type=30;
	public const int Expr_Not_Null=31;
	public const int Expr_Prefix=32;
	public const int Expr_Suffix=33;
	public const int Expr_Tuple=34;
	public const int Expr_Where=35;
	public const int For_Item_Down_To=36;
	public const int For_Item_Each=37;
	public const int For_Item_Map=38;
	public const int For_Item_Til=39;
	public const int For_Item_To=40;
	public const int For_Item_When=41;
	public const int Func_Args=42;
	public const int Func_Def=43;
	public const int Generic_Patameters=44;
	public const int Global_Block=45;
	public const int IDENT=46;
	public const int INDENT=47;
	public const int Ident_List=48;
	public const int Import=49;
	public const int Left_Bracket=50;
	public const int LineComment=51;
	public const int Match_Expr=52;
	public const int Match_Expr_Item=53;
	public const int Match_Tuple=54;
	public const int NEWLINE=55;
	public const int NUMBER=56;
	public const int Namespace=57;
	public const int Right_Bracket=58;
	public const int Root=59;
	public const int SP=60;
	public const int STRING=61;
	public const int Stmt_Block=62;
	public const int Stmt_Defer=63;
	public const int Stmt_Finally=64;
	public const int Stmt_For=65;
	public const int Stmt_If=66;
	public const int Stmt_Loop=67;
	public const int Stmt_Return=68;
	public const int Stmt_Switch=69;
	public const int Stmt_Try=70;
	public const int Stmt_Typedef=71;
	public const int Stmt_Unless=72;
	public const int Stmt_Until=73;
	public const int Stmt_Using=74;
	public const int Stmt_While=75;
	public const int Switch_Item=76;
	public const int Type_Array=77;
	public const int Type_Func=78;
	public const int Type_Ident=79;
	public const int Type_List=80;
	public const int Type_Ref=81;
	public const int Type_Star=82;
	public const int Type_Template=83;
	public const int White_Space=84;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


		public List<string> errors = new List<string>();
	    public override void ReportError(RecognitionException e)
	    {
	        String hdr = GetErrorHeader(e);
	        String msg = GetErrorMessage(e, tokenNames);
			errors.Add(hdr + " " + msg);
	    }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:212:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(212, 1);
		try
		{
			// SugarCpp.g:213:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:213:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(213, 4);
			// SugarCpp.g:213:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:213:4: NEWLINE
					{
					DebugLocation(213, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root587); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(213, 13);
			PushFollow(Follow._global_block_in_root590);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(213, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root592); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 213:30: -> ^( Root global_block )
			{
				DebugLocation(213, 33);
				// SugarCpp.g:213:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(213, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(213, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(214, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:216:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(216, 1);
		try
		{
			// SugarCpp.g:217:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:217:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(217, 4);
			// SugarCpp.g:217:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==92||LA3_0==131||(LA3_0>=139 && LA3_0<=140)||LA3_0==144||LA3_0==148||LA3_0==153||LA3_0==156||LA3_0==160||(LA3_0>=162 && LA3_0<=163)||LA3_0==169||(LA3_0>=172 && LA3_0<=173)||LA3_0==181))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:217:5: node ( NEWLINE )+
					{
					DebugLocation(217, 5);
					PushFollow(Follow._node_in_global_block612);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(217, 10);
					// SugarCpp.g:217:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:217:10: NEWLINE
							{
							DebugLocation(217, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block614); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 217:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(217, 24);
				// SugarCpp.g:217:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(217, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(217, 39);
				// SugarCpp.g:217:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(217, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(218, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:220:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(220, 1);
		try
		{
			// SugarCpp.g:221:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:221:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(221, 4);
				PushFollow(Follow._func_def_in_node637);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:222:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(222, 4);
				PushFollow(Follow._class_def_in_node642);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:223:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._enum_def_in_node647);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:224:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._global_alloc_in_node652);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:225:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._global_using_in_node657);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:226:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._global_typedef_in_node662);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:227:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._import_def_in_node667);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:228:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(228, 4);
				PushFollow(Follow._namespace_def_in_node672);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(229, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:231:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(231, 1);
		try
		{
			// SugarCpp.g:232:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:232:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(232, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args684); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:233:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(233, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args689); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:234:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 4);
				PushFollow(Follow._ident_in_attribute_args694);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:237:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		IToken string_literal29 = default(IToken);
		IToken char_literal30 = default(IToken);
		IToken char_literal32 = default(IToken);
		IToken char_literal34 = default(IToken);
		IToken string_literal35 = default(IToken);
		IToken char_literal36 = default(IToken);
		IToken char_literal38 = default(IToken);
		IToken char_literal40 = default(IToken);
		IToken string_literal41 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken char_literal46 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args31 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args33 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args37 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args39 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		CommonTree string_literal29_tree = default(CommonTree);
		CommonTree char_literal30_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);
		CommonTree char_literal34_tree = default(CommonTree);
		CommonTree string_literal35_tree = default(CommonTree);
		CommonTree char_literal36_tree = default(CommonTree);
		CommonTree char_literal38_tree = default(CommonTree);
		CommonTree char_literal40_tree = default(CommonTree);
		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree char_literal46_tree = default(CommonTree);
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(237, 1);
		try
		{
			// SugarCpp.g:238:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) | 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'static' ( attribute_args )* ) | 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'public' ( attribute_args )* ) | 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'virtual' ( attribute_args )* ) )
			int alt16=5;
			try { DebugEnterDecision(16, false);
			switch (input.LA(1))
			{
			case IDENT:
				{
				alt16 = 1;
				}
				break;
			case 140:
				{
				alt16 = 2;
				}
				break;
			case 162:
				{
				alt16 = 3;
				}
				break;
			case 160:
				{
				alt16 = 4;
				}
				break;
			case 173:
				{
				alt16 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(238, 4);
				PushFollow(Follow._ident_in_attribute_item705);
				ident17=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
				DebugLocation(238, 10);
				// SugarCpp.g:238:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==92))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(238, 11);
					char_literal18=(IToken)Match(input,92,Follow._92_in_attribute_item708); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal18);

					DebugLocation(238, 15);
					PushFollow(Follow._attribute_args_in_attribute_item710);
					attribute_args19=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(238, 30);
					// SugarCpp.g:238:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==99))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:238:31: ',' attribute_args
							{
							DebugLocation(238, 31);
							char_literal20=(IToken)Match(input,99,Follow._99_in_attribute_item713); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal20);

							DebugLocation(238, 35);
							PushFollow(Follow._attribute_args_in_attribute_item715);
							attribute_args21=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(238, 52);
					char_literal22=(IToken)Match(input,93,Follow._93_in_attribute_item719); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 238:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(238, 61);
					// SugarCpp.g:238:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(238, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(238, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(238, 79);
					// SugarCpp.g:238:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(238, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:239:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(239, 4);
				string_literal23=(IToken)Match(input,140,Follow._140_in_attribute_item737); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal23);

				DebugLocation(239, 12);
				// SugarCpp.g:239:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==92))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:239:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(239, 13);
					char_literal24=(IToken)Match(input,92,Follow._92_in_attribute_item740); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal24);

					DebugLocation(239, 17);
					PushFollow(Follow._attribute_args_in_attribute_item742);
					attribute_args25=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(239, 32);
					// SugarCpp.g:239:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==99))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:239:33: ',' attribute_args
							{
							DebugLocation(239, 33);
							char_literal26=(IToken)Match(input,99,Follow._99_in_attribute_item745); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal26);

							DebugLocation(239, 37);
							PushFollow(Follow._attribute_args_in_attribute_item747);
							attribute_args27=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(239, 54);
					char_literal28=(IToken)Match(input,93,Follow._93_in_attribute_item751); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 140, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 239:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(239, 63);
					// SugarCpp.g:239:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(239, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(239, 75);
					adaptor.AddChild(root_1, stream_140.NextNode());
					DebugLocation(239, 83);
					// SugarCpp.g:239:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(239, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:240:4: 'static' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(240, 4);
				string_literal29=(IToken)Match(input,162,Follow._162_in_attribute_item769); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal29);

				DebugLocation(240, 13);
				// SugarCpp.g:240:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==92))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(240, 14);
					char_literal30=(IToken)Match(input,92,Follow._92_in_attribute_item772); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal30);

					DebugLocation(240, 18);
					PushFollow(Follow._attribute_args_in_attribute_item774);
					attribute_args31=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args31.Tree);
					DebugLocation(240, 33);
					// SugarCpp.g:240:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_0 = input.LA(1);

						if ((LA10_0==99))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:34: ',' attribute_args
							{
							DebugLocation(240, 34);
							char_literal32=(IToken)Match(input,99,Follow._99_in_attribute_item777); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal32);

							DebugLocation(240, 38);
							PushFollow(Follow._attribute_args_in_attribute_item779);
							attribute_args33=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args33.Tree);

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }

					DebugLocation(240, 55);
					char_literal34=(IToken)Match(input,93,Follow._93_in_attribute_item783); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal34);


					}
					break;

				}
				} finally { DebugExitSubRule(11); }



				{
				// AST REWRITE
				// elements: attribute_args, 162
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 240:61: -> ^( Attribute 'static' ( attribute_args )* )
				{
					DebugLocation(240, 64);
					// SugarCpp.g:240:64: ^( Attribute 'static' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(240, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(240, 76);
					adaptor.AddChild(root_1, stream_162.NextNode());
					DebugLocation(240, 85);
					// SugarCpp.g:240:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(240, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:241:4: 'public' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(241, 4);
				string_literal35=(IToken)Match(input,160,Follow._160_in_attribute_item801); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_160.Add(string_literal35);

				DebugLocation(241, 13);
				// SugarCpp.g:241:13: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==92))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:241:14: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(241, 14);
					char_literal36=(IToken)Match(input,92,Follow._92_in_attribute_item804); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal36);

					DebugLocation(241, 18);
					PushFollow(Follow._attribute_args_in_attribute_item806);
					attribute_args37=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args37.Tree);
					DebugLocation(241, 33);
					// SugarCpp.g:241:33: ( ',' attribute_args )*
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==99))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch ( alt12 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:241:34: ',' attribute_args
							{
							DebugLocation(241, 34);
							char_literal38=(IToken)Match(input,99,Follow._99_in_attribute_item809); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal38);

							DebugLocation(241, 38);
							PushFollow(Follow._attribute_args_in_attribute_item811);
							attribute_args39=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args39.Tree);

							}
							break;

						default:
							goto loop12;
						}
					}

					loop12:
						;

					} finally { DebugExitSubRule(12); }

					DebugLocation(241, 55);
					char_literal40=(IToken)Match(input,93,Follow._93_in_attribute_item815); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal40);


					}
					break;

				}
				} finally { DebugExitSubRule(13); }



				{
				// AST REWRITE
				// elements: 160, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 241:61: -> ^( Attribute 'public' ( attribute_args )* )
				{
					DebugLocation(241, 64);
					// SugarCpp.g:241:64: ^( Attribute 'public' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(241, 66);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(241, 76);
					adaptor.AddChild(root_1, stream_160.NextNode());
					DebugLocation(241, 85);
					// SugarCpp.g:241:85: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(241, 85);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:242:4: 'virtual' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(242, 4);
				string_literal41=(IToken)Match(input,173,Follow._173_in_attribute_item833); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(string_literal41);

				DebugLocation(242, 14);
				// SugarCpp.g:242:14: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt15=2;
				try { DebugEnterSubRule(15);
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==92))
				{
					alt15 = 1;
				}
				} finally { DebugExitDecision(15); }
				switch (alt15)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:242:15: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(242, 15);
					char_literal42=(IToken)Match(input,92,Follow._92_in_attribute_item836); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal42);

					DebugLocation(242, 19);
					PushFollow(Follow._attribute_args_in_attribute_item838);
					attribute_args43=attribute_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_args.Add(attribute_args43.Tree);
					DebugLocation(242, 34);
					// SugarCpp.g:242:34: ( ',' attribute_args )*
					try { DebugEnterSubRule(14);
					while (true)
					{
						int alt14=2;
						try { DebugEnterDecision(14, false);
						int LA14_0 = input.LA(1);

						if ((LA14_0==99))
						{
							alt14 = 1;
						}


						} finally { DebugExitDecision(14); }
						switch ( alt14 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:242:35: ',' attribute_args
							{
							DebugLocation(242, 35);
							char_literal44=(IToken)Match(input,99,Follow._99_in_attribute_item841); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal44);

							DebugLocation(242, 39);
							PushFollow(Follow._attribute_args_in_attribute_item843);
							attribute_args45=attribute_args();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_args.Add(attribute_args45.Tree);

							}
							break;

						default:
							goto loop14;
						}
					}

					loop14:
						;

					} finally { DebugExitSubRule(14); }

					DebugLocation(242, 56);
					char_literal46=(IToken)Match(input,93,Follow._93_in_attribute_item847); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal46);


					}
					break;

				}
				} finally { DebugExitSubRule(15); }



				{
				// AST REWRITE
				// elements: attribute_args, 173
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 242:62: -> ^( Attribute 'virtual' ( attribute_args )* )
				{
					DebugLocation(242, 65);
					// SugarCpp.g:242:65: ^( Attribute 'virtual' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 67);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(242, 77);
					adaptor.AddChild(root_1, stream_173.NextNode());
					DebugLocation(242, 87);
					// SugarCpp.g:242:87: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(242, 87);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:245:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal47 = default(IToken);
		IToken char_literal49 = default(IToken);
		IToken char_literal51 = default(IToken);
		IToken NEWLINE52 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item48 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal47_tree = default(CommonTree);
		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree NEWLINE52_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(245, 1);
		try
		{
			// SugarCpp.g:246:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:246:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(246, 4);
			// SugarCpp.g:246:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt19=0;
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==131))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch (alt19)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:246:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(246, 5);
					char_literal47=(IToken)Match(input,131,Follow._131_in_attribute872); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_131.Add(char_literal47);

					DebugLocation(246, 9);
					PushFollow(Follow._attribute_item_in_attribute874);
					attribute_item48=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item48.Tree);
					DebugLocation(246, 24);
					// SugarCpp.g:246:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(17);
					while (true)
					{
						int alt17=2;
						try { DebugEnterDecision(17, false);
						int LA17_0 = input.LA(1);

						if ((LA17_0==99))
						{
							alt17 = 1;
						}


						} finally { DebugExitDecision(17); }
						switch ( alt17 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:246:25: ',' attribute_item
							{
							DebugLocation(246, 25);
							char_literal49=(IToken)Match(input,99,Follow._99_in_attribute877); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal49);

							DebugLocation(246, 29);
							PushFollow(Follow._attribute_item_in_attribute879);
							attribute_item50=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item50.Tree);

							}
							break;

						default:
							goto loop17;
						}
					}

					loop17:
						;

					} finally { DebugExitSubRule(17); }

					DebugLocation(246, 46);
					char_literal51=(IToken)Match(input,132,Follow._132_in_attribute883); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal51);

					DebugLocation(246, 50);
					// SugarCpp.g:246:50: ( NEWLINE )+
					int cnt18=0;
					try { DebugEnterSubRule(18);
					while (true)
					{
						int alt18=2;
						try { DebugEnterDecision(18, false);
						int LA18_0 = input.LA(1);

						if ((LA18_0==NEWLINE))
						{
							alt18 = 1;
						}


						} finally { DebugExitDecision(18); }
						switch (alt18)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:246:50: NEWLINE
							{
							DebugLocation(246, 50);
							NEWLINE52=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute885); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE52);


							}
							break;

						default:
							if (cnt18 >= 1)
								goto loop18;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee18 = new EarlyExitException( 18, input );
							DebugRecognitionException(eee18);
							throw eee18;
						}
						cnt18++;
					}
					loop18:
						;

					} finally { DebugExitSubRule(18); }


					}
					break;

				default:
					if (cnt19 >= 1)
						goto loop19;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee19 = new EarlyExitException( 19, input );
					DebugRecognitionException(eee19);
					throw eee19;
				}
				cnt19++;
			}
			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 246:61: -> ( attribute_item )+
			{
				DebugLocation(246, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(246, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(247, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:249:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal55 = default(IToken);
		IToken char_literal57 = default(IToken);
		IToken string_literal58 = default(IToken);
		IToken string_literal61 = default(IToken);
		IToken char_literal63 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list54 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name56 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list60 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr62 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr64 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal55_tree = default(CommonTree);
		CommonTree char_literal57_tree = default(CommonTree);
		CommonTree string_literal58_tree = default(CommonTree);
		CommonTree string_literal61_tree = default(CommonTree);
		CommonTree char_literal63_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(249, 1);
		try
		{
			// SugarCpp.g:250:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:250:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			{
			DebugLocation(250, 4);
			// SugarCpp.g:250:4: ( attribute )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==131))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:4: attribute
				{
				DebugLocation(250, 4);
				PushFollow(Follow._attribute_in_global_alloc904);
				attribute53=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute53.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(250, 15);
			PushFollow(Follow._ident_list_in_global_alloc907);
			ident_list54=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list54.Tree);
			DebugLocation(250, 26);
			// SugarCpp.g:250:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) ) )
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_0 = input.LA(1);

			if ((LA24_0==110))
			{
				alt24 = 1;
			}
			else if ((LA24_0==112))
			{
				alt24 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 24, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:250:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(250, 28);
				char_literal55=(IToken)Match(input,110,Follow._110_in_global_alloc911); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal55);

				DebugLocation(250, 32);
				PushFollow(Follow._type_name_in_global_alloc913);
				type_name56=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name56.Tree);
				DebugLocation(250, 42);
				// SugarCpp.g:250:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) ) )
				int alt22=3;
				try { DebugEnterSubRule(22);
				try { DebugEnterDecision(22, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt22 = 1;
					}
					break;
				case 92:
					{
					alt22 = 2;
					}
					break;
				case NEWLINE:
					{
					alt22 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 22, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:250:44: ( '=' | ':=' ) expr
					{
					DebugLocation(250, 44);
					// SugarCpp.g:250:44: ( '=' | ':=' )
					int alt21=2;
					try { DebugEnterSubRule(21);
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==120))
					{
						alt21 = 1;
					}
					else if ((LA21_0==112))
					{
						alt21 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:250:45: '='
						{
						DebugLocation(250, 45);
						char_literal57=(IToken)Match(input,120,Follow._120_in_global_alloc918); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal57);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:250:51: ':='
						{
						DebugLocation(250, 51);
						string_literal58=(IToken)Match(input,112,Follow._112_in_global_alloc922); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal58);


						}
						break;

					}
					} finally { DebugExitSubRule(21); }

					DebugLocation(250, 57);
					PushFollow(Follow._expr_in_global_alloc925);
					expr59=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr59.Tree);


					{
					// AST REWRITE
					// elements: attribute, ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 250:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(250, 65);
						// SugarCpp.g:250:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(250, 84);
						// SugarCpp.g:250:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(250, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(250, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(250, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(250, 116);
						// SugarCpp.g:250:116: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(250, 118);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(250, 128);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:251:43: bracket_expr_list
					{
					DebugLocation(251, 43);
					PushFollow(Follow._bracket_expr_list_in_global_alloc988);
					bracket_expr_list60=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list60.Tree);


					{
					// AST REWRITE
					// elements: type_name, ident_list, attribute, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 251:61: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
					{
						DebugLocation(251, 64);
						// SugarCpp.g:251:64: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(251, 66);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(251, 85);
						// SugarCpp.g:251:85: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(251, 85);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(251, 96);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(251, 106);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(251, 117);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:252:17: 
					{

					{
					// AST REWRITE
					// elements: type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 252:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(252, 20);
						// SugarCpp.g:252:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(252, 39);
						// SugarCpp.g:252:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(252, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(252, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(252, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(252, 71);
						// SugarCpp.g:252:71: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(252, 73);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(22); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:254:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(254, 10);
				string_literal61=(IToken)Match(input,112,Follow._112_in_global_alloc1064); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal61);

				DebugLocation(254, 15);
				// SugarCpp.g:254:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:254:16: expr ( ',' expr )*
				{
				DebugLocation(254, 16);
				PushFollow(Follow._expr_in_global_alloc1067);
				expr62=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr62.Tree);
				DebugLocation(254, 21);
				// SugarCpp.g:254:21: ( ',' expr )*
				try { DebugEnterSubRule(23);
				while (true)
				{
					int alt23=2;
					try { DebugEnterDecision(23, false);
					int LA23_0 = input.LA(1);

					if ((LA23_0==99))
					{
						alt23 = 1;
					}


					} finally { DebugExitDecision(23); }
					switch ( alt23 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:254:22: ',' expr
						{
						DebugLocation(254, 22);
						char_literal63=(IToken)Match(input,99,Follow._99_in_global_alloc1070); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal63);

						DebugLocation(254, 26);
						PushFollow(Follow._expr_in_global_alloc1072);
						expr64=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr64.Tree);

						}
						break;

					default:
						goto loop23;
					}
				}

				loop23:
					;

				} finally { DebugExitSubRule(23); }


				}



				{
				// AST REWRITE
				// elements: attribute, expr, ident_list, 112
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 254:34: -> ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
				{
					DebugLocation(254, 37);
					// SugarCpp.g:254:37: ^( ':=' ( attribute )? ident_list ^( Expr_Args ( expr )+ ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(254, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_112.NextNode(), root_1);

					DebugLocation(254, 44);
					// SugarCpp.g:254:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(254, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(254, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(254, 66);
					// SugarCpp.g:254:66: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(254, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(254, 78);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(254, 78);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:258:1: global_using : ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item67 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( ( attribute )? 'using' ( stmt_using_item )* -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:4: ( attribute )? 'using' ( stmt_using_item )*
			{
			DebugLocation(259, 4);
			// SugarCpp.g:259:4: ( attribute )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==131))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:4: attribute
				{
				DebugLocation(259, 4);
				PushFollow(Follow._attribute_in_global_using1113);
				attribute65=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute65.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(259, 15);
			string_literal66=(IToken)Match(input,172,Follow._172_in_global_using1116); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal66);

			DebugLocation(259, 23);
			// SugarCpp.g:259:23: ( stmt_using_item )*
			try { DebugEnterSubRule(26);
			while (true)
			{
				int alt26=2;
				try { DebugEnterDecision(26, false);
				int LA26_0 = input.LA(1);

				if ((LA26_0==IDENT||LA26_0==156))
				{
					alt26 = 1;
				}


				} finally { DebugExitDecision(26); }
				switch ( alt26 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:259:23: stmt_using_item
					{
					DebugLocation(259, 23);
					PushFollow(Follow._stmt_using_item_in_global_using1118);
					stmt_using_item67=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item67.Tree);

					}
					break;

				default:
					goto loop26;
				}
			}

			loop26:
				;

			} finally { DebugExitSubRule(26); }



			{
			// AST REWRITE
			// elements: stmt_using_item, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:40: -> ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
			{
				DebugLocation(259, 43);
				// SugarCpp.g:259:43: ^( Stmt_Using ( attribute )? ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(259, 56);
				// SugarCpp.g:259:56: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(259, 56);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(259, 67);
				// SugarCpp.g:259:67: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(259, 67);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:262:1: global_typedef : ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal69 = default(IToken);
		IToken char_literal71 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name72 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal69_tree = default(CommonTree);
		CommonTree char_literal71_tree = default(CommonTree);
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(262, 1);
		try
		{
			// SugarCpp.g:263:2: ( ( attribute )? 'type' ident '=' type_name -> ^( Stmt_Typedef ( attribute )? type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:263:4: ( attribute )? 'type' ident '=' type_name
			{
			DebugLocation(263, 4);
			// SugarCpp.g:263:4: ( attribute )?
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==131))
			{
				alt27 = 1;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:4: attribute
				{
				DebugLocation(263, 4);
				PushFollow(Follow._attribute_in_global_typedef1142);
				attribute68=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute68.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }

			DebugLocation(263, 15);
			string_literal69=(IToken)Match(input,169,Follow._169_in_global_typedef1145); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(string_literal69);

			DebugLocation(263, 22);
			PushFollow(Follow._ident_in_global_typedef1147);
			ident70=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident70.Tree);
			DebugLocation(263, 28);
			char_literal71=(IToken)Match(input,120,Follow._120_in_global_typedef1149); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal71);

			DebugLocation(263, 32);
			PushFollow(Follow._type_name_in_global_typedef1151);
			type_name72=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name72.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 263:42: -> ^( Stmt_Typedef ( attribute )? type_name ident )
			{
				DebugLocation(263, 45);
				// SugarCpp.g:263:45: ^( Stmt_Typedef ( attribute )? type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(263, 47);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(263, 60);
				// SugarCpp.g:263:60: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(263, 60);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(263, 71);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(263, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(264, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:266:1: import_def : ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken STRING75 = default(IToken);
		IToken NEWLINE76 = default(IToken);
		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken STRING79 = default(IToken);
		IToken NEWLINE80 = default(IToken);
		IToken DEDENT81 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree STRING75_tree = default(CommonTree);
		CommonTree NEWLINE76_tree = default(CommonTree);
		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree STRING79_tree = default(CommonTree);
		CommonTree NEWLINE80_tree = default(CommonTree);
		CommonTree DEDENT81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(266, 1);
		try
		{
			// SugarCpp.g:267:2: ( ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( attribute )? ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:267:4: ( attribute )? 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(267, 4);
			// SugarCpp.g:267:4: ( attribute )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==131))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:4: attribute
				{
				DebugLocation(267, 4);
				PushFollow(Follow._attribute_in_import_def1175);
				attribute73=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(28); }

			DebugLocation(267, 15);
			string_literal74=(IToken)Match(input,148,Follow._148_in_import_def1178); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_148.Add(string_literal74);

			DebugLocation(267, 24);
			// SugarCpp.g:267:24: ( STRING )?
			int alt29=2;
			try { DebugEnterSubRule(29);
			try { DebugEnterDecision(29, false);
			int LA29_0 = input.LA(1);

			if ((LA29_0==STRING))
			{
				alt29 = 1;
			}
			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:24: STRING
				{
				DebugLocation(267, 24);
				STRING75=(IToken)Match(input,STRING,Follow._STRING_in_import_def1180); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING75);


				}
				break;

			}
			} finally { DebugExitSubRule(29); }

			DebugLocation(267, 32);
			// SugarCpp.g:267:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt34=2;
			try { DebugEnterSubRule(34);
			try { DebugEnterDecision(34, false);
			try
			{
				alt34 = dfa34.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(34); }
			switch (alt34)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:267:33: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(267, 33);
				// SugarCpp.g:267:33: ( NEWLINE )+
				int cnt30=0;
				try { DebugEnterSubRule(30);
				while (true)
				{
					int alt30=2;
					try { DebugEnterDecision(30, false);
					int LA30_0 = input.LA(1);

					if ((LA30_0==NEWLINE))
					{
						alt30 = 1;
					}


					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:33: NEWLINE
						{
						DebugLocation(267, 33);
						NEWLINE76=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1184); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE76);


						}
						break;

					default:
						if (cnt30 >= 1)
							goto loop30;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee30 = new EarlyExitException( 30, input );
						DebugRecognitionException(eee30);
						throw eee30;
					}
					cnt30++;
				}
				loop30:
					;

				} finally { DebugExitSubRule(30); }

				DebugLocation(267, 42);
				INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def1187); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT77);

				DebugLocation(267, 49);
				// SugarCpp.g:267:49: ( NEWLINE )*
				try { DebugEnterSubRule(31);
				while (true)
				{
					int alt31=2;
					try { DebugEnterDecision(31, false);
					int LA31_0 = input.LA(1);

					if ((LA31_0==NEWLINE))
					{
						alt31 = 1;
					}


					} finally { DebugExitDecision(31); }
					switch ( alt31 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:49: NEWLINE
						{
						DebugLocation(267, 49);
						NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1189); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE78);


						}
						break;

					default:
						goto loop31;
					}
				}

				loop31:
					;

				} finally { DebugExitSubRule(31); }

				DebugLocation(267, 59);
				// SugarCpp.g:267:59: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(33);
				while (true)
				{
					int alt33=2;
					try { DebugEnterDecision(33, false);
					int LA33_0 = input.LA(1);

					if ((LA33_0==STRING))
					{
						alt33 = 1;
					}


					} finally { DebugExitDecision(33); }
					switch ( alt33 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:267:60: STRING ( NEWLINE )+
						{
						DebugLocation(267, 60);
						STRING79=(IToken)Match(input,STRING,Follow._STRING_in_import_def1194); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING79);

						DebugLocation(267, 67);
						// SugarCpp.g:267:67: ( NEWLINE )+
						int cnt32=0;
						try { DebugEnterSubRule(32);
						while (true)
						{
							int alt32=2;
							try { DebugEnterDecision(32, false);
							int LA32_0 = input.LA(1);

							if ((LA32_0==NEWLINE))
							{
								alt32 = 1;
							}


							} finally { DebugExitDecision(32); }
							switch (alt32)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:267:67: NEWLINE
								{
								DebugLocation(267, 67);
								NEWLINE80=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def1196); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE80);


								}
								break;

							default:
								if (cnt32 >= 1)
									goto loop32;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee32 = new EarlyExitException( 32, input );
								DebugRecognitionException(eee32);
								throw eee32;
							}
							cnt32++;
						}
						loop32:
							;

						} finally { DebugExitSubRule(32); }


						}
						break;

					default:
						goto loop33;
					}
				}

				loop33:
					;

				} finally { DebugExitSubRule(33); }

				DebugLocation(267, 78);
				DEDENT81=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def1201); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT81);


				}
				break;

			}
			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: STRING, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 267:87: -> ^( Import ( attribute )? ( STRING )* )
			{
				DebugLocation(267, 90);
				// SugarCpp.g:267:90: ^( Import ( attribute )? ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(267, 92);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(267, 99);
				// SugarCpp.g:267:99: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(267, 99);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(267, 110);
				// SugarCpp.g:267:110: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(267, 110);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:270:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal83 = default(IToken);
		IToken char_literal85 = default(IToken);
		IToken char_literal87 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident86 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident88 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal83_tree = default(CommonTree);
		CommonTree char_literal85_tree = default(CommonTree);
		CommonTree char_literal87_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(270, 1);
		try
		{
			// SugarCpp.g:271:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(271, 4);
			// SugarCpp.g:271:4: ( attribute )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==131))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:4: attribute
				{
				DebugLocation(271, 4);
				PushFollow(Follow._attribute_in_enum_def1226);
				attribute82=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute82.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(271, 15);
			string_literal83=(IToken)Match(input,144,Follow._144_in_enum_def1229); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_144.Add(string_literal83);

			DebugLocation(271, 22);
			PushFollow(Follow._ident_in_enum_def1231);
			ident84=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident84.Tree);
			DebugLocation(271, 28);
			char_literal85=(IToken)Match(input,120,Follow._120_in_enum_def1233); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal85);

			DebugLocation(271, 32);
			// SugarCpp.g:271:32: ( ident ( '|' ident )* )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==IDENT))
			{
				alt37 = 1;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:33: ident ( '|' ident )*
				{
				DebugLocation(271, 33);
				PushFollow(Follow._ident_in_enum_def1236);
				ident86=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident86.Tree);
				DebugLocation(271, 39);
				// SugarCpp.g:271:39: ( '|' ident )*
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==177))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch ( alt36 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:271:40: '|' ident
						{
						DebugLocation(271, 40);
						char_literal87=(IToken)Match(input,177,Follow._177_in_enum_def1239); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_177.Add(char_literal87);

						DebugLocation(271, 44);
						PushFollow(Follow._ident_in_enum_def1241);
						ident88=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident88.Tree);

						}
						break;

					default:
						goto loop36;
					}
				}

				loop36:
					;

				} finally { DebugExitSubRule(36); }


				}
				break;

			}
			} finally { DebugExitSubRule(37); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 271:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(271, 57);
				// SugarCpp.g:271:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(271, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(271, 64);
				// SugarCpp.g:271:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(271, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(271, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(271, 81);
				// SugarCpp.g:271:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(271, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(271, 94);
				// SugarCpp.g:271:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(271, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(272, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:274:1: namespace_def : ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal90 = default(IToken);
		IToken NEWLINE92 = default(IToken);
		IToken INDENT93 = default(IToken);
		IToken NEWLINE94 = default(IToken);
		IToken DEDENT96 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal90_tree = default(CommonTree);
		CommonTree NEWLINE92_tree = default(CommonTree);
		CommonTree INDENT93_tree = default(CommonTree);
		CommonTree NEWLINE94_tree = default(CommonTree);
		CommonTree DEDENT96_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(274, 1);
		try
		{
			// SugarCpp.g:275:2: ( ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Namespace ( attribute )? ident ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:275:4: ( attribute )? 'namespace' ident ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(275, 4);
			// SugarCpp.g:275:4: ( attribute )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==131))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:4: attribute
				{
				DebugLocation(275, 4);
				PushFollow(Follow._attribute_in_namespace_def1274);
				attribute89=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute89.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(275, 15);
			string_literal90=(IToken)Match(input,156,Follow._156_in_namespace_def1277); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_156.Add(string_literal90);

			DebugLocation(275, 27);
			PushFollow(Follow._ident_in_namespace_def1279);
			ident91=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident91.Tree);
			DebugLocation(275, 33);
			// SugarCpp.g:275:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			try
			{
				alt41 = dfa41.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:275:34: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(275, 34);
				// SugarCpp.g:275:34: ( NEWLINE )+
				int cnt39=0;
				try { DebugEnterSubRule(39);
				while (true)
				{
					int alt39=2;
					try { DebugEnterDecision(39, false);
					int LA39_0 = input.LA(1);

					if ((LA39_0==NEWLINE))
					{
						alt39 = 1;
					}


					} finally { DebugExitDecision(39); }
					switch (alt39)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:275:34: NEWLINE
						{
						DebugLocation(275, 34);
						NEWLINE92=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1282); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE92);


						}
						break;

					default:
						if (cnt39 >= 1)
							goto loop39;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee39 = new EarlyExitException( 39, input );
						DebugRecognitionException(eee39);
						throw eee39;
					}
					cnt39++;
				}
				loop39:
					;

				} finally { DebugExitSubRule(39); }

				DebugLocation(275, 43);
				INDENT93=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1285); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT93);

				DebugLocation(275, 50);
				// SugarCpp.g:275:50: ( NEWLINE )*
				try { DebugEnterSubRule(40);
				while (true)
				{
					int alt40=2;
					try { DebugEnterDecision(40, false);
					int LA40_0 = input.LA(1);

					if ((LA40_0==NEWLINE))
					{
						alt40 = 1;
					}


					} finally { DebugExitDecision(40); }
					switch ( alt40 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:275:50: NEWLINE
						{
						DebugLocation(275, 50);
						NEWLINE94=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1287); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE94);


						}
						break;

					default:
						goto loop40;
					}
				}

				loop40:
					;

				} finally { DebugExitSubRule(40); }

				DebugLocation(275, 59);
				PushFollow(Follow._global_block_in_namespace_def1290);
				global_block95=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block95.Tree);
				DebugLocation(275, 72);
				DEDENT96=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1292); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT96);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }



			{
			// AST REWRITE
			// elements: ident, global_block, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 275:81: -> ^( Namespace ( attribute )? ident ( global_block )? )
			{
				DebugLocation(275, 84);
				// SugarCpp.g:275:84: ^( Namespace ( attribute )? ident ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(275, 86);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(275, 96);
				// SugarCpp.g:275:96: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(275, 96);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(275, 107);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(275, 113);
				// SugarCpp.g:275:113: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(275, 113);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(276, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_args();
	partial void LeaveRule_class_args();

	// $ANTLR start "class_args"
	// SugarCpp.g:278:1: class_args : '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) ) ;
	[GrammarRule("class_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_args()
	{
		EnterRule_class_args();
		EnterRule("class_args", 13);
		TraceIn("class_args", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal97 = default(IToken);
		IToken char_literal99 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args98 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal97_tree = default(CommonTree);
		CommonTree char_literal99_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "class_args");
		DebugLocation(278, 1);
		try
		{
			// SugarCpp.g:279:2: ( '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:279:4: '(' ( func_args ')' -> func_args | ')' -> ^( Func_Args ) )
			{
			DebugLocation(279, 4);
			char_literal97=(IToken)Match(input,92,Follow._92_in_class_args1319); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal97);

			DebugLocation(279, 8);
			// SugarCpp.g:279:8: ( func_args ')' -> func_args | ')' -> ^( Func_Args ) )
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==IDENT||LA42_0==112))
			{
				alt42 = 1;
			}
			else if ((LA42_0==93))
			{
				alt42 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:279:10: func_args ')'
				{
				DebugLocation(279, 10);
				PushFollow(Follow._func_args_in_class_args1323);
				func_args98=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args98.Tree);
				DebugLocation(279, 20);
				char_literal99=(IToken)Match(input,93,Follow._93_in_class_args1325); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal99);



				{
				// AST REWRITE
				// elements: func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 279:24: -> func_args
				{
					DebugLocation(279, 27);
					adaptor.AddChild(root_0, stream_func_args.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:280:7: ')'
				{
				DebugLocation(280, 7);
				char_literal100=(IToken)Match(input,93,Follow._93_in_class_args1337); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal100);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 280:11: -> ^( Func_Args )
				{
					DebugLocation(280, 14);
					// SugarCpp.g:280:14: ^( Func_Args )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(280, 16);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_args", 13);
			LeaveRule("class_args", 13);
			LeaveRule_class_args();
		}
		DebugLocation(282, 1);
		} finally { DebugExitRule(GrammarFileName, "class_args"); }
		return retval;

	}
	// $ANTLR end "class_args"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:284:1: class_def : ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 14);
		TraceIn("class_def", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal102 = default(IToken);
		IToken string_literal103 = default(IToken);
		IToken char_literal107 = default(IToken);
		IToken char_literal109 = default(IToken);
		IToken NEWLINE111 = default(IToken);
		IToken INDENT112 = default(IToken);
		IToken NEWLINE113 = default(IToken);
		IToken DEDENT115 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute101 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter105 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_args106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block114 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal102_tree = default(CommonTree);
		CommonTree string_literal103_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		CommonTree char_literal109_tree = default(CommonTree);
		CommonTree NEWLINE111_tree = default(CommonTree);
		CommonTree INDENT112_tree = default(CommonTree);
		CommonTree NEWLINE113_tree = default(CommonTree);
		CommonTree DEDENT115_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_args=new RewriteRuleSubtreeStream(adaptor,"rule class_args");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(284, 1);
		try
		{
			// SugarCpp.g:285:2: ( ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:285:5: ( attribute )? ( 'public' )? 'class' ident ( generic_parameter )? ( class_args )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(285, 5);
			// SugarCpp.g:285:5: ( attribute )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==131))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:5: attribute
				{
				DebugLocation(285, 5);
				PushFollow(Follow._attribute_in_class_def1361);
				attribute101=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute101.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(43); }

			DebugLocation(285, 16);
			// SugarCpp.g:285:16: ( 'public' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==160))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:16: 'public'
				{
				DebugLocation(285, 16);
				string_literal102=(IToken)Match(input,160,Follow._160_in_class_def1364); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_160.Add(string_literal102);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(285, 26);
			string_literal103=(IToken)Match(input,139,Follow._139_in_class_def1367); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_139.Add(string_literal103);

			DebugLocation(285, 34);
			PushFollow(Follow._ident_in_class_def1369);
			ident104=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident104.Tree);
			DebugLocation(285, 40);
			// SugarCpp.g:285:40: ( generic_parameter )?
			int alt45=2;
			try { DebugEnterSubRule(45);
			try { DebugEnterDecision(45, false);
			int LA45_0 = input.LA(1);

			if ((LA45_0==114))
			{
				alt45 = 1;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:41: generic_parameter
				{
				DebugLocation(285, 41);
				PushFollow(Follow._generic_parameter_in_class_def1372);
				generic_parameter105=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter105.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(45); }

			DebugLocation(285, 61);
			// SugarCpp.g:285:61: ( class_args )?
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_0 = input.LA(1);

			if ((LA46_0==92))
			{
				alt46 = 1;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:61: class_args
				{
				DebugLocation(285, 61);
				PushFollow(Follow._class_args_in_class_def1376);
				class_args106=class_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_class_args.Add(class_args106.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(285, 73);
			// SugarCpp.g:285:73: ( ':' ident ( ',' ident )* )?
			int alt48=2;
			try { DebugEnterSubRule(48);
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==110))
			{
				alt48 = 1;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:74: ':' ident ( ',' ident )*
				{
				DebugLocation(285, 74);
				char_literal107=(IToken)Match(input,110,Follow._110_in_class_def1380); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal107);

				DebugLocation(285, 78);
				PushFollow(Follow._ident_in_class_def1382);
				ident108=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident108.Tree);
				DebugLocation(285, 84);
				// SugarCpp.g:285:84: ( ',' ident )*
				try { DebugEnterSubRule(47);
				while (true)
				{
					int alt47=2;
					try { DebugEnterDecision(47, false);
					int LA47_0 = input.LA(1);

					if ((LA47_0==99))
					{
						alt47 = 1;
					}


					} finally { DebugExitDecision(47); }
					switch ( alt47 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:285:85: ',' ident
						{
						DebugLocation(285, 85);
						char_literal109=(IToken)Match(input,99,Follow._99_in_class_def1385); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal109);

						DebugLocation(285, 89);
						PushFollow(Follow._ident_in_class_def1387);
						ident110=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident110.Tree);

						}
						break;

					default:
						goto loop47;
					}
				}

				loop47:
					;

				} finally { DebugExitSubRule(47); }


				}
				break;

			}
			} finally { DebugExitSubRule(48); }

			DebugLocation(285, 99);
			// SugarCpp.g:285:99: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			try
			{
				alt51 = dfa51.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:285:100: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(285, 100);
				// SugarCpp.g:285:100: ( NEWLINE )+
				int cnt49=0;
				try { DebugEnterSubRule(49);
				while (true)
				{
					int alt49=2;
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==NEWLINE))
					{
						alt49 = 1;
					}


					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:285:100: NEWLINE
						{
						DebugLocation(285, 100);
						NEWLINE111=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1394); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE111);


						}
						break;

					default:
						if (cnt49 >= 1)
							goto loop49;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee49 = new EarlyExitException( 49, input );
						DebugRecognitionException(eee49);
						throw eee49;
					}
					cnt49++;
				}
				loop49:
					;

				} finally { DebugExitSubRule(49); }

				DebugLocation(285, 109);
				INDENT112=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1397); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT112);

				DebugLocation(285, 116);
				// SugarCpp.g:285:116: ( NEWLINE )*
				try { DebugEnterSubRule(50);
				while (true)
				{
					int alt50=2;
					try { DebugEnterDecision(50, false);
					int LA50_0 = input.LA(1);

					if ((LA50_0==NEWLINE))
					{
						alt50 = 1;
					}


					} finally { DebugExitDecision(50); }
					switch ( alt50 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:285:116: NEWLINE
						{
						DebugLocation(285, 116);
						NEWLINE113=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1399); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE113);


						}
						break;

					default:
						goto loop50;
					}
				}

				loop50:
					;

				} finally { DebugExitSubRule(50); }

				DebugLocation(285, 125);
				PushFollow(Follow._global_block_in_class_def1402);
				global_block114=global_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_global_block.Add(global_block114.Tree);
				DebugLocation(285, 138);
				DEDENT115=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1404); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT115);


				}
				break;

			}
			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: class_args, ident, attribute, global_block, 160, generic_parameter, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 285:147: -> ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(285, 150);
				// SugarCpp.g:285:150: ^( Class ( 'public' )? ( attribute )? ident ( generic_parameter )? ( class_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(285, 152);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(285, 158);
				// SugarCpp.g:285:158: ( 'public' )?
				if (stream_160.HasNext)
				{
					DebugLocation(285, 158);
					adaptor.AddChild(root_1, stream_160.NextNode());

				}
				stream_160.Reset();
				DebugLocation(285, 168);
				// SugarCpp.g:285:168: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(285, 168);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(285, 179);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(285, 185);
				// SugarCpp.g:285:185: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(285, 185);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(285, 204);
				// SugarCpp.g:285:204: ( class_args )?
				if (stream_class_args.HasNext)
				{
					DebugLocation(285, 204);
					adaptor.AddChild(root_1, stream_class_args.NextTree());

				}
				stream_class_args.Reset();
				DebugLocation(285, 216);
				// SugarCpp.g:285:216: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(285, 217);
					// SugarCpp.g:285:217: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(285, 219);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(285, 230);
					// SugarCpp.g:285:230: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(285, 230);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(285, 240);
				// SugarCpp.g:285:240: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(285, 240);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 14);
			LeaveRule("class_def", 14);
			LeaveRule_class_def();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_list();
	partial void LeaveRule_type_list();

	// $ANTLR start "type_list"
	// SugarCpp.g:288:1: type_list : type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) ;
	[GrammarRule("type_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_list()
	{
		EnterRule_type_list();
		EnterRule("type_list", 15);
		TraceIn("type_list", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal117 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name118 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal117_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "type_list");
		DebugLocation(288, 1);
		try
		{
			// SugarCpp.g:289:2: ( type_name ( ',' type_name )* -> ^( Type_List ( type_name )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:289:4: type_name ( ',' type_name )*
			{
			DebugLocation(289, 4);
			PushFollow(Follow._type_name_in_type_list1450);
			type_name116=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name116.Tree);
			DebugLocation(289, 14);
			// SugarCpp.g:289:14: ( ',' type_name )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=2;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==99))
				{
					alt52 = 1;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:289:15: ',' type_name
					{
					DebugLocation(289, 15);
					char_literal117=(IToken)Match(input,99,Follow._99_in_type_list1453); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal117);

					DebugLocation(289, 19);
					PushFollow(Follow._type_name_in_type_list1455);
					type_name118=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name118.Tree);

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 289:31: -> ^( Type_List ( type_name )* )
			{
				DebugLocation(289, 34);
				// SugarCpp.g:289:34: ^( Type_List ( type_name )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(289, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_1);

				DebugLocation(289, 46);
				// SugarCpp.g:289:46: ( type_name )*
				while ( stream_type_name.HasNext )
				{
					DebugLocation(289, 46);
					adaptor.AddChild(root_1, stream_type_name.NextTree());

				}
				stream_type_name.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_list", 15);
			LeaveRule("type_list", 15);
			LeaveRule_type_list();
		}
		DebugLocation(290, 1);
		} finally { DebugExitRule(GrammarFileName, "type_list"); }
		return retval;

	}
	// $ANTLR end "type_list"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:292:1: type_name : ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) );
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 16);
		TraceIn("type_name", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal120 = default(IToken);
		IToken char_literal122 = default(IToken);
		IToken char_literal123 = default(IToken);
		IToken char_literal124 = default(IToken);
		IToken char_literal126 = default(IToken);
		IToken string_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken char_literal130 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_single119 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name121 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_list125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name128 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal120_tree = default(CommonTree);
		CommonTree char_literal122_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal126_tree = default(CommonTree);
		CommonTree string_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_list=new RewriteRuleSubtreeStream(adaptor,"rule type_list");
		RewriteRuleSubtreeStream stream_type_single=new RewriteRuleSubtreeStream(adaptor,"rule type_single");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(292, 1);
		try
		{
			// SugarCpp.g:293:2: ( type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single ) | '(' ( type_list )? ')' '->' ( type_name | '(' ')' ) -> ^( Type_Func ( type_list )? ( type_name )? ) )
			int alt57=2;
			try { DebugEnterDecision(57, false);
			int LA57_0 = input.LA(1);

			if ((LA57_0==IDENT||LA57_0==140||LA57_0==153||(LA57_0>=162 && LA57_0<=163)))
			{
				alt57 = 1;
			}
			else if ((LA57_0==92))
			{
				alt57 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:293:4: type_single ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				{
				DebugLocation(293, 4);
				PushFollow(Follow._type_single_in_type_name1477);
				type_single119=type_single();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_single.Add(type_single119.Tree);
				DebugLocation(293, 16);
				// SugarCpp.g:293:16: ( '->' ( type_name | '(' ')' ) -> ^( Type_Func ^( Type_List type_single ) ( type_name )? ) | -> type_single )
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==104))
				{
					alt54 = 1;
				}
				else if ((LA54_0==DEDENT||(LA54_0>=IDENT && LA54_0<=INDENT)||LA54_0==NEWLINE||(LA54_0>=92 && LA54_0<=93)||LA54_0==99||(LA54_0>=112 && LA54_0<=113)||LA54_0==120||(LA54_0>=123 && LA54_0<=124)||LA54_0==132||LA54_0==137||LA54_0==142||(LA54_0>=146 && LA54_0<=147)||LA54_0==149||(LA54_0>=165 && LA54_0<=167)||(LA54_0>=170 && LA54_0<=171)||(LA54_0>=175 && LA54_0<=176)||LA54_0==181))
				{
					alt54 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 54, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:293:18: '->' ( type_name | '(' ')' )
					{
					DebugLocation(293, 18);
					string_literal120=(IToken)Match(input,104,Follow._104_in_type_name1481); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal120);

					DebugLocation(293, 23);
					// SugarCpp.g:293:23: ( type_name | '(' ')' )
					int alt53=2;
					try { DebugEnterSubRule(53);
					try { DebugEnterDecision(53, false);
					int LA53_0 = input.LA(1);

					if ((LA53_0==IDENT||LA53_0==140||LA53_0==153||(LA53_0>=162 && LA53_0<=163)))
					{
						alt53 = 1;
					}
					else if ((LA53_0==92))
					{
						int LA53_2 = input.LA(2);

						if ((LA53_2==93))
						{
							int LA53_3 = input.LA(3);

							if ((LA53_3==104))
							{
								alt53 = 1;
							}
							else if ((LA53_3==DEDENT||(LA53_3>=IDENT && LA53_3<=INDENT)||LA53_3==NEWLINE||(LA53_3>=92 && LA53_3<=93)||LA53_3==99||(LA53_3>=112 && LA53_3<=113)||LA53_3==120||(LA53_3>=123 && LA53_3<=124)||LA53_3==132||LA53_3==137||LA53_3==142||(LA53_3>=146 && LA53_3<=147)||LA53_3==149||(LA53_3>=165 && LA53_3<=167)||(LA53_3>=170 && LA53_3<=171)||(LA53_3>=175 && LA53_3<=176)||LA53_3==181))
							{
								alt53 = 2;
							}
							else
							{
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae = new NoViableAltException("", 53, 3, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else if ((LA53_2==IDENT||LA53_2==92||LA53_2==140||LA53_2==153||(LA53_2>=162 && LA53_2<=163)))
						{
							alt53 = 1;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 53, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 53, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(53); }
					switch (alt53)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:293:24: type_name
						{
						DebugLocation(293, 24);
						PushFollow(Follow._type_name_in_type_name1484);
						type_name121=type_name();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_type_name.Add(type_name121.Tree);

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:293:36: '(' ')'
						{
						DebugLocation(293, 36);
						char_literal122=(IToken)Match(input,92,Follow._92_in_type_name1488); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_92.Add(char_literal122);

						DebugLocation(293, 40);
						char_literal123=(IToken)Match(input,93,Follow._93_in_type_name1490); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal123);


						}
						break;

					}
					} finally { DebugExitSubRule(53); }



					{
					// AST REWRITE
					// elements: type_single, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 293:45: -> ^( Type_Func ^( Type_List type_single ) ( type_name )? )
					{
						DebugLocation(293, 48);
						// SugarCpp.g:293:48: ^( Type_Func ^( Type_List type_single ) ( type_name )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(293, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

						DebugLocation(293, 60);
						// SugarCpp.g:293:60: ^( Type_List type_single )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(293, 62);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_List, "Type_List"), root_2);

						DebugLocation(293, 72);
						adaptor.AddChild(root_2, stream_type_single.NextTree());

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(293, 85);
						// SugarCpp.g:293:85: ( type_name )?
						if (stream_type_name.HasNext)
						{
							DebugLocation(293, 85);
							adaptor.AddChild(root_1, stream_type_name.NextTree());

						}
						stream_type_name.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:294:9: 
					{

					{
					// AST REWRITE
					// elements: type_single
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 294:9: -> type_single
					{
						DebugLocation(294, 12);
						adaptor.AddChild(root_0, stream_type_single.NextTree());

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(54); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:296:4: '(' ( type_list )? ')' '->' ( type_name | '(' ')' )
				{
				DebugLocation(296, 4);
				char_literal124=(IToken)Match(input,92,Follow._92_in_type_name1531); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal124);

				DebugLocation(296, 8);
				// SugarCpp.g:296:8: ( type_list )?
				int alt55=2;
				try { DebugEnterSubRule(55);
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==IDENT||LA55_0==92||LA55_0==140||LA55_0==153||(LA55_0>=162 && LA55_0<=163)))
				{
					alt55 = 1;
				}
				} finally { DebugExitDecision(55); }
				switch (alt55)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:296:8: type_list
					{
					DebugLocation(296, 8);
					PushFollow(Follow._type_list_in_type_name1533);
					type_list125=type_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_list.Add(type_list125.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(55); }

				DebugLocation(296, 19);
				char_literal126=(IToken)Match(input,93,Follow._93_in_type_name1536); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal126);

				DebugLocation(296, 23);
				string_literal127=(IToken)Match(input,104,Follow._104_in_type_name1538); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_104.Add(string_literal127);

				DebugLocation(296, 28);
				// SugarCpp.g:296:28: ( type_name | '(' ')' )
				int alt56=2;
				try { DebugEnterSubRule(56);
				try { DebugEnterDecision(56, false);
				int LA56_0 = input.LA(1);

				if ((LA56_0==IDENT||LA56_0==140||LA56_0==153||(LA56_0>=162 && LA56_0<=163)))
				{
					alt56 = 1;
				}
				else if ((LA56_0==92))
				{
					int LA56_2 = input.LA(2);

					if ((LA56_2==93))
					{
						int LA56_3 = input.LA(3);

						if ((LA56_3==104))
						{
							alt56 = 1;
						}
						else if ((LA56_3==DEDENT||(LA56_3>=IDENT && LA56_3<=INDENT)||LA56_3==NEWLINE||(LA56_3>=92 && LA56_3<=93)||LA56_3==99||(LA56_3>=112 && LA56_3<=113)||LA56_3==120||(LA56_3>=123 && LA56_3<=124)||LA56_3==132||LA56_3==137||LA56_3==142||(LA56_3>=146 && LA56_3<=147)||LA56_3==149||(LA56_3>=165 && LA56_3<=167)||(LA56_3>=170 && LA56_3<=171)||(LA56_3>=175 && LA56_3<=176)||LA56_3==181))
						{
							alt56 = 2;
						}
						else
						{
							if (state.backtracking>0) {state.failed=true; return retval;}
							NoViableAltException nvae = new NoViableAltException("", 56, 3, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}
					else if ((LA56_2==IDENT||LA56_2==92||LA56_2==140||LA56_2==153||(LA56_2>=162 && LA56_2<=163)))
					{
						alt56 = 1;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 56, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(56); }
				switch (alt56)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:296:29: type_name
					{
					DebugLocation(296, 29);
					PushFollow(Follow._type_name_in_type_name1541);
					type_name128=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name128.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:296:41: '(' ')'
					{
					DebugLocation(296, 41);
					char_literal129=(IToken)Match(input,92,Follow._92_in_type_name1545); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal129);

					DebugLocation(296, 45);
					char_literal130=(IToken)Match(input,93,Follow._93_in_type_name1547); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal130);


					}
					break;

				}
				} finally { DebugExitSubRule(56); }



				{
				// AST REWRITE
				// elements: type_name, type_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 296:50: -> ^( Type_Func ( type_list )? ( type_name )? )
				{
					DebugLocation(296, 53);
					// SugarCpp.g:296:53: ^( Type_Func ( type_list )? ( type_name )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(296, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Func, "Type_Func"), root_1);

					DebugLocation(296, 65);
					// SugarCpp.g:296:65: ( type_list )?
					if (stream_type_list.HasNext)
					{
						DebugLocation(296, 65);
						adaptor.AddChild(root_1, stream_type_list.NextTree());

					}
					stream_type_list.Reset();
					DebugLocation(296, 76);
					// SugarCpp.g:296:76: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(296, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 16);
			LeaveRule("type_name", 16);
			LeaveRule_type_name();
		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_type_single();
	partial void LeaveRule_type_single();

	// $ANTLR start "type_single"
	// SugarCpp.g:299:1: type_single : type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) ;
	[GrammarRule("type_single")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_single()
	{
		EnterRule_type_single();
		EnterRule("type_single", 17);
		TraceIn("type_single", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal132 = default(IToken);
		IToken char_literal133 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal137 = default(IToken);
		IToken char_literal138 = default(IToken);
		IToken char_literal139 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr134 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal132_tree = default(CommonTree);
		CommonTree char_literal133_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		CommonTree char_literal139_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_single");
		DebugLocation(299, 1);
		try
		{
			// SugarCpp.g:300:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:300:4: type_star ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			{
			DebugLocation(300, 4);
			PushFollow(Follow._type_star_in_type_single1571);
			type_star131=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star131.Tree);
			DebugLocation(300, 14);
			// SugarCpp.g:300:14: ( '&' -> ^( Type_Ref type_star ) | '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) ) | -> type_star )
			int alt61=3;
			try { DebugEnterSubRule(61);
			try { DebugEnterDecision(61, false);
			switch (input.LA(1))
			{
			case 90:
				{
				alt61 = 1;
				}
				break;
			case 131:
				{
				alt61 = 2;
				}
				break;
			case DEDENT:
			case IDENT:
			case INDENT:
			case NEWLINE:
			case 92:
			case 93:
			case 99:
			case 104:
			case 112:
			case 113:
			case 120:
			case 123:
			case 124:
			case 132:
			case 137:
			case 142:
			case 146:
			case 147:
			case 149:
			case 165:
			case 166:
			case 167:
			case 170:
			case 171:
			case 175:
			case 176:
			case 181:
				{
				alt61 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 61, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(61); }
			switch (alt61)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:300:16: '&'
				{
				DebugLocation(300, 16);
				char_literal132=(IToken)Match(input,90,Follow._90_in_type_single1575); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal132);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 300:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(300, 23);
					// SugarCpp.g:300:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(300, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(300, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:301:7: '[' ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				{
				DebugLocation(301, 7);
				char_literal133=(IToken)Match(input,131,Follow._131_in_type_single1591); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal133);

				DebugLocation(301, 11);
				// SugarCpp.g:301:11: ( expr ( ',' expr )* ']' -> ^( Type_Array type_star ( expr )+ ) | ( ',' )* ']' -> ^( Type_Array type_star ( expr )+ ) )
				int alt60=2;
				try { DebugEnterSubRule(60);
				try { DebugEnterDecision(60, false);
				int LA60_0 = input.LA(1);

				if ((LA60_0==IDENT||LA60_0==NUMBER||LA60_0==STRING||LA60_0==85||LA60_0==90||LA60_0==92||LA60_0==94||(LA60_0>=96 && LA60_0<=97)||(LA60_0>=100 && LA60_0<=101)||(LA60_0>=130 && LA60_0<=131)||LA60_0==152||LA60_0==155||(LA60_0>=157 && LA60_0<=158)||LA60_0==181))
				{
					alt60 = 1;
				}
				else if ((LA60_0==99||LA60_0==132))
				{
					alt60 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(60); }
				switch (alt60)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:301:13: expr ( ',' expr )* ']'
					{
					DebugLocation(301, 13);
					PushFollow(Follow._expr_in_type_single1595);
					expr134=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr134.Tree);
					DebugLocation(301, 18);
					// SugarCpp.g:301:18: ( ',' expr )*
					try { DebugEnterSubRule(58);
					while (true)
					{
						int alt58=2;
						try { DebugEnterDecision(58, false);
						int LA58_0 = input.LA(1);

						if ((LA58_0==99))
						{
							alt58 = 1;
						}


						} finally { DebugExitDecision(58); }
						switch ( alt58 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:301:19: ',' expr
							{
							DebugLocation(301, 19);
							char_literal135=(IToken)Match(input,99,Follow._99_in_type_single1598); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal135);

							DebugLocation(301, 23);
							PushFollow(Follow._expr_in_type_single1600);
							expr136=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr136.Tree);

							}
							break;

						default:
							goto loop58;
						}
					}

					loop58:
						;

					} finally { DebugExitSubRule(58); }

					DebugLocation(301, 30);
					char_literal137=(IToken)Match(input,132,Follow._132_in_type_single1604); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal137);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 301:34: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(301, 37);
						// SugarCpp.g:301:37: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(301, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(301, 50);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(301, 60);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(301, 60);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:302:13: ( ',' )* ']'
					{
					DebugLocation(302, 13);
					// SugarCpp.g:302:13: ( ',' )*
					try { DebugEnterSubRule(59);
					while (true)
					{
						int alt59=2;
						try { DebugEnterDecision(59, false);
						int LA59_0 = input.LA(1);

						if ((LA59_0==99))
						{
							alt59 = 1;
						}


						} finally { DebugExitDecision(59); }
						switch ( alt59 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:302:13: ','
							{
							DebugLocation(302, 13);
							char_literal138=(IToken)Match(input,99,Follow._99_in_type_single1629); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal138);


							}
							break;

						default:
							goto loop59;
						}
					}

					loop59:
						;

					} finally { DebugExitSubRule(59); }

					DebugLocation(302, 18);
					char_literal139=(IToken)Match(input,132,Follow._132_in_type_single1632); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_132.Add(char_literal139);



					{
					// AST REWRITE
					// elements: expr, type_star
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 302:22: -> ^( Type_Array type_star ( expr )+ )
					{
						DebugLocation(302, 25);
						// SugarCpp.g:302:25: ^( Type_Array type_star ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(302, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Array, "Type_Array"), root_1);

						DebugLocation(302, 38);
						adaptor.AddChild(root_1, stream_type_star.NextTree());
						DebugLocation(302, 48);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(302, 48);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(60); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:304:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 304:7: -> type_star
				{
					DebugLocation(304, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_single", 17);
			LeaveRule("type_single", 17);
			LeaveRule_type_single();
		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "type_single"); }
		return retval;

	}
	// $ANTLR end "type_single"

	partial void EnterRule_type_no_array();
	partial void LeaveRule_type_no_array();

	// $ANTLR start "type_no_array"
	// SugarCpp.g:308:1: type_no_array : type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) ;
	[GrammarRule("type_no_array")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_no_array()
	{
		EnterRule_type_no_array();
		EnterRule("type_no_array", 18);
		TraceIn("type_no_array", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal141 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_star140 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal141_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_type_star=new RewriteRuleSubtreeStream(adaptor,"rule type_star");
		try { DebugEnterRule(GrammarFileName, "type_no_array");
		DebugLocation(308, 1);
		try
		{
			// SugarCpp.g:309:2: ( type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star ) )
			DebugEnterAlt(1);
			// SugarCpp.g:309:4: type_star ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			{
			DebugLocation(309, 4);
			PushFollow(Follow._type_star_in_type_no_array1679);
			type_star140=type_star();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_star.Add(type_star140.Tree);
			DebugLocation(309, 14);
			// SugarCpp.g:309:14: ( '&' -> ^( Type_Ref type_star ) | -> type_star )
			int alt62=2;
			try { DebugEnterSubRule(62);
			try { DebugEnterDecision(62, false);
			int LA62_0 = input.LA(1);

			if ((LA62_0==90))
			{
				alt62 = 1;
			}
			else if ((LA62_0==92||LA62_0==131))
			{
				alt62 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:309:16: '&'
				{
				DebugLocation(309, 16);
				char_literal141=(IToken)Match(input,90,Follow._90_in_type_no_array1683); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(char_literal141);



				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 309:20: -> ^( Type_Ref type_star )
				{
					DebugLocation(309, 23);
					// SugarCpp.g:309:23: ^( Type_Ref type_star )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(309, 25);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ref, "Type_Ref"), root_1);

					DebugLocation(309, 34);
					adaptor.AddChild(root_1, stream_type_star.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:310:7: 
				{

				{
				// AST REWRITE
				// elements: type_star
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 310:7: -> type_star
				{
					DebugLocation(310, 10);
					adaptor.AddChild(root_0, stream_type_star.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_no_array", 18);
			LeaveRule("type_no_array", 18);
			LeaveRule_type_no_array();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "type_no_array"); }
		return retval;

	}
	// $ANTLR end "type_no_array"

	partial void EnterRule_type_star();
	partial void LeaveRule_type_star();

	// $ANTLR start "type_star"
	// SugarCpp.g:314:1: type_star : type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) ;
	[GrammarRule("type_star")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_star()
	{
		EnterRule_type_star();
		EnterRule("type_star", 19);
		TraceIn("type_star", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal143 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_template_type142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal143_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_type_template_type=new RewriteRuleSubtreeStream(adaptor,"rule type_template_type");
		try { DebugEnterRule(GrammarFileName, "type_star");
		DebugLocation(314, 1);
		try
		{
			// SugarCpp.g:315:2: ( type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type ) )
			DebugEnterAlt(1);
			// SugarCpp.g:315:4: type_template_type ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			{
			DebugLocation(315, 4);
			PushFollow(Follow._type_template_type_in_type_star1718);
			type_template_type142=type_template_type();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_template_type.Add(type_template_type142.Tree);
			DebugLocation(315, 23);
			// SugarCpp.g:315:23: ( ( '*' )+ -> ^( Type_Star type_template_type ( '*' )+ ) | -> type_template_type )
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_0 = input.LA(1);

			if ((LA64_0==94))
			{
				alt64 = 1;
			}
			else if ((LA64_0==DEDENT||(LA64_0>=IDENT && LA64_0<=INDENT)||LA64_0==NEWLINE||LA64_0==90||(LA64_0>=92 && LA64_0<=93)||LA64_0==99||LA64_0==104||(LA64_0>=112 && LA64_0<=113)||LA64_0==120||(LA64_0>=123 && LA64_0<=124)||(LA64_0>=131 && LA64_0<=132)||LA64_0==137||LA64_0==142||(LA64_0>=146 && LA64_0<=147)||LA64_0==149||(LA64_0>=165 && LA64_0<=167)||(LA64_0>=170 && LA64_0<=171)||(LA64_0>=175 && LA64_0<=176)||LA64_0==181))
			{
				alt64 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:315:25: ( '*' )+
				{
				DebugLocation(315, 25);
				// SugarCpp.g:315:25: ( '*' )+
				int cnt63=0;
				try { DebugEnterSubRule(63);
				while (true)
				{
					int alt63=2;
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==94))
					{
						alt63 = 1;
					}


					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:315:25: '*'
						{
						DebugLocation(315, 25);
						char_literal143=(IToken)Match(input,94,Follow._94_in_type_star1722); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_94.Add(char_literal143);


						}
						break;

					default:
						if (cnt63 >= 1)
							goto loop63;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee63 = new EarlyExitException( 63, input );
						DebugRecognitionException(eee63);
						throw eee63;
					}
					cnt63++;
				}
				loop63:
					;

				} finally { DebugExitSubRule(63); }



				{
				// AST REWRITE
				// elements: type_template_type, 94
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:30: -> ^( Type_Star type_template_type ( '*' )+ )
				{
					DebugLocation(315, 33);
					// SugarCpp.g:315:33: ^( Type_Star type_template_type ( '*' )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 35);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Star, "Type_Star"), root_1);

					DebugLocation(315, 45);
					adaptor.AddChild(root_1, stream_type_template_type.NextTree());
					DebugLocation(315, 64);
					if (!(stream_94.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_94.HasNext )
					{
						DebugLocation(315, 64);
						adaptor.AddChild(root_1, stream_94.NextNode());

					}
					stream_94.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:316:10: 
				{

				{
				// AST REWRITE
				// elements: type_template_type
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:10: -> type_template_type
				{
					DebugLocation(316, 13);
					adaptor.AddChild(root_0, stream_type_template_type.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_star", 19);
			LeaveRule("type_star", 19);
			LeaveRule_type_star();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "type_star"); }
		return retval;

	}
	// $ANTLR end "type_star"

	partial void EnterRule_type_template_type();
	partial void LeaveRule_type_template_type();

	// $ANTLR start "type_template_type"
	// SugarCpp.g:320:1: type_template_type : type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) ;
	[GrammarRule("type_template_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_template_type()
	{
		EnterRule_type_template_type();
		EnterRule("type_template_type", 20);
		TraceIn("type_template_type", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal145 = default(IToken);
		IToken char_literal147 = default(IToken);
		IToken char_literal149 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_ident144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name146 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name148 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal145_tree = default(CommonTree);
		CommonTree char_literal147_tree = default(CommonTree);
		CommonTree char_literal149_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_ident=new RewriteRuleSubtreeStream(adaptor,"rule type_ident");
		try { DebugEnterRule(GrammarFileName, "type_template_type");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: type_ident ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			{
			DebugLocation(321, 4);
			PushFollow(Follow._type_ident_in_type_template_type1768);
			type_ident144=type_ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_ident.Add(type_ident144.Tree);
			DebugLocation(321, 15);
			// SugarCpp.g:321:15: ( '<' ( type_name ( ',' type_name )* )? '>' -> ^( Type_Template type_ident ( type_name )* ) | -> type_ident )
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==114))
			{
				alt67 = 1;
			}
			else if ((LA67_0==DEDENT||(LA67_0>=IDENT && LA67_0<=INDENT)||LA67_0==NEWLINE||LA67_0==90||(LA67_0>=92 && LA67_0<=94)||LA67_0==99||LA67_0==104||(LA67_0>=112 && LA67_0<=113)||LA67_0==120||(LA67_0>=123 && LA67_0<=124)||(LA67_0>=131 && LA67_0<=132)||LA67_0==137||LA67_0==142||(LA67_0>=146 && LA67_0<=147)||LA67_0==149||(LA67_0>=165 && LA67_0<=167)||(LA67_0>=170 && LA67_0<=171)||(LA67_0>=175 && LA67_0<=176)||LA67_0==181))
			{
				alt67 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 67, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:321:17: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(321, 17);
				char_literal145=(IToken)Match(input,114,Follow._114_in_type_template_type1772); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal145);

				DebugLocation(321, 21);
				// SugarCpp.g:321:21: ( type_name ( ',' type_name )* )?
				int alt66=2;
				try { DebugEnterSubRule(66);
				try { DebugEnterDecision(66, false);
				int LA66_0 = input.LA(1);

				if ((LA66_0==IDENT||LA66_0==92||LA66_0==140||LA66_0==153||(LA66_0>=162 && LA66_0<=163)))
				{
					alt66 = 1;
				}
				} finally { DebugExitDecision(66); }
				switch (alt66)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:22: type_name ( ',' type_name )*
					{
					DebugLocation(321, 22);
					PushFollow(Follow._type_name_in_type_template_type1775);
					type_name146=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name146.Tree);
					DebugLocation(321, 32);
					// SugarCpp.g:321:32: ( ',' type_name )*
					try { DebugEnterSubRule(65);
					while (true)
					{
						int alt65=2;
						try { DebugEnterDecision(65, false);
						int LA65_0 = input.LA(1);

						if ((LA65_0==99))
						{
							alt65 = 1;
						}


						} finally { DebugExitDecision(65); }
						switch ( alt65 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:321:33: ',' type_name
							{
							DebugLocation(321, 33);
							char_literal147=(IToken)Match(input,99,Follow._99_in_type_template_type1778); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal147);

							DebugLocation(321, 37);
							PushFollow(Follow._type_name_in_type_template_type1780);
							type_name148=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name148.Tree);

							}
							break;

						default:
							goto loop65;
						}
					}

					loop65:
						;

					} finally { DebugExitSubRule(65); }


					}
					break;

				}
				} finally { DebugExitSubRule(66); }

				DebugLocation(321, 51);
				char_literal149=(IToken)Match(input,124,Follow._124_in_type_template_type1786); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal149);



				{
				// AST REWRITE
				// elements: type_ident, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 321:55: -> ^( Type_Template type_ident ( type_name )* )
				{
					DebugLocation(321, 58);
					// SugarCpp.g:321:58: ^( Type_Template type_ident ( type_name )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(321, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Template, "Type_Template"), root_1);

					DebugLocation(321, 74);
					adaptor.AddChild(root_1, stream_type_ident.NextTree());
					DebugLocation(321, 85);
					// SugarCpp.g:321:85: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(321, 85);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:322:8: 
				{

				{
				// AST REWRITE
				// elements: type_ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 322:8: -> type_ident
				{
					DebugLocation(322, 11);
					adaptor.AddChild(root_0, stream_type_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_template_type", 20);
			LeaveRule("type_template_type", 20);
			LeaveRule_type_template_type();
		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "type_template_type"); }
		return retval;

	}
	// $ANTLR end "type_template_type"

	partial void EnterRule_type_ident();
	partial void LeaveRule_type_ident();

	// $ANTLR start "type_ident"
	// SugarCpp.g:326:1: type_ident : ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) ;
	[GrammarRule("type_ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_ident()
	{
		EnterRule_type_ident();
		EnterRule("type_ident", 21);
		TraceIn("type_ident", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal150 = default(IToken);
		IToken string_literal151 = default(IToken);
		IToken string_literal152 = default(IToken);
		IToken string_literal153 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree string_literal151_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree string_literal153_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_162=new RewriteRuleITokenStream(adaptor,"token 162");
		RewriteRuleITokenStream stream_163=new RewriteRuleITokenStream(adaptor,"token 163");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "type_ident");
		DebugLocation(326, 1);
		try
		{
			// SugarCpp.g:327:2: ( ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:327:4: ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident
			{
			DebugLocation(327, 4);
			// SugarCpp.g:327:4: ( 'static' )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==162))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:327:4: 'static'
				{
				DebugLocation(327, 4);
				string_literal150=(IToken)Match(input,162,Follow._162_in_type_ident1826); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_162.Add(string_literal150);


				}
				break;

			}
			} finally { DebugExitSubRule(68); }

			DebugLocation(327, 14);
			// SugarCpp.g:327:14: ( 'const' )?
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_0 = input.LA(1);

			if ((LA69_0==140))
			{
				alt69 = 1;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:327:14: 'const'
				{
				DebugLocation(327, 14);
				string_literal151=(IToken)Match(input,140,Follow._140_in_type_ident1829); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_140.Add(string_literal151);


				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(327, 23);
			// SugarCpp.g:327:23: ( 'struct' )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_0 = input.LA(1);

			if ((LA70_0==163))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:327:23: 'struct'
				{
				DebugLocation(327, 23);
				string_literal152=(IToken)Match(input,163,Follow._163_in_type_ident1832); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_163.Add(string_literal152);


				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(327, 33);
			// SugarCpp.g:327:33: ( 'long' )?
			int alt71=2;
			try { DebugEnterSubRule(71);
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==153))
			{
				alt71 = 1;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:327:33: 'long'
				{
				DebugLocation(327, 33);
				string_literal153=(IToken)Match(input,153,Follow._153_in_type_ident1835); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_153.Add(string_literal153);


				}
				break;

			}
			} finally { DebugExitSubRule(71); }

			DebugLocation(327, 41);
			PushFollow(Follow._ident_in_type_ident1838);
			ident154=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident154.Tree);


			{
			// AST REWRITE
			// elements: 140, 162, ident, 163, 153
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:47: -> ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
			{
				DebugLocation(327, 50);
				// SugarCpp.g:327:50: ^( Type_Ident ( 'static' )? ( 'const' )? ( 'struct' )? ( 'long' )? ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(327, 52);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_Ident, "Type_Ident"), root_1);

				DebugLocation(327, 63);
				// SugarCpp.g:327:63: ( 'static' )?
				if (stream_162.HasNext)
				{
					DebugLocation(327, 63);
					adaptor.AddChild(root_1, stream_162.NextNode());

				}
				stream_162.Reset();
				DebugLocation(327, 73);
				// SugarCpp.g:327:73: ( 'const' )?
				if (stream_140.HasNext)
				{
					DebugLocation(327, 73);
					adaptor.AddChild(root_1, stream_140.NextNode());

				}
				stream_140.Reset();
				DebugLocation(327, 82);
				// SugarCpp.g:327:82: ( 'struct' )?
				if (stream_163.HasNext)
				{
					DebugLocation(327, 82);
					adaptor.AddChild(root_1, stream_163.NextNode());

				}
				stream_163.Reset();
				DebugLocation(327, 92);
				// SugarCpp.g:327:92: ( 'long' )?
				if (stream_153.HasNext)
				{
					DebugLocation(327, 92);
					adaptor.AddChild(root_1, stream_153.NextNode());

				}
				stream_153.Reset();
				DebugLocation(327, 100);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_ident", 21);
			LeaveRule("type_ident", 21);
			LeaveRule_type_ident();
		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "type_ident"); }
		return retval;

	}
	// $ANTLR end "type_ident"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:330:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 22);
		TraceIn("generic_parameter_inside", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal156 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident155 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident157 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(330, 1);
		try
		{
			// SugarCpp.g:331:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:331:4: ident ( ',' ident )*
			{
			DebugLocation(331, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1869);
			ident155=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident155.Tree);
			DebugLocation(331, 10);
			// SugarCpp.g:331:10: ( ',' ident )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=2;
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==99))
				{
					alt72 = 1;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:331:11: ',' ident
					{
					DebugLocation(331, 11);
					char_literal156=(IToken)Match(input,99,Follow._99_in_generic_parameter_inside1872); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal156);

					DebugLocation(331, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1874);
					ident157=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident157.Tree);

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(331, 26);
				// SugarCpp.g:331:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(331, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(331, 47);
				// SugarCpp.g:331:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(331, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 22);
			LeaveRule("generic_parameter_inside", 22);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:334:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 23);
		TraceIn("generic_parameter", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal158 = default(IToken);
		IToken char_literal160 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal158_tree = default(CommonTree);
		CommonTree char_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:335:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(335, 4);
			char_literal158=(IToken)Match(input,114,Follow._114_in_generic_parameter1896); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(char_literal158);

			DebugLocation(335, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1898);
			generic_parameter_inside159=generic_parameter_inside();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_generic_parameter_inside.Add(generic_parameter_inside159.Tree);
			DebugLocation(335, 33);
			char_literal160=(IToken)Match(input,124,Follow._124_in_generic_parameter1900); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_124.Add(char_literal160);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 335:37: -> generic_parameter_inside
			{
				DebugLocation(335, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 23);
			LeaveRule("generic_parameter", 23);
			LeaveRule_generic_parameter();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:338:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 24);
		TraceIn("func_args", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal162 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item161 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal162_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(338, 1);
		try
		{
			// SugarCpp.g:339:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:339:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(339, 4);
			PushFollow(Follow._func_args_item_in_func_args1915);
			func_args_item161=func_args_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_args_item.Add(func_args_item161.Tree);
			DebugLocation(339, 19);
			// SugarCpp.g:339:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==99))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:339:20: ',' func_args_item
					{
					DebugLocation(339, 20);
					char_literal162=(IToken)Match(input,99,Follow._99_in_func_args1918); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal162);

					DebugLocation(339, 24);
					PushFollow(Follow._func_args_item_in_func_args1920);
					func_args_item163=func_args_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args_item.Add(func_args_item163.Tree);

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 339:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(339, 44);
				// SugarCpp.g:339:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(339, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(339, 56);
				// SugarCpp.g:339:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(339, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 24);
			LeaveRule("func_args", 24);
			LeaveRule_func_args();
		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:342:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 25);
		TraceIn("func_args_item", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal165 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken string_literal168 = default(IToken);
		IToken string_literal171 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr172 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal165_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree string_literal168_tree = default(CommonTree);
		CommonTree string_literal171_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(342, 1);
		try
		{
			// SugarCpp.g:343:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ^ modify_expr )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==IDENT))
			{
				alt76 = 1;
			}
			else if ((LA76_0==112))
			{
				alt76 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:343:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(343, 4);
				PushFollow(Follow._ident_list_in_func_args_item1942);
				ident_list164=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list164.Tree);
				DebugLocation(343, 15);
				char_literal165=(IToken)Match(input,110,Follow._110_in_func_args_item1944); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal165);

				DebugLocation(343, 19);
				PushFollow(Follow._type_name_in_func_args_item1946);
				type_name166=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name166.Tree);
				DebugLocation(343, 29);
				// SugarCpp.g:343:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt75=3;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt75 = 1;
					}
					break;
				case 92:
					{
					alt75 = 2;
					}
					break;
				case 93:
				case 99:
					{
					alt75 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:343:31: ( '=' | ':=' ) expr
					{
					DebugLocation(343, 31);
					// SugarCpp.g:343:31: ( '=' | ':=' )
					int alt74=2;
					try { DebugEnterSubRule(74);
					try { DebugEnterDecision(74, false);
					int LA74_0 = input.LA(1);

					if ((LA74_0==120))
					{
						alt74 = 1;
					}
					else if ((LA74_0==112))
					{
						alt74 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(74); }
					switch (alt74)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:343:32: '='
						{
						DebugLocation(343, 32);
						char_literal167=(IToken)Match(input,120,Follow._120_in_func_args_item1951); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal167);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:343:38: ':='
						{
						DebugLocation(343, 38);
						string_literal168=(IToken)Match(input,112,Follow._112_in_func_args_item1955); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal168);


						}
						break;

					}
					} finally { DebugExitSubRule(74); }

					DebugLocation(343, 44);
					PushFollow(Follow._expr_in_func_args_item1958);
					expr169=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr169.Tree);


					{
					// AST REWRITE
					// elements: ident_list, expr, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:50: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
					{
						DebugLocation(343, 53);
						// SugarCpp.g:343:53: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(343, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(343, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(343, 93);
						// SugarCpp.g:343:93: ^( Expr_Args expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 95);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(343, 105);
						adaptor.AddChild(root_2, stream_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:344:33: bracket_expr_list
					{
					DebugLocation(344, 33);
					PushFollow(Follow._bracket_expr_list_in_func_args_item2009);
					bracket_expr_list170=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list170.Tree);


					{
					// AST REWRITE
					// elements: bracket_expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(344, 55);
						// SugarCpp.g:344:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(344, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(344, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(344, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:345:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 345:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(345, 18);
						// SugarCpp.g:345:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(345, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(345, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(345, 58);
						// SugarCpp.g:345:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(345, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(75); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:347:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(347, 8);
				string_literal171=(IToken)Match(input,112,Follow._112_in_func_args_item2069); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal171_tree = (CommonTree)adaptor.Create(string_literal171);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal171_tree, root_0);
				}
				DebugLocation(347, 11);
				PushFollow(Follow._modify_expr_in_func_args_item2073);
				modify_expr172=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr172.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 25);
			LeaveRule("func_args_item", 25);
			LeaveRule_func_args_item();
		}
		DebugLocation(348, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// SugarCpp.g:350:1: operator : ( '+' | '-' | '*' | '/' );
	[GrammarRule("operator")]
	private AstParserRuleReturnScope<CommonTree, IToken> @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 26);
		TraceIn("operator", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set173 = default(IToken);

		CommonTree set173_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(350, 1);
		try
		{
			// SugarCpp.g:351:2: ( '+' | '-' | '*' | '/' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(351, 2);

			set173=(IToken)input.LT(1);
			if (input.LA(1)==94||input.LA(1)==96||input.LA(1)==100||input.LA(1)==108)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set173));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 26);
			LeaveRule("operator", 26);
			LeaveRule_operator();
		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	partial void EnterRule_func_name();
	partial void LeaveRule_func_name();

	// $ANTLR start "func_name"
	// SugarCpp.g:354:1: func_name : ( ident -> ident | '(' operator ')' -> operator );
	[GrammarRule("func_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_name()
	{
		EnterRule_func_name();
		EnterRule("func_name", 27);
		TraceIn("func_name", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal175 = default(IToken);
		IToken char_literal177 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> operator176 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree char_literal177_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
		try { DebugEnterRule(GrammarFileName, "func_name");
		DebugLocation(354, 1);
		try
		{
			// SugarCpp.g:355:2: ( ident -> ident | '(' operator ')' -> operator )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==IDENT))
			{
				alt77 = 1;
			}
			else if ((LA77_0==92))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:355:4: ident
				{
				DebugLocation(355, 4);
				PushFollow(Follow._ident_in_func_name2107);
				ident174=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident174.Tree);


				{
				// AST REWRITE
				// elements: ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 355:10: -> ident
				{
					DebugLocation(355, 13);
					adaptor.AddChild(root_0, stream_ident.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:356:4: '(' operator ')'
				{
				DebugLocation(356, 4);
				char_literal175=(IToken)Match(input,92,Follow._92_in_func_name2116); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal175);

				DebugLocation(356, 8);
				PushFollow(Follow._operator_in_func_name2118);
				operator176=@operator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_operator.Add(operator176.Tree);
				DebugLocation(356, 17);
				char_literal177=(IToken)Match(input,93,Follow._93_in_func_name2120); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal177);



				{
				// AST REWRITE
				// elements: operator
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:21: -> operator
				{
					DebugLocation(356, 24);
					adaptor.AddChild(root_0, stream_operator.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_name", 27);
			LeaveRule("func_name", 27);
			LeaveRule_func_name();
		}
		DebugLocation(357, 1);
		} finally { DebugExitRule(GrammarFileName, "func_name"); }
		return retval;

	}
	// $ANTLR end "func_name"

	partial void EnterRule_func_type();
	partial void LeaveRule_func_type();

	// $ANTLR start "func_type"
	// SugarCpp.g:359:1: func_type : type_name ;
	[GrammarRule("func_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_type()
	{
		EnterRule_func_type();
		EnterRule("func_type", 28);
		TraceIn("func_type", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> type_name178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "func_type");
		DebugLocation(359, 1);
		try
		{
			// SugarCpp.g:360:2: ( type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:360:4: type_name
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(360, 4);
			PushFollow(Follow._type_name_in_func_type2135);
			type_name178=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name178.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_type", 28);
			LeaveRule("func_type", 28);
			LeaveRule_func_type();
		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "func_type"); }
		return retval;

	}
	// $ANTLR end "func_type"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:363:1: func_def : ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 29);
		TraceIn("func_def", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal180 = default(IToken);
		IToken string_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		IToken char_literal186 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken NEWLINE189 = default(IToken);
		IToken char_literal191 = default(IToken);
		IToken NEWLINE193 = default(IToken);
		IToken INDENT194 = default(IToken);
		IToken NEWLINE195 = default(IToken);
		IToken NEWLINE197 = default(IToken);
		IToken DEDENT198 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_type182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_name184 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args187 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block190 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr192 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal180_tree = default(CommonTree);
		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		CommonTree char_literal186_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree NEWLINE189_tree = default(CommonTree);
		CommonTree char_literal191_tree = default(CommonTree);
		CommonTree NEWLINE193_tree = default(CommonTree);
		CommonTree INDENT194_tree = default(CommonTree);
		CommonTree NEWLINE195_tree = default(CommonTree);
		CommonTree NEWLINE197_tree = default(CommonTree);
		CommonTree DEDENT198_tree = default(CommonTree);
		RewriteRuleITokenStream stream_181=new RewriteRuleITokenStream(adaptor,"token 181");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_173=new RewriteRuleITokenStream(adaptor,"token 173");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_func_type=new RewriteRuleSubtreeStream(adaptor,"rule func_type");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_func_name=new RewriteRuleSubtreeStream(adaptor,"rule func_name");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(363, 4);
		try
		{
			// SugarCpp.g:364:2: ( ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:364:4: ( attribute )? ( 'public' )? ( 'virtual' )? ( func_type )? ( '~' )? func_name ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			{
			DebugLocation(364, 4);
			// SugarCpp.g:364:4: ( attribute )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_0 = input.LA(1);

			if ((LA78_0==131))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:4: attribute
				{
				DebugLocation(364, 4);
				PushFollow(Follow._attribute_in_func_def2146);
				attribute179=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute179.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(78); }

			DebugLocation(364, 15);
			// SugarCpp.g:364:15: ( 'public' )?
			int alt79=2;
			try { DebugEnterSubRule(79);
			try { DebugEnterDecision(79, false);
			int LA79_0 = input.LA(1);

			if ((LA79_0==160))
			{
				alt79 = 1;
			}
			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:15: 'public'
				{
				DebugLocation(364, 15);
				string_literal180=(IToken)Match(input,160,Follow._160_in_func_def2149); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_160.Add(string_literal180);


				}
				break;

			}
			} finally { DebugExitSubRule(79); }

			DebugLocation(364, 25);
			// SugarCpp.g:364:25: ( 'virtual' )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_0 = input.LA(1);

			if ((LA80_0==173))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:25: 'virtual'
				{
				DebugLocation(364, 25);
				string_literal181=(IToken)Match(input,173,Follow._173_in_func_def2152); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_173.Add(string_literal181);


				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(364, 36);
			// SugarCpp.g:364:36: ( func_type )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			try
			{
				alt81 = dfa81.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:36: func_type
				{
				DebugLocation(364, 36);
				PushFollow(Follow._func_type_in_func_def2155);
				func_type182=func_type();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_type.Add(func_type182.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(364, 47);
			// SugarCpp.g:364:47: ( '~' )?
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_0 = input.LA(1);

			if ((LA82_0==181))
			{
				alt82 = 1;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:47: '~'
				{
				DebugLocation(364, 47);
				char_literal183=(IToken)Match(input,181,Follow._181_in_func_def2158); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_181.Add(char_literal183);


				}
				break;

			}
			} finally { DebugExitSubRule(82); }

			DebugLocation(364, 52);
			PushFollow(Follow._func_name_in_func_def2161);
			func_name184=func_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_func_name.Add(func_name184.Tree);
			DebugLocation(364, 62);
			// SugarCpp.g:364:62: ( generic_parameter )?
			int alt83=2;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==114))
			{
				alt83 = 1;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:62: generic_parameter
				{
				DebugLocation(364, 62);
				PushFollow(Follow._generic_parameter_in_func_def2163);
				generic_parameter185=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter185.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(83); }

			DebugLocation(364, 81);
			char_literal186=(IToken)Match(input,92,Follow._92_in_func_def2166); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal186);

			DebugLocation(364, 85);
			// SugarCpp.g:364:85: ( func_args )?
			int alt84=2;
			try { DebugEnterSubRule(84);
			try { DebugEnterDecision(84, false);
			int LA84_0 = input.LA(1);

			if ((LA84_0==IDENT||LA84_0==112))
			{
				alt84 = 1;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:85: func_args
				{
				DebugLocation(364, 85);
				PushFollow(Follow._func_args_in_func_def2168);
				func_args187=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args187.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(84); }

			DebugLocation(364, 96);
			char_literal188=(IToken)Match(input,93,Follow._93_in_func_def2171); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal188);

			DebugLocation(364, 100);
			// SugarCpp.g:364:100: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block ) | '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) ) )
			int alt91=2;
			try { DebugEnterSubRule(91);
			try { DebugEnterDecision(91, false);
			int LA91_0 = input.LA(1);

			if ((LA91_0==NEWLINE))
			{
				alt91 = 1;
			}
			else if ((LA91_0==120))
			{
				alt91 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:364:102: ( NEWLINE )+ stmt_block
				{
				DebugLocation(364, 102);
				// SugarCpp.g:364:102: ( NEWLINE )+
				int cnt85=0;
				try { DebugEnterSubRule(85);
				while (true)
				{
					int alt85=2;
					try { DebugEnterDecision(85, false);
					int LA85_0 = input.LA(1);

					if ((LA85_0==NEWLINE))
					{
						alt85 = 1;
					}


					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:364:102: NEWLINE
						{
						DebugLocation(364, 102);
						NEWLINE189=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2175); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE189);


						}
						break;

					default:
						if (cnt85 >= 1)
							goto loop85;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee85 = new EarlyExitException( 85, input );
						DebugRecognitionException(eee85);
						throw eee85;
					}
					cnt85++;
				}
				loop85:
					;

				} finally { DebugExitSubRule(85); }

				DebugLocation(364, 111);
				PushFollow(Follow._stmt_block_in_func_def2178);
				stmt_block190=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block190.Tree);


				{
				// AST REWRITE
				// elements: generic_parameter, 181, stmt_block, func_type, 160, 173, func_args, func_name, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 364:122: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(364, 125);
					// SugarCpp.g:364:125: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(364, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(364, 136);
					// SugarCpp.g:364:136: ( 'public' )?
					if (stream_160.HasNext)
					{
						DebugLocation(364, 136);
						adaptor.AddChild(root_1, stream_160.NextNode());

					}
					stream_160.Reset();
					DebugLocation(364, 146);
					// SugarCpp.g:364:146: ( 'virtual' )?
					if (stream_173.HasNext)
					{
						DebugLocation(364, 146);
						adaptor.AddChild(root_1, stream_173.NextNode());

					}
					stream_173.Reset();
					DebugLocation(364, 157);
					// SugarCpp.g:364:157: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(364, 157);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(364, 168);
					// SugarCpp.g:364:168: ( func_type )?
					if (stream_func_type.HasNext)
					{
						DebugLocation(364, 168);
						adaptor.AddChild(root_1, stream_func_type.NextTree());

					}
					stream_func_type.Reset();
					DebugLocation(364, 179);
					// SugarCpp.g:364:179: ( '~' )?
					if (stream_181.HasNext)
					{
						DebugLocation(364, 179);
						adaptor.AddChild(root_1, stream_181.NextNode());

					}
					stream_181.Reset();
					DebugLocation(364, 184);
					adaptor.AddChild(root_1, stream_func_name.NextTree());
					DebugLocation(364, 194);
					// SugarCpp.g:364:194: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(364, 194);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(364, 213);
					// SugarCpp.g:364:213: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(364, 213);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(364, 224);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:365:30: '=' ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				{
				DebugLocation(365, 30);
				char_literal191=(IToken)Match(input,120,Follow._120_in_func_def2240); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_120.Add(char_literal191);

				DebugLocation(365, 34);
				// SugarCpp.g:365:34: ( where_expr -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) ) )
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==IDENT||LA90_0==NUMBER||LA90_0==STRING||LA90_0==85||LA90_0==90||LA90_0==92||LA90_0==94||(LA90_0>=96 && LA90_0<=97)||(LA90_0>=100 && LA90_0<=101)||(LA90_0>=130 && LA90_0<=131)||LA90_0==152||LA90_0==155||(LA90_0>=157 && LA90_0<=158)||LA90_0==181))
				{
					alt90 = 1;
				}
				else if ((LA90_0==NEWLINE))
				{
					alt90 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:365:36: where_expr
					{
					DebugLocation(365, 36);
					PushFollow(Follow._where_expr_in_func_def2244);
					where_expr192=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr192.Tree);


					{
					// AST REWRITE
					// elements: func_name, where_expr, 181, func_type, generic_parameter, func_args, 173, 160, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 365:48: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
					{
						DebugLocation(365, 51);
						// SugarCpp.g:365:51: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? where_expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(365, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(365, 62);
						// SugarCpp.g:365:62: ( 'public' )?
						if (stream_160.HasNext)
						{
							DebugLocation(365, 62);
							adaptor.AddChild(root_1, stream_160.NextNode());

						}
						stream_160.Reset();
						DebugLocation(365, 72);
						// SugarCpp.g:365:72: ( 'virtual' )?
						if (stream_173.HasNext)
						{
							DebugLocation(365, 72);
							adaptor.AddChild(root_1, stream_173.NextNode());

						}
						stream_173.Reset();
						DebugLocation(365, 83);
						// SugarCpp.g:365:83: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(365, 83);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(365, 94);
						// SugarCpp.g:365:94: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(365, 94);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(365, 105);
						// SugarCpp.g:365:105: ( '~' )?
						if (stream_181.HasNext)
						{
							DebugLocation(365, 105);
							adaptor.AddChild(root_1, stream_181.NextNode());

						}
						stream_181.Reset();
						DebugLocation(365, 110);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(365, 120);
						// SugarCpp.g:365:120: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(365, 120);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(365, 139);
						// SugarCpp.g:365:139: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(365, 139);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(365, 150);
						adaptor.AddChild(root_1, stream_where_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:366:30: ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
					{
					DebugLocation(366, 30);
					// SugarCpp.g:366:30: ( NEWLINE )+
					int cnt86=0;
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==NEWLINE))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:366:30: NEWLINE
							{
							DebugLocation(366, 30);
							NEWLINE193=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2307); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE193);


							}
							break;

						default:
							if (cnt86 >= 1)
								goto loop86;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee86 = new EarlyExitException( 86, input );
							DebugRecognitionException(eee86);
							throw eee86;
						}
						cnt86++;
					}
					loop86:
						;

					} finally { DebugExitSubRule(86); }

					DebugLocation(366, 39);
					INDENT194=(IToken)Match(input,INDENT,Follow._INDENT_in_func_def2310); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT194);

					DebugLocation(366, 46);
					// SugarCpp.g:366:46: ( NEWLINE )*
					try { DebugEnterSubRule(87);
					while (true)
					{
						int alt87=2;
						try { DebugEnterDecision(87, false);
						int LA87_0 = input.LA(1);

						if ((LA87_0==NEWLINE))
						{
							alt87 = 1;
						}


						} finally { DebugExitDecision(87); }
						switch ( alt87 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:366:46: NEWLINE
							{
							DebugLocation(366, 46);
							NEWLINE195=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2312); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE195);


							}
							break;

						default:
							goto loop87;
						}
					}

					loop87:
						;

					} finally { DebugExitSubRule(87); }

					DebugLocation(366, 55);
					// SugarCpp.g:366:55: ( match_item ( NEWLINE )+ )+
					int cnt89=0;
					try { DebugEnterSubRule(89);
					while (true)
					{
						int alt89=2;
						try { DebugEnterDecision(89, false);
						int LA89_0 = input.LA(1);

						if ((LA89_0==177))
						{
							alt89 = 1;
						}


						} finally { DebugExitDecision(89); }
						switch (alt89)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:366:56: match_item ( NEWLINE )+
							{
							DebugLocation(366, 56);
							PushFollow(Follow._match_item_in_func_def2316);
							match_item196=match_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_match_item.Add(match_item196.Tree);
							DebugLocation(366, 67);
							// SugarCpp.g:366:67: ( NEWLINE )+
							int cnt88=0;
							try { DebugEnterSubRule(88);
							while (true)
							{
								int alt88=2;
								try { DebugEnterDecision(88, false);
								int LA88_0 = input.LA(1);

								if ((LA88_0==NEWLINE))
								{
									alt88 = 1;
								}


								} finally { DebugExitDecision(88); }
								switch (alt88)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:366:67: NEWLINE
									{
									DebugLocation(366, 67);
									NEWLINE197=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def2318); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE197);


									}
									break;

								default:
									if (cnt88 >= 1)
										goto loop88;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee88 = new EarlyExitException( 88, input );
									DebugRecognitionException(eee88);
									throw eee88;
								}
								cnt88++;
							}
							loop88:
								;

							} finally { DebugExitSubRule(88); }


							}
							break;

						default:
							if (cnt89 >= 1)
								goto loop89;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee89 = new EarlyExitException( 89, input );
							DebugRecognitionException(eee89);
							throw eee89;
						}
						cnt89++;
					}
					loop89:
						;

					} finally { DebugExitSubRule(89); }

					DebugLocation(366, 78);
					DEDENT198=(IToken)Match(input,DEDENT,Follow._DEDENT_in_func_def2323); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT198);



					{
					// AST REWRITE
					// elements: func_name, 181, func_args, attribute, 160, match_item, generic_parameter, 173, func_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 366:85: -> ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
					{
						DebugLocation(366, 88);
						// SugarCpp.g:366:88: ^( Func_Def ( 'public' )? ( 'virtual' )? ( attribute )? ( func_type )? ( '~' )? func_name ( generic_parameter )? ( func_args )? ^( Match_Expr ( match_item )+ ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 90);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

						DebugLocation(366, 99);
						// SugarCpp.g:366:99: ( 'public' )?
						if (stream_160.HasNext)
						{
							DebugLocation(366, 99);
							adaptor.AddChild(root_1, stream_160.NextNode());

						}
						stream_160.Reset();
						DebugLocation(366, 109);
						// SugarCpp.g:366:109: ( 'virtual' )?
						if (stream_173.HasNext)
						{
							DebugLocation(366, 109);
							adaptor.AddChild(root_1, stream_173.NextNode());

						}
						stream_173.Reset();
						DebugLocation(366, 120);
						// SugarCpp.g:366:120: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(366, 120);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(366, 131);
						// SugarCpp.g:366:131: ( func_type )?
						if (stream_func_type.HasNext)
						{
							DebugLocation(366, 131);
							adaptor.AddChild(root_1, stream_func_type.NextTree());

						}
						stream_func_type.Reset();
						DebugLocation(366, 142);
						// SugarCpp.g:366:142: ( '~' )?
						if (stream_181.HasNext)
						{
							DebugLocation(366, 142);
							adaptor.AddChild(root_1, stream_181.NextNode());

						}
						stream_181.Reset();
						DebugLocation(366, 147);
						adaptor.AddChild(root_1, stream_func_name.NextTree());
						DebugLocation(366, 157);
						// SugarCpp.g:366:157: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(366, 157);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(366, 176);
						// SugarCpp.g:366:176: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(366, 176);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(366, 187);
						// SugarCpp.g:366:187: ^( Match_Expr ( match_item )+ )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(366, 189);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_2);

						DebugLocation(366, 200);
						if (!(stream_match_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_match_item.HasNext )
						{
							DebugLocation(366, 200);
							adaptor.AddChild(root_2, stream_match_item.NextTree());

						}
						stream_match_item.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(90); }


				}
				break;

			}
			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 29);
			LeaveRule("func_def", 29);
			LeaveRule_func_def();
		}
		DebugLocation(369, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block_item();
	partial void LeaveRule_stmt_block_item();

	// $ANTLR start "stmt_block_item"
	// SugarCpp.g:371:1: stmt_block_item : ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple );
	[GrammarRule("stmt_block_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item()
	{
		EnterRule_stmt_block_item();
		EnterRule("stmt_block_item", 30);
		TraceIn("stmt_block_item", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE200 = default(IToken);
		IToken NEWLINE202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken NEWLINE204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple201 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE200_tree = default(CommonTree);
		CommonTree NEWLINE202_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree NEWLINE204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_complex=new RewriteRuleSubtreeStream(adaptor,"rule stmt_complex");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "stmt_block_item");
		DebugLocation(371, 1);
		try
		{
			// SugarCpp.g:372:2: ( stmt_complex ( NEWLINE )+ -> stmt_complex | stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* ) -> stmt_simple )
			int alt96=2;
			try { DebugEnterDecision(96, false);
			int LA96_0 = input.LA(1);

			if ((LA96_0==141||(LA96_0>=145 && LA96_0<=147)||LA96_0==154||LA96_0==164||LA96_0==168||(LA96_0>=170 && LA96_0<=171)||LA96_0==176))
			{
				alt96 = 1;
			}
			else if ((LA96_0==IDENT||LA96_0==85||LA96_0==90||LA96_0==92||LA96_0==94||(LA96_0>=96 && LA96_0<=97)||(LA96_0>=100 && LA96_0<=101)||LA96_0==130||LA96_0==158||LA96_0==161||LA96_0==169||LA96_0==172||LA96_0==181))
			{
				alt96 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:372:4: stmt_complex ( NEWLINE )+
				{
				DebugLocation(372, 4);
				PushFollow(Follow._stmt_complex_in_stmt_block_item2431);
				stmt_complex199=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_complex.Add(stmt_complex199.Tree);
				DebugLocation(372, 17);
				// SugarCpp.g:372:17: ( NEWLINE )+
				int cnt92=0;
				try { DebugEnterSubRule(92);
				while (true)
				{
					int alt92=2;
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==NEWLINE))
					{
						alt92 = 1;
					}


					} finally { DebugExitDecision(92); }
					switch (alt92)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:372:17: NEWLINE
						{
						DebugLocation(372, 17);
						NEWLINE200=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2433); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE200);


						}
						break;

					default:
						if (cnt92 >= 1)
							goto loop92;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee92 = new EarlyExitException( 92, input );
						DebugRecognitionException(eee92);
						throw eee92;
					}
					cnt92++;
				}
				loop92:
					;

				} finally { DebugExitSubRule(92); }



				{
				// AST REWRITE
				// elements: stmt_complex
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 372:26: -> stmt_complex
				{
					DebugLocation(372, 29);
					adaptor.AddChild(root_0, stream_stmt_complex.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:373:4: stmt_simple ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				{
				DebugLocation(373, 4);
				PushFollow(Follow._stmt_simple_in_stmt_block_item2443);
				stmt_simple201=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple201.Tree);
				DebugLocation(373, 16);
				// SugarCpp.g:373:16: ( ( NEWLINE )+ | ';' ( NEWLINE )* )
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==NEWLINE))
				{
					alt95 = 1;
				}
				else if ((LA95_0==113))
				{
					alt95 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 95, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:373:17: ( NEWLINE )+
					{
					DebugLocation(373, 17);
					// SugarCpp.g:373:17: ( NEWLINE )+
					int cnt93=0;
					try { DebugEnterSubRule(93);
					while (true)
					{
						int alt93=2;
						try { DebugEnterDecision(93, false);
						int LA93_0 = input.LA(1);

						if ((LA93_0==NEWLINE))
						{
							alt93 = 1;
						}


						} finally { DebugExitDecision(93); }
						switch (alt93)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:373:17: NEWLINE
							{
							DebugLocation(373, 17);
							NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2446); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE202);


							}
							break;

						default:
							if (cnt93 >= 1)
								goto loop93;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee93 = new EarlyExitException( 93, input );
							DebugRecognitionException(eee93);
							throw eee93;
						}
						cnt93++;
					}
					loop93:
						;

					} finally { DebugExitSubRule(93); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:373:28: ';' ( NEWLINE )*
					{
					DebugLocation(373, 28);
					char_literal203=(IToken)Match(input,113,Follow._113_in_stmt_block_item2451); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal203);

					DebugLocation(373, 32);
					// SugarCpp.g:373:32: ( NEWLINE )*
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, false);
						int LA94_0 = input.LA(1);

						if ((LA94_0==NEWLINE))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch ( alt94 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:373:32: NEWLINE
							{
							DebugLocation(373, 32);
							NEWLINE204=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block_item2453); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE204);


							}
							break;

						default:
							goto loop94;
						}
					}

					loop94:
						;

					} finally { DebugExitSubRule(94); }


					}
					break;

				}
				} finally { DebugExitSubRule(95); }



				{
				// AST REWRITE
				// elements: stmt_simple
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 373:42: -> stmt_simple
				{
					DebugLocation(373, 45);
					adaptor.AddChild(root_0, stream_stmt_simple.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block_item", 30);
			LeaveRule("stmt_block_item", 30);
			LeaveRule_stmt_block_item();
		}
		DebugLocation(374, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block_item"); }
		return retval;

	}
	// $ANTLR end "stmt_block_item"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:376:1: stmt_block : INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 31);
		TraceIn("stmt_block", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT205 = default(IToken);
		IToken NEWLINE206 = default(IToken);
		IToken DEDENT208 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block_item207 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT205_tree = default(CommonTree);
		CommonTree NEWLINE206_tree = default(CommonTree);
		CommonTree DEDENT208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block_item");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(376, 1);
		try
		{
			// SugarCpp.g:377:2: ( INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT -> ^( Stmt_Block ( stmt_block_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:377:4: INDENT ( NEWLINE )* ( stmt_block_item )* DEDENT
			{
			DebugLocation(377, 4);
			INDENT205=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block2470); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT205);

			DebugLocation(377, 11);
			// SugarCpp.g:377:11: ( NEWLINE )*
			try { DebugEnterSubRule(97);
			while (true)
			{
				int alt97=2;
				try { DebugEnterDecision(97, false);
				int LA97_0 = input.LA(1);

				if ((LA97_0==NEWLINE))
				{
					alt97 = 1;
				}


				} finally { DebugExitDecision(97); }
				switch ( alt97 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:11: NEWLINE
					{
					DebugLocation(377, 11);
					NEWLINE206=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block2472); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE206);


					}
					break;

				default:
					goto loop97;
				}
			}

			loop97:
				;

			} finally { DebugExitSubRule(97); }

			DebugLocation(377, 20);
			// SugarCpp.g:377:20: ( stmt_block_item )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_0 = input.LA(1);

				if ((LA98_0==IDENT||LA98_0==85||LA98_0==90||LA98_0==92||LA98_0==94||(LA98_0>=96 && LA98_0<=97)||(LA98_0>=100 && LA98_0<=101)||LA98_0==130||LA98_0==141||(LA98_0>=145 && LA98_0<=147)||LA98_0==154||LA98_0==158||LA98_0==161||LA98_0==164||(LA98_0>=168 && LA98_0<=172)||LA98_0==176||LA98_0==181))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:377:20: stmt_block_item
					{
					DebugLocation(377, 20);
					PushFollow(Follow._stmt_block_item_in_stmt_block2475);
					stmt_block_item207=stmt_block_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block_item.Add(stmt_block_item207.Tree);

					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }

			DebugLocation(377, 37);
			DEDENT208=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block2478); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT208);



			{
			// AST REWRITE
			// elements: stmt_block_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 377:44: -> ^( Stmt_Block ( stmt_block_item )* )
			{
				DebugLocation(377, 47);
				// SugarCpp.g:377:47: ^( Stmt_Block ( stmt_block_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(377, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(377, 60);
				// SugarCpp.g:377:60: ( stmt_block_item )*
				while ( stream_stmt_block_item.HasNext )
				{
					DebugLocation(377, 60);
					adaptor.AddChild(root_1, stream_stmt_block_item.NextTree());

				}
				stream_stmt_block_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 31);
			LeaveRule("stmt_block", 31);
			LeaveRule_stmt_block();
		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:380:1: stmt : ( stmt_simple | stmt_complex );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 32);
		TraceIn("stmt", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_complex210 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(380, 1);
		try
		{
			// SugarCpp.g:381:2: ( stmt_simple | stmt_complex )
			int alt99=2;
			try { DebugEnterDecision(99, false);
			int LA99_0 = input.LA(1);

			if ((LA99_0==IDENT||LA99_0==85||LA99_0==90||LA99_0==92||LA99_0==94||(LA99_0>=96 && LA99_0<=97)||(LA99_0>=100 && LA99_0<=101)||LA99_0==130||LA99_0==158||LA99_0==161||LA99_0==169||LA99_0==172||LA99_0==181))
			{
				alt99 = 1;
			}
			else if ((LA99_0==141||(LA99_0>=145 && LA99_0<=147)||LA99_0==154||LA99_0==164||LA99_0==168||(LA99_0>=170 && LA99_0<=171)||LA99_0==176))
			{
				alt99 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:381:4: stmt_simple
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(381, 4);
				PushFollow(Follow._stmt_simple_in_stmt2498);
				stmt_simple209=stmt_simple();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_simple209.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:382:4: stmt_complex
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(382, 4);
				PushFollow(Follow._stmt_complex_in_stmt2503);
				stmt_complex210=stmt_complex();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_complex210.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 32);
			LeaveRule("stmt", 32);
			LeaveRule_stmt();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_simple();
	partial void LeaveRule_stmt_simple();

	// $ANTLR start "stmt_simple"
	// SugarCpp.g:385:1: stmt_simple : stmt_expr ;
	[GrammarRule("stmt_simple")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_simple()
	{
		EnterRule_stmt_simple();
		EnterRule("stmt_simple", 33);
		TraceIn("stmt_simple", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr211 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_simple");
		DebugLocation(385, 1);
		try
		{
			// SugarCpp.g:386:2: ( stmt_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:386:4: stmt_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(386, 4);
			PushFollow(Follow._stmt_expr_in_stmt_simple2514);
			stmt_expr211=stmt_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr211.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_simple", 33);
			LeaveRule("stmt_simple", 33);
			LeaveRule_stmt_simple();
		}
		DebugLocation(387, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_simple"); }
		return retval;

	}
	// $ANTLR end "stmt_simple"

	partial void EnterRule_stmt_complex();
	partial void LeaveRule_stmt_complex();

	// $ANTLR start "stmt_complex"
	// SugarCpp.g:389:1: stmt_complex : ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer );
	[GrammarRule("stmt_complex")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_complex()
	{
		EnterRule_stmt_complex();
		EnterRule("stmt_complex", 34);
		TraceIn("stmt_complex", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_if212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for213 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_switch216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_complex");
		DebugLocation(389, 1);
		try
		{
			// SugarCpp.g:390:2: ( stmt_if | stmt_for | stmt_while | stmt_try | stmt_switch | stmt_defer )
			int alt100=6;
			try { DebugEnterDecision(100, false);
			switch (input.LA(1))
			{
			case 147:
			case 170:
				{
				alt100 = 1;
				}
				break;
			case 146:
				{
				alt100 = 2;
				}
				break;
			case 154:
			case 171:
			case 176:
				{
				alt100 = 3;
				}
				break;
			case 168:
				{
				alt100 = 4;
				}
				break;
			case 164:
				{
				alt100 = 5;
				}
				break;
			case 141:
			case 145:
				{
				alt100 = 6;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:390:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(390, 4);
				PushFollow(Follow._stmt_if_in_stmt_complex2525);
				stmt_if212=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if212.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:391:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(391, 4);
				PushFollow(Follow._stmt_for_in_stmt_complex2530);
				stmt_for213=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for213.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:392:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(392, 4);
				PushFollow(Follow._stmt_while_in_stmt_complex2535);
				stmt_while214=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while214.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:393:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(393, 4);
				PushFollow(Follow._stmt_try_in_stmt_complex2540);
				stmt_try215=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try215.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:394:4: stmt_switch
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(394, 4);
				PushFollow(Follow._stmt_switch_in_stmt_complex2545);
				stmt_switch216=stmt_switch();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_switch216.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:395:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(395, 4);
				PushFollow(Follow._stmt_defer_in_stmt_complex2550);
				stmt_defer217=stmt_defer();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_defer217.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_complex", 34);
			LeaveRule("stmt_complex", 34);
			LeaveRule_stmt_complex();
		}
		DebugLocation(396, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_complex"); }
		return retval;

	}
	// $ANTLR end "stmt_complex"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:398:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 35);
		TraceIn("stmt_expr", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal218 = default(IToken);
		IToken string_literal220 = default(IToken);
		IToken string_literal222 = default(IToken);
		IToken string_literal224 = default(IToken);
		IToken string_literal226 = default(IToken);
		IToken char_literal228 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr219 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item229 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal218_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal222_tree = default(CommonTree);
		CommonTree string_literal224_tree = default(CommonTree);
		CommonTree string_literal226_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(398, 1);
		try
		{
			// SugarCpp.g:399:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:399:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			{
			DebugLocation(399, 4);
			// SugarCpp.g:399:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:399:5: a= stmt_expr_item
			{
			DebugLocation(399, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr2564);
			a=stmt_expr_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 399:22: -> $a
			{
				DebugLocation(399, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(399, 29);
			// SugarCpp.g:399:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' for_item ( ',' for_item )* -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) ) )*
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=6;
				try { DebugEnterDecision(102, false);
				switch (input.LA(1))
				{
				case 147:
					{
					alt102 = 1;
					}
					break;
				case 170:
					{
					alt102 = 2;
					}
					break;
				case 176:
					{
					alt102 = 3;
					}
					break;
				case 171:
					{
					alt102 = 4;
					}
					break;
				case 146:
					{
					alt102 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(102); }
				switch ( alt102 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:399:31: 'if' expr
					{
					DebugLocation(399, 31);
					string_literal218=(IToken)Match(input,147,Follow._147_in_stmt_expr2574); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_147.Add(string_literal218);

					DebugLocation(399, 36);
					PushFollow(Follow._expr_in_stmt_expr2576);
					expr219=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr219.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 399:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(399, 44);
						// SugarCpp.g:399:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(399, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(399, 59);
						// SugarCpp.g:399:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(399, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:400:13: 'unless' expr
					{
					DebugLocation(400, 13);
					string_literal220=(IToken)Match(input,170,Follow._170_in_stmt_expr2605); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_170.Add(string_literal220);

					DebugLocation(400, 22);
					PushFollow(Follow._expr_in_stmt_expr2607);
					expr221=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr221.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 400:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(400, 30);
						// SugarCpp.g:400:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(400, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(400, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(400, 49);
						// SugarCpp.g:400:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(400, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(400, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:401:13: 'while' expr
					{
					DebugLocation(401, 13);
					string_literal222=(IToken)Match(input,176,Follow._176_in_stmt_expr2636); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_176.Add(string_literal222);

					DebugLocation(401, 21);
					PushFollow(Follow._expr_in_stmt_expr2638);
					expr223=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr223.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 401:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(401, 29);
						// SugarCpp.g:401:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(401, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(401, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(401, 47);
						// SugarCpp.g:401:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(401, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(401, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:402:13: 'until' expr
					{
					DebugLocation(402, 13);
					string_literal224=(IToken)Match(input,171,Follow._171_in_stmt_expr2667); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_171.Add(string_literal224);

					DebugLocation(402, 21);
					PushFollow(Follow._expr_in_stmt_expr2669);
					expr225=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr225.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 402:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(402, 29);
						// SugarCpp.g:402:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(402, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(402, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(402, 47);
						// SugarCpp.g:402:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(402, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(402, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:403:13: 'for' for_item ( ',' for_item )*
					{
					DebugLocation(403, 13);
					string_literal226=(IToken)Match(input,146,Follow._146_in_stmt_expr2698); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_146.Add(string_literal226);

					DebugLocation(403, 19);
					PushFollow(Follow._for_item_in_stmt_expr2700);
					for_item227=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item227.Tree);
					DebugLocation(403, 28);
					// SugarCpp.g:403:28: ( ',' for_item )*
					try { DebugEnterSubRule(101);
					while (true)
					{
						int alt101=2;
						try { DebugEnterDecision(101, false);
						int LA101_0 = input.LA(1);

						if ((LA101_0==99))
						{
							alt101 = 1;
						}


						} finally { DebugExitDecision(101); }
						switch ( alt101 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:403:29: ',' for_item
							{
							DebugLocation(403, 29);
							char_literal228=(IToken)Match(input,99,Follow._99_in_stmt_expr2703); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal228);

							DebugLocation(403, 33);
							PushFollow(Follow._for_item_in_stmt_expr2705);
							for_item229=for_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_for_item.Add(for_item229.Tree);

							}
							break;

						default:
							goto loop101;
						}
					}

					loop101:
						;

					} finally { DebugExitSubRule(101); }



					{
					// AST REWRITE
					// elements: for_item, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 403:44: -> ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(403, 47);
						// SugarCpp.g:403:47: ^( Stmt_For ( for_item )* ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

						DebugLocation(403, 58);
						// SugarCpp.g:403:58: ( for_item )*
						while ( stream_for_item.HasNext )
						{
							DebugLocation(403, 58);
							adaptor.AddChild(root_1, stream_for_item.NextTree());

						}
						stream_for_item.Reset();
						DebugLocation(403, 68);
						// SugarCpp.g:403:68: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(403, 70);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(403, 82);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop102;
				}
			}

			loop102:
				;

			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 35);
			LeaveRule("stmt_expr", 35);
			LeaveRule_stmt_expr();
		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:407:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 36);
		TraceIn("stmt_expr_item", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef233 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify234 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(407, 1);
		try
		{
			// SugarCpp.g:408:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt103=5;
			try { DebugEnterDecision(103, false);
			try
			{
				alt103 = dfa103.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(103); }
			switch (alt103)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:408:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2747);
				stmt_alloc230=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc230.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:409:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(409, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2752);
				stmt_return231=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return231.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:410:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(410, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2757);
				stmt_using232=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using232.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:411:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(411, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2762);
				stmt_typedef233=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef233.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:412:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(412, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2767);
				stmt_modify234=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify234.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 36);
			LeaveRule("stmt_expr_item", 36);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:415:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 37);
		TraceIn("stmt_defer", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal235 = default(IToken);
		IToken string_literal237 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt238 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree string_literal237_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(415, 1);
		try
		{
			// SugarCpp.g:416:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt104=2;
			try { DebugEnterDecision(104, false);
			int LA104_0 = input.LA(1);

			if ((LA104_0==141))
			{
				alt104 = 1;
			}
			else if ((LA104_0==145))
			{
				alt104 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:416:4: 'defer' stmt
				{
				DebugLocation(416, 4);
				string_literal235=(IToken)Match(input,141,Follow._141_in_stmt_defer2778); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_141.Add(string_literal235);

				DebugLocation(416, 12);
				PushFollow(Follow._stmt_in_stmt_defer2780);
				stmt236=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt236.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 416:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(416, 20);
					// SugarCpp.g:416:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(416, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(416, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:417:4: 'finally' stmt
				{
				DebugLocation(417, 4);
				string_literal237=(IToken)Match(input,145,Follow._145_in_stmt_defer2793); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_145.Add(string_literal237);

				DebugLocation(417, 14);
				PushFollow(Follow._stmt_in_stmt_defer2795);
				stmt238=stmt();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt.Add(stmt238.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 417:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(417, 22);
					// SugarCpp.g:417:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(417, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(417, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 37);
			LeaveRule("stmt_defer", 37);
			LeaveRule_stmt_defer();
		}
		DebugLocation(418, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:420:1: stmt_typedef : 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 38);
		TraceIn("stmt_typedef", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal239 = default(IToken);
		IToken char_literal241 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name242 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal239_tree = default(CommonTree);
		CommonTree char_literal241_tree = default(CommonTree);
		RewriteRuleITokenStream stream_169=new RewriteRuleITokenStream(adaptor,"token 169");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(420, 1);
		try
		{
			// SugarCpp.g:421:2: ( 'type' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:421:4: 'type' ident '=' type_name
			{
			DebugLocation(421, 4);
			string_literal239=(IToken)Match(input,169,Follow._169_in_stmt_typedef2814); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_169.Add(string_literal239);

			DebugLocation(421, 11);
			PushFollow(Follow._ident_in_stmt_typedef2816);
			ident240=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident240.Tree);
			DebugLocation(421, 17);
			char_literal241=(IToken)Match(input,120,Follow._120_in_stmt_typedef2818); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_120.Add(char_literal241);

			DebugLocation(421, 21);
			PushFollow(Follow._type_name_in_stmt_typedef2820);
			type_name242=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name242.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 421:31: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(421, 34);
				// SugarCpp.g:421:34: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(421, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(421, 49);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(421, 59);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 38);
			LeaveRule("stmt_typedef", 38);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:424:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 39);
		TraceIn("stmt_using_item", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal244 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident243 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal244_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(424, 36);
		try
		{
			// SugarCpp.g:424:16: ( ident | 'namespace' )
			int alt105=2;
			try { DebugEnterDecision(105, false);
			int LA105_0 = input.LA(1);

			if ((LA105_0==IDENT))
			{
				alt105 = 1;
			}
			else if ((LA105_0==156))
			{
				alt105 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 105, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(105); }
			switch (alt105)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:424:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(424, 18);
				PushFollow(Follow._ident_in_stmt_using_item2839);
				ident243=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident243.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:424:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(424, 26);
				string_literal244=(IToken)Match(input,156,Follow._156_in_stmt_using_item2843); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal244_tree = (CommonTree)adaptor.Create(string_literal244);
				adaptor.AddChild(root_0, string_literal244_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 39);
			LeaveRule("stmt_using_item", 39);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(424, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:425:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 40);
		TraceIn("stmt_using", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item246 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal245_tree = default(CommonTree);
		RewriteRuleITokenStream stream_172=new RewriteRuleITokenStream(adaptor,"token 172");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(425, 1);
		try
		{
			// SugarCpp.g:426:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:426:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(426, 4);
			string_literal245=(IToken)Match(input,172,Follow._172_in_stmt_using2851); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_172.Add(string_literal245);

			DebugLocation(426, 12);
			// SugarCpp.g:426:12: ( stmt_using_item )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==IDENT||LA106_0==156))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:426:12: stmt_using_item
					{
					DebugLocation(426, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2853);
					stmt_using_item246=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item246.Tree);

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 426:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(426, 32);
				// SugarCpp.g:426:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(426, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(426, 45);
				// SugarCpp.g:426:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(426, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 40);
			LeaveRule("stmt_using", 40);
			LeaveRule_stmt_using();
		}
		DebugLocation(427, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:429:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 41);
		TraceIn("stmt_return", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal247 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr248 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal247_tree = default(CommonTree);
		RewriteRuleITokenStream stream_161=new RewriteRuleITokenStream(adaptor,"token 161");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(429, 1);
		try
		{
			// SugarCpp.g:430:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:430:4: 'return' ( expr )?
			{
			DebugLocation(430, 4);
			string_literal247=(IToken)Match(input,161,Follow._161_in_stmt_return2874); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_161.Add(string_literal247);

			DebugLocation(430, 13);
			// SugarCpp.g:430:13: ( expr )?
			int alt107=2;
			try { DebugEnterSubRule(107);
			try { DebugEnterDecision(107, false);
			int LA107_0 = input.LA(1);

			if ((LA107_0==IDENT||LA107_0==NUMBER||LA107_0==STRING||LA107_0==85||LA107_0==90||LA107_0==92||LA107_0==94||(LA107_0>=96 && LA107_0<=97)||(LA107_0>=100 && LA107_0<=101)||(LA107_0>=130 && LA107_0<=131)||LA107_0==152||LA107_0==155||(LA107_0>=157 && LA107_0<=158)||LA107_0==181))
			{
				alt107 = 1;
			}
			} finally { DebugExitDecision(107); }
			switch (alt107)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:430:13: expr
				{
				DebugLocation(430, 13);
				PushFollow(Follow._expr_in_stmt_return2876);
				expr248=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr248.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(107); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 430:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(430, 22);
				// SugarCpp.g:430:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(430, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(430, 36);
				// SugarCpp.g:430:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(430, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 41);
			LeaveRule("stmt_return", 41);
			LeaveRule_stmt_return();
		}
		DebugLocation(431, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_inline_stmt_block();
	partial void LeaveRule_inline_stmt_block();

	// $ANTLR start "inline_stmt_block"
	// SugarCpp.g:433:1: inline_stmt_block : stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) ;
	[GrammarRule("inline_stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block()
	{
		EnterRule_inline_stmt_block();
		EnterRule("inline_stmt_block", 42);
		TraceIn("inline_stmt_block", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal250 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_simple251 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal250_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_stmt_simple=new RewriteRuleSubtreeStream(adaptor,"rule stmt_simple");
		try { DebugEnterRule(GrammarFileName, "inline_stmt_block");
		DebugLocation(433, 1);
		try
		{
			// SugarCpp.g:434:2: ( stmt_simple ( ';' stmt_simple )* -> ^( Stmt_Block ( stmt_simple )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:434:4: stmt_simple ( ';' stmt_simple )*
			{
			DebugLocation(434, 4);
			PushFollow(Follow._stmt_simple_in_inline_stmt_block2897);
			stmt_simple249=stmt_simple();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple249.Tree);
			DebugLocation(434, 16);
			// SugarCpp.g:434:16: ( ';' stmt_simple )*
			try { DebugEnterSubRule(108);
			while (true)
			{
				int alt108=2;
				try { DebugEnterDecision(108, false);
				int LA108_0 = input.LA(1);

				if ((LA108_0==113))
				{
					alt108 = 1;
				}


				} finally { DebugExitDecision(108); }
				switch ( alt108 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:434:17: ';' stmt_simple
					{
					DebugLocation(434, 17);
					char_literal250=(IToken)Match(input,113,Follow._113_in_inline_stmt_block2900); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(char_literal250);

					DebugLocation(434, 21);
					PushFollow(Follow._stmt_simple_in_inline_stmt_block2902);
					stmt_simple251=stmt_simple();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_simple.Add(stmt_simple251.Tree);

					}
					break;

				default:
					goto loop108;
				}
			}

			loop108:
				;

			} finally { DebugExitSubRule(108); }



			{
			// AST REWRITE
			// elements: stmt_simple
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 434:35: -> ^( Stmt_Block ( stmt_simple )+ )
			{
				DebugLocation(434, 38);
				// SugarCpp.g:434:38: ^( Stmt_Block ( stmt_simple )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(434, 40);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(434, 51);
				if (!(stream_stmt_simple.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_stmt_simple.HasNext )
				{
					DebugLocation(434, 51);
					adaptor.AddChild(root_1, stream_stmt_simple.NextTree());

				}
				stream_stmt_simple.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("inline_stmt_block", 42);
			LeaveRule("inline_stmt_block", 42);
			LeaveRule_inline_stmt_block();
		}
		DebugLocation(435, 1);
		} finally { DebugExitRule(GrammarFileName, "inline_stmt_block"); }
		return retval;

	}
	// $ANTLR end "inline_stmt_block"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:437:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 43);
		TraceIn("stmt_if", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal252 = default(IToken);
		IToken NEWLINE254 = default(IToken);
		IToken NEWLINE256 = default(IToken);
		IToken string_literal257 = default(IToken);
		IToken NEWLINE258 = default(IToken);
		IToken string_literal260 = default(IToken);
		IToken string_literal262 = default(IToken);
		IToken NEWLINE264 = default(IToken);
		IToken NEWLINE266 = default(IToken);
		IToken string_literal267 = default(IToken);
		IToken NEWLINE268 = default(IToken);
		IToken string_literal270 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr253 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block255 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block261 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr263 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block265 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block269 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block271 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal252_tree = default(CommonTree);
		CommonTree NEWLINE254_tree = default(CommonTree);
		CommonTree NEWLINE256_tree = default(CommonTree);
		CommonTree string_literal257_tree = default(CommonTree);
		CommonTree NEWLINE258_tree = default(CommonTree);
		CommonTree string_literal260_tree = default(CommonTree);
		CommonTree string_literal262_tree = default(CommonTree);
		CommonTree NEWLINE264_tree = default(CommonTree);
		CommonTree NEWLINE266_tree = default(CommonTree);
		CommonTree string_literal267_tree = default(CommonTree);
		CommonTree NEWLINE268_tree = default(CommonTree);
		CommonTree string_literal270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_170=new RewriteRuleITokenStream(adaptor,"token 170");
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(437, 1);
		try
		{
			// SugarCpp.g:438:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) ) )
			int alt119=2;
			try { DebugEnterDecision(119, false);
			int LA119_0 = input.LA(1);

			if ((LA119_0==147))
			{
				alt119 = 1;
			}
			else if ((LA119_0==170))
			{
				alt119 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 119, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:438:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				{
				DebugLocation(438, 4);
				string_literal252=(IToken)Match(input,147,Follow._147_in_stmt_if2924); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_147.Add(string_literal252);

				DebugLocation(438, 9);
				PushFollow(Follow._expr_in_stmt_if2926);
				expr253=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr253.Tree);
				DebugLocation(438, 14);
				// SugarCpp.g:438:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_If expr inline_stmt_block ) )
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==NEWLINE))
				{
					alt113 = 1;
				}
				else if ((LA113_0==165))
				{
					alt113 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 113, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:438:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(438, 15);
					// SugarCpp.g:438:15: ( NEWLINE )+
					int cnt109=0;
					try { DebugEnterSubRule(109);
					while (true)
					{
						int alt109=2;
						try { DebugEnterDecision(109, false);
						int LA109_0 = input.LA(1);

						if ((LA109_0==NEWLINE))
						{
							alt109 = 1;
						}


						} finally { DebugExitDecision(109); }
						switch (alt109)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:438:15: NEWLINE
							{
							DebugLocation(438, 15);
							NEWLINE254=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2929); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE254);


							}
							break;

						default:
							if (cnt109 >= 1)
								goto loop109;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee109 = new EarlyExitException( 109, input );
							DebugRecognitionException(eee109);
							throw eee109;
						}
						cnt109++;
					}
					loop109:
						;

					} finally { DebugExitSubRule(109); }

					DebugLocation(438, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2932);
					stmt_block255=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block255.Tree);
					DebugLocation(438, 35);
					// SugarCpp.g:438:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt112=2;
					try { DebugEnterSubRule(112);
					try { DebugEnterDecision(112, false);
					try
					{
						alt112 = dfa112.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(112); }
					switch (alt112)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:438:36: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(438, 36);
						// SugarCpp.g:438:36: ( NEWLINE )*
						try { DebugEnterSubRule(110);
						while (true)
						{
							int alt110=2;
							try { DebugEnterDecision(110, false);
							int LA110_0 = input.LA(1);

							if ((LA110_0==NEWLINE))
							{
								alt110 = 1;
							}


							} finally { DebugExitDecision(110); }
							switch ( alt110 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:438:36: NEWLINE
								{
								DebugLocation(438, 36);
								NEWLINE256=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2935); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE256);


								}
								break;

							default:
								goto loop110;
							}
						}

						loop110:
							;

						} finally { DebugExitSubRule(110); }

						DebugLocation(438, 45);
						string_literal257=(IToken)Match(input,143,Follow._143_in_stmt_if2938); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_143.Add(string_literal257);

						DebugLocation(438, 52);
						// SugarCpp.g:438:52: ( NEWLINE )+
						int cnt111=0;
						try { DebugEnterSubRule(111);
						while (true)
						{
							int alt111=2;
							try { DebugEnterDecision(111, false);
							int LA111_0 = input.LA(1);

							if ((LA111_0==NEWLINE))
							{
								alt111 = 1;
							}


							} finally { DebugExitDecision(111); }
							switch (alt111)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:438:52: NEWLINE
								{
								DebugLocation(438, 52);
								NEWLINE258=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2940); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE258);


								}
								break;

							default:
								if (cnt111 >= 1)
									goto loop111;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee111 = new EarlyExitException( 111, input );
								DebugRecognitionException(eee111);
								throw eee111;
							}
							cnt111++;
						}
						loop111:
							;

						} finally { DebugExitSubRule(111); }

						DebugLocation(438, 61);
						PushFollow(Follow._stmt_block_in_stmt_if2943);
						stmt_block259=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block259.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(112); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:74: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(438, 77);
						// SugarCpp.g:438:77: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 79);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(438, 87);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(438, 92);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(438, 103);
						// SugarCpp.g:438:103: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(438, 103);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:439:16: 'then' inline_stmt_block
					{
					DebugLocation(439, 16);
					string_literal260=(IToken)Match(input,165,Follow._165_in_stmt_if2975); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal260);

					DebugLocation(439, 23);
					PushFollow(Follow._inline_stmt_block_in_stmt_if2977);
					inline_stmt_block261=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block261.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 439:41: -> ^( Stmt_If expr inline_stmt_block )
					{
						DebugLocation(439, 44);
						// SugarCpp.g:439:44: ^( Stmt_If expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(439, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(439, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(439, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(113); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:441:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				{
				DebugLocation(441, 4);
				string_literal262=(IToken)Match(input,170,Follow._170_in_stmt_if2998); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_170.Add(string_literal262);

				DebugLocation(441, 13);
				PushFollow(Follow._expr_in_stmt_if3000);
				expr263=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr263.Tree);
				DebugLocation(441, 18);
				// SugarCpp.g:441:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' inline_stmt_block -> ^( Stmt_Unless expr inline_stmt_block ) )
				int alt118=2;
				try { DebugEnterSubRule(118);
				try { DebugEnterDecision(118, false);
				int LA118_0 = input.LA(1);

				if ((LA118_0==NEWLINE))
				{
					alt118 = 1;
				}
				else if ((LA118_0==165))
				{
					alt118 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 118, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(118); }
				switch (alt118)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:441:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					{
					DebugLocation(441, 19);
					// SugarCpp.g:441:19: ( NEWLINE )+
					int cnt114=0;
					try { DebugEnterSubRule(114);
					while (true)
					{
						int alt114=2;
						try { DebugEnterDecision(114, false);
						int LA114_0 = input.LA(1);

						if ((LA114_0==NEWLINE))
						{
							alt114 = 1;
						}


						} finally { DebugExitDecision(114); }
						switch (alt114)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:441:19: NEWLINE
							{
							DebugLocation(441, 19);
							NEWLINE264=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3003); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE264);


							}
							break;

						default:
							if (cnt114 >= 1)
								goto loop114;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee114 = new EarlyExitException( 114, input );
							DebugRecognitionException(eee114);
							throw eee114;
						}
						cnt114++;
					}
					loop114:
						;

					} finally { DebugExitSubRule(114); }

					DebugLocation(441, 28);
					PushFollow(Follow._stmt_block_in_stmt_if3006);
					stmt_block265=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block265.Tree);
					DebugLocation(441, 39);
					// SugarCpp.g:441:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?
					int alt117=2;
					try { DebugEnterSubRule(117);
					try { DebugEnterDecision(117, false);
					try
					{
						alt117 = dfa117.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(117); }
					switch (alt117)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:441:40: ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block
						{
						DebugLocation(441, 40);
						// SugarCpp.g:441:40: ( NEWLINE )*
						try { DebugEnterSubRule(115);
						while (true)
						{
							int alt115=2;
							try { DebugEnterDecision(115, false);
							int LA115_0 = input.LA(1);

							if ((LA115_0==NEWLINE))
							{
								alt115 = 1;
							}


							} finally { DebugExitDecision(115); }
							switch ( alt115 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:441:40: NEWLINE
								{
								DebugLocation(441, 40);
								NEWLINE266=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3009); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE266);


								}
								break;

							default:
								goto loop115;
							}
						}

						loop115:
							;

						} finally { DebugExitSubRule(115); }

						DebugLocation(441, 49);
						string_literal267=(IToken)Match(input,143,Follow._143_in_stmt_if3012); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_143.Add(string_literal267);

						DebugLocation(441, 56);
						// SugarCpp.g:441:56: ( NEWLINE )+
						int cnt116=0;
						try { DebugEnterSubRule(116);
						while (true)
						{
							int alt116=2;
							try { DebugEnterDecision(116, false);
							int LA116_0 = input.LA(1);

							if ((LA116_0==NEWLINE))
							{
								alt116 = 1;
							}


							} finally { DebugExitDecision(116); }
							switch (alt116)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:441:56: NEWLINE
								{
								DebugLocation(441, 56);
								NEWLINE268=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if3014); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE268);


								}
								break;

							default:
								if (cnt116 >= 1)
									goto loop116;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee116 = new EarlyExitException( 116, input );
								DebugRecognitionException(eee116);
								throw eee116;
							}
							cnt116++;
						}
						loop116:
							;

						} finally { DebugExitSubRule(116); }

						DebugLocation(441, 65);
						PushFollow(Follow._stmt_block_in_stmt_if3017);
						stmt_block269=stmt_block();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_stmt_block.Add(stmt_block269.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(117); }



					{
					// AST REWRITE
					// elements: stmt_block, stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 441:78: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(441, 81);
						// SugarCpp.g:441:81: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(441, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(441, 95);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(441, 100);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(441, 111);
						// SugarCpp.g:441:111: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(441, 111);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:442:20: 'then' inline_stmt_block
					{
					DebugLocation(442, 20);
					string_literal270=(IToken)Match(input,165,Follow._165_in_stmt_if3053); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal270);

					DebugLocation(442, 27);
					PushFollow(Follow._inline_stmt_block_in_stmt_if3055);
					inline_stmt_block271=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block271.Tree);


					{
					// AST REWRITE
					// elements: expr, inline_stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:45: -> ^( Stmt_Unless expr inline_stmt_block )
					{
						DebugLocation(442, 48);
						// SugarCpp.g:442:48: ^( Stmt_Unless expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(442, 62);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(442, 67);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(118); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 43);
			LeaveRule("stmt_if", 43);
			LeaveRule_stmt_if();
		}
		DebugLocation(444, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:446:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 44);
		TraceIn("stmt_while", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal272 = default(IToken);
		IToken NEWLINE274 = default(IToken);
		IToken string_literal276 = default(IToken);
		IToken string_literal278 = default(IToken);
		IToken NEWLINE280 = default(IToken);
		IToken string_literal282 = default(IToken);
		IToken string_literal284 = default(IToken);
		IToken NEWLINE286 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr273 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block275 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block277 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block283 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr285 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block287 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal272_tree = default(CommonTree);
		CommonTree NEWLINE274_tree = default(CommonTree);
		CommonTree string_literal276_tree = default(CommonTree);
		CommonTree string_literal278_tree = default(CommonTree);
		CommonTree NEWLINE280_tree = default(CommonTree);
		CommonTree string_literal282_tree = default(CommonTree);
		CommonTree string_literal284_tree = default(CommonTree);
		CommonTree NEWLINE286_tree = default(CommonTree);
		RewriteRuleITokenStream stream_171=new RewriteRuleITokenStream(adaptor,"token 171");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_176=new RewriteRuleITokenStream(adaptor,"token 176");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(446, 1);
		try
		{
			// SugarCpp.g:447:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) ) | 'loop' ( expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_Loop ( expr )? stmt_block ) )
			int alt126=3;
			try { DebugEnterDecision(126, false);
			switch (input.LA(1))
			{
			case 176:
				{
				alt126 = 1;
				}
				break;
			case 171:
				{
				alt126 = 2;
				}
				break;
			case 154:
				{
				alt126 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 126, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:447:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				{
				DebugLocation(447, 4);
				string_literal272=(IToken)Match(input,176,Follow._176_in_stmt_while3086); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_176.Add(string_literal272);

				DebugLocation(447, 12);
				PushFollow(Follow._expr_in_stmt_while3088);
				expr273=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr273.Tree);
				DebugLocation(447, 17);
				// SugarCpp.g:447:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_While expr inline_stmt_block ) )
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_0 = input.LA(1);

				if ((LA121_0==NEWLINE))
				{
					alt121 = 1;
				}
				else if ((LA121_0==165))
				{
					alt121 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(447, 19);
					// SugarCpp.g:447:19: ( NEWLINE )+
					int cnt120=0;
					try { DebugEnterSubRule(120);
					while (true)
					{
						int alt120=2;
						try { DebugEnterDecision(120, false);
						int LA120_0 = input.LA(1);

						if ((LA120_0==NEWLINE))
						{
							alt120 = 1;
						}


						} finally { DebugExitDecision(120); }
						switch (alt120)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:447:19: NEWLINE
							{
							DebugLocation(447, 19);
							NEWLINE274=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3092); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE274);


							}
							break;

						default:
							if (cnt120 >= 1)
								goto loop120;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee120 = new EarlyExitException( 120, input );
							DebugRecognitionException(eee120);
							throw eee120;
						}
						cnt120++;
					}
					loop120:
						;

					} finally { DebugExitSubRule(120); }

					DebugLocation(447, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3095);
					stmt_block275=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block275.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 447:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(447, 42);
						// SugarCpp.g:447:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(447, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(447, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(447, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:448:13: 'then' inline_stmt_block
					{
					DebugLocation(448, 13);
					string_literal276=(IToken)Match(input,165,Follow._165_in_stmt_while3119); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal276);

					DebugLocation(448, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3121);
					inline_stmt_block277=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block277.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 448:38: -> ^( Stmt_While expr inline_stmt_block )
					{
						DebugLocation(448, 41);
						// SugarCpp.g:448:41: ^( Stmt_While expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(448, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(448, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(448, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(121); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:450:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				{
				DebugLocation(450, 4);
				string_literal278=(IToken)Match(input,171,Follow._171_in_stmt_while3145); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_171.Add(string_literal278);

				DebugLocation(450, 12);
				PushFollow(Follow._expr_in_stmt_while3147);
				expr279=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr279.Tree);
				DebugLocation(450, 17);
				// SugarCpp.g:450:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' inline_stmt_block -> ^( Stmt_Until expr inline_stmt_block ) )
				int alt123=2;
				try { DebugEnterSubRule(123);
				try { DebugEnterDecision(123, false);
				int LA123_0 = input.LA(1);

				if ((LA123_0==NEWLINE))
				{
					alt123 = 1;
				}
				else if ((LA123_0==165))
				{
					alt123 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 123, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(123); }
				switch (alt123)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:450:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(450, 19);
					// SugarCpp.g:450:19: ( NEWLINE )+
					int cnt122=0;
					try { DebugEnterSubRule(122);
					while (true)
					{
						int alt122=2;
						try { DebugEnterDecision(122, false);
						int LA122_0 = input.LA(1);

						if ((LA122_0==NEWLINE))
						{
							alt122 = 1;
						}


						} finally { DebugExitDecision(122); }
						switch (alt122)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:450:19: NEWLINE
							{
							DebugLocation(450, 19);
							NEWLINE280=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3151); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE280);


							}
							break;

						default:
							if (cnt122 >= 1)
								goto loop122;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee122 = new EarlyExitException( 122, input );
							DebugRecognitionException(eee122);
							throw eee122;
						}
						cnt122++;
					}
					loop122:
						;

					} finally { DebugExitSubRule(122); }

					DebugLocation(450, 28);
					PushFollow(Follow._stmt_block_in_stmt_while3154);
					stmt_block281=stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_block.Add(stmt_block281.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 450:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(450, 42);
						// SugarCpp.g:450:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(450, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(450, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(450, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:451:13: 'then' inline_stmt_block
					{
					DebugLocation(451, 13);
					string_literal282=(IToken)Match(input,165,Follow._165_in_stmt_while3178); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_165.Add(string_literal282);

					DebugLocation(451, 20);
					PushFollow(Follow._inline_stmt_block_in_stmt_while3180);
					inline_stmt_block283=inline_stmt_block();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block283.Tree);


					{
					// AST REWRITE
					// elements: inline_stmt_block, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:38: -> ^( Stmt_Until expr inline_stmt_block )
					{
						DebugLocation(451, 41);
						// SugarCpp.g:451:41: ^( Stmt_Until expr inline_stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 43);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(451, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(451, 59);
						adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(123); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:453:4: 'loop' ( expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(453, 4);
				string_literal284=(IToken)Match(input,154,Follow._154_in_stmt_while3204); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_154.Add(string_literal284);

				DebugLocation(453, 11);
				// SugarCpp.g:453:11: ( expr )?
				int alt124=2;
				try { DebugEnterSubRule(124);
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==IDENT||LA124_0==NUMBER||LA124_0==STRING||LA124_0==85||LA124_0==90||LA124_0==92||LA124_0==94||(LA124_0>=96 && LA124_0<=97)||(LA124_0>=100 && LA124_0<=101)||(LA124_0>=130 && LA124_0<=131)||LA124_0==152||LA124_0==155||(LA124_0>=157 && LA124_0<=158)||LA124_0==181))
				{
					alt124 = 1;
				}
				} finally { DebugExitDecision(124); }
				switch (alt124)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:453:11: expr
					{
					DebugLocation(453, 11);
					PushFollow(Follow._expr_in_stmt_while3206);
					expr285=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr285.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(124); }

				DebugLocation(453, 17);
				// SugarCpp.g:453:17: ( NEWLINE )+
				int cnt125=0;
				try { DebugEnterSubRule(125);
				while (true)
				{
					int alt125=2;
					try { DebugEnterDecision(125, false);
					int LA125_0 = input.LA(1);

					if ((LA125_0==NEWLINE))
					{
						alt125 = 1;
					}


					} finally { DebugExitDecision(125); }
					switch (alt125)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:453:17: NEWLINE
						{
						DebugLocation(453, 17);
						NEWLINE286=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while3209); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE286);


						}
						break;

					default:
						if (cnt125 >= 1)
							goto loop125;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee125 = new EarlyExitException( 125, input );
						DebugRecognitionException(eee125);
						throw eee125;
					}
					cnt125++;
				}
				loop125:
					;

				} finally { DebugExitSubRule(125); }

				DebugLocation(453, 26);
				PushFollow(Follow._stmt_block_in_stmt_while3212);
				stmt_block287=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block287.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 453:37: -> ^( Stmt_Loop ( expr )? stmt_block )
				{
					DebugLocation(453, 40);
					// SugarCpp.g:453:40: ^( Stmt_Loop ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(453, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(453, 52);
					// SugarCpp.g:453:52: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(453, 52);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(453, 58);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 44);
			LeaveRule("stmt_while", 44);
			LeaveRule_stmt_while();
		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_for_range();
	partial void LeaveRule_for_range();

	// $ANTLR start "for_range"
	// SugarCpp.g:456:1: for_range : ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) ;
	[GrammarRule("for_range")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_range()
	{
		EnterRule_for_range();
		EnterRule("for_range", 45);
		TraceIn("for_range", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal289 = default(IToken);
		IToken string_literal290 = default(IToken);
		IToken string_literal291 = default(IToken);
		IToken string_literal292 = default(IToken);
		IToken string_literal293 = default(IToken);
		IToken string_literal294 = default(IToken);
		IToken string_literal295 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> c = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident288 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal289_tree = default(CommonTree);
		CommonTree string_literal290_tree = default(CommonTree);
		CommonTree string_literal291_tree = default(CommonTree);
		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree string_literal293_tree = default(CommonTree);
		CommonTree string_literal294_tree = default(CommonTree);
		CommonTree string_literal295_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_166=new RewriteRuleITokenStream(adaptor,"token 166");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleITokenStream stream_167=new RewriteRuleITokenStream(adaptor,"token 167");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_range");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: ident '<-' a= expr ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			{
			DebugLocation(457, 4);
			PushFollow(Follow._ident_in_for_range3234);
			ident288=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident288.Tree);
			DebugLocation(457, 10);
			string_literal289=(IToken)Match(input,115,Follow._115_in_for_range3236); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(string_literal289);

			DebugLocation(457, 16);
			PushFollow(Follow._expr_in_for_range3240);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);
			DebugLocation(457, 22);
			// SugarCpp.g:457:22: ( 'to' b= expr ( 'by' c= expr )? -> ^( For_Item_To ident $a $b ( $c)? ) | 'til' b= expr ( 'by' c= expr )? -> ^( For_Item_Til ident $a $b ( $c)? ) | 'downto' b= expr ( 'by' c= expr )? -> ^( For_Item_Down_To ident $a $b ( $c)? ) | -> ^( For_Item_Each ident $a) )
			int alt130=4;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			switch (input.LA(1))
			{
			case 167:
				{
				alt130 = 1;
				}
				break;
			case 166:
				{
				alt130 = 2;
				}
				break;
			case 142:
				{
				alt130 = 3;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 99:
			case 113:
			case 132:
			case 146:
			case 147:
			case 149:
			case 170:
			case 171:
			case 176:
				{
				alt130 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 130, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:457:24: 'to' b= expr ( 'by' c= expr )?
				{
				DebugLocation(457, 24);
				string_literal290=(IToken)Match(input,167,Follow._167_in_for_range3244); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_167.Add(string_literal290);

				DebugLocation(457, 30);
				PushFollow(Follow._expr_in_for_range3248);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(457, 36);
				// SugarCpp.g:457:36: ( 'by' c= expr )?
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==137))
				{
					alt127 = 1;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:457:37: 'by' c= expr
					{
					DebugLocation(457, 37);
					string_literal291=(IToken)Match(input,137,Follow._137_in_for_range3251); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal291);

					DebugLocation(457, 43);
					PushFollow(Follow._expr_in_for_range3255);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(127); }



				{
				// AST REWRITE
				// elements: a, b, ident, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 457:51: -> ^( For_Item_To ident $a $b ( $c)? )
				{
					DebugLocation(457, 54);
					// SugarCpp.g:457:54: ^( For_Item_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(457, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_To, "For_Item_To"), root_1);

					DebugLocation(457, 68);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(457, 75);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(457, 78);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(457, 81);
					// SugarCpp.g:457:81: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(457, 81);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:458:9: 'til' b= expr ( 'by' c= expr )?
				{
				DebugLocation(458, 9);
				string_literal292=(IToken)Match(input,166,Follow._166_in_for_range3285); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_166.Add(string_literal292);

				DebugLocation(458, 16);
				PushFollow(Follow._expr_in_for_range3289);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(458, 22);
				// SugarCpp.g:458:22: ( 'by' c= expr )?
				int alt128=2;
				try { DebugEnterSubRule(128);
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==137))
				{
					alt128 = 1;
				}
				} finally { DebugExitDecision(128); }
				switch (alt128)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:458:23: 'by' c= expr
					{
					DebugLocation(458, 23);
					string_literal293=(IToken)Match(input,137,Follow._137_in_for_range3292); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal293);

					DebugLocation(458, 29);
					PushFollow(Follow._expr_in_for_range3296);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(128); }



				{
				// AST REWRITE
				// elements: a, ident, b, c
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 458:37: -> ^( For_Item_Til ident $a $b ( $c)? )
				{
					DebugLocation(458, 40);
					// SugarCpp.g:458:40: ^( For_Item_Til ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(458, 42);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Til, "For_Item_Til"), root_1);

					DebugLocation(458, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(458, 62);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(458, 65);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(458, 68);
					// SugarCpp.g:458:68: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(458, 68);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:459:9: 'downto' b= expr ( 'by' c= expr )?
				{
				DebugLocation(459, 9);
				string_literal294=(IToken)Match(input,142,Follow._142_in_for_range3326); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_142.Add(string_literal294);

				DebugLocation(459, 19);
				PushFollow(Follow._expr_in_for_range3330);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(459, 25);
				// SugarCpp.g:459:25: ( 'by' c= expr )?
				int alt129=2;
				try { DebugEnterSubRule(129);
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==137))
				{
					alt129 = 1;
				}
				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:459:26: 'by' c= expr
					{
					DebugLocation(459, 26);
					string_literal295=(IToken)Match(input,137,Follow._137_in_for_range3333); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_137.Add(string_literal295);

					DebugLocation(459, 32);
					PushFollow(Follow._expr_in_for_range3337);
					c=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(c.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(129); }



				{
				// AST REWRITE
				// elements: ident, b, c, a
				// token labels: 
				// rule labels: retval, b, c, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 459:40: -> ^( For_Item_Down_To ident $a $b ( $c)? )
				{
					DebugLocation(459, 43);
					// SugarCpp.g:459:43: ^( For_Item_Down_To ident $a $b ( $c)? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(459, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Down_To, "For_Item_Down_To"), root_1);

					DebugLocation(459, 62);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(459, 69);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(459, 72);
					adaptor.AddChild(root_1, stream_b.NextTree());
					DebugLocation(459, 75);
					// SugarCpp.g:459:75: ( $c)?
					if (stream_c.HasNext)
					{
						DebugLocation(459, 75);
						adaptor.AddChild(root_1, stream_c.NextTree());

					}
					stream_c.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:460:9: 
				{

				{
				// AST REWRITE
				// elements: a, ident
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 460:9: -> ^( For_Item_Each ident $a)
				{
					DebugLocation(460, 12);
					// SugarCpp.g:460:12: ^( For_Item_Each ident $a)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(460, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Each, "For_Item_Each"), root_1);

					DebugLocation(460, 28);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(460, 35);
					adaptor.AddChild(root_1, stream_a.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(130); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_range", 45);
			LeaveRule("for_range", 45);
			LeaveRule_for_range();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "for_range"); }
		return retval;

	}
	// $ANTLR end "for_range"

	partial void EnterRule_for_when();
	partial void LeaveRule_for_when();

	// $ANTLR start "for_when"
	// SugarCpp.g:464:1: for_when : expr -> ^( For_Item_When expr ) ;
	[GrammarRule("for_when")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_when()
	{
		EnterRule_for_when();
		EnterRule("for_when", 46);
		TraceIn("for_when", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> expr296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_when");
		DebugLocation(464, 1);
		try
		{
			// SugarCpp.g:465:2: ( expr -> ^( For_Item_When expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:465:4: expr
			{
			DebugLocation(465, 4);
			PushFollow(Follow._expr_in_for_when3395);
			expr296=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr296.Tree);


			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 465:9: -> ^( For_Item_When expr )
			{
				DebugLocation(465, 12);
				// SugarCpp.g:465:12: ^( For_Item_When expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(465, 14);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_When, "For_Item_When"), root_1);

				DebugLocation(465, 28);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_when", 46);
			LeaveRule("for_when", 46);
			LeaveRule_for_when();
		}
		DebugLocation(466, 1);
		} finally { DebugExitRule(GrammarFileName, "for_when"); }
		return retval;

	}
	// $ANTLR end "for_when"

	partial void EnterRule_for_map();
	partial void LeaveRule_for_map();

	// $ANTLR start "for_map"
	// SugarCpp.g:468:1: for_map : ident '=>' expr -> ^( For_Item_Map ident expr ) ;
	[GrammarRule("for_map")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_map()
	{
		EnterRule_for_map();
		EnterRule("for_map", 47);
		TraceIn("for_map", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal298 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident297 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr299 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal298_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "for_map");
		DebugLocation(468, 1);
		try
		{
			// SugarCpp.g:469:2: ( ident '=>' expr -> ^( For_Item_Map ident expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:469:4: ident '=>' expr
			{
			DebugLocation(469, 4);
			PushFollow(Follow._ident_in_for_map3414);
			ident297=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident297.Tree);
			DebugLocation(469, 10);
			string_literal298=(IToken)Match(input,123,Follow._123_in_for_map3416); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal298);

			DebugLocation(469, 15);
			PushFollow(Follow._expr_in_for_map3418);
			expr299=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr299.Tree);


			{
			// AST REWRITE
			// elements: expr, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 469:20: -> ^( For_Item_Map ident expr )
			{
				DebugLocation(469, 23);
				// SugarCpp.g:469:23: ^( For_Item_Map ident expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(469, 25);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(For_Item_Map, "For_Item_Map"), root_1);

				DebugLocation(469, 38);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(469, 44);
				adaptor.AddChild(root_1, stream_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_map", 47);
			LeaveRule("for_map", 47);
			LeaveRule_for_map();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "for_map"); }
		return retval;

	}
	// $ANTLR end "for_map"

	partial void EnterRule_for_item();
	partial void LeaveRule_for_item();

	// $ANTLR start "for_item"
	// SugarCpp.g:472:1: for_item : ( for_range | for_when | for_map );
	[GrammarRule("for_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> for_item()
	{
		EnterRule_for_item();
		EnterRule("for_item", 48);
		TraceIn("for_item", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> for_range300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_when301 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_map302 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "for_item");
		DebugLocation(472, 1);
		try
		{
			// SugarCpp.g:473:2: ( for_range | for_when | for_map )
			int alt131=3;
			try { DebugEnterDecision(131, false);
			try
			{
				alt131 = dfa131.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:473:4: for_range
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(473, 4);
				PushFollow(Follow._for_range_in_for_item3439);
				for_range300=for_range();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_range300.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:474:4: for_when
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(474, 4);
				PushFollow(Follow._for_when_in_for_item3444);
				for_when301=for_when();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_when301.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:475:4: for_map
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(475, 4);
				PushFollow(Follow._for_map_in_for_item3449);
				for_map302=for_map();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, for_map302.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("for_item", 48);
			LeaveRule("for_item", 48);
			LeaveRule_for_item();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "for_item"); }
		return retval;

	}
	// $ANTLR end "for_item"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:478:1: stmt_for : 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 49);
		TraceIn("stmt_for", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal303 = default(IToken);
		IToken char_literal305 = default(IToken);
		IToken NEWLINE307 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> for_item304 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item306 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block308 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal303_tree = default(CommonTree);
		CommonTree char_literal305_tree = default(CommonTree);
		CommonTree NEWLINE307_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(478, 1);
		try
		{
			// SugarCpp.g:479:2: ( 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:479:4: 'for' ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			{
			DebugLocation(479, 4);
			string_literal303=(IToken)Match(input,146,Follow._146_in_stmt_for3460); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_146.Add(string_literal303);

			DebugLocation(479, 10);
			// SugarCpp.g:479:10: ( for_item ( ',' for_item )* ( NEWLINE )+ stmt_block -> ^( Stmt_For ( for_item )* stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:479:12: for_item ( ',' for_item )* ( NEWLINE )+ stmt_block
			{
			DebugLocation(479, 12);
			PushFollow(Follow._for_item_in_stmt_for3464);
			for_item304=for_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_for_item.Add(for_item304.Tree);
			DebugLocation(479, 21);
			// SugarCpp.g:479:21: ( ',' for_item )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=2;
				try { DebugEnterDecision(132, false);
				int LA132_0 = input.LA(1);

				if ((LA132_0==99))
				{
					alt132 = 1;
				}


				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:22: ',' for_item
					{
					DebugLocation(479, 22);
					char_literal305=(IToken)Match(input,99,Follow._99_in_stmt_for3467); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal305);

					DebugLocation(479, 26);
					PushFollow(Follow._for_item_in_stmt_for3469);
					for_item306=for_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_for_item.Add(for_item306.Tree);

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }

			DebugLocation(479, 37);
			// SugarCpp.g:479:37: ( NEWLINE )+
			int cnt133=0;
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==NEWLINE))
				{
					alt133 = 1;
				}


				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:37: NEWLINE
					{
					DebugLocation(479, 37);
					NEWLINE307=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for3473); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE307);


					}
					break;

				default:
					if (cnt133 >= 1)
						goto loop133;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee133 = new EarlyExitException( 133, input );
					DebugRecognitionException(eee133);
					throw eee133;
				}
				cnt133++;
			}
			loop133:
				;

			} finally { DebugExitSubRule(133); }

			DebugLocation(479, 46);
			PushFollow(Follow._stmt_block_in_stmt_for3476);
			stmt_block308=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block308.Tree);


			{
			// AST REWRITE
			// elements: for_item, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 479:57: -> ^( Stmt_For ( for_item )* stmt_block )
			{
				DebugLocation(479, 60);
				// SugarCpp.g:479:60: ^( Stmt_For ( for_item )* stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(479, 62);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(479, 71);
				// SugarCpp.g:479:71: ( for_item )*
				while ( stream_for_item.HasNext )
				{
					DebugLocation(479, 71);
					adaptor.AddChild(root_1, stream_for_item.NextTree());

				}
				stream_for_item.Reset();
				DebugLocation(479, 81);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 49);
			LeaveRule("stmt_for", 49);
			LeaveRule_stmt_for();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:484:1: stmt_try : 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 50);
		TraceIn("stmt_try", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal309 = default(IToken);
		IToken NEWLINE310 = default(IToken);
		IToken NEWLINE312 = default(IToken);
		IToken string_literal313 = default(IToken);
		IToken NEWLINE315 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block311 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc314 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block316 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal309_tree = default(CommonTree);
		CommonTree NEWLINE310_tree = default(CommonTree);
		CommonTree NEWLINE312_tree = default(CommonTree);
		CommonTree string_literal313_tree = default(CommonTree);
		CommonTree NEWLINE315_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_168=new RewriteRuleITokenStream(adaptor,"token 168");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(484, 1);
		try
		{
			// SugarCpp.g:485:2: ( 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:485:4: 'try' ( NEWLINE )+ stmt_block ( NEWLINE )* 'catch' stmt_alloc ( NEWLINE )+ stmt_block
			{
			DebugLocation(485, 4);
			string_literal309=(IToken)Match(input,168,Follow._168_in_stmt_try3507); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_168.Add(string_literal309);

			DebugLocation(485, 10);
			// SugarCpp.g:485:10: ( NEWLINE )+
			int cnt134=0;
			try { DebugEnterSubRule(134);
			while (true)
			{
				int alt134=2;
				try { DebugEnterDecision(134, false);
				int LA134_0 = input.LA(1);

				if ((LA134_0==NEWLINE))
				{
					alt134 = 1;
				}


				} finally { DebugExitDecision(134); }
				switch (alt134)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:485:10: NEWLINE
					{
					DebugLocation(485, 10);
					NEWLINE310=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3509); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE310);


					}
					break;

				default:
					if (cnt134 >= 1)
						goto loop134;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee134 = new EarlyExitException( 134, input );
					DebugRecognitionException(eee134);
					throw eee134;
				}
				cnt134++;
			}
			loop134:
				;

			} finally { DebugExitSubRule(134); }

			DebugLocation(485, 19);
			PushFollow(Follow._stmt_block_in_stmt_try3512);
			stmt_block311=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block311.Tree);
			DebugLocation(485, 30);
			// SugarCpp.g:485:30: ( NEWLINE )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==NEWLINE))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:485:30: NEWLINE
					{
					DebugLocation(485, 30);
					NEWLINE312=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3514); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE312);


					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }

			DebugLocation(485, 39);
			string_literal313=(IToken)Match(input,138,Follow._138_in_stmt_try3517); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_138.Add(string_literal313);

			DebugLocation(485, 47);
			PushFollow(Follow._stmt_alloc_in_stmt_try3519);
			stmt_alloc314=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc314.Tree);
			DebugLocation(485, 58);
			// SugarCpp.g:485:58: ( NEWLINE )+
			int cnt136=0;
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==NEWLINE))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch (alt136)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:485:58: NEWLINE
					{
					DebugLocation(485, 58);
					NEWLINE315=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_try3521); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE315);


					}
					break;

				default:
					if (cnt136 >= 1)
						goto loop136;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee136 = new EarlyExitException( 136, input );
					DebugRecognitionException(eee136);
					throw eee136;
				}
				cnt136++;
			}
			loop136:
				;

			} finally { DebugExitSubRule(136); }

			DebugLocation(485, 67);
			PushFollow(Follow._stmt_block_in_stmt_try3524);
			stmt_block316=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block316.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 485:78: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(485, 81);
				// SugarCpp.g:485:81: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(485, 83);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(485, 92);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(485, 103);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(485, 114);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 50);
			LeaveRule("stmt_try", 50);
			LeaveRule_stmt_try();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_switch_item();
	partial void LeaveRule_switch_item();

	// $ANTLR start "switch_item"
	// SugarCpp.g:488:1: switch_item : 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) ;
	[GrammarRule("switch_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> switch_item()
	{
		EnterRule_switch_item();
		EnterRule("switch_item", 51);
		TraceIn("switch_item", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal317 = default(IToken);
		IToken char_literal319 = default(IToken);
		IToken NEWLINE321 = default(IToken);
		IToken string_literal323 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block322 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> inline_stmt_block324 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal317_tree = default(CommonTree);
		CommonTree char_literal319_tree = default(CommonTree);
		CommonTree NEWLINE321_tree = default(CommonTree);
		CommonTree string_literal323_tree = default(CommonTree);
		RewriteRuleITokenStream stream_174=new RewriteRuleITokenStream(adaptor,"token 174");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_165=new RewriteRuleITokenStream(adaptor,"token 165");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_inline_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule inline_stmt_block");
		try { DebugEnterRule(GrammarFileName, "switch_item");
		DebugLocation(488, 1);
		try
		{
			// SugarCpp.g:489:2: ( 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:489:4: 'when' expr ( ',' expr )* ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			{
			DebugLocation(489, 4);
			string_literal317=(IToken)Match(input,174,Follow._174_in_switch_item3547); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_174.Add(string_literal317);

			DebugLocation(489, 11);
			PushFollow(Follow._expr_in_switch_item3549);
			expr318=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr318.Tree);
			DebugLocation(489, 16);
			// SugarCpp.g:489:16: ( ',' expr )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=2;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==99))
				{
					alt137 = 1;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:489:17: ',' expr
					{
					DebugLocation(489, 17);
					char_literal319=(IToken)Match(input,99,Follow._99_in_switch_item3552); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal319);

					DebugLocation(489, 21);
					PushFollow(Follow._expr_in_switch_item3554);
					expr320=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr320.Tree);

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }

			DebugLocation(489, 28);
			// SugarCpp.g:489:28: ( ( NEWLINE )+ stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block ) | 'then' inline_stmt_block -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block ) )
			int alt139=2;
			try { DebugEnterSubRule(139);
			try { DebugEnterDecision(139, false);
			int LA139_0 = input.LA(1);

			if ((LA139_0==NEWLINE))
			{
				alt139 = 1;
			}
			else if ((LA139_0==165))
			{
				alt139 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 139, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:489:30: ( NEWLINE )+ stmt_block
				{
				DebugLocation(489, 30);
				// SugarCpp.g:489:30: ( NEWLINE )+
				int cnt138=0;
				try { DebugEnterSubRule(138);
				while (true)
				{
					int alt138=2;
					try { DebugEnterDecision(138, false);
					int LA138_0 = input.LA(1);

					if ((LA138_0==NEWLINE))
					{
						alt138 = 1;
					}


					} finally { DebugExitDecision(138); }
					switch (alt138)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:489:30: NEWLINE
						{
						DebugLocation(489, 30);
						NEWLINE321=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_switch_item3560); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE321);


						}
						break;

					default:
						if (cnt138 >= 1)
							goto loop138;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee138 = new EarlyExitException( 138, input );
						DebugRecognitionException(eee138);
						throw eee138;
					}
					cnt138++;
				}
				loop138:
					;

				} finally { DebugExitSubRule(138); }

				DebugLocation(489, 39);
				PushFollow(Follow._stmt_block_in_switch_item3563);
				stmt_block322=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block322.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 489:50: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
				{
					DebugLocation(489, 53);
					// SugarCpp.g:489:53: ^( Switch_Item ^( Expr_Args ( expr )+ ) stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(489, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(489, 67);
					// SugarCpp.g:489:67: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(489, 69);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(489, 79);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(489, 79);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(489, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:490:30: 'then' inline_stmt_block
				{
				DebugLocation(490, 30);
				string_literal323=(IToken)Match(input,165,Follow._165_in_switch_item3609); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_165.Add(string_literal323);

				DebugLocation(490, 37);
				PushFollow(Follow._inline_stmt_block_in_switch_item3611);
				inline_stmt_block324=inline_stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_inline_stmt_block.Add(inline_stmt_block324.Tree);


				{
				// AST REWRITE
				// elements: inline_stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 490:55: -> ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
				{
					DebugLocation(490, 58);
					// SugarCpp.g:490:58: ^( Switch_Item ^( Expr_Args ( expr )+ ) inline_stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(490, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Switch_Item, "Switch_Item"), root_1);

					DebugLocation(490, 72);
					// SugarCpp.g:490:72: ^( Expr_Args ( expr )+ )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(490, 74);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(490, 84);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(490, 84);
						adaptor.AddChild(root_2, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(490, 91);
					adaptor.AddChild(root_1, stream_inline_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("switch_item", 51);
			LeaveRule("switch_item", 51);
			LeaveRule_switch_item();
		}
		DebugLocation(492, 1);
		} finally { DebugExitRule(GrammarFileName, "switch_item"); }
		return retval;

	}
	// $ANTLR end "switch_item"

	partial void EnterRule_stmt_switch();
	partial void LeaveRule_stmt_switch();

	// $ANTLR start "stmt_switch"
	// SugarCpp.g:494:1: stmt_switch : 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) ;
	[GrammarRule("stmt_switch")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_switch()
	{
		EnterRule_stmt_switch();
		EnterRule("stmt_switch", 52);
		TraceIn("stmt_switch", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal325 = default(IToken);
		IToken NEWLINE327 = default(IToken);
		IToken INDENT328 = default(IToken);
		IToken NEWLINE329 = default(IToken);
		IToken NEWLINE331 = default(IToken);
		IToken string_literal332 = default(IToken);
		IToken NEWLINE333 = default(IToken);
		IToken NEWLINE335 = default(IToken);
		IToken DEDENT336 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> switch_item330 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block334 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal325_tree = default(CommonTree);
		CommonTree NEWLINE327_tree = default(CommonTree);
		CommonTree INDENT328_tree = default(CommonTree);
		CommonTree NEWLINE329_tree = default(CommonTree);
		CommonTree NEWLINE331_tree = default(CommonTree);
		CommonTree string_literal332_tree = default(CommonTree);
		CommonTree NEWLINE333_tree = default(CommonTree);
		CommonTree NEWLINE335_tree = default(CommonTree);
		CommonTree DEDENT336_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_164=new RewriteRuleITokenStream(adaptor,"token 164");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_switch_item=new RewriteRuleSubtreeStream(adaptor,"rule switch_item");
		try { DebugEnterRule(GrammarFileName, "stmt_switch");
		DebugLocation(494, 1);
		try
		{
			// SugarCpp.g:495:2: ( 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:495:4: 'switch' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( switch_item ( NEWLINE )+ )+ ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )? DEDENT
			{
			DebugLocation(495, 4);
			string_literal325=(IToken)Match(input,164,Follow._164_in_stmt_switch3651); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_164.Add(string_literal325);

			DebugLocation(495, 13);
			// SugarCpp.g:495:13: ( expr )?
			int alt140=2;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			int LA140_0 = input.LA(1);

			if ((LA140_0==IDENT||LA140_0==NUMBER||LA140_0==STRING||LA140_0==85||LA140_0==90||LA140_0==92||LA140_0==94||(LA140_0>=96 && LA140_0<=97)||(LA140_0>=100 && LA140_0<=101)||(LA140_0>=130 && LA140_0<=131)||LA140_0==152||LA140_0==155||(LA140_0>=157 && LA140_0<=158)||LA140_0==181))
			{
				alt140 = 1;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:495:13: expr
				{
				DebugLocation(495, 13);
				PushFollow(Follow._expr_in_stmt_switch3653);
				expr326=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr326.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(140); }

			DebugLocation(495, 19);
			// SugarCpp.g:495:19: ( NEWLINE )+
			int cnt141=0;
			try { DebugEnterSubRule(141);
			while (true)
			{
				int alt141=2;
				try { DebugEnterDecision(141, false);
				int LA141_0 = input.LA(1);

				if ((LA141_0==NEWLINE))
				{
					alt141 = 1;
				}


				} finally { DebugExitDecision(141); }
				switch (alt141)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:19: NEWLINE
					{
					DebugLocation(495, 19);
					NEWLINE327=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3656); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE327);


					}
					break;

				default:
					if (cnt141 >= 1)
						goto loop141;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee141 = new EarlyExitException( 141, input );
					DebugRecognitionException(eee141);
					throw eee141;
				}
				cnt141++;
			}
			loop141:
				;

			} finally { DebugExitSubRule(141); }

			DebugLocation(495, 28);
			INDENT328=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_switch3659); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT328);

			DebugLocation(495, 35);
			// SugarCpp.g:495:35: ( NEWLINE )*
			try { DebugEnterSubRule(142);
			while (true)
			{
				int alt142=2;
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==NEWLINE))
				{
					alt142 = 1;
				}


				} finally { DebugExitDecision(142); }
				switch ( alt142 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:35: NEWLINE
					{
					DebugLocation(495, 35);
					NEWLINE329=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3661); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE329);


					}
					break;

				default:
					goto loop142;
				}
			}

			loop142:
				;

			} finally { DebugExitSubRule(142); }

			DebugLocation(495, 44);
			// SugarCpp.g:495:44: ( switch_item ( NEWLINE )+ )+
			int cnt144=0;
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==174))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch (alt144)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:495:45: switch_item ( NEWLINE )+
					{
					DebugLocation(495, 45);
					PushFollow(Follow._switch_item_in_stmt_switch3665);
					switch_item330=switch_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_switch_item.Add(switch_item330.Tree);
					DebugLocation(495, 57);
					// SugarCpp.g:495:57: ( NEWLINE )+
					int cnt143=0;
					try { DebugEnterSubRule(143);
					while (true)
					{
						int alt143=2;
						try { DebugEnterDecision(143, false);
						int LA143_0 = input.LA(1);

						if ((LA143_0==NEWLINE))
						{
							alt143 = 1;
						}


						} finally { DebugExitDecision(143); }
						switch (alt143)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:495:57: NEWLINE
							{
							DebugLocation(495, 57);
							NEWLINE331=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3667); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE331);


							}
							break;

						default:
							if (cnt143 >= 1)
								goto loop143;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee143 = new EarlyExitException( 143, input );
							DebugRecognitionException(eee143);
							throw eee143;
						}
						cnt143++;
					}
					loop143:
						;

					} finally { DebugExitSubRule(143); }


					}
					break;

				default:
					if (cnt144 >= 1)
						goto loop144;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee144 = new EarlyExitException( 144, input );
					DebugRecognitionException(eee144);
					throw eee144;
				}
				cnt144++;
			}
			loop144:
				;

			} finally { DebugExitSubRule(144); }

			DebugLocation(495, 68);
			// SugarCpp.g:495:68: ( 'else' ( NEWLINE )+ stmt_block ( NEWLINE )* )?
			int alt147=2;
			try { DebugEnterSubRule(147);
			try { DebugEnterDecision(147, false);
			int LA147_0 = input.LA(1);

			if ((LA147_0==143))
			{
				alt147 = 1;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:495:69: 'else' ( NEWLINE )+ stmt_block ( NEWLINE )*
				{
				DebugLocation(495, 69);
				string_literal332=(IToken)Match(input,143,Follow._143_in_stmt_switch3673); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_143.Add(string_literal332);

				DebugLocation(495, 76);
				// SugarCpp.g:495:76: ( NEWLINE )+
				int cnt145=0;
				try { DebugEnterSubRule(145);
				while (true)
				{
					int alt145=2;
					try { DebugEnterDecision(145, false);
					int LA145_0 = input.LA(1);

					if ((LA145_0==NEWLINE))
					{
						alt145 = 1;
					}


					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:495:76: NEWLINE
						{
						DebugLocation(495, 76);
						NEWLINE333=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3675); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE333);


						}
						break;

					default:
						if (cnt145 >= 1)
							goto loop145;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee145 = new EarlyExitException( 145, input );
						DebugRecognitionException(eee145);
						throw eee145;
					}
					cnt145++;
				}
				loop145:
					;

				} finally { DebugExitSubRule(145); }

				DebugLocation(495, 85);
				PushFollow(Follow._stmt_block_in_stmt_switch3678);
				stmt_block334=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block334.Tree);
				DebugLocation(495, 96);
				// SugarCpp.g:495:96: ( NEWLINE )*
				try { DebugEnterSubRule(146);
				while (true)
				{
					int alt146=2;
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==NEWLINE))
					{
						alt146 = 1;
					}


					} finally { DebugExitDecision(146); }
					switch ( alt146 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:495:96: NEWLINE
						{
						DebugLocation(495, 96);
						NEWLINE335=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_switch3680); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE335);


						}
						break;

					default:
						goto loop146;
					}
				}

				loop146:
					;

				} finally { DebugExitSubRule(146); }


				}
				break;

			}
			} finally { DebugExitSubRule(147); }

			DebugLocation(495, 107);
			DEDENT336=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_switch3685); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT336);



			{
			// AST REWRITE
			// elements: stmt_block, switch_item, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 495:114: -> ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
			{
				DebugLocation(495, 117);
				// SugarCpp.g:495:117: ^( Stmt_Switch ( expr )? ( switch_item )* ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(495, 119);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Switch, "Stmt_Switch"), root_1);

				DebugLocation(495, 131);
				// SugarCpp.g:495:131: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(495, 131);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(495, 137);
				// SugarCpp.g:495:137: ( switch_item )*
				while ( stream_switch_item.HasNext )
				{
					DebugLocation(495, 137);
					adaptor.AddChild(root_1, stream_switch_item.NextTree());

				}
				stream_switch_item.Reset();
				DebugLocation(495, 150);
				// SugarCpp.g:495:150: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(495, 150);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_switch", 52);
			LeaveRule("stmt_switch", 52);
			LeaveRule_stmt_switch();
		}
		DebugLocation(496, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_switch"); }
		return retval;

	}
	// $ANTLR end "stmt_switch"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:498:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 53);
		TraceIn("ident_list", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal338 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident337 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident339 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal338_tree = default(CommonTree);
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(498, 1);
		try
		{
			// SugarCpp.g:499:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:499:4: ident ( ',' ident )*
			{
			DebugLocation(499, 4);
			PushFollow(Follow._ident_in_ident_list3711);
			ident337=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident337.Tree);
			DebugLocation(499, 10);
			// SugarCpp.g:499:10: ( ',' ident )*
			try { DebugEnterSubRule(148);
			while (true)
			{
				int alt148=2;
				try { DebugEnterDecision(148, false);
				int LA148_0 = input.LA(1);

				if ((LA148_0==99))
				{
					alt148 = 1;
				}


				} finally { DebugExitDecision(148); }
				switch ( alt148 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:499:11: ',' ident
					{
					DebugLocation(499, 11);
					char_literal338=(IToken)Match(input,99,Follow._99_in_ident_list3714); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal338);

					DebugLocation(499, 15);
					PushFollow(Follow._ident_in_ident_list3716);
					ident339=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident339.Tree);

					}
					break;

				default:
					goto loop148;
				}
			}

			loop148:
				;

			} finally { DebugExitSubRule(148); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 499:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(499, 26);
				// SugarCpp.g:499:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(499, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(499, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(499, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 53);
			LeaveRule("ident_list", 53);
			LeaveRule_ident_list();
		}
		DebugLocation(500, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:502:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 54);
		TraceIn("stmt_alloc", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal341 = default(IToken);
		IToken char_literal343 = default(IToken);
		IToken string_literal344 = default(IToken);
		IToken string_literal347 = default(IToken);
		IToken char_literal349 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list340 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr345 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list346 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr348 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr350 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal341_tree = default(CommonTree);
		CommonTree char_literal343_tree = default(CommonTree);
		CommonTree string_literal344_tree = default(CommonTree);
		CommonTree string_literal347_tree = default(CommonTree);
		CommonTree char_literal349_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(502, 1);
		try
		{
			// SugarCpp.g:503:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:503:4: ident_list ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			{
			DebugLocation(503, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc3738);
			ident_list340=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list340.Tree);
			DebugLocation(503, 15);
			// SugarCpp.g:503:15: ( ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) ) | ':=' ( where_expr ( ',' where_expr )* ) -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) ) )
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			int LA152_0 = input.LA(1);

			if ((LA152_0==110))
			{
				alt152 = 1;
			}
			else if ((LA152_0==112))
			{
				alt152 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 152, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:503:17: ':' type_name ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				{
				DebugLocation(503, 17);
				char_literal341=(IToken)Match(input,110,Follow._110_in_stmt_alloc3742); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal341);

				DebugLocation(503, 21);
				PushFollow(Follow._type_name_in_stmt_alloc3744);
				type_name342=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name342.Tree);
				DebugLocation(503, 31);
				// SugarCpp.g:503:31: ( ( '=' | ':=' ) where_expr -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) ) | bracket_expr_list -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list ) | -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) ) )
				int alt150=3;
				try { DebugEnterSubRule(150);
				try { DebugEnterDecision(150, false);
				switch (input.LA(1))
				{
				case 112:
				case 120:
					{
					alt150 = 1;
					}
					break;
				case 92:
					{
					alt150 = 2;
					}
					break;
				case DEDENT:
				case NEWLINE:
				case 113:
				case 146:
				case 147:
				case 149:
				case 170:
				case 171:
				case 176:
					{
					alt150 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(150); }
				switch (alt150)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:503:33: ( '=' | ':=' ) where_expr
					{
					DebugLocation(503, 33);
					// SugarCpp.g:503:33: ( '=' | ':=' )
					int alt149=2;
					try { DebugEnterSubRule(149);
					try { DebugEnterDecision(149, false);
					int LA149_0 = input.LA(1);

					if ((LA149_0==120))
					{
						alt149 = 1;
					}
					else if ((LA149_0==112))
					{
						alt149 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 149, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(149); }
					switch (alt149)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:34: '='
						{
						DebugLocation(503, 34);
						char_literal343=(IToken)Match(input,120,Follow._120_in_stmt_alloc3749); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_120.Add(char_literal343);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:503:40: ':='
						{
						DebugLocation(503, 40);
						string_literal344=(IToken)Match(input,112,Follow._112_in_stmt_alloc3753); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_112.Add(string_literal344);


						}
						break;

					}
					} finally { DebugExitSubRule(149); }

					DebugLocation(503, 46);
					PushFollow(Follow._where_expr_in_stmt_alloc3756);
					where_expr345=where_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_expr.Add(where_expr345.Tree);


					{
					// AST REWRITE
					// elements: where_expr, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 503:58: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
					{
						DebugLocation(503, 61);
						// SugarCpp.g:503:61: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args where_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(503, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(503, 80);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(503, 90);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(503, 101);
						// SugarCpp.g:503:101: ^( Expr_Args where_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(503, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(503, 113);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:504:33: bracket_expr_list
					{
					DebugLocation(504, 33);
					PushFollow(Follow._bracket_expr_list_in_stmt_alloc3807);
					bracket_expr_list346=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list346.Tree);


					{
					// AST REWRITE
					// elements: ident_list, bracket_expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 504:52: -> ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
					{
						DebugLocation(504, 55);
						// SugarCpp.g:504:55: ^( Expr_Alloc_Bracket type_name ident_list bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(504, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(504, 76);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(504, 86);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(504, 97);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:505:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 505:15: -> ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
					{
						DebugLocation(505, 18);
						// SugarCpp.g:505:18: ^( Expr_Alloc_Equal type_name ident_list ^( Expr_Args ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(505, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(505, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(505, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(505, 58);
						// SugarCpp.g:505:58: ^( Expr_Args )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(505, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(150); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:507:8: ':=' ( where_expr ( ',' where_expr )* )
				{
				DebugLocation(507, 8);
				string_literal347=(IToken)Match(input,112,Follow._112_in_stmt_alloc3871); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_112.Add(string_literal347);

				DebugLocation(507, 14);
				// SugarCpp.g:507:14: ( where_expr ( ',' where_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:507:15: where_expr ( ',' where_expr )*
				{
				DebugLocation(507, 15);
				PushFollow(Follow._where_expr_in_stmt_alloc3875);
				where_expr348=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr348.Tree);
				DebugLocation(507, 26);
				// SugarCpp.g:507:26: ( ',' where_expr )*
				try { DebugEnterSubRule(151);
				while (true)
				{
					int alt151=2;
					try { DebugEnterDecision(151, false);
					int LA151_0 = input.LA(1);

					if ((LA151_0==99))
					{
						alt151 = 1;
					}


					} finally { DebugExitDecision(151); }
					switch ( alt151 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:507:27: ',' where_expr
						{
						DebugLocation(507, 27);
						char_literal349=(IToken)Match(input,99,Follow._99_in_stmt_alloc3878); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal349);

						DebugLocation(507, 31);
						PushFollow(Follow._where_expr_in_stmt_alloc3880);
						where_expr350=where_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_expr.Add(where_expr350.Tree);

						}
						break;

					default:
						goto loop151;
					}
				}

				loop151:
					;

				} finally { DebugExitSubRule(151); }


				}



				{
				// AST REWRITE
				// elements: ident_list, where_expr, 112
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 507:45: -> ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
				{
					DebugLocation(507, 48);
					// SugarCpp.g:507:48: ^( ':=' ident_list ^( Expr_Args ( where_expr )* ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(507, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_112.NextNode(), root_1);

					DebugLocation(507, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(507, 66);
					// SugarCpp.g:507:66: ^( Expr_Args ( where_expr )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(507, 68);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

					DebugLocation(507, 78);
					// SugarCpp.g:507:78: ( where_expr )*
					while ( stream_where_expr.HasNext )
					{
						DebugLocation(507, 78);
						adaptor.AddChild(root_2, stream_where_expr.NextTree());

					}
					stream_where_expr.Reset();

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(152); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 54);
			LeaveRule("stmt_alloc", 54);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(508, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:510:1: stmt_modify : lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 55);
		TraceIn("stmt_modify", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal354 = default(IToken);
		IToken string_literal356 = default(IToken);
		IToken string_literal358 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue351 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op352 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr355 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr357 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr359 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal354_tree = default(CommonTree);
		CommonTree string_literal356_tree = default(CommonTree);
		CommonTree string_literal358_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		RewriteRuleSubtreeStream stream_modify_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr_op");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(510, 1);
		try
		{
			// SugarCpp.g:511:2: ( lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue ) )
			DebugEnterAlt(1);
			// SugarCpp.g:511:4: lvalue ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			{
			DebugLocation(511, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3910);
			lvalue351=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue.Add(lvalue351.Tree);
			DebugLocation(511, 11);
			// SugarCpp.g:511:11: ( modify_expr_op where_expr -> ^( modify_expr_op lvalue where_expr ) | '?=' where_expr -> ^( '?=' lvalue where_expr ) | '<<' where_expr -> ^( Expr_Bin '<<' lvalue where_expr ) | '>>' where_expr -> ^( Expr_Bin '>>' lvalue where_expr ) | -> lvalue )
			int alt153=5;
			try { DebugEnterSubRule(153);
			try { DebugEnterDecision(153, false);
			switch (input.LA(1))
			{
			case 88:
			case 91:
			case 95:
			case 98:
			case 103:
			case 109:
			case 117:
			case 120:
			case 127:
			case 134:
			case 178:
				{
				alt153 = 1;
				}
				break;
			case 129:
				{
				alt153 = 2;
				}
				break;
			case 116:
				{
				alt153 = 3;
				}
				break;
			case 126:
				{
				alt153 = 4;
				}
				break;
			case DEDENT:
			case NEWLINE:
			case 113:
			case 146:
			case 147:
			case 149:
			case 170:
			case 171:
			case 176:
				{
				alt153 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 153, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:511:13: modify_expr_op where_expr
				{
				DebugLocation(511, 13);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3914);
				modify_expr_op352=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr_op.Add(modify_expr_op352.Tree);
				DebugLocation(511, 28);
				PushFollow(Follow._where_expr_in_stmt_modify3916);
				where_expr353=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr353.Tree);


				{
				// AST REWRITE
				// elements: modify_expr_op, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 511:39: -> ^( modify_expr_op lvalue where_expr )
				{
					DebugLocation(511, 42);
					// SugarCpp.g:511:42: ^( modify_expr_op lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(511, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_modify_expr_op.NextNode(), root_1);

					DebugLocation(511, 59);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(511, 66);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:512:13: '?=' where_expr
				{
				DebugLocation(512, 13);
				string_literal354=(IToken)Match(input,129,Follow._129_in_stmt_modify3940); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_129.Add(string_literal354);

				DebugLocation(512, 18);
				PushFollow(Follow._where_expr_in_stmt_modify3942);
				where_expr355=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr355.Tree);


				{
				// AST REWRITE
				// elements: 129, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 512:29: -> ^( '?=' lvalue where_expr )
				{
					DebugLocation(512, 32);
					// SugarCpp.g:512:32: ^( '?=' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(512, 34);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_129.NextNode(), root_1);

					DebugLocation(512, 39);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(512, 46);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:513:16: '<<' where_expr
				{
				DebugLocation(513, 16);
				string_literal356=(IToken)Match(input,116,Follow._116_in_stmt_modify3969); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_116.Add(string_literal356);

				DebugLocation(513, 21);
				PushFollow(Follow._where_expr_in_stmt_modify3971);
				where_expr357=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr357.Tree);


				{
				// AST REWRITE
				// elements: 116, where_expr, lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 513:32: -> ^( Expr_Bin '<<' lvalue where_expr )
				{
					DebugLocation(513, 35);
					// SugarCpp.g:513:35: ^( Expr_Bin '<<' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(513, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(513, 46);
					adaptor.AddChild(root_1, stream_116.NextNode());
					DebugLocation(513, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(513, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:514:16: '>>' where_expr
				{
				DebugLocation(514, 16);
				string_literal358=(IToken)Match(input,126,Follow._126_in_stmt_modify4000); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_126.Add(string_literal358);

				DebugLocation(514, 21);
				PushFollow(Follow._where_expr_in_stmt_modify4002);
				where_expr359=where_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_where_expr.Add(where_expr359.Tree);


				{
				// AST REWRITE
				// elements: lvalue, where_expr, 126
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 514:32: -> ^( Expr_Bin '>>' lvalue where_expr )
				{
					DebugLocation(514, 35);
					// SugarCpp.g:514:35: ^( Expr_Bin '>>' lvalue where_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(514, 37);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(514, 46);
					adaptor.AddChild(root_1, stream_126.NextNode());
					DebugLocation(514, 51);
					adaptor.AddChild(root_1, stream_lvalue.NextTree());
					DebugLocation(514, 58);
					adaptor.AddChild(root_1, stream_where_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:515:7: 
				{

				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 515:7: -> lvalue
				{
					DebugLocation(515, 10);
					adaptor.AddChild(root_0, stream_lvalue.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(153); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 55);
			LeaveRule("stmt_modify", 55);
			LeaveRule_stmt_modify();
		}
		DebugLocation(516, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_where_item();
	partial void LeaveRule_where_item();

	// $ANTLR start "where_item"
	// SugarCpp.g:518:1: where_item : stmt ;
	[GrammarRule("where_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_item()
	{
		EnterRule_where_item();
		EnterRule("where_item", 56);
		TraceIn("where_item", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt360 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "where_item");
		DebugLocation(518, 1);
		try
		{
			// SugarCpp.g:519:2: ( stmt )
			DebugEnterAlt(1);
			// SugarCpp.g:519:4: stmt
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(519, 4);
			PushFollow(Follow._stmt_in_where_item4036);
			stmt360=stmt();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt360.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_item", 56);
			LeaveRule("where_item", 56);
			LeaveRule_where_item();
		}
		DebugLocation(520, 1);
		} finally { DebugExitRule(GrammarFileName, "where_item"); }
		return retval;

	}
	// $ANTLR end "where_item"

	partial void EnterRule_where_expr();
	partial void LeaveRule_where_expr();

	// $ANTLR start "where_expr"
	// SugarCpp.g:522:1: where_expr : (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) ;
	[GrammarRule("where_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> where_expr()
	{
		EnterRule_where_expr();
		EnterRule("where_expr", 57);
		TraceIn("where_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE361 = default(IToken);
		IToken INDENT362 = default(IToken);
		IToken NEWLINE363 = default(IToken);
		IToken string_literal364 = default(IToken);
		IToken NEWLINE366 = default(IToken);
		IToken DEDENT367 = default(IToken);
		IToken NEWLINE368 = default(IToken);
		IToken INDENT369 = default(IToken);
		IToken NEWLINE370 = default(IToken);
		IToken NEWLINE372 = default(IToken);
		IToken DEDENT373 = default(IToken);
		IToken NEWLINE374 = default(IToken);
		IToken DEDENT375 = default(IToken);
		IToken NEWLINE376 = default(IToken);
		IToken INDENT377 = default(IToken);
		IToken NEWLINE378 = default(IToken);
		IToken NEWLINE380 = default(IToken);
		IToken DEDENT381 = default(IToken);
		IToken NEWLINE382 = default(IToken);
		IToken DEDENT383 = default(IToken);
		IToken string_literal384 = default(IToken);
		IToken NEWLINE385 = default(IToken);
		IToken INDENT386 = default(IToken);
		IToken NEWLINE387 = default(IToken);
		IToken NEWLINE389 = default(IToken);
		IToken DEDENT390 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item371 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item379 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item388 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE361_tree = default(CommonTree);
		CommonTree INDENT362_tree = default(CommonTree);
		CommonTree NEWLINE363_tree = default(CommonTree);
		CommonTree string_literal364_tree = default(CommonTree);
		CommonTree NEWLINE366_tree = default(CommonTree);
		CommonTree DEDENT367_tree = default(CommonTree);
		CommonTree NEWLINE368_tree = default(CommonTree);
		CommonTree INDENT369_tree = default(CommonTree);
		CommonTree NEWLINE370_tree = default(CommonTree);
		CommonTree NEWLINE372_tree = default(CommonTree);
		CommonTree DEDENT373_tree = default(CommonTree);
		CommonTree NEWLINE374_tree = default(CommonTree);
		CommonTree DEDENT375_tree = default(CommonTree);
		CommonTree NEWLINE376_tree = default(CommonTree);
		CommonTree INDENT377_tree = default(CommonTree);
		CommonTree NEWLINE378_tree = default(CommonTree);
		CommonTree NEWLINE380_tree = default(CommonTree);
		CommonTree DEDENT381_tree = default(CommonTree);
		CommonTree NEWLINE382_tree = default(CommonTree);
		CommonTree DEDENT383_tree = default(CommonTree);
		CommonTree string_literal384_tree = default(CommonTree);
		CommonTree NEWLINE385_tree = default(CommonTree);
		CommonTree INDENT386_tree = default(CommonTree);
		CommonTree NEWLINE387_tree = default(CommonTree);
		CommonTree NEWLINE389_tree = default(CommonTree);
		CommonTree DEDENT390_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_175=new RewriteRuleITokenStream(adaptor,"token 175");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "where_expr");
		DebugLocation(522, 1);
		try
		{
			// SugarCpp.g:523:2: ( (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:523:4: (a= expr -> $a) ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			{
			DebugLocation(523, 4);
			// SugarCpp.g:523:4: (a= expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:523:5: a= expr
			{
			DebugLocation(523, 6);
			PushFollow(Follow._expr_in_where_expr4050);
			a=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 523:12: -> $a
			{
				DebugLocation(523, 16);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(523, 19);
			// SugarCpp.g:523:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )
			int alt173=3;
			try { DebugEnterSubRule(173);
			try { DebugEnterDecision(173, false);
			try
			{
				alt173 = dfa173.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(173); }
			switch (alt173)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:523:21: ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				{
				DebugLocation(523, 21);
				// SugarCpp.g:523:21: ( NEWLINE )+
				int cnt154=0;
				try { DebugEnterSubRule(154);
				while (true)
				{
					int alt154=2;
					try { DebugEnterDecision(154, false);
					int LA154_0 = input.LA(1);

					if ((LA154_0==NEWLINE))
					{
						alt154 = 1;
					}


					} finally { DebugExitDecision(154); }
					switch (alt154)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:523:21: NEWLINE
						{
						DebugLocation(523, 21);
						NEWLINE361=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4060); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE361);


						}
						break;

					default:
						if (cnt154 >= 1)
							goto loop154;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee154 = new EarlyExitException( 154, input );
						DebugRecognitionException(eee154);
						throw eee154;
					}
					cnt154++;
				}
				loop154:
					;

				} finally { DebugExitSubRule(154); }

				DebugLocation(523, 30);
				INDENT362=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4063); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT362);

				DebugLocation(523, 37);
				// SugarCpp.g:523:37: ( NEWLINE )*
				try { DebugEnterSubRule(155);
				while (true)
				{
					int alt155=2;
					try { DebugEnterDecision(155, false);
					int LA155_0 = input.LA(1);

					if ((LA155_0==NEWLINE))
					{
						alt155 = 1;
					}


					} finally { DebugExitDecision(155); }
					switch ( alt155 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:523:37: NEWLINE
						{
						DebugLocation(523, 37);
						NEWLINE363=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4065); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE363);


						}
						break;

					default:
						goto loop155;
					}
				}

				loop155:
					;

				} finally { DebugExitSubRule(155); }

				DebugLocation(523, 46);
				string_literal364=(IToken)Match(input,175,Follow._175_in_where_expr4068); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(string_literal364);

				DebugLocation(523, 54);
				// SugarCpp.g:523:54: ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
				int alt168=2;
				try { DebugEnterSubRule(168);
				try { DebugEnterDecision(168, false);
				int LA168_0 = input.LA(1);

				if ((LA168_0==IDENT||LA168_0==85||LA168_0==90||LA168_0==92||LA168_0==94||(LA168_0>=96 && LA168_0<=97)||(LA168_0>=100 && LA168_0<=101)||LA168_0==130||LA168_0==141||(LA168_0>=145 && LA168_0<=147)||LA168_0==154||LA168_0==158||LA168_0==161||LA168_0==164||(LA168_0>=168 && LA168_0<=172)||LA168_0==176||LA168_0==181))
				{
					alt168 = 1;
				}
				else if ((LA168_0==NEWLINE))
				{
					alt168 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 168, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(168); }
				switch (alt168)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:523:56: where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					{
					DebugLocation(523, 56);
					PushFollow(Follow._where_item_in_where_expr4072);
					where_item365=where_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_where_item.Add(where_item365.Tree);
					DebugLocation(523, 67);
					// SugarCpp.g:523:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )
					int alt162=2;
					try { DebugEnterSubRule(162);
					try { DebugEnterDecision(162, false);
					try
					{
						alt162 = dfa162.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(162); }
					switch (alt162)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:523:69: ( NEWLINE )* DEDENT
						{
						DebugLocation(523, 69);
						// SugarCpp.g:523:69: ( NEWLINE )*
						try { DebugEnterSubRule(156);
						while (true)
						{
							int alt156=2;
							try { DebugEnterDecision(156, false);
							int LA156_0 = input.LA(1);

							if ((LA156_0==NEWLINE))
							{
								alt156 = 1;
							}


							} finally { DebugExitDecision(156); }
							switch ( alt156 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:523:69: NEWLINE
								{
								DebugLocation(523, 69);
								NEWLINE366=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4076); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE366);


								}
								break;

							default:
								goto loop156;
							}
						}

						loop156:
							;

						} finally { DebugExitSubRule(156); }

						DebugLocation(523, 78);
						DEDENT367=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4079); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT367);



						{
						// AST REWRITE
						// elements: where_item, where_expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 523:85: -> ^( Expr_Where $where_expr where_item )
						{
							DebugLocation(523, 88);
							// SugarCpp.g:523:88: ^( Expr_Where $where_expr where_item )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(523, 90);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(523, 102);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(523, 113);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:524:21: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
						{
						DebugLocation(524, 21);
						// SugarCpp.g:524:21: ( NEWLINE )+
						int cnt157=0;
						try { DebugEnterSubRule(157);
						while (true)
						{
							int alt157=2;
							try { DebugEnterDecision(157, false);
							int LA157_0 = input.LA(1);

							if ((LA157_0==NEWLINE))
							{
								alt157 = 1;
							}


							} finally { DebugExitDecision(157); }
							switch (alt157)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:524:21: NEWLINE
								{
								DebugLocation(524, 21);
								NEWLINE368=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4112); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE368);


								}
								break;

							default:
								if (cnt157 >= 1)
									goto loop157;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee157 = new EarlyExitException( 157, input );
								DebugRecognitionException(eee157);
								throw eee157;
							}
							cnt157++;
						}
						loop157:
							;

						} finally { DebugExitSubRule(157); }

						DebugLocation(524, 30);
						INDENT369=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4115); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT369);

						DebugLocation(524, 37);
						// SugarCpp.g:524:37: ( NEWLINE )*
						try { DebugEnterSubRule(158);
						while (true)
						{
							int alt158=2;
							try { DebugEnterDecision(158, false);
							int LA158_0 = input.LA(1);

							if ((LA158_0==NEWLINE))
							{
								alt158 = 1;
							}


							} finally { DebugExitDecision(158); }
							switch ( alt158 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:524:37: NEWLINE
								{
								DebugLocation(524, 37);
								NEWLINE370=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4117); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE370);


								}
								break;

							default:
								goto loop158;
							}
						}

						loop158:
							;

						} finally { DebugExitSubRule(158); }

						DebugLocation(524, 46);
						// SugarCpp.g:524:46: ( where_item ( NEWLINE )+ )+
						int cnt160=0;
						try { DebugEnterSubRule(160);
						while (true)
						{
							int alt160=2;
							try { DebugEnterDecision(160, false);
							int LA160_0 = input.LA(1);

							if ((LA160_0==IDENT||LA160_0==85||LA160_0==90||LA160_0==92||LA160_0==94||(LA160_0>=96 && LA160_0<=97)||(LA160_0>=100 && LA160_0<=101)||LA160_0==130||LA160_0==141||(LA160_0>=145 && LA160_0<=147)||LA160_0==154||LA160_0==158||LA160_0==161||LA160_0==164||(LA160_0>=168 && LA160_0<=172)||LA160_0==176||LA160_0==181))
							{
								alt160 = 1;
							}


							} finally { DebugExitDecision(160); }
							switch (alt160)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:524:47: where_item ( NEWLINE )+
								{
								DebugLocation(524, 47);
								PushFollow(Follow._where_item_in_where_expr4121);
								where_item371=where_item();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_where_item.Add(where_item371.Tree);
								DebugLocation(524, 58);
								// SugarCpp.g:524:58: ( NEWLINE )+
								int cnt159=0;
								try { DebugEnterSubRule(159);
								while (true)
								{
									int alt159=2;
									try { DebugEnterDecision(159, false);
									int LA159_0 = input.LA(1);

									if ((LA159_0==NEWLINE))
									{
										alt159 = 1;
									}


									} finally { DebugExitDecision(159); }
									switch (alt159)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:524:58: NEWLINE
										{
										DebugLocation(524, 58);
										NEWLINE372=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4123); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE372);


										}
										break;

									default:
										if (cnt159 >= 1)
											goto loop159;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee159 = new EarlyExitException( 159, input );
										DebugRecognitionException(eee159);
										throw eee159;
									}
									cnt159++;
								}
								loop159:
									;

								} finally { DebugExitSubRule(159); }


								}
								break;

							default:
								if (cnt160 >= 1)
									goto loop160;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee160 = new EarlyExitException( 160, input );
								DebugRecognitionException(eee160);
								throw eee160;
							}
							cnt160++;
						}
						loop160:
							;

						} finally { DebugExitSubRule(160); }

						DebugLocation(524, 69);
						DEDENT373=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4128); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT373);

						DebugLocation(524, 76);
						// SugarCpp.g:524:76: ( NEWLINE )*
						try { DebugEnterSubRule(161);
						while (true)
						{
							int alt161=2;
							try { DebugEnterDecision(161, false);
							int LA161_0 = input.LA(1);

							if ((LA161_0==NEWLINE))
							{
								alt161 = 1;
							}


							} finally { DebugExitDecision(161); }
							switch ( alt161 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:524:76: NEWLINE
								{
								DebugLocation(524, 76);
								NEWLINE374=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4130); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE374);


								}
								break;

							default:
								goto loop161;
							}
						}

						loop161:
							;

						} finally { DebugExitSubRule(161); }

						DebugLocation(524, 85);
						DEDENT375=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4133); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT375);



						{
						// AST REWRITE
						// elements: where_expr, where_item
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 524:92: -> ^( Expr_Where $where_expr ( where_item )+ )
						{
							DebugLocation(524, 95);
							// SugarCpp.g:524:95: ^( Expr_Where $where_expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(524, 97);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(524, 109);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(524, 120);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(524, 120);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(162); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:526:17: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT
					{
					DebugLocation(526, 17);
					// SugarCpp.g:526:17: ( NEWLINE )+
					int cnt163=0;
					try { DebugEnterSubRule(163);
					while (true)
					{
						int alt163=2;
						try { DebugEnterDecision(163, false);
						int LA163_0 = input.LA(1);

						if ((LA163_0==NEWLINE))
						{
							alt163 = 1;
						}


						} finally { DebugExitDecision(163); }
						switch (alt163)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:526:17: NEWLINE
							{
							DebugLocation(526, 17);
							NEWLINE376=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4183); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE376);


							}
							break;

						default:
							if (cnt163 >= 1)
								goto loop163;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee163 = new EarlyExitException( 163, input );
							DebugRecognitionException(eee163);
							throw eee163;
						}
						cnt163++;
					}
					loop163:
						;

					} finally { DebugExitSubRule(163); }

					DebugLocation(526, 26);
					INDENT377=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4186); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT377);

					DebugLocation(526, 33);
					// SugarCpp.g:526:33: ( NEWLINE )*
					try { DebugEnterSubRule(164);
					while (true)
					{
						int alt164=2;
						try { DebugEnterDecision(164, false);
						int LA164_0 = input.LA(1);

						if ((LA164_0==NEWLINE))
						{
							alt164 = 1;
						}


						} finally { DebugExitDecision(164); }
						switch ( alt164 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:526:33: NEWLINE
							{
							DebugLocation(526, 33);
							NEWLINE378=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4188); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE378);


							}
							break;

						default:
							goto loop164;
						}
					}

					loop164:
						;

					} finally { DebugExitSubRule(164); }

					DebugLocation(526, 42);
					// SugarCpp.g:526:42: ( where_item ( NEWLINE )+ )+
					int cnt166=0;
					try { DebugEnterSubRule(166);
					while (true)
					{
						int alt166=2;
						try { DebugEnterDecision(166, false);
						int LA166_0 = input.LA(1);

						if ((LA166_0==IDENT||LA166_0==85||LA166_0==90||LA166_0==92||LA166_0==94||(LA166_0>=96 && LA166_0<=97)||(LA166_0>=100 && LA166_0<=101)||LA166_0==130||LA166_0==141||(LA166_0>=145 && LA166_0<=147)||LA166_0==154||LA166_0==158||LA166_0==161||LA166_0==164||(LA166_0>=168 && LA166_0<=172)||LA166_0==176||LA166_0==181))
						{
							alt166 = 1;
						}


						} finally { DebugExitDecision(166); }
						switch (alt166)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:526:43: where_item ( NEWLINE )+
							{
							DebugLocation(526, 43);
							PushFollow(Follow._where_item_in_where_expr4192);
							where_item379=where_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_where_item.Add(where_item379.Tree);
							DebugLocation(526, 54);
							// SugarCpp.g:526:54: ( NEWLINE )+
							int cnt165=0;
							try { DebugEnterSubRule(165);
							while (true)
							{
								int alt165=2;
								try { DebugEnterDecision(165, false);
								int LA165_0 = input.LA(1);

								if ((LA165_0==NEWLINE))
								{
									alt165 = 1;
								}


								} finally { DebugExitDecision(165); }
								switch (alt165)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:526:54: NEWLINE
									{
									DebugLocation(526, 54);
									NEWLINE380=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4194); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE380);


									}
									break;

								default:
									if (cnt165 >= 1)
										goto loop165;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee165 = new EarlyExitException( 165, input );
									DebugRecognitionException(eee165);
									throw eee165;
								}
								cnt165++;
							}
							loop165:
								;

							} finally { DebugExitSubRule(165); }


							}
							break;

						default:
							if (cnt166 >= 1)
								goto loop166;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee166 = new EarlyExitException( 166, input );
							DebugRecognitionException(eee166);
							throw eee166;
						}
						cnt166++;
					}
					loop166:
						;

					} finally { DebugExitSubRule(166); }

					DebugLocation(526, 65);
					DEDENT381=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4199); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT381);

					DebugLocation(526, 72);
					// SugarCpp.g:526:72: ( NEWLINE )*
					try { DebugEnterSubRule(167);
					while (true)
					{
						int alt167=2;
						try { DebugEnterDecision(167, false);
						int LA167_0 = input.LA(1);

						if ((LA167_0==NEWLINE))
						{
							alt167 = 1;
						}


						} finally { DebugExitDecision(167); }
						switch ( alt167 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:526:72: NEWLINE
							{
							DebugLocation(526, 72);
							NEWLINE382=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4201); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE382);


							}
							break;

						default:
							goto loop167;
						}
					}

					loop167:
						;

					} finally { DebugExitSubRule(167); }

					DebugLocation(526, 81);
					DEDENT383=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4204); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_DEDENT.Add(DEDENT383);



					{
					// AST REWRITE
					// elements: where_expr, where_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 526:88: -> ^( Expr_Where $where_expr ( where_item )+ )
					{
						DebugLocation(526, 91);
						// SugarCpp.g:526:91: ^( Expr_Where $where_expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(526, 93);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(526, 105);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(526, 116);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(526, 116);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(168); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:528:9: 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT
				{
				DebugLocation(528, 9);
				string_literal384=(IToken)Match(input,175,Follow._175_in_where_expr4242); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_175.Add(string_literal384);

				DebugLocation(528, 17);
				// SugarCpp.g:528:17: ( NEWLINE )+
				int cnt169=0;
				try { DebugEnterSubRule(169);
				while (true)
				{
					int alt169=2;
					try { DebugEnterDecision(169, false);
					int LA169_0 = input.LA(1);

					if ((LA169_0==NEWLINE))
					{
						alt169 = 1;
					}


					} finally { DebugExitDecision(169); }
					switch (alt169)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:17: NEWLINE
						{
						DebugLocation(528, 17);
						NEWLINE385=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4244); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE385);


						}
						break;

					default:
						if (cnt169 >= 1)
							goto loop169;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee169 = new EarlyExitException( 169, input );
						DebugRecognitionException(eee169);
						throw eee169;
					}
					cnt169++;
				}
				loop169:
					;

				} finally { DebugExitSubRule(169); }

				DebugLocation(528, 26);
				INDENT386=(IToken)Match(input,INDENT,Follow._INDENT_in_where_expr4247); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT386);

				DebugLocation(528, 33);
				// SugarCpp.g:528:33: ( NEWLINE )*
				try { DebugEnterSubRule(170);
				while (true)
				{
					int alt170=2;
					try { DebugEnterDecision(170, false);
					int LA170_0 = input.LA(1);

					if ((LA170_0==NEWLINE))
					{
						alt170 = 1;
					}


					} finally { DebugExitDecision(170); }
					switch ( alt170 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:33: NEWLINE
						{
						DebugLocation(528, 33);
						NEWLINE387=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4249); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE387);


						}
						break;

					default:
						goto loop170;
					}
				}

				loop170:
					;

				} finally { DebugExitSubRule(170); }

				DebugLocation(528, 42);
				// SugarCpp.g:528:42: ( where_item ( NEWLINE )+ )+
				int cnt172=0;
				try { DebugEnterSubRule(172);
				while (true)
				{
					int alt172=2;
					try { DebugEnterDecision(172, false);
					int LA172_0 = input.LA(1);

					if ((LA172_0==IDENT||LA172_0==85||LA172_0==90||LA172_0==92||LA172_0==94||(LA172_0>=96 && LA172_0<=97)||(LA172_0>=100 && LA172_0<=101)||LA172_0==130||LA172_0==141||(LA172_0>=145 && LA172_0<=147)||LA172_0==154||LA172_0==158||LA172_0==161||LA172_0==164||(LA172_0>=168 && LA172_0<=172)||LA172_0==176||LA172_0==181))
					{
						alt172 = 1;
					}


					} finally { DebugExitDecision(172); }
					switch (alt172)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:528:43: where_item ( NEWLINE )+
						{
						DebugLocation(528, 43);
						PushFollow(Follow._where_item_in_where_expr4253);
						where_item388=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item388.Tree);
						DebugLocation(528, 54);
						// SugarCpp.g:528:54: ( NEWLINE )+
						int cnt171=0;
						try { DebugEnterSubRule(171);
						while (true)
						{
							int alt171=2;
							try { DebugEnterDecision(171, false);
							int LA171_0 = input.LA(1);

							if ((LA171_0==NEWLINE))
							{
								alt171 = 1;
							}


							} finally { DebugExitDecision(171); }
							switch (alt171)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:528:54: NEWLINE
								{
								DebugLocation(528, 54);
								NEWLINE389=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_where_expr4255); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE389);


								}
								break;

							default:
								if (cnt171 >= 1)
									goto loop171;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee171 = new EarlyExitException( 171, input );
								DebugRecognitionException(eee171);
								throw eee171;
							}
							cnt171++;
						}
						loop171:
							;

						} finally { DebugExitSubRule(171); }


						}
						break;

					default:
						if (cnt172 >= 1)
							goto loop172;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee172 = new EarlyExitException( 172, input );
						DebugRecognitionException(eee172);
						throw eee172;
					}
					cnt172++;
				}
				loop172:
					;

				} finally { DebugExitSubRule(172); }

				DebugLocation(528, 65);
				DEDENT390=(IToken)Match(input,DEDENT,Follow._DEDENT_in_where_expr4260); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT390);



				{
				// AST REWRITE
				// elements: where_expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 528:72: -> ^( Expr_Where $where_expr ( where_item )+ )
				{
					DebugLocation(528, 75);
					// SugarCpp.g:528:75: ^( Expr_Where $where_expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(528, 77);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(528, 89);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(528, 100);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(528, 100);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:529:15: 
				{

				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 529:15: -> expr
				{
					DebugLocation(529, 18);
					adaptor.AddChild(root_0, stream_expr.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(173); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_expr", 57);
			LeaveRule("where_expr", 57);
			LeaveRule_where_expr();
		}
		DebugLocation(531, 1);
		} finally { DebugExitRule(GrammarFileName, "where_expr"); }
		return retval;

	}
	// $ANTLR end "where_expr"

	partial void EnterRule_let_expr();
	partial void LeaveRule_let_expr();

	// $ANTLR start "let_expr"
	// SugarCpp.g:533:1: let_expr : 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) ;
	[GrammarRule("let_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> let_expr()
	{
		EnterRule_let_expr();
		EnterRule("let_expr", 58);
		TraceIn("let_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal391 = default(IToken);
		IToken string_literal393 = default(IToken);
		IToken NEWLINE395 = default(IToken);
		IToken INDENT396 = default(IToken);
		IToken NEWLINE397 = default(IToken);
		IToken NEWLINE399 = default(IToken);
		IToken DEDENT400 = default(IToken);
		IToken NEWLINE402 = default(IToken);
		IToken INDENT403 = default(IToken);
		IToken NEWLINE404 = default(IToken);
		IToken NEWLINE406 = default(IToken);
		IToken string_literal407 = default(IToken);
		IToken NEWLINE409 = default(IToken);
		IToken DEDENT410 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> where_item392 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr394 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr398 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr401 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_item405 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr408 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal391_tree = default(CommonTree);
		CommonTree string_literal393_tree = default(CommonTree);
		CommonTree NEWLINE395_tree = default(CommonTree);
		CommonTree INDENT396_tree = default(CommonTree);
		CommonTree NEWLINE397_tree = default(CommonTree);
		CommonTree NEWLINE399_tree = default(CommonTree);
		CommonTree DEDENT400_tree = default(CommonTree);
		CommonTree NEWLINE402_tree = default(CommonTree);
		CommonTree INDENT403_tree = default(CommonTree);
		CommonTree NEWLINE404_tree = default(CommonTree);
		CommonTree NEWLINE406_tree = default(CommonTree);
		CommonTree string_literal407_tree = default(CommonTree);
		CommonTree NEWLINE409_tree = default(CommonTree);
		CommonTree DEDENT410_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_where_item=new RewriteRuleSubtreeStream(adaptor,"rule where_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "let_expr");
		DebugLocation(533, 1);
		try
		{
			// SugarCpp.g:534:2: ( 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:534:4: 'let' where_item ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			{
			DebugLocation(534, 4);
			string_literal391=(IToken)Match(input,152,Follow._152_in_let_expr4318); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_152.Add(string_literal391);

			DebugLocation(534, 10);
			PushFollow(Follow._where_item_in_let_expr4320);
			where_item392=where_item();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_item.Add(where_item392.Tree);
			DebugLocation(534, 21);
			// SugarCpp.g:534:21: ( 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) )
			int alt184=2;
			try { DebugEnterSubRule(184);
			try { DebugEnterDecision(184, false);
			int LA184_0 = input.LA(1);

			if ((LA184_0==149))
			{
				alt184 = 1;
			}
			else if ((LA184_0==NEWLINE))
			{
				alt184 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 184, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(184); }
			switch (alt184)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:534:23: 'in' ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				{
				DebugLocation(534, 23);
				string_literal393=(IToken)Match(input,149,Follow._149_in_let_expr4324); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal393);

				DebugLocation(534, 28);
				// SugarCpp.g:534:28: ( expr -> ^( Expr_Where expr ( where_item )+ ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) ) )
				int alt178=2;
				try { DebugEnterSubRule(178);
				try { DebugEnterDecision(178, false);
				int LA178_0 = input.LA(1);

				if ((LA178_0==IDENT||LA178_0==NUMBER||LA178_0==STRING||LA178_0==85||LA178_0==90||LA178_0==92||LA178_0==94||(LA178_0>=96 && LA178_0<=97)||(LA178_0>=100 && LA178_0<=101)||(LA178_0>=130 && LA178_0<=131)||LA178_0==152||LA178_0==155||(LA178_0>=157 && LA178_0<=158)||LA178_0==181))
				{
					alt178 = 1;
				}
				else if ((LA178_0==NEWLINE))
				{
					alt178 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 178, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(178); }
				switch (alt178)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:534:30: expr
					{
					DebugLocation(534, 30);
					PushFollow(Follow._expr_in_let_expr4328);
					expr394=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr394.Tree);


					{
					// AST REWRITE
					// elements: where_item, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 534:35: -> ^( Expr_Where expr ( where_item )+ )
					{
						DebugLocation(534, 38);
						// SugarCpp.g:534:38: ^( Expr_Where expr ( where_item )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(534, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

						DebugLocation(534, 51);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(534, 56);
						if (!(stream_where_item.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_where_item.HasNext )
						{
							DebugLocation(534, 56);
							adaptor.AddChild(root_1, stream_where_item.NextTree());

						}
						stream_where_item.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:535:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					{
					DebugLocation(535, 12);
					// SugarCpp.g:535:12: ( NEWLINE )+
					int cnt174=0;
					try { DebugEnterSubRule(174);
					while (true)
					{
						int alt174=2;
						try { DebugEnterDecision(174, false);
						int LA174_0 = input.LA(1);

						if ((LA174_0==NEWLINE))
						{
							alt174 = 1;
						}


						} finally { DebugExitDecision(174); }
						switch (alt174)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:535:12: NEWLINE
							{
							DebugLocation(535, 12);
							NEWLINE395=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4352); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE395);


							}
							break;

						default:
							if (cnt174 >= 1)
								goto loop174;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee174 = new EarlyExitException( 174, input );
							DebugRecognitionException(eee174);
							throw eee174;
						}
						cnt174++;
					}
					loop174:
						;

					} finally { DebugExitSubRule(174); }

					DebugLocation(535, 21);
					// SugarCpp.g:535:21: ( INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT -> ^( Expr_Where expr ( where_item )+ ) | expr -> ^( Expr_Where expr ( where_item )+ ) )
					int alt177=2;
					try { DebugEnterSubRule(177);
					try { DebugEnterDecision(177, false);
					int LA177_0 = input.LA(1);

					if ((LA177_0==INDENT))
					{
						alt177 = 1;
					}
					else if ((LA177_0==IDENT||LA177_0==NUMBER||LA177_0==STRING||LA177_0==85||LA177_0==90||LA177_0==92||LA177_0==94||(LA177_0>=96 && LA177_0<=97)||(LA177_0>=100 && LA177_0<=101)||(LA177_0>=130 && LA177_0<=131)||LA177_0==152||LA177_0==155||(LA177_0>=157 && LA177_0<=158)||LA177_0==181))
					{
						alt177 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 177, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(177); }
					switch (alt177)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:535:23: INDENT ( NEWLINE )* expr ( NEWLINE )+ DEDENT
						{
						DebugLocation(535, 23);
						INDENT396=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4357); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT396);

						DebugLocation(535, 30);
						// SugarCpp.g:535:30: ( NEWLINE )*
						try { DebugEnterSubRule(175);
						while (true)
						{
							int alt175=2;
							try { DebugEnterDecision(175, false);
							int LA175_0 = input.LA(1);

							if ((LA175_0==NEWLINE))
							{
								alt175 = 1;
							}


							} finally { DebugExitDecision(175); }
							switch ( alt175 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:535:30: NEWLINE
								{
								DebugLocation(535, 30);
								NEWLINE397=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4359); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE397);


								}
								break;

							default:
								goto loop175;
							}
						}

						loop175:
							;

						} finally { DebugExitSubRule(175); }

						DebugLocation(535, 39);
						PushFollow(Follow._expr_in_let_expr4362);
						expr398=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr398.Tree);
						DebugLocation(535, 44);
						// SugarCpp.g:535:44: ( NEWLINE )+
						int cnt176=0;
						try { DebugEnterSubRule(176);
						while (true)
						{
							int alt176=2;
							try { DebugEnterDecision(176, false);
							int LA176_0 = input.LA(1);

							if ((LA176_0==NEWLINE))
							{
								alt176 = 1;
							}


							} finally { DebugExitDecision(176); }
							switch (alt176)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:535:44: NEWLINE
								{
								DebugLocation(535, 44);
								NEWLINE399=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4364); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE399);


								}
								break;

							default:
								if (cnt176 >= 1)
									goto loop176;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee176 = new EarlyExitException( 176, input );
								DebugRecognitionException(eee176);
								throw eee176;
							}
							cnt176++;
						}
						loop176:
							;

						} finally { DebugExitSubRule(176); }

						DebugLocation(535, 53);
						DEDENT400=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4367); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT400);



						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 535:60: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(535, 63);
							// SugarCpp.g:535:63: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(535, 65);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(535, 76);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(535, 81);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(535, 81);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:536:14: expr
						{
						DebugLocation(536, 14);
						PushFollow(Follow._expr_in_let_expr4393);
						expr401=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr401.Tree);


						{
						// AST REWRITE
						// elements: where_item, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 536:19: -> ^( Expr_Where expr ( where_item )+ )
						{
							DebugLocation(536, 22);
							// SugarCpp.g:536:22: ^( Expr_Where expr ( where_item )+ )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(536, 24);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

							DebugLocation(536, 35);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(536, 40);
							if (!(stream_where_item.HasNext))
							{
								throw new RewriteEarlyExitException();
							}
							while ( stream_where_item.HasNext )
							{
								DebugLocation(536, 40);
								adaptor.AddChild(root_1, stream_where_item.NextTree());

							}
							stream_where_item.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(177); }


					}
					break;

				}
				} finally { DebugExitSubRule(178); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:539:11: ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ 'in' expr ( NEWLINE )+ DEDENT
				{
				DebugLocation(539, 11);
				// SugarCpp.g:539:11: ( NEWLINE )+
				int cnt179=0;
				try { DebugEnterSubRule(179);
				while (true)
				{
					int alt179=2;
					try { DebugEnterDecision(179, false);
					int LA179_0 = input.LA(1);

					if ((LA179_0==NEWLINE))
					{
						alt179 = 1;
					}


					} finally { DebugExitDecision(179); }
					switch (alt179)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:539:11: NEWLINE
						{
						DebugLocation(539, 11);
						NEWLINE402=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4440); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE402);


						}
						break;

					default:
						if (cnt179 >= 1)
							goto loop179;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee179 = new EarlyExitException( 179, input );
						DebugRecognitionException(eee179);
						throw eee179;
					}
					cnt179++;
				}
				loop179:
					;

				} finally { DebugExitSubRule(179); }

				DebugLocation(539, 20);
				INDENT403=(IToken)Match(input,INDENT,Follow._INDENT_in_let_expr4443); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT403);

				DebugLocation(539, 27);
				// SugarCpp.g:539:27: ( NEWLINE )*
				try { DebugEnterSubRule(180);
				while (true)
				{
					int alt180=2;
					try { DebugEnterDecision(180, false);
					int LA180_0 = input.LA(1);

					if ((LA180_0==NEWLINE))
					{
						alt180 = 1;
					}


					} finally { DebugExitDecision(180); }
					switch ( alt180 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:539:27: NEWLINE
						{
						DebugLocation(539, 27);
						NEWLINE404=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4445); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE404);


						}
						break;

					default:
						goto loop180;
					}
				}

				loop180:
					;

				} finally { DebugExitSubRule(180); }

				DebugLocation(539, 36);
				// SugarCpp.g:539:36: ( where_item ( NEWLINE )+ )+
				int cnt182=0;
				try { DebugEnterSubRule(182);
				while (true)
				{
					int alt182=2;
					try { DebugEnterDecision(182, false);
					int LA182_0 = input.LA(1);

					if ((LA182_0==IDENT||LA182_0==85||LA182_0==90||LA182_0==92||LA182_0==94||(LA182_0>=96 && LA182_0<=97)||(LA182_0>=100 && LA182_0<=101)||LA182_0==130||LA182_0==141||(LA182_0>=145 && LA182_0<=147)||LA182_0==154||LA182_0==158||LA182_0==161||LA182_0==164||(LA182_0>=168 && LA182_0<=172)||LA182_0==176||LA182_0==181))
					{
						alt182 = 1;
					}


					} finally { DebugExitDecision(182); }
					switch (alt182)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:539:37: where_item ( NEWLINE )+
						{
						DebugLocation(539, 37);
						PushFollow(Follow._where_item_in_let_expr4449);
						where_item405=where_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_where_item.Add(where_item405.Tree);
						DebugLocation(539, 48);
						// SugarCpp.g:539:48: ( NEWLINE )+
						int cnt181=0;
						try { DebugEnterSubRule(181);
						while (true)
						{
							int alt181=2;
							try { DebugEnterDecision(181, false);
							int LA181_0 = input.LA(1);

							if ((LA181_0==NEWLINE))
							{
								alt181 = 1;
							}


							} finally { DebugExitDecision(181); }
							switch (alt181)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:539:48: NEWLINE
								{
								DebugLocation(539, 48);
								NEWLINE406=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4451); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE406);


								}
								break;

							default:
								if (cnt181 >= 1)
									goto loop181;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee181 = new EarlyExitException( 181, input );
								DebugRecognitionException(eee181);
								throw eee181;
							}
							cnt181++;
						}
						loop181:
							;

						} finally { DebugExitSubRule(181); }


						}
						break;

					default:
						if (cnt182 >= 1)
							goto loop182;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee182 = new EarlyExitException( 182, input );
						DebugRecognitionException(eee182);
						throw eee182;
					}
					cnt182++;
				}
				loop182:
					;

				} finally { DebugExitSubRule(182); }

				DebugLocation(539, 59);
				string_literal407=(IToken)Match(input,149,Follow._149_in_let_expr4456); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_149.Add(string_literal407);

				DebugLocation(539, 64);
				PushFollow(Follow._expr_in_let_expr4458);
				expr408=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr408.Tree);
				DebugLocation(539, 69);
				// SugarCpp.g:539:69: ( NEWLINE )+
				int cnt183=0;
				try { DebugEnterSubRule(183);
				while (true)
				{
					int alt183=2;
					try { DebugEnterDecision(183, false);
					int LA183_0 = input.LA(1);

					if ((LA183_0==NEWLINE))
					{
						alt183 = 1;
					}


					} finally { DebugExitDecision(183); }
					switch (alt183)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:539:69: NEWLINE
						{
						DebugLocation(539, 69);
						NEWLINE409=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_let_expr4460); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE409);


						}
						break;

					default:
						if (cnt183 >= 1)
							goto loop183;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee183 = new EarlyExitException( 183, input );
						DebugRecognitionException(eee183);
						throw eee183;
					}
					cnt183++;
				}
				loop183:
					;

				} finally { DebugExitSubRule(183); }

				DebugLocation(539, 78);
				DEDENT410=(IToken)Match(input,DEDENT,Follow._DEDENT_in_let_expr4463); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT410);



				{
				// AST REWRITE
				// elements: expr, where_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 539:85: -> ^( Expr_Where expr ( where_item )+ )
				{
					DebugLocation(539, 88);
					// SugarCpp.g:539:88: ^( Expr_Where expr ( where_item )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(539, 90);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Where, "Expr_Where"), root_1);

					DebugLocation(539, 101);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(539, 106);
					if (!(stream_where_item.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_where_item.HasNext )
					{
						DebugLocation(539, 106);
						adaptor.AddChild(root_1, stream_where_item.NextTree());

					}
					stream_where_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(184); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("let_expr", 58);
			LeaveRule("let_expr", 58);
			LeaveRule_let_expr();
		}
		DebugLocation(541, 1);
		} finally { DebugExitRule(GrammarFileName, "let_expr"); }
		return retval;

	}
	// $ANTLR end "let_expr"

	partial void EnterRule_match_item();
	partial void LeaveRule_match_item();

	// $ANTLR start "match_item"
	// SugarCpp.g:543:1: match_item : '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) ;
	[GrammarRule("match_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_item()
	{
		EnterRule_match_item();
		EnterRule("match_item", 59);
		TraceIn("match_item", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal411 = default(IToken);
		IToken string_literal413 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr412 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> where_expr414 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal411_tree = default(CommonTree);
		CommonTree string_literal413_tree = default(CommonTree);
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_where_expr=new RewriteRuleSubtreeStream(adaptor,"rule where_expr");
		try { DebugEnterRule(GrammarFileName, "match_item");
		DebugLocation(543, 1);
		try
		{
			// SugarCpp.g:544:2: ( '|' expr '=>' where_expr -> ^( Match_Expr_Item expr where_expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:544:4: '|' expr '=>' where_expr
			{
			DebugLocation(544, 4);
			char_literal411=(IToken)Match(input,177,Follow._177_in_match_item4495); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_177.Add(char_literal411);

			DebugLocation(544, 8);
			PushFollow(Follow._expr_in_match_item4497);
			expr412=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr412.Tree);
			DebugLocation(544, 13);
			string_literal413=(IToken)Match(input,123,Follow._123_in_match_item4499); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_123.Add(string_literal413);

			DebugLocation(544, 18);
			PushFollow(Follow._where_expr_in_match_item4501);
			where_expr414=where_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_where_expr.Add(where_expr414.Tree);


			{
			// AST REWRITE
			// elements: where_expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 544:29: -> ^( Match_Expr_Item expr where_expr )
			{
				DebugLocation(544, 32);
				// SugarCpp.g:544:32: ^( Match_Expr_Item expr where_expr )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(544, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr_Item, "Match_Expr_Item"), root_1);

				DebugLocation(544, 50);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(544, 55);
				adaptor.AddChild(root_1, stream_where_expr.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_item", 59);
			LeaveRule("match_item", 59);
			LeaveRule_match_item();
		}
		DebugLocation(545, 1);
		} finally { DebugExitRule(GrammarFileName, "match_item"); }
		return retval;

	}
	// $ANTLR end "match_item"

	partial void EnterRule_match_expr();
	partial void LeaveRule_match_expr();

	// $ANTLR start "match_expr"
	// SugarCpp.g:547:1: match_expr : 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) ;
	[GrammarRule("match_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> match_expr()
	{
		EnterRule_match_expr();
		EnterRule("match_expr", 60);
		TraceIn("match_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal415 = default(IToken);
		IToken NEWLINE417 = default(IToken);
		IToken INDENT418 = default(IToken);
		IToken NEWLINE419 = default(IToken);
		IToken NEWLINE421 = default(IToken);
		IToken DEDENT422 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr416 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_item420 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal415_tree = default(CommonTree);
		CommonTree NEWLINE417_tree = default(CommonTree);
		CommonTree INDENT418_tree = default(CommonTree);
		CommonTree NEWLINE419_tree = default(CommonTree);
		CommonTree NEWLINE421_tree = default(CommonTree);
		CommonTree DEDENT422_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleSubtreeStream stream_match_item=new RewriteRuleSubtreeStream(adaptor,"rule match_item");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "match_expr");
		DebugLocation(547, 1);
		try
		{
			// SugarCpp.g:548:2: ( 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT -> ^( Match_Expr ( expr )? ( match_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:548:4: 'match' ( expr )? ( NEWLINE )+ INDENT ( NEWLINE )* ( match_item ( NEWLINE )+ )+ DEDENT
			{
			DebugLocation(548, 4);
			string_literal415=(IToken)Match(input,155,Follow._155_in_match_expr4522); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_155.Add(string_literal415);

			DebugLocation(548, 12);
			// SugarCpp.g:548:12: ( expr )?
			int alt185=2;
			try { DebugEnterSubRule(185);
			try { DebugEnterDecision(185, false);
			int LA185_0 = input.LA(1);

			if ((LA185_0==IDENT||LA185_0==NUMBER||LA185_0==STRING||LA185_0==85||LA185_0==90||LA185_0==92||LA185_0==94||(LA185_0>=96 && LA185_0<=97)||(LA185_0>=100 && LA185_0<=101)||(LA185_0>=130 && LA185_0<=131)||LA185_0==152||LA185_0==155||(LA185_0>=157 && LA185_0<=158)||LA185_0==181))
			{
				alt185 = 1;
			}
			} finally { DebugExitDecision(185); }
			switch (alt185)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:548:12: expr
				{
				DebugLocation(548, 12);
				PushFollow(Follow._expr_in_match_expr4524);
				expr416=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr416.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(185); }

			DebugLocation(548, 18);
			// SugarCpp.g:548:18: ( NEWLINE )+
			int cnt186=0;
			try { DebugEnterSubRule(186);
			while (true)
			{
				int alt186=2;
				try { DebugEnterDecision(186, false);
				int LA186_0 = input.LA(1);

				if ((LA186_0==NEWLINE))
				{
					alt186 = 1;
				}


				} finally { DebugExitDecision(186); }
				switch (alt186)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:548:18: NEWLINE
					{
					DebugLocation(548, 18);
					NEWLINE417=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4527); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE417);


					}
					break;

				default:
					if (cnt186 >= 1)
						goto loop186;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee186 = new EarlyExitException( 186, input );
					DebugRecognitionException(eee186);
					throw eee186;
				}
				cnt186++;
			}
			loop186:
				;

			} finally { DebugExitSubRule(186); }

			DebugLocation(548, 27);
			INDENT418=(IToken)Match(input,INDENT,Follow._INDENT_in_match_expr4530); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT418);

			DebugLocation(548, 34);
			// SugarCpp.g:548:34: ( NEWLINE )*
			try { DebugEnterSubRule(187);
			while (true)
			{
				int alt187=2;
				try { DebugEnterDecision(187, false);
				int LA187_0 = input.LA(1);

				if ((LA187_0==NEWLINE))
				{
					alt187 = 1;
				}


				} finally { DebugExitDecision(187); }
				switch ( alt187 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:548:34: NEWLINE
					{
					DebugLocation(548, 34);
					NEWLINE419=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4532); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE419);


					}
					break;

				default:
					goto loop187;
				}
			}

			loop187:
				;

			} finally { DebugExitSubRule(187); }

			DebugLocation(548, 43);
			// SugarCpp.g:548:43: ( match_item ( NEWLINE )+ )+
			int cnt189=0;
			try { DebugEnterSubRule(189);
			while (true)
			{
				int alt189=2;
				try { DebugEnterDecision(189, false);
				int LA189_0 = input.LA(1);

				if ((LA189_0==177))
				{
					alt189 = 1;
				}


				} finally { DebugExitDecision(189); }
				switch (alt189)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:548:44: match_item ( NEWLINE )+
					{
					DebugLocation(548, 44);
					PushFollow(Follow._match_item_in_match_expr4536);
					match_item420=match_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_match_item.Add(match_item420.Tree);
					DebugLocation(548, 55);
					// SugarCpp.g:548:55: ( NEWLINE )+
					int cnt188=0;
					try { DebugEnterSubRule(188);
					while (true)
					{
						int alt188=2;
						try { DebugEnterDecision(188, false);
						int LA188_0 = input.LA(1);

						if ((LA188_0==NEWLINE))
						{
							alt188 = 1;
						}


						} finally { DebugExitDecision(188); }
						switch (alt188)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:548:55: NEWLINE
							{
							DebugLocation(548, 55);
							NEWLINE421=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_match_expr4538); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE421);


							}
							break;

						default:
							if (cnt188 >= 1)
								goto loop188;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee188 = new EarlyExitException( 188, input );
							DebugRecognitionException(eee188);
							throw eee188;
						}
						cnt188++;
					}
					loop188:
						;

					} finally { DebugExitSubRule(188); }


					}
					break;

				default:
					if (cnt189 >= 1)
						goto loop189;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee189 = new EarlyExitException( 189, input );
					DebugRecognitionException(eee189);
					throw eee189;
				}
				cnt189++;
			}
			loop189:
				;

			} finally { DebugExitSubRule(189); }

			DebugLocation(548, 66);
			DEDENT422=(IToken)Match(input,DEDENT,Follow._DEDENT_in_match_expr4543); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT422);



			{
			// AST REWRITE
			// elements: expr, match_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 548:73: -> ^( Match_Expr ( expr )? ( match_item )+ )
			{
				DebugLocation(548, 76);
				// SugarCpp.g:548:76: ^( Match_Expr ( expr )? ( match_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(548, 78);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Expr, "Match_Expr"), root_1);

				DebugLocation(548, 89);
				// SugarCpp.g:548:89: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(548, 89);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();
				DebugLocation(548, 95);
				if (!(stream_match_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_match_item.HasNext )
				{
					DebugLocation(548, 95);
					adaptor.AddChild(root_1, stream_match_item.NextTree());

				}
				stream_match_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("match_expr", 60);
			LeaveRule("match_expr", 60);
			LeaveRule_match_expr();
		}
		DebugLocation(549, 1);
		} finally { DebugExitRule(GrammarFileName, "match_expr"); }
		return retval;

	}
	// $ANTLR end "match_expr"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:551:1: expr : ( feed_expr | match_expr | let_expr );
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 61);
		TraceIn("expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> feed_expr423 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> match_expr424 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> let_expr425 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(551, 1);
		try
		{
			// SugarCpp.g:552:2: ( feed_expr | match_expr | let_expr )
			int alt190=3;
			try { DebugEnterDecision(190, false);
			switch (input.LA(1))
			{
			case IDENT:
			case NUMBER:
			case STRING:
			case 85:
			case 90:
			case 92:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 130:
			case 131:
			case 157:
			case 158:
			case 181:
				{
				alt190 = 1;
				}
				break;
			case 155:
				{
				alt190 = 2;
				}
				break;
			case 152:
				{
				alt190 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 190, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(190); }
			switch (alt190)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:552:4: feed_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(552, 4);
				PushFollow(Follow._feed_expr_in_expr4566);
				feed_expr423=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, feed_expr423.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:553:4: match_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(553, 4);
				PushFollow(Follow._match_expr_in_expr4571);
				match_expr424=match_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, match_expr424.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:554:4: let_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(554, 4);
				PushFollow(Follow._let_expr_in_expr4576);
				let_expr425=let_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, let_expr425.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 61);
			LeaveRule("expr", 61);
			LeaveRule_expr();
		}
		DebugLocation(555, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_feed_expr();
	partial void LeaveRule_feed_expr();

	// $ANTLR start "feed_expr"
	// SugarCpp.g:557:1: feed_expr : ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr );
	[GrammarRule("feed_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> feed_expr()
	{
		EnterRule_feed_expr();
		EnterRule("feed_expr", 62);
		TraceIn("feed_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal426 = default(IToken);
		IToken string_literal428 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr427 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr429 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr430 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal426_tree = default(CommonTree);
		CommonTree string_literal428_tree = default(CommonTree);
		RewriteRuleITokenStream stream_179=new RewriteRuleITokenStream(adaptor,"token 179");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "feed_expr");
		DebugLocation(557, 1);
		try
		{
			// SugarCpp.g:558:2: ( ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) ) | list_expr )
			int alt192=2;
			try { DebugEnterDecision(192, false);
			switch (input.LA(1))
			{
			case 92:
				{
				int LA192_1 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt192 = 1;
				}
				else if ((true))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 85:
			case 90:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 158:
			case 181:
				{
				int LA192_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt192 = 1;
				}
				else if ((true))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 2, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 157:
				{
				int LA192_3 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt192 = 1;
				}
				else if ((true))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NUMBER:
				{
				int LA192_4 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt192 = 1;
				}
				else if ((true))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 4, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENT:
				{
				int LA192_5 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt192 = 1;
				}
				else if ((true))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 5, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA192_6 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt192 = 1;
				}
				else if ((true))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 6, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 130:
				{
				int LA192_7 = input.LA(2);

				if ((EvaluatePredicate(synpred1_SugarCpp_fragment)))
				{
					alt192 = 1;
				}
				else if ((true))
				{
					alt192 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 7, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 131:
				{
				alt192 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 192, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(192); }
			switch (alt192)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:558:4: ( modify_expr ( '<|' | '|>' ) )=> (a= modify_expr -> $a) ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				{
				DebugLocation(558, 36);
				// SugarCpp.g:558:36: (a= modify_expr -> $a)
				DebugEnterAlt(1);
				// SugarCpp.g:558:37: a= modify_expr
				{
				DebugLocation(558, 38);
				PushFollow(Follow._modify_expr_in_feed_expr4605);
				a=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(a.Tree);


				{
				// AST REWRITE
				// elements: a
				// token labels: 
				// rule labels: retval, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 558:51: -> $a
				{
					DebugLocation(558, 55);
					adaptor.AddChild(root_0, stream_a.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}

				DebugLocation(558, 58);
				// SugarCpp.g:558:58: ( '<|' list_expr -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) ) | '|>' list_expr -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) ) )
				int alt191=2;
				try { DebugEnterSubRule(191);
				try { DebugEnterDecision(191, false);
				int LA191_0 = input.LA(1);

				if ((LA191_0==119))
				{
					alt191 = 1;
				}
				else if ((LA191_0==179))
				{
					alt191 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 191, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(191); }
				switch (alt191)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:558:60: '<|' list_expr
					{
					DebugLocation(558, 60);
					string_literal426=(IToken)Match(input,119,Follow._119_in_feed_expr4615); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_119.Add(string_literal426);

					DebugLocation(558, 65);
					PushFollow(Follow._list_expr_in_feed_expr4617);
					list_expr427=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr427.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 558:75: -> ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
					{
						DebugLocation(558, 78);
						// SugarCpp.g:558:78: ^( Expr_Call $feed_expr ^( Expr_Args list_expr ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(558, 80);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(558, 91);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(558, 101);
						// SugarCpp.g:558:101: ^( Expr_Args list_expr )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(558, 103);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(558, 113);
						adaptor.AddChild(root_2, stream_list_expr.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:559:18: '|>' list_expr
					{
					DebugLocation(559, 18);
					string_literal428=(IToken)Match(input,179,Follow._179_in_feed_expr4651); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_179.Add(string_literal428);

					DebugLocation(559, 23);
					PushFollow(Follow._list_expr_in_feed_expr4653);
					list_expr429=list_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_list_expr.Add(list_expr429.Tree);


					{
					// AST REWRITE
					// elements: feed_expr, list_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 559:33: -> ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
					{
						DebugLocation(559, 36);
						// SugarCpp.g:559:36: ^( Expr_Call list_expr ^( Expr_Args $feed_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(559, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(559, 48);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());
						DebugLocation(559, 58);
						// SugarCpp.g:559:58: ^( Expr_Args $feed_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(559, 60);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_2);

						DebugLocation(559, 71);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(191); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:561:4: list_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(561, 4);
				PushFollow(Follow._list_expr_in_feed_expr4690);
				list_expr430=list_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, list_expr430.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("feed_expr", 62);
			LeaveRule("feed_expr", 62);
			LeaveRule_feed_expr();
		}
		DebugLocation(562, 1);
		} finally { DebugExitRule(GrammarFileName, "feed_expr"); }
		return retval;

	}
	// $ANTLR end "feed_expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:564:1: list_expr : ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 63);
		TraceIn("list_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal431 = default(IToken);
		IToken string_literal433 = default(IToken);
		IToken char_literal435 = default(IToken);
		IToken char_literal437 = default(IToken);
		IToken char_literal438 = default(IToken);
		IToken char_literal440 = default(IToken);
		IToken char_literal441 = default(IToken);
		IToken NEWLINE442 = default(IToken);
		IToken INDENT443 = default(IToken);
		IToken DEDENT444 = default(IToken);
		IToken char_literal446 = default(IToken);
		IToken NEWLINE447 = default(IToken);
		IToken INDENT448 = default(IToken);
		IToken DEDENT449 = default(IToken);
		IToken char_literal451 = default(IToken);
		IToken NEWLINE452 = default(IToken);
		IToken INDENT453 = default(IToken);
		IToken DEDENT454 = default(IToken);
		IToken char_literal455 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr432 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item434 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> for_item436 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name439 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr445 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> feed_expr450 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr456 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal431_tree = default(CommonTree);
		CommonTree string_literal433_tree = default(CommonTree);
		CommonTree char_literal435_tree = default(CommonTree);
		CommonTree char_literal437_tree = default(CommonTree);
		CommonTree char_literal438_tree = default(CommonTree);
		CommonTree char_literal440_tree = default(CommonTree);
		CommonTree char_literal441_tree = default(CommonTree);
		CommonTree NEWLINE442_tree = default(CommonTree);
		CommonTree INDENT443_tree = default(CommonTree);
		CommonTree DEDENT444_tree = default(CommonTree);
		CommonTree char_literal446_tree = default(CommonTree);
		CommonTree NEWLINE447_tree = default(CommonTree);
		CommonTree INDENT448_tree = default(CommonTree);
		CommonTree DEDENT449_tree = default(CommonTree);
		CommonTree char_literal451_tree = default(CommonTree);
		CommonTree NEWLINE452_tree = default(CommonTree);
		CommonTree INDENT453_tree = default(CommonTree);
		CommonTree DEDENT454_tree = default(CommonTree);
		CommonTree char_literal455_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_feed_expr=new RewriteRuleSubtreeStream(adaptor,"rule feed_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_for_item=new RewriteRuleSubtreeStream(adaptor,"rule for_item");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(564, 1);
		try
		{
			// SugarCpp.g:565:2: ( ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr ) | '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( feed_expr )* ) | lambda_expr )
			int alt199=3;
			try { DebugEnterDecision(199, false);
			int LA199_0 = input.LA(1);

			if ((LA199_0==131))
			{
				int LA199_1 = input.LA(2);

				if ((EvaluatePredicate(synpred2_SugarCpp_fragment)))
				{
					alt199 = 1;
				}
				else if ((true))
				{
					alt199 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 199, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA199_0==IDENT||LA199_0==NUMBER||LA199_0==STRING||LA199_0==85||LA199_0==90||LA199_0==92||LA199_0==94||(LA199_0>=96 && LA199_0<=97)||(LA199_0>=100 && LA199_0<=101)||LA199_0==130||(LA199_0>=157 && LA199_0<=158)||LA199_0==181))
			{
				alt199 = 3;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 199, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(199); }
			switch (alt199)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:565:4: ( '[' feed_expr 'for' )=> '[' feed_expr 'for' for_item ( ',' for_item )* ']' ':' type_name
				{
				DebugLocation(565, 29);
				char_literal431=(IToken)Match(input,131,Follow._131_in_list_expr4711); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal431);

				DebugLocation(565, 33);
				PushFollow(Follow._feed_expr_in_list_expr4713);
				feed_expr432=feed_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_feed_expr.Add(feed_expr432.Tree);
				DebugLocation(565, 43);
				string_literal433=(IToken)Match(input,146,Follow._146_in_list_expr4715); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_146.Add(string_literal433);

				DebugLocation(565, 49);
				PushFollow(Follow._for_item_in_list_expr4717);
				for_item434=for_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_for_item.Add(for_item434.Tree);
				DebugLocation(565, 58);
				// SugarCpp.g:565:58: ( ',' for_item )*
				try { DebugEnterSubRule(193);
				while (true)
				{
					int alt193=2;
					try { DebugEnterDecision(193, false);
					int LA193_0 = input.LA(1);

					if ((LA193_0==99))
					{
						alt193 = 1;
					}


					} finally { DebugExitDecision(193); }
					switch ( alt193 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:565:59: ',' for_item
						{
						DebugLocation(565, 59);
						char_literal435=(IToken)Match(input,99,Follow._99_in_list_expr4720); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal435);

						DebugLocation(565, 63);
						PushFollow(Follow._for_item_in_list_expr4722);
						for_item436=for_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_for_item.Add(for_item436.Tree);

						}
						break;

					default:
						goto loop193;
					}
				}

				loop193:
					;

				} finally { DebugExitSubRule(193); }

				DebugLocation(565, 74);
				char_literal437=(IToken)Match(input,132,Follow._132_in_list_expr4726); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal437);

				DebugLocation(565, 78);
				char_literal438=(IToken)Match(input,110,Follow._110_in_list_expr4728); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(char_literal438);

				DebugLocation(565, 82);
				PushFollow(Follow._type_name_in_list_expr4730);
				type_name439=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name439.Tree);


				{
				// AST REWRITE
				// elements: feed_expr, type_name, for_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 565:93: -> ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
				{
					DebugLocation(565, 96);
					// SugarCpp.g:565:96: ^( Expr_List_Generation ( type_name )? ^( Stmt_For ( for_item )* ^( Stmt_Block ) ) feed_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(565, 98);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List_Generation, "Expr_List_Generation"), root_1);

					DebugLocation(565, 119);
					// SugarCpp.g:565:119: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(565, 119);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(565, 130);
					// SugarCpp.g:565:130: ^( Stmt_For ( for_item )* ^( Stmt_Block ) )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(565, 132);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_2);

					DebugLocation(565, 141);
					// SugarCpp.g:565:141: ( for_item )*
					while ( stream_for_item.HasNext )
					{
						DebugLocation(565, 141);
						adaptor.AddChild(root_2, stream_for_item.NextTree());

					}
					stream_for_item.Reset();
					DebugLocation(565, 151);
					// SugarCpp.g:565:151: ^( Stmt_Block )
					{
					CommonTree root_3 = (CommonTree)adaptor.Nil();
					DebugLocation(565, 153);
					root_3 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_3);

					adaptor.AddChild(root_2, root_3);
					}

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(565, 166);
					adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:566:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(566, 4);
				char_literal440=(IToken)Match(input,131,Follow._131_in_list_expr4758); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_131.Add(char_literal440);

				DebugLocation(566, 8);
				// SugarCpp.g:566:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?
				int alt197=2;
				try { DebugEnterSubRule(197);
				try { DebugEnterDecision(197, false);
				try
				{
					alt197 = dfa197.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(197); }
				switch (alt197)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:566:9: ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					{
					DebugLocation(566, 9);
					// SugarCpp.g:566:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(194);
					while (true)
					{
						int alt194=5;
						try { DebugEnterDecision(194, false);
						switch (input.LA(1))
						{
						case 99:
							{
							alt194 = 1;
							}
							break;
						case NEWLINE:
							{
							alt194 = 2;
							}
							break;
						case INDENT:
							{
							alt194 = 3;
							}
							break;
						case DEDENT:
							{
							alt194 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(194); }
						switch ( alt194 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:566:10: ','
							{
							DebugLocation(566, 10);
							char_literal441=(IToken)Match(input,99,Follow._99_in_list_expr4762); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal441);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:566:16: NEWLINE
							{
							DebugLocation(566, 16);
							NEWLINE442=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4766); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE442);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:566:26: INDENT
							{
							DebugLocation(566, 26);
							INDENT443=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4770); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_INDENT.Add(INDENT443);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:566:35: DEDENT
							{
							DebugLocation(566, 35);
							DEDENT444=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4774); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_DEDENT.Add(DEDENT444);


							}
							break;

						default:
							goto loop194;
						}
					}

					loop194:
						;

					} finally { DebugExitSubRule(194); }

					DebugLocation(566, 44);
					PushFollow(Follow._feed_expr_in_list_expr4778);
					feed_expr445=feed_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_feed_expr.Add(feed_expr445.Tree);
					DebugLocation(566, 54);
					// SugarCpp.g:566:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*
					try { DebugEnterSubRule(196);
					while (true)
					{
						int alt196=2;
						try { DebugEnterDecision(196, false);
						try
						{
							alt196 = dfa196.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(196); }
						switch ( alt196 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:566:55: ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr
							{
							DebugLocation(566, 55);
							// SugarCpp.g:566:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt195=0;
							try { DebugEnterSubRule(195);
							while (true)
							{
								int alt195=5;
								try { DebugEnterDecision(195, false);
								switch (input.LA(1))
								{
								case 99:
									{
									alt195 = 1;
									}
									break;
								case NEWLINE:
									{
									alt195 = 2;
									}
									break;
								case INDENT:
									{
									alt195 = 3;
									}
									break;
								case DEDENT:
									{
									alt195 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(195); }
								switch (alt195)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:566:56: ','
									{
									DebugLocation(566, 56);
									char_literal446=(IToken)Match(input,99,Follow._99_in_list_expr4782); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_99.Add(char_literal446);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:566:62: NEWLINE
									{
									DebugLocation(566, 62);
									NEWLINE447=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4786); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE447);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:566:72: INDENT
									{
									DebugLocation(566, 72);
									INDENT448=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4790); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_INDENT.Add(INDENT448);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:566:81: DEDENT
									{
									DebugLocation(566, 81);
									DEDENT449=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4794); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_DEDENT.Add(DEDENT449);


									}
									break;

								default:
									if (cnt195 >= 1)
										goto loop195;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee195 = new EarlyExitException( 195, input );
									DebugRecognitionException(eee195);
									throw eee195;
								}
								cnt195++;
							}
							loop195:
								;

							} finally { DebugExitSubRule(195); }

							DebugLocation(566, 90);
							PushFollow(Follow._feed_expr_in_list_expr4798);
							feed_expr450=feed_expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_feed_expr.Add(feed_expr450.Tree);

							}
							break;

						default:
							goto loop196;
						}
					}

					loop196:
						;

					} finally { DebugExitSubRule(196); }


					}
					break;

				}
				} finally { DebugExitSubRule(197); }

				DebugLocation(566, 104);
				// SugarCpp.g:566:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(198);
				while (true)
				{
					int alt198=5;
					try { DebugEnterDecision(198, false);
					switch (input.LA(1))
					{
					case 99:
						{
						alt198 = 1;
						}
						break;
					case NEWLINE:
						{
						alt198 = 2;
						}
						break;
					case INDENT:
						{
						alt198 = 3;
						}
						break;
					case DEDENT:
						{
						alt198 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(198); }
					switch ( alt198 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:566:105: ','
						{
						DebugLocation(566, 105);
						char_literal451=(IToken)Match(input,99,Follow._99_in_list_expr4805); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal451);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:566:111: NEWLINE
						{
						DebugLocation(566, 111);
						NEWLINE452=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr4809); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE452);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:566:121: INDENT
						{
						DebugLocation(566, 121);
						INDENT453=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr4813); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_INDENT.Add(INDENT453);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:566:130: DEDENT
						{
						DebugLocation(566, 130);
						DEDENT454=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr4817); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT454);


						}
						break;

					default:
						goto loop198;
					}
				}

				loop198:
					;

				} finally { DebugExitSubRule(198); }

				DebugLocation(566, 139);
				char_literal455=(IToken)Match(input,132,Follow._132_in_list_expr4821); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_132.Add(char_literal455);



				{
				// AST REWRITE
				// elements: feed_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 566:143: -> ^( Expr_List ( feed_expr )* )
				{
					DebugLocation(566, 146);
					// SugarCpp.g:566:146: ^( Expr_List ( feed_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(566, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(566, 158);
					// SugarCpp.g:566:158: ( feed_expr )*
					while ( stream_feed_expr.HasNext )
					{
						DebugLocation(566, 158);
						adaptor.AddChild(root_1, stream_feed_expr.NextTree());

					}
					stream_feed_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:567:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(567, 4);
				PushFollow(Follow._lambda_expr_in_list_expr4835);
				lambda_expr456=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr456.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 63);
			LeaveRule("list_expr", 63);
			LeaveRule_list_expr();
		}
		DebugLocation(568, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_value();
	partial void LeaveRule_lambda_value();

	// $ANTLR start "lambda_value"
	// SugarCpp.g:570:1: lambda_value : ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block );
	[GrammarRule("lambda_value")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_value()
	{
		EnterRule_lambda_value();
		EnterRule("lambda_value", 64);
		TraceIn("lambda_value", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE458 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr457 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block459 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE458_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_value");
		DebugLocation(570, 1);
		try
		{
			// SugarCpp.g:571:2: ( expr -> ^( Stmt_Block ^( Stmt_Return expr ) ) | ( NEWLINE )+ stmt_block -> stmt_block )
			int alt201=2;
			try { DebugEnterDecision(201, false);
			int LA201_0 = input.LA(1);

			if ((LA201_0==IDENT||LA201_0==NUMBER||LA201_0==STRING||LA201_0==85||LA201_0==90||LA201_0==92||LA201_0==94||(LA201_0>=96 && LA201_0<=97)||(LA201_0>=100 && LA201_0<=101)||(LA201_0>=130 && LA201_0<=131)||LA201_0==152||LA201_0==155||(LA201_0>=157 && LA201_0<=158)||LA201_0==181))
			{
				alt201 = 1;
			}
			else if ((LA201_0==NEWLINE))
			{
				alt201 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 201, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(201); }
			switch (alt201)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:571:4: expr
				{
				DebugLocation(571, 4);
				PushFollow(Follow._expr_in_lambda_value4846);
				expr457=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr457.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 571:9: -> ^( Stmt_Block ^( Stmt_Return expr ) )
				{
					DebugLocation(571, 12);
					// SugarCpp.g:571:12: ^( Stmt_Block ^( Stmt_Return expr ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(571, 14);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

					DebugLocation(571, 25);
					// SugarCpp.g:571:25: ^( Stmt_Return expr )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(571, 27);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_2);

					DebugLocation(571, 39);
					adaptor.AddChild(root_2, stream_expr.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:572:4: ( NEWLINE )+ stmt_block
				{
				DebugLocation(572, 4);
				// SugarCpp.g:572:4: ( NEWLINE )+
				int cnt200=0;
				try { DebugEnterSubRule(200);
				while (true)
				{
					int alt200=2;
					try { DebugEnterDecision(200, false);
					int LA200_0 = input.LA(1);

					if ((LA200_0==NEWLINE))
					{
						alt200 = 1;
					}


					} finally { DebugExitDecision(200); }
					switch (alt200)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:572:4: NEWLINE
						{
						DebugLocation(572, 4);
						NEWLINE458=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_lambda_value4863); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE458);


						}
						break;

					default:
						if (cnt200 >= 1)
							goto loop200;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee200 = new EarlyExitException( 200, input );
						DebugRecognitionException(eee200);
						throw eee200;
					}
					cnt200++;
				}
				loop200:
					;

				} finally { DebugExitSubRule(200); }

				DebugLocation(572, 13);
				PushFollow(Follow._stmt_block_in_lambda_value4866);
				stmt_block459=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block459.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 572:24: -> stmt_block
				{
					DebugLocation(572, 27);
					adaptor.AddChild(root_0, stream_stmt_block.NextTree());

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_value", 64);
			LeaveRule("lambda_value", 64);
			LeaveRule_lambda_value();
		}
		DebugLocation(573, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_value"); }
		return retval;

	}
	// $ANTLR end "lambda_value"

	partial void EnterRule_lambda_type();
	partial void LeaveRule_lambda_type();

	// $ANTLR start "lambda_type"
	// SugarCpp.g:575:1: lambda_type : '(' type_name ')' -> type_name ;
	[GrammarRule("lambda_type")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_type()
	{
		EnterRule_lambda_type();
		EnterRule("lambda_type", 65);
		TraceIn("lambda_type", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal460 = default(IToken);
		IToken char_literal462 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name461 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal460_tree = default(CommonTree);
		CommonTree char_literal462_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "lambda_type");
		DebugLocation(575, 1);
		try
		{
			// SugarCpp.g:576:2: ( '(' type_name ')' -> type_name )
			DebugEnterAlt(1);
			// SugarCpp.g:576:4: '(' type_name ')'
			{
			DebugLocation(576, 4);
			char_literal460=(IToken)Match(input,92,Follow._92_in_lambda_type4881); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal460);

			DebugLocation(576, 8);
			PushFollow(Follow._type_name_in_lambda_type4883);
			type_name461=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name461.Tree);
			DebugLocation(576, 18);
			char_literal462=(IToken)Match(input,93,Follow._93_in_lambda_type4885); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_93.Add(char_literal462);



			{
			// AST REWRITE
			// elements: type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 576:22: -> type_name
			{
				DebugLocation(576, 25);
				adaptor.AddChild(root_0, stream_type_name.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_type", 65);
			LeaveRule("lambda_type", 65);
			LeaveRule_lambda_type();
		}
		DebugLocation(577, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_type"); }
		return retval;

	}
	// $ANTLR end "lambda_type"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:579:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 66);
		TraceIn("lambda_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal463 = default(IToken);
		IToken char_literal465 = default(IToken);
		IToken string_literal467 = default(IToken);
		IToken string_literal469 = default(IToken);
		IToken string_literal471 = default(IToken);
		IToken string_literal473 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args464 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_type466 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value468 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value470 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value472 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_value474 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr475 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal463_tree = default(CommonTree);
		CommonTree char_literal465_tree = default(CommonTree);
		CommonTree string_literal467_tree = default(CommonTree);
		CommonTree string_literal469_tree = default(CommonTree);
		CommonTree string_literal471_tree = default(CommonTree);
		CommonTree string_literal473_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_lambda_value=new RewriteRuleSubtreeStream(adaptor,"rule lambda_value");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_type=new RewriteRuleSubtreeStream(adaptor,"rule lambda_type");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(579, 1);
		try
		{
			// SugarCpp.g:580:2: ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr )
			int alt205=2;
			try { DebugEnterDecision(205, false);
			try
			{
				alt205 = dfa205.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(205); }
			switch (alt205)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:580:4: '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				{
				DebugLocation(580, 4);
				char_literal463=(IToken)Match(input,92,Follow._92_in_lambda_expr4900); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal463);

				DebugLocation(580, 8);
				// SugarCpp.g:580:8: ( func_args )?
				int alt202=2;
				try { DebugEnterSubRule(202);
				try { DebugEnterDecision(202, false);
				int LA202_0 = input.LA(1);

				if ((LA202_0==IDENT||LA202_0==112))
				{
					alt202 = 1;
				}
				} finally { DebugExitDecision(202); }
				switch (alt202)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:580:8: func_args
					{
					DebugLocation(580, 8);
					PushFollow(Follow._func_args_in_lambda_expr4902);
					func_args464=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args464.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(202); }

				DebugLocation(580, 19);
				char_literal465=(IToken)Match(input,93,Follow._93_in_lambda_expr4905); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal465);

				DebugLocation(580, 23);
				// SugarCpp.g:580:23: ( lambda_type )?
				int alt203=2;
				try { DebugEnterSubRule(203);
				try { DebugEnterDecision(203, false);
				int LA203_0 = input.LA(1);

				if ((LA203_0==92))
				{
					alt203 = 1;
				}
				} finally { DebugExitDecision(203); }
				switch (alt203)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:580:23: lambda_type
					{
					DebugLocation(580, 23);
					PushFollow(Follow._lambda_type_in_lambda_expr4907);
					lambda_type466=lambda_type();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_type.Add(lambda_type466.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(203); }

				DebugLocation(580, 36);
				// SugarCpp.g:580:36: ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) )
				int alt204=4;
				try { DebugEnterSubRule(204);
				try { DebugEnterDecision(204, false);
				switch (input.LA(1))
				{
				case 104:
					{
					alt204 = 1;
					}
					break;
				case 123:
					{
					alt204 = 2;
					}
					break;
				case 102:
					{
					alt204 = 3;
					}
					break;
				case 122:
					{
					alt204 = 4;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 204, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(204); }
				switch (alt204)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:580:38: '->' lambda_value
					{
					DebugLocation(580, 38);
					string_literal467=(IToken)Match(input,104,Follow._104_in_lambda_expr4912); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal467);

					DebugLocation(580, 43);
					PushFollow(Follow._lambda_value_in_lambda_expr4914);
					lambda_value468=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value468.Tree);


					{
					// AST REWRITE
					// elements: 104, func_args, lambda_value, lambda_type
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 580:57: -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(580, 60);
						// SugarCpp.g:580:60: ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(580, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(580, 74);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(580, 79);
						// SugarCpp.g:580:79: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(580, 79);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(580, 90);
						// SugarCpp.g:580:90: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(580, 90);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(580, 103);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:581:17: '=>' lambda_value
					{
					DebugLocation(581, 17);
					string_literal469=(IToken)Match(input,123,Follow._123_in_lambda_expr4949); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_123.Add(string_literal469);

					DebugLocation(581, 22);
					PushFollow(Follow._lambda_value_in_lambda_expr4951);
					lambda_value470=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value470.Tree);


					{
					// AST REWRITE
					// elements: func_args, lambda_type, 123, lambda_value
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 581:36: -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(581, 39);
						// SugarCpp.g:581:39: ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(581, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(581, 53);
						adaptor.AddChild(root_1, stream_123.NextNode());
						DebugLocation(581, 58);
						// SugarCpp.g:581:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(581, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(581, 69);
						// SugarCpp.g:581:69: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(581, 69);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(581, 82);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:582:14: '-->' lambda_value
					{
					DebugLocation(582, 14);
					string_literal471=(IToken)Match(input,102,Follow._102_in_lambda_expr4983); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_102.Add(string_literal471);

					DebugLocation(582, 20);
					PushFollow(Follow._lambda_value_in_lambda_expr4985);
					lambda_value472=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value472.Tree);


					{
					// AST REWRITE
					// elements: 102, lambda_type, func_args, lambda_value
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 582:34: -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(582, 37);
						// SugarCpp.g:582:37: ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(582, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(582, 51);
						adaptor.AddChild(root_1, stream_102.NextNode());
						DebugLocation(582, 57);
						// SugarCpp.g:582:57: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(582, 57);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(582, 68);
						// SugarCpp.g:582:68: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(582, 68);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(582, 81);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:583:17: '==>' lambda_value
					{
					DebugLocation(583, 17);
					string_literal473=(IToken)Match(input,122,Follow._122_in_lambda_expr5020); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_122.Add(string_literal473);

					DebugLocation(583, 23);
					PushFollow(Follow._lambda_value_in_lambda_expr5022);
					lambda_value474=lambda_value();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lambda_value.Add(lambda_value474.Tree);


					{
					// AST REWRITE
					// elements: lambda_value, lambda_type, 122, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 583:37: -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
					{
						DebugLocation(583, 40);
						// SugarCpp.g:583:40: ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(583, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(583, 54);
						adaptor.AddChild(root_1, stream_122.NextNode());
						DebugLocation(583, 60);
						// SugarCpp.g:583:60: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(583, 60);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(583, 71);
						// SugarCpp.g:583:71: ( lambda_type )?
						if (stream_lambda_type.HasNext)
						{
							DebugLocation(583, 71);
							adaptor.AddChild(root_1, stream_lambda_type.NextTree());

						}
						stream_lambda_type.Reset();
						DebugLocation(583, 84);
						adaptor.AddChild(root_1, stream_lambda_value.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(204); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:585:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(585, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr5057);
				modify_expr475=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr475.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 66);
			LeaveRule("lambda_expr", 66);
			LeaveRule_lambda_expr();
		}
		DebugLocation(586, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:588:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 67);
		TraceIn("modify_expr_op", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set476 = default(IToken);

		CommonTree set476_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(588, 91);
		try
		{
			// SugarCpp.g:588:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(588, 15);

			set476=(IToken)input.LT(1);
			if (input.LA(1)==88||input.LA(1)==91||input.LA(1)==95||input.LA(1)==98||input.LA(1)==103||input.LA(1)==109||input.LA(1)==117||input.LA(1)==120||input.LA(1)==127||input.LA(1)==134||input.LA(1)==178)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set476));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 67);
			LeaveRule("modify_expr_op", 67);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(588, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:589:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 68);
		TraceIn("modify_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set478 = default(IToken);
		IToken char_literal480 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr477 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr479 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr481 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set478_tree = default(CommonTree);
		CommonTree char_literal480_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(589, 1);
		try
		{
			// SugarCpp.g:590:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:590:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(590, 4);
			PushFollow(Follow._cond_expr_in_modify_expr5114);
			cond_expr477=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr477.Tree);
			DebugLocation(590, 14);
			// SugarCpp.g:590:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt207=3;
			try { DebugEnterSubRule(207);
			try { DebugEnterDecision(207, false);
			int LA207_0 = input.LA(1);

			if ((LA207_0==88||LA207_0==91||LA207_0==95||LA207_0==98||LA207_0==103||LA207_0==109||LA207_0==112||LA207_0==117||LA207_0==127||LA207_0==134||LA207_0==178))
			{
				alt207 = 1;
			}
			else if ((LA207_0==120))
			{
				alt207 = 2;
			}
			} finally { DebugExitDecision(207); }
			switch (alt207)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:590:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(590, 94);

				set478=(IToken)input.LT(1);
				set478=(IToken)input.LT(1);
				if (input.LA(1)==88||input.LA(1)==91||input.LA(1)==95||input.LA(1)==98||input.LA(1)==103||input.LA(1)==109||input.LA(1)==112||input.LA(1)==117||input.LA(1)==127||input.LA(1)==134||input.LA(1)==178)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set478), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(590, 96);
				PushFollow(Follow._cond_expr_in_modify_expr5163);
				cond_expr479=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr479.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:591:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(591, 7);
				// SugarCpp.g:591:7: ( '=' ^ cond_expr )+
				int cnt206=0;
				try { DebugEnterSubRule(206);
				while (true)
				{
					int alt206=2;
					try { DebugEnterDecision(206, false);
					int LA206_0 = input.LA(1);

					if ((LA206_0==120))
					{
						alt206 = 1;
					}


					} finally { DebugExitDecision(206); }
					switch (alt206)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:591:8: '=' ^ cond_expr
						{
						DebugLocation(591, 11);
						char_literal480=(IToken)Match(input,120,Follow._120_in_modify_expr5172); if (state.failed) return retval;
						if (state.backtracking == 0) {
						char_literal480_tree = (CommonTree)adaptor.Create(char_literal480);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal480_tree, root_0);
						}
						DebugLocation(591, 13);
						PushFollow(Follow._cond_expr_in_modify_expr5175);
						cond_expr481=cond_expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr481.Tree);

						}
						break;

					default:
						if (cnt206 >= 1)
							goto loop206;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee206 = new EarlyExitException( 206, input );
						DebugRecognitionException(eee206);
						throw eee206;
					}
					cnt206++;
				}
				loop206:
					;

				} finally { DebugExitSubRule(206); }


				}
				break;

			}
			} finally { DebugExitSubRule(207); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 68);
			LeaveRule("modify_expr", 68);
			LeaveRule_modify_expr();
		}
		DebugLocation(592, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:594:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 69);
		TraceIn("cond_expr_item", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr482 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(594, 24);
		try
		{
			// SugarCpp.g:594:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:594:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(594, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item5188);
			or_expr482=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, or_expr482.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 69);
			LeaveRule("cond_expr_item", 69);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(594, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:595:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 70);
		TraceIn("cond_expr", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal483 = default(IToken);
		IToken char_literal484 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal483_tree = default(CommonTree);
		CommonTree char_literal484_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(595, 1);
		try
		{
			// SugarCpp.g:596:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:596:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(596, 4);
			// SugarCpp.g:596:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:596:5: a= or_expr
			{
			DebugLocation(596, 6);
			PushFollow(Follow._or_expr_in_cond_expr5200);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 596:15: -> $a
			{
				DebugLocation(596, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(596, 22);
			// SugarCpp.g:596:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt210=2;
			try { DebugEnterSubRule(210);
			try { DebugEnterDecision(210, false);
			int LA210_0 = input.LA(1);

			if ((LA210_0==128))
			{
				alt210 = 1;
			}
			} finally { DebugExitDecision(210); }
			switch (alt210)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:596:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(596, 23);
				char_literal483=(IToken)Match(input,128,Follow._128_in_cond_expr5209); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_128.Add(char_literal483);

				DebugLocation(596, 27);
				// SugarCpp.g:596:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt209=2;
				try { DebugEnterSubRule(209);
				try { DebugEnterDecision(209, false);
				int LA209_0 = input.LA(1);

				if ((LA209_0==IDENT||LA209_0==NUMBER||LA209_0==STRING||LA209_0==85||LA209_0==90||LA209_0==92||LA209_0==94||(LA209_0>=96 && LA209_0<=97)||(LA209_0>=100 && LA209_0<=101)||LA209_0==130||(LA209_0>=157 && LA209_0<=158)||LA209_0==181))
				{
					alt209 = 1;
				}
				else if ((LA209_0==DEDENT||LA209_0==INDENT||LA209_0==NEWLINE||LA209_0==88||LA209_0==91||LA209_0==93||LA209_0==95||(LA209_0>=98 && LA209_0<=99)||LA209_0==103||LA209_0==109||(LA209_0>=112 && LA209_0<=113)||LA209_0==117||(LA209_0>=119 && LA209_0<=120)||LA209_0==123||LA209_0==127||LA209_0==132||LA209_0==134||LA209_0==137||LA209_0==142||(LA209_0>=146 && LA209_0<=147)||LA209_0==149||(LA209_0>=165 && LA209_0<=167)||(LA209_0>=170 && LA209_0<=171)||(LA209_0>=175 && LA209_0<=176)||(LA209_0>=178 && LA209_0<=179)))
				{
					alt209 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 209, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(209); }
				switch (alt209)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:596:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(596, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr5215);
					a=cond_expr_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
					DebugLocation(596, 46);
					// SugarCpp.g:596:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt208=2;
					try { DebugEnterSubRule(208);
					try { DebugEnterDecision(208, false);
					int LA208_0 = input.LA(1);

					if ((LA208_0==110))
					{
						alt208 = 1;
					}
					else if ((LA208_0==DEDENT||LA208_0==INDENT||LA208_0==NEWLINE||LA208_0==88||LA208_0==91||LA208_0==93||LA208_0==95||(LA208_0>=98 && LA208_0<=99)||LA208_0==103||LA208_0==109||(LA208_0>=112 && LA208_0<=113)||LA208_0==117||(LA208_0>=119 && LA208_0<=120)||LA208_0==123||LA208_0==127||LA208_0==132||LA208_0==134||LA208_0==137||LA208_0==142||(LA208_0>=146 && LA208_0<=147)||LA208_0==149||(LA208_0>=165 && LA208_0<=167)||(LA208_0>=170 && LA208_0<=171)||(LA208_0>=175 && LA208_0<=176)||(LA208_0>=178 && LA208_0<=179)))
					{
						alt208 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 208, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(208); }
					switch (alt208)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:596:48: ':' b= cond_expr_item
						{
						DebugLocation(596, 48);
						char_literal484=(IToken)Match(input,110,Follow._110_in_cond_expr5219); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_110.Add(char_literal484);

						DebugLocation(596, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr5223);
						b=cond_expr_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: cond_expr, b, a
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 596:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(596, 72);
							// SugarCpp.g:596:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(596, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(596, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(596, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(596, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:597:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						if (state.backtracking == 0) {
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 597:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(597, 20);
							// SugarCpp.g:597:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(597, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(597, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(597, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}
						}

						}
						break;

					}
					} finally { DebugExitSubRule(208); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:599:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 599:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(599, 14);
						// SugarCpp.g:599:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(599, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(599, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(209); }


				}
				break;

			}
			} finally { DebugExitSubRule(210); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 70);
			LeaveRule("cond_expr", 70);
			LeaveRule_cond_expr();
		}
		DebugLocation(601, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:603:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 71);
		TraceIn("or_op", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set485 = default(IToken);

		CommonTree set485_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(603, 19);
		try
		{
			// SugarCpp.g:603:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(603, 6);

			set485=(IToken)input.LT(1);
			if (input.LA(1)==159||input.LA(1)==180)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set485));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 71);
			LeaveRule("or_op", 71);
			LeaveRule_or_op();
		}
		DebugLocation(603, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:604:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 72);
		TraceIn("or_expr", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(604, 1);
		try
		{
			// SugarCpp.g:605:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:605:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(605, 4);
			// SugarCpp.g:605:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:605:5: a= and_expr
			{
			DebugLocation(605, 6);
			PushFollow(Follow._and_expr_in_or_expr5337);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 605:16: -> $a
			{
				DebugLocation(605, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(605, 23);
			// SugarCpp.g:605:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(211);
			while (true)
			{
				int alt211=2;
				try { DebugEnterDecision(211, false);
				int LA211_0 = input.LA(1);

				if ((LA211_0==159||LA211_0==180))
				{
					alt211 = 1;
				}


				} finally { DebugExitDecision(211); }
				switch ( alt211 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:605:24: op= or_op b= and_expr
					{
					DebugLocation(605, 26);
					PushFollow(Follow._or_op_in_or_expr5348);
					op=or_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_or_op.Add(op.Tree);
					DebugLocation(605, 34);
					PushFollow(Follow._and_expr_in_or_expr5352);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, or_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 605:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(605, 47);
						// SugarCpp.g:605:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(605, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(605, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(605, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(605, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop211;
				}
			}

			loop211:
				;

			} finally { DebugExitSubRule(211); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 72);
			LeaveRule("or_expr", 72);
			LeaveRule_or_expr();
		}
		DebugLocation(606, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:608:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 73);
		TraceIn("and_op", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set486 = default(IToken);

		CommonTree set486_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(608, 21);
		try
		{
			// SugarCpp.g:608:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(608, 7);

			set486=(IToken)input.LT(1);
			if (input.LA(1)==89||input.LA(1)==136)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set486));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 73);
			LeaveRule("and_op", 73);
			LeaveRule_and_op();
		}
		DebugLocation(608, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:609:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 74);
		TraceIn("and_expr", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(609, 1);
		try
		{
			// SugarCpp.g:610:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:610:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(610, 4);
			// SugarCpp.g:610:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:610:5: a= bit_or
			{
			DebugLocation(610, 6);
			PushFollow(Follow._bit_or_in_and_expr5394);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 610:14: -> $a
			{
				DebugLocation(610, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(610, 21);
			// SugarCpp.g:610:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(212);
			while (true)
			{
				int alt212=2;
				try { DebugEnterDecision(212, false);
				int LA212_0 = input.LA(1);

				if ((LA212_0==89||LA212_0==136))
				{
					alt212 = 1;
				}


				} finally { DebugExitDecision(212); }
				switch ( alt212 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:610:22: op= and_op b= bit_or
					{
					DebugLocation(610, 24);
					PushFollow(Follow._and_op_in_and_expr5405);
					op=and_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_op.Add(op.Tree);
					DebugLocation(610, 33);
					PushFollow(Follow._bit_or_in_and_expr5409);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: op, b, and_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 610:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(610, 44);
						// SugarCpp.g:610:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(610, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(610, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(610, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(610, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop212;
				}
			}

			loop212:
				;

			} finally { DebugExitSubRule(212); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 74);
			LeaveRule("and_expr", 74);
			LeaveRule_and_expr();
		}
		DebugLocation(611, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:613:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 75);
		TraceIn("bit_or", 75);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal487 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal487_tree = default(CommonTree);
		RewriteRuleITokenStream stream_177=new RewriteRuleITokenStream(adaptor,"token 177");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(613, 1);
		try
		{
			// SugarCpp.g:614:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:614:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(614, 4);
			// SugarCpp.g:614:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:614:5: a= bit_xor
			{
			DebugLocation(614, 6);
			PushFollow(Follow._bit_xor_in_bit_or5440);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 614:15: -> $a
			{
				DebugLocation(614, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(614, 22);
			// SugarCpp.g:614:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(213);
			while (true)
			{
				int alt213=2;
				try { DebugEnterDecision(213, false);
				int LA213_0 = input.LA(1);

				if ((LA213_0==177))
				{
					alt213 = 1;
				}


				} finally { DebugExitDecision(213); }
				switch ( alt213 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:614:23: '|' b= bit_xor
					{
					DebugLocation(614, 23);
					char_literal487=(IToken)Match(input,177,Follow._177_in_bit_or5449); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_177.Add(char_literal487);

					DebugLocation(614, 28);
					PushFollow(Follow._bit_xor_in_bit_or5453);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_or, b, 177
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 614:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(614, 40);
						// SugarCpp.g:614:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(614, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(614, 51);
						adaptor.AddChild(root_1, stream_177.NextNode());
						DebugLocation(614, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(614, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop213;
				}
			}

			loop213:
				;

			} finally { DebugExitSubRule(213); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 75);
			LeaveRule("bit_or", 75);
			LeaveRule_bit_or();
		}
		DebugLocation(615, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:617:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 76);
		TraceIn("bit_xor", 76);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal488 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal488_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(617, 1);
		try
		{
			// SugarCpp.g:618:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:618:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(618, 4);
			// SugarCpp.g:618:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:618:5: a= bit_and
			{
			DebugLocation(618, 6);
			PushFollow(Follow._bit_and_in_bit_xor5483);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 618:15: -> $a
			{
				DebugLocation(618, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(618, 22);
			// SugarCpp.g:618:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(214);
			while (true)
			{
				int alt214=2;
				try { DebugEnterDecision(214, false);
				int LA214_0 = input.LA(1);

				if ((LA214_0==133))
				{
					alt214 = 1;
				}


				} finally { DebugExitDecision(214); }
				switch ( alt214 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:618:23: '^' b= bit_and
					{
					DebugLocation(618, 23);
					char_literal488=(IToken)Match(input,133,Follow._133_in_bit_xor5492); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_133.Add(char_literal488);

					DebugLocation(618, 28);
					PushFollow(Follow._bit_and_in_bit_xor5496);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 133
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 618:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(618, 40);
						// SugarCpp.g:618:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(618, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(618, 51);
						adaptor.AddChild(root_1, stream_133.NextNode());
						DebugLocation(618, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(618, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop214;
				}
			}

			loop214:
				;

			} finally { DebugExitSubRule(214); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 76);
			LeaveRule("bit_xor", 76);
			LeaveRule_bit_xor();
		}
		DebugLocation(619, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:621:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 77);
		TraceIn("bit_and", 77);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal489 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal489_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(621, 1);
		try
		{
			// SugarCpp.g:622:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:622:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(622, 4);
			// SugarCpp.g:622:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:622:5: a= cmp_expr
			{
			DebugLocation(622, 6);
			PushFollow(Follow._cmp_expr_in_bit_and5526);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 622:16: -> $a
			{
				DebugLocation(622, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(622, 23);
			// SugarCpp.g:622:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(215);
			while (true)
			{
				int alt215=2;
				try { DebugEnterDecision(215, false);
				int LA215_0 = input.LA(1);

				if ((LA215_0==90))
				{
					alt215 = 1;
				}


				} finally { DebugExitDecision(215); }
				switch ( alt215 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:622:24: '&' b= cmp_expr
					{
					DebugLocation(622, 24);
					char_literal489=(IToken)Match(input,90,Follow._90_in_bit_and5535); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_90.Add(char_literal489);

					DebugLocation(622, 29);
					PushFollow(Follow._cmp_expr_in_bit_and5539);
					b=cmp_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 90, bit_and, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 622:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(622, 42);
						// SugarCpp.g:622:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(622, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(622, 53);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(622, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(622, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop215;
				}
			}

			loop215:
				;

			} finally { DebugExitSubRule(215); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 77);
			LeaveRule("bit_and", 77);
			LeaveRule_bit_and();
		}
		DebugLocation(623, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:625:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 78);
		TraceIn("chain_op", 78);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set490 = default(IToken);

		CommonTree set490_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(625, 64);
		try
		{
			// SugarCpp.g:625:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(625, 9);

			set490=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==114||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set490));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 78);
			LeaveRule("chain_op", 78);
			LeaveRule_chain_op();
		}
		DebugLocation(625, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:626:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 79);
		TraceIn("no_less_op", 79);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set491 = default(IToken);

		CommonTree set491_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(626, 60);
		try
		{
			// SugarCpp.g:626:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(626, 11);

			set491=(IToken)input.LT(1);
			if (input.LA(1)==86||input.LA(1)==118||input.LA(1)==121||(input.LA(1)>=124 && input.LA(1)<=125)||(input.LA(1)>=150 && input.LA(1)<=151))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set491));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 79);
			LeaveRule("no_less_op", 79);
			LeaveRule_no_less_op();
		}
		DebugLocation(626, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:627:1: chain_list : ( chain_op shift_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 80);
		TraceIn("chain_list", 80);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op492 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr493 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(627, 35);
		try
		{
			// SugarCpp.g:627:11: ( ( chain_op shift_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:627:13: ( chain_op shift_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(627, 13);
			// SugarCpp.g:627:13: ( chain_op shift_expr )+
			int cnt216=0;
			try { DebugEnterSubRule(216);
			while (true)
			{
				int alt216=2;
				try { DebugEnterDecision(216, false);
				int LA216_0 = input.LA(1);

				if ((LA216_0==86||LA216_0==114||LA216_0==118||LA216_0==121||(LA216_0>=124 && LA216_0<=125)||(LA216_0>=150 && LA216_0<=151)))
				{
					alt216 = 1;
				}


				} finally { DebugExitDecision(216); }
				switch (alt216)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:627:14: chain_op shift_expr
					{
					DebugLocation(627, 14);
					PushFollow(Follow._chain_op_in_chain_list5631);
					chain_op492=chain_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, chain_op492.Tree);
					DebugLocation(627, 23);
					PushFollow(Follow._shift_expr_in_chain_list5633);
					shift_expr493=shift_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, shift_expr493.Tree);

					}
					break;

				default:
					if (cnt216 >= 1)
						goto loop216;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee216 = new EarlyExitException( 216, input );
					DebugRecognitionException(eee216);
					throw eee216;
				}
				cnt216++;
			}
			loop216:
				;

			} finally { DebugExitSubRule(216); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 80);
			LeaveRule("chain_list", 80);
			LeaveRule_chain_list();
		}
		DebugLocation(627, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:628:1: cmp_expr : (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 81);
		TraceIn("cmp_expr", 81);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal494 = default(IToken);
		IToken char_literal496 = default(IToken);
		IToken char_literal498 = default(IToken);
		IToken char_literal500 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident495 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident497 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list499 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list501 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list502 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal494_tree = default(CommonTree);
		CommonTree char_literal496_tree = default(CommonTree);
		CommonTree char_literal498_tree = default(CommonTree);
		CommonTree char_literal500_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(628, 1);
		try
		{
			// SugarCpp.g:629:2: ( (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:629:4: (a= shift_expr -> $a) ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			{
			DebugLocation(629, 4);
			// SugarCpp.g:629:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:629:5: a= shift_expr
			{
			DebugLocation(629, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr5647);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 629:18: -> $a
			{
				DebugLocation(629, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(629, 25);
			// SugarCpp.g:629:25: ( ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list ) | '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )?
			int alt220=4;
			try { DebugEnterSubRule(220);
			try { DebugEnterDecision(220, false);
			int LA220_0 = input.LA(1);

			if ((LA220_0==114))
			{
				int LA220_1 = input.LA(2);

				if ((EvaluatePredicate(synpred3_SugarCpp_fragment)))
				{
					alt220 = 1;
				}
				else if ((true))
				{
					alt220 = 2;
				}
			}
			else if ((LA220_0==86||LA220_0==118||LA220_0==121||(LA220_0>=124 && LA220_0<=125)||(LA220_0>=150 && LA220_0<=151)))
			{
				alt220 = 3;
			}
			} finally { DebugExitDecision(220); }
			switch (alt220)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:629:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )=> '<' ident ( ',' ident )* '>' bracket_expr_list
				{
				DebugLocation(629, 77);
				char_literal494=(IToken)Match(input,114,Follow._114_in_cmp_expr5676); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal494);

				DebugLocation(629, 81);
				PushFollow(Follow._ident_in_cmp_expr5678);
				ident495=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident495.Tree);
				DebugLocation(629, 87);
				// SugarCpp.g:629:87: ( ',' ident )*
				try { DebugEnterSubRule(217);
				while (true)
				{
					int alt217=2;
					try { DebugEnterDecision(217, false);
					int LA217_0 = input.LA(1);

					if ((LA217_0==99))
					{
						alt217 = 1;
					}


					} finally { DebugExitDecision(217); }
					switch ( alt217 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:629:88: ',' ident
						{
						DebugLocation(629, 88);
						char_literal496=(IToken)Match(input,99,Follow._99_in_cmp_expr5681); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal496);

						DebugLocation(629, 92);
						PushFollow(Follow._ident_in_cmp_expr5683);
						ident497=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident497.Tree);

						}
						break;

					default:
						goto loop217;
					}
				}

				loop217:
					;

				} finally { DebugExitSubRule(217); }

				DebugLocation(629, 100);
				char_literal498=(IToken)Match(input,124,Follow._124_in_cmp_expr5687); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_124.Add(char_literal498);

				DebugLocation(629, 104);
				PushFollow(Follow._bracket_expr_list_in_cmp_expr5689);
				bracket_expr_list499=bracket_expr_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list499.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, ident, bracket_expr_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 629:122: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
				{
					DebugLocation(629, 125);
					// SugarCpp.g:629:125: ^( Expr_Call $cmp_expr ^( Generic_Patameters ( ident )* ) bracket_expr_list )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(629, 127);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

					DebugLocation(629, 138);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(629, 147);
					// SugarCpp.g:629:147: ^( Generic_Patameters ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(629, 149);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

					DebugLocation(629, 168);
					// SugarCpp.g:629:168: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(629, 168);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}
					DebugLocation(629, 176);
					adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:630:12: '<' b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(630, 12);
				char_literal500=(IToken)Match(input,114,Follow._114_in_cmp_expr5720); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_114.Add(char_literal500);

				DebugLocation(630, 17);
				PushFollow(Follow._shift_expr_in_cmp_expr5724);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(630, 29);
				// SugarCpp.g:630:29: ( chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt218=2;
				try { DebugEnterSubRule(218);
				try { DebugEnterDecision(218, false);
				int LA218_0 = input.LA(1);

				if ((LA218_0==86||LA218_0==114||LA218_0==118||LA218_0==121||(LA218_0>=124 && LA218_0<=125)||(LA218_0>=150 && LA218_0<=151)))
				{
					alt218 = 1;
				}
				else if ((LA218_0==DEDENT||LA218_0==INDENT||LA218_0==NEWLINE||(LA218_0>=88 && LA218_0<=91)||LA218_0==93||LA218_0==95||(LA218_0>=98 && LA218_0<=99)||LA218_0==103||(LA218_0>=109 && LA218_0<=110)||(LA218_0>=112 && LA218_0<=113)||LA218_0==117||(LA218_0>=119 && LA218_0<=120)||LA218_0==123||(LA218_0>=127 && LA218_0<=128)||(LA218_0>=132 && LA218_0<=134)||(LA218_0>=136 && LA218_0<=137)||LA218_0==142||(LA218_0>=146 && LA218_0<=147)||LA218_0==149||LA218_0==159||(LA218_0>=165 && LA218_0<=167)||(LA218_0>=170 && LA218_0<=171)||(LA218_0>=175 && LA218_0<=180)))
				{
					alt218 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 218, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(218); }
				switch (alt218)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:630:31: chain_list
					{
					DebugLocation(630, 31);
					PushFollow(Follow._chain_list_in_cmp_expr5728);
					chain_list501=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list501.Tree);


					{
					// AST REWRITE
					// elements: chain_list, 114, b, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 630:42: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(630, 45);
						// SugarCpp.g:630:45: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(630, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(630, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(630, 69);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(630, 74);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(630, 76);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:631:16: 
					{

					{
					// AST REWRITE
					// elements: b, 114, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 631:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(631, 19);
						// SugarCpp.g:631:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(631, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(631, 30);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(631, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(631, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(218); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:632:27: op= no_less_op b= shift_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(632, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr5805);
				op=no_less_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_no_less_op.Add(op.Tree);
				DebugLocation(632, 42);
				PushFollow(Follow._shift_expr_in_cmp_expr5809);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);
				DebugLocation(632, 54);
				// SugarCpp.g:632:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt219=2;
				try { DebugEnterSubRule(219);
				try { DebugEnterDecision(219, false);
				int LA219_0 = input.LA(1);

				if ((LA219_0==86||LA219_0==114||LA219_0==118||LA219_0==121||(LA219_0>=124 && LA219_0<=125)||(LA219_0>=150 && LA219_0<=151)))
				{
					alt219 = 1;
				}
				else if ((LA219_0==DEDENT||LA219_0==INDENT||LA219_0==NEWLINE||(LA219_0>=88 && LA219_0<=91)||LA219_0==93||LA219_0==95||(LA219_0>=98 && LA219_0<=99)||LA219_0==103||(LA219_0>=109 && LA219_0<=110)||(LA219_0>=112 && LA219_0<=113)||LA219_0==117||(LA219_0>=119 && LA219_0<=120)||LA219_0==123||(LA219_0>=127 && LA219_0<=128)||(LA219_0>=132 && LA219_0<=134)||(LA219_0>=136 && LA219_0<=137)||LA219_0==142||(LA219_0>=146 && LA219_0<=147)||LA219_0==149||LA219_0==159||(LA219_0>=165 && LA219_0<=167)||(LA219_0>=170 && LA219_0<=171)||(LA219_0>=175 && LA219_0<=180)))
				{
					alt219 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 219, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(219); }
				switch (alt219)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:632:56: chain_list
					{
					DebugLocation(632, 56);
					PushFollow(Follow._chain_list_in_cmp_expr5813);
					chain_list502=chain_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_chain_list.Add(chain_list502.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, op, b, chain_list
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 632:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(632, 70);
						// SugarCpp.g:632:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(632, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(632, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(632, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(632, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(632, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:633:17: 
					{

					{
					// AST REWRITE
					// elements: op, cmp_expr, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 633:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(633, 20);
						// SugarCpp.g:633:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(633, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(633, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(633, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(633, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(219); }


				}
				break;

			}
			} finally { DebugExitSubRule(220); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 81);
			LeaveRule("cmp_expr", 81);
			LeaveRule_cmp_expr();
		}
		DebugLocation(636, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:638:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 82);
		TraceIn("shift_expr_op", 82);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set503 = default(IToken);

		CommonTree set503_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(638, 27);
		try
		{
			// SugarCpp.g:638:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(638, 14);

			set503=(IToken)input.LT(1);
			if (input.LA(1)==116||input.LA(1)==126)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set503));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 82);
			LeaveRule("shift_expr_op", 82);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(638, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:639:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 83);
		TraceIn("shift_expr", 83);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op504 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(639, 1);
		try
		{
			// SugarCpp.g:640:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:640:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(640, 4);
			// SugarCpp.g:640:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:640:5: a= add_expr
			{
			DebugLocation(640, 6);
			PushFollow(Follow._add_expr_in_shift_expr5915);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 640:16: -> $a
			{
				DebugLocation(640, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(640, 23);
			// SugarCpp.g:640:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(221);
			while (true)
			{
				int alt221=2;
				try { DebugEnterDecision(221, false);
				int LA221_0 = input.LA(1);

				if ((LA221_0==116||LA221_0==126))
				{
					alt221 = 1;
				}


				} finally { DebugExitDecision(221); }
				switch ( alt221 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:640:24: shift_expr_op b= add_expr
					{
					DebugLocation(640, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr5924);
					shift_expr_op504=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op504.Tree);
					DebugLocation(640, 39);
					PushFollow(Follow._add_expr_in_shift_expr5928);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 640:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(640, 52);
						// SugarCpp.g:640:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(640, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(640, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(640, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(640, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop221;
				}
			}

			loop221:
				;

			} finally { DebugExitSubRule(221); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 83);
			LeaveRule("shift_expr", 83);
			LeaveRule_shift_expr();
		}
		DebugLocation(641, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:643:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 84);
		TraceIn("add_expr", 84);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal505 = default(IToken);
		IToken char_literal506 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal505_tree = default(CommonTree);
		CommonTree char_literal506_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(643, 1);
		try
		{
			// SugarCpp.g:644:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:644:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(644, 4);
			// SugarCpp.g:644:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:644:5: a= mul_expr
			{
			DebugLocation(644, 6);
			PushFollow(Follow._mul_expr_in_add_expr5958);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 644:16: -> $a
			{
				DebugLocation(644, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(644, 23);
			// SugarCpp.g:644:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(222);
			while (true)
			{
				int alt222=3;
				try { DebugEnterDecision(222, false);
				int LA222_0 = input.LA(1);

				if ((LA222_0==96))
				{
					alt222 = 1;
				}
				else if ((LA222_0==100))
				{
					alt222 = 2;
				}


				} finally { DebugExitDecision(222); }
				switch ( alt222 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:644:25: '+' b= mul_expr
					{
					DebugLocation(644, 25);
					char_literal505=(IToken)Match(input,96,Follow._96_in_add_expr5968); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_96.Add(char_literal505);

					DebugLocation(644, 30);
					PushFollow(Follow._mul_expr_in_add_expr5972);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 96, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 644:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(644, 43);
						// SugarCpp.g:644:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(644, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(644, 54);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(644, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(644, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:645:10: '-' b= mul_expr
					{
					DebugLocation(645, 10);
					char_literal506=(IToken)Match(input,100,Follow._100_in_add_expr5997); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_100.Add(char_literal506);

					DebugLocation(645, 15);
					PushFollow(Follow._mul_expr_in_add_expr6001);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, add_expr, 100
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 645:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(645, 28);
						// SugarCpp.g:645:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(645, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(645, 39);
						adaptor.AddChild(root_1, stream_100.NextNode());
						DebugLocation(645, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(645, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop222;
				}
			}

			loop222:
				;

			} finally { DebugExitSubRule(222); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 84);
			LeaveRule("add_expr", 84);
			LeaveRule_add_expr();
		}
		DebugLocation(647, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:649:1: mul_expr : (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 85);
		TraceIn("mul_expr", 85);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal507 = default(IToken);
		IToken char_literal508 = default(IToken);
		IToken char_literal509 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal507_tree = default(CommonTree);
		CommonTree char_literal508_tree = default(CommonTree);
		CommonTree char_literal509_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(649, 1);
		try
		{
			// SugarCpp.g:650:2: ( (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:650:4: (a= infix_expr -> $a) ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(650, 4);
			// SugarCpp.g:650:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:650:5: a= infix_expr
			{
			DebugLocation(650, 6);
			PushFollow(Follow._infix_expr_in_mul_expr6039);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 650:18: -> $a
			{
				DebugLocation(650, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(650, 25);
			// SugarCpp.g:650:25: ( '*' b= infix_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= infix_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= infix_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(223);
			while (true)
			{
				int alt223=4;
				try { DebugEnterDecision(223, false);
				switch (input.LA(1))
				{
				case 94:
					{
					alt223 = 1;
					}
					break;
				case 108:
					{
					alt223 = 2;
					}
					break;
				case 87:
					{
					alt223 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(223); }
				switch ( alt223 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:650:27: '*' b= infix_expr
					{
					DebugLocation(650, 27);
					char_literal507=(IToken)Match(input,94,Follow._94_in_mul_expr6049); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_94.Add(char_literal507);

					DebugLocation(650, 32);
					PushFollow(Follow._infix_expr_in_mul_expr6053);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 94, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 650:44: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(650, 47);
						// SugarCpp.g:650:47: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(650, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(650, 58);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(650, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(650, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:651:12: '/' b= infix_expr
					{
					DebugLocation(651, 12);
					char_literal508=(IToken)Match(input,108,Follow._108_in_mul_expr6080); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_108.Add(char_literal508);

					DebugLocation(651, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6084);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 108
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 651:29: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(651, 32);
						// SugarCpp.g:651:32: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(651, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(651, 43);
						adaptor.AddChild(root_1, stream_108.NextNode());
						DebugLocation(651, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(651, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:652:12: '%' b= infix_expr
					{
					DebugLocation(652, 12);
					char_literal509=(IToken)Match(input,87,Follow._87_in_mul_expr6111); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_87.Add(char_literal509);

					DebugLocation(652, 17);
					PushFollow(Follow._infix_expr_in_mul_expr6115);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 87, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 652:29: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(652, 32);
						// SugarCpp.g:652:32: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(652, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(652, 43);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(652, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(652, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop223;
				}
			}

			loop223:
				;

			} finally { DebugExitSubRule(223); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 85);
			LeaveRule("mul_expr", 85);
			LeaveRule_mul_expr();
		}
		DebugLocation(654, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:656:1: infix_expr : (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 86);
		TraceIn("infix_expr", 86);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func510 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(656, 1);
		try
		{
			// SugarCpp.g:657:2: ( (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:657:4: (a= selector_expr -> $a) ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(657, 4);
			// SugarCpp.g:657:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:657:5: a= selector_expr
			{
			DebugLocation(657, 6);
			PushFollow(Follow._selector_expr_in_infix_expr6155);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 657:21: -> $a
			{
				DebugLocation(657, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(657, 28);
			// SugarCpp.g:657:28: ( infix_func b= selector_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(224);
			while (true)
			{
				int alt224=2;
				try { DebugEnterDecision(224, false);
				int LA224_0 = input.LA(1);

				if ((LA224_0==135))
				{
					alt224 = 1;
				}


				} finally { DebugExitDecision(224); }
				switch ( alt224 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:657:30: infix_func b= selector_expr
					{
					DebugLocation(657, 30);
					PushFollow(Follow._infix_func_in_infix_expr6165);
					infix_func510=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func510.Tree);
					DebugLocation(657, 42);
					PushFollow(Follow._selector_expr_in_infix_expr6169);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, infix_expr, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 657:58: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(657, 61);
						// SugarCpp.g:657:61: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(657, 63);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(657, 74);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(657, 86);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(657, 98);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop224;
				}
			}

			loop224:
				;

			} finally { DebugExitSubRule(224); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 86);
			LeaveRule("infix_expr", 86);
			LeaveRule_infix_expr();
		}
		DebugLocation(658, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:660:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 87);
		TraceIn("selector_expr", 87);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal511 = default(IToken);
		IToken string_literal512 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal511_tree = default(CommonTree);
		CommonTree string_literal512_tree = default(CommonTree);
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(660, 1);
		try
		{
			// SugarCpp.g:661:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:661:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(661, 4);
			// SugarCpp.g:661:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:661:5: a= cast_expr
			{
			DebugLocation(661, 6);
			PushFollow(Follow._cast_expr_in_selector_expr6201);
			a=cast_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 661:17: -> $a
			{
				DebugLocation(661, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(661, 24);
			// SugarCpp.g:661:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(225);
			while (true)
			{
				int alt225=3;
				try { DebugEnterDecision(225, false);
				int LA225_0 = input.LA(1);

				if ((LA225_0==105))
				{
					alt225 = 1;
				}
				else if ((LA225_0==107))
				{
					alt225 = 2;
				}


				} finally { DebugExitDecision(225); }
				switch ( alt225 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:661:26: '->*' b= ident
					{
					DebugLocation(661, 26);
					string_literal511=(IToken)Match(input,105,Follow._105_in_selector_expr6211); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_105.Add(string_literal511);

					DebugLocation(661, 33);
					PushFollow(Follow._ident_in_selector_expr6215);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, selector_expr, 105
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 661:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(661, 43);
						// SugarCpp.g:661:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(661, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(661, 57);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(661, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(661, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:662:11: '.*' b= ident
					{
					DebugLocation(662, 11);
					string_literal512=(IToken)Match(input,107,Follow._107_in_selector_expr6241); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_107.Add(string_literal512);

					DebugLocation(662, 18);
					PushFollow(Follow._ident_in_selector_expr6246);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, b, 107
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 662:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(662, 28);
						// SugarCpp.g:662:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(662, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(662, 42);
						adaptor.AddChild(root_1, stream_107.NextNode());
						DebugLocation(662, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(662, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop225;
				}
			}

			loop225:
				;

			} finally { DebugExitSubRule(225); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 87);
			LeaveRule("selector_expr", 87);
			LeaveRule_selector_expr();
		}
		DebugLocation(664, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:666:1: cast_expr : ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr );
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 88);
		TraceIn("cast_expr", 88);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal513 = default(IToken);
		IToken char_literal515 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name514 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr516 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr517 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal513_tree = default(CommonTree);
		CommonTree char_literal515_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(666, 1);
		try
		{
			// SugarCpp.g:667:2: ( ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr -> ^( Expr_Cast type_name prefix_expr ) | prefix_expr )
			int alt226=2;
			try { DebugEnterDecision(226, false);
			int LA226_0 = input.LA(1);

			if ((LA226_0==92))
			{
				int LA226_1 = input.LA(2);

				if ((EvaluatePredicate(synpred4_SugarCpp_fragment)))
				{
					alt226 = 1;
				}
				else if ((true))
				{
					alt226 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 226, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA226_0==IDENT||LA226_0==NUMBER||LA226_0==STRING||LA226_0==85||LA226_0==90||LA226_0==94||(LA226_0>=96 && LA226_0<=97)||(LA226_0>=100 && LA226_0<=101)||LA226_0==130||(LA226_0>=157 && LA226_0<=158)||LA226_0==181))
			{
				alt226 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 226, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(226); }
			switch (alt226)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:667:4: ( '(' type_name ')' prefix_expr )=> '(' type_name ')' prefix_expr
				{
				DebugLocation(667, 39);
				char_literal513=(IToken)Match(input,92,Follow._92_in_cast_expr6295); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal513);

				DebugLocation(667, 43);
				PushFollow(Follow._type_name_in_cast_expr6297);
				type_name514=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name514.Tree);
				DebugLocation(667, 53);
				char_literal515=(IToken)Match(input,93,Follow._93_in_cast_expr6299); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal515);

				DebugLocation(667, 57);
				PushFollow(Follow._prefix_expr_in_cast_expr6301);
				prefix_expr516=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr516.Tree);


				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 667:69: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(667, 72);
					// SugarCpp.g:667:72: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(667, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(667, 84);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(667, 94);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:668:4: prefix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(668, 4);
				PushFollow(Follow._prefix_expr_in_cast_expr6316);
				prefix_expr517=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prefix_expr517.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 88);
			LeaveRule("cast_expr", 88);
			LeaveRule_cast_expr();
		}
		DebugLocation(669, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:671:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 89);
		TraceIn("prefix_expr_op", 89);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set518 = default(IToken);

		CommonTree set518_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(671, 71);
		try
		{
			// SugarCpp.g:671:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' | 'not' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(671, 15);

			set518=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==90||input.LA(1)==94||(input.LA(1)>=96 && input.LA(1)<=97)||(input.LA(1)>=100 && input.LA(1)<=101)||input.LA(1)==158||input.LA(1)==181)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set518));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 89);
			LeaveRule("prefix_expr_op", 89);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(671, 71);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:672:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 90);
		TraceIn("prefix_expr", 90);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal521 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op519 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr520 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_no_array522 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list523 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list524 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr525 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal521_tree = default(CommonTree);
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_no_array=new RewriteRuleSubtreeStream(adaptor,"rule type_no_array");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(672, 1);
		try
		{
			// SugarCpp.g:673:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) ) | suffix_expr )
			int alt228=3;
			try { DebugEnterDecision(228, false);
			switch (input.LA(1))
			{
			case 85:
			case 90:
			case 94:
			case 96:
			case 97:
			case 100:
			case 101:
			case 158:
			case 181:
				{
				alt228 = 1;
				}
				break;
			case 157:
				{
				alt228 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 92:
			case 130:
				{
				alt228 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 228, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(228); }
			switch (alt228)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:673:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(673, 4);
				// SugarCpp.g:673:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:673:5: prefix_expr_op prefix_expr
				{
				DebugLocation(673, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr6366);
				prefix_expr_op519=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op519.Tree);
				DebugLocation(673, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr6368);
				prefix_expr520=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr520.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 673:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(673, 36);
					// SugarCpp.g:673:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(673, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(673, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(673, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:674:4: 'new' type_no_array ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				{
				DebugLocation(674, 4);
				string_literal521=(IToken)Match(input,157,Follow._157_in_prefix_expr6384); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_157.Add(string_literal521);

				DebugLocation(674, 10);
				PushFollow(Follow._type_no_array_in_prefix_expr6386);
				type_no_array522=type_no_array();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_no_array.Add(type_no_array522.Tree);
				DebugLocation(674, 24);
				// SugarCpp.g:674:24: ( bracket_expr_list -> ^( Expr_New_Type type_no_array bracket_expr_list ) | square_expr_list -> ^( Expr_New_Array type_no_array square_expr_list ) )
				int alt227=2;
				try { DebugEnterSubRule(227);
				try { DebugEnterDecision(227, false);
				int LA227_0 = input.LA(1);

				if ((LA227_0==92))
				{
					alt227 = 1;
				}
				else if ((LA227_0==131))
				{
					alt227 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 227, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(227); }
				switch (alt227)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:674:26: bracket_expr_list
					{
					DebugLocation(674, 26);
					PushFollow(Follow._bracket_expr_list_in_prefix_expr6390);
					bracket_expr_list523=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list523.Tree);


					{
					// AST REWRITE
					// elements: type_no_array, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 674:44: -> ^( Expr_New_Type type_no_array bracket_expr_list )
					{
						DebugLocation(674, 47);
						// SugarCpp.g:674:47: ^( Expr_New_Type type_no_array bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(674, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(674, 63);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(674, 77);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:675:11: square_expr_list
					{
					DebugLocation(675, 11);
					PushFollow(Follow._square_expr_list_in_prefix_expr6412);
					square_expr_list524=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list524.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, type_no_array
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 675:28: -> ^( Expr_New_Array type_no_array square_expr_list )
					{
						DebugLocation(675, 31);
						// SugarCpp.g:675:31: ^( Expr_New_Array type_no_array square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(675, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(675, 48);
						adaptor.AddChild(root_1, stream_type_no_array.NextTree());
						DebugLocation(675, 62);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(227); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:677:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(677, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr6437);
				suffix_expr525=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr525.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 90);
			LeaveRule("prefix_expr", 90);
			LeaveRule_prefix_expr();
		}
		DebugLocation(678, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_square_expr_list();
	partial void LeaveRule_square_expr_list();

	// $ANTLR start "square_expr_list"
	// SugarCpp.g:680:1: square_expr_list : '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) ;
	[GrammarRule("square_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> square_expr_list()
	{
		EnterRule_square_expr_list();
		EnterRule("square_expr_list", 91);
		TraceIn("square_expr_list", 91);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal526 = default(IToken);
		IToken char_literal528 = default(IToken);
		IToken char_literal530 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr527 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr529 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal526_tree = default(CommonTree);
		CommonTree char_literal528_tree = default(CommonTree);
		CommonTree char_literal530_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "square_expr_list");
		DebugLocation(680, 1);
		try
		{
			// SugarCpp.g:681:2: ( '[' expr ( ',' expr )* ']' -> ^( Expr_Args ( expr )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:681:4: '[' expr ( ',' expr )* ']'
			{
			DebugLocation(681, 4);
			char_literal526=(IToken)Match(input,131,Follow._131_in_square_expr_list6449); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_131.Add(char_literal526);

			DebugLocation(681, 8);
			PushFollow(Follow._expr_in_square_expr_list6451);
			expr527=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr527.Tree);
			DebugLocation(681, 13);
			// SugarCpp.g:681:13: ( ',' expr )*
			try { DebugEnterSubRule(229);
			while (true)
			{
				int alt229=2;
				try { DebugEnterDecision(229, false);
				int LA229_0 = input.LA(1);

				if ((LA229_0==99))
				{
					alt229 = 1;
				}


				} finally { DebugExitDecision(229); }
				switch ( alt229 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:681:14: ',' expr
					{
					DebugLocation(681, 14);
					char_literal528=(IToken)Match(input,99,Follow._99_in_square_expr_list6454); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_99.Add(char_literal528);

					DebugLocation(681, 18);
					PushFollow(Follow._expr_in_square_expr_list6456);
					expr529=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr529.Tree);

					}
					break;

				default:
					goto loop229;
				}
			}

			loop229:
				;

			} finally { DebugExitSubRule(229); }

			DebugLocation(681, 25);
			char_literal530=(IToken)Match(input,132,Follow._132_in_square_expr_list6460); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_132.Add(char_literal530);



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 681:29: -> ^( Expr_Args ( expr )* )
			{
				DebugLocation(681, 32);
				// SugarCpp.g:681:32: ^( Expr_Args ( expr )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(681, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

				DebugLocation(681, 44);
				// SugarCpp.g:681:44: ( expr )*
				while ( stream_expr.HasNext )
				{
					DebugLocation(681, 44);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("square_expr_list", 91);
			LeaveRule("square_expr_list", 91);
			LeaveRule_square_expr_list();
		}
		DebugLocation(682, 1);
		} finally { DebugExitRule(GrammarFileName, "square_expr_list"); }
		return retval;

	}
	// $ANTLR end "square_expr_list"

	partial void EnterRule_bracket_expr_list();
	partial void LeaveRule_bracket_expr_list();

	// $ANTLR start "bracket_expr_list"
	// SugarCpp.g:684:1: bracket_expr_list : '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) ;
	[GrammarRule("bracket_expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list()
	{
		EnterRule_bracket_expr_list();
		EnterRule("bracket_expr_list", 92);
		TraceIn("bracket_expr_list", 92);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal531 = default(IToken);
		IToken char_literal533 = default(IToken);
		IToken char_literal535 = default(IToken);
		IToken NEWLINE536 = default(IToken);
		IToken INDENT537 = default(IToken);
		IToken NEWLINE538 = default(IToken);
		IToken char_literal540 = default(IToken);
		IToken NEWLINE541 = default(IToken);
		IToken NEWLINE543 = default(IToken);
		IToken char_literal544 = default(IToken);
		IToken NEWLINE545 = default(IToken);
		IToken DEDENT546 = default(IToken);
		IToken DEDENT547 = default(IToken);
		IToken NEWLINE548 = default(IToken);
		IToken char_literal549 = default(IToken);
		IToken char_literal551 = default(IToken);
		IToken NEWLINE552 = default(IToken);
		IToken char_literal554 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr532 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr534 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr539 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr542 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr550 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr553 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal531_tree = default(CommonTree);
		CommonTree char_literal533_tree = default(CommonTree);
		CommonTree char_literal535_tree = default(CommonTree);
		CommonTree NEWLINE536_tree = default(CommonTree);
		CommonTree INDENT537_tree = default(CommonTree);
		CommonTree NEWLINE538_tree = default(CommonTree);
		CommonTree char_literal540_tree = default(CommonTree);
		CommonTree NEWLINE541_tree = default(CommonTree);
		CommonTree NEWLINE543_tree = default(CommonTree);
		CommonTree char_literal544_tree = default(CommonTree);
		CommonTree NEWLINE545_tree = default(CommonTree);
		CommonTree DEDENT546_tree = default(CommonTree);
		CommonTree DEDENT547_tree = default(CommonTree);
		CommonTree NEWLINE548_tree = default(CommonTree);
		CommonTree char_literal549_tree = default(CommonTree);
		CommonTree char_literal551_tree = default(CommonTree);
		CommonTree NEWLINE552_tree = default(CommonTree);
		CommonTree char_literal554_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "bracket_expr_list");
		DebugLocation(684, 1);
		try
		{
			// SugarCpp.g:685:2: ( '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:685:4: '(' ( expr ( ',' expr )* )? ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			{
			DebugLocation(685, 4);
			char_literal531=(IToken)Match(input,92,Follow._92_in_bracket_expr_list6480); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal531);

			DebugLocation(685, 8);
			// SugarCpp.g:685:8: ( expr ( ',' expr )* )?
			int alt231=2;
			try { DebugEnterSubRule(231);
			try { DebugEnterDecision(231, false);
			int LA231_0 = input.LA(1);

			if ((LA231_0==IDENT||LA231_0==NUMBER||LA231_0==STRING||LA231_0==85||LA231_0==90||LA231_0==92||LA231_0==94||(LA231_0>=96 && LA231_0<=97)||(LA231_0>=100 && LA231_0<=101)||(LA231_0>=130 && LA231_0<=131)||LA231_0==152||LA231_0==155||(LA231_0>=157 && LA231_0<=158)||LA231_0==181))
			{
				alt231 = 1;
			}
			} finally { DebugExitDecision(231); }
			switch (alt231)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:685:9: expr ( ',' expr )*
				{
				DebugLocation(685, 9);
				PushFollow(Follow._expr_in_bracket_expr_list6483);
				expr532=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr532.Tree);
				DebugLocation(685, 14);
				// SugarCpp.g:685:14: ( ',' expr )*
				try { DebugEnterSubRule(230);
				while (true)
				{
					int alt230=2;
					try { DebugEnterDecision(230, false);
					int LA230_0 = input.LA(1);

					if ((LA230_0==99))
					{
						alt230 = 1;
					}


					} finally { DebugExitDecision(230); }
					switch ( alt230 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:685:15: ',' expr
						{
						DebugLocation(685, 15);
						char_literal533=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6486); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal533);

						DebugLocation(685, 19);
						PushFollow(Follow._expr_in_bracket_expr_list6488);
						expr534=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr534.Tree);

						}
						break;

					default:
						goto loop230;
					}
				}

				loop230:
					;

				} finally { DebugExitSubRule(230); }


				}
				break;

			}
			} finally { DebugExitSubRule(231); }

			DebugLocation(685, 28);
			// SugarCpp.g:685:28: ( ')' -> ^( Expr_Args ( expr )* ) | ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) ) )
			int alt244=2;
			try { DebugEnterSubRule(244);
			try { DebugEnterDecision(244, false);
			int LA244_0 = input.LA(1);

			if ((LA244_0==93))
			{
				alt244 = 1;
			}
			else if ((LA244_0==NEWLINE))
			{
				alt244 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 244, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(244); }
			switch (alt244)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:685:30: ')'
				{
				DebugLocation(685, 30);
				char_literal535=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6496); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal535);



				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 685:34: -> ^( Expr_Args ( expr )* )
				{
					DebugLocation(685, 37);
					// SugarCpp.g:685:37: ^( Expr_Args ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(685, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

					DebugLocation(685, 49);
					// SugarCpp.g:685:49: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(685, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:686:12: ( NEWLINE )+ ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				{
				DebugLocation(686, 12);
				// SugarCpp.g:686:12: ( NEWLINE )+
				int cnt232=0;
				try { DebugEnterSubRule(232);
				while (true)
				{
					int alt232=2;
					try { DebugEnterDecision(232, false);
					int LA232_0 = input.LA(1);

					if ((LA232_0==NEWLINE))
					{
						alt232 = 1;
					}


					} finally { DebugExitDecision(232); }
					switch (alt232)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:686:12: NEWLINE
						{
						DebugLocation(686, 12);
						NEWLINE536=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6518); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE536);


						}
						break;

					default:
						if (cnt232 >= 1)
							goto loop232;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee232 = new EarlyExitException( 232, input );
						DebugRecognitionException(eee232);
						throw eee232;
					}
					cnt232++;
				}
				loop232:
					;

				} finally { DebugExitSubRule(232); }

				DebugLocation(686, 21);
				// SugarCpp.g:686:21: ( INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' ) -> ^( Expr_Args ( expr )* ) | ( expr ( ( ',' | NEWLINE )+ expr )* )? ')' -> ^( Expr_Args ( expr )* ) )
				int alt243=2;
				try { DebugEnterSubRule(243);
				try { DebugEnterDecision(243, false);
				int LA243_0 = input.LA(1);

				if ((LA243_0==INDENT))
				{
					alt243 = 1;
				}
				else if ((LA243_0==IDENT||LA243_0==NUMBER||LA243_0==STRING||LA243_0==85||LA243_0==90||(LA243_0>=92 && LA243_0<=94)||(LA243_0>=96 && LA243_0<=97)||(LA243_0>=100 && LA243_0<=101)||(LA243_0>=130 && LA243_0<=131)||LA243_0==152||LA243_0==155||(LA243_0>=157 && LA243_0<=158)||LA243_0==181))
				{
					alt243 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 243, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(243); }
				switch (alt243)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:686:23: INDENT ( NEWLINE )* expr ( ( ',' | NEWLINE )+ expr )* ( NEWLINE )* ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					{
					DebugLocation(686, 23);
					INDENT537=(IToken)Match(input,INDENT,Follow._INDENT_in_bracket_expr_list6523); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_INDENT.Add(INDENT537);

					DebugLocation(686, 30);
					// SugarCpp.g:686:30: ( NEWLINE )*
					try { DebugEnterSubRule(233);
					while (true)
					{
						int alt233=2;
						try { DebugEnterDecision(233, false);
						int LA233_0 = input.LA(1);

						if ((LA233_0==NEWLINE))
						{
							alt233 = 1;
						}


						} finally { DebugExitDecision(233); }
						switch ( alt233 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:686:30: NEWLINE
							{
							DebugLocation(686, 30);
							NEWLINE538=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6525); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE538);


							}
							break;

						default:
							goto loop233;
						}
					}

					loop233:
						;

					} finally { DebugExitSubRule(233); }

					DebugLocation(686, 39);
					PushFollow(Follow._expr_in_bracket_expr_list6528);
					expr539=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr539.Tree);
					DebugLocation(686, 44);
					// SugarCpp.g:686:44: ( ( ',' | NEWLINE )+ expr )*
					try { DebugEnterSubRule(235);
					while (true)
					{
						int alt235=2;
						try { DebugEnterDecision(235, false);
						try
						{
							alt235 = dfa235.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(235); }
						switch ( alt235 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:686:45: ( ',' | NEWLINE )+ expr
							{
							DebugLocation(686, 45);
							// SugarCpp.g:686:45: ( ',' | NEWLINE )+
							int cnt234=0;
							try { DebugEnterSubRule(234);
							while (true)
							{
								int alt234=3;
								try { DebugEnterDecision(234, false);
								int LA234_0 = input.LA(1);

								if ((LA234_0==99))
								{
									alt234 = 1;
								}
								else if ((LA234_0==NEWLINE))
								{
									alt234 = 2;
								}


								} finally { DebugExitDecision(234); }
								switch (alt234)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:686:46: ','
									{
									DebugLocation(686, 46);
									char_literal540=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6532); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_99.Add(char_literal540);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:686:52: NEWLINE
									{
									DebugLocation(686, 52);
									NEWLINE541=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6536); if (state.failed) return retval; 
									if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE541);


									}
									break;

								default:
									if (cnt234 >= 1)
										goto loop234;

									if (state.backtracking>0) {state.failed=true; return retval;}
									EarlyExitException eee234 = new EarlyExitException( 234, input );
									DebugRecognitionException(eee234);
									throw eee234;
								}
								cnt234++;
							}
							loop234:
								;

							} finally { DebugExitSubRule(234); }

							DebugLocation(686, 62);
							PushFollow(Follow._expr_in_bracket_expr_list6540);
							expr542=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr542.Tree);

							}
							break;

						default:
							goto loop235;
						}
					}

					loop235:
						;

					} finally { DebugExitSubRule(235); }

					DebugLocation(686, 69);
					// SugarCpp.g:686:69: ( NEWLINE )*
					try { DebugEnterSubRule(236);
					while (true)
					{
						int alt236=2;
						try { DebugEnterDecision(236, false);
						int LA236_0 = input.LA(1);

						if ((LA236_0==NEWLINE))
						{
							alt236 = 1;
						}


						} finally { DebugExitDecision(236); }
						switch ( alt236 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:686:69: NEWLINE
							{
							DebugLocation(686, 69);
							NEWLINE543=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6544); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE543);


							}
							break;

						default:
							goto loop236;
						}
					}

					loop236:
						;

					} finally { DebugExitSubRule(236); }

					DebugLocation(686, 78);
					// SugarCpp.g:686:78: ( ')' ( NEWLINE )* DEDENT | DEDENT ( NEWLINE )* ')' )
					int alt239=2;
					try { DebugEnterSubRule(239);
					try { DebugEnterDecision(239, false);
					int LA239_0 = input.LA(1);

					if ((LA239_0==93))
					{
						alt239 = 1;
					}
					else if ((LA239_0==DEDENT))
					{
						alt239 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 239, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(239); }
					switch (alt239)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:686:80: ')' ( NEWLINE )* DEDENT
						{
						DebugLocation(686, 80);
						char_literal544=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6549); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal544);

						DebugLocation(686, 84);
						// SugarCpp.g:686:84: ( NEWLINE )*
						try { DebugEnterSubRule(237);
						while (true)
						{
							int alt237=2;
							try { DebugEnterDecision(237, false);
							int LA237_0 = input.LA(1);

							if ((LA237_0==NEWLINE))
							{
								alt237 = 1;
							}


							} finally { DebugExitDecision(237); }
							switch ( alt237 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:686:84: NEWLINE
								{
								DebugLocation(686, 84);
								NEWLINE545=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6551); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE545);


								}
								break;

							default:
								goto loop237;
							}
						}

						loop237:
							;

						} finally { DebugExitSubRule(237); }

						DebugLocation(686, 93);
						DEDENT546=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6554); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT546);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:686:102: DEDENT ( NEWLINE )* ')'
						{
						DebugLocation(686, 102);
						DEDENT547=(IToken)Match(input,DEDENT,Follow._DEDENT_in_bracket_expr_list6558); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_DEDENT.Add(DEDENT547);

						DebugLocation(686, 109);
						// SugarCpp.g:686:109: ( NEWLINE )*
						try { DebugEnterSubRule(238);
						while (true)
						{
							int alt238=2;
							try { DebugEnterDecision(238, false);
							int LA238_0 = input.LA(1);

							if ((LA238_0==NEWLINE))
							{
								alt238 = 1;
							}


							} finally { DebugExitDecision(238); }
							switch ( alt238 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:686:109: NEWLINE
								{
								DebugLocation(686, 109);
								NEWLINE548=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6560); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE548);


								}
								break;

							default:
								goto loop238;
							}
						}

						loop238:
							;

						} finally { DebugExitSubRule(238); }

						DebugLocation(686, 118);
						char_literal549=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6563); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_93.Add(char_literal549);


						}
						break;

					}
					} finally { DebugExitSubRule(239); }



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 686:124: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(686, 127);
						// SugarCpp.g:686:127: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(686, 129);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(686, 139);
						// SugarCpp.g:686:139: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(686, 139);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:687:14: ( expr ( ( ',' | NEWLINE )+ expr )* )? ')'
					{
					DebugLocation(687, 14);
					// SugarCpp.g:687:14: ( expr ( ( ',' | NEWLINE )+ expr )* )?
					int alt242=2;
					try { DebugEnterSubRule(242);
					try { DebugEnterDecision(242, false);
					int LA242_0 = input.LA(1);

					if ((LA242_0==IDENT||LA242_0==NUMBER||LA242_0==STRING||LA242_0==85||LA242_0==90||LA242_0==92||LA242_0==94||(LA242_0>=96 && LA242_0<=97)||(LA242_0>=100 && LA242_0<=101)||(LA242_0>=130 && LA242_0<=131)||LA242_0==152||LA242_0==155||(LA242_0>=157 && LA242_0<=158)||LA242_0==181))
					{
						alt242 = 1;
					}
					} finally { DebugExitDecision(242); }
					switch (alt242)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:687:15: expr ( ( ',' | NEWLINE )+ expr )*
						{
						DebugLocation(687, 15);
						PushFollow(Follow._expr_in_bracket_expr_list6590);
						expr550=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr550.Tree);
						DebugLocation(687, 20);
						// SugarCpp.g:687:20: ( ( ',' | NEWLINE )+ expr )*
						try { DebugEnterSubRule(241);
						while (true)
						{
							int alt241=2;
							try { DebugEnterDecision(241, false);
							int LA241_0 = input.LA(1);

							if ((LA241_0==NEWLINE||LA241_0==99))
							{
								alt241 = 1;
							}


							} finally { DebugExitDecision(241); }
							switch ( alt241 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:687:21: ( ',' | NEWLINE )+ expr
								{
								DebugLocation(687, 21);
								// SugarCpp.g:687:21: ( ',' | NEWLINE )+
								int cnt240=0;
								try { DebugEnterSubRule(240);
								while (true)
								{
									int alt240=3;
									try { DebugEnterDecision(240, false);
									int LA240_0 = input.LA(1);

									if ((LA240_0==99))
									{
										alt240 = 1;
									}
									else if ((LA240_0==NEWLINE))
									{
										alt240 = 2;
									}


									} finally { DebugExitDecision(240); }
									switch (alt240)
									{
									case 1:
										DebugEnterAlt(1);
										// SugarCpp.g:687:22: ','
										{
										DebugLocation(687, 22);
										char_literal551=(IToken)Match(input,99,Follow._99_in_bracket_expr_list6594); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_99.Add(char_literal551);


										}
										break;
									case 2:
										DebugEnterAlt(2);
										// SugarCpp.g:687:28: NEWLINE
										{
										DebugLocation(687, 28);
										NEWLINE552=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_bracket_expr_list6598); if (state.failed) return retval; 
										if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE552);


										}
										break;

									default:
										if (cnt240 >= 1)
											goto loop240;

										if (state.backtracking>0) {state.failed=true; return retval;}
										EarlyExitException eee240 = new EarlyExitException( 240, input );
										DebugRecognitionException(eee240);
										throw eee240;
									}
									cnt240++;
								}
								loop240:
									;

								} finally { DebugExitSubRule(240); }

								DebugLocation(687, 38);
								PushFollow(Follow._expr_in_bracket_expr_list6602);
								expr553=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(expr553.Tree);

								}
								break;

							default:
								goto loop241;
							}
						}

						loop241:
							;

						} finally { DebugExitSubRule(241); }


						}
						break;

					}
					} finally { DebugExitSubRule(242); }

					DebugLocation(687, 47);
					char_literal554=(IToken)Match(input,93,Follow._93_in_bracket_expr_list6608); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal554);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 687:51: -> ^( Expr_Args ( expr )* )
					{
						DebugLocation(687, 54);
						// SugarCpp.g:687:54: ^( Expr_Args ( expr )* )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(687, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Args, "Expr_Args"), root_1);

						DebugLocation(687, 66);
						// SugarCpp.g:687:66: ( expr )*
						while ( stream_expr.HasNext )
						{
							DebugLocation(687, 66);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(243); }


				}
				break;

			}
			} finally { DebugExitSubRule(244); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bracket_expr_list", 92);
			LeaveRule("bracket_expr_list", 92);
			LeaveRule_bracket_expr_list();
		}
		DebugLocation(690, 1);
		} finally { DebugExitRule(GrammarFileName, "bracket_expr_list"); }
		return retval;

	}
	// $ANTLR end "bracket_expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:692:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 93);
		TraceIn("suffix_expr", 93);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal555 = default(IToken);
		IToken string_literal556 = default(IToken);
		IToken char_literal557 = default(IToken);
		IToken string_literal559 = default(IToken);
		IToken char_literal563 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident558 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident560 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list561 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list562 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident564 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list565 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal555_tree = default(CommonTree);
		CommonTree string_literal556_tree = default(CommonTree);
		CommonTree char_literal557_tree = default(CommonTree);
		CommonTree string_literal559_tree = default(CommonTree);
		CommonTree char_literal563_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(692, 1);
		try
		{
			// SugarCpp.g:693:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:693:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			{
			DebugLocation(693, 4);
			// SugarCpp.g:693:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:693:5: a= atom_expr
			{
			DebugLocation(693, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr6655);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 693:17: -> $a
			{
				DebugLocation(693, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(693, 24);
			// SugarCpp.g:693:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | bracket_expr_list -> ^( Expr_Call $suffix_expr bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $suffix_expr square_expr_list ) | '@' ident bracket_expr_list -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list ) )*
			try { DebugEnterSubRule(245);
			while (true)
			{
				int alt245=8;
				try { DebugEnterDecision(245, false);
				switch (input.LA(1))
				{
				case 97:
					{
					alt245 = 1;
					}
					break;
				case 101:
					{
					alt245 = 2;
					}
					break;
				case 106:
					{
					alt245 = 3;
					}
					break;
				case 104:
					{
					alt245 = 4;
					}
					break;
				case 92:
					{
					alt245 = 5;
					}
					break;
				case 131:
					{
					alt245 = 6;
					}
					break;
				case 130:
					{
					alt245 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(245); }
				switch ( alt245 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:693:26: '++'
					{
					DebugLocation(693, 26);
					string_literal555=(IToken)Match(input,97,Follow._97_in_suffix_expr6665); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal555);



					{
					// AST REWRITE
					// elements: 97, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 693:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(693, 34);
						// SugarCpp.g:693:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(693, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(693, 48);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(693, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:694:14: '--'
					{
					DebugLocation(694, 14);
					string_literal556=(IToken)Match(input,101,Follow._101_in_suffix_expr6691); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal556);



					{
					// AST REWRITE
					// elements: 101, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 694:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(694, 22);
						// SugarCpp.g:694:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(694, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(694, 36);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(694, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:695:11: '.' ident
					{
					DebugLocation(695, 11);
					char_literal557=(IToken)Match(input,106,Follow._106_in_suffix_expr6714); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(char_literal557);

					DebugLocation(695, 15);
					PushFollow(Follow._ident_in_suffix_expr6716);
					ident558=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident558.Tree);


					{
					// AST REWRITE
					// elements: ident, 106, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 695:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(695, 24);
						// SugarCpp.g:695:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(695, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(695, 38);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(695, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(695, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:696:11: '->' ident
					{
					DebugLocation(696, 11);
					string_literal559=(IToken)Match(input,104,Follow._104_in_suffix_expr6741); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal559);

					DebugLocation(696, 16);
					PushFollow(Follow._ident_in_suffix_expr6743);
					ident560=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident560.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 104
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 696:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(696, 25);
						// SugarCpp.g:696:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(696, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(696, 39);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(696, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(696, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:697:11: bracket_expr_list
					{
					DebugLocation(697, 11);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6768);
					bracket_expr_list561=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list561.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 697:29: -> ^( Expr_Call $suffix_expr bracket_expr_list )
					{
						DebugLocation(697, 32);
						// SugarCpp.g:697:32: ^( Expr_Call $suffix_expr bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(697, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(697, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(697, 57);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:698:11: square_expr_list
					{
					DebugLocation(698, 11);
					PushFollow(Follow._square_expr_list_in_suffix_expr6791);
					square_expr_list562=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list562.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, square_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 698:28: -> ^( Expr_Dict $suffix_expr square_expr_list )
					{
						DebugLocation(698, 31);
						// SugarCpp.g:698:31: ^( Expr_Dict $suffix_expr square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(698, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(698, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(698, 56);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:699:11: '@' ident bracket_expr_list
					{
					DebugLocation(699, 11);
					char_literal563=(IToken)Match(input,130,Follow._130_in_suffix_expr6814); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_130.Add(char_literal563);

					DebugLocation(699, 15);
					PushFollow(Follow._ident_in_suffix_expr6816);
					ident564=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident564.Tree);
					DebugLocation(699, 21);
					PushFollow(Follow._bracket_expr_list_in_suffix_expr6818);
					bracket_expr_list565=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list565.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 699:39: -> ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
					{
						DebugLocation(699, 42);
						// SugarCpp.g:699:42: ^( Expr_Call_With $suffix_expr ident bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(699, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(699, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(699, 72);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(699, 78);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop245;
				}
			}

			loop245:
				;

			} finally { DebugExitSubRule(245); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 93);
			LeaveRule("suffix_expr", 93);
			LeaveRule_suffix_expr();
		}
		DebugLocation(701, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:703:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 94);
		TraceIn("atom_expr", 94);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER566 = default(IToken);
		IToken STRING568 = default(IToken);
		IToken char_literal569 = default(IToken);
		IToken char_literal571 = default(IToken);
		IToken char_literal572 = default(IToken);
		IToken char_literal574 = default(IToken);
		IToken char_literal575 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident567 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident570 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr573 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER566_tree = default(CommonTree);
		CommonTree STRING568_tree = default(CommonTree);
		CommonTree char_literal569_tree = default(CommonTree);
		CommonTree char_literal571_tree = default(CommonTree);
		CommonTree char_literal572_tree = default(CommonTree);
		CommonTree char_literal574_tree = default(CommonTree);
		CommonTree char_literal575_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(703, 1);
		try
		{
			// SugarCpp.g:704:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) ) )
			int alt248=5;
			try { DebugEnterDecision(248, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt248 = 1;
				}
				break;
			case IDENT:
				{
				alt248 = 2;
				}
				break;
			case STRING:
				{
				alt248 = 3;
				}
				break;
			case 130:
				{
				alt248 = 4;
				}
				break;
			case 92:
				{
				alt248 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 248, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(248); }
			switch (alt248)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:704:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(704, 4);
				NUMBER566=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr6856); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER566_tree = (CommonTree)adaptor.Create(NUMBER566);
				adaptor.AddChild(root_0, NUMBER566_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:705:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(705, 4);
				PushFollow(Follow._ident_in_atom_expr6861);
				ident567=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident567.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:706:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(706, 4);
				STRING568=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr6866); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING568_tree = (CommonTree)adaptor.Create(STRING568);
				adaptor.AddChild(root_0, STRING568_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:707:4: '@' ident
				{
				DebugLocation(707, 4);
				char_literal569=(IToken)Match(input,130,Follow._130_in_atom_expr6871); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal569);

				DebugLocation(707, 8);
				PushFollow(Follow._ident_in_atom_expr6873);
				ident570=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident570.Tree);


				{
				// AST REWRITE
				// elements: 130, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 707:14: -> ^( '@' ident )
				{
					DebugLocation(707, 17);
					// SugarCpp.g:707:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(707, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(707, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:708:4: '(' a= expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(708, 4);
				char_literal571=(IToken)Match(input,92,Follow._92_in_atom_expr6886); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal571);

				DebugLocation(708, 9);
				PushFollow(Follow._expr_in_atom_expr6890);
				a=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(a.Tree);
				DebugLocation(708, 15);
				// SugarCpp.g:708:15: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' {...}? -> ^( Expr_Bracket expr ) )
				int alt247=2;
				try { DebugEnterSubRule(247);
				try { DebugEnterDecision(247, false);
				int LA247_0 = input.LA(1);

				if ((LA247_0==99))
				{
					alt247 = 1;
				}
				else if ((LA247_0==93))
				{
					alt247 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 247, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(247); }
				switch (alt247)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:708:17: ( ',' expr )+ ')'
					{
					DebugLocation(708, 17);
					// SugarCpp.g:708:17: ( ',' expr )+
					int cnt246=0;
					try { DebugEnterSubRule(246);
					while (true)
					{
						int alt246=2;
						try { DebugEnterDecision(246, false);
						int LA246_0 = input.LA(1);

						if ((LA246_0==99))
						{
							alt246 = 1;
						}


						} finally { DebugExitDecision(246); }
						switch (alt246)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:708:18: ',' expr
							{
							DebugLocation(708, 18);
							char_literal572=(IToken)Match(input,99,Follow._99_in_atom_expr6895); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_99.Add(char_literal572);

							DebugLocation(708, 22);
							PushFollow(Follow._expr_in_atom_expr6897);
							expr573=expr();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_expr.Add(expr573.Tree);

							}
							break;

						default:
							if (cnt246 >= 1)
								goto loop246;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee246 = new EarlyExitException( 246, input );
							DebugRecognitionException(eee246);
							throw eee246;
						}
						cnt246++;
					}
					loop246:
						;

					} finally { DebugExitSubRule(246); }

					DebugLocation(708, 29);
					char_literal574=(IToken)Match(input,93,Follow._93_in_atom_expr6901); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal574);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 708:33: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(708, 36);
						// SugarCpp.g:708:36: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(708, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(708, 49);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(708, 49);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:709:17: ')' {...}?
					{
					DebugLocation(709, 17);
					char_literal575=(IToken)Match(input,93,Follow._93_in_atom_expr6928); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal575);

					DebugLocation(709, 21);
					if (!(( true&&true )))
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "atom_expr", " true&&true ");
					}


					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 709:37: -> ^( Expr_Bracket expr )
					{
						DebugLocation(709, 40);
						// SugarCpp.g:709:40: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(709, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(709, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(247); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 94);
			LeaveRule("atom_expr", 94);
			LeaveRule_atom_expr();
		}
		DebugLocation(711, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:713:1: lvalue_item : lvalue_prefix ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 95);
		TraceIn("lvalue_item", 95);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix576 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(713, 1);
		try
		{
			// SugarCpp.g:714:2: ( lvalue_prefix )
			DebugEnterAlt(1);
			// SugarCpp.g:714:4: lvalue_prefix
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(714, 4);
			PushFollow(Follow._lvalue_prefix_in_lvalue_item6959);
			lvalue_prefix576=lvalue_prefix();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_prefix576.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 95);
			LeaveRule("lvalue_item", 95);
			LeaveRule_lvalue_item();
		}
		DebugLocation(715, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_prefix();
	partial void LeaveRule_lvalue_prefix();

	// $ANTLR start "lvalue_prefix"
	// SugarCpp.g:717:1: lvalue_prefix : ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix );
	[GrammarRule("lvalue_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix()
	{
		EnterRule_lvalue_prefix();
		EnterRule("lvalue_prefix", 96);
		TraceIn("lvalue_prefix", 96);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op577 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_prefix578 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix579 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_lvalue_prefix=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_prefix");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		try { DebugEnterRule(GrammarFileName, "lvalue_prefix");
		DebugLocation(717, 1);
		try
		{
			// SugarCpp.g:718:2: ( ( prefix_expr_op lvalue_prefix ) -> ^( Expr_Prefix prefix_expr_op lvalue_prefix ) | lvalue_suffix )
			int alt249=2;
			try { DebugEnterDecision(249, false);
			int LA249_0 = input.LA(1);

			if ((LA249_0==85||LA249_0==90||LA249_0==94||(LA249_0>=96 && LA249_0<=97)||(LA249_0>=100 && LA249_0<=101)||LA249_0==158||LA249_0==181))
			{
				alt249 = 1;
			}
			else if ((LA249_0==IDENT||LA249_0==130))
			{
				alt249 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 249, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(249); }
			switch (alt249)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:718:4: ( prefix_expr_op lvalue_prefix )
				{
				DebugLocation(718, 4);
				// SugarCpp.g:718:4: ( prefix_expr_op lvalue_prefix )
				DebugEnterAlt(1);
				// SugarCpp.g:718:5: prefix_expr_op lvalue_prefix
				{
				DebugLocation(718, 5);
				PushFollow(Follow._prefix_expr_op_in_lvalue_prefix6971);
				prefix_expr_op577=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op577.Tree);
				DebugLocation(718, 20);
				PushFollow(Follow._lvalue_prefix_in_lvalue_prefix6973);
				lvalue_prefix578=lvalue_prefix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_prefix.Add(lvalue_prefix578.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, lvalue_prefix
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 718:35: -> ^( Expr_Prefix prefix_expr_op lvalue_prefix )
				{
					DebugLocation(718, 38);
					// SugarCpp.g:718:38: ^( Expr_Prefix prefix_expr_op lvalue_prefix )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(718, 40);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(718, 52);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(718, 67);
					adaptor.AddChild(root_1, stream_lvalue_prefix.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:719:4: lvalue_suffix
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(719, 4);
				PushFollow(Follow._lvalue_suffix_in_lvalue_prefix6989);
				lvalue_suffix579=lvalue_suffix();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_suffix579.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_prefix", 96);
			LeaveRule("lvalue_prefix", 96);
			LeaveRule_lvalue_prefix();
		}
		DebugLocation(720, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_prefix"); }
		return retval;

	}
	// $ANTLR end "lvalue_prefix"

	partial void EnterRule_lvalue_suffix();
	partial void LeaveRule_lvalue_suffix();

	// $ANTLR start "lvalue_suffix"
	// SugarCpp.g:722:1: lvalue_suffix : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* ;
	[GrammarRule("lvalue_suffix")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_suffix()
	{
		EnterRule_lvalue_suffix();
		EnterRule("lvalue_suffix", 97);
		TraceIn("lvalue_suffix", 97);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal580 = default(IToken);
		IToken string_literal581 = default(IToken);
		IToken char_literal582 = default(IToken);
		IToken string_literal584 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident583 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident585 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter586 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> bracket_expr_list587 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> square_expr_list588 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal580_tree = default(CommonTree);
		CommonTree string_literal581_tree = default(CommonTree);
		CommonTree char_literal582_tree = default(CommonTree);
		CommonTree string_literal584_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_square_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule square_expr_list");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_bracket_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule bracket_expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_suffix");
		DebugLocation(722, 1);
		try
		{
			// SugarCpp.g:723:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:723:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			{
			DebugLocation(723, 4);
			// SugarCpp.g:723:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:723:5: a= lvalue_atom
			{
			DebugLocation(723, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_suffix7003);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 723:19: -> $a
			{
				DebugLocation(723, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(723, 26);
			// SugarCpp.g:723:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_suffix) | '--' -> ^( Expr_Suffix '--' $lvalue_suffix) | '.' ident -> ^( Expr_Access '.' $lvalue_suffix ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_suffix ident ) | ( generic_parameter )? bracket_expr_list -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list ) | square_expr_list -> ^( Expr_Dict $lvalue_suffix square_expr_list ) )*
			try { DebugEnterSubRule(251);
			while (true)
			{
				int alt251=7;
				try { DebugEnterDecision(251, false);
				switch (input.LA(1))
				{
				case 97:
					{
					alt251 = 1;
					}
					break;
				case 101:
					{
					alt251 = 2;
					}
					break;
				case 106:
					{
					alt251 = 3;
					}
					break;
				case 104:
					{
					alt251 = 4;
					}
					break;
				case 92:
				case 114:
					{
					alt251 = 5;
					}
					break;
				case 131:
					{
					alt251 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(251); }
				switch ( alt251 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:723:28: '++'
					{
					DebugLocation(723, 28);
					string_literal580=(IToken)Match(input,97,Follow._97_in_lvalue_suffix7013); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(string_literal580);



					{
					// AST REWRITE
					// elements: 97, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 723:33: -> ^( Expr_Suffix '++' $lvalue_suffix)
					{
						DebugLocation(723, 36);
						// SugarCpp.g:723:36: ^( Expr_Suffix '++' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(723, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(723, 50);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(723, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:724:16: '--'
					{
					DebugLocation(724, 16);
					string_literal581=(IToken)Match(input,101,Follow._101_in_lvalue_suffix7041); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_101.Add(string_literal581);



					{
					// AST REWRITE
					// elements: 101, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 724:21: -> ^( Expr_Suffix '--' $lvalue_suffix)
					{
						DebugLocation(724, 24);
						// SugarCpp.g:724:24: ^( Expr_Suffix '--' $lvalue_suffix)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(724, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(724, 38);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(724, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:725:13: '.' ident
					{
					DebugLocation(725, 13);
					char_literal582=(IToken)Match(input,106,Follow._106_in_lvalue_suffix7066); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_106.Add(char_literal582);

					DebugLocation(725, 17);
					PushFollow(Follow._ident_in_lvalue_suffix7068);
					ident583=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident583.Tree);


					{
					// AST REWRITE
					// elements: lvalue_suffix, 106, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 725:23: -> ^( Expr_Access '.' $lvalue_suffix ident )
					{
						DebugLocation(725, 26);
						// SugarCpp.g:725:26: ^( Expr_Access '.' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(725, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(725, 40);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(725, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(725, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:726:13: '->' ident
					{
					DebugLocation(726, 13);
					string_literal584=(IToken)Match(input,104,Follow._104_in_lvalue_suffix7095); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_104.Add(string_literal584);

					DebugLocation(726, 18);
					PushFollow(Follow._ident_in_lvalue_suffix7097);
					ident585=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident585.Tree);


					{
					// AST REWRITE
					// elements: ident, 104, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 726:24: -> ^( Expr_Access '->' $lvalue_suffix ident )
					{
						DebugLocation(726, 27);
						// SugarCpp.g:726:27: ^( Expr_Access '->' $lvalue_suffix ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(726, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(726, 41);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(726, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(726, 61);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:727:13: ( generic_parameter )? bracket_expr_list
					{
					DebugLocation(727, 13);
					// SugarCpp.g:727:13: ( generic_parameter )?
					int alt250=2;
					try { DebugEnterSubRule(250);
					try { DebugEnterDecision(250, false);
					int LA250_0 = input.LA(1);

					if ((LA250_0==114))
					{
						alt250 = 1;
					}
					} finally { DebugExitDecision(250); }
					switch (alt250)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:727:13: generic_parameter
						{
						DebugLocation(727, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_suffix7124);
						generic_parameter586=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter586.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(250); }

					DebugLocation(727, 32);
					PushFollow(Follow._bracket_expr_list_in_lvalue_suffix7127);
					bracket_expr_list587=bracket_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bracket_expr_list.Add(bracket_expr_list587.Tree);


					{
					// AST REWRITE
					// elements: generic_parameter, lvalue_suffix, bracket_expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 727:50: -> ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
					{
						DebugLocation(727, 53);
						// SugarCpp.g:727:53: ^( Expr_Call $lvalue_suffix ( generic_parameter )? bracket_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(727, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(727, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(727, 80);
						// SugarCpp.g:727:80: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(727, 80);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(727, 99);
						adaptor.AddChild(root_1, stream_bracket_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:728:13: square_expr_list
					{
					DebugLocation(728, 13);
					PushFollow(Follow._square_expr_list_in_lvalue_suffix7155);
					square_expr_list588=square_expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_square_expr_list.Add(square_expr_list588.Tree);


					{
					// AST REWRITE
					// elements: square_expr_list, lvalue_suffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 728:30: -> ^( Expr_Dict $lvalue_suffix square_expr_list )
					{
						DebugLocation(728, 33);
						// SugarCpp.g:728:33: ^( Expr_Dict $lvalue_suffix square_expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(728, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(728, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(728, 60);
						adaptor.AddChild(root_1, stream_square_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop251;
				}
			}

			loop251:
				;

			} finally { DebugExitSubRule(251); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_suffix", 97);
			LeaveRule("lvalue_suffix", 97);
			LeaveRule_lvalue_suffix();
		}
		DebugLocation(730, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_suffix"); }
		return retval;

	}
	// $ANTLR end "lvalue_suffix"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:732:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 98);
		TraceIn("lvalue_atom", 98);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal590 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident589 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident591 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal590_tree = default(CommonTree);
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(732, 1);
		try
		{
			// SugarCpp.g:733:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt252=2;
			try { DebugEnterDecision(252, false);
			int LA252_0 = input.LA(1);

			if ((LA252_0==IDENT))
			{
				alt252 = 1;
			}
			else if ((LA252_0==130))
			{
				alt252 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 252, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(252); }
			switch (alt252)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:733:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(733, 4);
				PushFollow(Follow._ident_in_lvalue_atom7193);
				ident589=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident589.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:734:4: '@' ident
				{
				DebugLocation(734, 4);
				char_literal590=(IToken)Match(input,130,Follow._130_in_lvalue_atom7198); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_130.Add(char_literal590);

				DebugLocation(734, 8);
				PushFollow(Follow._ident_in_lvalue_atom7200);
				ident591=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident591.Tree);


				{
				// AST REWRITE
				// elements: 130, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 734:14: -> ^( '@' ident )
				{
					DebugLocation(734, 17);
					// SugarCpp.g:734:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(734, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_130.NextNode(), root_1);

					DebugLocation(734, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 98);
			LeaveRule("lvalue_atom", 98);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(735, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:737:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 99);
		TraceIn("lvalue", 99);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal592 = default(IToken);
		IToken char_literal594 = default(IToken);
		IToken char_literal596 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item593 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item595 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item597 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal592_tree = default(CommonTree);
		CommonTree char_literal594_tree = default(CommonTree);
		CommonTree char_literal596_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(737, 1);
		try
		{
			// SugarCpp.g:738:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt254=2;
			try { DebugEnterDecision(254, false);
			int LA254_0 = input.LA(1);

			if ((LA254_0==92))
			{
				alt254 = 1;
			}
			else if ((LA254_0==IDENT||LA254_0==85||LA254_0==90||LA254_0==94||(LA254_0>=96 && LA254_0<=97)||(LA254_0>=100 && LA254_0<=101)||LA254_0==130||LA254_0==158||LA254_0==181))
			{
				alt254 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 254, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(254); }
			switch (alt254)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:738:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(738, 4);
				char_literal592=(IToken)Match(input,92,Follow._92_in_lvalue7219); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_92.Add(char_literal592);

				DebugLocation(738, 8);
				PushFollow(Follow._lvalue_item_in_lvalue7221);
				lvalue_item593=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item593.Tree);
				DebugLocation(738, 20);
				// SugarCpp.g:738:20: ( ',' lvalue_item )+
				int cnt253=0;
				try { DebugEnterSubRule(253);
				while (true)
				{
					int alt253=2;
					try { DebugEnterDecision(253, false);
					int LA253_0 = input.LA(1);

					if ((LA253_0==99))
					{
						alt253 = 1;
					}


					} finally { DebugExitDecision(253); }
					switch (alt253)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:738:21: ',' lvalue_item
						{
						DebugLocation(738, 21);
						char_literal594=(IToken)Match(input,99,Follow._99_in_lvalue7224); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_99.Add(char_literal594);

						DebugLocation(738, 25);
						PushFollow(Follow._lvalue_item_in_lvalue7226);
						lvalue_item595=lvalue_item();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_lvalue_item.Add(lvalue_item595.Tree);

						}
						break;

					default:
						if (cnt253 >= 1)
							goto loop253;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee253 = new EarlyExitException( 253, input );
						DebugRecognitionException(eee253);
						throw eee253;
					}
					cnt253++;
				}
				loop253:
					;

				} finally { DebugExitSubRule(253); }

				DebugLocation(738, 39);
				char_literal596=(IToken)Match(input,93,Follow._93_in_lvalue7230); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_93.Add(char_literal596);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 738:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(738, 46);
					// SugarCpp.g:738:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(738, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(738, 60);
					// SugarCpp.g:738:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(738, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:739:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(739, 4);
				PushFollow(Follow._lvalue_item_in_lvalue7244);
				lvalue_item597=lvalue_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue_item597.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 99);
			LeaveRule("lvalue", 99);
			LeaveRule_lvalue();
		}
		DebugLocation(740, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:742:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 100);
		TraceIn("ident", 100);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT598 = default(IToken);
		IToken string_literal599 = default(IToken);
		IToken IDENT600 = default(IToken);

		CommonTree IDENT598_tree = default(CommonTree);
		CommonTree string_literal599_tree = default(CommonTree);
		CommonTree IDENT600_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(742, 1);
		try
		{
			// SugarCpp.g:743:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:743:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(743, 4);
			IDENT598=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7255); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT598_tree = (CommonTree)adaptor.Create(IDENT598);
			adaptor.AddChild(root_0, IDENT598_tree);
			}
			DebugLocation(743, 10);
			// SugarCpp.g:743:10: ( '::' IDENT )*
			try { DebugEnterSubRule(255);
			while (true)
			{
				int alt255=2;
				try { DebugEnterDecision(255, false);
				int LA255_0 = input.LA(1);

				if ((LA255_0==111))
				{
					alt255 = 1;
				}


				} finally { DebugExitDecision(255); }
				switch ( alt255 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:743:11: '::' IDENT
					{
					DebugLocation(743, 11);
					string_literal599=(IToken)Match(input,111,Follow._111_in_ident7258); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal599_tree = (CommonTree)adaptor.Create(string_literal599);
					adaptor.AddChild(root_0, string_literal599_tree);
					}
					DebugLocation(743, 16);
					IDENT600=(IToken)Match(input,IDENT,Follow._IDENT_in_ident7260); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT600_tree = (CommonTree)adaptor.Create(IDENT600);
					adaptor.AddChild(root_0, IDENT600_tree);
					}

					}
					break;

				default:
					goto loop255;
				}
			}

			loop255:
				;

			} finally { DebugExitSubRule(255); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 100);
			LeaveRule("ident", 100);
			LeaveRule_ident();
		}
		DebugLocation(744, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:746:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 101);
		TraceIn("infix_func", 101);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal601 = default(IToken);
		IToken char_literal603 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident602 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal601_tree = default(CommonTree);
		CommonTree char_literal603_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(746, 1);
		try
		{
			// SugarCpp.g:747:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:747:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(747, 7);
			char_literal601=(IToken)Match(input,135,Follow._135_in_infix_func7273); if (state.failed) return retval;
			DebugLocation(747, 9);
			PushFollow(Follow._ident_in_infix_func7276);
			ident602=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident602.Tree);
			DebugLocation(747, 18);
			char_literal603=(IToken)Match(input,135,Follow._135_in_infix_func7278); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 101);
			LeaveRule("infix_func", 101);
			LeaveRule_infix_func();
		}
		DebugLocation(748, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred1_SugarCpp_fragment();
	partial void LeaveRule_synpred1_SugarCpp_fragment();

	// $ANTLR start synpred1_SugarCpp
	public void synpred1_SugarCpp_fragment()
	{
		EnterRule_synpred1_SugarCpp_fragment();
		EnterRule("synpred1_SugarCpp_fragment", 102);
		TraceIn("synpred1_SugarCpp_fragment", 102);
		try
		{
			// SugarCpp.g:558:4: ( modify_expr ( '<|' | '|>' ) )
			DebugEnterAlt(1);
			// SugarCpp.g:558:5: modify_expr ( '<|' | '|>' )
			{
			DebugLocation(558, 5);
			PushFollow(Follow._modify_expr_in_synpred1_SugarCpp4588);
			modify_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(558, 17);
			if (input.LA(1)==119||input.LA(1)==179)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred1_SugarCpp_fragment", 102);
			LeaveRule("synpred1_SugarCpp_fragment", 102);
			LeaveRule_synpred1_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred1_SugarCpp

	partial void EnterRule_synpred2_SugarCpp_fragment();
	partial void LeaveRule_synpred2_SugarCpp_fragment();

	// $ANTLR start synpred2_SugarCpp
	public void synpred2_SugarCpp_fragment()
	{
		EnterRule_synpred2_SugarCpp_fragment();
		EnterRule("synpred2_SugarCpp_fragment", 103);
		TraceIn("synpred2_SugarCpp_fragment", 103);
		try
		{
			// SugarCpp.g:565:4: ( '[' feed_expr 'for' )
			DebugEnterAlt(1);
			// SugarCpp.g:565:5: '[' feed_expr 'for'
			{
			DebugLocation(565, 5);
			Match(input,131,Follow._131_in_synpred2_SugarCpp4702); if (state.failed) return;
			DebugLocation(565, 9);
			PushFollow(Follow._feed_expr_in_synpred2_SugarCpp4704);
			feed_expr();
			PopFollow();
			if (state.failed) return;
			DebugLocation(565, 19);
			Match(input,146,Follow._146_in_synpred2_SugarCpp4706); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_SugarCpp_fragment", 103);
			LeaveRule("synpred2_SugarCpp_fragment", 103);
			LeaveRule_synpred2_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred2_SugarCpp

	partial void EnterRule_synpred3_SugarCpp_fragment();
	partial void LeaveRule_synpred3_SugarCpp_fragment();

	// $ANTLR start synpred3_SugarCpp
	public void synpred3_SugarCpp_fragment()
	{
		EnterRule_synpred3_SugarCpp_fragment();
		EnterRule("synpred3_SugarCpp_fragment", 104);
		TraceIn("synpred3_SugarCpp_fragment", 104);
		try
		{
			// SugarCpp.g:629:27: ( '<' ident ( ',' ident )* '>' bracket_expr_list )
			DebugEnterAlt(1);
			// SugarCpp.g:629:28: '<' ident ( ',' ident )* '>' bracket_expr_list
			{
			DebugLocation(629, 28);
			Match(input,114,Follow._114_in_synpred3_SugarCpp5658); if (state.failed) return;
			DebugLocation(629, 32);
			PushFollow(Follow._ident_in_synpred3_SugarCpp5660);
			ident();
			PopFollow();
			if (state.failed) return;
			DebugLocation(629, 38);
			// SugarCpp.g:629:38: ( ',' ident )*
			try { DebugEnterSubRule(256);
			while (true)
			{
				int alt256=2;
				try { DebugEnterDecision(256, false);
				int LA256_0 = input.LA(1);

				if ((LA256_0==99))
				{
					alt256 = 1;
				}


				} finally { DebugExitDecision(256); }
				switch ( alt256 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:629:39: ',' ident
					{
					DebugLocation(629, 39);
					Match(input,99,Follow._99_in_synpred3_SugarCpp5663); if (state.failed) return;
					DebugLocation(629, 43);
					PushFollow(Follow._ident_in_synpred3_SugarCpp5665);
					ident();
					PopFollow();
					if (state.failed) return;

					}
					break;

				default:
					goto loop256;
				}
			}

			loop256:
				;

			} finally { DebugExitSubRule(256); }

			DebugLocation(629, 51);
			Match(input,124,Follow._124_in_synpred3_SugarCpp5669); if (state.failed) return;
			DebugLocation(629, 55);
			PushFollow(Follow._bracket_expr_list_in_synpred3_SugarCpp5671);
			bracket_expr_list();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_SugarCpp_fragment", 104);
			LeaveRule("synpred3_SugarCpp_fragment", 104);
			LeaveRule_synpred3_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred3_SugarCpp

	partial void EnterRule_synpred4_SugarCpp_fragment();
	partial void LeaveRule_synpred4_SugarCpp_fragment();

	// $ANTLR start synpred4_SugarCpp
	public void synpred4_SugarCpp_fragment()
	{
		EnterRule_synpred4_SugarCpp_fragment();
		EnterRule("synpred4_SugarCpp_fragment", 105);
		TraceIn("synpred4_SugarCpp_fragment", 105);
		try
		{
			// SugarCpp.g:667:4: ( '(' type_name ')' prefix_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:667:5: '(' type_name ')' prefix_expr
			{
			DebugLocation(667, 5);
			Match(input,92,Follow._92_in_synpred4_SugarCpp6284); if (state.failed) return;
			DebugLocation(667, 9);
			PushFollow(Follow._type_name_in_synpred4_SugarCpp6286);
			type_name();
			PopFollow();
			if (state.failed) return;
			DebugLocation(667, 19);
			Match(input,93,Follow._93_in_synpred4_SugarCpp6288); if (state.failed) return;
			DebugLocation(667, 23);
			PushFollow(Follow._prefix_expr_in_synpred4_SugarCpp6290);
			prefix_expr();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_SugarCpp_fragment", 105);
			LeaveRule("synpred4_SugarCpp_fragment", 105);
			LeaveRule_synpred4_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred4_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA34 dfa34;
	private DFA41 dfa41;
	private DFA51 dfa51;
	private DFA81 dfa81;
	private DFA103 dfa103;
	private DFA112 dfa112;
	private DFA117 dfa117;
	private DFA131 dfa131;
	private DFA173 dfa173;
	private DFA162 dfa162;
	private DFA197 dfa197;
	private DFA196 dfa196;
	private DFA205 dfa205;
	private DFA235 dfa235;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa34 = new DFA34( this );
		dfa41 = new DFA41( this );
		dfa51 = new DFA51( this );
		dfa81 = new DFA81( this );
		dfa103 = new DFA103( this );
		dfa112 = new DFA112( this );
		dfa117 = new DFA117( this );
		dfa131 = new DFA131( this );
		dfa173 = new DFA173( this );
		dfa162 = new DFA162( this );
		dfa197 = new DFA197( this );
		dfa196 = new DFA196( this );
		dfa205 = new DFA205( this );
		dfa235 = new DFA235( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xA1\xFFFF";
		private const string DFA4_eofS =
			"\xA1\xFFFF";
		private const string DFA4_minS =
			"\x3\x2E\x1\xFFFF\x1\x2E\x6\xFFFF\x5\x5C\x1\x2E\x1\xFFFF\x3\x2E\x1\x37"+
			"\x5\x2E\x1\x5C\x3\x5D\x5\x5C\x1\x2E\xC\x5D\x1\x2E\x1\x63\x8\x2E\x1\x63"+
			"\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63\x1\x2E\x4\x5D\x1\x5C\x1F\x5D"+
			"\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63\x2\x2E\x1\x63"+
			"\x5\x2E\x19\x5D\x5\x2E\x5\x5D";
		private const string DFA4_maxS =
			"\x1\xB5\x1\xAD\x1\xB5\x1\xFFFF\x1\xB5\x6\xFFFF\x5\x84\x1\x2E\x1\xFFFF"+
			"\x1\x2E\x1\x3D\x1\xAD\x1\x37\x4\x3D\x1\xB5\x1\x84\x2\x63\x1\x6F\x5\x84"+
			"\x1\xB5\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x1\x3D"+
			"\x1\x84\x2\x2E\x6\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84"+
			"\x1\x2E\x1\x3D\x1\x84\x1\x2E\x2\x63\x2\x6F\x1\x84\x2\x63\x1\x6F\x2\x63"+
			"\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x1\x6F\x2\x63\x2\x6F\x2\x63"+
			"\x2\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D"+
			"\x1\x84\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84\x1\x2E\x1\x3D\x1\x84"+
			"\x5\x2E\x1\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F\x2\x63\x2\x6F"+
			"\x2\x63\x6\x6F\x5\x2E\x5\x6F";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x6\xFFFF"+
			"\x1\x4\x8F\xFFFF";
		private const string DFA4_specialS =
			"\xA1\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x4\x2D\xFFFF\x1\x3\x26\xFFFF\x1\x1\x7\xFFFF\x1\x5\x1\x3\x3\xFFFF"+
				"\x1\x6\x3\xFFFF\x1\x9\x4\xFFFF\x1\x3\x2\xFFFF\x1\xA\x3\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x3\x5\xFFFF\x1\x8\x2\xFFFF\x1\x7\x1\x3\x7\xFFFF\x1\x3",
				"\x1\xB\x5D\xFFFF\x1\xC\x13\xFFFF\x1\xE\x1\xFFFF\x1\xD\xA\xFFFF\x1\xF",
				"\x1\x3\x2D\xFFFF\x1\x3\x2E\xFFFF\x1\x5\x1\x3\xC\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x9\xFFFF\x1\x3\x7\xFFFF\x1\x3",
				"",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x11"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x11\x1\x10\x1\x11\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x31\xFFFF\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x16\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x17\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x18\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x19\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x1A",
				"",
				"\x1\x1B",
				"\x1\x1E\x9\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x1F\x5D\xFFFF\x1\x20\x13\xFFFF\x1\x22\x1\xFFFF\x1\x21\xA\xFFFF"+
				"\x1\x23",
				"\x1\x24",
				"\x1\x27\x9\xFFFF\x1\x25\x4\xFFFF\x1\x26",
				"\x1\x2A\x9\xFFFF\x1\x28\x4\xFFFF\x1\x29",
				"\x1\x2D\x9\xFFFF\x1\x2B\x4\xFFFF\x1\x2C",
				"\x1\x30\x9\xFFFF\x1\x2E\x4\xFFFF\x1\x2F",
				"\x1\x3\x2B\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\x11"+
				"\x4\xFFFF\x1\x3\x5\xFFFF\x1\x11\x1\x10\x1\x11\x1\xFFFF\x1\x3\x10\xFFFF"+
				"\x1\x3\x31\xFFFF\x1\x3",
				"\x1\x13\x6\xFFFF\x1\x14\xB\xFFFF\x1\x12\x14\xFFFF\x1\x15",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x36\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x37\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x38\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x39\x6\xFFFF\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x4\x8\xFFFF\x1\x24\x24\xFFFF\x1\x3\x26\xFFFF\x1\x1\x7\xFFFF\x1"+
				"\x5\x1\x3\x3\xFFFF\x1\x6\x3\xFFFF\x1\x9\x4\xFFFF\x1\x3\x2\xFFFF\x1\xA"+
				"\x3\xFFFF\x1\x2\x1\xFFFF\x2\x3\x5\xFFFF\x1\x8\x2\xFFFF\x1\x7\x1\x3\x7"+
				"\xFFFF\x1\x3",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x48\x9\xFFFF\x1\x46\x4\xFFFF\x1\x47",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x49",
				"\x1\x4A",
				"\x1\x4D\x9\xFFFF\x1\x4B\x4\xFFFF\x1\x4C",
				"\x1\x50\x9\xFFFF\x1\x4E\x4\xFFFF\x1\x4F",
				"\x1\x53\x9\xFFFF\x1\x51\x4\xFFFF\x1\x52",
				"\x1\x56\x9\xFFFF\x1\x54\x4\xFFFF\x1\x55",
				"\x1\x59\x9\xFFFF\x1\x57\x4\xFFFF\x1\x58",
				"\x1\x5C\x9\xFFFF\x1\x5A\x4\xFFFF\x1\x5B",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x5D",
				"\x1\x60\x9\xFFFF\x1\x5E\x4\xFFFF\x1\x5F",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x61",
				"\x1\x64\x9\xFFFF\x1\x62\x4\xFFFF\x1\x63",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x65",
				"\x1\x68\x9\xFFFF\x1\x66\x4\xFFFF\x1\x67",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x69",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x33",
				"\x1\x35\x6\xFFFF\x1\x14\xB\xFFFF\x1\x34\x14\xFFFF\x1\x15",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x3C",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x3F",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x42",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x45",
				"\x1\x7E",
				"\x1\x81\x9\xFFFF\x1\x7F\x4\xFFFF\x1\x80",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x82",
				"\x1\x85\x9\xFFFF\x1\x83\x4\xFFFF\x1\x84",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x86",
				"\x1\x89\x9\xFFFF\x1\x87\x4\xFFFF\x1\x88",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8A",
				"\x1\x8D\x9\xFFFF\x1\x8B\x4\xFFFF\x1\x8C",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x8E",
				"\x1\x91\x9\xFFFF\x1\x8F\x4\xFFFF\x1\x90",
				"\x1\x14\x20\xFFFF\x1\x15",
				"\x1\x92",
				"\x1\x93",
				"\x1\x94",
				"\x1\x95",
				"\x1\x96",
				"\x1\x32\x5\xFFFF\x1\x31\xB\xFFFF\x1\x6A",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x6D",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x70",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x73",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x76",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x79",
				"\x1\x3B\x5\xFFFF\x1\x3A\xB\xFFFF\x1\x7A",
				"\x1\x3E\x5\xFFFF\x1\x3D\xB\xFFFF\x1\x7B",
				"\x1\x41\x5\xFFFF\x1\x40\xB\xFFFF\x1\x7C",
				"\x1\x44\x5\xFFFF\x1\x43\xB\xFFFF\x1\x7D",
				"\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\x1\xA0",
				"\x1\x6C\x5\xFFFF\x1\x6B\xB\xFFFF\x1\x97",
				"\x1\x6F\x5\xFFFF\x1\x6E\xB\xFFFF\x1\x98",
				"\x1\x72\x5\xFFFF\x1\x71\xB\xFFFF\x1\x99",
				"\x1\x75\x5\xFFFF\x1\x74\xB\xFFFF\x1\x9A",
				"\x1\x78\x5\xFFFF\x1\x77\xB\xFFFF\x1\x9B"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "220:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x4\xFFFF";
		private const string DFA34_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA34_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA34_maxS =
			"\x1\x37\x1\xB5\x2\xFFFF";
		private const string DFA34_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA34_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "267:32: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA41 : DFA
	{
		private const string DFA41_eotS =
			"\x4\xFFFF";
		private const string DFA41_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA41_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA41_maxS =
			"\x1\x37\x1\xB5\x2\xFFFF";
		private const string DFA41_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA41_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA41_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
		private static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
		private static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
		private static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
		private static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
		private static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
		private static readonly short[][] DFA41_transition;

		static DFA41()
		{
			int numStates = DFA41_transitionS.Length;
			DFA41_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA41_transition[i] = DFA.UnpackEncodedString(DFA41_transitionS[i]);
			}
		}

		public DFA41( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 41;
			this.eot = DFA41_eot;
			this.eof = DFA41_eof;
			this.min = DFA41_min;
			this.max = DFA41_max;
			this.accept = DFA41_accept;
			this.special = DFA41_special;
			this.transition = DFA41_transition;
		}

		public override string Description { get { return "275:33: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA51 : DFA
	{
		private const string DFA51_eotS =
			"\x4\xFFFF";
		private const string DFA51_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA51_minS =
			"\x1\x37\x1\x8\x2\xFFFF";
		private const string DFA51_maxS =
			"\x1\x37\x1\xB5\x2\xFFFF";
		private const string DFA51_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA51_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA51_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x2\x7\xFFFF\x1\x1\x24\xFFFF\x1\x3\x26\xFFFF"+
				"\x1\x3\x7\xFFFF\x2\x3\x3\xFFFF\x1\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x1\xFFFF\x2\x3\x5\xFFFF\x1\x3\x2\xFFFF\x2"+
				"\x3\x7\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA51_eot = DFA.UnpackEncodedString(DFA51_eotS);
		private static readonly short[] DFA51_eof = DFA.UnpackEncodedString(DFA51_eofS);
		private static readonly char[] DFA51_min = DFA.UnpackEncodedStringToUnsignedChars(DFA51_minS);
		private static readonly char[] DFA51_max = DFA.UnpackEncodedStringToUnsignedChars(DFA51_maxS);
		private static readonly short[] DFA51_accept = DFA.UnpackEncodedString(DFA51_acceptS);
		private static readonly short[] DFA51_special = DFA.UnpackEncodedString(DFA51_specialS);
		private static readonly short[][] DFA51_transition;

		static DFA51()
		{
			int numStates = DFA51_transitionS.Length;
			DFA51_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA51_transition[i] = DFA.UnpackEncodedString(DFA51_transitionS[i]);
			}
		}

		public DFA51( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 51;
			this.eot = DFA51_eot;
			this.eof = DFA51_eof;
			this.min = DFA51_min;
			this.max = DFA51_max;
			this.accept = DFA51_accept;
			this.special = DFA51_special;
			this.transition = DFA51_transition;
		}

		public override string Description { get { return "285:99: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA81 : DFA
	{
		private const string DFA81_eotS =
			"\x11\xFFFF";
		private const string DFA81_eofS =
			"\x11\xFFFF";
		private const string DFA81_minS =
			"\x1\x2E\x1\xFFFF\x2\x2E\x1\xFFFF\x4\x2E\x1\x5A\x3\x2E\x2\x5A\x1\x2E\x1"+
			"\x5A";
		private const string DFA81_maxS =
			"\x1\xB5\x1\xFFFF\x1\xB5\x1\xA3\x1\xFFFF\x1\x2E\x1\xA3\x1\x70\x1\xB5\x1"+
			"\x83\x1\x2E\x1\xA3\x1\xB5\x2\x83\x1\x2E\x1\x83";
		private const string DFA81_acceptS =
			"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x2\xC\xFFFF";
		private const string DFA81_specialS =
			"\x11\xFFFF}>";
		private static readonly string[] DFA81_transitionS =
			{
				"\x1\x2\x2D\xFFFF\x1\x3\x2F\xFFFF\x1\x1\xC\xFFFF\x1\x1\x8\xFFFF\x2\x1"+
				"\x11\xFFFF\x1\x4",
				"",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x31\xFFFF\x1\x1",
				"\x1\x1\x2D\xFFFF\x2\x1\x1\x4\x1\xFFFF\x1\x4\x3\xFFFF\x1\x4\x7\xFFFF"+
				"\x1\x4\x1F\xFFFF\x1\x1\xC\xFFFF\x1\x1\x8\xFFFF\x2\x1",
				"",
				"\x1\x8",
				"\x1\x9\x2D\xFFFF\x1\x1\x1F\xFFFF\x1\x1\xF\xFFFF\x1\x1\xC\xFFFF\x1\x1"+
				"\x8\xFFFF\x2\x1",
				"\x1\x4\x2E\xFFFF\x1\x4\x1\x1\x1\xFFFF\x1\x1\x3\xFFFF\x1\x1\x7\xFFFF"+
				"\x1\x1\x3\xFFFF\x1\x4",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x6\xFFFF\x1\x5\x2\xFFFF\x1\x6\x10\xFFFF\x1\x1\x31\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\xD",
				"\x1\xE\x2D\xFFFF\x1\x1\x2F\xFFFF\x1\x1\xC\xFFFF\x1\x1\x8\xFFFF\x2\x1",
				"\x1\x1\x2B\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1\xFFFF\x1\x1\x9\xFFFF\x1\x1"+
				"\x1A\xFFFF\x1\x1\x31\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xA"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1",
				"\x1\x10",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\xB\x4\xFFFF\x1\x1\x6\xFFFF\x1\xF"+
				"\x2\xFFFF\x1\x1\x9\xFFFF\x1\xC\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
		private static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
		private static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
		private static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
		private static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
		private static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
		private static readonly short[][] DFA81_transition;

		static DFA81()
		{
			int numStates = DFA81_transitionS.Length;
			DFA81_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA81_transition[i] = DFA.UnpackEncodedString(DFA81_transitionS[i]);
			}
		}

		public DFA81( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}

		public override string Description { get { return "364:36: ( func_type )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA103 : DFA
	{
		private const string DFA103_eotS =
			"\x9\xFFFF";
		private const string DFA103_eofS =
			"\x9\xFFFF";
		private const string DFA103_minS =
			"\x1\x2E\x1\x8\x4\xFFFF\x1\x2E\x1\xFFFF\x1\x8";
		private const string DFA103_maxS =
			"\x1\xB5\x1\xB2\x4\xFFFF\x1\x2E\x1\xFFFF\x1\xB2";
		private const string DFA103_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA103_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA103_transitionS =
			{
				"\x1\x1\x26\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x2\xFFFF\x2\x5\x1C\xFFFF\x1\x5\x1B\xFFFF\x1\x5\x2\xFFFF"+
				"\x1\x2\x7\xFFFF\x1\x4\x2\xFFFF\x1\x3\x8\xFFFF\x1\x5",
				"\x1\x5\x2E\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xB\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x14\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x2E\xFFFF\x1\x5\x20\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x1\x5\x1\xFFFF\x2\x5\x1\xFFFF\x1\x5\x2"+
				"\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7\x2\x5\x1\xFFFF\x2\x5\x2\xFFFF\x1\x5\x5"+
				"\xFFFF\x2\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xB\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x5\x14\xFFFF\x2\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA103_eot = DFA.UnpackEncodedString(DFA103_eotS);
		private static readonly short[] DFA103_eof = DFA.UnpackEncodedString(DFA103_eofS);
		private static readonly char[] DFA103_min = DFA.UnpackEncodedStringToUnsignedChars(DFA103_minS);
		private static readonly char[] DFA103_max = DFA.UnpackEncodedStringToUnsignedChars(DFA103_maxS);
		private static readonly short[] DFA103_accept = DFA.UnpackEncodedString(DFA103_acceptS);
		private static readonly short[] DFA103_special = DFA.UnpackEncodedString(DFA103_specialS);
		private static readonly short[][] DFA103_transition;

		static DFA103()
		{
			int numStates = DFA103_transitionS.Length;
			DFA103_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA103_transition[i] = DFA.UnpackEncodedString(DFA103_transitionS[i]);
			}
		}

		public DFA103( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 103;
			this.eot = DFA103_eot;
			this.eof = DFA103_eof;
			this.min = DFA103_min;
			this.max = DFA103_max;
			this.accept = DFA103_accept;
			this.special = DFA103_special;
			this.transition = DFA103_transition;
		}

		public override string Description { get { return "407:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA112 : DFA
	{
		private const string DFA112_eotS =
			"\x4\xFFFF";
		private const string DFA112_eofS =
			"\x4\xFFFF";
		private const string DFA112_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA112_maxS =
			"\x1\x95\x1\xB5\x2\xFFFF";
		private const string DFA112_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA112_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA112_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x57\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x25\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA112_eot = DFA.UnpackEncodedString(DFA112_eotS);
		private static readonly short[] DFA112_eof = DFA.UnpackEncodedString(DFA112_eofS);
		private static readonly char[] DFA112_min = DFA.UnpackEncodedStringToUnsignedChars(DFA112_minS);
		private static readonly char[] DFA112_max = DFA.UnpackEncodedStringToUnsignedChars(DFA112_maxS);
		private static readonly short[] DFA112_accept = DFA.UnpackEncodedString(DFA112_acceptS);
		private static readonly short[] DFA112_special = DFA.UnpackEncodedString(DFA112_specialS);
		private static readonly short[][] DFA112_transition;

		static DFA112()
		{
			int numStates = DFA112_transitionS.Length;
			DFA112_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA112_transition[i] = DFA.UnpackEncodedString(DFA112_transitionS[i]);
			}
		}

		public DFA112( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 112;
			this.eot = DFA112_eot;
			this.eof = DFA112_eof;
			this.min = DFA112_min;
			this.max = DFA112_max;
			this.accept = DFA112_accept;
			this.special = DFA112_special;
			this.transition = DFA112_transition;
		}

		public override string Description { get { return "438:35: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA117 : DFA
	{
		private const string DFA117_eotS =
			"\x4\xFFFF";
		private const string DFA117_eofS =
			"\x4\xFFFF";
		private const string DFA117_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA117_maxS =
			"\x1\x95\x1\xB5\x2\xFFFF";
		private const string DFA117_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA117_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA117_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x57\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x3\x25\xFFFF\x2\x3\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x3\x3\x1\xFFFF\x1\x3\x4"+
				"\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5"+
				"\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA117_eot = DFA.UnpackEncodedString(DFA117_eotS);
		private static readonly short[] DFA117_eof = DFA.UnpackEncodedString(DFA117_eofS);
		private static readonly char[] DFA117_min = DFA.UnpackEncodedStringToUnsignedChars(DFA117_minS);
		private static readonly char[] DFA117_max = DFA.UnpackEncodedStringToUnsignedChars(DFA117_maxS);
		private static readonly short[] DFA117_accept = DFA.UnpackEncodedString(DFA117_acceptS);
		private static readonly short[] DFA117_special = DFA.UnpackEncodedString(DFA117_specialS);
		private static readonly short[][] DFA117_transition;

		static DFA117()
		{
			int numStates = DFA117_transitionS.Length;
			DFA117_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA117_transition[i] = DFA.UnpackEncodedString(DFA117_transitionS[i]);
			}
		}

		public DFA117( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 117;
			this.eot = DFA117_eot;
			this.eof = DFA117_eof;
			this.min = DFA117_min;
			this.max = DFA117_max;
			this.accept = DFA117_accept;
			this.special = DFA117_special;
			this.transition = DFA117_transition;
		}

		public override string Description { get { return "441:39: ( ( NEWLINE )* 'else' ( NEWLINE )+ stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA131 : DFA
	{
		private const string DFA131_eotS =
			"\x7\xFFFF";
		private const string DFA131_eofS =
			"\x7\xFFFF";
		private const string DFA131_minS =
			"\x1\x2E\x1\x8\x1\xFFFF\x1\x2E\x2\xFFFF\x1\x8";
		private const string DFA131_maxS =
			"\x1\xB5\x1\xB4\x1\xFFFF\x1\x2E\x2\xFFFF\x1\xB4";
		private const string DFA131_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF";
		private const string DFA131_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA131_transitionS =
			{
				"\x1\x1\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x14\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x16\xFFFF\x1\x2",
				"\x1\x2\x2E\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\x9\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xA\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2",
				"",
				"\x1\x6",
				"",
				"",
				"\x1\x2\x2E\xFFFF\x1\x2\x1E\xFFFF\x7\x2\x1\xFFFF\x8\x2\x1\xFFFF\x7\x2"+
				"\x1\xFFFF\x1\x3\x3\x2\x1\x4\x6\x2\x1\xFFFF\x1\x5\x5\x2\x1\xFFFF\x7\x2"+
				"\x9\xFFFF\x2\x2\x1\xFFFF\x3\x2\x7\xFFFF\x1\x2\xA\xFFFF\x2\x2\x4\xFFFF"+
				"\x5\x2"
			};

		private static readonly short[] DFA131_eot = DFA.UnpackEncodedString(DFA131_eotS);
		private static readonly short[] DFA131_eof = DFA.UnpackEncodedString(DFA131_eofS);
		private static readonly char[] DFA131_min = DFA.UnpackEncodedStringToUnsignedChars(DFA131_minS);
		private static readonly char[] DFA131_max = DFA.UnpackEncodedStringToUnsignedChars(DFA131_maxS);
		private static readonly short[] DFA131_accept = DFA.UnpackEncodedString(DFA131_acceptS);
		private static readonly short[] DFA131_special = DFA.UnpackEncodedString(DFA131_specialS);
		private static readonly short[][] DFA131_transition;

		static DFA131()
		{
			int numStates = DFA131_transitionS.Length;
			DFA131_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA131_transition[i] = DFA.UnpackEncodedString(DFA131_transitionS[i]);
			}
		}

		public DFA131( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 131;
			this.eot = DFA131_eot;
			this.eof = DFA131_eof;
			this.min = DFA131_min;
			this.max = DFA131_max;
			this.accept = DFA131_accept;
			this.special = DFA131_special;
			this.transition = DFA131_transition;
		}

		public override string Description { get { return "472:1: for_item : ( for_range | for_when | for_map );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA173 : DFA
	{
		private const string DFA173_eotS =
			"\x7\xFFFF";
		private const string DFA173_eofS =
			"\x1\xFFFF\x1\x3\x5\xFFFF";
		private const string DFA173_minS =
			"\x2\x8\x2\xFFFF\x2\x8\x1\xFFFF";
		private const string DFA173_maxS =
			"\x1\xB0\x1\xB5\x2\xFFFF\x2\xB5\x1\xFFFF";
		private const string DFA173_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x2\xFFFF\x1\x1";
		private const string DFA173_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA173_transitionS =
			{
				"\x1\x3\x2E\xFFFF\x1\x1\x2B\xFFFF\x1\x3\xD\xFFFF\x1\x3\x20\xFFFF\x2\x3"+
				"\x1\xFFFF\x1\x3\x14\xFFFF\x2\x3\x3\xFFFF\x1\x2\x1\x3",
				"\x1\x3\x25\xFFFF\x1\x3\x1\x4\x7\xFFFF\x1\x1\x1D\xFFFF\x1\x3\x4\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C"+
				"\xFFFF\x2\x3\x7\xFFFF\x3\x3\x1\xFFFF\x7\x3\x3\xFFFF\x2\x3\x1\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x3\x1\xFFFF\x5\x3\x3\xFFFF\x7\x3\x1\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3",
				"",
				"",
				"\x1\x3\x25\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				"\x1\x3\x25\xFFFF\x1\x3\x8\xFFFF\x1\x5\x1D\xFFFF\x1\x3\x4\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x2\x3\x2\xFFFF\x2\x3\x1C\xFFFF"+
				"\x1\x3\xA\xFFFF\x1\x3\x3\xFFFF\x3\x3\x6\xFFFF\x1\x3\x3\xFFFF\x1\x3\x2"+
				"\xFFFF\x1\x3\x2\xFFFF\x1\x3\x3\xFFFF\x5\x3\x2\xFFFF\x1\x6\x1\x3\x4\xFFFF"+
				"\x1\x3",
				""
			};

		private static readonly short[] DFA173_eot = DFA.UnpackEncodedString(DFA173_eotS);
		private static readonly short[] DFA173_eof = DFA.UnpackEncodedString(DFA173_eofS);
		private static readonly char[] DFA173_min = DFA.UnpackEncodedStringToUnsignedChars(DFA173_minS);
		private static readonly char[] DFA173_max = DFA.UnpackEncodedStringToUnsignedChars(DFA173_maxS);
		private static readonly short[] DFA173_accept = DFA.UnpackEncodedString(DFA173_acceptS);
		private static readonly short[] DFA173_special = DFA.UnpackEncodedString(DFA173_specialS);
		private static readonly short[][] DFA173_transition;

		static DFA173()
		{
			int numStates = DFA173_transitionS.Length;
			DFA173_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA173_transition[i] = DFA.UnpackEncodedString(DFA173_transitionS[i]);
			}
		}

		public DFA173( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 173;
			this.eot = DFA173_eot;
			this.eof = DFA173_eof;
			this.min = DFA173_min;
			this.max = DFA173_max;
			this.accept = DFA173_accept;
			this.special = DFA173_special;
			this.transition = DFA173_transition;
		}

		public override string Description { get { return "523:19: ( ( NEWLINE )+ INDENT ( NEWLINE )* 'where' ( where_item ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) ) | 'where' ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) | -> expr )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA162 : DFA
	{
		private const string DFA162_eotS =
			"\x4\xFFFF";
		private const string DFA162_eofS =
			"\x4\xFFFF";
		private const string DFA162_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA162_maxS =
			"\x2\x37\x2\xFFFF";
		private const string DFA162_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA162_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA162_transitionS =
			{
				"\x1\x2\x2E\xFFFF\x1\x1",
				"\x1\x2\x26\xFFFF\x1\x3\x7\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA162_eot = DFA.UnpackEncodedString(DFA162_eotS);
		private static readonly short[] DFA162_eof = DFA.UnpackEncodedString(DFA162_eofS);
		private static readonly char[] DFA162_min = DFA.UnpackEncodedStringToUnsignedChars(DFA162_minS);
		private static readonly char[] DFA162_max = DFA.UnpackEncodedStringToUnsignedChars(DFA162_maxS);
		private static readonly short[] DFA162_accept = DFA.UnpackEncodedString(DFA162_acceptS);
		private static readonly short[] DFA162_special = DFA.UnpackEncodedString(DFA162_specialS);
		private static readonly short[][] DFA162_transition;

		static DFA162()
		{
			int numStates = DFA162_transitionS.Length;
			DFA162_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA162_transition[i] = DFA.UnpackEncodedString(DFA162_transitionS[i]);
			}
		}

		public DFA162( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 162;
			this.eot = DFA162_eot;
			this.eof = DFA162_eof;
			this.min = DFA162_min;
			this.max = DFA162_max;
			this.accept = DFA162_accept;
			this.special = DFA162_special;
			this.transition = DFA162_transition;
		}

		public override string Description { get { return "523:67: ( ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr where_item ) | ( NEWLINE )+ INDENT ( NEWLINE )* ( where_item ( NEWLINE )+ )+ DEDENT ( NEWLINE )* DEDENT -> ^( Expr_Where $where_expr ( where_item )+ ) )"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA197 : DFA
	{
		private const string DFA197_eotS =
			"\x7\xFFFF";
		private const string DFA197_eofS =
			"\x7\xFFFF";
		private const string DFA197_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA197_maxS =
			"\x5\xB5\x2\xFFFF";
		private const string DFA197_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA197_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA197_transitionS =
			{
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x5\x1\x3\x7\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x17"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x1C\xFFFF\x2\x5\x1\x6\x18\xFFFF\x2\x5\x16\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA197_eot = DFA.UnpackEncodedString(DFA197_eotS);
		private static readonly short[] DFA197_eof = DFA.UnpackEncodedString(DFA197_eofS);
		private static readonly char[] DFA197_min = DFA.UnpackEncodedStringToUnsignedChars(DFA197_minS);
		private static readonly char[] DFA197_max = DFA.UnpackEncodedStringToUnsignedChars(DFA197_maxS);
		private static readonly short[] DFA197_accept = DFA.UnpackEncodedString(DFA197_acceptS);
		private static readonly short[] DFA197_special = DFA.UnpackEncodedString(DFA197_specialS);
		private static readonly short[][] DFA197_transition;

		static DFA197()
		{
			int numStates = DFA197_transitionS.Length;
			DFA197_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA197_transition[i] = DFA.UnpackEncodedString(DFA197_transitionS[i]);
			}
		}

		public DFA197( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 197;
			this.eot = DFA197_eot;
			this.eof = DFA197_eof;
			this.min = DFA197_min;
			this.max = DFA197_max;
			this.accept = DFA197_accept;
			this.special = DFA197_special;
			this.transition = DFA197_transition;
		}

		public override string Description { get { return "566:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* feed_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA196 : DFA
	{
		private const string DFA196_eotS =
			"\x7\xFFFF";
		private const string DFA196_eofS =
			"\x7\xFFFF";
		private const string DFA196_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA196_maxS =
			"\x1\x84\x4\xB5\x2\xFFFF";
		private const string DFA196_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA196_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA196_transitionS =
			{
				"\x1\x4\x26\xFFFF\x1\x3\x7\xFFFF\x1\x2\x2B\xFFFF\x1\x1\x20\xFFFF\x1\x5",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"\x1\x4\x25\xFFFF\x1\x6\x1\x3\x7\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x17"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x1C\xFFFF\x2\x6\x1\x5\x18\xFFFF\x2\x6\x16\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA196_eot = DFA.UnpackEncodedString(DFA196_eotS);
		private static readonly short[] DFA196_eof = DFA.UnpackEncodedString(DFA196_eofS);
		private static readonly char[] DFA196_min = DFA.UnpackEncodedStringToUnsignedChars(DFA196_minS);
		private static readonly char[] DFA196_max = DFA.UnpackEncodedStringToUnsignedChars(DFA196_maxS);
		private static readonly short[] DFA196_accept = DFA.UnpackEncodedString(DFA196_acceptS);
		private static readonly short[] DFA196_special = DFA.UnpackEncodedString(DFA196_specialS);
		private static readonly short[][] DFA196_transition;

		static DFA196()
		{
			int numStates = DFA196_transitionS.Length;
			DFA196_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA196_transition[i] = DFA.UnpackEncodedString(DFA196_transitionS[i]);
			}
		}

		public DFA196( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 196;
			this.eot = DFA196_eot;
			this.eof = DFA196_eof;
			this.min = DFA196_min;
			this.max = DFA196_max;
			this.accept = DFA196_accept;
			this.special = DFA196_special;
			this.transition = DFA196_transition;
		}

		public override string Description { get { return "()* loopback of 566:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ feed_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA205 : DFA
	{
		private const string DFA205_eotS =
			"\xB\xFFFF";
		private const string DFA205_eofS =
			"\xB\xFFFF";
		private const string DFA205_minS =
			"\x2\x2E\x1\xFFFF\x1\x56\x1\xFFFF\x2\x2E\x2\x56\x1\x2E\x1\x56";
		private const string DFA205_maxS =
			"\x2\xB5\x1\xFFFF\x1\xB4\x1\xFFFF\x1\x2E\x1\xB5\x2\xB4\x1\x2E\x1\xB4";
		private const string DFA205_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA205_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA205_transitionS =
			{
				"\x1\x2\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x1\x2\x1A\xFFFF\x2\x2\x16\xFFFF\x1\x2",
				"\x1\x3\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\xA\xFFFF\x1"+
				"\x4\x11\xFFFF\x2\x2\x8\xFFFF\x1\x2\xB\xFFFF\x2\x2\x1\xFFFF\x1\x2\x1"+
				"\xFFFF\x2\x2\x3\xFFFF\x2\x2\x11\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xD\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2",
				"",
				"\x1\x7",
				"\x1\x8\x9\xFFFF\x1\x2\x4\xFFFF\x1\x2\x17\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x1C\xFFFF"+
				"\x2\x2\x14\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x2\x2\x16\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x5\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xD\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xD\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x2\x2\x1\xFFFF\x7\x2\x1\x4\x1\x9\x1\x2\x1\xFFFF\x1\x2"+
				"\x1\xFFFF\x6\x2\x2\xFFFF\x5\x2\x1\xFFFF\x2\x2\x1\xFFFF\x4\x2\xD\xFFFF"+
				"\x2\x2\x7\xFFFF\x1\x2\x11\xFFFF\x4\x2"
			};

		private static readonly short[] DFA205_eot = DFA.UnpackEncodedString(DFA205_eotS);
		private static readonly short[] DFA205_eof = DFA.UnpackEncodedString(DFA205_eofS);
		private static readonly char[] DFA205_min = DFA.UnpackEncodedStringToUnsignedChars(DFA205_minS);
		private static readonly char[] DFA205_max = DFA.UnpackEncodedStringToUnsignedChars(DFA205_maxS);
		private static readonly short[] DFA205_accept = DFA.UnpackEncodedString(DFA205_acceptS);
		private static readonly short[] DFA205_special = DFA.UnpackEncodedString(DFA205_specialS);
		private static readonly short[][] DFA205_transition;

		static DFA205()
		{
			int numStates = DFA205_transitionS.Length;
			DFA205_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA205_transition[i] = DFA.UnpackEncodedString(DFA205_transitionS[i]);
			}
		}

		public DFA205( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 205;
			this.eot = DFA205_eot;
			this.eof = DFA205_eof;
			this.min = DFA205_min;
			this.max = DFA205_max;
			this.accept = DFA205_accept;
			this.special = DFA205_special;
			this.transition = DFA205_transition;
		}

		public override string Description { get { return "579:1: lambda_expr : ( '(' ( func_args )? ')' ( lambda_type )? ( '->' lambda_value -> ^( Expr_Lambda '->' ( func_args )? ( lambda_type )? lambda_value ) | '=>' lambda_value -> ^( Expr_Lambda '=>' ( func_args )? ( lambda_type )? lambda_value ) | '-->' lambda_value -> ^( Expr_Lambda '-->' ( func_args )? ( lambda_type )? lambda_value ) | '==>' lambda_value -> ^( Expr_Lambda '==>' ( func_args )? ( lambda_type )? lambda_value ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA235 : DFA
	{
		private const string DFA235_eotS =
			"\x4\xFFFF";
		private const string DFA235_eofS =
			"\x4\xFFFF";
		private const string DFA235_minS =
			"\x2\x8\x2\xFFFF";
		private const string DFA235_maxS =
			"\x1\x63\x1\xB5\x2\xFFFF";
		private const string DFA235_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA235_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA235_transitionS =
			{
				"\x1\x2\x2E\xFFFF\x1\x1\x25\xFFFF\x1\x2\x5\xFFFF\x1\x3",
				"\x1\x2\x25\xFFFF\x1\x3\x8\xFFFF\x1\x1\x1\x3\x4\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3\x4\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\x2\x1\x3\x1\xFFFF\x2\x3\x1\xFFFF"+
				"\x3\x3\x1C\xFFFF\x2\x3\x14\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x2\x3"+
				"\x16\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA235_eot = DFA.UnpackEncodedString(DFA235_eotS);
		private static readonly short[] DFA235_eof = DFA.UnpackEncodedString(DFA235_eofS);
		private static readonly char[] DFA235_min = DFA.UnpackEncodedStringToUnsignedChars(DFA235_minS);
		private static readonly char[] DFA235_max = DFA.UnpackEncodedStringToUnsignedChars(DFA235_maxS);
		private static readonly short[] DFA235_accept = DFA.UnpackEncodedString(DFA235_acceptS);
		private static readonly short[] DFA235_special = DFA.UnpackEncodedString(DFA235_specialS);
		private static readonly short[][] DFA235_transition;

		static DFA235()
		{
			int numStates = DFA235_transitionS.Length;
			DFA235_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA235_transition[i] = DFA.UnpackEncodedString(DFA235_transitionS[i]);
			}
		}

		public DFA235( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 235;
			this.eot = DFA235_eot;
			this.eof = DFA235_eof;
			this.min = DFA235_min;
			this.max = DFA235_max;
			this.accept = DFA235_accept;
			this.special = DFA235_special;
			this.transition = DFA235_transition;
		}

		public override string Description { get { return "()* loopback of 686:44: ( ( ',' | NEWLINE )+ expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root587 = new BitSet(new ulong[]{0x80400000000000UL,0x10000000UL,0x20320D12111808UL});
		public static readonly BitSet _global_block_in_root590 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root592 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block612 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block614 = new BitSet(new ulong[]{0x80400000000002UL,0x10000000UL,0x20320D12111808UL});
		public static readonly BitSet _func_def_in_node637 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node647 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node657 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node667 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args694 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item705 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item708 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item710 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item713 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item715 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_attribute_item737 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item740 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item742 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item745 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item747 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item751 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_attribute_item769 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item772 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item774 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item777 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item779 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item783 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _160_in_attribute_item801 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item804 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item806 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item809 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item811 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item815 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _173_in_attribute_item833 = new BitSet(new ulong[]{0x2UL,0x10000000UL});
		public static readonly BitSet _92_in_attribute_item836 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item838 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_attribute_item841 = new BitSet(new ulong[]{0x2100400000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item843 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_attribute_item847 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_attribute872 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x200500001000UL});
		public static readonly BitSet _attribute_item_in_attribute874 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_attribute877 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x200500001000UL});
		public static readonly BitSet _attribute_item_in_attribute879 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_attribute883 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute885 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _attribute_in_global_alloc904 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc907 = new BitSet(new ulong[]{0x0UL,0x1400000000000UL});
		public static readonly BitSet _110_in_global_alloc911 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_global_alloc913 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_global_alloc918 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _112_in_global_alloc922 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_global_alloc925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_global_alloc988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_global_alloc1064 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_global_alloc1067 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_global_alloc1070 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_global_alloc1072 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _attribute_in_global_using1113 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000000000UL});
		public static readonly BitSet _172_in_global_using1116 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _stmt_using_item_in_global_using1118 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _attribute_in_global_typedef1142 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20000000000UL});
		public static readonly BitSet _169_in_global_typedef1145 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_global_typedef1147 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_global_typedef1149 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_global_typedef1151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_import_def1175 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000UL});
		public static readonly BitSet _148_in_import_def1178 = new BitSet(new ulong[]{0x2080000000000002UL});
		public static readonly BitSet _STRING_in_import_def1180 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def1184 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_import_def1187 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def1189 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _STRING_in_import_def1194 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def1196 = new BitSet(new ulong[]{0x2080000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def1201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1226 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000UL});
		public static readonly BitSet _144_in_enum_def1229 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_enum_def1231 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_enum_def1233 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _ident_in_enum_def1236 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_enum_def1239 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_enum_def1241 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _attribute_in_namespace_def1274 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10000000UL});
		public static readonly BitSet _156_in_namespace_def1277 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_namespace_def1279 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1282 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1285 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x20320D12111808UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1287 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x20320D12111808UL});
		public static readonly BitSet _global_block_in_namespace_def1290 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_class_args1319 = new BitSet(new ulong[]{0x400000000000UL,0x1000020000000UL});
		public static readonly BitSet _func_args_in_class_args1323 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_class_args1325 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_class_args1337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1361 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100000800UL});
		public static readonly BitSet _160_in_class_def1364 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _139_in_class_def1367 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1369 = new BitSet(new ulong[]{0x80000000000002UL,0x4400010000000UL});
		public static readonly BitSet _generic_parameter_in_class_def1372 = new BitSet(new ulong[]{0x80000000000002UL,0x400010000000UL});
		public static readonly BitSet _class_args_in_class_def1376 = new BitSet(new ulong[]{0x80000000000002UL,0x400000000000UL});
		public static readonly BitSet _110_in_class_def1380 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1382 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def1385 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_class_def1387 = new BitSet(new ulong[]{0x80000000000002UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1394 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_class_def1397 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x20320D12111808UL});
		public static readonly BitSet _NEWLINE_in_class_def1399 = new BitSet(new ulong[]{0x80400000000100UL,0x10000000UL,0x20320D12111808UL});
		public static readonly BitSet _global_block_in_class_def1402 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_type_list1450 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_type_list1453 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_type_list1455 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _type_single_in_type_name1477 = new BitSet(new ulong[]{0x2UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_name1481 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_type_name1484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1488 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1490 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1531 = new BitSet(new ulong[]{0x400000000000UL,0x30000000UL,0xC02001000UL});
		public static readonly BitSet _type_list_in_type_name1533 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1536 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_type_name1538 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_type_name1541 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_type_name1545 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_type_name1547 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_single1571 = new BitSet(new ulong[]{0x2UL,0x4000000UL,0x8UL});
		public static readonly BitSet _90_in_type_single1575 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_type_single1591 = new BitSet(new ulong[]{0x2100400000000000UL,0x3B54200000UL,0x2000006900001CUL});
		public static readonly BitSet _expr_in_type_single1595 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_type_single1598 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_type_single1600 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_type_single1604 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_type_single1629 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_type_single1632 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_star_in_type_no_array1679 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_type_no_array1683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_template_type_in_type_star1718 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _94_in_type_star1722 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _type_ident_in_type_template_type1768 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _114_in_type_template_type1772 = new BitSet(new ulong[]{0x400000000000UL,0x1000000010000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_type_template_type1775 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_type_template_type1778 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_type_template_type1780 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_type_template_type1786 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _162_in_type_ident1826 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x802001000UL});
		public static readonly BitSet _140_in_type_ident1829 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x802000000UL});
		public static readonly BitSet _163_in_type_ident1832 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_type_ident1835 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_type_ident1838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1869 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_generic_parameter_inside1872 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1874 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _114_in_generic_parameter1896 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1898 = new BitSet(new ulong[]{0x0UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_generic_parameter1900 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1915 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_func_args1918 = new BitSet(new ulong[]{0x400000000000UL,0x1000000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1920 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1942 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_func_args_item1944 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_func_args_item1946 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_func_args_item1951 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _112_in_func_args_item1955 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_func_args_item1958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_func_args_item2009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_func_args_item2069 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _modify_expr_in_func_args_item2073 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_func_name2107 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_func_name2116 = new BitSet(new ulong[]{0x0UL,0x101140000000UL});
		public static readonly BitSet _operator_in_func_name2118 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_name2120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _type_name_in_func_type2135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def2146 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x20200D02001000UL});
		public static readonly BitSet _160_in_func_def2149 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x20200C02001000UL});
		public static readonly BitSet _173_in_func_def2152 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x20000C02001000UL});
		public static readonly BitSet _func_type_in_func_def2155 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0x20000000000000UL});
		public static readonly BitSet _181_in_func_def2158 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL});
		public static readonly BitSet _func_name_in_func_def2161 = new BitSet(new ulong[]{0x0UL,0x4000010000000UL});
		public static readonly BitSet _generic_parameter_in_func_def2163 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_func_def2166 = new BitSet(new ulong[]{0x400000000000UL,0x1000020000000UL});
		public static readonly BitSet _func_args_in_func_def2168 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_func_def2171 = new BitSet(new ulong[]{0x80000000000000UL,0x100000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2175 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_func_def2178 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_func_def2240 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_func_def2244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_func_def2307 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_func_def2310 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2312 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _match_item_in_func_def2316 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def2318 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _DEDENT_in_func_def2323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt_block_item2431 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2433 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _stmt_simple_in_stmt_block_item2443 = new BitSet(new ulong[]{0x80000000000000UL,0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2446 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _113_in_stmt_block_item2451 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _NEWLINE_in_stmt_block_item2453 = new BitSet(new ulong[]{0x80000000000002UL});
		public static readonly BitSet _INDENT_in_stmt_block2470 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _NEWLINE_in_stmt_block2472 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _stmt_block_item_in_stmt_block2475 = new BitSet(new ulong[]{0x400000000100UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _DEDENT_in_stmt_block2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_stmt2498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_complex_in_stmt2503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt_simple2514 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt_complex2525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt_complex2530 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt_complex2535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt_complex2540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_switch_in_stmt_complex2545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt_complex2550 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr2564 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10C00000C0000UL});
		public static readonly BitSet _147_in_stmt_expr2574 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_expr2576 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10C00000C0000UL});
		public static readonly BitSet _170_in_stmt_expr2605 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_expr2607 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10C00000C0000UL});
		public static readonly BitSet _176_in_stmt_expr2636 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_expr2638 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10C00000C0000UL});
		public static readonly BitSet _171_in_stmt_expr2667 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_expr2669 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10C00000C0000UL});
		public static readonly BitSet _146_in_stmt_expr2698 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _for_item_in_stmt_expr2700 = new BitSet(new ulong[]{0x2UL,0x800000000UL,0x10C00000C0000UL});
		public static readonly BitSet _99_in_stmt_expr2703 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _for_item_in_stmt_expr2705 = new BitSet(new ulong[]{0x2UL,0x800000000UL,0x10C00000C0000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2747 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2752 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_stmt_defer2778 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _stmt_in_stmt_defer2780 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_defer2793 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _stmt_in_stmt_defer2795 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _169_in_stmt_typedef2814 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2816 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_stmt_typedef2818 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_stmt_typedef2820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2839 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_using_item2843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _172_in_stmt_using2851 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2853 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x10000000UL});
		public static readonly BitSet _161_in_stmt_return2874 = new BitSet(new ulong[]{0x2100400000000002UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_return2876 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2897 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_inline_stmt_block2900 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x20120240000004UL});
		public static readonly BitSet _stmt_simple_in_inline_stmt_block2902 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _147_in_stmt_if2924 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_if2926 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2929 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2932 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2935 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_stmt_if2938 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2940 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_if2975 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x20120240000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if2977 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _170_in_stmt_if2998 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_if3000 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3003 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3006 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3009 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_stmt_if3012 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if3014 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if3017 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_if3053 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x20120240000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_if3055 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _176_in_stmt_while3086 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_while3088 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3092 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3095 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_while3119 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x20120240000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _171_in_stmt_while3145 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_while3147 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3151 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_stmt_while3178 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x20120240000004UL});
		public static readonly BitSet _inline_stmt_block_in_stmt_while3180 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_while3204 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_while3206 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while3209 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while3212 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_range3234 = new BitSet(new ulong[]{0x0UL,0x8000000000000UL});
		public static readonly BitSet _115_in_for_range3236 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_range3240 = new BitSet(new ulong[]{0x2UL,0x0UL,0xC000004000UL});
		public static readonly BitSet _167_in_for_range3244 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_range3248 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3251 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_range3255 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _166_in_for_range3285 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_range3289 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3292 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_range3296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_for_range3326 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_range3330 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200UL});
		public static readonly BitSet _137_in_for_range3333 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_range3337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_for_when3395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_for_map3414 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_for_map3416 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_for_map3418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_range_in_for_item3439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_when_in_for_item3444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _for_map_in_for_item3449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_stmt_for3460 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _for_item_in_stmt_for3464 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL});
		public static readonly BitSet _99_in_stmt_for3467 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _for_item_in_stmt_for3469 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for3473 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for3476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _168_in_stmt_try3507 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3509 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3512 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3514 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_stmt_try3517 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try3519 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_try3521 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try3524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _174_in_switch_item3547 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_switch_item3549 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL,0x2000000000UL});
		public static readonly BitSet _99_in_switch_item3552 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_switch_item3554 = new BitSet(new ulong[]{0x80000000000000UL,0x800000000UL,0x2000000000UL});
		public static readonly BitSet _NEWLINE_in_switch_item3560 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_switch_item3563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _165_in_switch_item3609 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x20120240000004UL});
		public static readonly BitSet _inline_stmt_block_in_switch_item3611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _164_in_stmt_switch3651 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_stmt_switch3653 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3656 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_stmt_switch3659 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3661 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x400000000000UL});
		public static readonly BitSet _switch_item_in_stmt_switch3665 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3667 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x400000008000UL});
		public static readonly BitSet _143_in_stmt_switch3673 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3675 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_switch3678 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_stmt_switch3680 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_stmt_switch3685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list3711 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_ident_list3714 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_ident_list3716 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc3738 = new BitSet(new ulong[]{0x0UL,0x1400000000000UL});
		public static readonly BitSet _110_in_stmt_alloc3742 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_stmt_alloc3744 = new BitSet(new ulong[]{0x2UL,0x101000010000000UL});
		public static readonly BitSet _120_in_stmt_alloc3749 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _112_in_stmt_alloc3753 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3756 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bracket_expr_list_in_stmt_alloc3807 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_alloc3871 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3875 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_stmt_alloc3878 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_stmt_alloc3880 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3910 = new BitSet(new ulong[]{0x2UL,0xC130208489000000UL,0x4000000000042UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3914 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3916 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_modify3940 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_modify3969 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify3971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _126_in_stmt_modify4000 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_stmt_modify4002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_in_where_item4036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_where_expr4050 = new BitSet(new ulong[]{0x80000000000002UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4060 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4063 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4065 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x800000000000UL});
		public static readonly BitSet _175_in_where_expr4068 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _where_item_in_where_expr4072 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4076 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4112 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4115 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4117 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _where_item_in_where_expr4121 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4123 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _DEDENT_in_where_expr4128 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4130 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4133 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_where_expr4183 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4186 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4188 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _where_item_in_where_expr4192 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4194 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _DEDENT_in_where_expr4199 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_where_expr4201 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_where_expr4204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _175_in_where_expr4242 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4244 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_where_expr4247 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _NEWLINE_in_where_expr4249 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _where_item_in_where_expr4253 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_where_expr4255 = new BitSet(new ulong[]{0x80400000000100UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _DEDENT_in_where_expr4260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _152_in_let_expr4318 = new BitSet(new ulong[]{0x400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _where_item_in_let_expr4320 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x200000UL});
		public static readonly BitSet _149_in_let_expr4324 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_let_expr4328 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4352 = new BitSet(new ulong[]{0x2180C00000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _INDENT_in_let_expr4357 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _NEWLINE_in_let_expr4359 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_let_expr4362 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4364 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_let_expr4393 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_let_expr4440 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_let_expr4443 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _NEWLINE_in_let_expr4445 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12440E2004UL});
		public static readonly BitSet _where_item_in_let_expr4449 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4451 = new BitSet(new ulong[]{0x80400000000000UL,0x3354200000UL,0x211F12442E2004UL});
		public static readonly BitSet _149_in_let_expr4456 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_let_expr4458 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_let_expr4460 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_let_expr4463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _177_in_match_item4495 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_match_item4497 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _123_in_match_item4499 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _where_expr_in_match_item4501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_match_expr4522 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_match_expr4524 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4527 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _INDENT_in_match_expr4530 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4532 = new BitSet(new ulong[]{0x80000000000000UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _match_item_in_match_expr4536 = new BitSet(new ulong[]{0x80000000000000UL});
		public static readonly BitSet _NEWLINE_in_match_expr4538 = new BitSet(new ulong[]{0x80000000000100UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _DEDENT_in_match_expr4543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _feed_expr_in_expr4566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _match_expr_in_expr4571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _let_expr_in_expr4576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_feed_expr4605 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL,0x8000000000000UL});
		public static readonly BitSet _119_in_feed_expr4615 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006000000CUL});
		public static readonly BitSet _list_expr_in_feed_expr4617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _179_in_feed_expr4651 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006000000CUL});
		public static readonly BitSet _list_expr_in_feed_expr4653 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_feed_expr4690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_list_expr4711 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4713 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_list_expr4715 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _for_item_in_list_expr4717 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4720 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _for_item_in_list_expr4722 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_list_expr4726 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _110_in_list_expr4728 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_list_expr4730 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_list_expr4758 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000001CUL});
		public static readonly BitSet _99_in_list_expr4762 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _NEWLINE_in_list_expr4766 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _INDENT_in_list_expr4770 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _DEDENT_in_list_expr4774 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4778 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4782 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _NEWLINE_in_list_expr4786 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _INDENT_in_list_expr4790 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _DEDENT_in_list_expr4794 = new BitSet(new ulong[]{0x2180C00000000100UL,0x3B54200000UL,0x2000006000000CUL});
		public static readonly BitSet _feed_expr_in_list_expr4798 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_list_expr4805 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _NEWLINE_in_list_expr4809 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _INDENT_in_list_expr4813 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _DEDENT_in_list_expr4817 = new BitSet(new ulong[]{0x80800000000100UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_list_expr4821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr4835 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_lambda_value4846 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_lambda_value4863 = new BitSet(new ulong[]{0x80800000000000UL});
		public static readonly BitSet _stmt_block_in_lambda_value4866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lambda_type4881 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_lambda_type4883 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lambda_type4885 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lambda_expr4900 = new BitSet(new ulong[]{0x400000000000UL,0x1000020000000UL});
		public static readonly BitSet _func_args_in_lambda_expr4902 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_lambda_expr4905 = new BitSet(new ulong[]{0x0UL,0xC00014010000000UL});
		public static readonly BitSet _lambda_type_in_lambda_expr4907 = new BitSet(new ulong[]{0x0UL,0xC00014000000000UL});
		public static readonly BitSet _104_in_lambda_expr4912 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_lambda_expr4949 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_lambda_expr4983 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr4985 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_lambda_expr5020 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _lambda_value_in_lambda_expr5022 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr5057 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr5114 = new BitSet(new ulong[]{0x2UL,0x8121208489000000UL,0x4000000000040UL});
		public static readonly BitSet _set_in_modify_expr5118 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _cond_expr_in_modify_expr5163 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _120_in_modify_expr5172 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _cond_expr_in_modify_expr5175 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item5188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr5200 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1UL});
		public static readonly BitSet _128_in_cond_expr5209 = new BitSet(new ulong[]{0x2100400000000002UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5215 = new BitSet(new ulong[]{0x2UL,0x400000000000UL});
		public static readonly BitSet _110_in_cond_expr5219 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr5223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr5337 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000080000000UL});
		public static readonly BitSet _or_op_in_or_expr5348 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _and_expr_in_or_expr5352 = new BitSet(new ulong[]{0x2UL,0x0UL,0x10000080000000UL});
		public static readonly BitSet _bit_or_in_and_expr5394 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x100UL});
		public static readonly BitSet _and_op_in_and_expr5405 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _bit_or_in_and_expr5409 = new BitSet(new ulong[]{0x2UL,0x2000000UL,0x100UL});
		public static readonly BitSet _bit_xor_in_bit_or5440 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _177_in_bit_or5449 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _bit_xor_in_bit_or5453 = new BitSet(new ulong[]{0x2UL,0x0UL,0x2000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor5483 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_bit_xor5492 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _bit_and_in_bit_xor5496 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20UL});
		public static readonly BitSet _cmp_expr_in_bit_and5526 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _90_in_bit_and5535 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _cmp_expr_in_bit_and5539 = new BitSet(new ulong[]{0x2UL,0x4000000UL});
		public static readonly BitSet _chain_op_in_chain_list5631 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _shift_expr_in_chain_list5633 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0xC00000UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5647 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0xC00000UL});
		public static readonly BitSet _114_in_cmp_expr5676 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5678 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_cmp_expr5681 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_cmp_expr5683 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_cmp_expr5687 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_cmp_expr5689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_cmp_expr5720 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5724 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0xC00000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5728 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr5805 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _shift_expr_in_cmp_expr5809 = new BitSet(new ulong[]{0x2UL,0x3244000000400000UL,0xC00000UL});
		public static readonly BitSet _chain_list_in_cmp_expr5813 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr5915 = new BitSet(new ulong[]{0x2UL,0x4010000000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr5924 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _add_expr_in_shift_expr5928 = new BitSet(new ulong[]{0x2UL,0x4010000000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr5958 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _96_in_add_expr5968 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _mul_expr_in_add_expr5972 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _100_in_add_expr5997 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _mul_expr_in_add_expr6001 = new BitSet(new ulong[]{0x2UL,0x1100000000UL});
		public static readonly BitSet _infix_expr_in_mul_expr6039 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _94_in_mul_expr6049 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6053 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _108_in_mul_expr6080 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6084 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _87_in_mul_expr6111 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _infix_expr_in_mul_expr6115 = new BitSet(new ulong[]{0x2UL,0x100040800000UL});
		public static readonly BitSet _selector_expr_in_infix_expr6155 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80UL});
		public static readonly BitSet _infix_func_in_infix_expr6165 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _selector_expr_in_infix_expr6169 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80UL});
		public static readonly BitSet _cast_expr_in_selector_expr6201 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _105_in_selector_expr6211 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_selector_expr6215 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _107_in_selector_expr6241 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_selector_expr6246 = new BitSet(new ulong[]{0x2UL,0xA0000000000UL});
		public static readonly BitSet _92_in_cast_expr6295 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_cast_expr6297 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_cast_expr6299 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_in_cast_expr6316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr6366 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr6368 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _157_in_prefix_expr6384 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0xC02001000UL});
		public static readonly BitSet _type_no_array_in_prefix_expr6386 = new BitSet(new ulong[]{0x0UL,0x10000000UL,0x8UL});
		public static readonly BitSet _bracket_expr_list_in_prefix_expr6390 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _square_expr_list_in_prefix_expr6412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr6437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_square_expr_list6449 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_square_expr_list6451 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _99_in_square_expr_list6454 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_square_expr_list6456 = new BitSet(new ulong[]{0x0UL,0x800000000UL,0x10UL});
		public static readonly BitSet _132_in_square_expr_list6460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_bracket_expr_list6480 = new BitSet(new ulong[]{0x2180400000000000UL,0x3374200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6483 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6486 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6488 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6518 = new BitSet(new ulong[]{0x2180C00000000000UL,0x3374200000UL,0x2000006900000CUL});
		public static readonly BitSet _INDENT_in_bracket_expr_list6523 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6525 = new BitSet(new ulong[]{0x2180400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6528 = new BitSet(new ulong[]{0x80000000000100UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6532 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x2000006900000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6536 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6540 = new BitSet(new ulong[]{0x80000000000100UL,0x820000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6544 = new BitSet(new ulong[]{0x80000000000100UL,0x20000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6549 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6551 = new BitSet(new ulong[]{0x80000000000100UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DEDENT_in_bracket_expr_list6558 = new BitSet(new ulong[]{0x80000000000000UL,0x20000000UL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6560 = new BitSet(new ulong[]{0x80000000000000UL,0x20000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6563 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_bracket_expr_list6590 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _99_in_bracket_expr_list6594 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x2000006900000CUL});
		public static readonly BitSet _NEWLINE_in_bracket_expr_list6598 = new BitSet(new ulong[]{0x2180400000000000UL,0x3B54200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_bracket_expr_list6602 = new BitSet(new ulong[]{0x80000000000000UL,0x820000000UL});
		public static readonly BitSet _93_in_bracket_expr_list6608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_expr_in_suffix_expr6655 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _97_in_suffix_expr6665 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _101_in_suffix_expr6691 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _106_in_suffix_expr6714 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6716 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _104_in_suffix_expr6741 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6743 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6768 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _square_expr_list_in_suffix_expr6791 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _130_in_suffix_expr6814 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_suffix_expr6816 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_suffix_expr6818 = new BitSet(new ulong[]{0x2UL,0x52210000000UL,0xCUL});
		public static readonly BitSet _NUMBER_in_atom_expr6856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr6861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr6866 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_atom_expr6871 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_atom_expr6873 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_atom_expr6886 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_atom_expr6890 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _99_in_atom_expr6895 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006900000CUL});
		public static readonly BitSet _expr_in_atom_expr6897 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_atom_expr6901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _93_in_atom_expr6928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_item6959 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_lvalue_prefix6971 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x20000040000004UL});
		public static readonly BitSet _lvalue_prefix_in_lvalue_prefix6973 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_suffix_in_lvalue_prefix6989 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_suffix7003 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _97_in_lvalue_suffix7013 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _101_in_lvalue_suffix7041 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _106_in_lvalue_suffix7066 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7068 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _104_in_lvalue_suffix7095 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_suffix7097 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _generic_parameter_in_lvalue_suffix7124 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_lvalue_suffix7127 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _square_expr_list_in_lvalue_suffix7155 = new BitSet(new ulong[]{0x2UL,0x4052210000000UL,0x8UL});
		public static readonly BitSet _ident_in_lvalue_atom7193 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_lvalue_atom7198 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom7200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_lvalue7219 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x20000040000004UL});
		public static readonly BitSet _lvalue_item_in_lvalue7221 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_lvalue7224 = new BitSet(new ulong[]{0x400000000000UL,0x3344200000UL,0x20000040000004UL});
		public static readonly BitSet _lvalue_item_in_lvalue7226 = new BitSet(new ulong[]{0x0UL,0x820000000UL});
		public static readonly BitSet _93_in_lvalue7230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue7244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident7255 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_ident7258 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _IDENT_in_ident7260 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _135_in_infix_func7273 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_infix_func7276 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80UL});
		public static readonly BitSet _135_in_infix_func7278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_synpred1_SugarCpp4588 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL,0x8000000000000UL});
		public static readonly BitSet _set_in_synpred1_SugarCpp4590 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_synpred2_SugarCpp4702 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x2000006000000CUL});
		public static readonly BitSet _feed_expr_in_synpred2_SugarCpp4704 = new BitSet(new ulong[]{0x0UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_synpred2_SugarCpp4706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_synpred3_SugarCpp5658 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5660 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _99_in_synpred3_SugarCpp5663 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ident_in_synpred3_SugarCpp5665 = new BitSet(new ulong[]{0x0UL,0x1000000800000000UL});
		public static readonly BitSet _124_in_synpred3_SugarCpp5669 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _bracket_expr_list_in_synpred3_SugarCpp5671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _92_in_synpred4_SugarCpp6284 = new BitSet(new ulong[]{0x400000000000UL,0x10000000UL,0xC02001000UL});
		public static readonly BitSet _type_name_in_synpred4_SugarCpp6286 = new BitSet(new ulong[]{0x0UL,0x20000000UL});
		public static readonly BitSet _93_in_synpred4_SugarCpp6288 = new BitSet(new ulong[]{0x2100400000000000UL,0x3354200000UL,0x20000060000004UL});
		public static readonly BitSet _prefix_expr_in_synpred4_SugarCpp6290 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
